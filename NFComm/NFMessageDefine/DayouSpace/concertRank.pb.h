// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concertRank.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_concertRank_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_concertRank_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_concertRank_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_concertRank_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_concertRank_2eproto;
namespace concert {
class CTopRank;
class CTopRankDefaultTypeInternal;
extern CTopRankDefaultTypeInternal _CTopRank_default_instance_;
class Rank;
class RankDefaultTypeInternal;
extern RankDefaultTypeInternal _Rank_default_instance_;
class STopRank;
class STopRankDefaultTypeInternal;
extern STopRankDefaultTypeInternal _STopRank_default_instance_;
class SelfRank;
class SelfRankDefaultTypeInternal;
extern SelfRankDefaultTypeInternal _SelfRank_default_instance_;
}  // namespace concert
PROTOBUF_NAMESPACE_OPEN
template<> ::concert::CTopRank* Arena::CreateMaybeMessage<::concert::CTopRank>(Arena*);
template<> ::concert::Rank* Arena::CreateMaybeMessage<::concert::Rank>(Arena*);
template<> ::concert::STopRank* Arena::CreateMaybeMessage<::concert::STopRank>(Arena*);
template<> ::concert::SelfRank* Arena::CreateMaybeMessage<::concert::SelfRank>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace concert {

// ===================================================================

class CTopRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.CTopRank) */ {
 public:
  CTopRank();
  virtual ~CTopRank();

  CTopRank(const CTopRank& from);
  CTopRank(CTopRank&& from) noexcept
    : CTopRank() {
    *this = ::std::move(from);
  }

  inline CTopRank& operator=(const CTopRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTopRank& operator=(CTopRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTopRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTopRank* internal_default_instance() {
    return reinterpret_cast<const CTopRank*>(
               &_CTopRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CTopRank& a, CTopRank& b) {
    a.Swap(&b);
  }
  inline void Swap(CTopRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTopRank* New() const final {
    return CreateMaybeMessage<CTopRank>(nullptr);
  }

  CTopRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTopRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTopRank& from);
  void MergeFrom(const CTopRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTopRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.CTopRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertRank_2eproto);
    return ::descriptor_table_concertRank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:concert.CTopRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertRank_2eproto;
};
// -------------------------------------------------------------------

class STopRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.STopRank) */ {
 public:
  STopRank();
  virtual ~STopRank();

  STopRank(const STopRank& from);
  STopRank(STopRank&& from) noexcept
    : STopRank() {
    *this = ::std::move(from);
  }

  inline STopRank& operator=(const STopRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline STopRank& operator=(STopRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STopRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STopRank* internal_default_instance() {
    return reinterpret_cast<const STopRank*>(
               &_STopRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(STopRank& a, STopRank& b) {
    a.Swap(&b);
  }
  inline void Swap(STopRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STopRank* New() const final {
    return CreateMaybeMessage<STopRank>(nullptr);
  }

  STopRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STopRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STopRank& from);
  void MergeFrom(const STopRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STopRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.STopRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertRank_2eproto);
    return ::descriptor_table_concertRank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLikeListFieldNumber = 1,
    kMoneyListFieldNumber = 2,
    kSelfFieldNumber = 3,
  };
  // repeated .concert.Rank likeList = 1;
  int likelist_size() const;
  private:
  int _internal_likelist_size() const;
  public:
  void clear_likelist();
  ::concert::Rank* mutable_likelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank >*
      mutable_likelist();
  private:
  const ::concert::Rank& _internal_likelist(int index) const;
  ::concert::Rank* _internal_add_likelist();
  public:
  const ::concert::Rank& likelist(int index) const;
  ::concert::Rank* add_likelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank >&
      likelist() const;

  // repeated .concert.Rank moneyList = 2;
  int moneylist_size() const;
  private:
  int _internal_moneylist_size() const;
  public:
  void clear_moneylist();
  ::concert::Rank* mutable_moneylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank >*
      mutable_moneylist();
  private:
  const ::concert::Rank& _internal_moneylist(int index) const;
  ::concert::Rank* _internal_add_moneylist();
  public:
  const ::concert::Rank& moneylist(int index) const;
  ::concert::Rank* add_moneylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank >&
      moneylist() const;

  // .concert.SelfRank self = 3;
  bool has_self() const;
  private:
  bool _internal_has_self() const;
  public:
  void clear_self();
  const ::concert::SelfRank& self() const;
  ::concert::SelfRank* release_self();
  ::concert::SelfRank* mutable_self();
  void set_allocated_self(::concert::SelfRank* self);
  private:
  const ::concert::SelfRank& _internal_self() const;
  ::concert::SelfRank* _internal_mutable_self();
  public:

  // @@protoc_insertion_point(class_scope:concert.STopRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank > likelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank > moneylist_;
  ::concert::SelfRank* self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertRank_2eproto;
};
// -------------------------------------------------------------------

class Rank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.Rank) */ {
 public:
  Rank();
  virtual ~Rank();

  Rank(const Rank& from);
  Rank(Rank&& from) noexcept
    : Rank() {
    *this = ::std::move(from);
  }

  inline Rank& operator=(const Rank& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rank& operator=(Rank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rank* internal_default_instance() {
    return reinterpret_cast<const Rank*>(
               &_Rank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Rank& a, Rank& b) {
    a.Swap(&b);
  }
  inline void Swap(Rank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rank* New() const final {
    return CreateMaybeMessage<Rank>(nullptr);
  }

  Rank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rank& from);
  void MergeFrom(const Rank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.Rank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertRank_2eproto);
    return ::descriptor_table_concertRank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 2,
    kNameFieldNumber = 3,
    kMeshFieldNumber = 5,
    kRankFieldNumber = 1,
    kAmountFieldNumber = 4,
  };
  // string icon = 2;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mesh = 5;
  void clear_mesh();
  const std::string& mesh() const;
  void set_mesh(const std::string& value);
  void set_mesh(std::string&& value);
  void set_mesh(const char* value);
  void set_mesh(const char* value, size_t size);
  std::string* mutable_mesh();
  std::string* release_mesh();
  void set_allocated_mesh(std::string* mesh);
  private:
  const std::string& _internal_mesh() const;
  void _internal_set_mesh(const std::string& value);
  std::string* _internal_mutable_mesh();
  public:

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 amount = 4;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.Rank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mesh_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertRank_2eproto;
};
// -------------------------------------------------------------------

class SelfRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SelfRank) */ {
 public:
  SelfRank();
  virtual ~SelfRank();

  SelfRank(const SelfRank& from);
  SelfRank(SelfRank&& from) noexcept
    : SelfRank() {
    *this = ::std::move(from);
  }

  inline SelfRank& operator=(const SelfRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfRank& operator=(SelfRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelfRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelfRank* internal_default_instance() {
    return reinterpret_cast<const SelfRank*>(
               &_SelfRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SelfRank& a, SelfRank& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelfRank* New() const final {
    return CreateMaybeMessage<SelfRank>(nullptr);
  }

  SelfRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelfRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelfRank& from);
  void MergeFrom(const SelfRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SelfRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertRank_2eproto);
    return ::descriptor_table_concertRank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 3,
    kNameFieldNumber = 4,
    kLikeRankFieldNumber = 1,
    kMoneyRankFieldNumber = 2,
    kLikeAmountFieldNumber = 5,
    kMoneyAmountFieldNumber = 6,
  };
  // string icon = 3;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 likeRank = 1;
  void clear_likerank();
  ::PROTOBUF_NAMESPACE_ID::int32 likerank() const;
  void set_likerank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_likerank() const;
  void _internal_set_likerank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 moneyRank = 2;
  void clear_moneyrank();
  ::PROTOBUF_NAMESPACE_ID::int32 moneyrank() const;
  void set_moneyrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moneyrank() const;
  void _internal_set_moneyrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 likeAmount = 5;
  void clear_likeamount();
  ::PROTOBUF_NAMESPACE_ID::int32 likeamount() const;
  void set_likeamount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_likeamount() const;
  void _internal_set_likeamount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 moneyAmount = 6;
  void clear_moneyamount();
  ::PROTOBUF_NAMESPACE_ID::int32 moneyamount() const;
  void set_moneyamount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moneyamount() const;
  void _internal_set_moneyamount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.SelfRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 likerank_;
  ::PROTOBUF_NAMESPACE_ID::int32 moneyrank_;
  ::PROTOBUF_NAMESPACE_ID::int32 likeamount_;
  ::PROTOBUF_NAMESPACE_ID::int32 moneyamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertRank_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CTopRank

// -------------------------------------------------------------------

// STopRank

// repeated .concert.Rank likeList = 1;
inline int STopRank::_internal_likelist_size() const {
  return likelist_.size();
}
inline int STopRank::likelist_size() const {
  return _internal_likelist_size();
}
inline void STopRank::clear_likelist() {
  likelist_.Clear();
}
inline ::concert::Rank* STopRank::mutable_likelist(int index) {
  // @@protoc_insertion_point(field_mutable:concert.STopRank.likeList)
  return likelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank >*
STopRank::mutable_likelist() {
  // @@protoc_insertion_point(field_mutable_list:concert.STopRank.likeList)
  return &likelist_;
}
inline const ::concert::Rank& STopRank::_internal_likelist(int index) const {
  return likelist_.Get(index);
}
inline const ::concert::Rank& STopRank::likelist(int index) const {
  // @@protoc_insertion_point(field_get:concert.STopRank.likeList)
  return _internal_likelist(index);
}
inline ::concert::Rank* STopRank::_internal_add_likelist() {
  return likelist_.Add();
}
inline ::concert::Rank* STopRank::add_likelist() {
  // @@protoc_insertion_point(field_add:concert.STopRank.likeList)
  return _internal_add_likelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank >&
STopRank::likelist() const {
  // @@protoc_insertion_point(field_list:concert.STopRank.likeList)
  return likelist_;
}

// repeated .concert.Rank moneyList = 2;
inline int STopRank::_internal_moneylist_size() const {
  return moneylist_.size();
}
inline int STopRank::moneylist_size() const {
  return _internal_moneylist_size();
}
inline void STopRank::clear_moneylist() {
  moneylist_.Clear();
}
inline ::concert::Rank* STopRank::mutable_moneylist(int index) {
  // @@protoc_insertion_point(field_mutable:concert.STopRank.moneyList)
  return moneylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank >*
STopRank::mutable_moneylist() {
  // @@protoc_insertion_point(field_mutable_list:concert.STopRank.moneyList)
  return &moneylist_;
}
inline const ::concert::Rank& STopRank::_internal_moneylist(int index) const {
  return moneylist_.Get(index);
}
inline const ::concert::Rank& STopRank::moneylist(int index) const {
  // @@protoc_insertion_point(field_get:concert.STopRank.moneyList)
  return _internal_moneylist(index);
}
inline ::concert::Rank* STopRank::_internal_add_moneylist() {
  return moneylist_.Add();
}
inline ::concert::Rank* STopRank::add_moneylist() {
  // @@protoc_insertion_point(field_add:concert.STopRank.moneyList)
  return _internal_add_moneylist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::Rank >&
STopRank::moneylist() const {
  // @@protoc_insertion_point(field_list:concert.STopRank.moneyList)
  return moneylist_;
}

// .concert.SelfRank self = 3;
inline bool STopRank::_internal_has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline bool STopRank::has_self() const {
  return _internal_has_self();
}
inline void STopRank::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
inline const ::concert::SelfRank& STopRank::_internal_self() const {
  const ::concert::SelfRank* p = self_;
  return p != nullptr ? *p : *reinterpret_cast<const ::concert::SelfRank*>(
      &::concert::_SelfRank_default_instance_);
}
inline const ::concert::SelfRank& STopRank::self() const {
  // @@protoc_insertion_point(field_get:concert.STopRank.self)
  return _internal_self();
}
inline ::concert::SelfRank* STopRank::release_self() {
  // @@protoc_insertion_point(field_release:concert.STopRank.self)
  
  ::concert::SelfRank* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::concert::SelfRank* STopRank::_internal_mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::concert::SelfRank>(GetArenaNoVirtual());
    self_ = p;
  }
  return self_;
}
inline ::concert::SelfRank* STopRank::mutable_self() {
  // @@protoc_insertion_point(field_mutable:concert.STopRank.self)
  return _internal_mutable_self();
}
inline void STopRank::set_allocated_self(::concert::SelfRank* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete self_;
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:concert.STopRank.self)
}

// -------------------------------------------------------------------

// Rank

// int32 rank = 1;
inline void Rank::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rank::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rank::rank() const {
  // @@protoc_insertion_point(field_get:concert.Rank.rank)
  return _internal_rank();
}
inline void Rank::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void Rank::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:concert.Rank.rank)
}

// string icon = 2;
inline void Rank::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Rank::icon() const {
  // @@protoc_insertion_point(field_get:concert.Rank.icon)
  return _internal_icon();
}
inline void Rank::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:concert.Rank.icon)
}
inline std::string* Rank::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:concert.Rank.icon)
  return _internal_mutable_icon();
}
inline const std::string& Rank::_internal_icon() const {
  return icon_.GetNoArena();
}
inline void Rank::_internal_set_icon(const std::string& value) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Rank::set_icon(std::string&& value) {
  
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:concert.Rank.icon)
}
inline void Rank::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:concert.Rank.icon)
}
inline void Rank::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:concert.Rank.icon)
}
inline std::string* Rank::_internal_mutable_icon() {
  
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Rank::release_icon() {
  // @@protoc_insertion_point(field_release:concert.Rank.icon)
  
  return icon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Rank::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:concert.Rank.icon)
}

// string name = 3;
inline void Rank::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Rank::name() const {
  // @@protoc_insertion_point(field_get:concert.Rank.name)
  return _internal_name();
}
inline void Rank::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:concert.Rank.name)
}
inline std::string* Rank::mutable_name() {
  // @@protoc_insertion_point(field_mutable:concert.Rank.name)
  return _internal_mutable_name();
}
inline const std::string& Rank::_internal_name() const {
  return name_.GetNoArena();
}
inline void Rank::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Rank::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:concert.Rank.name)
}
inline void Rank::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:concert.Rank.name)
}
inline void Rank::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:concert.Rank.name)
}
inline std::string* Rank::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Rank::release_name() {
  // @@protoc_insertion_point(field_release:concert.Rank.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Rank::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:concert.Rank.name)
}

// int32 amount = 4;
inline void Rank::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rank::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rank::amount() const {
  // @@protoc_insertion_point(field_get:concert.Rank.amount)
  return _internal_amount();
}
inline void Rank::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void Rank::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:concert.Rank.amount)
}

// string mesh = 5;
inline void Rank::clear_mesh() {
  mesh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Rank::mesh() const {
  // @@protoc_insertion_point(field_get:concert.Rank.mesh)
  return _internal_mesh();
}
inline void Rank::set_mesh(const std::string& value) {
  _internal_set_mesh(value);
  // @@protoc_insertion_point(field_set:concert.Rank.mesh)
}
inline std::string* Rank::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:concert.Rank.mesh)
  return _internal_mutable_mesh();
}
inline const std::string& Rank::_internal_mesh() const {
  return mesh_.GetNoArena();
}
inline void Rank::_internal_set_mesh(const std::string& value) {
  
  mesh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Rank::set_mesh(std::string&& value) {
  
  mesh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:concert.Rank.mesh)
}
inline void Rank::set_mesh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mesh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:concert.Rank.mesh)
}
inline void Rank::set_mesh(const char* value, size_t size) {
  
  mesh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:concert.Rank.mesh)
}
inline std::string* Rank::_internal_mutable_mesh() {
  
  return mesh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Rank::release_mesh() {
  // @@protoc_insertion_point(field_release:concert.Rank.mesh)
  
  return mesh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Rank::set_allocated_mesh(std::string* mesh) {
  if (mesh != nullptr) {
    
  } else {
    
  }
  mesh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mesh);
  // @@protoc_insertion_point(field_set_allocated:concert.Rank.mesh)
}

// -------------------------------------------------------------------

// SelfRank

// int32 likeRank = 1;
inline void SelfRank::clear_likerank() {
  likerank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfRank::_internal_likerank() const {
  return likerank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfRank::likerank() const {
  // @@protoc_insertion_point(field_get:concert.SelfRank.likeRank)
  return _internal_likerank();
}
inline void SelfRank::_internal_set_likerank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  likerank_ = value;
}
inline void SelfRank::set_likerank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_likerank(value);
  // @@protoc_insertion_point(field_set:concert.SelfRank.likeRank)
}

// int32 moneyRank = 2;
inline void SelfRank::clear_moneyrank() {
  moneyrank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfRank::_internal_moneyrank() const {
  return moneyrank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfRank::moneyrank() const {
  // @@protoc_insertion_point(field_get:concert.SelfRank.moneyRank)
  return _internal_moneyrank();
}
inline void SelfRank::_internal_set_moneyrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moneyrank_ = value;
}
inline void SelfRank::set_moneyrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moneyrank(value);
  // @@protoc_insertion_point(field_set:concert.SelfRank.moneyRank)
}

// string icon = 3;
inline void SelfRank::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SelfRank::icon() const {
  // @@protoc_insertion_point(field_get:concert.SelfRank.icon)
  return _internal_icon();
}
inline void SelfRank::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:concert.SelfRank.icon)
}
inline std::string* SelfRank::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:concert.SelfRank.icon)
  return _internal_mutable_icon();
}
inline const std::string& SelfRank::_internal_icon() const {
  return icon_.GetNoArena();
}
inline void SelfRank::_internal_set_icon(const std::string& value) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SelfRank::set_icon(std::string&& value) {
  
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:concert.SelfRank.icon)
}
inline void SelfRank::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:concert.SelfRank.icon)
}
inline void SelfRank::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:concert.SelfRank.icon)
}
inline std::string* SelfRank::_internal_mutable_icon() {
  
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SelfRank::release_icon() {
  // @@protoc_insertion_point(field_release:concert.SelfRank.icon)
  
  return icon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SelfRank::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:concert.SelfRank.icon)
}

// string name = 4;
inline void SelfRank::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SelfRank::name() const {
  // @@protoc_insertion_point(field_get:concert.SelfRank.name)
  return _internal_name();
}
inline void SelfRank::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:concert.SelfRank.name)
}
inline std::string* SelfRank::mutable_name() {
  // @@protoc_insertion_point(field_mutable:concert.SelfRank.name)
  return _internal_mutable_name();
}
inline const std::string& SelfRank::_internal_name() const {
  return name_.GetNoArena();
}
inline void SelfRank::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SelfRank::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:concert.SelfRank.name)
}
inline void SelfRank::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:concert.SelfRank.name)
}
inline void SelfRank::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:concert.SelfRank.name)
}
inline std::string* SelfRank::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SelfRank::release_name() {
  // @@protoc_insertion_point(field_release:concert.SelfRank.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SelfRank::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:concert.SelfRank.name)
}

// int32 likeAmount = 5;
inline void SelfRank::clear_likeamount() {
  likeamount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfRank::_internal_likeamount() const {
  return likeamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfRank::likeamount() const {
  // @@protoc_insertion_point(field_get:concert.SelfRank.likeAmount)
  return _internal_likeamount();
}
inline void SelfRank::_internal_set_likeamount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  likeamount_ = value;
}
inline void SelfRank::set_likeamount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_likeamount(value);
  // @@protoc_insertion_point(field_set:concert.SelfRank.likeAmount)
}

// int32 moneyAmount = 6;
inline void SelfRank::clear_moneyamount() {
  moneyamount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfRank::_internal_moneyamount() const {
  return moneyamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelfRank::moneyamount() const {
  // @@protoc_insertion_point(field_get:concert.SelfRank.moneyAmount)
  return _internal_moneyamount();
}
inline void SelfRank::_internal_set_moneyamount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moneyamount_ = value;
}
inline void SelfRank::set_moneyamount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moneyamount(value);
  // @@protoc_insertion_point(field_set:concert.SelfRank.moneyAmount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace concert

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_concertRank_2eproto
