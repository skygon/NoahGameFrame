// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OtherUserStatusChange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OtherUserStatusChange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OtherUserStatusChange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "userInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OtherUserStatusChange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OtherUserStatusChange_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OtherUserStatusChange_2eproto;
namespace OtherUserStatusChange {
class SOtherUserEnterRoom;
class SOtherUserEnterRoomDefaultTypeInternal;
extern SOtherUserEnterRoomDefaultTypeInternal _SOtherUserEnterRoom_default_instance_;
class SOtherUserExitRoom;
class SOtherUserExitRoomDefaultTypeInternal;
extern SOtherUserExitRoomDefaultTypeInternal _SOtherUserExitRoom_default_instance_;
}  // namespace OtherUserStatusChange
PROTOBUF_NAMESPACE_OPEN
template<> ::OtherUserStatusChange::SOtherUserEnterRoom* Arena::CreateMaybeMessage<::OtherUserStatusChange::SOtherUserEnterRoom>(Arena*);
template<> ::OtherUserStatusChange::SOtherUserExitRoom* Arena::CreateMaybeMessage<::OtherUserStatusChange::SOtherUserExitRoom>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OtherUserStatusChange {

// ===================================================================

class SOtherUserEnterRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OtherUserStatusChange.SOtherUserEnterRoom) */ {
 public:
  SOtherUserEnterRoom();
  virtual ~SOtherUserEnterRoom();

  SOtherUserEnterRoom(const SOtherUserEnterRoom& from);
  SOtherUserEnterRoom(SOtherUserEnterRoom&& from) noexcept
    : SOtherUserEnterRoom() {
    *this = ::std::move(from);
  }

  inline SOtherUserEnterRoom& operator=(const SOtherUserEnterRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline SOtherUserEnterRoom& operator=(SOtherUserEnterRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SOtherUserEnterRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SOtherUserEnterRoom* internal_default_instance() {
    return reinterpret_cast<const SOtherUserEnterRoom*>(
               &_SOtherUserEnterRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SOtherUserEnterRoom& a, SOtherUserEnterRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(SOtherUserEnterRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SOtherUserEnterRoom* New() const final {
    return CreateMaybeMessage<SOtherUserEnterRoom>(nullptr);
  }

  SOtherUserEnterRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SOtherUserEnterRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SOtherUserEnterRoom& from);
  void MergeFrom(const SOtherUserEnterRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SOtherUserEnterRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OtherUserStatusChange.SOtherUserEnterRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OtherUserStatusChange_2eproto);
    return ::descriptor_table_OtherUserStatusChange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 1,
  };
  // repeated .userInfo.SUserInfo infoList = 1;
  int infolist_size() const;
  private:
  int _internal_infolist_size() const;
  public:
  void clear_infolist();
  ::userInfo::SUserInfo* mutable_infolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
      mutable_infolist();
  private:
  const ::userInfo::SUserInfo& _internal_infolist(int index) const;
  ::userInfo::SUserInfo* _internal_add_infolist();
  public:
  const ::userInfo::SUserInfo& infolist(int index) const;
  ::userInfo::SUserInfo* add_infolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
      infolist() const;

  // @@protoc_insertion_point(class_scope:OtherUserStatusChange.SOtherUserEnterRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo > infolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OtherUserStatusChange_2eproto;
};
// -------------------------------------------------------------------

class SOtherUserExitRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OtherUserStatusChange.SOtherUserExitRoom) */ {
 public:
  SOtherUserExitRoom();
  virtual ~SOtherUserExitRoom();

  SOtherUserExitRoom(const SOtherUserExitRoom& from);
  SOtherUserExitRoom(SOtherUserExitRoom&& from) noexcept
    : SOtherUserExitRoom() {
    *this = ::std::move(from);
  }

  inline SOtherUserExitRoom& operator=(const SOtherUserExitRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline SOtherUserExitRoom& operator=(SOtherUserExitRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SOtherUserExitRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SOtherUserExitRoom* internal_default_instance() {
    return reinterpret_cast<const SOtherUserExitRoom*>(
               &_SOtherUserExitRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SOtherUserExitRoom& a, SOtherUserExitRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(SOtherUserExitRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SOtherUserExitRoom* New() const final {
    return CreateMaybeMessage<SOtherUserExitRoom>(nullptr);
  }

  SOtherUserExitRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SOtherUserExitRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SOtherUserExitRoom& from);
  void MergeFrom(const SOtherUserExitRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SOtherUserExitRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OtherUserStatusChange.SOtherUserExitRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OtherUserStatusChange_2eproto);
    return ::descriptor_table_OtherUserStatusChange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 1,
  };
  // repeated .userInfo.SUserInfo infoList = 1;
  int infolist_size() const;
  private:
  int _internal_infolist_size() const;
  public:
  void clear_infolist();
  ::userInfo::SUserInfo* mutable_infolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
      mutable_infolist();
  private:
  const ::userInfo::SUserInfo& _internal_infolist(int index) const;
  ::userInfo::SUserInfo* _internal_add_infolist();
  public:
  const ::userInfo::SUserInfo& infolist(int index) const;
  ::userInfo::SUserInfo* add_infolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
      infolist() const;

  // @@protoc_insertion_point(class_scope:OtherUserStatusChange.SOtherUserExitRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo > infolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OtherUserStatusChange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SOtherUserEnterRoom

// repeated .userInfo.SUserInfo infoList = 1;
inline int SOtherUserEnterRoom::_internal_infolist_size() const {
  return infolist_.size();
}
inline int SOtherUserEnterRoom::infolist_size() const {
  return _internal_infolist_size();
}
inline ::userInfo::SUserInfo* SOtherUserEnterRoom::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:OtherUserStatusChange.SOtherUserEnterRoom.infoList)
  return infolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
SOtherUserEnterRoom::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:OtherUserStatusChange.SOtherUserEnterRoom.infoList)
  return &infolist_;
}
inline const ::userInfo::SUserInfo& SOtherUserEnterRoom::_internal_infolist(int index) const {
  return infolist_.Get(index);
}
inline const ::userInfo::SUserInfo& SOtherUserEnterRoom::infolist(int index) const {
  // @@protoc_insertion_point(field_get:OtherUserStatusChange.SOtherUserEnterRoom.infoList)
  return _internal_infolist(index);
}
inline ::userInfo::SUserInfo* SOtherUserEnterRoom::_internal_add_infolist() {
  return infolist_.Add();
}
inline ::userInfo::SUserInfo* SOtherUserEnterRoom::add_infolist() {
  // @@protoc_insertion_point(field_add:OtherUserStatusChange.SOtherUserEnterRoom.infoList)
  return _internal_add_infolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
SOtherUserEnterRoom::infolist() const {
  // @@protoc_insertion_point(field_list:OtherUserStatusChange.SOtherUserEnterRoom.infoList)
  return infolist_;
}

// -------------------------------------------------------------------

// SOtherUserExitRoom

// repeated .userInfo.SUserInfo infoList = 1;
inline int SOtherUserExitRoom::_internal_infolist_size() const {
  return infolist_.size();
}
inline int SOtherUserExitRoom::infolist_size() const {
  return _internal_infolist_size();
}
inline ::userInfo::SUserInfo* SOtherUserExitRoom::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:OtherUserStatusChange.SOtherUserExitRoom.infoList)
  return infolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
SOtherUserExitRoom::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:OtherUserStatusChange.SOtherUserExitRoom.infoList)
  return &infolist_;
}
inline const ::userInfo::SUserInfo& SOtherUserExitRoom::_internal_infolist(int index) const {
  return infolist_.Get(index);
}
inline const ::userInfo::SUserInfo& SOtherUserExitRoom::infolist(int index) const {
  // @@protoc_insertion_point(field_get:OtherUserStatusChange.SOtherUserExitRoom.infoList)
  return _internal_infolist(index);
}
inline ::userInfo::SUserInfo* SOtherUserExitRoom::_internal_add_infolist() {
  return infolist_.Add();
}
inline ::userInfo::SUserInfo* SOtherUserExitRoom::add_infolist() {
  // @@protoc_insertion_point(field_add:OtherUserStatusChange.SOtherUserExitRoom.infoList)
  return _internal_add_infolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
SOtherUserExitRoom::infolist() const {
  // @@protoc_insertion_point(field_list:OtherUserStatusChange.SOtherUserExitRoom.infoList)
  return infolist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OtherUserStatusChange

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OtherUserStatusChange_2eproto
