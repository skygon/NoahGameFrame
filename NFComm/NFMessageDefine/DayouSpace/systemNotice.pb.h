// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: systemNotice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_systemNotice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_systemNotice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_systemNotice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_systemNotice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_systemNotice_2eproto;
namespace systemDY {
class SSystemNotice;
class SSystemNoticeDefaultTypeInternal;
extern SSystemNoticeDefaultTypeInternal _SSystemNotice_default_instance_;
}  // namespace systemDY
PROTOBUF_NAMESPACE_OPEN
template<> ::systemDY::SSystemNotice* Arena::CreateMaybeMessage<::systemDY::SSystemNotice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace systemDY {

// ===================================================================

class SSystemNotice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:systemDY.SSystemNotice) */ {
 public:
  SSystemNotice();
  virtual ~SSystemNotice();

  SSystemNotice(const SSystemNotice& from);
  SSystemNotice(SSystemNotice&& from) noexcept
    : SSystemNotice() {
    *this = ::std::move(from);
  }

  inline SSystemNotice& operator=(const SSystemNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSystemNotice& operator=(SSystemNotice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSystemNotice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSystemNotice* internal_default_instance() {
    return reinterpret_cast<const SSystemNotice*>(
               &_SSystemNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSystemNotice& a, SSystemNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(SSystemNotice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSystemNotice* New() const final {
    return CreateMaybeMessage<SSystemNotice>(nullptr);
  }

  SSystemNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSystemNotice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSystemNotice& from);
  void MergeFrom(const SSystemNotice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSystemNotice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "systemDY.SSystemNotice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_systemNotice_2eproto);
    return ::descriptor_table_systemNotice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kTypeFieldNumber = 2,
    kNoticeIdFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 noticeId = 3;
  void clear_noticeid();
  ::PROTOBUF_NAMESPACE_ID::int32 noticeid() const;
  void set_noticeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_noticeid() const;
  void _internal_set_noticeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 endTime = 4;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int32 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:systemDY.SSystemNotice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 noticeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 endtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_systemNotice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSystemNotice

// string content = 1;
inline void SSystemNotice::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSystemNotice::content() const {
  // @@protoc_insertion_point(field_get:systemDY.SSystemNotice.content)
  return _internal_content();
}
inline void SSystemNotice::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:systemDY.SSystemNotice.content)
}
inline std::string* SSystemNotice::mutable_content() {
  // @@protoc_insertion_point(field_mutable:systemDY.SSystemNotice.content)
  return _internal_mutable_content();
}
inline const std::string& SSystemNotice::_internal_content() const {
  return content_.GetNoArena();
}
inline void SSystemNotice::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSystemNotice::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:systemDY.SSystemNotice.content)
}
inline void SSystemNotice::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:systemDY.SSystemNotice.content)
}
inline void SSystemNotice::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:systemDY.SSystemNotice.content)
}
inline std::string* SSystemNotice::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSystemNotice::release_content() {
  // @@protoc_insertion_point(field_release:systemDY.SSystemNotice.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSystemNotice::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:systemDY.SSystemNotice.content)
}

// int32 type = 2;
inline void SSystemNotice::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSystemNotice::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSystemNotice::type() const {
  // @@protoc_insertion_point(field_get:systemDY.SSystemNotice.type)
  return _internal_type();
}
inline void SSystemNotice::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SSystemNotice::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:systemDY.SSystemNotice.type)
}

// int32 noticeId = 3;
inline void SSystemNotice::clear_noticeid() {
  noticeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSystemNotice::_internal_noticeid() const {
  return noticeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSystemNotice::noticeid() const {
  // @@protoc_insertion_point(field_get:systemDY.SSystemNotice.noticeId)
  return _internal_noticeid();
}
inline void SSystemNotice::_internal_set_noticeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  noticeid_ = value;
}
inline void SSystemNotice::set_noticeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_noticeid(value);
  // @@protoc_insertion_point(field_set:systemDY.SSystemNotice.noticeId)
}

// int32 endTime = 4;
inline void SSystemNotice::clear_endtime() {
  endtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSystemNotice::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSystemNotice::endtime() const {
  // @@protoc_insertion_point(field_get:systemDY.SSystemNotice.endTime)
  return _internal_endtime();
}
inline void SSystemNotice::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endtime_ = value;
}
inline void SSystemNotice::set_endtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:systemDY.SSystemNotice.endTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace systemDY

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_systemNotice_2eproto
