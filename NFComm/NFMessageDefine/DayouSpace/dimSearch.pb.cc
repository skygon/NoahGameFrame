// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dimSearch.proto

#include "dimSearch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dimSearch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DimSearchRolesInfoList_dimSearch_2eproto;
namespace dimSearch {
class DimSearchRolesInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DimSearchRolesInfoList> _instance;
} _DimSearchRolesInfoList_default_instance_;
class CDimSearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDimSearch> _instance;
} _CDimSearch_default_instance_;
class SDimSearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDimSearch> _instance;
} _SDimSearch_default_instance_;
}  // namespace dimSearch
static void InitDefaultsscc_info_CDimSearch_dimSearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dimSearch::_CDimSearch_default_instance_;
    new (ptr) ::dimSearch::CDimSearch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dimSearch::CDimSearch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CDimSearch_dimSearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CDimSearch_dimSearch_2eproto}, {}};

static void InitDefaultsscc_info_DimSearchRolesInfoList_dimSearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dimSearch::_DimSearchRolesInfoList_default_instance_;
    new (ptr) ::dimSearch::DimSearchRolesInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dimSearch::DimSearchRolesInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DimSearchRolesInfoList_dimSearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DimSearchRolesInfoList_dimSearch_2eproto}, {}};

static void InitDefaultsscc_info_SDimSearch_dimSearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dimSearch::_SDimSearch_default_instance_;
    new (ptr) ::dimSearch::SDimSearch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dimSearch::SDimSearch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SDimSearch_dimSearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SDimSearch_dimSearch_2eproto}, {
      &scc_info_DimSearchRolesInfoList_dimSearch_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dimSearch_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dimSearch_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dimSearch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dimSearch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dimSearch::DimSearchRolesInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dimSearch::DimSearchRolesInfoList, headurl_),
  PROTOBUF_FIELD_OFFSET(::dimSearch::DimSearchRolesInfoList, name_),
  PROTOBUF_FIELD_OFFSET(::dimSearch::DimSearchRolesInfoList, uid_),
  PROTOBUF_FIELD_OFFSET(::dimSearch::DimSearchRolesInfoList, fans_),
  PROTOBUF_FIELD_OFFSET(::dimSearch::DimSearchRolesInfoList, follow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dimSearch::CDimSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dimSearch::CDimSearch, search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dimSearch::SDimSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dimSearch::SDimSearch, code_),
  PROTOBUF_FIELD_OFFSET(::dimSearch::SDimSearch, players_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dimSearch::DimSearchRolesInfoList)},
  { 10, -1, sizeof(::dimSearch::CDimSearch)},
  { 16, -1, sizeof(::dimSearch::SDimSearch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dimSearch::_DimSearchRolesInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dimSearch::_CDimSearch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dimSearch::_SDimSearch_default_instance_),
};

const char descriptor_table_protodef_dimSearch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dimSearch.proto\022\tdimSearch\"b\n\026DimSearc"
  "hRolesInfoList\022\017\n\007headUrl\030\001 \001(\t\022\014\n\004name\030"
  "\002 \001(\t\022\013\n\003uid\030\003 \001(\005\022\014\n\004fans\030\004 \001(\005\022\016\n\006foll"
  "ow\030\005 \001(\010\"\034\n\nCDimSearch\022\016\n\006search\030\001 \001(\t\"N"
  "\n\nSDimSearch\022\014\n\004code\030\001 \001(\005\0222\n\007Players\030\002 "
  "\003(\0132!.dimSearch.DimSearchRolesInfoListB%"
  "\n\030com.dayou.space.protobufB\tDimSearchb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dimSearch_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dimSearch_2eproto_sccs[3] = {
  &scc_info_CDimSearch_dimSearch_2eproto.base,
  &scc_info_DimSearchRolesInfoList_dimSearch_2eproto.base,
  &scc_info_SDimSearch_dimSearch_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dimSearch_2eproto_once;
static bool descriptor_table_dimSearch_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dimSearch_2eproto = {
  &descriptor_table_dimSearch_2eproto_initialized, descriptor_table_protodef_dimSearch_2eproto, "dimSearch.proto", 285,
  &descriptor_table_dimSearch_2eproto_once, descriptor_table_dimSearch_2eproto_sccs, descriptor_table_dimSearch_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_dimSearch_2eproto::offsets,
  file_level_metadata_dimSearch_2eproto, 3, file_level_enum_descriptors_dimSearch_2eproto, file_level_service_descriptors_dimSearch_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dimSearch_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dimSearch_2eproto), true);
namespace dimSearch {

// ===================================================================

void DimSearchRolesInfoList::InitAsDefaultInstance() {
}
class DimSearchRolesInfoList::_Internal {
 public:
};

DimSearchRolesInfoList::DimSearchRolesInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dimSearch.DimSearchRolesInfoList)
}
DimSearchRolesInfoList::DimSearchRolesInfoList(const DimSearchRolesInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headurl().empty()) {
    headurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&follow_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(follow_));
  // @@protoc_insertion_point(copy_constructor:dimSearch.DimSearchRolesInfoList)
}

void DimSearchRolesInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DimSearchRolesInfoList_dimSearch_2eproto.base);
  headurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&follow_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(follow_));
}

DimSearchRolesInfoList::~DimSearchRolesInfoList() {
  // @@protoc_insertion_point(destructor:dimSearch.DimSearchRolesInfoList)
  SharedDtor();
}

void DimSearchRolesInfoList::SharedDtor() {
  headurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DimSearchRolesInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimSearchRolesInfoList& DimSearchRolesInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DimSearchRolesInfoList_dimSearch_2eproto.base);
  return *internal_default_instance();
}


void DimSearchRolesInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:dimSearch.DimSearchRolesInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&follow_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(follow_));
  _internal_metadata_.Clear();
}

const char* DimSearchRolesInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string headUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_headurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dimSearch.DimSearchRolesInfoList.headUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dimSearch.DimSearchRolesInfoList.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fans = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool follow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          follow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DimSearchRolesInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dimSearch.DimSearchRolesInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string headUrl = 1;
  if (this->headurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headurl().data(), static_cast<int>(this->_internal_headurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dimSearch.DimSearchRolesInfoList.headUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_headurl(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dimSearch.DimSearchRolesInfoList.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  // int32 fans = 4;
  if (this->fans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fans(), target);
  }

  // bool follow = 5;
  if (this->follow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_follow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dimSearch.DimSearchRolesInfoList)
  return target;
}

size_t DimSearchRolesInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dimSearch.DimSearchRolesInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string headUrl = 1;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headurl());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 fans = 4;
  if (this->fans() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fans());
  }

  // bool follow = 5;
  if (this->follow() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimSearchRolesInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dimSearch.DimSearchRolesInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const DimSearchRolesInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DimSearchRolesInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dimSearch.DimSearchRolesInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dimSearch.DimSearchRolesInfoList)
    MergeFrom(*source);
  }
}

void DimSearchRolesInfoList::MergeFrom(const DimSearchRolesInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dimSearch.DimSearchRolesInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.fans() != 0) {
    _internal_set_fans(from._internal_fans());
  }
  if (from.follow() != 0) {
    _internal_set_follow(from._internal_follow());
  }
}

void DimSearchRolesInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dimSearch.DimSearchRolesInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimSearchRolesInfoList::CopyFrom(const DimSearchRolesInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dimSearch.DimSearchRolesInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimSearchRolesInfoList::IsInitialized() const {
  return true;
}

void DimSearchRolesInfoList::InternalSwap(DimSearchRolesInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  headurl_.Swap(&other->headurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(fans_, other->fans_);
  swap(follow_, other->follow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DimSearchRolesInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDimSearch::InitAsDefaultInstance() {
}
class CDimSearch::_Internal {
 public:
};

CDimSearch::CDimSearch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dimSearch.CDimSearch)
}
CDimSearch::CDimSearch(const CDimSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search().empty()) {
    search_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.search_);
  }
  // @@protoc_insertion_point(copy_constructor:dimSearch.CDimSearch)
}

void CDimSearch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CDimSearch_dimSearch_2eproto.base);
  search_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDimSearch::~CDimSearch() {
  // @@protoc_insertion_point(destructor:dimSearch.CDimSearch)
  SharedDtor();
}

void CDimSearch::SharedDtor() {
  search_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDimSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDimSearch& CDimSearch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDimSearch_dimSearch_2eproto.base);
  return *internal_default_instance();
}


void CDimSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:dimSearch.CDimSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CDimSearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string search = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dimSearch.CDimSearch.search"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDimSearch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dimSearch.CDimSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string search = 1;
  if (this->search().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search().data(), static_cast<int>(this->_internal_search().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dimSearch.CDimSearch.search");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dimSearch.CDimSearch)
  return target;
}

size_t CDimSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dimSearch.CDimSearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search = 1;
  if (this->search().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDimSearch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dimSearch.CDimSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const CDimSearch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDimSearch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dimSearch.CDimSearch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dimSearch.CDimSearch)
    MergeFrom(*source);
  }
}

void CDimSearch::MergeFrom(const CDimSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dimSearch.CDimSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.search().size() > 0) {

    search_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.search_);
  }
}

void CDimSearch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dimSearch.CDimSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDimSearch::CopyFrom(const CDimSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dimSearch.CDimSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDimSearch::IsInitialized() const {
  return true;
}

void CDimSearch::InternalSwap(CDimSearch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  search_.Swap(&other->search_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDimSearch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SDimSearch::InitAsDefaultInstance() {
}
class SDimSearch::_Internal {
 public:
};

SDimSearch::SDimSearch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dimSearch.SDimSearch)
}
SDimSearch::SDimSearch(const SDimSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:dimSearch.SDimSearch)
}

void SDimSearch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SDimSearch_dimSearch_2eproto.base);
  code_ = 0;
}

SDimSearch::~SDimSearch() {
  // @@protoc_insertion_point(destructor:dimSearch.SDimSearch)
  SharedDtor();
}

void SDimSearch::SharedDtor() {
}

void SDimSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDimSearch& SDimSearch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDimSearch_dimSearch_2eproto.base);
  return *internal_default_instance();
}


void SDimSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:dimSearch.SDimSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* SDimSearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dimSearch.DimSearchRolesInfoList Players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDimSearch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dimSearch.SDimSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // repeated .dimSearch.DimSearchRolesInfoList Players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dimSearch.SDimSearch)
  return target;
}

size_t SDimSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dimSearch.SDimSearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dimSearch.DimSearchRolesInfoList Players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDimSearch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dimSearch.SDimSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const SDimSearch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDimSearch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dimSearch.SDimSearch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dimSearch.SDimSearch)
    MergeFrom(*source);
  }
}

void SDimSearch::MergeFrom(const SDimSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dimSearch.SDimSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SDimSearch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dimSearch.SDimSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDimSearch::CopyFrom(const SDimSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dimSearch.SDimSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDimSearch::IsInitialized() const {
  return true;
}

void SDimSearch::InternalSwap(SDimSearch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDimSearch::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dimSearch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dimSearch::DimSearchRolesInfoList* Arena::CreateMaybeMessage< ::dimSearch::DimSearchRolesInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::dimSearch::DimSearchRolesInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::dimSearch::CDimSearch* Arena::CreateMaybeMessage< ::dimSearch::CDimSearch >(Arena* arena) {
  return Arena::CreateInternal< ::dimSearch::CDimSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::dimSearch::SDimSearch* Arena::CreateMaybeMessage< ::dimSearch::SDimSearch >(Arena* arena) {
  return Arena::CreateInternal< ::dimSearch::SDimSearch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
