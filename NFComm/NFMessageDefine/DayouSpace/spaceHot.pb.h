// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceHot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceHot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceHot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceHot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceHot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceHot_2eproto;
namespace spaceRandom {
class CSpaceHot;
class CSpaceHotDefaultTypeInternal;
extern CSpaceHotDefaultTypeInternal _CSpaceHot_default_instance_;
class SSpaceHot;
class SSpaceHotDefaultTypeInternal;
extern SSpaceHotDefaultTypeInternal _SSpaceHot_default_instance_;
class SpaceHot;
class SpaceHotDefaultTypeInternal;
extern SpaceHotDefaultTypeInternal _SpaceHot_default_instance_;
}  // namespace spaceRandom
PROTOBUF_NAMESPACE_OPEN
template<> ::spaceRandom::CSpaceHot* Arena::CreateMaybeMessage<::spaceRandom::CSpaceHot>(Arena*);
template<> ::spaceRandom::SSpaceHot* Arena::CreateMaybeMessage<::spaceRandom::SSpaceHot>(Arena*);
template<> ::spaceRandom::SpaceHot* Arena::CreateMaybeMessage<::spaceRandom::SpaceHot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spaceRandom {

// ===================================================================

class CSpaceHot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceRandom.CSpaceHot) */ {
 public:
  CSpaceHot();
  virtual ~CSpaceHot();

  CSpaceHot(const CSpaceHot& from);
  CSpaceHot(CSpaceHot&& from) noexcept
    : CSpaceHot() {
    *this = ::std::move(from);
  }

  inline CSpaceHot& operator=(const CSpaceHot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceHot& operator=(CSpaceHot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceHot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceHot* internal_default_instance() {
    return reinterpret_cast<const CSpaceHot*>(
               &_CSpaceHot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSpaceHot& a, CSpaceHot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceHot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceHot* New() const final {
    return CreateMaybeMessage<CSpaceHot>(nullptr);
  }

  CSpaceHot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceHot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceHot& from);
  void MergeFrom(const CSpaceHot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceHot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceRandom.CSpaceHot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceHot_2eproto);
    return ::descriptor_table_spaceHot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurPageFieldNumber = 1,
    kPageLimitFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // int32 curPage = 1;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 2;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tag = 3;
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::int32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceRandom.CSpaceHot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceHot_2eproto;
};
// -------------------------------------------------------------------

class SSpaceHot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceRandom.SSpaceHot) */ {
 public:
  SSpaceHot();
  virtual ~SSpaceHot();

  SSpaceHot(const SSpaceHot& from);
  SSpaceHot(SSpaceHot&& from) noexcept
    : SSpaceHot() {
    *this = ::std::move(from);
  }

  inline SSpaceHot& operator=(const SSpaceHot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceHot& operator=(SSpaceHot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceHot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceHot* internal_default_instance() {
    return reinterpret_cast<const SSpaceHot*>(
               &_SSpaceHot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSpaceHot& a, SSpaceHot& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceHot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceHot* New() const final {
    return CreateMaybeMessage<SSpaceHot>(nullptr);
  }

  SSpaceHot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceHot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceHot& from);
  void MergeFrom(const SSpaceHot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceHot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceRandom.SSpaceHot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceHot_2eproto);
    return ::descriptor_table_spaceHot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .spaceRandom.SpaceHot list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::spaceRandom::SpaceHot* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceRandom::SpaceHot >*
      mutable_list();
  private:
  const ::spaceRandom::SpaceHot& _internal_list(int index) const;
  ::spaceRandom::SpaceHot* _internal_add_list();
  public:
  const ::spaceRandom::SpaceHot& list(int index) const;
  ::spaceRandom::SpaceHot* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceRandom::SpaceHot >&
      list() const;

  // @@protoc_insertion_point(class_scope:spaceRandom.SSpaceHot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceRandom::SpaceHot > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceHot_2eproto;
};
// -------------------------------------------------------------------

class SpaceHot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceRandom.SpaceHot) */ {
 public:
  SpaceHot();
  virtual ~SpaceHot();

  SpaceHot(const SpaceHot& from);
  SpaceHot(SpaceHot&& from) noexcept
    : SpaceHot() {
    *this = ::std::move(from);
  }

  inline SpaceHot& operator=(const SpaceHot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpaceHot& operator=(SpaceHot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpaceHot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpaceHot* internal_default_instance() {
    return reinterpret_cast<const SpaceHot*>(
               &_SpaceHot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpaceHot& a, SpaceHot& b) {
    a.Swap(&b);
  }
  inline void Swap(SpaceHot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpaceHot* New() const final {
    return CreateMaybeMessage<SpaceHot>(nullptr);
  }

  SpaceHot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpaceHot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpaceHot& from);
  void MergeFrom(const SpaceHot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpaceHot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceRandom.SpaceHot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceHot_2eproto);
    return ::descriptor_table_spaceHot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoverFieldNumber = 3,
    kUserIconFieldNumber = 8,
    kUserNickFieldNumber = 9,
    kUserSignFieldNumber = 10,
    kSpaceNameFieldNumber = 11,
    kHouseIdFieldNumber = 1,
    kHouseTypeFieldNumber = 2,
    kSpaceTypeFieldNumber = 4,
    kIsOpenFieldNumber = 5,
    kCurrentOnlineFieldNumber = 6,
    kUidFieldNumber = 7,
  };
  // string cover = 3;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string userIcon = 8;
  void clear_usericon();
  const std::string& usericon() const;
  void set_usericon(const std::string& value);
  void set_usericon(std::string&& value);
  void set_usericon(const char* value);
  void set_usericon(const char* value, size_t size);
  std::string* mutable_usericon();
  std::string* release_usericon();
  void set_allocated_usericon(std::string* usericon);
  private:
  const std::string& _internal_usericon() const;
  void _internal_set_usericon(const std::string& value);
  std::string* _internal_mutable_usericon();
  public:

  // string userNick = 9;
  void clear_usernick();
  const std::string& usernick() const;
  void set_usernick(const std::string& value);
  void set_usernick(std::string&& value);
  void set_usernick(const char* value);
  void set_usernick(const char* value, size_t size);
  std::string* mutable_usernick();
  std::string* release_usernick();
  void set_allocated_usernick(std::string* usernick);
  private:
  const std::string& _internal_usernick() const;
  void _internal_set_usernick(const std::string& value);
  std::string* _internal_mutable_usernick();
  public:

  // string userSign = 10;
  void clear_usersign();
  const std::string& usersign() const;
  void set_usersign(const std::string& value);
  void set_usersign(std::string&& value);
  void set_usersign(const char* value);
  void set_usersign(const char* value, size_t size);
  std::string* mutable_usersign();
  std::string* release_usersign();
  void set_allocated_usersign(std::string* usersign);
  private:
  const std::string& _internal_usersign() const;
  void _internal_set_usersign(const std::string& value);
  std::string* _internal_mutable_usersign();
  public:

  // string spaceName = 11;
  void clear_spacename();
  const std::string& spacename() const;
  void set_spacename(const std::string& value);
  void set_spacename(std::string&& value);
  void set_spacename(const char* value);
  void set_spacename(const char* value, size_t size);
  std::string* mutable_spacename();
  std::string* release_spacename();
  void set_allocated_spacename(std::string* spacename);
  private:
  const std::string& _internal_spacename() const;
  void _internal_set_spacename(const std::string& value);
  std::string* _internal_mutable_spacename();
  public:

  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 2;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceType = 4;
  void clear_spacetype();
  ::PROTOBUF_NAMESPACE_ID::int32 spacetype() const;
  void set_spacetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacetype() const;
  void _internal_set_spacetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isOpen = 5;
  void clear_isopen();
  ::PROTOBUF_NAMESPACE_ID::int32 isopen() const;
  void set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isopen() const;
  void _internal_set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 currentOnline = 6;
  void clear_currentonline();
  ::PROTOBUF_NAMESPACE_ID::int32 currentonline() const;
  void set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentonline() const;
  void _internal_set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 7;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceRandom.SpaceHot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usericon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usernick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacename_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 isopen_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentonline_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceHot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSpaceHot

// int32 curPage = 1;
inline void CSpaceHot::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceHot::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceHot::curpage() const {
  // @@protoc_insertion_point(field_get:spaceRandom.CSpaceHot.curPage)
  return _internal_curpage();
}
inline void CSpaceHot::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CSpaceHot::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:spaceRandom.CSpaceHot.curPage)
}

// int32 pageLimit = 2;
inline void CSpaceHot::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceHot::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceHot::pagelimit() const {
  // @@protoc_insertion_point(field_get:spaceRandom.CSpaceHot.pageLimit)
  return _internal_pagelimit();
}
inline void CSpaceHot::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CSpaceHot::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:spaceRandom.CSpaceHot.pageLimit)
}

// int32 tag = 3;
inline void CSpaceHot::clear_tag() {
  tag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceHot::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceHot::tag() const {
  // @@protoc_insertion_point(field_get:spaceRandom.CSpaceHot.tag)
  return _internal_tag();
}
inline void CSpaceHot::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tag_ = value;
}
inline void CSpaceHot::set_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:spaceRandom.CSpaceHot.tag)
}

// -------------------------------------------------------------------

// SSpaceHot

// repeated .spaceRandom.SpaceHot list = 1;
inline int SSpaceHot::_internal_list_size() const {
  return list_.size();
}
inline int SSpaceHot::list_size() const {
  return _internal_list_size();
}
inline void SSpaceHot::clear_list() {
  list_.Clear();
}
inline ::spaceRandom::SpaceHot* SSpaceHot::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:spaceRandom.SSpaceHot.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceRandom::SpaceHot >*
SSpaceHot::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceRandom.SSpaceHot.list)
  return &list_;
}
inline const ::spaceRandom::SpaceHot& SSpaceHot::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::spaceRandom::SpaceHot& SSpaceHot::list(int index) const {
  // @@protoc_insertion_point(field_get:spaceRandom.SSpaceHot.list)
  return _internal_list(index);
}
inline ::spaceRandom::SpaceHot* SSpaceHot::_internal_add_list() {
  return list_.Add();
}
inline ::spaceRandom::SpaceHot* SSpaceHot::add_list() {
  // @@protoc_insertion_point(field_add:spaceRandom.SSpaceHot.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceRandom::SpaceHot >&
SSpaceHot::list() const {
  // @@protoc_insertion_point(field_list:spaceRandom.SSpaceHot.list)
  return list_;
}

// -------------------------------------------------------------------

// SpaceHot

// int32 houseId = 1;
inline void SpaceHot::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::houseid() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.houseId)
  return _internal_houseid();
}
inline void SpaceHot::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SpaceHot::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.houseId)
}

// int32 houseType = 2;
inline void SpaceHot::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::housetype() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.houseType)
  return _internal_housetype();
}
inline void SpaceHot::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void SpaceHot::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.houseType)
}

// string cover = 3;
inline void SpaceHot::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceHot::cover() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.cover)
  return _internal_cover();
}
inline void SpaceHot::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.cover)
}
inline std::string* SpaceHot::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:spaceRandom.SpaceHot.cover)
  return _internal_mutable_cover();
}
inline const std::string& SpaceHot::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void SpaceHot::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceHot::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceRandom.SpaceHot.cover)
}
inline void SpaceHot::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceRandom.SpaceHot.cover)
}
inline void SpaceHot::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceRandom.SpaceHot.cover)
}
inline std::string* SpaceHot::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceHot::release_cover() {
  // @@protoc_insertion_point(field_release:spaceRandom.SpaceHot.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceHot::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:spaceRandom.SpaceHot.cover)
}

// int32 spaceType = 4;
inline void SpaceHot::clear_spacetype() {
  spacetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::_internal_spacetype() const {
  return spacetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::spacetype() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.spaceType)
  return _internal_spacetype();
}
inline void SpaceHot::_internal_set_spacetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacetype_ = value;
}
inline void SpaceHot::set_spacetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacetype(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.spaceType)
}

// int32 isOpen = 5;
inline void SpaceHot::clear_isopen() {
  isopen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::_internal_isopen() const {
  return isopen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::isopen() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.isOpen)
  return _internal_isopen();
}
inline void SpaceHot::_internal_set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isopen_ = value;
}
inline void SpaceHot::set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.isOpen)
}

// int32 currentOnline = 6;
inline void SpaceHot::clear_currentonline() {
  currentonline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::_internal_currentonline() const {
  return currentonline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::currentonline() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.currentOnline)
  return _internal_currentonline();
}
inline void SpaceHot::_internal_set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentonline_ = value;
}
inline void SpaceHot::set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentonline(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.currentOnline)
}

// int32 uid = 7;
inline void SpaceHot::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHot::uid() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.uid)
  return _internal_uid();
}
inline void SpaceHot::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SpaceHot::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.uid)
}

// string userIcon = 8;
inline void SpaceHot::clear_usericon() {
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceHot::usericon() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.userIcon)
  return _internal_usericon();
}
inline void SpaceHot::set_usericon(const std::string& value) {
  _internal_set_usericon(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.userIcon)
}
inline std::string* SpaceHot::mutable_usericon() {
  // @@protoc_insertion_point(field_mutable:spaceRandom.SpaceHot.userIcon)
  return _internal_mutable_usericon();
}
inline const std::string& SpaceHot::_internal_usericon() const {
  return usericon_.GetNoArena();
}
inline void SpaceHot::_internal_set_usericon(const std::string& value) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceHot::set_usericon(std::string&& value) {
  
  usericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceRandom.SpaceHot.userIcon)
}
inline void SpaceHot::set_usericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceRandom.SpaceHot.userIcon)
}
inline void SpaceHot::set_usericon(const char* value, size_t size) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceRandom.SpaceHot.userIcon)
}
inline std::string* SpaceHot::_internal_mutable_usericon() {
  
  return usericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceHot::release_usericon() {
  // @@protoc_insertion_point(field_release:spaceRandom.SpaceHot.userIcon)
  
  return usericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceHot::set_allocated_usericon(std::string* usericon) {
  if (usericon != nullptr) {
    
  } else {
    
  }
  usericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usericon);
  // @@protoc_insertion_point(field_set_allocated:spaceRandom.SpaceHot.userIcon)
}

// string userNick = 9;
inline void SpaceHot::clear_usernick() {
  usernick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceHot::usernick() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.userNick)
  return _internal_usernick();
}
inline void SpaceHot::set_usernick(const std::string& value) {
  _internal_set_usernick(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.userNick)
}
inline std::string* SpaceHot::mutable_usernick() {
  // @@protoc_insertion_point(field_mutable:spaceRandom.SpaceHot.userNick)
  return _internal_mutable_usernick();
}
inline const std::string& SpaceHot::_internal_usernick() const {
  return usernick_.GetNoArena();
}
inline void SpaceHot::_internal_set_usernick(const std::string& value) {
  
  usernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceHot::set_usernick(std::string&& value) {
  
  usernick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceRandom.SpaceHot.userNick)
}
inline void SpaceHot::set_usernick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceRandom.SpaceHot.userNick)
}
inline void SpaceHot::set_usernick(const char* value, size_t size) {
  
  usernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceRandom.SpaceHot.userNick)
}
inline std::string* SpaceHot::_internal_mutable_usernick() {
  
  return usernick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceHot::release_usernick() {
  // @@protoc_insertion_point(field_release:spaceRandom.SpaceHot.userNick)
  
  return usernick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceHot::set_allocated_usernick(std::string* usernick) {
  if (usernick != nullptr) {
    
  } else {
    
  }
  usernick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usernick);
  // @@protoc_insertion_point(field_set_allocated:spaceRandom.SpaceHot.userNick)
}

// string userSign = 10;
inline void SpaceHot::clear_usersign() {
  usersign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceHot::usersign() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.userSign)
  return _internal_usersign();
}
inline void SpaceHot::set_usersign(const std::string& value) {
  _internal_set_usersign(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.userSign)
}
inline std::string* SpaceHot::mutable_usersign() {
  // @@protoc_insertion_point(field_mutable:spaceRandom.SpaceHot.userSign)
  return _internal_mutable_usersign();
}
inline const std::string& SpaceHot::_internal_usersign() const {
  return usersign_.GetNoArena();
}
inline void SpaceHot::_internal_set_usersign(const std::string& value) {
  
  usersign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceHot::set_usersign(std::string&& value) {
  
  usersign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceRandom.SpaceHot.userSign)
}
inline void SpaceHot::set_usersign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usersign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceRandom.SpaceHot.userSign)
}
inline void SpaceHot::set_usersign(const char* value, size_t size) {
  
  usersign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceRandom.SpaceHot.userSign)
}
inline std::string* SpaceHot::_internal_mutable_usersign() {
  
  return usersign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceHot::release_usersign() {
  // @@protoc_insertion_point(field_release:spaceRandom.SpaceHot.userSign)
  
  return usersign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceHot::set_allocated_usersign(std::string* usersign) {
  if (usersign != nullptr) {
    
  } else {
    
  }
  usersign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usersign);
  // @@protoc_insertion_point(field_set_allocated:spaceRandom.SpaceHot.userSign)
}

// string spaceName = 11;
inline void SpaceHot::clear_spacename() {
  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceHot::spacename() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SpaceHot.spaceName)
  return _internal_spacename();
}
inline void SpaceHot::set_spacename(const std::string& value) {
  _internal_set_spacename(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SpaceHot.spaceName)
}
inline std::string* SpaceHot::mutable_spacename() {
  // @@protoc_insertion_point(field_mutable:spaceRandom.SpaceHot.spaceName)
  return _internal_mutable_spacename();
}
inline const std::string& SpaceHot::_internal_spacename() const {
  return spacename_.GetNoArena();
}
inline void SpaceHot::_internal_set_spacename(const std::string& value) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceHot::set_spacename(std::string&& value) {
  
  spacename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceRandom.SpaceHot.spaceName)
}
inline void SpaceHot::set_spacename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceRandom.SpaceHot.spaceName)
}
inline void SpaceHot::set_spacename(const char* value, size_t size) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceRandom.SpaceHot.spaceName)
}
inline std::string* SpaceHot::_internal_mutable_spacename() {
  
  return spacename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceHot::release_spacename() {
  // @@protoc_insertion_point(field_release:spaceRandom.SpaceHot.spaceName)
  
  return spacename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceHot::set_allocated_spacename(std::string* spacename) {
  if (spacename != nullptr) {
    
  } else {
    
  }
  spacename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacename);
  // @@protoc_insertion_point(field_set_allocated:spaceRandom.SpaceHot.spaceName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spaceRandom

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceHot_2eproto
