// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: theatre.proto

#include "theatre.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace businessCard {
class CTheatreInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTheatreInfo> _instance;
} _CTheatreInfo_default_instance_;
class STheatreInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STheatreInfo> _instance;
} _STheatreInfo_default_instance_;
class CTheatreBeginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTheatreBegin> _instance;
} _CTheatreBegin_default_instance_;
class STheatreBeginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STheatreBegin> _instance;
} _STheatreBegin_default_instance_;
}  // namespace businessCard
static void InitDefaultsscc_info_CTheatreBegin_theatre_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_CTheatreBegin_default_instance_;
    new (ptr) ::businessCard::CTheatreBegin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::CTheatreBegin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTheatreBegin_theatre_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CTheatreBegin_theatre_2eproto}, {}};

static void InitDefaultsscc_info_CTheatreInfo_theatre_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_CTheatreInfo_default_instance_;
    new (ptr) ::businessCard::CTheatreInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::CTheatreInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTheatreInfo_theatre_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CTheatreInfo_theatre_2eproto}, {}};

static void InitDefaultsscc_info_STheatreBegin_theatre_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_STheatreBegin_default_instance_;
    new (ptr) ::businessCard::STheatreBegin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::STheatreBegin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STheatreBegin_theatre_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STheatreBegin_theatre_2eproto}, {}};

static void InitDefaultsscc_info_STheatreInfo_theatre_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_STheatreInfo_default_instance_;
    new (ptr) ::businessCard::STheatreInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::STheatreInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STheatreInfo_theatre_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STheatreInfo_theatre_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_theatre_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_theatre_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_theatre_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_theatre_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::CTheatreInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::STheatreInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::STheatreInfo, starttimestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::CTheatreBegin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::STheatreBegin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::businessCard::CTheatreInfo)},
  { 5, -1, sizeof(::businessCard::STheatreInfo)},
  { 11, -1, sizeof(::businessCard::CTheatreBegin)},
  { 16, -1, sizeof(::businessCard::STheatreBegin)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_CTheatreInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_STheatreInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_CTheatreBegin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_STheatreBegin_default_instance_),
};

const char descriptor_table_protodef_theatre_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtheatre.proto\022\014businessCard\"\016\n\014CTheatr"
  "eInfo\"&\n\014STheatreInfo\022\026\n\016startTimestamp\030"
  "\001 \001(\005\"\017\n\rCTheatreBegin\"\017\n\rSTheatreBeginB"
  ",\n\030com.dayou.space.protobufB\007TheatreZ\007./"
  "pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_theatre_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_theatre_2eproto_sccs[4] = {
  &scc_info_CTheatreBegin_theatre_2eproto.base,
  &scc_info_CTheatreInfo_theatre_2eproto.base,
  &scc_info_STheatreBegin_theatre_2eproto.base,
  &scc_info_STheatreInfo_theatre_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_theatre_2eproto_once;
static bool descriptor_table_theatre_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_theatre_2eproto = {
  &descriptor_table_theatre_2eproto_initialized, descriptor_table_protodef_theatre_2eproto, "theatre.proto", 173,
  &descriptor_table_theatre_2eproto_once, descriptor_table_theatre_2eproto_sccs, descriptor_table_theatre_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_theatre_2eproto::offsets,
  file_level_metadata_theatre_2eproto, 4, file_level_enum_descriptors_theatre_2eproto, file_level_service_descriptors_theatre_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_theatre_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_theatre_2eproto), true);
namespace businessCard {

// ===================================================================

void CTheatreInfo::InitAsDefaultInstance() {
}
class CTheatreInfo::_Internal {
 public:
};

CTheatreInfo::CTheatreInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.CTheatreInfo)
}
CTheatreInfo::CTheatreInfo(const CTheatreInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:businessCard.CTheatreInfo)
}

void CTheatreInfo::SharedCtor() {
}

CTheatreInfo::~CTheatreInfo() {
  // @@protoc_insertion_point(destructor:businessCard.CTheatreInfo)
  SharedDtor();
}

void CTheatreInfo::SharedDtor() {
}

void CTheatreInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTheatreInfo& CTheatreInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTheatreInfo_theatre_2eproto.base);
  return *internal_default_instance();
}


void CTheatreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.CTheatreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CTheatreInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTheatreInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.CTheatreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.CTheatreInfo)
  return target;
}

size_t CTheatreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.CTheatreInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTheatreInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.CTheatreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CTheatreInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTheatreInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.CTheatreInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.CTheatreInfo)
    MergeFrom(*source);
  }
}

void CTheatreInfo::MergeFrom(const CTheatreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.CTheatreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTheatreInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.CTheatreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTheatreInfo::CopyFrom(const CTheatreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.CTheatreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTheatreInfo::IsInitialized() const {
  return true;
}

void CTheatreInfo::InternalSwap(CTheatreInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTheatreInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STheatreInfo::InitAsDefaultInstance() {
}
class STheatreInfo::_Internal {
 public:
};

STheatreInfo::STheatreInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.STheatreInfo)
}
STheatreInfo::STheatreInfo(const STheatreInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  starttimestamp_ = from.starttimestamp_;
  // @@protoc_insertion_point(copy_constructor:businessCard.STheatreInfo)
}

void STheatreInfo::SharedCtor() {
  starttimestamp_ = 0;
}

STheatreInfo::~STheatreInfo() {
  // @@protoc_insertion_point(destructor:businessCard.STheatreInfo)
  SharedDtor();
}

void STheatreInfo::SharedDtor() {
}

void STheatreInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STheatreInfo& STheatreInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STheatreInfo_theatre_2eproto.base);
  return *internal_default_instance();
}


void STheatreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.STheatreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  starttimestamp_ = 0;
  _internal_metadata_.Clear();
}

const char* STheatreInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 startTimestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          starttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STheatreInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.STheatreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 startTimestamp = 1;
  if (this->starttimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_starttimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.STheatreInfo)
  return target;
}

size_t STheatreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.STheatreInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 startTimestamp = 1;
  if (this->starttimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttimestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STheatreInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.STheatreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const STheatreInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STheatreInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.STheatreInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.STheatreInfo)
    MergeFrom(*source);
  }
}

void STheatreInfo::MergeFrom(const STheatreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.STheatreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.starttimestamp() != 0) {
    _internal_set_starttimestamp(from._internal_starttimestamp());
  }
}

void STheatreInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.STheatreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STheatreInfo::CopyFrom(const STheatreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.STheatreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STheatreInfo::IsInitialized() const {
  return true;
}

void STheatreInfo::InternalSwap(STheatreInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(starttimestamp_, other->starttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STheatreInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CTheatreBegin::InitAsDefaultInstance() {
}
class CTheatreBegin::_Internal {
 public:
};

CTheatreBegin::CTheatreBegin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.CTheatreBegin)
}
CTheatreBegin::CTheatreBegin(const CTheatreBegin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:businessCard.CTheatreBegin)
}

void CTheatreBegin::SharedCtor() {
}

CTheatreBegin::~CTheatreBegin() {
  // @@protoc_insertion_point(destructor:businessCard.CTheatreBegin)
  SharedDtor();
}

void CTheatreBegin::SharedDtor() {
}

void CTheatreBegin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTheatreBegin& CTheatreBegin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTheatreBegin_theatre_2eproto.base);
  return *internal_default_instance();
}


void CTheatreBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.CTheatreBegin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CTheatreBegin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTheatreBegin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.CTheatreBegin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.CTheatreBegin)
  return target;
}

size_t CTheatreBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.CTheatreBegin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTheatreBegin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.CTheatreBegin)
  GOOGLE_DCHECK_NE(&from, this);
  const CTheatreBegin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTheatreBegin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.CTheatreBegin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.CTheatreBegin)
    MergeFrom(*source);
  }
}

void CTheatreBegin::MergeFrom(const CTheatreBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.CTheatreBegin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTheatreBegin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.CTheatreBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTheatreBegin::CopyFrom(const CTheatreBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.CTheatreBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTheatreBegin::IsInitialized() const {
  return true;
}

void CTheatreBegin::InternalSwap(CTheatreBegin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTheatreBegin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STheatreBegin::InitAsDefaultInstance() {
}
class STheatreBegin::_Internal {
 public:
};

STheatreBegin::STheatreBegin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.STheatreBegin)
}
STheatreBegin::STheatreBegin(const STheatreBegin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:businessCard.STheatreBegin)
}

void STheatreBegin::SharedCtor() {
}

STheatreBegin::~STheatreBegin() {
  // @@protoc_insertion_point(destructor:businessCard.STheatreBegin)
  SharedDtor();
}

void STheatreBegin::SharedDtor() {
}

void STheatreBegin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STheatreBegin& STheatreBegin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STheatreBegin_theatre_2eproto.base);
  return *internal_default_instance();
}


void STheatreBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.STheatreBegin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* STheatreBegin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STheatreBegin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.STheatreBegin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.STheatreBegin)
  return target;
}

size_t STheatreBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.STheatreBegin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STheatreBegin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.STheatreBegin)
  GOOGLE_DCHECK_NE(&from, this);
  const STheatreBegin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STheatreBegin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.STheatreBegin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.STheatreBegin)
    MergeFrom(*source);
  }
}

void STheatreBegin::MergeFrom(const STheatreBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.STheatreBegin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void STheatreBegin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.STheatreBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STheatreBegin::CopyFrom(const STheatreBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.STheatreBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STheatreBegin::IsInitialized() const {
  return true;
}

void STheatreBegin::InternalSwap(STheatreBegin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STheatreBegin::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace businessCard
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::businessCard::CTheatreInfo* Arena::CreateMaybeMessage< ::businessCard::CTheatreInfo >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::CTheatreInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::STheatreInfo* Arena::CreateMaybeMessage< ::businessCard::STheatreInfo >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::STheatreInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::CTheatreBegin* Arena::CreateMaybeMessage< ::businessCard::CTheatreBegin >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::CTheatreBegin >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::STheatreBegin* Arena::CreateMaybeMessage< ::businessCard::STheatreBegin >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::STheatreBegin >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
