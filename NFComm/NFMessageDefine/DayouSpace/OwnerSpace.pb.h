// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OwnerSpace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OwnerSpace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OwnerSpace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OwnerSpace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OwnerSpace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OwnerSpace_2eproto;
namespace OwnerSpace {
class COwnerSpace;
class COwnerSpaceDefaultTypeInternal;
extern COwnerSpaceDefaultTypeInternal _COwnerSpace_default_instance_;
class SOwnerSpace;
class SOwnerSpaceDefaultTypeInternal;
extern SOwnerSpaceDefaultTypeInternal _SOwnerSpace_default_instance_;
}  // namespace OwnerSpace
PROTOBUF_NAMESPACE_OPEN
template<> ::OwnerSpace::COwnerSpace* Arena::CreateMaybeMessage<::OwnerSpace::COwnerSpace>(Arena*);
template<> ::OwnerSpace::SOwnerSpace* Arena::CreateMaybeMessage<::OwnerSpace::SOwnerSpace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OwnerSpace {

// ===================================================================

class COwnerSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OwnerSpace.COwnerSpace) */ {
 public:
  COwnerSpace();
  virtual ~COwnerSpace();

  COwnerSpace(const COwnerSpace& from);
  COwnerSpace(COwnerSpace&& from) noexcept
    : COwnerSpace() {
    *this = ::std::move(from);
  }

  inline COwnerSpace& operator=(const COwnerSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline COwnerSpace& operator=(COwnerSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const COwnerSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const COwnerSpace* internal_default_instance() {
    return reinterpret_cast<const COwnerSpace*>(
               &_COwnerSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(COwnerSpace& a, COwnerSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(COwnerSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline COwnerSpace* New() const final {
    return CreateMaybeMessage<COwnerSpace>(nullptr);
  }

  COwnerSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<COwnerSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const COwnerSpace& from);
  void MergeFrom(const COwnerSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COwnerSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OwnerSpace.COwnerSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OwnerSpace_2eproto);
    return ::descriptor_table_OwnerSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OwnerSpace.COwnerSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OwnerSpace_2eproto;
};
// -------------------------------------------------------------------

class SOwnerSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OwnerSpace.SOwnerSpace) */ {
 public:
  SOwnerSpace();
  virtual ~SOwnerSpace();

  SOwnerSpace(const SOwnerSpace& from);
  SOwnerSpace(SOwnerSpace&& from) noexcept
    : SOwnerSpace() {
    *this = ::std::move(from);
  }

  inline SOwnerSpace& operator=(const SOwnerSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline SOwnerSpace& operator=(SOwnerSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SOwnerSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SOwnerSpace* internal_default_instance() {
    return reinterpret_cast<const SOwnerSpace*>(
               &_SOwnerSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SOwnerSpace& a, SOwnerSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(SOwnerSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SOwnerSpace* New() const final {
    return CreateMaybeMessage<SOwnerSpace>(nullptr);
  }

  SOwnerSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SOwnerSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SOwnerSpace& from);
  void MergeFrom(const SOwnerSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SOwnerSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OwnerSpace.SOwnerSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OwnerSpace_2eproto);
    return ::descriptor_table_OwnerSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadPicFieldNumber = 5,
    kNickNameFieldNumber = 6,
    kCommonFieldNumber = 1,
    kIsHasPerformerFieldNumber = 2,
    kIsFollowStatusFieldNumber = 3,
    kUidFieldNumber = 4,
  };
  // string headPic = 5;
  void clear_headpic();
  const std::string& headpic() const;
  void set_headpic(const std::string& value);
  void set_headpic(std::string&& value);
  void set_headpic(const char* value);
  void set_headpic(const char* value, size_t size);
  std::string* mutable_headpic();
  std::string* release_headpic();
  void set_allocated_headpic(std::string* headpic);
  private:
  const std::string& _internal_headpic() const;
  void _internal_set_headpic(const std::string& value);
  std::string* _internal_mutable_headpic();
  public:

  // string nickName = 6;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 common = 1;
  void clear_common();
  ::PROTOBUF_NAMESPACE_ID::int32 common() const;
  void set_common(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_common() const;
  void _internal_set_common(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isHasPerformer = 2;
  void clear_ishasperformer();
  bool ishasperformer() const;
  void set_ishasperformer(bool value);
  private:
  bool _internal_ishasperformer() const;
  void _internal_set_ishasperformer(bool value);
  public:

  // bool isFollowStatus = 3;
  void clear_isfollowstatus();
  bool isfollowstatus() const;
  void set_isfollowstatus(bool value);
  private:
  bool _internal_isfollowstatus() const;
  void _internal_set_isfollowstatus(bool value);
  public:

  // int32 uid = 4;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OwnerSpace.SOwnerSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headpic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 common_;
  bool ishasperformer_;
  bool isfollowstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OwnerSpace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// COwnerSpace

// -------------------------------------------------------------------

// SOwnerSpace

// int32 common = 1;
inline void SOwnerSpace::clear_common() {
  common_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SOwnerSpace::_internal_common() const {
  return common_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SOwnerSpace::common() const {
  // @@protoc_insertion_point(field_get:OwnerSpace.SOwnerSpace.common)
  return _internal_common();
}
inline void SOwnerSpace::_internal_set_common(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  common_ = value;
}
inline void SOwnerSpace::set_common(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_common(value);
  // @@protoc_insertion_point(field_set:OwnerSpace.SOwnerSpace.common)
}

// bool isHasPerformer = 2;
inline void SOwnerSpace::clear_ishasperformer() {
  ishasperformer_ = false;
}
inline bool SOwnerSpace::_internal_ishasperformer() const {
  return ishasperformer_;
}
inline bool SOwnerSpace::ishasperformer() const {
  // @@protoc_insertion_point(field_get:OwnerSpace.SOwnerSpace.isHasPerformer)
  return _internal_ishasperformer();
}
inline void SOwnerSpace::_internal_set_ishasperformer(bool value) {
  
  ishasperformer_ = value;
}
inline void SOwnerSpace::set_ishasperformer(bool value) {
  _internal_set_ishasperformer(value);
  // @@protoc_insertion_point(field_set:OwnerSpace.SOwnerSpace.isHasPerformer)
}

// bool isFollowStatus = 3;
inline void SOwnerSpace::clear_isfollowstatus() {
  isfollowstatus_ = false;
}
inline bool SOwnerSpace::_internal_isfollowstatus() const {
  return isfollowstatus_;
}
inline bool SOwnerSpace::isfollowstatus() const {
  // @@protoc_insertion_point(field_get:OwnerSpace.SOwnerSpace.isFollowStatus)
  return _internal_isfollowstatus();
}
inline void SOwnerSpace::_internal_set_isfollowstatus(bool value) {
  
  isfollowstatus_ = value;
}
inline void SOwnerSpace::set_isfollowstatus(bool value) {
  _internal_set_isfollowstatus(value);
  // @@protoc_insertion_point(field_set:OwnerSpace.SOwnerSpace.isFollowStatus)
}

// int32 uid = 4;
inline void SOwnerSpace::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SOwnerSpace::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SOwnerSpace::uid() const {
  // @@protoc_insertion_point(field_get:OwnerSpace.SOwnerSpace.uid)
  return _internal_uid();
}
inline void SOwnerSpace::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SOwnerSpace::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:OwnerSpace.SOwnerSpace.uid)
}

// string headPic = 5;
inline void SOwnerSpace::clear_headpic() {
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SOwnerSpace::headpic() const {
  // @@protoc_insertion_point(field_get:OwnerSpace.SOwnerSpace.headPic)
  return _internal_headpic();
}
inline void SOwnerSpace::set_headpic(const std::string& value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:OwnerSpace.SOwnerSpace.headPic)
}
inline std::string* SOwnerSpace::mutable_headpic() {
  // @@protoc_insertion_point(field_mutable:OwnerSpace.SOwnerSpace.headPic)
  return _internal_mutable_headpic();
}
inline const std::string& SOwnerSpace::_internal_headpic() const {
  return headpic_.GetNoArena();
}
inline void SOwnerSpace::_internal_set_headpic(const std::string& value) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SOwnerSpace::set_headpic(std::string&& value) {
  
  headpic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OwnerSpace.SOwnerSpace.headPic)
}
inline void SOwnerSpace::set_headpic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OwnerSpace.SOwnerSpace.headPic)
}
inline void SOwnerSpace::set_headpic(const char* value, size_t size) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OwnerSpace.SOwnerSpace.headPic)
}
inline std::string* SOwnerSpace::_internal_mutable_headpic() {
  
  return headpic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SOwnerSpace::release_headpic() {
  // @@protoc_insertion_point(field_release:OwnerSpace.SOwnerSpace.headPic)
  
  return headpic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SOwnerSpace::set_allocated_headpic(std::string* headpic) {
  if (headpic != nullptr) {
    
  } else {
    
  }
  headpic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headpic);
  // @@protoc_insertion_point(field_set_allocated:OwnerSpace.SOwnerSpace.headPic)
}

// string nickName = 6;
inline void SOwnerSpace::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SOwnerSpace::nickname() const {
  // @@protoc_insertion_point(field_get:OwnerSpace.SOwnerSpace.nickName)
  return _internal_nickname();
}
inline void SOwnerSpace::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:OwnerSpace.SOwnerSpace.nickName)
}
inline std::string* SOwnerSpace::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:OwnerSpace.SOwnerSpace.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& SOwnerSpace::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void SOwnerSpace::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SOwnerSpace::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OwnerSpace.SOwnerSpace.nickName)
}
inline void SOwnerSpace::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OwnerSpace.SOwnerSpace.nickName)
}
inline void SOwnerSpace::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OwnerSpace.SOwnerSpace.nickName)
}
inline std::string* SOwnerSpace::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SOwnerSpace::release_nickname() {
  // @@protoc_insertion_point(field_release:OwnerSpace.SOwnerSpace.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SOwnerSpace::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:OwnerSpace.SOwnerSpace.nickName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OwnerSpace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OwnerSpace_2eproto
