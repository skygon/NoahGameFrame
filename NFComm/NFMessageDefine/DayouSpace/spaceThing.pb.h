// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceThing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceThing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceThing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceThing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceThing_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceThing_2eproto;
namespace spaceThing {
class CSpaceThingInfo;
class CSpaceThingInfoDefaultTypeInternal;
extern CSpaceThingInfoDefaultTypeInternal _CSpaceThingInfo_default_instance_;
class CSpaceThingList;
class CSpaceThingListDefaultTypeInternal;
extern CSpaceThingListDefaultTypeInternal _CSpaceThingList_default_instance_;
class SSpaceThingInfo;
class SSpaceThingInfoDefaultTypeInternal;
extern SSpaceThingInfoDefaultTypeInternal _SSpaceThingInfo_default_instance_;
class SSpaceThingList;
class SSpaceThingListDefaultTypeInternal;
extern SSpaceThingListDefaultTypeInternal _SSpaceThingList_default_instance_;
class Thing;
class ThingDefaultTypeInternal;
extern ThingDefaultTypeInternal _Thing_default_instance_;
}  // namespace spaceThing
PROTOBUF_NAMESPACE_OPEN
template<> ::spaceThing::CSpaceThingInfo* Arena::CreateMaybeMessage<::spaceThing::CSpaceThingInfo>(Arena*);
template<> ::spaceThing::CSpaceThingList* Arena::CreateMaybeMessage<::spaceThing::CSpaceThingList>(Arena*);
template<> ::spaceThing::SSpaceThingInfo* Arena::CreateMaybeMessage<::spaceThing::SSpaceThingInfo>(Arena*);
template<> ::spaceThing::SSpaceThingList* Arena::CreateMaybeMessage<::spaceThing::SSpaceThingList>(Arena*);
template<> ::spaceThing::Thing* Arena::CreateMaybeMessage<::spaceThing::Thing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spaceThing {

// ===================================================================

class CSpaceThingList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceThing.CSpaceThingList) */ {
 public:
  CSpaceThingList();
  virtual ~CSpaceThingList();

  CSpaceThingList(const CSpaceThingList& from);
  CSpaceThingList(CSpaceThingList&& from) noexcept
    : CSpaceThingList() {
    *this = ::std::move(from);
  }

  inline CSpaceThingList& operator=(const CSpaceThingList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceThingList& operator=(CSpaceThingList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceThingList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceThingList* internal_default_instance() {
    return reinterpret_cast<const CSpaceThingList*>(
               &_CSpaceThingList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSpaceThingList& a, CSpaceThingList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceThingList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceThingList* New() const final {
    return CreateMaybeMessage<CSpaceThingList>(nullptr);
  }

  CSpaceThingList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceThingList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceThingList& from);
  void MergeFrom(const CSpaceThingList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceThingList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceThing.CSpaceThingList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceThing_2eproto);
    return ::descriptor_table_spaceThing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurPageFieldNumber = 1,
    kPageLimitFieldNumber = 2,
  };
  // int32 curPage = 1;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 2;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceThing.CSpaceThingList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceThing_2eproto;
};
// -------------------------------------------------------------------

class SSpaceThingList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceThing.SSpaceThingList) */ {
 public:
  SSpaceThingList();
  virtual ~SSpaceThingList();

  SSpaceThingList(const SSpaceThingList& from);
  SSpaceThingList(SSpaceThingList&& from) noexcept
    : SSpaceThingList() {
    *this = ::std::move(from);
  }

  inline SSpaceThingList& operator=(const SSpaceThingList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceThingList& operator=(SSpaceThingList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceThingList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceThingList* internal_default_instance() {
    return reinterpret_cast<const SSpaceThingList*>(
               &_SSpaceThingList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSpaceThingList& a, SSpaceThingList& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceThingList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceThingList* New() const final {
    return CreateMaybeMessage<SSpaceThingList>(nullptr);
  }

  SSpaceThingList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceThingList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceThingList& from);
  void MergeFrom(const SSpaceThingList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceThingList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceThing.SSpaceThingList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceThing_2eproto);
    return ::descriptor_table_spaceThing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThingFieldNumber = 1,
    kTotalFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kPageLimitFieldNumber = 4,
  };
  // repeated .spaceThing.Thing thing = 1;
  int thing_size() const;
  private:
  int _internal_thing_size() const;
  public:
  void clear_thing();
  ::spaceThing::Thing* mutable_thing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceThing::Thing >*
      mutable_thing();
  private:
  const ::spaceThing::Thing& _internal_thing(int index) const;
  ::spaceThing::Thing* _internal_add_thing();
  public:
  const ::spaceThing::Thing& thing(int index) const;
  ::spaceThing::Thing* add_thing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceThing::Thing >&
      thing() const;

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 4;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceThing.SSpaceThingList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceThing::Thing > thing_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceThing_2eproto;
};
// -------------------------------------------------------------------

class Thing :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceThing.Thing) */ {
 public:
  Thing();
  virtual ~Thing();

  Thing(const Thing& from);
  Thing(Thing&& from) noexcept
    : Thing() {
    *this = ::std::move(from);
  }

  inline Thing& operator=(const Thing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Thing& operator=(Thing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Thing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Thing* internal_default_instance() {
    return reinterpret_cast<const Thing*>(
               &_Thing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Thing& a, Thing& b) {
    a.Swap(&b);
  }
  inline void Swap(Thing* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Thing* New() const final {
    return CreateMaybeMessage<Thing>(nullptr);
  }

  Thing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Thing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Thing& from);
  void MergeFrom(const Thing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Thing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceThing.Thing";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceThing_2eproto);
    return ::descriptor_table_spaceThing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackpackIdsFieldNumber = 10,
    kNameFieldNumber = 4,
    kCoverFieldNumber = 5,
    kResourceFieldNumber = 7,
    kIdFieldNumber = 1,
    kThingIdFieldNumber = 2,
    kNumFieldNumber = 3,
    kPriceFieldNumber = 6,
    kShoppingIdFieldNumber = 8,
    kTroveGoodsIdFieldNumber = 9,
  };
  // repeated int32 backpackIds = 10;
  int backpackids_size() const;
  private:
  int _internal_backpackids_size() const;
  public:
  void clear_backpackids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_backpackids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_backpackids() const;
  void _internal_add_backpackids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_backpackids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 backpackids(int index) const;
  void set_backpackids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_backpackids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      backpackids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_backpackids();

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cover = 5;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string resource = 7;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 thingId = 2;
  void clear_thingid();
  ::PROTOBUF_NAMESPACE_ID::int32 thingid() const;
  void set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thingid() const;
  void _internal_set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 6;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shoppingId = 8;
  void clear_shoppingid();
  ::PROTOBUF_NAMESPACE_ID::int32 shoppingid() const;
  void set_shoppingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shoppingid() const;
  void _internal_set_shoppingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 troveGoodsId = 9;
  void clear_trovegoodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 trovegoodsid() const;
  void set_trovegoodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trovegoodsid() const;
  void _internal_set_trovegoodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceThing.Thing)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > backpackids_;
  mutable std::atomic<int> _backpackids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 thingid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 shoppingid_;
  ::PROTOBUF_NAMESPACE_ID::int32 trovegoodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceThing_2eproto;
};
// -------------------------------------------------------------------

class CSpaceThingInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceThing.CSpaceThingInfo) */ {
 public:
  CSpaceThingInfo();
  virtual ~CSpaceThingInfo();

  CSpaceThingInfo(const CSpaceThingInfo& from);
  CSpaceThingInfo(CSpaceThingInfo&& from) noexcept
    : CSpaceThingInfo() {
    *this = ::std::move(from);
  }

  inline CSpaceThingInfo& operator=(const CSpaceThingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceThingInfo& operator=(CSpaceThingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceThingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceThingInfo* internal_default_instance() {
    return reinterpret_cast<const CSpaceThingInfo*>(
               &_CSpaceThingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSpaceThingInfo& a, CSpaceThingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceThingInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceThingInfo* New() const final {
    return CreateMaybeMessage<CSpaceThingInfo>(nullptr);
  }

  CSpaceThingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceThingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceThingInfo& from);
  void MergeFrom(const CSpaceThingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceThingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceThing.CSpaceThingInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceThing_2eproto);
    return ::descriptor_table_spaceThing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThingIdFieldNumber = 1,
  };
  // int32 thingId = 1;
  void clear_thingid();
  ::PROTOBUF_NAMESPACE_ID::int32 thingid() const;
  void set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thingid() const;
  void _internal_set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceThing.CSpaceThingInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 thingid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceThing_2eproto;
};
// -------------------------------------------------------------------

class SSpaceThingInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceThing.SSpaceThingInfo) */ {
 public:
  SSpaceThingInfo();
  virtual ~SSpaceThingInfo();

  SSpaceThingInfo(const SSpaceThingInfo& from);
  SSpaceThingInfo(SSpaceThingInfo&& from) noexcept
    : SSpaceThingInfo() {
    *this = ::std::move(from);
  }

  inline SSpaceThingInfo& operator=(const SSpaceThingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceThingInfo& operator=(SSpaceThingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceThingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceThingInfo* internal_default_instance() {
    return reinterpret_cast<const SSpaceThingInfo*>(
               &_SSpaceThingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSpaceThingInfo& a, SSpaceThingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceThingInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceThingInfo* New() const final {
    return CreateMaybeMessage<SSpaceThingInfo>(nullptr);
  }

  SSpaceThingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceThingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceThingInfo& from);
  void MergeFrom(const SSpaceThingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceThingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceThing.SSpaceThingInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceThing_2eproto);
    return ::descriptor_table_spaceThing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCoverFieldNumber = 3,
    kResourceFieldNumber = 6,
    kIdFieldNumber = 1,
    kIsSaleFieldNumber = 4,
    kPriceFieldNumber = 5,
    kTroveGoodsIdFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cover = 3;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string resource = 6;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isSale = 4;
  void clear_issale();
  ::PROTOBUF_NAMESPACE_ID::int32 issale() const;
  void set_issale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_issale() const;
  void _internal_set_issale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 5;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 troveGoodsId = 7;
  void clear_trovegoodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 trovegoodsid() const;
  void set_trovegoodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trovegoodsid() const;
  void _internal_set_trovegoodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceThing.SSpaceThingInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 issale_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 trovegoodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceThing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSpaceThingList

// int32 curPage = 1;
inline void CSpaceThingList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceThingList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceThingList::curpage() const {
  // @@protoc_insertion_point(field_get:spaceThing.CSpaceThingList.curPage)
  return _internal_curpage();
}
inline void CSpaceThingList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CSpaceThingList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:spaceThing.CSpaceThingList.curPage)
}

// int32 pageLimit = 2;
inline void CSpaceThingList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceThingList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceThingList::pagelimit() const {
  // @@protoc_insertion_point(field_get:spaceThing.CSpaceThingList.pageLimit)
  return _internal_pagelimit();
}
inline void CSpaceThingList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CSpaceThingList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:spaceThing.CSpaceThingList.pageLimit)
}

// -------------------------------------------------------------------

// SSpaceThingList

// repeated .spaceThing.Thing thing = 1;
inline int SSpaceThingList::_internal_thing_size() const {
  return thing_.size();
}
inline int SSpaceThingList::thing_size() const {
  return _internal_thing_size();
}
inline void SSpaceThingList::clear_thing() {
  thing_.Clear();
}
inline ::spaceThing::Thing* SSpaceThingList::mutable_thing(int index) {
  // @@protoc_insertion_point(field_mutable:spaceThing.SSpaceThingList.thing)
  return thing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceThing::Thing >*
SSpaceThingList::mutable_thing() {
  // @@protoc_insertion_point(field_mutable_list:spaceThing.SSpaceThingList.thing)
  return &thing_;
}
inline const ::spaceThing::Thing& SSpaceThingList::_internal_thing(int index) const {
  return thing_.Get(index);
}
inline const ::spaceThing::Thing& SSpaceThingList::thing(int index) const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingList.thing)
  return _internal_thing(index);
}
inline ::spaceThing::Thing* SSpaceThingList::_internal_add_thing() {
  return thing_.Add();
}
inline ::spaceThing::Thing* SSpaceThingList::add_thing() {
  // @@protoc_insertion_point(field_add:spaceThing.SSpaceThingList.thing)
  return _internal_add_thing();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceThing::Thing >&
SSpaceThingList::thing() const {
  // @@protoc_insertion_point(field_list:spaceThing.SSpaceThingList.thing)
  return thing_;
}

// int32 total = 2;
inline void SSpaceThingList::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingList::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingList::total() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingList.total)
  return _internal_total();
}
inline void SSpaceThingList::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SSpaceThingList::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingList.total)
}

// int32 curPage = 3;
inline void SSpaceThingList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingList::curpage() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingList.curPage)
  return _internal_curpage();
}
inline void SSpaceThingList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SSpaceThingList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingList.curPage)
}

// int32 pageLimit = 4;
inline void SSpaceThingList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingList::pagelimit() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingList.pageLimit)
  return _internal_pagelimit();
}
inline void SSpaceThingList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void SSpaceThingList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingList.pageLimit)
}

// -------------------------------------------------------------------

// Thing

// int32 id = 1;
inline void Thing::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::id() const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.id)
  return _internal_id();
}
inline void Thing::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Thing::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.id)
}

// int32 thingId = 2;
inline void Thing::clear_thingid() {
  thingid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::_internal_thingid() const {
  return thingid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::thingid() const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.thingId)
  return _internal_thingid();
}
inline void Thing::_internal_set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thingid_ = value;
}
inline void Thing::set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thingid(value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.thingId)
}

// int32 num = 3;
inline void Thing::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::num() const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.num)
  return _internal_num();
}
inline void Thing::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void Thing::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.num)
}

// string name = 4;
inline void Thing::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Thing::name() const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.name)
  return _internal_name();
}
inline void Thing::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.name)
}
inline std::string* Thing::mutable_name() {
  // @@protoc_insertion_point(field_mutable:spaceThing.Thing.name)
  return _internal_mutable_name();
}
inline const std::string& Thing::_internal_name() const {
  return name_.GetNoArena();
}
inline void Thing::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Thing::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceThing.Thing.name)
}
inline void Thing::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceThing.Thing.name)
}
inline void Thing::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceThing.Thing.name)
}
inline std::string* Thing::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Thing::release_name() {
  // @@protoc_insertion_point(field_release:spaceThing.Thing.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Thing::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:spaceThing.Thing.name)
}

// string cover = 5;
inline void Thing::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Thing::cover() const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.cover)
  return _internal_cover();
}
inline void Thing::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.cover)
}
inline std::string* Thing::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:spaceThing.Thing.cover)
  return _internal_mutable_cover();
}
inline const std::string& Thing::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void Thing::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Thing::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceThing.Thing.cover)
}
inline void Thing::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceThing.Thing.cover)
}
inline void Thing::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceThing.Thing.cover)
}
inline std::string* Thing::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Thing::release_cover() {
  // @@protoc_insertion_point(field_release:spaceThing.Thing.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Thing::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:spaceThing.Thing.cover)
}

// int32 price = 6;
inline void Thing::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::price() const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.price)
  return _internal_price();
}
inline void Thing::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void Thing::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.price)
}

// string resource = 7;
inline void Thing::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Thing::resource() const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.resource)
  return _internal_resource();
}
inline void Thing::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.resource)
}
inline std::string* Thing::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:spaceThing.Thing.resource)
  return _internal_mutable_resource();
}
inline const std::string& Thing::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void Thing::_internal_set_resource(const std::string& value) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Thing::set_resource(std::string&& value) {
  
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceThing.Thing.resource)
}
inline void Thing::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceThing.Thing.resource)
}
inline void Thing::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceThing.Thing.resource)
}
inline std::string* Thing::_internal_mutable_resource() {
  
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Thing::release_resource() {
  // @@protoc_insertion_point(field_release:spaceThing.Thing.resource)
  
  return resource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Thing::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:spaceThing.Thing.resource)
}

// int32 shoppingId = 8;
inline void Thing::clear_shoppingid() {
  shoppingid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::_internal_shoppingid() const {
  return shoppingid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::shoppingid() const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.shoppingId)
  return _internal_shoppingid();
}
inline void Thing::_internal_set_shoppingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shoppingid_ = value;
}
inline void Thing::set_shoppingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shoppingid(value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.shoppingId)
}

// int32 troveGoodsId = 9;
inline void Thing::clear_trovegoodsid() {
  trovegoodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::_internal_trovegoodsid() const {
  return trovegoodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::trovegoodsid() const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.troveGoodsId)
  return _internal_trovegoodsid();
}
inline void Thing::_internal_set_trovegoodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trovegoodsid_ = value;
}
inline void Thing::set_trovegoodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trovegoodsid(value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.troveGoodsId)
}

// repeated int32 backpackIds = 10;
inline int Thing::_internal_backpackids_size() const {
  return backpackids_.size();
}
inline int Thing::backpackids_size() const {
  return _internal_backpackids_size();
}
inline void Thing::clear_backpackids() {
  backpackids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::_internal_backpackids(int index) const {
  return backpackids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Thing::backpackids(int index) const {
  // @@protoc_insertion_point(field_get:spaceThing.Thing.backpackIds)
  return _internal_backpackids(index);
}
inline void Thing::set_backpackids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  backpackids_.Set(index, value);
  // @@protoc_insertion_point(field_set:spaceThing.Thing.backpackIds)
}
inline void Thing::_internal_add_backpackids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  backpackids_.Add(value);
}
inline void Thing::add_backpackids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_backpackids(value);
  // @@protoc_insertion_point(field_add:spaceThing.Thing.backpackIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Thing::_internal_backpackids() const {
  return backpackids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Thing::backpackids() const {
  // @@protoc_insertion_point(field_list:spaceThing.Thing.backpackIds)
  return _internal_backpackids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Thing::_internal_mutable_backpackids() {
  return &backpackids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Thing::mutable_backpackids() {
  // @@protoc_insertion_point(field_mutable_list:spaceThing.Thing.backpackIds)
  return _internal_mutable_backpackids();
}

// -------------------------------------------------------------------

// CSpaceThingInfo

// int32 thingId = 1;
inline void CSpaceThingInfo::clear_thingid() {
  thingid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceThingInfo::_internal_thingid() const {
  return thingid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceThingInfo::thingid() const {
  // @@protoc_insertion_point(field_get:spaceThing.CSpaceThingInfo.thingId)
  return _internal_thingid();
}
inline void CSpaceThingInfo::_internal_set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thingid_ = value;
}
inline void CSpaceThingInfo::set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thingid(value);
  // @@protoc_insertion_point(field_set:spaceThing.CSpaceThingInfo.thingId)
}

// -------------------------------------------------------------------

// SSpaceThingInfo

// int32 id = 1;
inline void SSpaceThingInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingInfo::id() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingInfo.id)
  return _internal_id();
}
inline void SSpaceThingInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SSpaceThingInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingInfo.id)
}

// string name = 2;
inline void SSpaceThingInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceThingInfo::name() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingInfo.name)
  return _internal_name();
}
inline void SSpaceThingInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingInfo.name)
}
inline std::string* SSpaceThingInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:spaceThing.SSpaceThingInfo.name)
  return _internal_mutable_name();
}
inline const std::string& SSpaceThingInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void SSpaceThingInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceThingInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceThing.SSpaceThingInfo.name)
}
inline void SSpaceThingInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceThing.SSpaceThingInfo.name)
}
inline void SSpaceThingInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceThing.SSpaceThingInfo.name)
}
inline std::string* SSpaceThingInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceThingInfo::release_name() {
  // @@protoc_insertion_point(field_release:spaceThing.SSpaceThingInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceThingInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:spaceThing.SSpaceThingInfo.name)
}

// string cover = 3;
inline void SSpaceThingInfo::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceThingInfo::cover() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingInfo.cover)
  return _internal_cover();
}
inline void SSpaceThingInfo::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingInfo.cover)
}
inline std::string* SSpaceThingInfo::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:spaceThing.SSpaceThingInfo.cover)
  return _internal_mutable_cover();
}
inline const std::string& SSpaceThingInfo::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void SSpaceThingInfo::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceThingInfo::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceThing.SSpaceThingInfo.cover)
}
inline void SSpaceThingInfo::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceThing.SSpaceThingInfo.cover)
}
inline void SSpaceThingInfo::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceThing.SSpaceThingInfo.cover)
}
inline std::string* SSpaceThingInfo::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceThingInfo::release_cover() {
  // @@protoc_insertion_point(field_release:spaceThing.SSpaceThingInfo.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceThingInfo::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:spaceThing.SSpaceThingInfo.cover)
}

// int32 isSale = 4;
inline void SSpaceThingInfo::clear_issale() {
  issale_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingInfo::_internal_issale() const {
  return issale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingInfo::issale() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingInfo.isSale)
  return _internal_issale();
}
inline void SSpaceThingInfo::_internal_set_issale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  issale_ = value;
}
inline void SSpaceThingInfo::set_issale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_issale(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingInfo.isSale)
}

// int32 price = 5;
inline void SSpaceThingInfo::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingInfo::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingInfo::price() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingInfo.price)
  return _internal_price();
}
inline void SSpaceThingInfo::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void SSpaceThingInfo::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingInfo.price)
}

// string resource = 6;
inline void SSpaceThingInfo::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceThingInfo::resource() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingInfo.resource)
  return _internal_resource();
}
inline void SSpaceThingInfo::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingInfo.resource)
}
inline std::string* SSpaceThingInfo::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:spaceThing.SSpaceThingInfo.resource)
  return _internal_mutable_resource();
}
inline const std::string& SSpaceThingInfo::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void SSpaceThingInfo::_internal_set_resource(const std::string& value) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceThingInfo::set_resource(std::string&& value) {
  
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceThing.SSpaceThingInfo.resource)
}
inline void SSpaceThingInfo::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceThing.SSpaceThingInfo.resource)
}
inline void SSpaceThingInfo::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceThing.SSpaceThingInfo.resource)
}
inline std::string* SSpaceThingInfo::_internal_mutable_resource() {
  
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceThingInfo::release_resource() {
  // @@protoc_insertion_point(field_release:spaceThing.SSpaceThingInfo.resource)
  
  return resource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceThingInfo::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:spaceThing.SSpaceThingInfo.resource)
}

// int32 troveGoodsId = 7;
inline void SSpaceThingInfo::clear_trovegoodsid() {
  trovegoodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingInfo::_internal_trovegoodsid() const {
  return trovegoodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceThingInfo::trovegoodsid() const {
  // @@protoc_insertion_point(field_get:spaceThing.SSpaceThingInfo.troveGoodsId)
  return _internal_trovegoodsid();
}
inline void SSpaceThingInfo::_internal_set_trovegoodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trovegoodsid_ = value;
}
inline void SSpaceThingInfo::set_trovegoodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trovegoodsid(value);
  // @@protoc_insertion_point(field_set:spaceThing.SSpaceThingInfo.troveGoodsId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spaceThing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceThing_2eproto
