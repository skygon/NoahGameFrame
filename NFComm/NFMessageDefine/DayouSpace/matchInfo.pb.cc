// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchInfo.proto

#include "matchInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_award_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BAward_award_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_countdown_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCountdown_countdown_2eproto;
namespace matchInfo {
class SMatchStartAndEndNoticeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMatchStartAndEndNotice> _instance;
} _SMatchStartAndEndNotice_default_instance_;
class CMatchStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMatchStart> _instance;
} _CMatchStart_default_instance_;
class SMatchStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMatchStart> _instance;
} _SMatchStart_default_instance_;
class CMatchEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMatchEnd> _instance;
} _CMatchEnd_default_instance_;
class SMatchEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMatchEnd> _instance;
} _SMatchEnd_default_instance_;
}  // namespace matchInfo
static void InitDefaultsscc_info_CMatchEnd_matchInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::matchInfo::_CMatchEnd_default_instance_;
    new (ptr) ::matchInfo::CMatchEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::matchInfo::CMatchEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMatchEnd_matchInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMatchEnd_matchInfo_2eproto}, {}};

static void InitDefaultsscc_info_CMatchStart_matchInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::matchInfo::_CMatchStart_default_instance_;
    new (ptr) ::matchInfo::CMatchStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::matchInfo::CMatchStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMatchStart_matchInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMatchStart_matchInfo_2eproto}, {}};

static void InitDefaultsscc_info_SMatchEnd_matchInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::matchInfo::_SMatchEnd_default_instance_;
    new (ptr) ::matchInfo::SMatchEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::matchInfo::SMatchEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMatchEnd_matchInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMatchEnd_matchInfo_2eproto}, {
      &scc_info_BAward_award_2eproto.base,}};

static void InitDefaultsscc_info_SMatchStart_matchInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::matchInfo::_SMatchStart_default_instance_;
    new (ptr) ::matchInfo::SMatchStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::matchInfo::SMatchStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMatchStart_matchInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMatchStart_matchInfo_2eproto}, {}};

static void InitDefaultsscc_info_SMatchStartAndEndNotice_matchInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::matchInfo::_SMatchStartAndEndNotice_default_instance_;
    new (ptr) ::matchInfo::SMatchStartAndEndNotice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::matchInfo::SMatchStartAndEndNotice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMatchStartAndEndNotice_matchInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMatchStartAndEndNotice_matchInfo_2eproto}, {
      &scc_info_SCountdown_countdown_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_matchInfo_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_matchInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_matchInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_matchInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::matchInfo::SMatchStartAndEndNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::matchInfo::SMatchStartAndEndNotice, countdown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::matchInfo::CMatchStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::matchInfo::CMatchStart, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::matchInfo::SMatchStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::matchInfo::SMatchStart, flag_),
  PROTOBUF_FIELD_OFFSET(::matchInfo::SMatchStart, currenttime_),
  PROTOBUF_FIELD_OFFSET(::matchInfo::SMatchStart, activeendtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::matchInfo::CMatchEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::matchInfo::CMatchEnd, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::matchInfo::SMatchEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::matchInfo::SMatchEnd, flag_),
  PROTOBUF_FIELD_OFFSET(::matchInfo::SMatchEnd, award_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::matchInfo::SMatchStartAndEndNotice)},
  { 6, -1, sizeof(::matchInfo::CMatchStart)},
  { 12, -1, sizeof(::matchInfo::SMatchStart)},
  { 20, -1, sizeof(::matchInfo::CMatchEnd)},
  { 26, -1, sizeof(::matchInfo::SMatchEnd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::matchInfo::_SMatchStartAndEndNotice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::matchInfo::_CMatchStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::matchInfo::_SMatchStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::matchInfo::_CMatchEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::matchInfo::_SMatchEnd_default_instance_),
};

const char descriptor_table_protodef_matchInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017matchInfo.proto\022\tmatchInfo\032\013award.prot"
  "o\032\017countdown.proto\"C\n\027SMatchStartAndEndN"
  "otice\022(\n\tcountdown\030\001 \001(\0132\025.countdown.SCo"
  "untdown\"\032\n\013CMatchStart\022\013\n\003uid\030\001 \001(\005\"G\n\013S"
  "MatchStart\022\014\n\004flag\030\001 \001(\005\022\023\n\013currentTime\030"
  "\002 \001(\003\022\025\n\ractiveEndTime\030\003 \001(\003\"\030\n\tCMatchEn"
  "d\022\013\n\003uid\030\001 \001(\005\"7\n\tSMatchEnd\022\014\n\004flag\030\001 \001("
  "\005\022\034\n\005award\030\002 \003(\0132\r.award.BAwardB%\n\030com.d"
  "ayou.space.protobufB\tMatchInfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_matchInfo_2eproto_deps[2] = {
  &::descriptor_table_award_2eproto,
  &::descriptor_table_countdown_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_matchInfo_2eproto_sccs[5] = {
  &scc_info_CMatchEnd_matchInfo_2eproto.base,
  &scc_info_CMatchStart_matchInfo_2eproto.base,
  &scc_info_SMatchEnd_matchInfo_2eproto.base,
  &scc_info_SMatchStart_matchInfo_2eproto.base,
  &scc_info_SMatchStartAndEndNotice_matchInfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_matchInfo_2eproto_once;
static bool descriptor_table_matchInfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_matchInfo_2eproto = {
  &descriptor_table_matchInfo_2eproto_initialized, descriptor_table_protodef_matchInfo_2eproto, "matchInfo.proto", 358,
  &descriptor_table_matchInfo_2eproto_once, descriptor_table_matchInfo_2eproto_sccs, descriptor_table_matchInfo_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_matchInfo_2eproto::offsets,
  file_level_metadata_matchInfo_2eproto, 5, file_level_enum_descriptors_matchInfo_2eproto, file_level_service_descriptors_matchInfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_matchInfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_matchInfo_2eproto), true);
namespace matchInfo {

// ===================================================================

void SMatchStartAndEndNotice::InitAsDefaultInstance() {
  ::matchInfo::_SMatchStartAndEndNotice_default_instance_._instance.get_mutable()->countdown_ = const_cast< ::countdown::SCountdown*>(
      ::countdown::SCountdown::internal_default_instance());
}
class SMatchStartAndEndNotice::_Internal {
 public:
  static const ::countdown::SCountdown& countdown(const SMatchStartAndEndNotice* msg);
};

const ::countdown::SCountdown&
SMatchStartAndEndNotice::_Internal::countdown(const SMatchStartAndEndNotice* msg) {
  return *msg->countdown_;
}
void SMatchStartAndEndNotice::clear_countdown() {
  if (GetArenaNoVirtual() == nullptr && countdown_ != nullptr) {
    delete countdown_;
  }
  countdown_ = nullptr;
}
SMatchStartAndEndNotice::SMatchStartAndEndNotice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matchInfo.SMatchStartAndEndNotice)
}
SMatchStartAndEndNotice::SMatchStartAndEndNotice(const SMatchStartAndEndNotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_countdown()) {
    countdown_ = new ::countdown::SCountdown(*from.countdown_);
  } else {
    countdown_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:matchInfo.SMatchStartAndEndNotice)
}

void SMatchStartAndEndNotice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMatchStartAndEndNotice_matchInfo_2eproto.base);
  countdown_ = nullptr;
}

SMatchStartAndEndNotice::~SMatchStartAndEndNotice() {
  // @@protoc_insertion_point(destructor:matchInfo.SMatchStartAndEndNotice)
  SharedDtor();
}

void SMatchStartAndEndNotice::SharedDtor() {
  if (this != internal_default_instance()) delete countdown_;
}

void SMatchStartAndEndNotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMatchStartAndEndNotice& SMatchStartAndEndNotice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMatchStartAndEndNotice_matchInfo_2eproto.base);
  return *internal_default_instance();
}


void SMatchStartAndEndNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:matchInfo.SMatchStartAndEndNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && countdown_ != nullptr) {
    delete countdown_;
  }
  countdown_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SMatchStartAndEndNotice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .countdown.SCountdown countdown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_countdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMatchStartAndEndNotice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:matchInfo.SMatchStartAndEndNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .countdown.SCountdown countdown = 1;
  if (this->has_countdown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::countdown(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:matchInfo.SMatchStartAndEndNotice)
  return target;
}

size_t SMatchStartAndEndNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:matchInfo.SMatchStartAndEndNotice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .countdown.SCountdown countdown = 1;
  if (this->has_countdown()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *countdown_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMatchStartAndEndNotice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:matchInfo.SMatchStartAndEndNotice)
  GOOGLE_DCHECK_NE(&from, this);
  const SMatchStartAndEndNotice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMatchStartAndEndNotice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:matchInfo.SMatchStartAndEndNotice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:matchInfo.SMatchStartAndEndNotice)
    MergeFrom(*source);
  }
}

void SMatchStartAndEndNotice::MergeFrom(const SMatchStartAndEndNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:matchInfo.SMatchStartAndEndNotice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_countdown()) {
    _internal_mutable_countdown()->::countdown::SCountdown::MergeFrom(from._internal_countdown());
  }
}

void SMatchStartAndEndNotice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:matchInfo.SMatchStartAndEndNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMatchStartAndEndNotice::CopyFrom(const SMatchStartAndEndNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:matchInfo.SMatchStartAndEndNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMatchStartAndEndNotice::IsInitialized() const {
  return true;
}

void SMatchStartAndEndNotice::InternalSwap(SMatchStartAndEndNotice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(countdown_, other->countdown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMatchStartAndEndNotice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMatchStart::InitAsDefaultInstance() {
}
class CMatchStart::_Internal {
 public:
};

CMatchStart::CMatchStart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matchInfo.CMatchStart)
}
CMatchStart::CMatchStart(const CMatchStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:matchInfo.CMatchStart)
}

void CMatchStart::SharedCtor() {
  uid_ = 0;
}

CMatchStart::~CMatchStart() {
  // @@protoc_insertion_point(destructor:matchInfo.CMatchStart)
  SharedDtor();
}

void CMatchStart::SharedDtor() {
}

void CMatchStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMatchStart& CMatchStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMatchStart_matchInfo_2eproto.base);
  return *internal_default_instance();
}


void CMatchStart::Clear() {
// @@protoc_insertion_point(message_clear_start:matchInfo.CMatchStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CMatchStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMatchStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:matchInfo.CMatchStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:matchInfo.CMatchStart)
  return target;
}

size_t CMatchStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:matchInfo.CMatchStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:matchInfo.CMatchStart)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMatchStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:matchInfo.CMatchStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:matchInfo.CMatchStart)
    MergeFrom(*source);
  }
}

void CMatchStart::MergeFrom(const CMatchStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:matchInfo.CMatchStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CMatchStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:matchInfo.CMatchStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchStart::CopyFrom(const CMatchStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:matchInfo.CMatchStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchStart::IsInitialized() const {
  return true;
}

void CMatchStart::InternalSwap(CMatchStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMatchStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMatchStart::InitAsDefaultInstance() {
}
class SMatchStart::_Internal {
 public:
};

SMatchStart::SMatchStart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matchInfo.SMatchStart)
}
SMatchStart::SMatchStart(const SMatchStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currenttime_, &from.currenttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&currenttime_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:matchInfo.SMatchStart)
}

void SMatchStart::SharedCtor() {
  ::memset(&currenttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&currenttime_)) + sizeof(flag_));
}

SMatchStart::~SMatchStart() {
  // @@protoc_insertion_point(destructor:matchInfo.SMatchStart)
  SharedDtor();
}

void SMatchStart::SharedDtor() {
}

void SMatchStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMatchStart& SMatchStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMatchStart_matchInfo_2eproto.base);
  return *internal_default_instance();
}


void SMatchStart::Clear() {
// @@protoc_insertion_point(message_clear_start:matchInfo.SMatchStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currenttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&currenttime_)) + sizeof(flag_));
  _internal_metadata_.Clear();
}

const char* SMatchStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 currentTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          currenttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 activeEndTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          activeendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMatchStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:matchInfo.SMatchStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  // int64 currentTime = 2;
  if (this->currenttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_currenttime(), target);
  }

  // int64 activeEndTime = 3;
  if (this->activeendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_activeendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:matchInfo.SMatchStart)
  return target;
}

size_t SMatchStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:matchInfo.SMatchStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 currentTime = 2;
  if (this->currenttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_currenttime());
  }

  // int64 activeEndTime = 3;
  if (this->activeendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_activeendtime());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMatchStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:matchInfo.SMatchStart)
  GOOGLE_DCHECK_NE(&from, this);
  const SMatchStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMatchStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:matchInfo.SMatchStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:matchInfo.SMatchStart)
    MergeFrom(*source);
  }
}

void SMatchStart::MergeFrom(const SMatchStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:matchInfo.SMatchStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currenttime() != 0) {
    _internal_set_currenttime(from._internal_currenttime());
  }
  if (from.activeendtime() != 0) {
    _internal_set_activeendtime(from._internal_activeendtime());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void SMatchStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:matchInfo.SMatchStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMatchStart::CopyFrom(const SMatchStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:matchInfo.SMatchStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMatchStart::IsInitialized() const {
  return true;
}

void SMatchStart::InternalSwap(SMatchStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(currenttime_, other->currenttime_);
  swap(activeendtime_, other->activeendtime_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMatchStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMatchEnd::InitAsDefaultInstance() {
}
class CMatchEnd::_Internal {
 public:
};

CMatchEnd::CMatchEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matchInfo.CMatchEnd)
}
CMatchEnd::CMatchEnd(const CMatchEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:matchInfo.CMatchEnd)
}

void CMatchEnd::SharedCtor() {
  uid_ = 0;
}

CMatchEnd::~CMatchEnd() {
  // @@protoc_insertion_point(destructor:matchInfo.CMatchEnd)
  SharedDtor();
}

void CMatchEnd::SharedDtor() {
}

void CMatchEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMatchEnd& CMatchEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMatchEnd_matchInfo_2eproto.base);
  return *internal_default_instance();
}


void CMatchEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:matchInfo.CMatchEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CMatchEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMatchEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:matchInfo.CMatchEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:matchInfo.CMatchEnd)
  return target;
}

size_t CMatchEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:matchInfo.CMatchEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:matchInfo.CMatchEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMatchEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:matchInfo.CMatchEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:matchInfo.CMatchEnd)
    MergeFrom(*source);
  }
}

void CMatchEnd::MergeFrom(const CMatchEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:matchInfo.CMatchEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CMatchEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:matchInfo.CMatchEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchEnd::CopyFrom(const CMatchEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:matchInfo.CMatchEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchEnd::IsInitialized() const {
  return true;
}

void CMatchEnd::InternalSwap(CMatchEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMatchEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMatchEnd::InitAsDefaultInstance() {
}
class SMatchEnd::_Internal {
 public:
};

void SMatchEnd::clear_award() {
  award_.Clear();
}
SMatchEnd::SMatchEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matchInfo.SMatchEnd)
}
SMatchEnd::SMatchEnd(const SMatchEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      award_(from.award_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:matchInfo.SMatchEnd)
}

void SMatchEnd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMatchEnd_matchInfo_2eproto.base);
  flag_ = 0;
}

SMatchEnd::~SMatchEnd() {
  // @@protoc_insertion_point(destructor:matchInfo.SMatchEnd)
  SharedDtor();
}

void SMatchEnd::SharedDtor() {
}

void SMatchEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMatchEnd& SMatchEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMatchEnd_matchInfo_2eproto.base);
  return *internal_default_instance();
}


void SMatchEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:matchInfo.SMatchEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  award_.Clear();
  flag_ = 0;
  _internal_metadata_.Clear();
}

const char* SMatchEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .award.BAward award = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_award(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMatchEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:matchInfo.SMatchEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  // repeated .award.BAward award = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_award_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_award(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:matchInfo.SMatchEnd)
  return target;
}

size_t SMatchEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:matchInfo.SMatchEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .award.BAward award = 2;
  total_size += 1UL * this->_internal_award_size();
  for (const auto& msg : this->award_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMatchEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:matchInfo.SMatchEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SMatchEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMatchEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:matchInfo.SMatchEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:matchInfo.SMatchEnd)
    MergeFrom(*source);
  }
}

void SMatchEnd::MergeFrom(const SMatchEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:matchInfo.SMatchEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  award_.MergeFrom(from.award_);
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void SMatchEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:matchInfo.SMatchEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMatchEnd::CopyFrom(const SMatchEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:matchInfo.SMatchEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMatchEnd::IsInitialized() const {
  return true;
}

void SMatchEnd::InternalSwap(SMatchEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  award_.InternalSwap(&other->award_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMatchEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace matchInfo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::matchInfo::SMatchStartAndEndNotice* Arena::CreateMaybeMessage< ::matchInfo::SMatchStartAndEndNotice >(Arena* arena) {
  return Arena::CreateInternal< ::matchInfo::SMatchStartAndEndNotice >(arena);
}
template<> PROTOBUF_NOINLINE ::matchInfo::CMatchStart* Arena::CreateMaybeMessage< ::matchInfo::CMatchStart >(Arena* arena) {
  return Arena::CreateInternal< ::matchInfo::CMatchStart >(arena);
}
template<> PROTOBUF_NOINLINE ::matchInfo::SMatchStart* Arena::CreateMaybeMessage< ::matchInfo::SMatchStart >(Arena* arena) {
  return Arena::CreateInternal< ::matchInfo::SMatchStart >(arena);
}
template<> PROTOBUF_NOINLINE ::matchInfo::CMatchEnd* Arena::CreateMaybeMessage< ::matchInfo::CMatchEnd >(Arena* arena) {
  return Arena::CreateInternal< ::matchInfo::CMatchEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::matchInfo::SMatchEnd* Arena::CreateMaybeMessage< ::matchInfo::SMatchEnd >(Arena* arena) {
  return Arena::CreateInternal< ::matchInfo::SMatchEnd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
