// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userInfo.proto

#include "userInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace userInfo {
class CUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CUserInfo> _instance;
} _CUserInfo_default_instance_;
class SUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SUserInfo> _instance;
} _SUserInfo_default_instance_;
class SUserAttrFromNftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SUserAttrFromNft> _instance;
} _SUserAttrFromNft_default_instance_;
class CChangeUserSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CChangeUserSign> _instance;
} _CChangeUserSign_default_instance_;
class SChangeUserSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SChangeUserSign> _instance;
} _SChangeUserSign_default_instance_;
class CChangeUserIconDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CChangeUserIcon> _instance;
} _CChangeUserIcon_default_instance_;
class SChangeUserIconDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SChangeUserIcon> _instance;
} _SChangeUserIcon_default_instance_;
class SInAccountUnbindDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SInAccountUnbind> _instance;
} _SInAccountUnbind_default_instance_;
}  // namespace userInfo
static void InitDefaultsscc_info_CChangeUserIcon_userInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfo::_CChangeUserIcon_default_instance_;
    new (ptr) ::userInfo::CChangeUserIcon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfo::CChangeUserIcon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CChangeUserIcon_userInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CChangeUserIcon_userInfo_2eproto}, {}};

static void InitDefaultsscc_info_CChangeUserSign_userInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfo::_CChangeUserSign_default_instance_;
    new (ptr) ::userInfo::CChangeUserSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfo::CChangeUserSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CChangeUserSign_userInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CChangeUserSign_userInfo_2eproto}, {}};

static void InitDefaultsscc_info_CUserInfo_userInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfo::_CUserInfo_default_instance_;
    new (ptr) ::userInfo::CUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfo::CUserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CUserInfo_userInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CUserInfo_userInfo_2eproto}, {}};

static void InitDefaultsscc_info_SChangeUserIcon_userInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfo::_SChangeUserIcon_default_instance_;
    new (ptr) ::userInfo::SChangeUserIcon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfo::SChangeUserIcon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SChangeUserIcon_userInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SChangeUserIcon_userInfo_2eproto}, {}};

static void InitDefaultsscc_info_SChangeUserSign_userInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfo::_SChangeUserSign_default_instance_;
    new (ptr) ::userInfo::SChangeUserSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfo::SChangeUserSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SChangeUserSign_userInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SChangeUserSign_userInfo_2eproto}, {}};

static void InitDefaultsscc_info_SInAccountUnbind_userInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfo::_SInAccountUnbind_default_instance_;
    new (ptr) ::userInfo::SInAccountUnbind();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfo::SInAccountUnbind::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SInAccountUnbind_userInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SInAccountUnbind_userInfo_2eproto}, {}};

static void InitDefaultsscc_info_SUserAttrFromNft_userInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfo::_SUserAttrFromNft_default_instance_;
    new (ptr) ::userInfo::SUserAttrFromNft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfo::SUserAttrFromNft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUserAttrFromNft_userInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SUserAttrFromNft_userInfo_2eproto}, {}};

static void InitDefaultsscc_info_SUserInfo_userInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfo::_SUserInfo_default_instance_;
    new (ptr) ::userInfo::SUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfo::SUserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUserInfo_userInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SUserInfo_userInfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userInfo_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_userInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_userInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfo::CUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfo::CUserInfo, os_),
  PROTOBUF_FIELD_OFFSET(::userInfo::CUserInfo, clientip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, avatar_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, avatarcolor_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, identifierid_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, nameplate_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, authorityid_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, imtoken_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, phone_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, avatarkey_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, usericon_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, unionid_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, sign_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, os_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, inuid_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, yuanshenavatarkey_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, ipcity_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, iscreator_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, gender_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, hiphopstartoken_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, title_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserInfo, certification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserAttrFromNft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfo::SUserAttrFromNft, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfo::CChangeUserSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfo::CChangeUserSign, sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfo::SChangeUserSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfo::SChangeUserSign, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfo::CChangeUserIcon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfo::CChangeUserIcon, usericon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfo::SChangeUserIcon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfo::SChangeUserIcon, status_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SChangeUserIcon, usericon_),
  PROTOBUF_FIELD_OFFSET(::userInfo::SChangeUserIcon, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfo::SInAccountUnbind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfo::SInAccountUnbind, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::userInfo::CUserInfo)},
  { 7, -1, sizeof(::userInfo::SUserInfo)},
  { 34, -1, sizeof(::userInfo::SUserAttrFromNft)},
  { 40, -1, sizeof(::userInfo::CChangeUserSign)},
  { 46, -1, sizeof(::userInfo::SChangeUserSign)},
  { 52, -1, sizeof(::userInfo::CChangeUserIcon)},
  { 58, -1, sizeof(::userInfo::SChangeUserIcon)},
  { 66, -1, sizeof(::userInfo::SInAccountUnbind)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfo::_CUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfo::_SUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfo::_SUserAttrFromNft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfo::_CChangeUserSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfo::_SChangeUserSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfo::_CChangeUserIcon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfo::_SChangeUserIcon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfo::_SInAccountUnbind_default_instance_),
};

const char descriptor_table_protodef_userInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016userInfo.proto\022\010userInfo\")\n\tCUserInfo\022"
  "\n\n\002os\030\001 \001(\005\022\020\n\010clientIp\030\002 \001(\t\"\225\003\n\tSUserI"
  "nfo\022\013\n\003uid\030\001 \001(\005\022\016\n\006avatar\030\002 \001(\005\022\023\n\013avat"
  "arColor\030\003 \001(\t\022\024\n\014identifierId\030\004 \001(\t\022\021\n\tn"
  "ameplate\030\005 \001(\005\022\023\n\013authorityID\030\006 \001(\005\022\017\n\007i"
  "mToken\030\007 \001(\t\022\r\n\005phone\030\010 \001(\t\022\014\n\004nick\030\t \001("
  "\t\022\021\n\tavatarKey\030\n \001(\005\022\020\n\010userIcon\030\013 \001(\t\022\017"
  "\n\007unionid\030\014 \001(\t\022\014\n\004sign\030\r \001(\t\022\n\n\002os\030\016 \001("
  "\005\022\r\n\005inUid\030\017 \001(\t\022\031\n\021yuanshenAvatarKey\030\020 "
  "\001(\005\022\016\n\006ipCity\030\021 \001(\t\022\021\n\tisCreator\030\022 \001(\005\022\016"
  "\n\006gender\030\023 \001(\005\022\027\n\017hiphopStarToken\030\024 \001(\005\022"
  "\r\n\005title\030\025 \001(\t\022\025\n\rcertification\030\026 \001(\t\" \n"
  "\020SUserAttrFromNft\022\014\n\004attr\030\001 \001(\005\"\037\n\017CChan"
  "geUserSign\022\014\n\004sign\030\001 \001(\t\"!\n\017SChangeUserS"
  "ign\022\016\n\006status\030\001 \001(\005\"#\n\017CChangeUserIcon\022\020"
  "\n\010userIcon\030\001 \001(\t\"@\n\017SChangeUserIcon\022\016\n\006s"
  "tatus\030\001 \001(\005\022\020\n\010userIcon\030\002 \001(\t\022\013\n\003uid\030\003 \001"
  "(\005\"\"\n\020SInAccountUnbind\022\016\n\006status\030\001 \001(\005B$"
  "\n\030com.dayou.space.protobufB\010UserInfob\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userInfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userInfo_2eproto_sccs[8] = {
  &scc_info_CChangeUserIcon_userInfo_2eproto.base,
  &scc_info_CChangeUserSign_userInfo_2eproto.base,
  &scc_info_CUserInfo_userInfo_2eproto.base,
  &scc_info_SChangeUserIcon_userInfo_2eproto.base,
  &scc_info_SChangeUserSign_userInfo_2eproto.base,
  &scc_info_SInAccountUnbind_userInfo_2eproto.base,
  &scc_info_SUserAttrFromNft_userInfo_2eproto.base,
  &scc_info_SUserInfo_userInfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userInfo_2eproto_once;
static bool descriptor_table_userInfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userInfo_2eproto = {
  &descriptor_table_userInfo_2eproto_initialized, descriptor_table_protodef_userInfo_2eproto, "userInfo.proto", 764,
  &descriptor_table_userInfo_2eproto_once, descriptor_table_userInfo_2eproto_sccs, descriptor_table_userInfo_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_userInfo_2eproto::offsets,
  file_level_metadata_userInfo_2eproto, 8, file_level_enum_descriptors_userInfo_2eproto, file_level_service_descriptors_userInfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userInfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userInfo_2eproto), true);
namespace userInfo {

// ===================================================================

void CUserInfo::InitAsDefaultInstance() {
}
class CUserInfo::_Internal {
 public:
};

CUserInfo::CUserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfo.CUserInfo)
}
CUserInfo::CUserInfo(const CUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientip().empty()) {
    clientip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  os_ = from.os_;
  // @@protoc_insertion_point(copy_constructor:userInfo.CUserInfo)
}

void CUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CUserInfo_userInfo_2eproto.base);
  clientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_ = 0;
}

CUserInfo::~CUserInfo() {
  // @@protoc_insertion_point(destructor:userInfo.CUserInfo)
  SharedDtor();
}

void CUserInfo::SharedDtor() {
  clientip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserInfo& CUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CUserInfo_userInfo_2eproto.base);
  return *internal_default_instance();
}


void CUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfo.CUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_ = 0;
  _internal_metadata_.Clear();
}

const char* CUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 os = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          os_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientIp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.CUserInfo.clientIp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfo.CUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 os = 1;
  if (this->os() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_os(), target);
  }

  // string clientIp = 2;
  if (this->clientip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientip().data(), static_cast<int>(this->_internal_clientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.CUserInfo.clientIp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfo.CUserInfo)
  return target;
}

size_t CUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfo.CUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientIp = 2;
  if (this->clientip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientip());
  }

  // int32 os = 1;
  if (this->os() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_os());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfo.CUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfo.CUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfo.CUserInfo)
    MergeFrom(*source);
  }
}

void CUserInfo::MergeFrom(const CUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfo.CUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientip().size() > 0) {

    clientip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  if (from.os() != 0) {
    _internal_set_os(from._internal_os());
  }
}

void CUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfo.CUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserInfo::CopyFrom(const CUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfo.CUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserInfo::IsInitialized() const {
  return true;
}

void CUserInfo::InternalSwap(CUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clientip_.Swap(&other->clientip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(os_, other->os_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SUserInfo::InitAsDefaultInstance() {
}
class SUserInfo::_Internal {
 public:
};

SUserInfo::SUserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfo.SUserInfo)
}
SUserInfo::SUserInfo(const SUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarcolor().empty()) {
    avatarcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarcolor_);
  }
  identifierid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identifierid().empty()) {
    identifierid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifierid_);
  }
  imtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imtoken().empty()) {
    imtoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imtoken_);
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usericon().empty()) {
    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  unionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unionid().empty()) {
    unionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unionid_);
  }
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sign().empty()) {
    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  inuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inuid().empty()) {
    inuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inuid_);
  }
  ipcity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipcity().empty()) {
    ipcity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipcity_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  certification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_certification().empty()) {
    certification_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.certification_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hiphopstartoken_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(hiphopstartoken_));
  // @@protoc_insertion_point(copy_constructor:userInfo.SUserInfo)
}

void SUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SUserInfo_userInfo_2eproto.base);
  avatarcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifierid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipcity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hiphopstartoken_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(hiphopstartoken_));
}

SUserInfo::~SUserInfo() {
  // @@protoc_insertion_point(destructor:userInfo.SUserInfo)
  SharedDtor();
}

void SUserInfo::SharedDtor() {
  avatarcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifierid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usericon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipcity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SUserInfo& SUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SUserInfo_userInfo_2eproto.base);
  return *internal_default_instance();
}


void SUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfo.SUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifierid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imtoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipcity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certification_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hiphopstartoken_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(hiphopstartoken_));
  _internal_metadata_.Clear();
}

const char* SUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          avatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_avatarcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.avatarColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string identifierId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_identifierid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.identifierId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nameplate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nameplate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 authorityID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          authorityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imToken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_imtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.imToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarKey = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userIcon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_usericon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.userIcon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unionid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_unionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.unionid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sign = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.sign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 os = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          os_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inUid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_inuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.inUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yuanshenAvatarKey = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          yuanshenavatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipCity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_ipcity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.ipCity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isCreator = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          iscreator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gender = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hiphopStarToken = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          hiphopstartoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string certification = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_certification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SUserInfo.certification"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfo.SUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 avatar = 2;
  if (this->avatar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_avatar(), target);
  }

  // string avatarColor = 3;
  if (this->avatarcolor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarcolor().data(), static_cast<int>(this->_internal_avatarcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.avatarColor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_avatarcolor(), target);
  }

  // string identifierId = 4;
  if (this->identifierid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifierid().data(), static_cast<int>(this->_internal_identifierid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.identifierId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_identifierid(), target);
  }

  // int32 nameplate = 5;
  if (this->nameplate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_nameplate(), target);
  }

  // int32 authorityID = 6;
  if (this->authorityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_authorityid(), target);
  }

  // string imToken = 7;
  if (this->imtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imtoken().data(), static_cast<int>(this->_internal_imtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.imToken");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_imtoken(), target);
  }

  // string phone = 8;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.phone");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_phone(), target);
  }

  // string nick = 9;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.nick");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_nick(), target);
  }

  // int32 avatarKey = 10;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_avatarkey(), target);
  }

  // string userIcon = 11;
  if (this->usericon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usericon().data(), static_cast<int>(this->_internal_usericon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.userIcon");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_usericon(), target);
  }

  // string unionid = 12;
  if (this->unionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unionid().data(), static_cast<int>(this->_internal_unionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.unionid");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_unionid(), target);
  }

  // string sign = 13;
  if (this->sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign().data(), static_cast<int>(this->_internal_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.sign");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_sign(), target);
  }

  // int32 os = 14;
  if (this->os() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_os(), target);
  }

  // string inUid = 15;
  if (this->inuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inuid().data(), static_cast<int>(this->_internal_inuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.inUid");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_inuid(), target);
  }

  // int32 yuanshenAvatarKey = 16;
  if (this->yuanshenavatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_yuanshenavatarkey(), target);
  }

  // string ipCity = 17;
  if (this->ipcity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipcity().data(), static_cast<int>(this->_internal_ipcity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.ipCity");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_ipcity(), target);
  }

  // int32 isCreator = 18;
  if (this->iscreator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_iscreator(), target);
  }

  // int32 gender = 19;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_gender(), target);
  }

  // int32 hiphopStarToken = 20;
  if (this->hiphopstartoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_hiphopstartoken(), target);
  }

  // string title = 21;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.title");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_title(), target);
  }

  // string certification = 22;
  if (this->certification().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_certification().data(), static_cast<int>(this->_internal_certification().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SUserInfo.certification");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_certification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfo.SUserInfo)
  return target;
}

size_t SUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfo.SUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string avatarColor = 3;
  if (this->avatarcolor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarcolor());
  }

  // string identifierId = 4;
  if (this->identifierid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifierid());
  }

  // string imToken = 7;
  if (this->imtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imtoken());
  }

  // string phone = 8;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string nick = 9;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string userIcon = 11;
  if (this->usericon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usericon());
  }

  // string unionid = 12;
  if (this->unionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unionid());
  }

  // string sign = 13;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sign());
  }

  // string inUid = 15;
  if (this->inuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inuid());
  }

  // string ipCity = 17;
  if (this->ipcity().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipcity());
  }

  // string title = 21;
  if (this->title().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string certification = 22;
  if (this->certification().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_certification());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 avatar = 2;
  if (this->avatar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatar());
  }

  // int32 nameplate = 5;
  if (this->nameplate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nameplate());
  }

  // int32 authorityID = 6;
  if (this->authorityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_authorityid());
  }

  // int32 avatarKey = 10;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  // int32 os = 14;
  if (this->os() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_os());
  }

  // int32 yuanshenAvatarKey = 16;
  if (this->yuanshenavatarkey() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yuanshenavatarkey());
  }

  // int32 isCreator = 18;
  if (this->iscreator() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iscreator());
  }

  // int32 gender = 19;
  if (this->gender() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gender());
  }

  // int32 hiphopStarToken = 20;
  if (this->hiphopstartoken() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hiphopstartoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfo.SUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfo.SUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfo.SUserInfo)
    MergeFrom(*source);
  }
}

void SUserInfo::MergeFrom(const SUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfo.SUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarcolor().size() > 0) {

    avatarcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarcolor_);
  }
  if (from.identifierid().size() > 0) {

    identifierid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifierid_);
  }
  if (from.imtoken().size() > 0) {

    imtoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imtoken_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.usericon().size() > 0) {

    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  if (from.unionid().size() > 0) {

    unionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unionid_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.inuid().size() > 0) {

    inuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inuid_);
  }
  if (from.ipcity().size() > 0) {

    ipcity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipcity_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.certification().size() > 0) {

    certification_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.certification_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.avatar() != 0) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from.nameplate() != 0) {
    _internal_set_nameplate(from._internal_nameplate());
  }
  if (from.authorityid() != 0) {
    _internal_set_authorityid(from._internal_authorityid());
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
  if (from.os() != 0) {
    _internal_set_os(from._internal_os());
  }
  if (from.yuanshenavatarkey() != 0) {
    _internal_set_yuanshenavatarkey(from._internal_yuanshenavatarkey());
  }
  if (from.iscreator() != 0) {
    _internal_set_iscreator(from._internal_iscreator());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.hiphopstartoken() != 0) {
    _internal_set_hiphopstartoken(from._internal_hiphopstartoken());
  }
}

void SUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfo.SUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUserInfo::CopyFrom(const SUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfo.SUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUserInfo::IsInitialized() const {
  return true;
}

void SUserInfo::InternalSwap(SUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avatarcolor_.Swap(&other->avatarcolor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  identifierid_.Swap(&other->identifierid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  imtoken_.Swap(&other->imtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usericon_.Swap(&other->usericon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unionid_.Swap(&other->unionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_.Swap(&other->sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inuid_.Swap(&other->inuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipcity_.Swap(&other->ipcity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  certification_.Swap(&other->certification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(avatar_, other->avatar_);
  swap(nameplate_, other->nameplate_);
  swap(authorityid_, other->authorityid_);
  swap(avatarkey_, other->avatarkey_);
  swap(os_, other->os_);
  swap(yuanshenavatarkey_, other->yuanshenavatarkey_);
  swap(iscreator_, other->iscreator_);
  swap(gender_, other->gender_);
  swap(hiphopstartoken_, other->hiphopstartoken_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SUserAttrFromNft::InitAsDefaultInstance() {
}
class SUserAttrFromNft::_Internal {
 public:
};

SUserAttrFromNft::SUserAttrFromNft()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfo.SUserAttrFromNft)
}
SUserAttrFromNft::SUserAttrFromNft(const SUserAttrFromNft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attr_ = from.attr_;
  // @@protoc_insertion_point(copy_constructor:userInfo.SUserAttrFromNft)
}

void SUserAttrFromNft::SharedCtor() {
  attr_ = 0;
}

SUserAttrFromNft::~SUserAttrFromNft() {
  // @@protoc_insertion_point(destructor:userInfo.SUserAttrFromNft)
  SharedDtor();
}

void SUserAttrFromNft::SharedDtor() {
}

void SUserAttrFromNft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SUserAttrFromNft& SUserAttrFromNft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SUserAttrFromNft_userInfo_2eproto.base);
  return *internal_default_instance();
}


void SUserAttrFromNft::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfo.SUserAttrFromNft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_ = 0;
  _internal_metadata_.Clear();
}

const char* SUserAttrFromNft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 attr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUserAttrFromNft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfo.SUserAttrFromNft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attr = 1;
  if (this->attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_attr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfo.SUserAttrFromNft)
  return target;
}

size_t SUserAttrFromNft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfo.SUserAttrFromNft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 attr = 1;
  if (this->attr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUserAttrFromNft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfo.SUserAttrFromNft)
  GOOGLE_DCHECK_NE(&from, this);
  const SUserAttrFromNft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SUserAttrFromNft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfo.SUserAttrFromNft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfo.SUserAttrFromNft)
    MergeFrom(*source);
  }
}

void SUserAttrFromNft::MergeFrom(const SUserAttrFromNft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfo.SUserAttrFromNft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attr() != 0) {
    _internal_set_attr(from._internal_attr());
  }
}

void SUserAttrFromNft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfo.SUserAttrFromNft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUserAttrFromNft::CopyFrom(const SUserAttrFromNft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfo.SUserAttrFromNft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUserAttrFromNft::IsInitialized() const {
  return true;
}

void SUserAttrFromNft::InternalSwap(SUserAttrFromNft* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attr_, other->attr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SUserAttrFromNft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CChangeUserSign::InitAsDefaultInstance() {
}
class CChangeUserSign::_Internal {
 public:
};

CChangeUserSign::CChangeUserSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfo.CChangeUserSign)
}
CChangeUserSign::CChangeUserSign(const CChangeUserSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sign().empty()) {
    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  // @@protoc_insertion_point(copy_constructor:userInfo.CChangeUserSign)
}

void CChangeUserSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CChangeUserSign_userInfo_2eproto.base);
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CChangeUserSign::~CChangeUserSign() {
  // @@protoc_insertion_point(destructor:userInfo.CChangeUserSign)
  SharedDtor();
}

void CChangeUserSign::SharedDtor() {
  sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChangeUserSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CChangeUserSign& CChangeUserSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CChangeUserSign_userInfo_2eproto.base);
  return *internal_default_instance();
}


void CChangeUserSign::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfo.CChangeUserSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CChangeUserSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.CChangeUserSign.sign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CChangeUserSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfo.CChangeUserSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sign = 1;
  if (this->sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign().data(), static_cast<int>(this->_internal_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.CChangeUserSign.sign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfo.CChangeUserSign)
  return target;
}

size_t CChangeUserSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfo.CChangeUserSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sign = 1;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sign());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChangeUserSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfo.CChangeUserSign)
  GOOGLE_DCHECK_NE(&from, this);
  const CChangeUserSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CChangeUserSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfo.CChangeUserSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfo.CChangeUserSign)
    MergeFrom(*source);
  }
}

void CChangeUserSign::MergeFrom(const CChangeUserSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfo.CChangeUserSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
}

void CChangeUserSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfo.CChangeUserSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChangeUserSign::CopyFrom(const CChangeUserSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfo.CChangeUserSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChangeUserSign::IsInitialized() const {
  return true;
}

void CChangeUserSign::InternalSwap(CChangeUserSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sign_.Swap(&other->sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CChangeUserSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SChangeUserSign::InitAsDefaultInstance() {
}
class SChangeUserSign::_Internal {
 public:
};

SChangeUserSign::SChangeUserSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfo.SChangeUserSign)
}
SChangeUserSign::SChangeUserSign(const SChangeUserSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:userInfo.SChangeUserSign)
}

void SChangeUserSign::SharedCtor() {
  status_ = 0;
}

SChangeUserSign::~SChangeUserSign() {
  // @@protoc_insertion_point(destructor:userInfo.SChangeUserSign)
  SharedDtor();
}

void SChangeUserSign::SharedDtor() {
}

void SChangeUserSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SChangeUserSign& SChangeUserSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SChangeUserSign_userInfo_2eproto.base);
  return *internal_default_instance();
}


void SChangeUserSign::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfo.SChangeUserSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SChangeUserSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChangeUserSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfo.SChangeUserSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfo.SChangeUserSign)
  return target;
}

size_t SChangeUserSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfo.SChangeUserSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SChangeUserSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfo.SChangeUserSign)
  GOOGLE_DCHECK_NE(&from, this);
  const SChangeUserSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SChangeUserSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfo.SChangeUserSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfo.SChangeUserSign)
    MergeFrom(*source);
  }
}

void SChangeUserSign::MergeFrom(const SChangeUserSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfo.SChangeUserSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SChangeUserSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfo.SChangeUserSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChangeUserSign::CopyFrom(const SChangeUserSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfo.SChangeUserSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChangeUserSign::IsInitialized() const {
  return true;
}

void SChangeUserSign::InternalSwap(SChangeUserSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SChangeUserSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CChangeUserIcon::InitAsDefaultInstance() {
}
class CChangeUserIcon::_Internal {
 public:
};

CChangeUserIcon::CChangeUserIcon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfo.CChangeUserIcon)
}
CChangeUserIcon::CChangeUserIcon(const CChangeUserIcon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usericon().empty()) {
    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  // @@protoc_insertion_point(copy_constructor:userInfo.CChangeUserIcon)
}

void CChangeUserIcon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CChangeUserIcon_userInfo_2eproto.base);
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CChangeUserIcon::~CChangeUserIcon() {
  // @@protoc_insertion_point(destructor:userInfo.CChangeUserIcon)
  SharedDtor();
}

void CChangeUserIcon::SharedDtor() {
  usericon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChangeUserIcon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CChangeUserIcon& CChangeUserIcon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CChangeUserIcon_userInfo_2eproto.base);
  return *internal_default_instance();
}


void CChangeUserIcon::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfo.CChangeUserIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CChangeUserIcon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string userIcon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_usericon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.CChangeUserIcon.userIcon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CChangeUserIcon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfo.CChangeUserIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userIcon = 1;
  if (this->usericon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usericon().data(), static_cast<int>(this->_internal_usericon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.CChangeUserIcon.userIcon");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_usericon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfo.CChangeUserIcon)
  return target;
}

size_t CChangeUserIcon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfo.CChangeUserIcon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userIcon = 1;
  if (this->usericon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usericon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChangeUserIcon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfo.CChangeUserIcon)
  GOOGLE_DCHECK_NE(&from, this);
  const CChangeUserIcon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CChangeUserIcon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfo.CChangeUserIcon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfo.CChangeUserIcon)
    MergeFrom(*source);
  }
}

void CChangeUserIcon::MergeFrom(const CChangeUserIcon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfo.CChangeUserIcon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usericon().size() > 0) {

    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
}

void CChangeUserIcon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfo.CChangeUserIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChangeUserIcon::CopyFrom(const CChangeUserIcon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfo.CChangeUserIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChangeUserIcon::IsInitialized() const {
  return true;
}

void CChangeUserIcon::InternalSwap(CChangeUserIcon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usericon_.Swap(&other->usericon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CChangeUserIcon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SChangeUserIcon::InitAsDefaultInstance() {
}
class SChangeUserIcon::_Internal {
 public:
};

SChangeUserIcon::SChangeUserIcon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfo.SChangeUserIcon)
}
SChangeUserIcon::SChangeUserIcon(const SChangeUserIcon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usericon().empty()) {
    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:userInfo.SChangeUserIcon)
}

void SChangeUserIcon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SChangeUserIcon_userInfo_2eproto.base);
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(uid_));
}

SChangeUserIcon::~SChangeUserIcon() {
  // @@protoc_insertion_point(destructor:userInfo.SChangeUserIcon)
  SharedDtor();
}

void SChangeUserIcon::SharedDtor() {
  usericon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SChangeUserIcon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SChangeUserIcon& SChangeUserIcon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SChangeUserIcon_userInfo_2eproto.base);
  return *internal_default_instance();
}


void SChangeUserIcon::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfo.SChangeUserIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SChangeUserIcon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userIcon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_usericon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userInfo.SChangeUserIcon.userIcon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChangeUserIcon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfo.SChangeUserIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string userIcon = 2;
  if (this->usericon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usericon().data(), static_cast<int>(this->_internal_usericon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userInfo.SChangeUserIcon.userIcon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usericon(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfo.SChangeUserIcon)
  return target;
}

size_t SChangeUserIcon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfo.SChangeUserIcon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userIcon = 2;
  if (this->usericon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usericon());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SChangeUserIcon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfo.SChangeUserIcon)
  GOOGLE_DCHECK_NE(&from, this);
  const SChangeUserIcon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SChangeUserIcon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfo.SChangeUserIcon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfo.SChangeUserIcon)
    MergeFrom(*source);
  }
}

void SChangeUserIcon::MergeFrom(const SChangeUserIcon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfo.SChangeUserIcon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usericon().size() > 0) {

    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SChangeUserIcon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfo.SChangeUserIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChangeUserIcon::CopyFrom(const SChangeUserIcon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfo.SChangeUserIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChangeUserIcon::IsInitialized() const {
  return true;
}

void SChangeUserIcon::InternalSwap(SChangeUserIcon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usericon_.Swap(&other->usericon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SChangeUserIcon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SInAccountUnbind::InitAsDefaultInstance() {
}
class SInAccountUnbind::_Internal {
 public:
};

SInAccountUnbind::SInAccountUnbind()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfo.SInAccountUnbind)
}
SInAccountUnbind::SInAccountUnbind(const SInAccountUnbind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:userInfo.SInAccountUnbind)
}

void SInAccountUnbind::SharedCtor() {
  status_ = 0;
}

SInAccountUnbind::~SInAccountUnbind() {
  // @@protoc_insertion_point(destructor:userInfo.SInAccountUnbind)
  SharedDtor();
}

void SInAccountUnbind::SharedDtor() {
}

void SInAccountUnbind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SInAccountUnbind& SInAccountUnbind::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SInAccountUnbind_userInfo_2eproto.base);
  return *internal_default_instance();
}


void SInAccountUnbind::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfo.SInAccountUnbind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SInAccountUnbind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SInAccountUnbind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfo.SInAccountUnbind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfo.SInAccountUnbind)
  return target;
}

size_t SInAccountUnbind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfo.SInAccountUnbind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SInAccountUnbind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfo.SInAccountUnbind)
  GOOGLE_DCHECK_NE(&from, this);
  const SInAccountUnbind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SInAccountUnbind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfo.SInAccountUnbind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfo.SInAccountUnbind)
    MergeFrom(*source);
  }
}

void SInAccountUnbind::MergeFrom(const SInAccountUnbind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfo.SInAccountUnbind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SInAccountUnbind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfo.SInAccountUnbind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInAccountUnbind::CopyFrom(const SInAccountUnbind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfo.SInAccountUnbind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInAccountUnbind::IsInitialized() const {
  return true;
}

void SInAccountUnbind::InternalSwap(SInAccountUnbind* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SInAccountUnbind::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userInfo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userInfo::CUserInfo* Arena::CreateMaybeMessage< ::userInfo::CUserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::userInfo::CUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfo::SUserInfo* Arena::CreateMaybeMessage< ::userInfo::SUserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::userInfo::SUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfo::SUserAttrFromNft* Arena::CreateMaybeMessage< ::userInfo::SUserAttrFromNft >(Arena* arena) {
  return Arena::CreateInternal< ::userInfo::SUserAttrFromNft >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfo::CChangeUserSign* Arena::CreateMaybeMessage< ::userInfo::CChangeUserSign >(Arena* arena) {
  return Arena::CreateInternal< ::userInfo::CChangeUserSign >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfo::SChangeUserSign* Arena::CreateMaybeMessage< ::userInfo::SChangeUserSign >(Arena* arena) {
  return Arena::CreateInternal< ::userInfo::SChangeUserSign >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfo::CChangeUserIcon* Arena::CreateMaybeMessage< ::userInfo::CChangeUserIcon >(Arena* arena) {
  return Arena::CreateInternal< ::userInfo::CChangeUserIcon >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfo::SChangeUserIcon* Arena::CreateMaybeMessage< ::userInfo::SChangeUserIcon >(Arena* arena) {
  return Arena::CreateInternal< ::userInfo::SChangeUserIcon >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfo::SInAccountUnbind* Arena::CreateMaybeMessage< ::userInfo::SInAccountUnbind >(Arena* arena) {
  return Arena::CreateInternal< ::userInfo::SInAccountUnbind >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
