// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_notice_2eproto;
namespace notive {
class SActiveNotice;
class SActiveNoticeDefaultTypeInternal;
extern SActiveNoticeDefaultTypeInternal _SActiveNotice_default_instance_;
class noticeMsg;
class noticeMsgDefaultTypeInternal;
extern noticeMsgDefaultTypeInternal _noticeMsg_default_instance_;
}  // namespace notive
PROTOBUF_NAMESPACE_OPEN
template<> ::notive::SActiveNotice* Arena::CreateMaybeMessage<::notive::SActiveNotice>(Arena*);
template<> ::notive::noticeMsg* Arena::CreateMaybeMessage<::notive::noticeMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace notive {

// ===================================================================

class noticeMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:notive.noticeMsg) */ {
 public:
  noticeMsg();
  virtual ~noticeMsg();

  noticeMsg(const noticeMsg& from);
  noticeMsg(noticeMsg&& from) noexcept
    : noticeMsg() {
    *this = ::std::move(from);
  }

  inline noticeMsg& operator=(const noticeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline noticeMsg& operator=(noticeMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const noticeMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const noticeMsg* internal_default_instance() {
    return reinterpret_cast<const noticeMsg*>(
               &_noticeMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(noticeMsg& a, noticeMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(noticeMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline noticeMsg* New() const final {
    return CreateMaybeMessage<noticeMsg>(nullptr);
  }

  noticeMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<noticeMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const noticeMsg& from);
  void MergeFrom(const noticeMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(noticeMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notive.noticeMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_notice_2eproto);
    return ::descriptor_table_notice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kContentFieldNumber = 3,
    kNoticeIdFieldNumber = 1,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 noticeId = 1;
  void clear_noticeid();
  ::PROTOBUF_NAMESPACE_ID::int32 noticeid() const;
  void set_noticeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_noticeid() const;
  void _internal_set_noticeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:notive.noticeMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 noticeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_notice_2eproto;
};
// -------------------------------------------------------------------

class SActiveNotice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:notive.SActiveNotice) */ {
 public:
  SActiveNotice();
  virtual ~SActiveNotice();

  SActiveNotice(const SActiveNotice& from);
  SActiveNotice(SActiveNotice&& from) noexcept
    : SActiveNotice() {
    *this = ::std::move(from);
  }

  inline SActiveNotice& operator=(const SActiveNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SActiveNotice& operator=(SActiveNotice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SActiveNotice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SActiveNotice* internal_default_instance() {
    return reinterpret_cast<const SActiveNotice*>(
               &_SActiveNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SActiveNotice& a, SActiveNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(SActiveNotice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SActiveNotice* New() const final {
    return CreateMaybeMessage<SActiveNotice>(nullptr);
  }

  SActiveNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SActiveNotice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SActiveNotice& from);
  void MergeFrom(const SActiveNotice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SActiveNotice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notive.SActiveNotice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_notice_2eproto);
    return ::descriptor_table_notice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoticeFieldNumber = 1,
    kNextRaceTimeFieldNumber = 2,
  };
  // .notive.noticeMsg notice = 1;
  bool has_notice() const;
  private:
  bool _internal_has_notice() const;
  public:
  void clear_notice();
  const ::notive::noticeMsg& notice() const;
  ::notive::noticeMsg* release_notice();
  ::notive::noticeMsg* mutable_notice();
  void set_allocated_notice(::notive::noticeMsg* notice);
  private:
  const ::notive::noticeMsg& _internal_notice() const;
  ::notive::noticeMsg* _internal_mutable_notice();
  public:

  // int32 nextRaceTime = 2;
  void clear_nextracetime();
  ::PROTOBUF_NAMESPACE_ID::int32 nextracetime() const;
  void set_nextracetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nextracetime() const;
  void _internal_set_nextracetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:notive.SActiveNotice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::notive::noticeMsg* notice_;
  ::PROTOBUF_NAMESPACE_ID::int32 nextracetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_notice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// noticeMsg

// int32 noticeId = 1;
inline void noticeMsg::clear_noticeid() {
  noticeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 noticeMsg::_internal_noticeid() const {
  return noticeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 noticeMsg::noticeid() const {
  // @@protoc_insertion_point(field_get:notive.noticeMsg.noticeId)
  return _internal_noticeid();
}
inline void noticeMsg::_internal_set_noticeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  noticeid_ = value;
}
inline void noticeMsg::set_noticeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_noticeid(value);
  // @@protoc_insertion_point(field_set:notive.noticeMsg.noticeId)
}

// string title = 2;
inline void noticeMsg::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& noticeMsg::title() const {
  // @@protoc_insertion_point(field_get:notive.noticeMsg.title)
  return _internal_title();
}
inline void noticeMsg::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:notive.noticeMsg.title)
}
inline std::string* noticeMsg::mutable_title() {
  // @@protoc_insertion_point(field_mutable:notive.noticeMsg.title)
  return _internal_mutable_title();
}
inline const std::string& noticeMsg::_internal_title() const {
  return title_.GetNoArena();
}
inline void noticeMsg::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void noticeMsg::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notive.noticeMsg.title)
}
inline void noticeMsg::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notive.noticeMsg.title)
}
inline void noticeMsg::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notive.noticeMsg.title)
}
inline std::string* noticeMsg::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* noticeMsg::release_title() {
  // @@protoc_insertion_point(field_release:notive.noticeMsg.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void noticeMsg::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:notive.noticeMsg.title)
}

// string content = 3;
inline void noticeMsg::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& noticeMsg::content() const {
  // @@protoc_insertion_point(field_get:notive.noticeMsg.content)
  return _internal_content();
}
inline void noticeMsg::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:notive.noticeMsg.content)
}
inline std::string* noticeMsg::mutable_content() {
  // @@protoc_insertion_point(field_mutable:notive.noticeMsg.content)
  return _internal_mutable_content();
}
inline const std::string& noticeMsg::_internal_content() const {
  return content_.GetNoArena();
}
inline void noticeMsg::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void noticeMsg::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notive.noticeMsg.content)
}
inline void noticeMsg::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notive.noticeMsg.content)
}
inline void noticeMsg::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notive.noticeMsg.content)
}
inline std::string* noticeMsg::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* noticeMsg::release_content() {
  // @@protoc_insertion_point(field_release:notive.noticeMsg.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void noticeMsg::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:notive.noticeMsg.content)
}

// -------------------------------------------------------------------

// SActiveNotice

// .notive.noticeMsg notice = 1;
inline bool SActiveNotice::_internal_has_notice() const {
  return this != internal_default_instance() && notice_ != nullptr;
}
inline bool SActiveNotice::has_notice() const {
  return _internal_has_notice();
}
inline void SActiveNotice::clear_notice() {
  if (GetArenaNoVirtual() == nullptr && notice_ != nullptr) {
    delete notice_;
  }
  notice_ = nullptr;
}
inline const ::notive::noticeMsg& SActiveNotice::_internal_notice() const {
  const ::notive::noticeMsg* p = notice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::notive::noticeMsg*>(
      &::notive::_noticeMsg_default_instance_);
}
inline const ::notive::noticeMsg& SActiveNotice::notice() const {
  // @@protoc_insertion_point(field_get:notive.SActiveNotice.notice)
  return _internal_notice();
}
inline ::notive::noticeMsg* SActiveNotice::release_notice() {
  // @@protoc_insertion_point(field_release:notive.SActiveNotice.notice)
  
  ::notive::noticeMsg* temp = notice_;
  notice_ = nullptr;
  return temp;
}
inline ::notive::noticeMsg* SActiveNotice::_internal_mutable_notice() {
  
  if (notice_ == nullptr) {
    auto* p = CreateMaybeMessage<::notive::noticeMsg>(GetArenaNoVirtual());
    notice_ = p;
  }
  return notice_;
}
inline ::notive::noticeMsg* SActiveNotice::mutable_notice() {
  // @@protoc_insertion_point(field_mutable:notive.SActiveNotice.notice)
  return _internal_mutable_notice();
}
inline void SActiveNotice::set_allocated_notice(::notive::noticeMsg* notice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete notice_;
  }
  if (notice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notice, submessage_arena);
    }
    
  } else {
    
  }
  notice_ = notice;
  // @@protoc_insertion_point(field_set_allocated:notive.SActiveNotice.notice)
}

// int32 nextRaceTime = 2;
inline void SActiveNotice::clear_nextracetime() {
  nextracetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActiveNotice::_internal_nextracetime() const {
  return nextracetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActiveNotice::nextracetime() const {
  // @@protoc_insertion_point(field_get:notive.SActiveNotice.nextRaceTime)
  return _internal_nextracetime();
}
inline void SActiveNotice::_internal_set_nextracetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nextracetime_ = value;
}
inline void SActiveNotice::set_nextracetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nextracetime(value);
  // @@protoc_insertion_point(field_set:notive.SActiveNotice.nextRaceTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace notive

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notice_2eproto
