// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: box.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_box_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_box_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_box_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_box_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_box_2eproto;
namespace box {
class SNftBox;
class SNftBoxDefaultTypeInternal;
extern SNftBoxDefaultTypeInternal _SNftBox_default_instance_;
class boxMsg;
class boxMsgDefaultTypeInternal;
extern boxMsgDefaultTypeInternal _boxMsg_default_instance_;
}  // namespace box
PROTOBUF_NAMESPACE_OPEN
template<> ::box::SNftBox* Arena::CreateMaybeMessage<::box::SNftBox>(Arena*);
template<> ::box::boxMsg* Arena::CreateMaybeMessage<::box::boxMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace box {

// ===================================================================

class boxMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:box.boxMsg) */ {
 public:
  boxMsg();
  virtual ~boxMsg();

  boxMsg(const boxMsg& from);
  boxMsg(boxMsg&& from) noexcept
    : boxMsg() {
    *this = ::std::move(from);
  }

  inline boxMsg& operator=(const boxMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline boxMsg& operator=(boxMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const boxMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const boxMsg* internal_default_instance() {
    return reinterpret_cast<const boxMsg*>(
               &_boxMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(boxMsg& a, boxMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(boxMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline boxMsg* New() const final {
    return CreateMaybeMessage<boxMsg>(nullptr);
  }

  boxMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<boxMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const boxMsg& from);
  void MergeFrom(const boxMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(boxMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "box.boxMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_box_2eproto);
    return ::descriptor_table_box_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxIdFieldNumber = 1,
  };
  // int32 boxId = 1;
  void clear_boxid();
  ::PROTOBUF_NAMESPACE_ID::int32 boxid() const;
  void set_boxid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boxid() const;
  void _internal_set_boxid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:box.boxMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 boxid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_box_2eproto;
};
// -------------------------------------------------------------------

class SNftBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:box.SNftBox) */ {
 public:
  SNftBox();
  virtual ~SNftBox();

  SNftBox(const SNftBox& from);
  SNftBox(SNftBox&& from) noexcept
    : SNftBox() {
    *this = ::std::move(from);
  }

  inline SNftBox& operator=(const SNftBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNftBox& operator=(SNftBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNftBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNftBox* internal_default_instance() {
    return reinterpret_cast<const SNftBox*>(
               &_SNftBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SNftBox& a, SNftBox& b) {
    a.Swap(&b);
  }
  inline void Swap(SNftBox* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNftBox* New() const final {
    return CreateMaybeMessage<SNftBox>(nullptr);
  }

  SNftBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNftBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNftBox& from);
  void MergeFrom(const SNftBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNftBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "box.SNftBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_box_2eproto);
    return ::descriptor_table_box_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string tips = 2;
  void clear_tips();
  const std::string& tips() const;
  void set_tips(const std::string& value);
  void set_tips(std::string&& value);
  void set_tips(const char* value);
  void set_tips(const char* value, size_t size);
  std::string* mutable_tips();
  std::string* release_tips();
  void set_allocated_tips(std::string* tips);
  private:
  const std::string& _internal_tips() const;
  void _internal_set_tips(const std::string& value);
  std::string* _internal_mutable_tips();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:box.SNftBox)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tips_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_box_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// boxMsg

// int32 boxId = 1;
inline void boxMsg::clear_boxid() {
  boxid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 boxMsg::_internal_boxid() const {
  return boxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 boxMsg::boxid() const {
  // @@protoc_insertion_point(field_get:box.boxMsg.boxId)
  return _internal_boxid();
}
inline void boxMsg::_internal_set_boxid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boxid_ = value;
}
inline void boxMsg::set_boxid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boxid(value);
  // @@protoc_insertion_point(field_set:box.boxMsg.boxId)
}

// -------------------------------------------------------------------

// SNftBox

// int32 status = 1;
inline void SNftBox::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNftBox::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNftBox::status() const {
  // @@protoc_insertion_point(field_get:box.SNftBox.status)
  return _internal_status();
}
inline void SNftBox::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SNftBox::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:box.SNftBox.status)
}

// string tips = 2;
inline void SNftBox::clear_tips() {
  tips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNftBox::tips() const {
  // @@protoc_insertion_point(field_get:box.SNftBox.tips)
  return _internal_tips();
}
inline void SNftBox::set_tips(const std::string& value) {
  _internal_set_tips(value);
  // @@protoc_insertion_point(field_set:box.SNftBox.tips)
}
inline std::string* SNftBox::mutable_tips() {
  // @@protoc_insertion_point(field_mutable:box.SNftBox.tips)
  return _internal_mutable_tips();
}
inline const std::string& SNftBox::_internal_tips() const {
  return tips_.GetNoArena();
}
inline void SNftBox::_internal_set_tips(const std::string& value) {
  
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNftBox::set_tips(std::string&& value) {
  
  tips_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:box.SNftBox.tips)
}
inline void SNftBox::set_tips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:box.SNftBox.tips)
}
inline void SNftBox::set_tips(const char* value, size_t size) {
  
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:box.SNftBox.tips)
}
inline std::string* SNftBox::_internal_mutable_tips() {
  
  return tips_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNftBox::release_tips() {
  // @@protoc_insertion_point(field_release:box.SNftBox.tips)
  
  return tips_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNftBox::set_allocated_tips(std::string* tips) {
  if (tips != nullptr) {
    
  } else {
    
  }
  tips_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tips);
  // @@protoc_insertion_point(field_set_allocated:box.SNftBox.tips)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace box

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_box_2eproto
