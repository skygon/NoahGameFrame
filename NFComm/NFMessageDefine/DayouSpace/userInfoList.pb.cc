// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userInfoList.proto

#include "userInfoList.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_userInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUserInfo_userInfo_2eproto;
namespace userInfoList {
class CGetUserInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetUserInfoList> _instance;
} _CGetUserInfoList_default_instance_;
class SGetUserInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetUserInfoList> _instance;
} _SGetUserInfoList_default_instance_;
class CUsersSortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CUsersSort> _instance;
} _CUsersSort_default_instance_;
class SUsersSortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SUsersSort> _instance;
} _SUsersSort_default_instance_;
class SGetRoomUserListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetRoomUserList> _instance;
} _SGetRoomUserList_default_instance_;
}  // namespace userInfoList
static void InitDefaultsscc_info_CGetUserInfoList_userInfoList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfoList::_CGetUserInfoList_default_instance_;
    new (ptr) ::userInfoList::CGetUserInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfoList::CGetUserInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetUserInfoList_userInfoList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetUserInfoList_userInfoList_2eproto}, {}};

static void InitDefaultsscc_info_CUsersSort_userInfoList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfoList::_CUsersSort_default_instance_;
    new (ptr) ::userInfoList::CUsersSort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfoList::CUsersSort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CUsersSort_userInfoList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CUsersSort_userInfoList_2eproto}, {}};

static void InitDefaultsscc_info_SGetRoomUserList_userInfoList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfoList::_SGetRoomUserList_default_instance_;
    new (ptr) ::userInfoList::SGetRoomUserList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfoList::SGetRoomUserList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SGetRoomUserList_userInfoList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SGetRoomUserList_userInfoList_2eproto}, {
      &scc_info_SUserInfo_userInfo_2eproto.base,}};

static void InitDefaultsscc_info_SGetUserInfoList_userInfoList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfoList::_SGetUserInfoList_default_instance_;
    new (ptr) ::userInfoList::SGetUserInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfoList::SGetUserInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SGetUserInfoList_userInfoList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SGetUserInfoList_userInfoList_2eproto}, {
      &scc_info_SUserInfo_userInfo_2eproto.base,}};

static void InitDefaultsscc_info_SUsersSort_userInfoList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userInfoList::_SUsersSort_default_instance_;
    new (ptr) ::userInfoList::SUsersSort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userInfoList::SUsersSort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUsersSort_userInfoList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SUsersSort_userInfoList_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userInfoList_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_userInfoList_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_userInfoList_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userInfoList_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfoList::CGetUserInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfoList::CGetUserInfoList, uids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfoList::SGetUserInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfoList::SGetUserInfoList, infolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfoList::CUsersSort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfoList::CUsersSort, uids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfoList::SUsersSort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfoList::SUsersSort, uids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userInfoList::SGetRoomUserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userInfoList::SGetRoomUserList, infolist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::userInfoList::CGetUserInfoList)},
  { 6, -1, sizeof(::userInfoList::SGetUserInfoList)},
  { 12, -1, sizeof(::userInfoList::CUsersSort)},
  { 18, -1, sizeof(::userInfoList::SUsersSort)},
  { 24, -1, sizeof(::userInfoList::SGetRoomUserList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfoList::_CGetUserInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfoList::_SGetUserInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfoList::_CUsersSort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfoList::_SUsersSort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userInfoList::_SGetRoomUserList_default_instance_),
};

const char descriptor_table_protodef_userInfoList_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022userInfoList.proto\022\014userInfoList\032\016user"
  "Info.proto\" \n\020CGetUserInfoList\022\014\n\004uids\030\001"
  " \003(\005\"9\n\020SGetUserInfoList\022%\n\010infoList\030\001 \003"
  "(\0132\023.userInfo.SUserInfo\"\032\n\nCUsersSort\022\014\n"
  "\004uids\030\001 \003(\005\"\032\n\nSUsersSort\022\014\n\004uids\030\001 \003(\005\""
  "9\n\020SGetRoomUserList\022%\n\010infoList\030\001 \003(\0132\023."
  "userInfo.SUserInfoB(\n\030com.dayou.space.pr"
  "otobufB\014UserInfoListb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userInfoList_2eproto_deps[1] = {
  &::descriptor_table_userInfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userInfoList_2eproto_sccs[5] = {
  &scc_info_CGetUserInfoList_userInfoList_2eproto.base,
  &scc_info_CUsersSort_userInfoList_2eproto.base,
  &scc_info_SGetRoomUserList_userInfoList_2eproto.base,
  &scc_info_SGetUserInfoList_userInfoList_2eproto.base,
  &scc_info_SUsersSort_userInfoList_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userInfoList_2eproto_once;
static bool descriptor_table_userInfoList_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userInfoList_2eproto = {
  &descriptor_table_userInfoList_2eproto_initialized, descriptor_table_protodef_userInfoList_2eproto, "userInfoList.proto", 308,
  &descriptor_table_userInfoList_2eproto_once, descriptor_table_userInfoList_2eproto_sccs, descriptor_table_userInfoList_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_userInfoList_2eproto::offsets,
  file_level_metadata_userInfoList_2eproto, 5, file_level_enum_descriptors_userInfoList_2eproto, file_level_service_descriptors_userInfoList_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userInfoList_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userInfoList_2eproto), true);
namespace userInfoList {

// ===================================================================

void CGetUserInfoList::InitAsDefaultInstance() {
}
class CGetUserInfoList::_Internal {
 public:
};

CGetUserInfoList::CGetUserInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfoList.CGetUserInfoList)
}
CGetUserInfoList::CGetUserInfoList(const CGetUserInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:userInfoList.CGetUserInfoList)
}

void CGetUserInfoList::SharedCtor() {
}

CGetUserInfoList::~CGetUserInfoList() {
  // @@protoc_insertion_point(destructor:userInfoList.CGetUserInfoList)
  SharedDtor();
}

void CGetUserInfoList::SharedDtor() {
}

void CGetUserInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetUserInfoList& CGetUserInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetUserInfoList_userInfoList_2eproto.base);
  return *internal_default_instance();
}


void CGetUserInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfoList.CGetUserInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  _internal_metadata_.Clear();
}

const char* CGetUserInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetUserInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfoList.CGetUserInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    int byte_size = _uids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfoList.CGetUserInfoList)
  return target;
}

size_t CGetUserInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfoList.CGetUserInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetUserInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfoList.CGetUserInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetUserInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetUserInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfoList.CGetUserInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfoList.CGetUserInfoList)
    MergeFrom(*source);
  }
}

void CGetUserInfoList::MergeFrom(const CGetUserInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfoList.CGetUserInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
}

void CGetUserInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfoList.CGetUserInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetUserInfoList::CopyFrom(const CGetUserInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfoList.CGetUserInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetUserInfoList::IsInitialized() const {
  return true;
}

void CGetUserInfoList::InternalSwap(CGetUserInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uids_.InternalSwap(&other->uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetUserInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetUserInfoList::InitAsDefaultInstance() {
}
class SGetUserInfoList::_Internal {
 public:
};

void SGetUserInfoList::clear_infolist() {
  infolist_.Clear();
}
SGetUserInfoList::SGetUserInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfoList.SGetUserInfoList)
}
SGetUserInfoList::SGetUserInfoList(const SGetUserInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infolist_(from.infolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:userInfoList.SGetUserInfoList)
}

void SGetUserInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGetUserInfoList_userInfoList_2eproto.base);
}

SGetUserInfoList::~SGetUserInfoList() {
  // @@protoc_insertion_point(destructor:userInfoList.SGetUserInfoList)
  SharedDtor();
}

void SGetUserInfoList::SharedDtor() {
}

void SGetUserInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetUserInfoList& SGetUserInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetUserInfoList_userInfoList_2eproto.base);
  return *internal_default_instance();
}


void SGetUserInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfoList.SGetUserInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infolist_.Clear();
  _internal_metadata_.Clear();
}

const char* SGetUserInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .userInfo.SUserInfo infoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetUserInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfoList.SGetUserInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .userInfo.SUserInfo infoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfoList.SGetUserInfoList)
  return target;
}

size_t SGetUserInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfoList.SGetUserInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userInfo.SUserInfo infoList = 1;
  total_size += 1UL * this->_internal_infolist_size();
  for (const auto& msg : this->infolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetUserInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfoList.SGetUserInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetUserInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetUserInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfoList.SGetUserInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfoList.SGetUserInfoList)
    MergeFrom(*source);
  }
}

void SGetUserInfoList::MergeFrom(const SGetUserInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfoList.SGetUserInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infolist_.MergeFrom(from.infolist_);
}

void SGetUserInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfoList.SGetUserInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetUserInfoList::CopyFrom(const SGetUserInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfoList.SGetUserInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetUserInfoList::IsInitialized() const {
  return true;
}

void SGetUserInfoList::InternalSwap(SGetUserInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infolist_.InternalSwap(&other->infolist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetUserInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CUsersSort::InitAsDefaultInstance() {
}
class CUsersSort::_Internal {
 public:
};

CUsersSort::CUsersSort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfoList.CUsersSort)
}
CUsersSort::CUsersSort(const CUsersSort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:userInfoList.CUsersSort)
}

void CUsersSort::SharedCtor() {
}

CUsersSort::~CUsersSort() {
  // @@protoc_insertion_point(destructor:userInfoList.CUsersSort)
  SharedDtor();
}

void CUsersSort::SharedDtor() {
}

void CUsersSort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUsersSort& CUsersSort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CUsersSort_userInfoList_2eproto.base);
  return *internal_default_instance();
}


void CUsersSort::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfoList.CUsersSort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  _internal_metadata_.Clear();
}

const char* CUsersSort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUsersSort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfoList.CUsersSort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    int byte_size = _uids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfoList.CUsersSort)
  return target;
}

size_t CUsersSort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfoList.CUsersSort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUsersSort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfoList.CUsersSort)
  GOOGLE_DCHECK_NE(&from, this);
  const CUsersSort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUsersSort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfoList.CUsersSort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfoList.CUsersSort)
    MergeFrom(*source);
  }
}

void CUsersSort::MergeFrom(const CUsersSort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfoList.CUsersSort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
}

void CUsersSort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfoList.CUsersSort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsersSort::CopyFrom(const CUsersSort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfoList.CUsersSort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsersSort::IsInitialized() const {
  return true;
}

void CUsersSort::InternalSwap(CUsersSort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uids_.InternalSwap(&other->uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUsersSort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SUsersSort::InitAsDefaultInstance() {
}
class SUsersSort::_Internal {
 public:
};

SUsersSort::SUsersSort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfoList.SUsersSort)
}
SUsersSort::SUsersSort(const SUsersSort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:userInfoList.SUsersSort)
}

void SUsersSort::SharedCtor() {
}

SUsersSort::~SUsersSort() {
  // @@protoc_insertion_point(destructor:userInfoList.SUsersSort)
  SharedDtor();
}

void SUsersSort::SharedDtor() {
}

void SUsersSort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SUsersSort& SUsersSort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SUsersSort_userInfoList_2eproto.base);
  return *internal_default_instance();
}


void SUsersSort::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfoList.SUsersSort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  _internal_metadata_.Clear();
}

const char* SUsersSort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUsersSort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfoList.SUsersSort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    int byte_size = _uids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfoList.SUsersSort)
  return target;
}

size_t SUsersSort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfoList.SUsersSort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUsersSort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfoList.SUsersSort)
  GOOGLE_DCHECK_NE(&from, this);
  const SUsersSort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SUsersSort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfoList.SUsersSort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfoList.SUsersSort)
    MergeFrom(*source);
  }
}

void SUsersSort::MergeFrom(const SUsersSort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfoList.SUsersSort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
}

void SUsersSort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfoList.SUsersSort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUsersSort::CopyFrom(const SUsersSort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfoList.SUsersSort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUsersSort::IsInitialized() const {
  return true;
}

void SUsersSort::InternalSwap(SUsersSort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uids_.InternalSwap(&other->uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SUsersSort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetRoomUserList::InitAsDefaultInstance() {
}
class SGetRoomUserList::_Internal {
 public:
};

void SGetRoomUserList::clear_infolist() {
  infolist_.Clear();
}
SGetRoomUserList::SGetRoomUserList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userInfoList.SGetRoomUserList)
}
SGetRoomUserList::SGetRoomUserList(const SGetRoomUserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infolist_(from.infolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:userInfoList.SGetRoomUserList)
}

void SGetRoomUserList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGetRoomUserList_userInfoList_2eproto.base);
}

SGetRoomUserList::~SGetRoomUserList() {
  // @@protoc_insertion_point(destructor:userInfoList.SGetRoomUserList)
  SharedDtor();
}

void SGetRoomUserList::SharedDtor() {
}

void SGetRoomUserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetRoomUserList& SGetRoomUserList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetRoomUserList_userInfoList_2eproto.base);
  return *internal_default_instance();
}


void SGetRoomUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:userInfoList.SGetRoomUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infolist_.Clear();
  _internal_metadata_.Clear();
}

const char* SGetRoomUserList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .userInfo.SUserInfo infoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetRoomUserList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userInfoList.SGetRoomUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .userInfo.SUserInfo infoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userInfoList.SGetRoomUserList)
  return target;
}

size_t SGetRoomUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userInfoList.SGetRoomUserList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userInfo.SUserInfo infoList = 1;
  total_size += 1UL * this->_internal_infolist_size();
  for (const auto& msg : this->infolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetRoomUserList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userInfoList.SGetRoomUserList)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetRoomUserList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetRoomUserList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userInfoList.SGetRoomUserList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userInfoList.SGetRoomUserList)
    MergeFrom(*source);
  }
}

void SGetRoomUserList::MergeFrom(const SGetRoomUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userInfoList.SGetRoomUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infolist_.MergeFrom(from.infolist_);
}

void SGetRoomUserList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userInfoList.SGetRoomUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetRoomUserList::CopyFrom(const SGetRoomUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userInfoList.SGetRoomUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetRoomUserList::IsInitialized() const {
  return true;
}

void SGetRoomUserList::InternalSwap(SGetRoomUserList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infolist_.InternalSwap(&other->infolist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetRoomUserList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userInfoList
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userInfoList::CGetUserInfoList* Arena::CreateMaybeMessage< ::userInfoList::CGetUserInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::userInfoList::CGetUserInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfoList::SGetUserInfoList* Arena::CreateMaybeMessage< ::userInfoList::SGetUserInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::userInfoList::SGetUserInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfoList::CUsersSort* Arena::CreateMaybeMessage< ::userInfoList::CUsersSort >(Arena* arena) {
  return Arena::CreateInternal< ::userInfoList::CUsersSort >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfoList::SUsersSort* Arena::CreateMaybeMessage< ::userInfoList::SUsersSort >(Arena* arena) {
  return Arena::CreateInternal< ::userInfoList::SUsersSort >(arena);
}
template<> PROTOBUF_NOINLINE ::userInfoList::SGetRoomUserList* Arena::CreateMaybeMessage< ::userInfoList::SGetRoomUserList >(Arena* arena) {
  return Arena::CreateInternal< ::userInfoList::SGetRoomUserList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
