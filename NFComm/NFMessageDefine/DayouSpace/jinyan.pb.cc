// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jinyan.proto

#include "jinyan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace jinyan {
class CNpcJinyanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNpcJinyan> _instance;
} _CNpcJinyan_default_instance_;
class SNpcJinyanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNpcJinyan> _instance;
} _SNpcJinyan_default_instance_;
class CNpcJieJinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNpcJieJin> _instance;
} _CNpcJieJin_default_instance_;
class SNpcJieJinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNpcJieJin> _instance;
} _SNpcJieJin_default_instance_;
}  // namespace jinyan
static void InitDefaultsscc_info_CNpcJieJin_jinyan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jinyan::_CNpcJieJin_default_instance_;
    new (ptr) ::jinyan::CNpcJieJin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jinyan::CNpcJieJin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNpcJieJin_jinyan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNpcJieJin_jinyan_2eproto}, {}};

static void InitDefaultsscc_info_CNpcJinyan_jinyan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jinyan::_CNpcJinyan_default_instance_;
    new (ptr) ::jinyan::CNpcJinyan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jinyan::CNpcJinyan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNpcJinyan_jinyan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNpcJinyan_jinyan_2eproto}, {}};

static void InitDefaultsscc_info_SNpcJieJin_jinyan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jinyan::_SNpcJieJin_default_instance_;
    new (ptr) ::jinyan::SNpcJieJin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jinyan::SNpcJieJin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNpcJieJin_jinyan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNpcJieJin_jinyan_2eproto}, {}};

static void InitDefaultsscc_info_SNpcJinyan_jinyan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jinyan::_SNpcJinyan_default_instance_;
    new (ptr) ::jinyan::SNpcJinyan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jinyan::SNpcJinyan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNpcJinyan_jinyan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNpcJinyan_jinyan_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_jinyan_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_jinyan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_jinyan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_jinyan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jinyan::CNpcJinyan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jinyan::CNpcJinyan, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jinyan::SNpcJinyan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jinyan::SNpcJinyan, uid_),
  PROTOBUF_FIELD_OFFSET(::jinyan::SNpcJinyan, code_),
  PROTOBUF_FIELD_OFFSET(::jinyan::SNpcJinyan, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jinyan::CNpcJieJin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jinyan::CNpcJieJin, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jinyan::SNpcJieJin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jinyan::SNpcJieJin, uid_),
  PROTOBUF_FIELD_OFFSET(::jinyan::SNpcJieJin, code_),
  PROTOBUF_FIELD_OFFSET(::jinyan::SNpcJieJin, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::jinyan::CNpcJinyan)},
  { 6, -1, sizeof(::jinyan::SNpcJinyan)},
  { 14, -1, sizeof(::jinyan::CNpcJieJin)},
  { 20, -1, sizeof(::jinyan::SNpcJieJin)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jinyan::_CNpcJinyan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jinyan::_SNpcJinyan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jinyan::_CNpcJieJin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jinyan::_SNpcJieJin_default_instance_),
};

const char descriptor_table_protodef_jinyan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014jinyan.proto\022\006jinyan\"\031\n\nCNpcJinyan\022\013\n\003"
  "uid\030\001 \001(\005\"4\n\nSNpcJinyan\022\013\n\003uid\030\001 \001(\005\022\014\n\004"
  "code\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\"\031\n\nCNpcJieJin\022\013\n"
  "\003uid\030\001 \001(\005\"4\n\nSNpcJieJin\022\013\n\003uid\030\001 \001(\005\022\014\n"
  "\004code\030\002 \001(\005\022\013\n\003msg\030\003 \001(\tB&\n\030com.dayou.sp"
  "ace.protobufB\006JinyanZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_jinyan_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_jinyan_2eproto_sccs[4] = {
  &scc_info_CNpcJieJin_jinyan_2eproto.base,
  &scc_info_CNpcJinyan_jinyan_2eproto.base,
  &scc_info_SNpcJieJin_jinyan_2eproto.base,
  &scc_info_SNpcJinyan_jinyan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_jinyan_2eproto_once;
static bool descriptor_table_jinyan_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jinyan_2eproto = {
  &descriptor_table_jinyan_2eproto_initialized, descriptor_table_protodef_jinyan_2eproto, "jinyan.proto", 232,
  &descriptor_table_jinyan_2eproto_once, descriptor_table_jinyan_2eproto_sccs, descriptor_table_jinyan_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_jinyan_2eproto::offsets,
  file_level_metadata_jinyan_2eproto, 4, file_level_enum_descriptors_jinyan_2eproto, file_level_service_descriptors_jinyan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_jinyan_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_jinyan_2eproto), true);
namespace jinyan {

// ===================================================================

void CNpcJinyan::InitAsDefaultInstance() {
}
class CNpcJinyan::_Internal {
 public:
};

CNpcJinyan::CNpcJinyan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jinyan.CNpcJinyan)
}
CNpcJinyan::CNpcJinyan(const CNpcJinyan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:jinyan.CNpcJinyan)
}

void CNpcJinyan::SharedCtor() {
  uid_ = 0;
}

CNpcJinyan::~CNpcJinyan() {
  // @@protoc_insertion_point(destructor:jinyan.CNpcJinyan)
  SharedDtor();
}

void CNpcJinyan::SharedDtor() {
}

void CNpcJinyan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNpcJinyan& CNpcJinyan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNpcJinyan_jinyan_2eproto.base);
  return *internal_default_instance();
}


void CNpcJinyan::Clear() {
// @@protoc_insertion_point(message_clear_start:jinyan.CNpcJinyan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CNpcJinyan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNpcJinyan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jinyan.CNpcJinyan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jinyan.CNpcJinyan)
  return target;
}

size_t CNpcJinyan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jinyan.CNpcJinyan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNpcJinyan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jinyan.CNpcJinyan)
  GOOGLE_DCHECK_NE(&from, this);
  const CNpcJinyan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNpcJinyan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jinyan.CNpcJinyan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jinyan.CNpcJinyan)
    MergeFrom(*source);
  }
}

void CNpcJinyan::MergeFrom(const CNpcJinyan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jinyan.CNpcJinyan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CNpcJinyan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jinyan.CNpcJinyan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNpcJinyan::CopyFrom(const CNpcJinyan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jinyan.CNpcJinyan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNpcJinyan::IsInitialized() const {
  return true;
}

void CNpcJinyan::InternalSwap(CNpcJinyan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNpcJinyan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNpcJinyan::InitAsDefaultInstance() {
}
class SNpcJinyan::_Internal {
 public:
};

SNpcJinyan::SNpcJinyan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jinyan.SNpcJinyan)
}
SNpcJinyan::SNpcJinyan(const SNpcJinyan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:jinyan.SNpcJinyan)
}

void SNpcJinyan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNpcJinyan_jinyan_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
}

SNpcJinyan::~SNpcJinyan() {
  // @@protoc_insertion_point(destructor:jinyan.SNpcJinyan)
  SharedDtor();
}

void SNpcJinyan::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SNpcJinyan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNpcJinyan& SNpcJinyan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNpcJinyan_jinyan_2eproto.base);
  return *internal_default_instance();
}


void SNpcJinyan::Clear() {
// @@protoc_insertion_point(message_clear_start:jinyan.SNpcJinyan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

const char* SNpcJinyan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jinyan.SNpcJinyan.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNpcJinyan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jinyan.SNpcJinyan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jinyan.SNpcJinyan.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jinyan.SNpcJinyan)
  return target;
}

size_t SNpcJinyan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jinyan.SNpcJinyan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNpcJinyan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jinyan.SNpcJinyan)
  GOOGLE_DCHECK_NE(&from, this);
  const SNpcJinyan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNpcJinyan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jinyan.SNpcJinyan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jinyan.SNpcJinyan)
    MergeFrom(*source);
  }
}

void SNpcJinyan::MergeFrom(const SNpcJinyan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jinyan.SNpcJinyan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SNpcJinyan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jinyan.SNpcJinyan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNpcJinyan::CopyFrom(const SNpcJinyan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jinyan.SNpcJinyan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNpcJinyan::IsInitialized() const {
  return true;
}

void SNpcJinyan::InternalSwap(SNpcJinyan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNpcJinyan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CNpcJieJin::InitAsDefaultInstance() {
}
class CNpcJieJin::_Internal {
 public:
};

CNpcJieJin::CNpcJieJin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jinyan.CNpcJieJin)
}
CNpcJieJin::CNpcJieJin(const CNpcJieJin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:jinyan.CNpcJieJin)
}

void CNpcJieJin::SharedCtor() {
  uid_ = 0;
}

CNpcJieJin::~CNpcJieJin() {
  // @@protoc_insertion_point(destructor:jinyan.CNpcJieJin)
  SharedDtor();
}

void CNpcJieJin::SharedDtor() {
}

void CNpcJieJin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNpcJieJin& CNpcJieJin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNpcJieJin_jinyan_2eproto.base);
  return *internal_default_instance();
}


void CNpcJieJin::Clear() {
// @@protoc_insertion_point(message_clear_start:jinyan.CNpcJieJin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CNpcJieJin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNpcJieJin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jinyan.CNpcJieJin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jinyan.CNpcJieJin)
  return target;
}

size_t CNpcJieJin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jinyan.CNpcJieJin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNpcJieJin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jinyan.CNpcJieJin)
  GOOGLE_DCHECK_NE(&from, this);
  const CNpcJieJin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNpcJieJin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jinyan.CNpcJieJin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jinyan.CNpcJieJin)
    MergeFrom(*source);
  }
}

void CNpcJieJin::MergeFrom(const CNpcJieJin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jinyan.CNpcJieJin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CNpcJieJin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jinyan.CNpcJieJin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNpcJieJin::CopyFrom(const CNpcJieJin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jinyan.CNpcJieJin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNpcJieJin::IsInitialized() const {
  return true;
}

void CNpcJieJin::InternalSwap(CNpcJieJin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNpcJieJin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNpcJieJin::InitAsDefaultInstance() {
}
class SNpcJieJin::_Internal {
 public:
};

SNpcJieJin::SNpcJieJin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jinyan.SNpcJieJin)
}
SNpcJieJin::SNpcJieJin(const SNpcJieJin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:jinyan.SNpcJieJin)
}

void SNpcJieJin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNpcJieJin_jinyan_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
}

SNpcJieJin::~SNpcJieJin() {
  // @@protoc_insertion_point(destructor:jinyan.SNpcJieJin)
  SharedDtor();
}

void SNpcJieJin::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SNpcJieJin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNpcJieJin& SNpcJieJin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNpcJieJin_jinyan_2eproto.base);
  return *internal_default_instance();
}


void SNpcJieJin::Clear() {
// @@protoc_insertion_point(message_clear_start:jinyan.SNpcJieJin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

const char* SNpcJieJin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jinyan.SNpcJieJin.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNpcJieJin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jinyan.SNpcJieJin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jinyan.SNpcJieJin.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jinyan.SNpcJieJin)
  return target;
}

size_t SNpcJieJin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jinyan.SNpcJieJin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNpcJieJin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jinyan.SNpcJieJin)
  GOOGLE_DCHECK_NE(&from, this);
  const SNpcJieJin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNpcJieJin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jinyan.SNpcJieJin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jinyan.SNpcJieJin)
    MergeFrom(*source);
  }
}

void SNpcJieJin::MergeFrom(const SNpcJieJin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jinyan.SNpcJieJin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SNpcJieJin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jinyan.SNpcJieJin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNpcJieJin::CopyFrom(const SNpcJieJin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jinyan.SNpcJieJin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNpcJieJin::IsInitialized() const {
  return true;
}

void SNpcJieJin::InternalSwap(SNpcJieJin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNpcJieJin::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace jinyan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jinyan::CNpcJinyan* Arena::CreateMaybeMessage< ::jinyan::CNpcJinyan >(Arena* arena) {
  return Arena::CreateInternal< ::jinyan::CNpcJinyan >(arena);
}
template<> PROTOBUF_NOINLINE ::jinyan::SNpcJinyan* Arena::CreateMaybeMessage< ::jinyan::SNpcJinyan >(Arena* arena) {
  return Arena::CreateInternal< ::jinyan::SNpcJinyan >(arena);
}
template<> PROTOBUF_NOINLINE ::jinyan::CNpcJieJin* Arena::CreateMaybeMessage< ::jinyan::CNpcJieJin >(Arena* arena) {
  return Arena::CreateInternal< ::jinyan::CNpcJieJin >(arena);
}
template<> PROTOBUF_NOINLINE ::jinyan::SNpcJieJin* Arena::CreateMaybeMessage< ::jinyan::SNpcJieJin >(Arena* arena) {
  return Arena::CreateInternal< ::jinyan::SNpcJieJin >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
