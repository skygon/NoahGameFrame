// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goodsBackpack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_goodsBackpack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_goodsBackpack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "position.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_goodsBackpack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_goodsBackpack_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_goodsBackpack_2eproto;
namespace goodsBackpack {
class BTroveGoodsInfo;
class BTroveGoodsInfoDefaultTypeInternal;
extern BTroveGoodsInfoDefaultTypeInternal _BTroveGoodsInfo_default_instance_;
class CGoodsBackpackList;
class CGoodsBackpackListDefaultTypeInternal;
extern CGoodsBackpackListDefaultTypeInternal _CGoodsBackpackList_default_instance_;
class CGoodsExchange;
class CGoodsExchangeDefaultTypeInternal;
extern CGoodsExchangeDefaultTypeInternal _CGoodsExchange_default_instance_;
class CPickRedPacket;
class CPickRedPacketDefaultTypeInternal;
extern CPickRedPacketDefaultTypeInternal _CPickRedPacket_default_instance_;
class CPutRedPacket;
class CPutRedPacketDefaultTypeInternal;
extern CPutRedPacketDefaultTypeInternal _CPutRedPacket_default_instance_;
class SGoodsBackpackList;
class SGoodsBackpackListDefaultTypeInternal;
extern SGoodsBackpackListDefaultTypeInternal _SGoodsBackpackList_default_instance_;
class SGoodsExchange;
class SGoodsExchangeDefaultTypeInternal;
extern SGoodsExchangeDefaultTypeInternal _SGoodsExchange_default_instance_;
class SPickRedPacket;
class SPickRedPacketDefaultTypeInternal;
extern SPickRedPacketDefaultTypeInternal _SPickRedPacket_default_instance_;
class SPutRedPacket;
class SPutRedPacketDefaultTypeInternal;
extern SPutRedPacketDefaultTypeInternal _SPutRedPacket_default_instance_;
class SPutRedPacketList;
class SPutRedPacketListDefaultTypeInternal;
extern SPutRedPacketListDefaultTypeInternal _SPutRedPacketList_default_instance_;
}  // namespace goodsBackpack
PROTOBUF_NAMESPACE_OPEN
template<> ::goodsBackpack::BTroveGoodsInfo* Arena::CreateMaybeMessage<::goodsBackpack::BTroveGoodsInfo>(Arena*);
template<> ::goodsBackpack::CGoodsBackpackList* Arena::CreateMaybeMessage<::goodsBackpack::CGoodsBackpackList>(Arena*);
template<> ::goodsBackpack::CGoodsExchange* Arena::CreateMaybeMessage<::goodsBackpack::CGoodsExchange>(Arena*);
template<> ::goodsBackpack::CPickRedPacket* Arena::CreateMaybeMessage<::goodsBackpack::CPickRedPacket>(Arena*);
template<> ::goodsBackpack::CPutRedPacket* Arena::CreateMaybeMessage<::goodsBackpack::CPutRedPacket>(Arena*);
template<> ::goodsBackpack::SGoodsBackpackList* Arena::CreateMaybeMessage<::goodsBackpack::SGoodsBackpackList>(Arena*);
template<> ::goodsBackpack::SGoodsExchange* Arena::CreateMaybeMessage<::goodsBackpack::SGoodsExchange>(Arena*);
template<> ::goodsBackpack::SPickRedPacket* Arena::CreateMaybeMessage<::goodsBackpack::SPickRedPacket>(Arena*);
template<> ::goodsBackpack::SPutRedPacket* Arena::CreateMaybeMessage<::goodsBackpack::SPutRedPacket>(Arena*);
template<> ::goodsBackpack::SPutRedPacketList* Arena::CreateMaybeMessage<::goodsBackpack::SPutRedPacketList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace goodsBackpack {

// ===================================================================

class CGoodsBackpackList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.CGoodsBackpackList) */ {
 public:
  CGoodsBackpackList();
  virtual ~CGoodsBackpackList();

  CGoodsBackpackList(const CGoodsBackpackList& from);
  CGoodsBackpackList(CGoodsBackpackList&& from) noexcept
    : CGoodsBackpackList() {
    *this = ::std::move(from);
  }

  inline CGoodsBackpackList& operator=(const CGoodsBackpackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGoodsBackpackList& operator=(CGoodsBackpackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGoodsBackpackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGoodsBackpackList* internal_default_instance() {
    return reinterpret_cast<const CGoodsBackpackList*>(
               &_CGoodsBackpackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGoodsBackpackList& a, CGoodsBackpackList& b) {
    a.Swap(&b);
  }
  inline void Swap(CGoodsBackpackList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGoodsBackpackList* New() const final {
    return CreateMaybeMessage<CGoodsBackpackList>(nullptr);
  }

  CGoodsBackpackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGoodsBackpackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGoodsBackpackList& from);
  void MergeFrom(const CGoodsBackpackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGoodsBackpackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.CGoodsBackpackList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurPageFieldNumber = 1,
    kPageLimitFieldNumber = 2,
    kCatFieldNumber = 3,
  };
  // int32 curPage = 1;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 2;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cat = 3;
  void clear_cat();
  ::PROTOBUF_NAMESPACE_ID::int32 cat() const;
  void set_cat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cat() const;
  void _internal_set_cat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:goodsBackpack.CGoodsBackpackList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 cat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// -------------------------------------------------------------------

class SGoodsBackpackList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.SGoodsBackpackList) */ {
 public:
  SGoodsBackpackList();
  virtual ~SGoodsBackpackList();

  SGoodsBackpackList(const SGoodsBackpackList& from);
  SGoodsBackpackList(SGoodsBackpackList&& from) noexcept
    : SGoodsBackpackList() {
    *this = ::std::move(from);
  }

  inline SGoodsBackpackList& operator=(const SGoodsBackpackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGoodsBackpackList& operator=(SGoodsBackpackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGoodsBackpackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGoodsBackpackList* internal_default_instance() {
    return reinterpret_cast<const SGoodsBackpackList*>(
               &_SGoodsBackpackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SGoodsBackpackList& a, SGoodsBackpackList& b) {
    a.Swap(&b);
  }
  inline void Swap(SGoodsBackpackList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGoodsBackpackList* New() const final {
    return CreateMaybeMessage<SGoodsBackpackList>(nullptr);
  }

  SGoodsBackpackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGoodsBackpackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGoodsBackpackList& from);
  void MergeFrom(const SGoodsBackpackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGoodsBackpackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.SGoodsBackpackList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kTotalFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kPageLimitFieldNumber = 4,
    kCatFieldNumber = 5,
  };
  // repeated .goodsBackpack.BTroveGoodsInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::goodsBackpack::BTroveGoodsInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::BTroveGoodsInfo >*
      mutable_list();
  private:
  const ::goodsBackpack::BTroveGoodsInfo& _internal_list(int index) const;
  ::goodsBackpack::BTroveGoodsInfo* _internal_add_list();
  public:
  const ::goodsBackpack::BTroveGoodsInfo& list(int index) const;
  ::goodsBackpack::BTroveGoodsInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::BTroveGoodsInfo >&
      list() const;

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 4;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cat = 5;
  void clear_cat();
  ::PROTOBUF_NAMESPACE_ID::int32 cat() const;
  void set_cat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cat() const;
  void _internal_set_cat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:goodsBackpack.SGoodsBackpackList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::BTroveGoodsInfo > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 cat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// -------------------------------------------------------------------

class BTroveGoodsInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.BTroveGoodsInfo) */ {
 public:
  BTroveGoodsInfo();
  virtual ~BTroveGoodsInfo();

  BTroveGoodsInfo(const BTroveGoodsInfo& from);
  BTroveGoodsInfo(BTroveGoodsInfo&& from) noexcept
    : BTroveGoodsInfo() {
    *this = ::std::move(from);
  }

  inline BTroveGoodsInfo& operator=(const BTroveGoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTroveGoodsInfo& operator=(BTroveGoodsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BTroveGoodsInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BTroveGoodsInfo* internal_default_instance() {
    return reinterpret_cast<const BTroveGoodsInfo*>(
               &_BTroveGoodsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BTroveGoodsInfo& a, BTroveGoodsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTroveGoodsInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTroveGoodsInfo* New() const final {
    return CreateMaybeMessage<BTroveGoodsInfo>(nullptr);
  }

  BTroveGoodsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTroveGoodsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTroveGoodsInfo& from);
  void MergeFrom(const BTroveGoodsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTroveGoodsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.BTroveGoodsInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIconFieldNumber = 3,
    kDetailFieldNumber = 6,
    kIdFieldNumber = 1,
    kBakCountFieldNumber = 4,
    kGoodsBackpackIdFieldNumber = 5,
    kAvatarIdFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string icon = 3;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string detail = 6;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bakCount = 4;
  void clear_bakcount();
  ::PROTOBUF_NAMESPACE_ID::int32 bakcount() const;
  void set_bakcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bakcount() const;
  void _internal_set_bakcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsBackpackId = 5;
  void clear_goodsbackpackid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsbackpackid() const;
  void set_goodsbackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsbackpackid() const;
  void _internal_set_goodsbackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarId = 7;
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:goodsBackpack.BTroveGoodsInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 bakcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsbackpackid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// -------------------------------------------------------------------

class CGoodsExchange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.CGoodsExchange) */ {
 public:
  CGoodsExchange();
  virtual ~CGoodsExchange();

  CGoodsExchange(const CGoodsExchange& from);
  CGoodsExchange(CGoodsExchange&& from) noexcept
    : CGoodsExchange() {
    *this = ::std::move(from);
  }

  inline CGoodsExchange& operator=(const CGoodsExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGoodsExchange& operator=(CGoodsExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGoodsExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGoodsExchange* internal_default_instance() {
    return reinterpret_cast<const CGoodsExchange*>(
               &_CGoodsExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CGoodsExchange& a, CGoodsExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(CGoodsExchange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGoodsExchange* New() const final {
    return CreateMaybeMessage<CGoodsExchange>(nullptr);
  }

  CGoodsExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGoodsExchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGoodsExchange& from);
  void MergeFrom(const CGoodsExchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGoodsExchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.CGoodsExchange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kUserPhoneFieldNumber = 3,
    kGoodsBackpackIdFieldNumber = 1,
  };
  // string userName = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string userPhone = 3;
  void clear_userphone();
  const std::string& userphone() const;
  void set_userphone(const std::string& value);
  void set_userphone(std::string&& value);
  void set_userphone(const char* value);
  void set_userphone(const char* value, size_t size);
  std::string* mutable_userphone();
  std::string* release_userphone();
  void set_allocated_userphone(std::string* userphone);
  private:
  const std::string& _internal_userphone() const;
  void _internal_set_userphone(const std::string& value);
  std::string* _internal_mutable_userphone();
  public:

  // int32 goodsBackpackId = 1;
  void clear_goodsbackpackid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsbackpackid() const;
  void set_goodsbackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsbackpackid() const;
  void _internal_set_goodsbackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:goodsBackpack.CGoodsExchange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userphone_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsbackpackid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// -------------------------------------------------------------------

class SGoodsExchange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.SGoodsExchange) */ {
 public:
  SGoodsExchange();
  virtual ~SGoodsExchange();

  SGoodsExchange(const SGoodsExchange& from);
  SGoodsExchange(SGoodsExchange&& from) noexcept
    : SGoodsExchange() {
    *this = ::std::move(from);
  }

  inline SGoodsExchange& operator=(const SGoodsExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGoodsExchange& operator=(SGoodsExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGoodsExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGoodsExchange* internal_default_instance() {
    return reinterpret_cast<const SGoodsExchange*>(
               &_SGoodsExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SGoodsExchange& a, SGoodsExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(SGoodsExchange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGoodsExchange* New() const final {
    return CreateMaybeMessage<SGoodsExchange>(nullptr);
  }

  SGoodsExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGoodsExchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGoodsExchange& from);
  void MergeFrom(const SGoodsExchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGoodsExchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.SGoodsExchange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:goodsBackpack.SGoodsExchange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// -------------------------------------------------------------------

class CPutRedPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.CPutRedPacket) */ {
 public:
  CPutRedPacket();
  virtual ~CPutRedPacket();

  CPutRedPacket(const CPutRedPacket& from);
  CPutRedPacket(CPutRedPacket&& from) noexcept
    : CPutRedPacket() {
    *this = ::std::move(from);
  }

  inline CPutRedPacket& operator=(const CPutRedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPutRedPacket& operator=(CPutRedPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPutRedPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPutRedPacket* internal_default_instance() {
    return reinterpret_cast<const CPutRedPacket*>(
               &_CPutRedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CPutRedPacket& a, CPutRedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(CPutRedPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPutRedPacket* New() const final {
    return CreateMaybeMessage<CPutRedPacket>(nullptr);
  }

  CPutRedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPutRedPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPutRedPacket& from);
  void MergeFrom(const CPutRedPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPutRedPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.CPutRedPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kGoodsIdFieldNumber = 2,
  };
  // .position.BPosition position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition& position() const;
  ::position::BPosition* release_position();
  ::position::BPosition* mutable_position();
  void set_allocated_position(::position::BPosition* position);
  private:
  const ::position::BPosition& _internal_position() const;
  ::position::BPosition* _internal_mutable_position();
  public:

  // int32 goodsId = 2;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:goodsBackpack.CPutRedPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::position::BPosition* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// -------------------------------------------------------------------

class SPutRedPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.SPutRedPacket) */ {
 public:
  SPutRedPacket();
  virtual ~SPutRedPacket();

  SPutRedPacket(const SPutRedPacket& from);
  SPutRedPacket(SPutRedPacket&& from) noexcept
    : SPutRedPacket() {
    *this = ::std::move(from);
  }

  inline SPutRedPacket& operator=(const SPutRedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPutRedPacket& operator=(SPutRedPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPutRedPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPutRedPacket* internal_default_instance() {
    return reinterpret_cast<const SPutRedPacket*>(
               &_SPutRedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SPutRedPacket& a, SPutRedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SPutRedPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPutRedPacket* New() const final {
    return CreateMaybeMessage<SPutRedPacket>(nullptr);
  }

  SPutRedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPutRedPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPutRedPacket& from);
  void MergeFrom(const SPutRedPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPutRedPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.SPutRedPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 5,
    kPositionFieldNumber = 2,
    kLocationFieldNumber = 1,
    kGoodsIdFieldNumber = 3,
    kSecondFieldNumber = 4,
    kSurplusFieldNumber = 6,
    kUidFieldNumber = 7,
  };
  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .position.BPosition position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition& position() const;
  ::position::BPosition* release_position();
  ::position::BPosition* mutable_position();
  void set_allocated_position(::position::BPosition* position);
  private:
  const ::position::BPosition& _internal_position() const;
  ::position::BPosition* _internal_mutable_position();
  public:

  // int32 location = 1;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 3;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 second = 4;
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::int32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 surplus = 6;
  void clear_surplus();
  ::PROTOBUF_NAMESPACE_ID::int32 surplus() const;
  void set_surplus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_surplus() const;
  void _internal_set_surplus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 7;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:goodsBackpack.SPutRedPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::position::BPosition* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 second_;
  ::PROTOBUF_NAMESPACE_ID::int32 surplus_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// -------------------------------------------------------------------

class SPutRedPacketList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.SPutRedPacketList) */ {
 public:
  SPutRedPacketList();
  virtual ~SPutRedPacketList();

  SPutRedPacketList(const SPutRedPacketList& from);
  SPutRedPacketList(SPutRedPacketList&& from) noexcept
    : SPutRedPacketList() {
    *this = ::std::move(from);
  }

  inline SPutRedPacketList& operator=(const SPutRedPacketList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPutRedPacketList& operator=(SPutRedPacketList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPutRedPacketList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPutRedPacketList* internal_default_instance() {
    return reinterpret_cast<const SPutRedPacketList*>(
               &_SPutRedPacketList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SPutRedPacketList& a, SPutRedPacketList& b) {
    a.Swap(&b);
  }
  inline void Swap(SPutRedPacketList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPutRedPacketList* New() const final {
    return CreateMaybeMessage<SPutRedPacketList>(nullptr);
  }

  SPutRedPacketList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPutRedPacketList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPutRedPacketList& from);
  void MergeFrom(const SPutRedPacketList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPutRedPacketList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.SPutRedPacketList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .goodsBackpack.SPutRedPacket list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::goodsBackpack::SPutRedPacket* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::SPutRedPacket >*
      mutable_list();
  private:
  const ::goodsBackpack::SPutRedPacket& _internal_list(int index) const;
  ::goodsBackpack::SPutRedPacket* _internal_add_list();
  public:
  const ::goodsBackpack::SPutRedPacket& list(int index) const;
  ::goodsBackpack::SPutRedPacket* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::SPutRedPacket >&
      list() const;

  // @@protoc_insertion_point(class_scope:goodsBackpack.SPutRedPacketList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::SPutRedPacket > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// -------------------------------------------------------------------

class CPickRedPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.CPickRedPacket) */ {
 public:
  CPickRedPacket();
  virtual ~CPickRedPacket();

  CPickRedPacket(const CPickRedPacket& from);
  CPickRedPacket(CPickRedPacket&& from) noexcept
    : CPickRedPacket() {
    *this = ::std::move(from);
  }

  inline CPickRedPacket& operator=(const CPickRedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPickRedPacket& operator=(CPickRedPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPickRedPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPickRedPacket* internal_default_instance() {
    return reinterpret_cast<const CPickRedPacket*>(
               &_CPickRedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CPickRedPacket& a, CPickRedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(CPickRedPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPickRedPacket* New() const final {
    return CreateMaybeMessage<CPickRedPacket>(nullptr);
  }

  CPickRedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPickRedPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPickRedPacket& from);
  void MergeFrom(const CPickRedPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPickRedPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.CPickRedPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
  };
  // int32 location = 1;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:goodsBackpack.CPickRedPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// -------------------------------------------------------------------

class SPickRedPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goodsBackpack.SPickRedPacket) */ {
 public:
  SPickRedPacket();
  virtual ~SPickRedPacket();

  SPickRedPacket(const SPickRedPacket& from);
  SPickRedPacket(SPickRedPacket&& from) noexcept
    : SPickRedPacket() {
    *this = ::std::move(from);
  }

  inline SPickRedPacket& operator=(const SPickRedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPickRedPacket& operator=(SPickRedPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPickRedPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPickRedPacket* internal_default_instance() {
    return reinterpret_cast<const SPickRedPacket*>(
               &_SPickRedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SPickRedPacket& a, SPickRedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SPickRedPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPickRedPacket* New() const final {
    return CreateMaybeMessage<SPickRedPacket>(nullptr);
  }

  SPickRedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPickRedPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPickRedPacket& from);
  void MergeFrom(const SPickRedPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPickRedPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goodsBackpack.SPickRedPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_goodsBackpack_2eproto);
    return ::descriptor_table_goodsBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
    kLocationFieldNumber = 3,
    kSurplusFieldNumber = 4,
    kPickUidFieldNumber = 5,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 location = 3;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 surplus = 4;
  void clear_surplus();
  ::PROTOBUF_NAMESPACE_ID::int32 surplus() const;
  void set_surplus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_surplus() const;
  void _internal_set_surplus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pickUid = 5;
  void clear_pickuid();
  ::PROTOBUF_NAMESPACE_ID::int32 pickuid() const;
  void set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pickuid() const;
  void _internal_set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:goodsBackpack.SPickRedPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 surplus_;
  ::PROTOBUF_NAMESPACE_ID::int32 pickuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goodsBackpack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGoodsBackpackList

// int32 curPage = 1;
inline void CGoodsBackpackList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGoodsBackpackList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGoodsBackpackList::curpage() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.CGoodsBackpackList.curPage)
  return _internal_curpage();
}
inline void CGoodsBackpackList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CGoodsBackpackList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.CGoodsBackpackList.curPage)
}

// int32 pageLimit = 2;
inline void CGoodsBackpackList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGoodsBackpackList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGoodsBackpackList::pagelimit() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.CGoodsBackpackList.pageLimit)
  return _internal_pagelimit();
}
inline void CGoodsBackpackList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CGoodsBackpackList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.CGoodsBackpackList.pageLimit)
}

// int32 cat = 3;
inline void CGoodsBackpackList::clear_cat() {
  cat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGoodsBackpackList::_internal_cat() const {
  return cat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGoodsBackpackList::cat() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.CGoodsBackpackList.cat)
  return _internal_cat();
}
inline void CGoodsBackpackList::_internal_set_cat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cat_ = value;
}
inline void CGoodsBackpackList::set_cat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cat(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.CGoodsBackpackList.cat)
}

// -------------------------------------------------------------------

// SGoodsBackpackList

// repeated .goodsBackpack.BTroveGoodsInfo list = 1;
inline int SGoodsBackpackList::_internal_list_size() const {
  return list_.size();
}
inline int SGoodsBackpackList::list_size() const {
  return _internal_list_size();
}
inline void SGoodsBackpackList::clear_list() {
  list_.Clear();
}
inline ::goodsBackpack::BTroveGoodsInfo* SGoodsBackpackList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.SGoodsBackpackList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::BTroveGoodsInfo >*
SGoodsBackpackList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:goodsBackpack.SGoodsBackpackList.list)
  return &list_;
}
inline const ::goodsBackpack::BTroveGoodsInfo& SGoodsBackpackList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::goodsBackpack::BTroveGoodsInfo& SGoodsBackpackList::list(int index) const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SGoodsBackpackList.list)
  return _internal_list(index);
}
inline ::goodsBackpack::BTroveGoodsInfo* SGoodsBackpackList::_internal_add_list() {
  return list_.Add();
}
inline ::goodsBackpack::BTroveGoodsInfo* SGoodsBackpackList::add_list() {
  // @@protoc_insertion_point(field_add:goodsBackpack.SGoodsBackpackList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::BTroveGoodsInfo >&
SGoodsBackpackList::list() const {
  // @@protoc_insertion_point(field_list:goodsBackpack.SGoodsBackpackList.list)
  return list_;
}

// int32 total = 2;
inline void SGoodsBackpackList::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsBackpackList::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsBackpackList::total() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SGoodsBackpackList.total)
  return _internal_total();
}
inline void SGoodsBackpackList::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SGoodsBackpackList::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SGoodsBackpackList.total)
}

// int32 curPage = 3;
inline void SGoodsBackpackList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsBackpackList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsBackpackList::curpage() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SGoodsBackpackList.curPage)
  return _internal_curpage();
}
inline void SGoodsBackpackList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SGoodsBackpackList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SGoodsBackpackList.curPage)
}

// int32 pageLimit = 4;
inline void SGoodsBackpackList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsBackpackList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsBackpackList::pagelimit() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SGoodsBackpackList.pageLimit)
  return _internal_pagelimit();
}
inline void SGoodsBackpackList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void SGoodsBackpackList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SGoodsBackpackList.pageLimit)
}

// int32 cat = 5;
inline void SGoodsBackpackList::clear_cat() {
  cat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsBackpackList::_internal_cat() const {
  return cat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsBackpackList::cat() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SGoodsBackpackList.cat)
  return _internal_cat();
}
inline void SGoodsBackpackList::_internal_set_cat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cat_ = value;
}
inline void SGoodsBackpackList::set_cat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cat(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SGoodsBackpackList.cat)
}

// -------------------------------------------------------------------

// BTroveGoodsInfo

// int32 id = 1;
inline void BTroveGoodsInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTroveGoodsInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTroveGoodsInfo::id() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.BTroveGoodsInfo.id)
  return _internal_id();
}
inline void BTroveGoodsInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void BTroveGoodsInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.BTroveGoodsInfo.id)
}

// string name = 2;
inline void BTroveGoodsInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BTroveGoodsInfo::name() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.BTroveGoodsInfo.name)
  return _internal_name();
}
inline void BTroveGoodsInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.BTroveGoodsInfo.name)
}
inline std::string* BTroveGoodsInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.BTroveGoodsInfo.name)
  return _internal_mutable_name();
}
inline const std::string& BTroveGoodsInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void BTroveGoodsInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BTroveGoodsInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goodsBackpack.BTroveGoodsInfo.name)
}
inline void BTroveGoodsInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goodsBackpack.BTroveGoodsInfo.name)
}
inline void BTroveGoodsInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goodsBackpack.BTroveGoodsInfo.name)
}
inline std::string* BTroveGoodsInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BTroveGoodsInfo::release_name() {
  // @@protoc_insertion_point(field_release:goodsBackpack.BTroveGoodsInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BTroveGoodsInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.BTroveGoodsInfo.name)
}

// string icon = 3;
inline void BTroveGoodsInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BTroveGoodsInfo::icon() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.BTroveGoodsInfo.icon)
  return _internal_icon();
}
inline void BTroveGoodsInfo::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.BTroveGoodsInfo.icon)
}
inline std::string* BTroveGoodsInfo::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.BTroveGoodsInfo.icon)
  return _internal_mutable_icon();
}
inline const std::string& BTroveGoodsInfo::_internal_icon() const {
  return icon_.GetNoArena();
}
inline void BTroveGoodsInfo::_internal_set_icon(const std::string& value) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BTroveGoodsInfo::set_icon(std::string&& value) {
  
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goodsBackpack.BTroveGoodsInfo.icon)
}
inline void BTroveGoodsInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goodsBackpack.BTroveGoodsInfo.icon)
}
inline void BTroveGoodsInfo::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goodsBackpack.BTroveGoodsInfo.icon)
}
inline std::string* BTroveGoodsInfo::_internal_mutable_icon() {
  
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BTroveGoodsInfo::release_icon() {
  // @@protoc_insertion_point(field_release:goodsBackpack.BTroveGoodsInfo.icon)
  
  return icon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BTroveGoodsInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.BTroveGoodsInfo.icon)
}

// int32 bakCount = 4;
inline void BTroveGoodsInfo::clear_bakcount() {
  bakcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTroveGoodsInfo::_internal_bakcount() const {
  return bakcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTroveGoodsInfo::bakcount() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.BTroveGoodsInfo.bakCount)
  return _internal_bakcount();
}
inline void BTroveGoodsInfo::_internal_set_bakcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bakcount_ = value;
}
inline void BTroveGoodsInfo::set_bakcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bakcount(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.BTroveGoodsInfo.bakCount)
}

// int32 goodsBackpackId = 5;
inline void BTroveGoodsInfo::clear_goodsbackpackid() {
  goodsbackpackid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTroveGoodsInfo::_internal_goodsbackpackid() const {
  return goodsbackpackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTroveGoodsInfo::goodsbackpackid() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.BTroveGoodsInfo.goodsBackpackId)
  return _internal_goodsbackpackid();
}
inline void BTroveGoodsInfo::_internal_set_goodsbackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsbackpackid_ = value;
}
inline void BTroveGoodsInfo::set_goodsbackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsbackpackid(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.BTroveGoodsInfo.goodsBackpackId)
}

// string detail = 6;
inline void BTroveGoodsInfo::clear_detail() {
  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BTroveGoodsInfo::detail() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.BTroveGoodsInfo.detail)
  return _internal_detail();
}
inline void BTroveGoodsInfo::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.BTroveGoodsInfo.detail)
}
inline std::string* BTroveGoodsInfo::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.BTroveGoodsInfo.detail)
  return _internal_mutable_detail();
}
inline const std::string& BTroveGoodsInfo::_internal_detail() const {
  return detail_.GetNoArena();
}
inline void BTroveGoodsInfo::_internal_set_detail(const std::string& value) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BTroveGoodsInfo::set_detail(std::string&& value) {
  
  detail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goodsBackpack.BTroveGoodsInfo.detail)
}
inline void BTroveGoodsInfo::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goodsBackpack.BTroveGoodsInfo.detail)
}
inline void BTroveGoodsInfo::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goodsBackpack.BTroveGoodsInfo.detail)
}
inline std::string* BTroveGoodsInfo::_internal_mutable_detail() {
  
  return detail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BTroveGoodsInfo::release_detail() {
  // @@protoc_insertion_point(field_release:goodsBackpack.BTroveGoodsInfo.detail)
  
  return detail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BTroveGoodsInfo::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.BTroveGoodsInfo.detail)
}

// int32 avatarId = 7;
inline void BTroveGoodsInfo::clear_avatarid() {
  avatarid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTroveGoodsInfo::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTroveGoodsInfo::avatarid() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.BTroveGoodsInfo.avatarId)
  return _internal_avatarid();
}
inline void BTroveGoodsInfo::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarid_ = value;
}
inline void BTroveGoodsInfo::set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.BTroveGoodsInfo.avatarId)
}

// -------------------------------------------------------------------

// CGoodsExchange

// int32 goodsBackpackId = 1;
inline void CGoodsExchange::clear_goodsbackpackid() {
  goodsbackpackid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGoodsExchange::_internal_goodsbackpackid() const {
  return goodsbackpackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGoodsExchange::goodsbackpackid() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.CGoodsExchange.goodsBackpackId)
  return _internal_goodsbackpackid();
}
inline void CGoodsExchange::_internal_set_goodsbackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsbackpackid_ = value;
}
inline void CGoodsExchange::set_goodsbackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsbackpackid(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.CGoodsExchange.goodsBackpackId)
}

// string userName = 2;
inline void CGoodsExchange::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CGoodsExchange::username() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.CGoodsExchange.userName)
  return _internal_username();
}
inline void CGoodsExchange::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.CGoodsExchange.userName)
}
inline std::string* CGoodsExchange::mutable_username() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.CGoodsExchange.userName)
  return _internal_mutable_username();
}
inline const std::string& CGoodsExchange::_internal_username() const {
  return username_.GetNoArena();
}
inline void CGoodsExchange::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CGoodsExchange::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goodsBackpack.CGoodsExchange.userName)
}
inline void CGoodsExchange::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goodsBackpack.CGoodsExchange.userName)
}
inline void CGoodsExchange::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goodsBackpack.CGoodsExchange.userName)
}
inline std::string* CGoodsExchange::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CGoodsExchange::release_username() {
  // @@protoc_insertion_point(field_release:goodsBackpack.CGoodsExchange.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CGoodsExchange::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.CGoodsExchange.userName)
}

// string userPhone = 3;
inline void CGoodsExchange::clear_userphone() {
  userphone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CGoodsExchange::userphone() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.CGoodsExchange.userPhone)
  return _internal_userphone();
}
inline void CGoodsExchange::set_userphone(const std::string& value) {
  _internal_set_userphone(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.CGoodsExchange.userPhone)
}
inline std::string* CGoodsExchange::mutable_userphone() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.CGoodsExchange.userPhone)
  return _internal_mutable_userphone();
}
inline const std::string& CGoodsExchange::_internal_userphone() const {
  return userphone_.GetNoArena();
}
inline void CGoodsExchange::_internal_set_userphone(const std::string& value) {
  
  userphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CGoodsExchange::set_userphone(std::string&& value) {
  
  userphone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goodsBackpack.CGoodsExchange.userPhone)
}
inline void CGoodsExchange::set_userphone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goodsBackpack.CGoodsExchange.userPhone)
}
inline void CGoodsExchange::set_userphone(const char* value, size_t size) {
  
  userphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goodsBackpack.CGoodsExchange.userPhone)
}
inline std::string* CGoodsExchange::_internal_mutable_userphone() {
  
  return userphone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CGoodsExchange::release_userphone() {
  // @@protoc_insertion_point(field_release:goodsBackpack.CGoodsExchange.userPhone)
  
  return userphone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CGoodsExchange::set_allocated_userphone(std::string* userphone) {
  if (userphone != nullptr) {
    
  } else {
    
  }
  userphone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userphone);
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.CGoodsExchange.userPhone)
}

// -------------------------------------------------------------------

// SGoodsExchange

// int32 status = 1;
inline void SGoodsExchange::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsExchange::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGoodsExchange::status() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SGoodsExchange.status)
  return _internal_status();
}
inline void SGoodsExchange::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SGoodsExchange::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SGoodsExchange.status)
}

// string msg = 2;
inline void SGoodsExchange::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGoodsExchange::msg() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SGoodsExchange.msg)
  return _internal_msg();
}
inline void SGoodsExchange::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SGoodsExchange.msg)
}
inline std::string* SGoodsExchange::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.SGoodsExchange.msg)
  return _internal_mutable_msg();
}
inline const std::string& SGoodsExchange::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SGoodsExchange::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGoodsExchange::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goodsBackpack.SGoodsExchange.msg)
}
inline void SGoodsExchange::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goodsBackpack.SGoodsExchange.msg)
}
inline void SGoodsExchange::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goodsBackpack.SGoodsExchange.msg)
}
inline std::string* SGoodsExchange::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGoodsExchange::release_msg() {
  // @@protoc_insertion_point(field_release:goodsBackpack.SGoodsExchange.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGoodsExchange::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.SGoodsExchange.msg)
}

// -------------------------------------------------------------------

// CPutRedPacket

// .position.BPosition position = 1;
inline bool CPutRedPacket::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CPutRedPacket::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition& CPutRedPacket::_internal_position() const {
  const ::position::BPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition*>(
      &::position::_BPosition_default_instance_);
}
inline const ::position::BPosition& CPutRedPacket::position() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.CPutRedPacket.position)
  return _internal_position();
}
inline ::position::BPosition* CPutRedPacket::release_position() {
  // @@protoc_insertion_point(field_release:goodsBackpack.CPutRedPacket.position)
  
  ::position::BPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition* CPutRedPacket::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition* CPutRedPacket::mutable_position() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.CPutRedPacket.position)
  return _internal_mutable_position();
}
inline void CPutRedPacket::set_allocated_position(::position::BPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.CPutRedPacket.position)
}

// int32 goodsId = 2;
inline void CPutRedPacket::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPutRedPacket::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPutRedPacket::goodsid() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.CPutRedPacket.goodsId)
  return _internal_goodsid();
}
inline void CPutRedPacket::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CPutRedPacket::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.CPutRedPacket.goodsId)
}

// -------------------------------------------------------------------

// SPutRedPacket

// int32 location = 1;
inline void SPutRedPacket::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::location() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPutRedPacket.location)
  return _internal_location();
}
inline void SPutRedPacket::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void SPutRedPacket::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPutRedPacket.location)
}

// .position.BPosition position = 2;
inline bool SPutRedPacket::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SPutRedPacket::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition& SPutRedPacket::_internal_position() const {
  const ::position::BPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition*>(
      &::position::_BPosition_default_instance_);
}
inline const ::position::BPosition& SPutRedPacket::position() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPutRedPacket.position)
  return _internal_position();
}
inline ::position::BPosition* SPutRedPacket::release_position() {
  // @@protoc_insertion_point(field_release:goodsBackpack.SPutRedPacket.position)
  
  ::position::BPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition* SPutRedPacket::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition* SPutRedPacket::mutable_position() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.SPutRedPacket.position)
  return _internal_mutable_position();
}
inline void SPutRedPacket::set_allocated_position(::position::BPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.SPutRedPacket.position)
}

// int32 goodsId = 3;
inline void SPutRedPacket::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::goodsid() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPutRedPacket.goodsId)
  return _internal_goodsid();
}
inline void SPutRedPacket::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void SPutRedPacket::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPutRedPacket.goodsId)
}

// int32 second = 4;
inline void SPutRedPacket::clear_second() {
  second_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::second() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPutRedPacket.second)
  return _internal_second();
}
inline void SPutRedPacket::_internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  second_ = value;
}
inline void SPutRedPacket::set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPutRedPacket.second)
}

// string msg = 5;
inline void SPutRedPacket::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SPutRedPacket::msg() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPutRedPacket.msg)
  return _internal_msg();
}
inline void SPutRedPacket::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPutRedPacket.msg)
}
inline std::string* SPutRedPacket::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.SPutRedPacket.msg)
  return _internal_mutable_msg();
}
inline const std::string& SPutRedPacket::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SPutRedPacket::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SPutRedPacket::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goodsBackpack.SPutRedPacket.msg)
}
inline void SPutRedPacket::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goodsBackpack.SPutRedPacket.msg)
}
inline void SPutRedPacket::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goodsBackpack.SPutRedPacket.msg)
}
inline std::string* SPutRedPacket::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SPutRedPacket::release_msg() {
  // @@protoc_insertion_point(field_release:goodsBackpack.SPutRedPacket.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SPutRedPacket::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.SPutRedPacket.msg)
}

// int32 surplus = 6;
inline void SPutRedPacket::clear_surplus() {
  surplus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::_internal_surplus() const {
  return surplus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::surplus() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPutRedPacket.surplus)
  return _internal_surplus();
}
inline void SPutRedPacket::_internal_set_surplus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  surplus_ = value;
}
inline void SPutRedPacket::set_surplus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_surplus(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPutRedPacket.surplus)
}

// int32 uid = 7;
inline void SPutRedPacket::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutRedPacket::uid() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPutRedPacket.uid)
  return _internal_uid();
}
inline void SPutRedPacket::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SPutRedPacket::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPutRedPacket.uid)
}

// -------------------------------------------------------------------

// SPutRedPacketList

// repeated .goodsBackpack.SPutRedPacket list = 1;
inline int SPutRedPacketList::_internal_list_size() const {
  return list_.size();
}
inline int SPutRedPacketList::list_size() const {
  return _internal_list_size();
}
inline void SPutRedPacketList::clear_list() {
  list_.Clear();
}
inline ::goodsBackpack::SPutRedPacket* SPutRedPacketList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.SPutRedPacketList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::SPutRedPacket >*
SPutRedPacketList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:goodsBackpack.SPutRedPacketList.list)
  return &list_;
}
inline const ::goodsBackpack::SPutRedPacket& SPutRedPacketList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::goodsBackpack::SPutRedPacket& SPutRedPacketList::list(int index) const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPutRedPacketList.list)
  return _internal_list(index);
}
inline ::goodsBackpack::SPutRedPacket* SPutRedPacketList::_internal_add_list() {
  return list_.Add();
}
inline ::goodsBackpack::SPutRedPacket* SPutRedPacketList::add_list() {
  // @@protoc_insertion_point(field_add:goodsBackpack.SPutRedPacketList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::goodsBackpack::SPutRedPacket >&
SPutRedPacketList::list() const {
  // @@protoc_insertion_point(field_list:goodsBackpack.SPutRedPacketList.list)
  return list_;
}

// -------------------------------------------------------------------

// CPickRedPacket

// int32 location = 1;
inline void CPickRedPacket::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPickRedPacket::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPickRedPacket::location() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.CPickRedPacket.location)
  return _internal_location();
}
inline void CPickRedPacket::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void CPickRedPacket::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.CPickRedPacket.location)
}

// -------------------------------------------------------------------

// SPickRedPacket

// int32 state = 1;
inline void SPickRedPacket::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickRedPacket::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickRedPacket::state() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPickRedPacket.state)
  return _internal_state();
}
inline void SPickRedPacket::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SPickRedPacket::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPickRedPacket.state)
}

// string msg = 2;
inline void SPickRedPacket::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SPickRedPacket::msg() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPickRedPacket.msg)
  return _internal_msg();
}
inline void SPickRedPacket::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPickRedPacket.msg)
}
inline std::string* SPickRedPacket::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:goodsBackpack.SPickRedPacket.msg)
  return _internal_mutable_msg();
}
inline const std::string& SPickRedPacket::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SPickRedPacket::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SPickRedPacket::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goodsBackpack.SPickRedPacket.msg)
}
inline void SPickRedPacket::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goodsBackpack.SPickRedPacket.msg)
}
inline void SPickRedPacket::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goodsBackpack.SPickRedPacket.msg)
}
inline std::string* SPickRedPacket::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SPickRedPacket::release_msg() {
  // @@protoc_insertion_point(field_release:goodsBackpack.SPickRedPacket.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SPickRedPacket::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:goodsBackpack.SPickRedPacket.msg)
}

// int32 location = 3;
inline void SPickRedPacket::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickRedPacket::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickRedPacket::location() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPickRedPacket.location)
  return _internal_location();
}
inline void SPickRedPacket::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void SPickRedPacket::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPickRedPacket.location)
}

// int32 surplus = 4;
inline void SPickRedPacket::clear_surplus() {
  surplus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickRedPacket::_internal_surplus() const {
  return surplus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickRedPacket::surplus() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPickRedPacket.surplus)
  return _internal_surplus();
}
inline void SPickRedPacket::_internal_set_surplus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  surplus_ = value;
}
inline void SPickRedPacket::set_surplus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_surplus(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPickRedPacket.surplus)
}

// int32 pickUid = 5;
inline void SPickRedPacket::clear_pickuid() {
  pickuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickRedPacket::_internal_pickuid() const {
  return pickuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickRedPacket::pickuid() const {
  // @@protoc_insertion_point(field_get:goodsBackpack.SPickRedPacket.pickUid)
  return _internal_pickuid();
}
inline void SPickRedPacket::_internal_set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pickuid_ = value;
}
inline void SPickRedPacket::set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pickuid(value);
  // @@protoc_insertion_point(field_set:goodsBackpack.SPickRedPacket.pickUid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace goodsBackpack

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_goodsBackpack_2eproto
