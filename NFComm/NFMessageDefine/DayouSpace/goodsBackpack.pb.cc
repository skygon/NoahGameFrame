// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goodsBackpack.proto

#include "goodsBackpack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_goodsBackpack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BTroveGoodsInfo_goodsBackpack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_goodsBackpack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SPutRedPacket_goodsBackpack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_position_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPosition_position_2eproto;
namespace goodsBackpack {
class CGoodsBackpackListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGoodsBackpackList> _instance;
} _CGoodsBackpackList_default_instance_;
class SGoodsBackpackListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGoodsBackpackList> _instance;
} _SGoodsBackpackList_default_instance_;
class BTroveGoodsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BTroveGoodsInfo> _instance;
} _BTroveGoodsInfo_default_instance_;
class CGoodsExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGoodsExchange> _instance;
} _CGoodsExchange_default_instance_;
class SGoodsExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGoodsExchange> _instance;
} _SGoodsExchange_default_instance_;
class CPutRedPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPutRedPacket> _instance;
} _CPutRedPacket_default_instance_;
class SPutRedPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPutRedPacket> _instance;
} _SPutRedPacket_default_instance_;
class SPutRedPacketListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPutRedPacketList> _instance;
} _SPutRedPacketList_default_instance_;
class CPickRedPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPickRedPacket> _instance;
} _CPickRedPacket_default_instance_;
class SPickRedPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPickRedPacket> _instance;
} _SPickRedPacket_default_instance_;
}  // namespace goodsBackpack
static void InitDefaultsscc_info_BTroveGoodsInfo_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_BTroveGoodsInfo_default_instance_;
    new (ptr) ::goodsBackpack::BTroveGoodsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::BTroveGoodsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BTroveGoodsInfo_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BTroveGoodsInfo_goodsBackpack_2eproto}, {}};

static void InitDefaultsscc_info_CGoodsBackpackList_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_CGoodsBackpackList_default_instance_;
    new (ptr) ::goodsBackpack::CGoodsBackpackList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::CGoodsBackpackList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGoodsBackpackList_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGoodsBackpackList_goodsBackpack_2eproto}, {}};

static void InitDefaultsscc_info_CGoodsExchange_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_CGoodsExchange_default_instance_;
    new (ptr) ::goodsBackpack::CGoodsExchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::CGoodsExchange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGoodsExchange_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGoodsExchange_goodsBackpack_2eproto}, {}};

static void InitDefaultsscc_info_CPickRedPacket_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_CPickRedPacket_default_instance_;
    new (ptr) ::goodsBackpack::CPickRedPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::CPickRedPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPickRedPacket_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPickRedPacket_goodsBackpack_2eproto}, {}};

static void InitDefaultsscc_info_CPutRedPacket_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_CPutRedPacket_default_instance_;
    new (ptr) ::goodsBackpack::CPutRedPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::CPutRedPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CPutRedPacket_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CPutRedPacket_goodsBackpack_2eproto}, {
      &scc_info_BPosition_position_2eproto.base,}};

static void InitDefaultsscc_info_SGoodsBackpackList_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_SGoodsBackpackList_default_instance_;
    new (ptr) ::goodsBackpack::SGoodsBackpackList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::SGoodsBackpackList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SGoodsBackpackList_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SGoodsBackpackList_goodsBackpack_2eproto}, {
      &scc_info_BTroveGoodsInfo_goodsBackpack_2eproto.base,}};

static void InitDefaultsscc_info_SGoodsExchange_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_SGoodsExchange_default_instance_;
    new (ptr) ::goodsBackpack::SGoodsExchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::SGoodsExchange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGoodsExchange_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGoodsExchange_goodsBackpack_2eproto}, {}};

static void InitDefaultsscc_info_SPickRedPacket_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_SPickRedPacket_default_instance_;
    new (ptr) ::goodsBackpack::SPickRedPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::SPickRedPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SPickRedPacket_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SPickRedPacket_goodsBackpack_2eproto}, {}};

static void InitDefaultsscc_info_SPutRedPacket_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_SPutRedPacket_default_instance_;
    new (ptr) ::goodsBackpack::SPutRedPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::SPutRedPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SPutRedPacket_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SPutRedPacket_goodsBackpack_2eproto}, {
      &scc_info_BPosition_position_2eproto.base,}};

static void InitDefaultsscc_info_SPutRedPacketList_goodsBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goodsBackpack::_SPutRedPacketList_default_instance_;
    new (ptr) ::goodsBackpack::SPutRedPacketList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goodsBackpack::SPutRedPacketList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SPutRedPacketList_goodsBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SPutRedPacketList_goodsBackpack_2eproto}, {
      &scc_info_SPutRedPacket_goodsBackpack_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_goodsBackpack_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_goodsBackpack_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_goodsBackpack_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_goodsBackpack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CGoodsBackpackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CGoodsBackpackList, curpage_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CGoodsBackpackList, pagelimit_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CGoodsBackpackList, cat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SGoodsBackpackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SGoodsBackpackList, list_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SGoodsBackpackList, total_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SGoodsBackpackList, curpage_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SGoodsBackpackList, pagelimit_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SGoodsBackpackList, cat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::BTroveGoodsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::BTroveGoodsInfo, id_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::BTroveGoodsInfo, name_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::BTroveGoodsInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::BTroveGoodsInfo, bakcount_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::BTroveGoodsInfo, goodsbackpackid_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::BTroveGoodsInfo, detail_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::BTroveGoodsInfo, avatarid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CGoodsExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CGoodsExchange, goodsbackpackid_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CGoodsExchange, username_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CGoodsExchange, userphone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SGoodsExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SGoodsExchange, status_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SGoodsExchange, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CPutRedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CPutRedPacket, position_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CPutRedPacket, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacket, location_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacket, position_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacket, goodsid_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacket, second_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacket, msg_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacket, surplus_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacket, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacketList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPutRedPacketList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CPickRedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::CPickRedPacket, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPickRedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPickRedPacket, state_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPickRedPacket, msg_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPickRedPacket, location_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPickRedPacket, surplus_),
  PROTOBUF_FIELD_OFFSET(::goodsBackpack::SPickRedPacket, pickuid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::goodsBackpack::CGoodsBackpackList)},
  { 8, -1, sizeof(::goodsBackpack::SGoodsBackpackList)},
  { 18, -1, sizeof(::goodsBackpack::BTroveGoodsInfo)},
  { 30, -1, sizeof(::goodsBackpack::CGoodsExchange)},
  { 38, -1, sizeof(::goodsBackpack::SGoodsExchange)},
  { 45, -1, sizeof(::goodsBackpack::CPutRedPacket)},
  { 52, -1, sizeof(::goodsBackpack::SPutRedPacket)},
  { 64, -1, sizeof(::goodsBackpack::SPutRedPacketList)},
  { 70, -1, sizeof(::goodsBackpack::CPickRedPacket)},
  { 76, -1, sizeof(::goodsBackpack::SPickRedPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_CGoodsBackpackList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_SGoodsBackpackList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_BTroveGoodsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_CGoodsExchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_SGoodsExchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_CPutRedPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_SPutRedPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_SPutRedPacketList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_CPickRedPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goodsBackpack::_SPickRedPacket_default_instance_),
};

const char descriptor_table_protodef_goodsBackpack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023goodsBackpack.proto\022\rgoodsBackpack\032\016po"
  "sition.proto\"E\n\022CGoodsBackpackList\022\017\n\007cu"
  "rPage\030\001 \001(\005\022\021\n\tpageLimit\030\002 \001(\005\022\013\n\003cat\030\003 "
  "\001(\005\"\202\001\n\022SGoodsBackpackList\022,\n\004list\030\001 \003(\013"
  "2\036.goodsBackpack.BTroveGoodsInfo\022\r\n\005tota"
  "l\030\002 \001(\005\022\017\n\007curPage\030\003 \001(\005\022\021\n\tpageLimit\030\004 "
  "\001(\005\022\013\n\003cat\030\005 \001(\005\"\206\001\n\017BTroveGoodsInfo\022\n\n\002"
  "id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003 \001(\t\022\020\n\010"
  "bakCount\030\004 \001(\005\022\027\n\017goodsBackpackId\030\005 \001(\005\022"
  "\016\n\006detail\030\006 \001(\t\022\020\n\010avatarId\030\007 \001(\005\"N\n\016CGo"
  "odsExchange\022\027\n\017goodsBackpackId\030\001 \001(\005\022\020\n\010"
  "userName\030\002 \001(\t\022\021\n\tuserPhone\030\003 \001(\t\"-\n\016SGo"
  "odsExchange\022\016\n\006status\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t"
  "\"G\n\rCPutRedPacket\022%\n\010position\030\001 \001(\0132\023.po"
  "sition.BPosition\022\017\n\007goodsId\030\002 \001(\005\"\224\001\n\rSP"
  "utRedPacket\022\020\n\010location\030\001 \001(\005\022%\n\010positio"
  "n\030\002 \001(\0132\023.position.BPosition\022\017\n\007goodsId\030"
  "\003 \001(\005\022\016\n\006second\030\004 \001(\005\022\013\n\003msg\030\005 \001(\t\022\017\n\007su"
  "rplus\030\006 \001(\005\022\013\n\003uid\030\007 \001(\005\"\?\n\021SPutRedPacke"
  "tList\022*\n\004list\030\001 \003(\0132\034.goodsBackpack.SPut"
  "RedPacket\"\"\n\016CPickRedPacket\022\020\n\010location\030"
  "\001 \001(\005\"`\n\016SPickRedPacket\022\r\n\005state\030\001 \001(\005\022\013"
  "\n\003msg\030\002 \001(\t\022\020\n\010location\030\003 \001(\005\022\017\n\007surplus"
  "\030\004 \001(\005\022\017\n\007pickUid\030\005 \001(\005B)\n\030com.dayou.spa"
  "ce.protobufB\rGoodsBackpackb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_goodsBackpack_2eproto_deps[1] = {
  &::descriptor_table_position_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_goodsBackpack_2eproto_sccs[10] = {
  &scc_info_BTroveGoodsInfo_goodsBackpack_2eproto.base,
  &scc_info_CGoodsBackpackList_goodsBackpack_2eproto.base,
  &scc_info_CGoodsExchange_goodsBackpack_2eproto.base,
  &scc_info_CPickRedPacket_goodsBackpack_2eproto.base,
  &scc_info_CPutRedPacket_goodsBackpack_2eproto.base,
  &scc_info_SGoodsBackpackList_goodsBackpack_2eproto.base,
  &scc_info_SGoodsExchange_goodsBackpack_2eproto.base,
  &scc_info_SPickRedPacket_goodsBackpack_2eproto.base,
  &scc_info_SPutRedPacket_goodsBackpack_2eproto.base,
  &scc_info_SPutRedPacketList_goodsBackpack_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_goodsBackpack_2eproto_once;
static bool descriptor_table_goodsBackpack_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_goodsBackpack_2eproto = {
  &descriptor_table_goodsBackpack_2eproto_initialized, descriptor_table_protodef_goodsBackpack_2eproto, "goodsBackpack.proto", 994,
  &descriptor_table_goodsBackpack_2eproto_once, descriptor_table_goodsBackpack_2eproto_sccs, descriptor_table_goodsBackpack_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_goodsBackpack_2eproto::offsets,
  file_level_metadata_goodsBackpack_2eproto, 10, file_level_enum_descriptors_goodsBackpack_2eproto, file_level_service_descriptors_goodsBackpack_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_goodsBackpack_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_goodsBackpack_2eproto), true);
namespace goodsBackpack {

// ===================================================================

void CGoodsBackpackList::InitAsDefaultInstance() {
}
class CGoodsBackpackList::_Internal {
 public:
};

CGoodsBackpackList::CGoodsBackpackList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.CGoodsBackpackList)
}
CGoodsBackpackList::CGoodsBackpackList(const CGoodsBackpackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curpage_, &from.curpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&cat_) -
    reinterpret_cast<char*>(&curpage_)) + sizeof(cat_));
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.CGoodsBackpackList)
}

void CGoodsBackpackList::SharedCtor() {
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cat_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(cat_));
}

CGoodsBackpackList::~CGoodsBackpackList() {
  // @@protoc_insertion_point(destructor:goodsBackpack.CGoodsBackpackList)
  SharedDtor();
}

void CGoodsBackpackList::SharedDtor() {
}

void CGoodsBackpackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGoodsBackpackList& CGoodsBackpackList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGoodsBackpackList_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void CGoodsBackpackList::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.CGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cat_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(cat_));
  _internal_metadata_.Clear();
}

const char* CGoodsBackpackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 curPage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGoodsBackpackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.CGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pagelimit(), target);
  }

  // int32 cat = 3;
  if (this->cat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.CGoodsBackpackList)
  return target;
}

size_t CGoodsBackpackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.CGoodsBackpackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  // int32 cat = 3;
  if (this->cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGoodsBackpackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.CGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  const CGoodsBackpackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGoodsBackpackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.CGoodsBackpackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.CGoodsBackpackList)
    MergeFrom(*source);
  }
}

void CGoodsBackpackList::MergeFrom(const CGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.CGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
  if (from.cat() != 0) {
    _internal_set_cat(from._internal_cat());
  }
}

void CGoodsBackpackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.CGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGoodsBackpackList::CopyFrom(const CGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.CGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGoodsBackpackList::IsInitialized() const {
  return true;
}

void CGoodsBackpackList::InternalSwap(CGoodsBackpackList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
  swap(cat_, other->cat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGoodsBackpackList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGoodsBackpackList::InitAsDefaultInstance() {
}
class SGoodsBackpackList::_Internal {
 public:
};

SGoodsBackpackList::SGoodsBackpackList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.SGoodsBackpackList)
}
SGoodsBackpackList::SGoodsBackpackList(const SGoodsBackpackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&cat_) -
    reinterpret_cast<char*>(&total_)) + sizeof(cat_));
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.SGoodsBackpackList)
}

void SGoodsBackpackList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGoodsBackpackList_goodsBackpack_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cat_) -
      reinterpret_cast<char*>(&total_)) + sizeof(cat_));
}

SGoodsBackpackList::~SGoodsBackpackList() {
  // @@protoc_insertion_point(destructor:goodsBackpack.SGoodsBackpackList)
  SharedDtor();
}

void SGoodsBackpackList::SharedDtor() {
}

void SGoodsBackpackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGoodsBackpackList& SGoodsBackpackList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGoodsBackpackList_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void SGoodsBackpackList::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.SGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cat_) -
      reinterpret_cast<char*>(&total_)) + sizeof(cat_));
  _internal_metadata_.Clear();
}

const char* SGoodsBackpackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .goodsBackpack.BTroveGoodsInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curPage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGoodsBackpackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.SGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goodsBackpack.BTroveGoodsInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pagelimit(), target);
  }

  // int32 cat = 5;
  if (this->cat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.SGoodsBackpackList)
  return target;
}

size_t SGoodsBackpackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.SGoodsBackpackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .goodsBackpack.BTroveGoodsInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  // int32 cat = 5;
  if (this->cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGoodsBackpackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.SGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  const SGoodsBackpackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGoodsBackpackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.SGoodsBackpackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.SGoodsBackpackList)
    MergeFrom(*source);
  }
}

void SGoodsBackpackList::MergeFrom(const SGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.SGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
  if (from.cat() != 0) {
    _internal_set_cat(from._internal_cat());
  }
}

void SGoodsBackpackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.SGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGoodsBackpackList::CopyFrom(const SGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.SGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGoodsBackpackList::IsInitialized() const {
  return true;
}

void SGoodsBackpackList::InternalSwap(SGoodsBackpackList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  swap(total_, other->total_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
  swap(cat_, other->cat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGoodsBackpackList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BTroveGoodsInfo::InitAsDefaultInstance() {
}
class BTroveGoodsInfo::_Internal {
 public:
};

BTroveGoodsInfo::BTroveGoodsInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.BTroveGoodsInfo)
}
BTroveGoodsInfo::BTroveGoodsInfo(const BTroveGoodsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatarid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(avatarid_));
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.BTroveGoodsInfo)
}

void BTroveGoodsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BTroveGoodsInfo_goodsBackpack_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(avatarid_));
}

BTroveGoodsInfo::~BTroveGoodsInfo() {
  // @@protoc_insertion_point(destructor:goodsBackpack.BTroveGoodsInfo)
  SharedDtor();
}

void BTroveGoodsInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BTroveGoodsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BTroveGoodsInfo& BTroveGoodsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BTroveGoodsInfo_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void BTroveGoodsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.BTroveGoodsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(avatarid_));
  _internal_metadata_.Clear();
}

const char* BTroveGoodsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "goodsBackpack.BTroveGoodsInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "goodsBackpack.BTroveGoodsInfo.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bakCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bakcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsBackpackId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          goodsbackpackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string detail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "goodsBackpack.BTroveGoodsInfo.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTroveGoodsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.BTroveGoodsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "goodsBackpack.BTroveGoodsInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string icon = 3;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "goodsBackpack.BTroveGoodsInfo.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // int32 bakCount = 4;
  if (this->bakcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bakcount(), target);
  }

  // int32 goodsBackpackId = 5;
  if (this->goodsbackpackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_goodsbackpackid(), target);
  }

  // string detail = 6;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "goodsBackpack.BTroveGoodsInfo.detail");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_detail(), target);
  }

  // int32 avatarId = 7;
  if (this->avatarid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_avatarid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.BTroveGoodsInfo)
  return target;
}

size_t BTroveGoodsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.BTroveGoodsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string icon = 3;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string detail = 6;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 bakCount = 4;
  if (this->bakcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bakcount());
  }

  // int32 goodsBackpackId = 5;
  if (this->goodsbackpackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsbackpackid());
  }

  // int32 avatarId = 7;
  if (this->avatarid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTroveGoodsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.BTroveGoodsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTroveGoodsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTroveGoodsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.BTroveGoodsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.BTroveGoodsInfo)
    MergeFrom(*source);
  }
}

void BTroveGoodsInfo::MergeFrom(const BTroveGoodsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.BTroveGoodsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.bakcount() != 0) {
    _internal_set_bakcount(from._internal_bakcount());
  }
  if (from.goodsbackpackid() != 0) {
    _internal_set_goodsbackpackid(from._internal_goodsbackpackid());
  }
  if (from.avatarid() != 0) {
    _internal_set_avatarid(from._internal_avatarid());
  }
}

void BTroveGoodsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.BTroveGoodsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTroveGoodsInfo::CopyFrom(const BTroveGoodsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.BTroveGoodsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTroveGoodsInfo::IsInitialized() const {
  return true;
}

void BTroveGoodsInfo::InternalSwap(BTroveGoodsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(bakcount_, other->bakcount_);
  swap(goodsbackpackid_, other->goodsbackpackid_);
  swap(avatarid_, other->avatarid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTroveGoodsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGoodsExchange::InitAsDefaultInstance() {
}
class CGoodsExchange::_Internal {
 public:
};

CGoodsExchange::CGoodsExchange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.CGoodsExchange)
}
CGoodsExchange::CGoodsExchange(const CGoodsExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userphone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userphone().empty()) {
    userphone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userphone_);
  }
  goodsbackpackid_ = from.goodsbackpackid_;
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.CGoodsExchange)
}

void CGoodsExchange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CGoodsExchange_goodsBackpack_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodsbackpackid_ = 0;
}

CGoodsExchange::~CGoodsExchange() {
  // @@protoc_insertion_point(destructor:goodsBackpack.CGoodsExchange)
  SharedDtor();
}

void CGoodsExchange::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGoodsExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGoodsExchange& CGoodsExchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGoodsExchange_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void CGoodsExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.CGoodsExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodsbackpackid_ = 0;
  _internal_metadata_.Clear();
}

const char* CGoodsExchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsBackpackId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsbackpackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "goodsBackpack.CGoodsExchange.userName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userPhone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userphone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "goodsBackpack.CGoodsExchange.userPhone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGoodsExchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.CGoodsExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsBackpackId = 1;
  if (this->goodsbackpackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsbackpackid(), target);
  }

  // string userName = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "goodsBackpack.CGoodsExchange.userName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string userPhone = 3;
  if (this->userphone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userphone().data(), static_cast<int>(this->_internal_userphone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "goodsBackpack.CGoodsExchange.userPhone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_userphone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.CGoodsExchange)
  return target;
}

size_t CGoodsExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.CGoodsExchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string userPhone = 3;
  if (this->userphone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userphone());
  }

  // int32 goodsBackpackId = 1;
  if (this->goodsbackpackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsbackpackid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGoodsExchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.CGoodsExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const CGoodsExchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGoodsExchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.CGoodsExchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.CGoodsExchange)
    MergeFrom(*source);
  }
}

void CGoodsExchange::MergeFrom(const CGoodsExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.CGoodsExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.userphone().size() > 0) {

    userphone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userphone_);
  }
  if (from.goodsbackpackid() != 0) {
    _internal_set_goodsbackpackid(from._internal_goodsbackpackid());
  }
}

void CGoodsExchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.CGoodsExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGoodsExchange::CopyFrom(const CGoodsExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.CGoodsExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGoodsExchange::IsInitialized() const {
  return true;
}

void CGoodsExchange::InternalSwap(CGoodsExchange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userphone_.Swap(&other->userphone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(goodsbackpackid_, other->goodsbackpackid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGoodsExchange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGoodsExchange::InitAsDefaultInstance() {
}
class SGoodsExchange::_Internal {
 public:
};

SGoodsExchange::SGoodsExchange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.SGoodsExchange)
}
SGoodsExchange::SGoodsExchange(const SGoodsExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.SGoodsExchange)
}

void SGoodsExchange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGoodsExchange_goodsBackpack_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

SGoodsExchange::~SGoodsExchange() {
  // @@protoc_insertion_point(destructor:goodsBackpack.SGoodsExchange)
  SharedDtor();
}

void SGoodsExchange::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGoodsExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGoodsExchange& SGoodsExchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGoodsExchange_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void SGoodsExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.SGoodsExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SGoodsExchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "goodsBackpack.SGoodsExchange.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGoodsExchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.SGoodsExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "goodsBackpack.SGoodsExchange.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.SGoodsExchange)
  return target;
}

size_t SGoodsExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.SGoodsExchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGoodsExchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.SGoodsExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const SGoodsExchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGoodsExchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.SGoodsExchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.SGoodsExchange)
    MergeFrom(*source);
  }
}

void SGoodsExchange::MergeFrom(const SGoodsExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.SGoodsExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SGoodsExchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.SGoodsExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGoodsExchange::CopyFrom(const SGoodsExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.SGoodsExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGoodsExchange::IsInitialized() const {
  return true;
}

void SGoodsExchange::InternalSwap(SGoodsExchange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGoodsExchange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPutRedPacket::InitAsDefaultInstance() {
  ::goodsBackpack::_CPutRedPacket_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition*>(
      ::position::BPosition::internal_default_instance());
}
class CPutRedPacket::_Internal {
 public:
  static const ::position::BPosition& position(const CPutRedPacket* msg);
};

const ::position::BPosition&
CPutRedPacket::_Internal::position(const CPutRedPacket* msg) {
  return *msg->position_;
}
void CPutRedPacket::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
CPutRedPacket::CPutRedPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.CPutRedPacket)
}
CPutRedPacket::CPutRedPacket(const CPutRedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.CPutRedPacket)
}

void CPutRedPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPutRedPacket_goodsBackpack_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(goodsid_));
}

CPutRedPacket::~CPutRedPacket() {
  // @@protoc_insertion_point(destructor:goodsBackpack.CPutRedPacket)
  SharedDtor();
}

void CPutRedPacket::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CPutRedPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPutRedPacket& CPutRedPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPutRedPacket_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void CPutRedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.CPutRedPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* CPutRedPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .position.BPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPutRedPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.CPutRedPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .position.BPosition position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.CPutRedPacket)
  return target;
}

size_t CPutRedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.CPutRedPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .position.BPosition position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPutRedPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.CPutRedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CPutRedPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPutRedPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.CPutRedPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.CPutRedPacket)
    MergeFrom(*source);
  }
}

void CPutRedPacket::MergeFrom(const CPutRedPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.CPutRedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition::MergeFrom(from._internal_position());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CPutRedPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.CPutRedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPutRedPacket::CopyFrom(const CPutRedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.CPutRedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPutRedPacket::IsInitialized() const {
  return true;
}

void CPutRedPacket::InternalSwap(CPutRedPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPutRedPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPutRedPacket::InitAsDefaultInstance() {
  ::goodsBackpack::_SPutRedPacket_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition*>(
      ::position::BPosition::internal_default_instance());
}
class SPutRedPacket::_Internal {
 public:
  static const ::position::BPosition& position(const SPutRedPacket* msg);
};

const ::position::BPosition&
SPutRedPacket::_Internal::position(const SPutRedPacket* msg) {
  return *msg->position_;
}
void SPutRedPacket::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
SPutRedPacket::SPutRedPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.SPutRedPacket)
}
SPutRedPacket::SPutRedPacket(const SPutRedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&location_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.SPutRedPacket)
}

void SPutRedPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPutRedPacket_goodsBackpack_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(uid_));
}

SPutRedPacket::~SPutRedPacket() {
  // @@protoc_insertion_point(destructor:goodsBackpack.SPutRedPacket)
  SharedDtor();
}

void SPutRedPacket::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void SPutRedPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPutRedPacket& SPutRedPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPutRedPacket_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void SPutRedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.SPutRedPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&location_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SPutRedPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .position.BPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 second = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "goodsBackpack.SPutRedPacket.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 surplus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          surplus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPutRedPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.SPutRedPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_location(), target);
  }

  // .position.BPosition position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_goodsid(), target);
  }

  // int32 second = 4;
  if (this->second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_second(), target);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "goodsBackpack.SPutRedPacket.msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msg(), target);
  }

  // int32 surplus = 6;
  if (this->surplus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_surplus(), target);
  }

  // int32 uid = 7;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.SPutRedPacket)
  return target;
}

size_t SPutRedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.SPutRedPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .position.BPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 location = 1;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 second = 4;
  if (this->second() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_second());
  }

  // int32 surplus = 6;
  if (this->surplus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_surplus());
  }

  // int32 uid = 7;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPutRedPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.SPutRedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SPutRedPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPutRedPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.SPutRedPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.SPutRedPacket)
    MergeFrom(*source);
  }
}

void SPutRedPacket::MergeFrom(const SPutRedPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.SPutRedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition::MergeFrom(from._internal_position());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.second() != 0) {
    _internal_set_second(from._internal_second());
  }
  if (from.surplus() != 0) {
    _internal_set_surplus(from._internal_surplus());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SPutRedPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.SPutRedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPutRedPacket::CopyFrom(const SPutRedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.SPutRedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPutRedPacket::IsInitialized() const {
  return true;
}

void SPutRedPacket::InternalSwap(SPutRedPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(location_, other->location_);
  swap(goodsid_, other->goodsid_);
  swap(second_, other->second_);
  swap(surplus_, other->surplus_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPutRedPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPutRedPacketList::InitAsDefaultInstance() {
}
class SPutRedPacketList::_Internal {
 public:
};

SPutRedPacketList::SPutRedPacketList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.SPutRedPacketList)
}
SPutRedPacketList::SPutRedPacketList(const SPutRedPacketList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.SPutRedPacketList)
}

void SPutRedPacketList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPutRedPacketList_goodsBackpack_2eproto.base);
}

SPutRedPacketList::~SPutRedPacketList() {
  // @@protoc_insertion_point(destructor:goodsBackpack.SPutRedPacketList)
  SharedDtor();
}

void SPutRedPacketList::SharedDtor() {
}

void SPutRedPacketList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPutRedPacketList& SPutRedPacketList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPutRedPacketList_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void SPutRedPacketList::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.SPutRedPacketList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SPutRedPacketList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .goodsBackpack.SPutRedPacket list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPutRedPacketList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.SPutRedPacketList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goodsBackpack.SPutRedPacket list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.SPutRedPacketList)
  return target;
}

size_t SPutRedPacketList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.SPutRedPacketList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .goodsBackpack.SPutRedPacket list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPutRedPacketList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.SPutRedPacketList)
  GOOGLE_DCHECK_NE(&from, this);
  const SPutRedPacketList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPutRedPacketList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.SPutRedPacketList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.SPutRedPacketList)
    MergeFrom(*source);
  }
}

void SPutRedPacketList::MergeFrom(const SPutRedPacketList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.SPutRedPacketList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SPutRedPacketList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.SPutRedPacketList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPutRedPacketList::CopyFrom(const SPutRedPacketList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.SPutRedPacketList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPutRedPacketList::IsInitialized() const {
  return true;
}

void SPutRedPacketList::InternalSwap(SPutRedPacketList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPutRedPacketList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPickRedPacket::InitAsDefaultInstance() {
}
class CPickRedPacket::_Internal {
 public:
};

CPickRedPacket::CPickRedPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.CPickRedPacket)
}
CPickRedPacket::CPickRedPacket(const CPickRedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_ = from.location_;
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.CPickRedPacket)
}

void CPickRedPacket::SharedCtor() {
  location_ = 0;
}

CPickRedPacket::~CPickRedPacket() {
  // @@protoc_insertion_point(destructor:goodsBackpack.CPickRedPacket)
  SharedDtor();
}

void CPickRedPacket::SharedDtor() {
}

void CPickRedPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPickRedPacket& CPickRedPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPickRedPacket_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void CPickRedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.CPickRedPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_ = 0;
  _internal_metadata_.Clear();
}

const char* CPickRedPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPickRedPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.CPickRedPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.CPickRedPacket)
  return target;
}

size_t CPickRedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.CPickRedPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPickRedPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.CPickRedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CPickRedPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPickRedPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.CPickRedPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.CPickRedPacket)
    MergeFrom(*source);
  }
}

void CPickRedPacket::MergeFrom(const CPickRedPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.CPickRedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
}

void CPickRedPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.CPickRedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPickRedPacket::CopyFrom(const CPickRedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.CPickRedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPickRedPacket::IsInitialized() const {
  return true;
}

void CPickRedPacket::InternalSwap(CPickRedPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPickRedPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPickRedPacket::InitAsDefaultInstance() {
}
class SPickRedPacket::_Internal {
 public:
};

SPickRedPacket::SPickRedPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goodsBackpack.SPickRedPacket)
}
SPickRedPacket::SPickRedPacket(const SPickRedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickuid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(pickuid_));
  // @@protoc_insertion_point(copy_constructor:goodsBackpack.SPickRedPacket)
}

void SPickRedPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPickRedPacket_goodsBackpack_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(pickuid_));
}

SPickRedPacket::~SPickRedPacket() {
  // @@protoc_insertion_point(destructor:goodsBackpack.SPickRedPacket)
  SharedDtor();
}

void SPickRedPacket::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SPickRedPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPickRedPacket& SPickRedPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPickRedPacket_goodsBackpack_2eproto.base);
  return *internal_default_instance();
}


void SPickRedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:goodsBackpack.SPickRedPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(pickuid_));
  _internal_metadata_.Clear();
}

const char* SPickRedPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "goodsBackpack.SPickRedPacket.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 surplus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          surplus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pickUid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pickuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPickRedPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:goodsBackpack.SPickRedPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "goodsBackpack.SPickRedPacket.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 location = 3;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_location(), target);
  }

  // int32 surplus = 4;
  if (this->surplus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_surplus(), target);
  }

  // int32 pickUid = 5;
  if (this->pickuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pickuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goodsBackpack.SPickRedPacket)
  return target;
}

size_t SPickRedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goodsBackpack.SPickRedPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 location = 3;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  // int32 surplus = 4;
  if (this->surplus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_surplus());
  }

  // int32 pickUid = 5;
  if (this->pickuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pickuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPickRedPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goodsBackpack.SPickRedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SPickRedPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPickRedPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goodsBackpack.SPickRedPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goodsBackpack.SPickRedPacket)
    MergeFrom(*source);
  }
}

void SPickRedPacket::MergeFrom(const SPickRedPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goodsBackpack.SPickRedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.surplus() != 0) {
    _internal_set_surplus(from._internal_surplus());
  }
  if (from.pickuid() != 0) {
    _internal_set_pickuid(from._internal_pickuid());
  }
}

void SPickRedPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goodsBackpack.SPickRedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPickRedPacket::CopyFrom(const SPickRedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goodsBackpack.SPickRedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPickRedPacket::IsInitialized() const {
  return true;
}

void SPickRedPacket::InternalSwap(SPickRedPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(location_, other->location_);
  swap(surplus_, other->surplus_);
  swap(pickuid_, other->pickuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPickRedPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace goodsBackpack
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::goodsBackpack::CGoodsBackpackList* Arena::CreateMaybeMessage< ::goodsBackpack::CGoodsBackpackList >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::CGoodsBackpackList >(arena);
}
template<> PROTOBUF_NOINLINE ::goodsBackpack::SGoodsBackpackList* Arena::CreateMaybeMessage< ::goodsBackpack::SGoodsBackpackList >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::SGoodsBackpackList >(arena);
}
template<> PROTOBUF_NOINLINE ::goodsBackpack::BTroveGoodsInfo* Arena::CreateMaybeMessage< ::goodsBackpack::BTroveGoodsInfo >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::BTroveGoodsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::goodsBackpack::CGoodsExchange* Arena::CreateMaybeMessage< ::goodsBackpack::CGoodsExchange >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::CGoodsExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::goodsBackpack::SGoodsExchange* Arena::CreateMaybeMessage< ::goodsBackpack::SGoodsExchange >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::SGoodsExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::goodsBackpack::CPutRedPacket* Arena::CreateMaybeMessage< ::goodsBackpack::CPutRedPacket >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::CPutRedPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::goodsBackpack::SPutRedPacket* Arena::CreateMaybeMessage< ::goodsBackpack::SPutRedPacket >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::SPutRedPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::goodsBackpack::SPutRedPacketList* Arena::CreateMaybeMessage< ::goodsBackpack::SPutRedPacketList >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::SPutRedPacketList >(arena);
}
template<> PROTOBUF_NOINLINE ::goodsBackpack::CPickRedPacket* Arena::CreateMaybeMessage< ::goodsBackpack::CPickRedPacket >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::CPickRedPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::goodsBackpack::SPickRedPacket* Arena::CreateMaybeMessage< ::goodsBackpack::SPickRedPacket >(Arena* arena) {
  return Arena::CreateInternal< ::goodsBackpack::SPickRedPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
