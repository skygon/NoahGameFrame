// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceLog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceLog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceLog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceLog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceLog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceLog_2eproto;
namespace spaceLog {
class BSpaceLogInfo;
class BSpaceLogInfoDefaultTypeInternal;
extern BSpaceLogInfoDefaultTypeInternal _BSpaceLogInfo_default_instance_;
class CSpaceLogList;
class CSpaceLogListDefaultTypeInternal;
extern CSpaceLogListDefaultTypeInternal _CSpaceLogList_default_instance_;
class SSpaceLogList;
class SSpaceLogListDefaultTypeInternal;
extern SSpaceLogListDefaultTypeInternal _SSpaceLogList_default_instance_;
}  // namespace spaceLog
PROTOBUF_NAMESPACE_OPEN
template<> ::spaceLog::BSpaceLogInfo* Arena::CreateMaybeMessage<::spaceLog::BSpaceLogInfo>(Arena*);
template<> ::spaceLog::CSpaceLogList* Arena::CreateMaybeMessage<::spaceLog::CSpaceLogList>(Arena*);
template<> ::spaceLog::SSpaceLogList* Arena::CreateMaybeMessage<::spaceLog::SSpaceLogList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spaceLog {

// ===================================================================

class CSpaceLogList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceLog.CSpaceLogList) */ {
 public:
  CSpaceLogList();
  virtual ~CSpaceLogList();

  CSpaceLogList(const CSpaceLogList& from);
  CSpaceLogList(CSpaceLogList&& from) noexcept
    : CSpaceLogList() {
    *this = ::std::move(from);
  }

  inline CSpaceLogList& operator=(const CSpaceLogList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceLogList& operator=(CSpaceLogList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceLogList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceLogList* internal_default_instance() {
    return reinterpret_cast<const CSpaceLogList*>(
               &_CSpaceLogList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSpaceLogList& a, CSpaceLogList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceLogList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceLogList* New() const final {
    return CreateMaybeMessage<CSpaceLogList>(nullptr);
  }

  CSpaceLogList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceLogList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceLogList& from);
  void MergeFrom(const CSpaceLogList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceLogList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceLog.CSpaceLogList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceLog_2eproto);
    return ::descriptor_table_spaceLog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPageFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceLog.CSpaceLogList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceLog_2eproto;
};
// -------------------------------------------------------------------

class SSpaceLogList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceLog.SSpaceLogList) */ {
 public:
  SSpaceLogList();
  virtual ~SSpaceLogList();

  SSpaceLogList(const SSpaceLogList& from);
  SSpaceLogList(SSpaceLogList&& from) noexcept
    : SSpaceLogList() {
    *this = ::std::move(from);
  }

  inline SSpaceLogList& operator=(const SSpaceLogList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceLogList& operator=(SSpaceLogList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceLogList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceLogList* internal_default_instance() {
    return reinterpret_cast<const SSpaceLogList*>(
               &_SSpaceLogList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSpaceLogList& a, SSpaceLogList& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceLogList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceLogList* New() const final {
    return CreateMaybeMessage<SSpaceLogList>(nullptr);
  }

  SSpaceLogList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceLogList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceLogList& from);
  void MergeFrom(const SSpaceLogList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceLogList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceLog.SSpaceLogList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceLog_2eproto);
    return ::descriptor_table_spaceLog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogListFieldNumber = 2,
    kTypeFieldNumber = 1,
    kTotalFieldNumber = 3,
  };
  // repeated .spaceLog.BSpaceLogInfo logList = 2;
  int loglist_size() const;
  private:
  int _internal_loglist_size() const;
  public:
  void clear_loglist();
  ::spaceLog::BSpaceLogInfo* mutable_loglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceLog::BSpaceLogInfo >*
      mutable_loglist();
  private:
  const ::spaceLog::BSpaceLogInfo& _internal_loglist(int index) const;
  ::spaceLog::BSpaceLogInfo* _internal_add_loglist();
  public:
  const ::spaceLog::BSpaceLogInfo& loglist(int index) const;
  ::spaceLog::BSpaceLogInfo* add_loglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceLog::BSpaceLogInfo >&
      loglist() const;

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 3;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceLog.SSpaceLogList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceLog::BSpaceLogInfo > loglist_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceLog_2eproto;
};
// -------------------------------------------------------------------

class BSpaceLogInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceLog.BSpaceLogInfo) */ {
 public:
  BSpaceLogInfo();
  virtual ~BSpaceLogInfo();

  BSpaceLogInfo(const BSpaceLogInfo& from);
  BSpaceLogInfo(BSpaceLogInfo&& from) noexcept
    : BSpaceLogInfo() {
    *this = ::std::move(from);
  }

  inline BSpaceLogInfo& operator=(const BSpaceLogInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BSpaceLogInfo& operator=(BSpaceLogInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BSpaceLogInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BSpaceLogInfo* internal_default_instance() {
    return reinterpret_cast<const BSpaceLogInfo*>(
               &_BSpaceLogInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BSpaceLogInfo& a, BSpaceLogInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BSpaceLogInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BSpaceLogInfo* New() const final {
    return CreateMaybeMessage<BSpaceLogInfo>(nullptr);
  }

  BSpaceLogInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BSpaceLogInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BSpaceLogInfo& from);
  void MergeFrom(const BSpaceLogInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BSpaceLogInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceLog.BSpaceLogInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceLog_2eproto);
    return ::descriptor_table_spaceLog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kHeadPicFieldNumber = 3,
    kLogFieldNumber = 6,
    kUidFieldNumber = 1,
    kTypeFieldNumber = 5,
    kTimeFieldNumber = 4,
    kFollowStatusFieldNumber = 7,
  };
  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string headPic = 3;
  void clear_headpic();
  const std::string& headpic() const;
  void set_headpic(const std::string& value);
  void set_headpic(std::string&& value);
  void set_headpic(const char* value);
  void set_headpic(const char* value, size_t size);
  std::string* mutable_headpic();
  std::string* release_headpic();
  void set_allocated_headpic(std::string* headpic);
  private:
  const std::string& _internal_headpic() const;
  void _internal_set_headpic(const std::string& value);
  std::string* _internal_mutable_headpic();
  public:

  // string log = 6;
  void clear_log();
  const std::string& log() const;
  void set_log(const std::string& value);
  void set_log(std::string&& value);
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  std::string* mutable_log();
  std::string* release_log();
  void set_allocated_log(std::string* log);
  private:
  const std::string& _internal_log() const;
  void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 followStatus = 7;
  void clear_followstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus() const;
  void set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_followstatus() const;
  void _internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceLog.BSpaceLogInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headpic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceLog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSpaceLogList

// int32 houseId = 1;
inline void CSpaceLogList::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceLogList::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceLogList::houseid() const {
  // @@protoc_insertion_point(field_get:spaceLog.CSpaceLogList.houseId)
  return _internal_houseid();
}
inline void CSpaceLogList::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CSpaceLogList::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:spaceLog.CSpaceLogList.houseId)
}

// int32 type = 2;
inline void CSpaceLogList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceLogList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceLogList::type() const {
  // @@protoc_insertion_point(field_get:spaceLog.CSpaceLogList.type)
  return _internal_type();
}
inline void CSpaceLogList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CSpaceLogList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:spaceLog.CSpaceLogList.type)
}

// int32 page = 3;
inline void CSpaceLogList::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceLogList::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceLogList::page() const {
  // @@protoc_insertion_point(field_get:spaceLog.CSpaceLogList.page)
  return _internal_page();
}
inline void CSpaceLogList::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void CSpaceLogList::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:spaceLog.CSpaceLogList.page)
}

// int32 size = 4;
inline void CSpaceLogList::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceLogList::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceLogList::size() const {
  // @@protoc_insertion_point(field_get:spaceLog.CSpaceLogList.size)
  return _internal_size();
}
inline void CSpaceLogList::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void CSpaceLogList::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:spaceLog.CSpaceLogList.size)
}

// -------------------------------------------------------------------

// SSpaceLogList

// int32 type = 1;
inline void SSpaceLogList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceLogList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceLogList::type() const {
  // @@protoc_insertion_point(field_get:spaceLog.SSpaceLogList.type)
  return _internal_type();
}
inline void SSpaceLogList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SSpaceLogList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:spaceLog.SSpaceLogList.type)
}

// repeated .spaceLog.BSpaceLogInfo logList = 2;
inline int SSpaceLogList::_internal_loglist_size() const {
  return loglist_.size();
}
inline int SSpaceLogList::loglist_size() const {
  return _internal_loglist_size();
}
inline void SSpaceLogList::clear_loglist() {
  loglist_.Clear();
}
inline ::spaceLog::BSpaceLogInfo* SSpaceLogList::mutable_loglist(int index) {
  // @@protoc_insertion_point(field_mutable:spaceLog.SSpaceLogList.logList)
  return loglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceLog::BSpaceLogInfo >*
SSpaceLogList::mutable_loglist() {
  // @@protoc_insertion_point(field_mutable_list:spaceLog.SSpaceLogList.logList)
  return &loglist_;
}
inline const ::spaceLog::BSpaceLogInfo& SSpaceLogList::_internal_loglist(int index) const {
  return loglist_.Get(index);
}
inline const ::spaceLog::BSpaceLogInfo& SSpaceLogList::loglist(int index) const {
  // @@protoc_insertion_point(field_get:spaceLog.SSpaceLogList.logList)
  return _internal_loglist(index);
}
inline ::spaceLog::BSpaceLogInfo* SSpaceLogList::_internal_add_loglist() {
  return loglist_.Add();
}
inline ::spaceLog::BSpaceLogInfo* SSpaceLogList::add_loglist() {
  // @@protoc_insertion_point(field_add:spaceLog.SSpaceLogList.logList)
  return _internal_add_loglist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceLog::BSpaceLogInfo >&
SSpaceLogList::loglist() const {
  // @@protoc_insertion_point(field_list:spaceLog.SSpaceLogList.logList)
  return loglist_;
}

// int32 total = 3;
inline void SSpaceLogList::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceLogList::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceLogList::total() const {
  // @@protoc_insertion_point(field_get:spaceLog.SSpaceLogList.total)
  return _internal_total();
}
inline void SSpaceLogList::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SSpaceLogList::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:spaceLog.SSpaceLogList.total)
}

// -------------------------------------------------------------------

// BSpaceLogInfo

// int32 uid = 1;
inline void BSpaceLogInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceLogInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceLogInfo::uid() const {
  // @@protoc_insertion_point(field_get:spaceLog.BSpaceLogInfo.uid)
  return _internal_uid();
}
inline void BSpaceLogInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BSpaceLogInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:spaceLog.BSpaceLogInfo.uid)
}

// string nick = 2;
inline void BSpaceLogInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BSpaceLogInfo::nick() const {
  // @@protoc_insertion_point(field_get:spaceLog.BSpaceLogInfo.nick)
  return _internal_nick();
}
inline void BSpaceLogInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:spaceLog.BSpaceLogInfo.nick)
}
inline std::string* BSpaceLogInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:spaceLog.BSpaceLogInfo.nick)
  return _internal_mutable_nick();
}
inline const std::string& BSpaceLogInfo::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void BSpaceLogInfo::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BSpaceLogInfo::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceLog.BSpaceLogInfo.nick)
}
inline void BSpaceLogInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceLog.BSpaceLogInfo.nick)
}
inline void BSpaceLogInfo::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceLog.BSpaceLogInfo.nick)
}
inline std::string* BSpaceLogInfo::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BSpaceLogInfo::release_nick() {
  // @@protoc_insertion_point(field_release:spaceLog.BSpaceLogInfo.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BSpaceLogInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:spaceLog.BSpaceLogInfo.nick)
}

// string headPic = 3;
inline void BSpaceLogInfo::clear_headpic() {
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BSpaceLogInfo::headpic() const {
  // @@protoc_insertion_point(field_get:spaceLog.BSpaceLogInfo.headPic)
  return _internal_headpic();
}
inline void BSpaceLogInfo::set_headpic(const std::string& value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:spaceLog.BSpaceLogInfo.headPic)
}
inline std::string* BSpaceLogInfo::mutable_headpic() {
  // @@protoc_insertion_point(field_mutable:spaceLog.BSpaceLogInfo.headPic)
  return _internal_mutable_headpic();
}
inline const std::string& BSpaceLogInfo::_internal_headpic() const {
  return headpic_.GetNoArena();
}
inline void BSpaceLogInfo::_internal_set_headpic(const std::string& value) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BSpaceLogInfo::set_headpic(std::string&& value) {
  
  headpic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceLog.BSpaceLogInfo.headPic)
}
inline void BSpaceLogInfo::set_headpic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceLog.BSpaceLogInfo.headPic)
}
inline void BSpaceLogInfo::set_headpic(const char* value, size_t size) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceLog.BSpaceLogInfo.headPic)
}
inline std::string* BSpaceLogInfo::_internal_mutable_headpic() {
  
  return headpic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BSpaceLogInfo::release_headpic() {
  // @@protoc_insertion_point(field_release:spaceLog.BSpaceLogInfo.headPic)
  
  return headpic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BSpaceLogInfo::set_allocated_headpic(std::string* headpic) {
  if (headpic != nullptr) {
    
  } else {
    
  }
  headpic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headpic);
  // @@protoc_insertion_point(field_set_allocated:spaceLog.BSpaceLogInfo.headPic)
}

// int64 time = 4;
inline void BSpaceLogInfo::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BSpaceLogInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BSpaceLogInfo::time() const {
  // @@protoc_insertion_point(field_get:spaceLog.BSpaceLogInfo.time)
  return _internal_time();
}
inline void BSpaceLogInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void BSpaceLogInfo::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:spaceLog.BSpaceLogInfo.time)
}

// int32 type = 5;
inline void BSpaceLogInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceLogInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceLogInfo::type() const {
  // @@protoc_insertion_point(field_get:spaceLog.BSpaceLogInfo.type)
  return _internal_type();
}
inline void BSpaceLogInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void BSpaceLogInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:spaceLog.BSpaceLogInfo.type)
}

// string log = 6;
inline void BSpaceLogInfo::clear_log() {
  log_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BSpaceLogInfo::log() const {
  // @@protoc_insertion_point(field_get:spaceLog.BSpaceLogInfo.log)
  return _internal_log();
}
inline void BSpaceLogInfo::set_log(const std::string& value) {
  _internal_set_log(value);
  // @@protoc_insertion_point(field_set:spaceLog.BSpaceLogInfo.log)
}
inline std::string* BSpaceLogInfo::mutable_log() {
  // @@protoc_insertion_point(field_mutable:spaceLog.BSpaceLogInfo.log)
  return _internal_mutable_log();
}
inline const std::string& BSpaceLogInfo::_internal_log() const {
  return log_.GetNoArena();
}
inline void BSpaceLogInfo::_internal_set_log(const std::string& value) {
  
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BSpaceLogInfo::set_log(std::string&& value) {
  
  log_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceLog.BSpaceLogInfo.log)
}
inline void BSpaceLogInfo::set_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceLog.BSpaceLogInfo.log)
}
inline void BSpaceLogInfo::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceLog.BSpaceLogInfo.log)
}
inline std::string* BSpaceLogInfo::_internal_mutable_log() {
  
  return log_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BSpaceLogInfo::release_log() {
  // @@protoc_insertion_point(field_release:spaceLog.BSpaceLogInfo.log)
  
  return log_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BSpaceLogInfo::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:spaceLog.BSpaceLogInfo.log)
}

// int32 followStatus = 7;
inline void BSpaceLogInfo::clear_followstatus() {
  followstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceLogInfo::_internal_followstatus() const {
  return followstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceLogInfo::followstatus() const {
  // @@protoc_insertion_point(field_get:spaceLog.BSpaceLogInfo.followStatus)
  return _internal_followstatus();
}
inline void BSpaceLogInfo::_internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  followstatus_ = value;
}
inline void BSpaceLogInfo::set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_followstatus(value);
  // @@protoc_insertion_point(field_set:spaceLog.BSpaceLogInfo.followStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spaceLog

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceLog_2eproto
