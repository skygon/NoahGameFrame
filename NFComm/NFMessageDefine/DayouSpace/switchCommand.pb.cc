// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: switchCommand.proto

#include "switchCommand.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_switchCommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSwitchCommandStatus_switchCommand_2eproto;
namespace pb {
class CSwitchCommandStatusListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSwitchCommandStatusList> _instance;
} _CSwitchCommandStatusList_default_instance_;
class SSwitchCommandStatusListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSwitchCommandStatusList> _instance;
} _SSwitchCommandStatusList_default_instance_;
class SSwitchCommandStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSwitchCommandStatus> _instance;
} _SSwitchCommandStatus_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_CSwitchCommandStatusList_switchCommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CSwitchCommandStatusList_default_instance_;
    new (ptr) ::pb::CSwitchCommandStatusList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CSwitchCommandStatusList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSwitchCommandStatusList_switchCommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSwitchCommandStatusList_switchCommand_2eproto}, {}};

static void InitDefaultsscc_info_SSwitchCommandStatus_switchCommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SSwitchCommandStatus_default_instance_;
    new (ptr) ::pb::SSwitchCommandStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SSwitchCommandStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSwitchCommandStatus_switchCommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSwitchCommandStatus_switchCommand_2eproto}, {}};

static void InitDefaultsscc_info_SSwitchCommandStatusList_switchCommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SSwitchCommandStatusList_default_instance_;
    new (ptr) ::pb::SSwitchCommandStatusList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SSwitchCommandStatusList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSwitchCommandStatusList_switchCommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSwitchCommandStatusList_switchCommand_2eproto}, {
      &scc_info_SSwitchCommandStatus_switchCommand_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_switchCommand_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_switchCommand_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_switchCommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_switchCommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CSwitchCommandStatusList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CSwitchCommandStatusList, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SSwitchCommandStatusList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SSwitchCommandStatusList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SSwitchCommandStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SSwitchCommandStatus, command_),
  PROTOBUF_FIELD_OFFSET(::pb::SSwitchCommandStatus, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::CSwitchCommandStatusList)},
  { 6, -1, sizeof(::pb::SSwitchCommandStatusList)},
  { 12, -1, sizeof(::pb::SSwitchCommandStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CSwitchCommandStatusList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SSwitchCommandStatusList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SSwitchCommandStatus_default_instance_),
};

const char descriptor_table_protodef_switchCommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023switchCommand.proto\022\002pb\"+\n\030CSwitchComm"
  "andStatusList\022\017\n\007command\030\001 \003(\t\"B\n\030SSwitc"
  "hCommandStatusList\022&\n\004list\030\001 \003(\0132\030.pb.SS"
  "witchCommandStatus\":\n\024SSwitchCommandStat"
  "us\022\017\n\007command\030\001 \001(\t\022\021\n\ttimeStamp\030\002 \001(\005B\014"
  "Z\005./;pb\252\002\002Pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_switchCommand_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_switchCommand_2eproto_sccs[3] = {
  &scc_info_CSwitchCommandStatusList_switchCommand_2eproto.base,
  &scc_info_SSwitchCommandStatus_switchCommand_2eproto.base,
  &scc_info_SSwitchCommandStatusList_switchCommand_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_switchCommand_2eproto_once;
static bool descriptor_table_switchCommand_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_switchCommand_2eproto = {
  &descriptor_table_switchCommand_2eproto_initialized, descriptor_table_protodef_switchCommand_2eproto, "switchCommand.proto", 220,
  &descriptor_table_switchCommand_2eproto_once, descriptor_table_switchCommand_2eproto_sccs, descriptor_table_switchCommand_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_switchCommand_2eproto::offsets,
  file_level_metadata_switchCommand_2eproto, 3, file_level_enum_descriptors_switchCommand_2eproto, file_level_service_descriptors_switchCommand_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_switchCommand_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_switchCommand_2eproto), true);
namespace pb {

// ===================================================================

void CSwitchCommandStatusList::InitAsDefaultInstance() {
}
class CSwitchCommandStatusList::_Internal {
 public:
};

CSwitchCommandStatusList::CSwitchCommandStatusList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CSwitchCommandStatusList)
}
CSwitchCommandStatusList::CSwitchCommandStatusList(const CSwitchCommandStatusList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      command_(from.command_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CSwitchCommandStatusList)
}

void CSwitchCommandStatusList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSwitchCommandStatusList_switchCommand_2eproto.base);
}

CSwitchCommandStatusList::~CSwitchCommandStatusList() {
  // @@protoc_insertion_point(destructor:pb.CSwitchCommandStatusList)
  SharedDtor();
}

void CSwitchCommandStatusList::SharedDtor() {
}

void CSwitchCommandStatusList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSwitchCommandStatusList& CSwitchCommandStatusList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSwitchCommandStatusList_switchCommand_2eproto.base);
  return *internal_default_instance();
}


void CSwitchCommandStatusList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CSwitchCommandStatusList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.Clear();
  _internal_metadata_.Clear();
}

const char* CSwitchCommandStatusList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_command();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.CSwitchCommandStatusList.command"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSwitchCommandStatusList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CSwitchCommandStatusList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command = 1;
  for (int i = 0, n = this->_internal_command_size(); i < n; i++) {
    const auto& s = this->_internal_command(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.CSwitchCommandStatusList.command");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CSwitchCommandStatusList)
  return target;
}

size_t CSwitchCommandStatusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CSwitchCommandStatusList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string command = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(command_.size());
  for (int i = 0, n = command_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      command_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSwitchCommandStatusList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CSwitchCommandStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSwitchCommandStatusList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSwitchCommandStatusList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CSwitchCommandStatusList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CSwitchCommandStatusList)
    MergeFrom(*source);
  }
}

void CSwitchCommandStatusList::MergeFrom(const CSwitchCommandStatusList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CSwitchCommandStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_.MergeFrom(from.command_);
}

void CSwitchCommandStatusList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CSwitchCommandStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSwitchCommandStatusList::CopyFrom(const CSwitchCommandStatusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CSwitchCommandStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSwitchCommandStatusList::IsInitialized() const {
  return true;
}

void CSwitchCommandStatusList::InternalSwap(CSwitchCommandStatusList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  command_.InternalSwap(&other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSwitchCommandStatusList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSwitchCommandStatusList::InitAsDefaultInstance() {
}
class SSwitchCommandStatusList::_Internal {
 public:
};

SSwitchCommandStatusList::SSwitchCommandStatusList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SSwitchCommandStatusList)
}
SSwitchCommandStatusList::SSwitchCommandStatusList(const SSwitchCommandStatusList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.SSwitchCommandStatusList)
}

void SSwitchCommandStatusList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSwitchCommandStatusList_switchCommand_2eproto.base);
}

SSwitchCommandStatusList::~SSwitchCommandStatusList() {
  // @@protoc_insertion_point(destructor:pb.SSwitchCommandStatusList)
  SharedDtor();
}

void SSwitchCommandStatusList::SharedDtor() {
}

void SSwitchCommandStatusList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSwitchCommandStatusList& SSwitchCommandStatusList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSwitchCommandStatusList_switchCommand_2eproto.base);
  return *internal_default_instance();
}


void SSwitchCommandStatusList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SSwitchCommandStatusList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SSwitchCommandStatusList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.SSwitchCommandStatus list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSwitchCommandStatusList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SSwitchCommandStatusList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SSwitchCommandStatus list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SSwitchCommandStatusList)
  return target;
}

size_t SSwitchCommandStatusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SSwitchCommandStatusList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.SSwitchCommandStatus list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSwitchCommandStatusList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SSwitchCommandStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  const SSwitchCommandStatusList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSwitchCommandStatusList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SSwitchCommandStatusList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SSwitchCommandStatusList)
    MergeFrom(*source);
  }
}

void SSwitchCommandStatusList::MergeFrom(const SSwitchCommandStatusList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SSwitchCommandStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SSwitchCommandStatusList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SSwitchCommandStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSwitchCommandStatusList::CopyFrom(const SSwitchCommandStatusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SSwitchCommandStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSwitchCommandStatusList::IsInitialized() const {
  return true;
}

void SSwitchCommandStatusList::InternalSwap(SSwitchCommandStatusList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSwitchCommandStatusList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSwitchCommandStatus::InitAsDefaultInstance() {
}
class SSwitchCommandStatus::_Internal {
 public:
};

SSwitchCommandStatus::SSwitchCommandStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SSwitchCommandStatus)
}
SSwitchCommandStatus::SSwitchCommandStatus(const SSwitchCommandStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:pb.SSwitchCommandStatus)
}

void SSwitchCommandStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSwitchCommandStatus_switchCommand_2eproto.base);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

SSwitchCommandStatus::~SSwitchCommandStatus() {
  // @@protoc_insertion_point(destructor:pb.SSwitchCommandStatus)
  SharedDtor();
}

void SSwitchCommandStatus::SharedDtor() {
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSwitchCommandStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSwitchCommandStatus& SSwitchCommandStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSwitchCommandStatus_switchCommand_2eproto.base);
  return *internal_default_instance();
}


void SSwitchCommandStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SSwitchCommandStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  _internal_metadata_.Clear();
}

const char* SSwitchCommandStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SSwitchCommandStatus.command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSwitchCommandStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SSwitchCommandStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSwitchCommandStatus.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  // int32 timeStamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SSwitchCommandStatus)
  return target;
}

size_t SSwitchCommandStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SSwitchCommandStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 1;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // int32 timeStamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSwitchCommandStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SSwitchCommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SSwitchCommandStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSwitchCommandStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SSwitchCommandStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SSwitchCommandStatus)
    MergeFrom(*source);
  }
}

void SSwitchCommandStatus::MergeFrom(const SSwitchCommandStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SSwitchCommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void SSwitchCommandStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SSwitchCommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSwitchCommandStatus::CopyFrom(const SSwitchCommandStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SSwitchCommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSwitchCommandStatus::IsInitialized() const {
  return true;
}

void SSwitchCommandStatus::InternalSwap(SSwitchCommandStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSwitchCommandStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::CSwitchCommandStatusList* Arena::CreateMaybeMessage< ::pb::CSwitchCommandStatusList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CSwitchCommandStatusList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SSwitchCommandStatusList* Arena::CreateMaybeMessage< ::pb::SSwitchCommandStatusList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SSwitchCommandStatusList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SSwitchCommandStatus* Arena::CreateMaybeMessage< ::pb::SSwitchCommandStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SSwitchCommandStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
