// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shopping.proto

#include "shopping.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shopping_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BShopping_shopping_2eproto;
namespace shopping {
class CShoppingListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CShoppingList> _instance;
} _CShoppingList_default_instance_;
class SShoppingListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SShoppingList> _instance;
} _SShoppingList_default_instance_;
class BShoppingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BShopping> _instance;
} _BShopping_default_instance_;
class CBuyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CBuy> _instance;
} _CBuy_default_instance_;
class SBuyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBuy> _instance;
} _SBuy_default_instance_;
class CShoppingInfoByShopIdGoodsIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CShoppingInfoByShopIdGoodsId> _instance;
} _CShoppingInfoByShopIdGoodsId_default_instance_;
class SShoppingInfoByShopIdGoodsIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SShoppingInfoByShopIdGoodsId> _instance;
} _SShoppingInfoByShopIdGoodsId_default_instance_;
class CShoppingUsersLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CShoppingUsersLimit> _instance;
} _CShoppingUsersLimit_default_instance_;
class SShoppingUsersLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SShoppingUsersLimit> _instance;
} _SShoppingUsersLimit_default_instance_;
}  // namespace shopping
static void InitDefaultsscc_info_BShopping_shopping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shopping::_BShopping_default_instance_;
    new (ptr) ::shopping::BShopping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shopping::BShopping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BShopping_shopping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BShopping_shopping_2eproto}, {}};

static void InitDefaultsscc_info_CBuy_shopping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shopping::_CBuy_default_instance_;
    new (ptr) ::shopping::CBuy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shopping::CBuy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CBuy_shopping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CBuy_shopping_2eproto}, {}};

static void InitDefaultsscc_info_CShoppingInfoByShopIdGoodsId_shopping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shopping::_CShoppingInfoByShopIdGoodsId_default_instance_;
    new (ptr) ::shopping::CShoppingInfoByShopIdGoodsId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shopping::CShoppingInfoByShopIdGoodsId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CShoppingInfoByShopIdGoodsId_shopping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CShoppingInfoByShopIdGoodsId_shopping_2eproto}, {}};

static void InitDefaultsscc_info_CShoppingList_shopping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shopping::_CShoppingList_default_instance_;
    new (ptr) ::shopping::CShoppingList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shopping::CShoppingList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CShoppingList_shopping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CShoppingList_shopping_2eproto}, {}};

static void InitDefaultsscc_info_CShoppingUsersLimit_shopping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shopping::_CShoppingUsersLimit_default_instance_;
    new (ptr) ::shopping::CShoppingUsersLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shopping::CShoppingUsersLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CShoppingUsersLimit_shopping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CShoppingUsersLimit_shopping_2eproto}, {}};

static void InitDefaultsscc_info_SBuy_shopping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shopping::_SBuy_default_instance_;
    new (ptr) ::shopping::SBuy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shopping::SBuy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SBuy_shopping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SBuy_shopping_2eproto}, {}};

static void InitDefaultsscc_info_SShoppingInfoByShopIdGoodsId_shopping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shopping::_SShoppingInfoByShopIdGoodsId_default_instance_;
    new (ptr) ::shopping::SShoppingInfoByShopIdGoodsId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shopping::SShoppingInfoByShopIdGoodsId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SShoppingInfoByShopIdGoodsId_shopping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SShoppingInfoByShopIdGoodsId_shopping_2eproto}, {
      &scc_info_BShopping_shopping_2eproto.base,}};

static void InitDefaultsscc_info_SShoppingList_shopping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shopping::_SShoppingList_default_instance_;
    new (ptr) ::shopping::SShoppingList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shopping::SShoppingList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SShoppingList_shopping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SShoppingList_shopping_2eproto}, {
      &scc_info_BShopping_shopping_2eproto.base,}};

static void InitDefaultsscc_info_SShoppingUsersLimit_shopping_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shopping::_SShoppingUsersLimit_default_instance_;
    new (ptr) ::shopping::SShoppingUsersLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shopping::SShoppingUsersLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SShoppingUsersLimit_shopping_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SShoppingUsersLimit_shopping_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shopping_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_shopping_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shopping_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_shopping_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingList, shoptype_),
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingList, shopid_),
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingList, curpage_),
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingList, pagelimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingList, shopping_),
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingList, total_),
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingList, curpage_),
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingList, pagelimit_),
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingList, shopid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, id_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, goodsid_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, cointype_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, price_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, originalprice_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, name_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, cover_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, introduce_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, creaternick_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, shopid_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, tag_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, reserve_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, limit_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, status_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, resource_),
  PROTOBUF_FIELD_OFFSET(::shopping::BShopping, avatarid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shopping::CBuy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shopping::CBuy, shoppingid_),
  PROTOBUF_FIELD_OFFSET(::shopping::CBuy, quantity_),
  PROTOBUF_FIELD_OFFSET(::shopping::CBuy, beneficiaryuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shopping::SBuy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shopping::SBuy, status_),
  PROTOBUF_FIELD_OFFSET(::shopping::SBuy, msg_),
  PROTOBUF_FIELD_OFFSET(::shopping::SBuy, shopid_),
  PROTOBUF_FIELD_OFFSET(::shopping::SBuy, buyuid_),
  PROTOBUF_FIELD_OFFSET(::shopping::SBuy, beneficiaryuid_),
  PROTOBUF_FIELD_OFFSET(::shopping::SBuy, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingInfoByShopIdGoodsId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingInfoByShopIdGoodsId, shopid_),
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingInfoByShopIdGoodsId, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingInfoByShopIdGoodsId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingInfoByShopIdGoodsId, shopping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingUsersLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shopping::CShoppingUsersLimit, shoppingid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingUsersLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shopping::SShoppingUsersLimit, limit_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::shopping::CShoppingList)},
  { 9, -1, sizeof(::shopping::SShoppingList)},
  { 19, -1, sizeof(::shopping::BShopping)},
  { 40, -1, sizeof(::shopping::CBuy)},
  { 48, -1, sizeof(::shopping::SBuy)},
  { 59, -1, sizeof(::shopping::CShoppingInfoByShopIdGoodsId)},
  { 66, -1, sizeof(::shopping::SShoppingInfoByShopIdGoodsId)},
  { 72, -1, sizeof(::shopping::CShoppingUsersLimit)},
  { 78, -1, sizeof(::shopping::SShoppingUsersLimit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shopping::_CShoppingList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shopping::_SShoppingList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shopping::_BShopping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shopping::_CBuy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shopping::_SBuy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shopping::_CShoppingInfoByShopIdGoodsId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shopping::_SShoppingInfoByShopIdGoodsId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shopping::_CShoppingUsersLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shopping::_SShoppingUsersLimit_default_instance_),
};

const char descriptor_table_protodef_shopping_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016shopping.proto\022\010shopping\"U\n\rCShoppingL"
  "ist\022\020\n\010shopType\030\001 \001(\t\022\016\n\006shopId\030\002 \001(\005\022\017\n"
  "\007curPage\030\003 \001(\005\022\021\n\tpageLimit\030\004 \001(\005\"y\n\rSSh"
  "oppingList\022%\n\010shopping\030\001 \003(\0132\023.shopping."
  "BShopping\022\r\n\005total\030\002 \001(\005\022\017\n\007curPage\030\003 \001("
  "\005\022\021\n\tpageLimit\030\004 \001(\005\022\016\n\006shopId\030\005 \001(\005\"\226\002\n"
  "\tBShopping\022\n\n\002id\030\001 \001(\005\022\017\n\007goodsId\030\002 \001(\005\022"
  "\020\n\010coinType\030\003 \001(\005\022\r\n\005price\030\004 \001(\005\022\025\n\rorig"
  "inalPrice\030\005 \001(\005\022\014\n\004name\030\006 \001(\t\022\r\n\005cover\030\007"
  " \001(\t\022\021\n\tintroduce\030\010 \001(\t\022\023\n\013createrNick\030\t"
  " \001(\t\022\016\n\006shopId\030\n \001(\005\022\013\n\003tag\030\013 \001(\005\022\017\n\007res"
  "erve\030\014 \001(\005\022\r\n\005limit\030\r \001(\005\022\016\n\006status\030\016 \001("
  "\005\022\020\n\010resource\030\017 \001(\t\022\020\n\010avatarId\030\020 \001(\005\"D\n"
  "\004CBuy\022\022\n\nshoppingId\030\001 \001(\005\022\020\n\010quantity\030\002 "
  "\001(\005\022\026\n\016beneficiaryUid\030\003 \001(\005\"l\n\004SBuy\022\016\n\006s"
  "tatus\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\016\n\006shopId\030\003 \001(\005"
  "\022\016\n\006buyUid\030\004 \001(\005\022\026\n\016beneficiaryUid\030\005 \001(\005"
  "\022\017\n\007goodsId\030\006 \001(\005\"\?\n\034CShoppingInfoByShop"
  "IdGoodsId\022\016\n\006shopId\030\001 \001(\005\022\017\n\007goodsId\030\002 \001"
  "(\005\"E\n\034SShoppingInfoByShopIdGoodsId\022%\n\010sh"
  "opping\030\001 \001(\0132\023.shopping.BShopping\")\n\023CSh"
  "oppingUsersLimit\022\022\n\nshoppingId\030\001 \001(\005\"$\n\023"
  "SShoppingUsersLimit\022\r\n\005limit\030\001 \001(\005B$\n\030co"
  "m.dayou.space.protobufB\010Shoppingb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_shopping_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_shopping_2eproto_sccs[9] = {
  &scc_info_BShopping_shopping_2eproto.base,
  &scc_info_CBuy_shopping_2eproto.base,
  &scc_info_CShoppingInfoByShopIdGoodsId_shopping_2eproto.base,
  &scc_info_CShoppingList_shopping_2eproto.base,
  &scc_info_CShoppingUsersLimit_shopping_2eproto.base,
  &scc_info_SBuy_shopping_2eproto.base,
  &scc_info_SShoppingInfoByShopIdGoodsId_shopping_2eproto.base,
  &scc_info_SShoppingList_shopping_2eproto.base,
  &scc_info_SShoppingUsersLimit_shopping_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shopping_2eproto_once;
static bool descriptor_table_shopping_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shopping_2eproto = {
  &descriptor_table_shopping_2eproto_initialized, descriptor_table_protodef_shopping_2eproto, "shopping.proto", 960,
  &descriptor_table_shopping_2eproto_once, descriptor_table_shopping_2eproto_sccs, descriptor_table_shopping_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_shopping_2eproto::offsets,
  file_level_metadata_shopping_2eproto, 9, file_level_enum_descriptors_shopping_2eproto, file_level_service_descriptors_shopping_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_shopping_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_shopping_2eproto), true);
namespace shopping {

// ===================================================================

void CShoppingList::InitAsDefaultInstance() {
}
class CShoppingList::_Internal {
 public:
};

CShoppingList::CShoppingList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shopping.CShoppingList)
}
CShoppingList::CShoppingList(const CShoppingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shoptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shoptype().empty()) {
    shoptype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shoptype_);
  }
  ::memcpy(&shopid_, &from.shopid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagelimit_) -
    reinterpret_cast<char*>(&shopid_)) + sizeof(pagelimit_));
  // @@protoc_insertion_point(copy_constructor:shopping.CShoppingList)
}

void CShoppingList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CShoppingList_shopping_2eproto.base);
  shoptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shopid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&shopid_)) + sizeof(pagelimit_));
}

CShoppingList::~CShoppingList() {
  // @@protoc_insertion_point(destructor:shopping.CShoppingList)
  SharedDtor();
}

void CShoppingList::SharedDtor() {
  shoptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CShoppingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CShoppingList& CShoppingList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CShoppingList_shopping_2eproto.base);
  return *internal_default_instance();
}


void CShoppingList::Clear() {
// @@protoc_insertion_point(message_clear_start:shopping.CShoppingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shoptype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shopid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&shopid_)) + sizeof(pagelimit_));
  _internal_metadata_.Clear();
}

const char* CShoppingList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string shopType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_shoptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shopping.CShoppingList.shopType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shopId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          shopid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curPage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CShoppingList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shopping.CShoppingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string shopType = 1;
  if (this->shoptype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shoptype().data(), static_cast<int>(this->_internal_shoptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shopping.CShoppingList.shopType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_shoptype(), target);
  }

  // int32 shopId = 2;
  if (this->shopid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_shopid(), target);
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pagelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shopping.CShoppingList)
  return target;
}

size_t CShoppingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shopping.CShoppingList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string shopType = 1;
  if (this->shoptype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shoptype());
  }

  // int32 shopId = 2;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shopid());
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CShoppingList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shopping.CShoppingList)
  GOOGLE_DCHECK_NE(&from, this);
  const CShoppingList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CShoppingList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shopping.CShoppingList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shopping.CShoppingList)
    MergeFrom(*source);
  }
}

void CShoppingList::MergeFrom(const CShoppingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shopping.CShoppingList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shoptype().size() > 0) {

    shoptype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shoptype_);
  }
  if (from.shopid() != 0) {
    _internal_set_shopid(from._internal_shopid());
  }
  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
}

void CShoppingList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shopping.CShoppingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShoppingList::CopyFrom(const CShoppingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shopping.CShoppingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShoppingList::IsInitialized() const {
  return true;
}

void CShoppingList::InternalSwap(CShoppingList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shoptype_.Swap(&other->shoptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shopid_, other->shopid_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CShoppingList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SShoppingList::InitAsDefaultInstance() {
}
class SShoppingList::_Internal {
 public:
};

SShoppingList::SShoppingList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shopping.SShoppingList)
}
SShoppingList::SShoppingList(const SShoppingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shopping_(from.shopping_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&shopid_) -
    reinterpret_cast<char*>(&total_)) + sizeof(shopid_));
  // @@protoc_insertion_point(copy_constructor:shopping.SShoppingList)
}

void SShoppingList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SShoppingList_shopping_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shopid_) -
      reinterpret_cast<char*>(&total_)) + sizeof(shopid_));
}

SShoppingList::~SShoppingList() {
  // @@protoc_insertion_point(destructor:shopping.SShoppingList)
  SharedDtor();
}

void SShoppingList::SharedDtor() {
}

void SShoppingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SShoppingList& SShoppingList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SShoppingList_shopping_2eproto.base);
  return *internal_default_instance();
}


void SShoppingList::Clear() {
// @@protoc_insertion_point(message_clear_start:shopping.SShoppingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shopping_.Clear();
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shopid_) -
      reinterpret_cast<char*>(&total_)) + sizeof(shopid_));
  _internal_metadata_.Clear();
}

const char* SShoppingList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .shopping.BShopping shopping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shopping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curPage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shopId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          shopid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SShoppingList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shopping.SShoppingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shopping.BShopping shopping = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shopping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shopping(i), target, stream);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pagelimit(), target);
  }

  // int32 shopId = 5;
  if (this->shopid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_shopid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shopping.SShoppingList)
  return target;
}

size_t SShoppingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shopping.SShoppingList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shopping.BShopping shopping = 1;
  total_size += 1UL * this->_internal_shopping_size();
  for (const auto& msg : this->shopping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  // int32 shopId = 5;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shopid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SShoppingList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shopping.SShoppingList)
  GOOGLE_DCHECK_NE(&from, this);
  const SShoppingList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SShoppingList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shopping.SShoppingList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shopping.SShoppingList)
    MergeFrom(*source);
  }
}

void SShoppingList::MergeFrom(const SShoppingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shopping.SShoppingList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shopping_.MergeFrom(from.shopping_);
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
  if (from.shopid() != 0) {
    _internal_set_shopid(from._internal_shopid());
  }
}

void SShoppingList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shopping.SShoppingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SShoppingList::CopyFrom(const SShoppingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shopping.SShoppingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SShoppingList::IsInitialized() const {
  return true;
}

void SShoppingList::InternalSwap(SShoppingList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shopping_.InternalSwap(&other->shopping_);
  swap(total_, other->total_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
  swap(shopid_, other->shopid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SShoppingList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BShopping::InitAsDefaultInstance() {
}
class BShopping::_Internal {
 public:
};

BShopping::BShopping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shopping.BShopping)
}
BShopping::BShopping(const BShopping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  introduce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_introduce().empty()) {
    introduce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.introduce_);
  }
  creaternick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creaternick().empty()) {
    creaternick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creaternick_);
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatarid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(avatarid_));
  // @@protoc_insertion_point(copy_constructor:shopping.BShopping)
}

void BShopping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BShopping_shopping_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  introduce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creaternick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(avatarid_));
}

BShopping::~BShopping() {
  // @@protoc_insertion_point(destructor:shopping.BShopping)
  SharedDtor();
}

void BShopping::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  introduce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creaternick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BShopping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BShopping& BShopping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BShopping_shopping_2eproto.base);
  return *internal_default_instance();
}


void BShopping::Clear() {
// @@protoc_insertion_point(message_clear_start:shopping.BShopping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  introduce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creaternick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(avatarid_));
  _internal_metadata_.Clear();
}

const char* BShopping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coinType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cointype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originalPrice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          originalprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shopping.BShopping.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shopping.BShopping.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string introduce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_introduce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shopping.BShopping.introduce"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createrNick = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_creaternick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shopping.BShopping.createrNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shopId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          shopid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reserve = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          reserve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shopping.BShopping.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BShopping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shopping.BShopping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_goodsid(), target);
  }

  // int32 coinType = 3;
  if (this->cointype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cointype(), target);
  }

  // int32 price = 4;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_price(), target);
  }

  // int32 originalPrice = 5;
  if (this->originalprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_originalprice(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shopping.BShopping.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // string cover = 7;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shopping.BShopping.cover");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_cover(), target);
  }

  // string introduce = 8;
  if (this->introduce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_introduce().data(), static_cast<int>(this->_internal_introduce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shopping.BShopping.introduce");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_introduce(), target);
  }

  // string createrNick = 9;
  if (this->creaternick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creaternick().data(), static_cast<int>(this->_internal_creaternick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shopping.BShopping.createrNick");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_creaternick(), target);
  }

  // int32 shopId = 10;
  if (this->shopid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_shopid(), target);
  }

  // int32 tag = 11;
  if (this->tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_tag(), target);
  }

  // int32 reserve = 12;
  if (this->reserve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_reserve(), target);
  }

  // int32 limit = 13;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_limit(), target);
  }

  // int32 status = 14;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_status(), target);
  }

  // string resource = 15;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shopping.BShopping.resource");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_resource(), target);
  }

  // int32 avatarId = 16;
  if (this->avatarid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_avatarid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shopping.BShopping)
  return target;
}

size_t BShopping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shopping.BShopping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cover = 7;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // string introduce = 8;
  if (this->introduce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_introduce());
  }

  // string createrNick = 9;
  if (this->creaternick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creaternick());
  }

  // string resource = 15;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 coinType = 3;
  if (this->cointype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cointype());
  }

  // int32 price = 4;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // int32 originalPrice = 5;
  if (this->originalprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originalprice());
  }

  // int32 shopId = 10;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shopid());
  }

  // int32 tag = 11;
  if (this->tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tag());
  }

  // int32 reserve = 12;
  if (this->reserve() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reserve());
  }

  // int32 limit = 13;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  // int32 status = 14;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 avatarId = 16;
  if (this->avatarid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BShopping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shopping.BShopping)
  GOOGLE_DCHECK_NE(&from, this);
  const BShopping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BShopping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shopping.BShopping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shopping.BShopping)
    MergeFrom(*source);
  }
}

void BShopping::MergeFrom(const BShopping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shopping.BShopping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.introduce().size() > 0) {

    introduce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.introduce_);
  }
  if (from.creaternick().size() > 0) {

    creaternick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creaternick_);
  }
  if (from.resource().size() > 0) {

    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.cointype() != 0) {
    _internal_set_cointype(from._internal_cointype());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.originalprice() != 0) {
    _internal_set_originalprice(from._internal_originalprice());
  }
  if (from.shopid() != 0) {
    _internal_set_shopid(from._internal_shopid());
  }
  if (from.tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.reserve() != 0) {
    _internal_set_reserve(from._internal_reserve());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.avatarid() != 0) {
    _internal_set_avatarid(from._internal_avatarid());
  }
}

void BShopping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shopping.BShopping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BShopping::CopyFrom(const BShopping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shopping.BShopping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BShopping::IsInitialized() const {
  return true;
}

void BShopping::InternalSwap(BShopping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  introduce_.Swap(&other->introduce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  creaternick_.Swap(&other->creaternick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(goodsid_, other->goodsid_);
  swap(cointype_, other->cointype_);
  swap(price_, other->price_);
  swap(originalprice_, other->originalprice_);
  swap(shopid_, other->shopid_);
  swap(tag_, other->tag_);
  swap(reserve_, other->reserve_);
  swap(limit_, other->limit_);
  swap(status_, other->status_);
  swap(avatarid_, other->avatarid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BShopping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CBuy::InitAsDefaultInstance() {
}
class CBuy::_Internal {
 public:
};

CBuy::CBuy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shopping.CBuy)
}
CBuy::CBuy(const CBuy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shoppingid_, &from.shoppingid_,
    static_cast<size_t>(reinterpret_cast<char*>(&beneficiaryuid_) -
    reinterpret_cast<char*>(&shoppingid_)) + sizeof(beneficiaryuid_));
  // @@protoc_insertion_point(copy_constructor:shopping.CBuy)
}

void CBuy::SharedCtor() {
  ::memset(&shoppingid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beneficiaryuid_) -
      reinterpret_cast<char*>(&shoppingid_)) + sizeof(beneficiaryuid_));
}

CBuy::~CBuy() {
  // @@protoc_insertion_point(destructor:shopping.CBuy)
  SharedDtor();
}

void CBuy::SharedDtor() {
}

void CBuy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBuy& CBuy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CBuy_shopping_2eproto.base);
  return *internal_default_instance();
}


void CBuy::Clear() {
// @@protoc_insertion_point(message_clear_start:shopping.CBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shoppingid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beneficiaryuid_) -
      reinterpret_cast<char*>(&shoppingid_)) + sizeof(beneficiaryuid_));
  _internal_metadata_.Clear();
}

const char* CBuy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 shoppingId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shoppingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beneficiaryUid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          beneficiaryuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBuy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shopping.CBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shoppingId = 1;
  if (this->shoppingid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shoppingid(), target);
  }

  // int32 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quantity(), target);
  }

  // int32 beneficiaryUid = 3;
  if (this->beneficiaryuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_beneficiaryuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shopping.CBuy)
  return target;
}

size_t CBuy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shopping.CBuy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shoppingId = 1;
  if (this->shoppingid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shoppingid());
  }

  // int32 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  // int32 beneficiaryUid = 3;
  if (this->beneficiaryuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beneficiaryuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBuy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shopping.CBuy)
  GOOGLE_DCHECK_NE(&from, this);
  const CBuy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBuy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shopping.CBuy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shopping.CBuy)
    MergeFrom(*source);
  }
}

void CBuy::MergeFrom(const CBuy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shopping.CBuy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shoppingid() != 0) {
    _internal_set_shoppingid(from._internal_shoppingid());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.beneficiaryuid() != 0) {
    _internal_set_beneficiaryuid(from._internal_beneficiaryuid());
  }
}

void CBuy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shopping.CBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBuy::CopyFrom(const CBuy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shopping.CBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBuy::IsInitialized() const {
  return true;
}

void CBuy::InternalSwap(CBuy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shoppingid_, other->shoppingid_);
  swap(quantity_, other->quantity_);
  swap(beneficiaryuid_, other->beneficiaryuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBuy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBuy::InitAsDefaultInstance() {
}
class SBuy::_Internal {
 public:
};

SBuy::SBuy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shopping.SBuy)
}
SBuy::SBuy(const SBuy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:shopping.SBuy)
}

void SBuy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBuy_shopping_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(goodsid_));
}

SBuy::~SBuy() {
  // @@protoc_insertion_point(destructor:shopping.SBuy)
  SharedDtor();
}

void SBuy::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SBuy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBuy& SBuy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBuy_shopping_2eproto.base);
  return *internal_default_instance();
}


void SBuy::Clear() {
// @@protoc_insertion_point(message_clear_start:shopping.SBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* SBuy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shopping.SBuy.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shopId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shopid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buyUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          buyuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beneficiaryUid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          beneficiaryuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBuy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shopping.SBuy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shopping.SBuy.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 shopId = 3;
  if (this->shopid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_shopid(), target);
  }

  // int32 buyUid = 4;
  if (this->buyuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_buyuid(), target);
  }

  // int32 beneficiaryUid = 5;
  if (this->beneficiaryuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_beneficiaryuid(), target);
  }

  // int32 goodsId = 6;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shopping.SBuy)
  return target;
}

size_t SBuy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shopping.SBuy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 shopId = 3;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shopid());
  }

  // int32 buyUid = 4;
  if (this->buyuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buyuid());
  }

  // int32 beneficiaryUid = 5;
  if (this->beneficiaryuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beneficiaryuid());
  }

  // int32 goodsId = 6;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBuy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shopping.SBuy)
  GOOGLE_DCHECK_NE(&from, this);
  const SBuy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBuy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shopping.SBuy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shopping.SBuy)
    MergeFrom(*source);
  }
}

void SBuy::MergeFrom(const SBuy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shopping.SBuy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.shopid() != 0) {
    _internal_set_shopid(from._internal_shopid());
  }
  if (from.buyuid() != 0) {
    _internal_set_buyuid(from._internal_buyuid());
  }
  if (from.beneficiaryuid() != 0) {
    _internal_set_beneficiaryuid(from._internal_beneficiaryuid());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void SBuy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shopping.SBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBuy::CopyFrom(const SBuy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shopping.SBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBuy::IsInitialized() const {
  return true;
}

void SBuy::InternalSwap(SBuy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(shopid_, other->shopid_);
  swap(buyuid_, other->buyuid_);
  swap(beneficiaryuid_, other->beneficiaryuid_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBuy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CShoppingInfoByShopIdGoodsId::InitAsDefaultInstance() {
}
class CShoppingInfoByShopIdGoodsId::_Internal {
 public:
};

CShoppingInfoByShopIdGoodsId::CShoppingInfoByShopIdGoodsId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shopping.CShoppingInfoByShopIdGoodsId)
}
CShoppingInfoByShopIdGoodsId::CShoppingInfoByShopIdGoodsId(const CShoppingInfoByShopIdGoodsId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shopid_, &from.shopid_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&shopid_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:shopping.CShoppingInfoByShopIdGoodsId)
}

void CShoppingInfoByShopIdGoodsId::SharedCtor() {
  ::memset(&shopid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&shopid_)) + sizeof(goodsid_));
}

CShoppingInfoByShopIdGoodsId::~CShoppingInfoByShopIdGoodsId() {
  // @@protoc_insertion_point(destructor:shopping.CShoppingInfoByShopIdGoodsId)
  SharedDtor();
}

void CShoppingInfoByShopIdGoodsId::SharedDtor() {
}

void CShoppingInfoByShopIdGoodsId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CShoppingInfoByShopIdGoodsId& CShoppingInfoByShopIdGoodsId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CShoppingInfoByShopIdGoodsId_shopping_2eproto.base);
  return *internal_default_instance();
}


void CShoppingInfoByShopIdGoodsId::Clear() {
// @@protoc_insertion_point(message_clear_start:shopping.CShoppingInfoByShopIdGoodsId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shopid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&shopid_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* CShoppingInfoByShopIdGoodsId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 shopId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shopid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CShoppingInfoByShopIdGoodsId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shopping.CShoppingInfoByShopIdGoodsId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shopId = 1;
  if (this->shopid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shopid(), target);
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shopping.CShoppingInfoByShopIdGoodsId)
  return target;
}

size_t CShoppingInfoByShopIdGoodsId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shopping.CShoppingInfoByShopIdGoodsId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shopId = 1;
  if (this->shopid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shopid());
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CShoppingInfoByShopIdGoodsId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shopping.CShoppingInfoByShopIdGoodsId)
  GOOGLE_DCHECK_NE(&from, this);
  const CShoppingInfoByShopIdGoodsId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CShoppingInfoByShopIdGoodsId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shopping.CShoppingInfoByShopIdGoodsId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shopping.CShoppingInfoByShopIdGoodsId)
    MergeFrom(*source);
  }
}

void CShoppingInfoByShopIdGoodsId::MergeFrom(const CShoppingInfoByShopIdGoodsId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shopping.CShoppingInfoByShopIdGoodsId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shopid() != 0) {
    _internal_set_shopid(from._internal_shopid());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CShoppingInfoByShopIdGoodsId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shopping.CShoppingInfoByShopIdGoodsId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShoppingInfoByShopIdGoodsId::CopyFrom(const CShoppingInfoByShopIdGoodsId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shopping.CShoppingInfoByShopIdGoodsId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShoppingInfoByShopIdGoodsId::IsInitialized() const {
  return true;
}

void CShoppingInfoByShopIdGoodsId::InternalSwap(CShoppingInfoByShopIdGoodsId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shopid_, other->shopid_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CShoppingInfoByShopIdGoodsId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SShoppingInfoByShopIdGoodsId::InitAsDefaultInstance() {
  ::shopping::_SShoppingInfoByShopIdGoodsId_default_instance_._instance.get_mutable()->shopping_ = const_cast< ::shopping::BShopping*>(
      ::shopping::BShopping::internal_default_instance());
}
class SShoppingInfoByShopIdGoodsId::_Internal {
 public:
  static const ::shopping::BShopping& shopping(const SShoppingInfoByShopIdGoodsId* msg);
};

const ::shopping::BShopping&
SShoppingInfoByShopIdGoodsId::_Internal::shopping(const SShoppingInfoByShopIdGoodsId* msg) {
  return *msg->shopping_;
}
SShoppingInfoByShopIdGoodsId::SShoppingInfoByShopIdGoodsId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shopping.SShoppingInfoByShopIdGoodsId)
}
SShoppingInfoByShopIdGoodsId::SShoppingInfoByShopIdGoodsId(const SShoppingInfoByShopIdGoodsId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_shopping()) {
    shopping_ = new ::shopping::BShopping(*from.shopping_);
  } else {
    shopping_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:shopping.SShoppingInfoByShopIdGoodsId)
}

void SShoppingInfoByShopIdGoodsId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SShoppingInfoByShopIdGoodsId_shopping_2eproto.base);
  shopping_ = nullptr;
}

SShoppingInfoByShopIdGoodsId::~SShoppingInfoByShopIdGoodsId() {
  // @@protoc_insertion_point(destructor:shopping.SShoppingInfoByShopIdGoodsId)
  SharedDtor();
}

void SShoppingInfoByShopIdGoodsId::SharedDtor() {
  if (this != internal_default_instance()) delete shopping_;
}

void SShoppingInfoByShopIdGoodsId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SShoppingInfoByShopIdGoodsId& SShoppingInfoByShopIdGoodsId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SShoppingInfoByShopIdGoodsId_shopping_2eproto.base);
  return *internal_default_instance();
}


void SShoppingInfoByShopIdGoodsId::Clear() {
// @@protoc_insertion_point(message_clear_start:shopping.SShoppingInfoByShopIdGoodsId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && shopping_ != nullptr) {
    delete shopping_;
  }
  shopping_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SShoppingInfoByShopIdGoodsId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .shopping.BShopping shopping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shopping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SShoppingInfoByShopIdGoodsId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shopping.SShoppingInfoByShopIdGoodsId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shopping.BShopping shopping = 1;
  if (this->has_shopping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shopping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shopping.SShoppingInfoByShopIdGoodsId)
  return target;
}

size_t SShoppingInfoByShopIdGoodsId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shopping.SShoppingInfoByShopIdGoodsId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shopping.BShopping shopping = 1;
  if (this->has_shopping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shopping_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SShoppingInfoByShopIdGoodsId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shopping.SShoppingInfoByShopIdGoodsId)
  GOOGLE_DCHECK_NE(&from, this);
  const SShoppingInfoByShopIdGoodsId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SShoppingInfoByShopIdGoodsId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shopping.SShoppingInfoByShopIdGoodsId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shopping.SShoppingInfoByShopIdGoodsId)
    MergeFrom(*source);
  }
}

void SShoppingInfoByShopIdGoodsId::MergeFrom(const SShoppingInfoByShopIdGoodsId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shopping.SShoppingInfoByShopIdGoodsId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shopping()) {
    _internal_mutable_shopping()->::shopping::BShopping::MergeFrom(from._internal_shopping());
  }
}

void SShoppingInfoByShopIdGoodsId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shopping.SShoppingInfoByShopIdGoodsId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SShoppingInfoByShopIdGoodsId::CopyFrom(const SShoppingInfoByShopIdGoodsId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shopping.SShoppingInfoByShopIdGoodsId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SShoppingInfoByShopIdGoodsId::IsInitialized() const {
  return true;
}

void SShoppingInfoByShopIdGoodsId::InternalSwap(SShoppingInfoByShopIdGoodsId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shopping_, other->shopping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SShoppingInfoByShopIdGoodsId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CShoppingUsersLimit::InitAsDefaultInstance() {
}
class CShoppingUsersLimit::_Internal {
 public:
};

CShoppingUsersLimit::CShoppingUsersLimit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shopping.CShoppingUsersLimit)
}
CShoppingUsersLimit::CShoppingUsersLimit(const CShoppingUsersLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shoppingid_ = from.shoppingid_;
  // @@protoc_insertion_point(copy_constructor:shopping.CShoppingUsersLimit)
}

void CShoppingUsersLimit::SharedCtor() {
  shoppingid_ = 0;
}

CShoppingUsersLimit::~CShoppingUsersLimit() {
  // @@protoc_insertion_point(destructor:shopping.CShoppingUsersLimit)
  SharedDtor();
}

void CShoppingUsersLimit::SharedDtor() {
}

void CShoppingUsersLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CShoppingUsersLimit& CShoppingUsersLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CShoppingUsersLimit_shopping_2eproto.base);
  return *internal_default_instance();
}


void CShoppingUsersLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:shopping.CShoppingUsersLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shoppingid_ = 0;
  _internal_metadata_.Clear();
}

const char* CShoppingUsersLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 shoppingId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shoppingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CShoppingUsersLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shopping.CShoppingUsersLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shoppingId = 1;
  if (this->shoppingid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shoppingid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shopping.CShoppingUsersLimit)
  return target;
}

size_t CShoppingUsersLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shopping.CShoppingUsersLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shoppingId = 1;
  if (this->shoppingid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shoppingid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CShoppingUsersLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shopping.CShoppingUsersLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const CShoppingUsersLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CShoppingUsersLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shopping.CShoppingUsersLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shopping.CShoppingUsersLimit)
    MergeFrom(*source);
  }
}

void CShoppingUsersLimit::MergeFrom(const CShoppingUsersLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shopping.CShoppingUsersLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shoppingid() != 0) {
    _internal_set_shoppingid(from._internal_shoppingid());
  }
}

void CShoppingUsersLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shopping.CShoppingUsersLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShoppingUsersLimit::CopyFrom(const CShoppingUsersLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shopping.CShoppingUsersLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShoppingUsersLimit::IsInitialized() const {
  return true;
}

void CShoppingUsersLimit::InternalSwap(CShoppingUsersLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shoppingid_, other->shoppingid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CShoppingUsersLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SShoppingUsersLimit::InitAsDefaultInstance() {
}
class SShoppingUsersLimit::_Internal {
 public:
};

SShoppingUsersLimit::SShoppingUsersLimit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shopping.SShoppingUsersLimit)
}
SShoppingUsersLimit::SShoppingUsersLimit(const SShoppingUsersLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:shopping.SShoppingUsersLimit)
}

void SShoppingUsersLimit::SharedCtor() {
  limit_ = 0;
}

SShoppingUsersLimit::~SShoppingUsersLimit() {
  // @@protoc_insertion_point(destructor:shopping.SShoppingUsersLimit)
  SharedDtor();
}

void SShoppingUsersLimit::SharedDtor() {
}

void SShoppingUsersLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SShoppingUsersLimit& SShoppingUsersLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SShoppingUsersLimit_shopping_2eproto.base);
  return *internal_default_instance();
}


void SShoppingUsersLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:shopping.SShoppingUsersLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0;
  _internal_metadata_.Clear();
}

const char* SShoppingUsersLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SShoppingUsersLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shopping.SShoppingUsersLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shopping.SShoppingUsersLimit)
  return target;
}

size_t SShoppingUsersLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shopping.SShoppingUsersLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SShoppingUsersLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shopping.SShoppingUsersLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const SShoppingUsersLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SShoppingUsersLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shopping.SShoppingUsersLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shopping.SShoppingUsersLimit)
    MergeFrom(*source);
  }
}

void SShoppingUsersLimit::MergeFrom(const SShoppingUsersLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shopping.SShoppingUsersLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void SShoppingUsersLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shopping.SShoppingUsersLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SShoppingUsersLimit::CopyFrom(const SShoppingUsersLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shopping.SShoppingUsersLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SShoppingUsersLimit::IsInitialized() const {
  return true;
}

void SShoppingUsersLimit::InternalSwap(SShoppingUsersLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SShoppingUsersLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace shopping
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::shopping::CShoppingList* Arena::CreateMaybeMessage< ::shopping::CShoppingList >(Arena* arena) {
  return Arena::CreateInternal< ::shopping::CShoppingList >(arena);
}
template<> PROTOBUF_NOINLINE ::shopping::SShoppingList* Arena::CreateMaybeMessage< ::shopping::SShoppingList >(Arena* arena) {
  return Arena::CreateInternal< ::shopping::SShoppingList >(arena);
}
template<> PROTOBUF_NOINLINE ::shopping::BShopping* Arena::CreateMaybeMessage< ::shopping::BShopping >(Arena* arena) {
  return Arena::CreateInternal< ::shopping::BShopping >(arena);
}
template<> PROTOBUF_NOINLINE ::shopping::CBuy* Arena::CreateMaybeMessage< ::shopping::CBuy >(Arena* arena) {
  return Arena::CreateInternal< ::shopping::CBuy >(arena);
}
template<> PROTOBUF_NOINLINE ::shopping::SBuy* Arena::CreateMaybeMessage< ::shopping::SBuy >(Arena* arena) {
  return Arena::CreateInternal< ::shopping::SBuy >(arena);
}
template<> PROTOBUF_NOINLINE ::shopping::CShoppingInfoByShopIdGoodsId* Arena::CreateMaybeMessage< ::shopping::CShoppingInfoByShopIdGoodsId >(Arena* arena) {
  return Arena::CreateInternal< ::shopping::CShoppingInfoByShopIdGoodsId >(arena);
}
template<> PROTOBUF_NOINLINE ::shopping::SShoppingInfoByShopIdGoodsId* Arena::CreateMaybeMessage< ::shopping::SShoppingInfoByShopIdGoodsId >(Arena* arena) {
  return Arena::CreateInternal< ::shopping::SShoppingInfoByShopIdGoodsId >(arena);
}
template<> PROTOBUF_NOINLINE ::shopping::CShoppingUsersLimit* Arena::CreateMaybeMessage< ::shopping::CShoppingUsersLimit >(Arena* arena) {
  return Arena::CreateInternal< ::shopping::CShoppingUsersLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::shopping::SShoppingUsersLimit* Arena::CreateMaybeMessage< ::shopping::SShoppingUsersLimit >(Arena* arena) {
  return Arena::CreateInternal< ::shopping::SShoppingUsersLimit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
