// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mjDance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mjDance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mjDance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mjDance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mjDance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mjDance_2eproto;
namespace mj {
class BMjDancePosition;
class BMjDancePositionDefaultTypeInternal;
extern BMjDancePositionDefaultTypeInternal _BMjDancePosition_default_instance_;
class BMjDanceRank;
class BMjDanceRankDefaultTypeInternal;
extern BMjDanceRankDefaultTypeInternal _BMjDanceRank_default_instance_;
class CMjDancePosition;
class CMjDancePositionDefaultTypeInternal;
extern CMjDancePositionDefaultTypeInternal _CMjDancePosition_default_instance_;
class CMjDanceRank;
class CMjDanceRankDefaultTypeInternal;
extern CMjDanceRankDefaultTypeInternal _CMjDanceRank_default_instance_;
class CMjDanceScore;
class CMjDanceScoreDefaultTypeInternal;
extern CMjDanceScoreDefaultTypeInternal _CMjDanceScore_default_instance_;
class CMjDanceStatus;
class CMjDanceStatusDefaultTypeInternal;
extern CMjDanceStatusDefaultTypeInternal _CMjDanceStatus_default_instance_;
class CMjUserDanceAction;
class CMjUserDanceActionDefaultTypeInternal;
extern CMjUserDanceActionDefaultTypeInternal _CMjUserDanceAction_default_instance_;
class SMjDancePosition;
class SMjDancePositionDefaultTypeInternal;
extern SMjDancePositionDefaultTypeInternal _SMjDancePosition_default_instance_;
class SMjDanceRank;
class SMjDanceRankDefaultTypeInternal;
extern SMjDanceRankDefaultTypeInternal _SMjDanceRank_default_instance_;
class SMjDanceScore;
class SMjDanceScoreDefaultTypeInternal;
extern SMjDanceScoreDefaultTypeInternal _SMjDanceScore_default_instance_;
class SMjDanceStatus;
class SMjDanceStatusDefaultTypeInternal;
extern SMjDanceStatusDefaultTypeInternal _SMjDanceStatus_default_instance_;
class SMjUserDanceAction;
class SMjUserDanceActionDefaultTypeInternal;
extern SMjUserDanceActionDefaultTypeInternal _SMjUserDanceAction_default_instance_;
}  // namespace mj
PROTOBUF_NAMESPACE_OPEN
template<> ::mj::BMjDancePosition* Arena::CreateMaybeMessage<::mj::BMjDancePosition>(Arena*);
template<> ::mj::BMjDanceRank* Arena::CreateMaybeMessage<::mj::BMjDanceRank>(Arena*);
template<> ::mj::CMjDancePosition* Arena::CreateMaybeMessage<::mj::CMjDancePosition>(Arena*);
template<> ::mj::CMjDanceRank* Arena::CreateMaybeMessage<::mj::CMjDanceRank>(Arena*);
template<> ::mj::CMjDanceScore* Arena::CreateMaybeMessage<::mj::CMjDanceScore>(Arena*);
template<> ::mj::CMjDanceStatus* Arena::CreateMaybeMessage<::mj::CMjDanceStatus>(Arena*);
template<> ::mj::CMjUserDanceAction* Arena::CreateMaybeMessage<::mj::CMjUserDanceAction>(Arena*);
template<> ::mj::SMjDancePosition* Arena::CreateMaybeMessage<::mj::SMjDancePosition>(Arena*);
template<> ::mj::SMjDanceRank* Arena::CreateMaybeMessage<::mj::SMjDanceRank>(Arena*);
template<> ::mj::SMjDanceScore* Arena::CreateMaybeMessage<::mj::SMjDanceScore>(Arena*);
template<> ::mj::SMjDanceStatus* Arena::CreateMaybeMessage<::mj::SMjDanceStatus>(Arena*);
template<> ::mj::SMjUserDanceAction* Arena::CreateMaybeMessage<::mj::SMjUserDanceAction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mj {

// ===================================================================

class CMjDancePosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjDancePosition) */ {
 public:
  CMjDancePosition();
  virtual ~CMjDancePosition();

  CMjDancePosition(const CMjDancePosition& from);
  CMjDancePosition(CMjDancePosition&& from) noexcept
    : CMjDancePosition() {
    *this = ::std::move(from);
  }

  inline CMjDancePosition& operator=(const CMjDancePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjDancePosition& operator=(CMjDancePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjDancePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjDancePosition* internal_default_instance() {
    return reinterpret_cast<const CMjDancePosition*>(
               &_CMjDancePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMjDancePosition& a, CMjDancePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjDancePosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjDancePosition* New() const final {
    return CreateMaybeMessage<CMjDancePosition>(nullptr);
  }

  CMjDancePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjDancePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjDancePosition& from);
  void MergeFrom(const CMjDancePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjDancePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjDancePosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mj.CMjDancePosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class SMjDancePosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjDancePosition) */ {
 public:
  SMjDancePosition();
  virtual ~SMjDancePosition();

  SMjDancePosition(const SMjDancePosition& from);
  SMjDancePosition(SMjDancePosition&& from) noexcept
    : SMjDancePosition() {
    *this = ::std::move(from);
  }

  inline SMjDancePosition& operator=(const SMjDancePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjDancePosition& operator=(SMjDancePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjDancePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjDancePosition* internal_default_instance() {
    return reinterpret_cast<const SMjDancePosition*>(
               &_SMjDancePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SMjDancePosition& a, SMjDancePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjDancePosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjDancePosition* New() const final {
    return CreateMaybeMessage<SMjDancePosition>(nullptr);
  }

  SMjDancePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjDancePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjDancePosition& from);
  void MergeFrom(const SMjDancePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjDancePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjDancePosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .mj.BMjDancePosition list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::mj::BMjDancePosition* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDancePosition >*
      mutable_list();
  private:
  const ::mj::BMjDancePosition& _internal_list(int index) const;
  ::mj::BMjDancePosition* _internal_add_list();
  public:
  const ::mj::BMjDancePosition& list(int index) const;
  ::mj::BMjDancePosition* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDancePosition >&
      list() const;

  // @@protoc_insertion_point(class_scope:mj.SMjDancePosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDancePosition > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class BMjDancePosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.BMjDancePosition) */ {
 public:
  BMjDancePosition();
  virtual ~BMjDancePosition();

  BMjDancePosition(const BMjDancePosition& from);
  BMjDancePosition(BMjDancePosition&& from) noexcept
    : BMjDancePosition() {
    *this = ::std::move(from);
  }

  inline BMjDancePosition& operator=(const BMjDancePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMjDancePosition& operator=(BMjDancePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMjDancePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMjDancePosition* internal_default_instance() {
    return reinterpret_cast<const BMjDancePosition*>(
               &_BMjDancePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BMjDancePosition& a, BMjDancePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(BMjDancePosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMjDancePosition* New() const final {
    return CreateMaybeMessage<BMjDancePosition>(nullptr);
  }

  BMjDancePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMjDancePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMjDancePosition& from);
  void MergeFrom(const BMjDancePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMjDancePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.BMjDancePosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // int32 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.BMjDancePosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class CMjUserDanceAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjUserDanceAction) */ {
 public:
  CMjUserDanceAction();
  virtual ~CMjUserDanceAction();

  CMjUserDanceAction(const CMjUserDanceAction& from);
  CMjUserDanceAction(CMjUserDanceAction&& from) noexcept
    : CMjUserDanceAction() {
    *this = ::std::move(from);
  }

  inline CMjUserDanceAction& operator=(const CMjUserDanceAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjUserDanceAction& operator=(CMjUserDanceAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjUserDanceAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjUserDanceAction* internal_default_instance() {
    return reinterpret_cast<const CMjUserDanceAction*>(
               &_CMjUserDanceAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMjUserDanceAction& a, CMjUserDanceAction& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjUserDanceAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjUserDanceAction* New() const final {
    return CreateMaybeMessage<CMjUserDanceAction>(nullptr);
  }

  CMjUserDanceAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjUserDanceAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjUserDanceAction& from);
  void MergeFrom(const CMjUserDanceAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjUserDanceAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjUserDanceAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kActionFieldNumber = 2,
    kUidFieldNumber = 3,
  };
  // int32 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 action = 2;
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjUserDanceAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class SMjUserDanceAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjUserDanceAction) */ {
 public:
  SMjUserDanceAction();
  virtual ~SMjUserDanceAction();

  SMjUserDanceAction(const SMjUserDanceAction& from);
  SMjUserDanceAction(SMjUserDanceAction&& from) noexcept
    : SMjUserDanceAction() {
    *this = ::std::move(from);
  }

  inline SMjUserDanceAction& operator=(const SMjUserDanceAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjUserDanceAction& operator=(SMjUserDanceAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjUserDanceAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjUserDanceAction* internal_default_instance() {
    return reinterpret_cast<const SMjUserDanceAction*>(
               &_SMjUserDanceAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SMjUserDanceAction& a, SMjUserDanceAction& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjUserDanceAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjUserDanceAction* New() const final {
    return CreateMaybeMessage<SMjUserDanceAction>(nullptr);
  }

  SMjUserDanceAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjUserDanceAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjUserDanceAction& from);
  void MergeFrom(const SMjUserDanceAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjUserDanceAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjUserDanceAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kUidFieldNumber = 1,
    kStateFieldNumber = 2,
    kActionFieldNumber = 4,
    kNumberFieldNumber = 5,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 action = 4;
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 number = 5;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjUserDanceAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class CMjDanceStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjDanceStatus) */ {
 public:
  CMjDanceStatus();
  virtual ~CMjDanceStatus();

  CMjDanceStatus(const CMjDanceStatus& from);
  CMjDanceStatus(CMjDanceStatus&& from) noexcept
    : CMjDanceStatus() {
    *this = ::std::move(from);
  }

  inline CMjDanceStatus& operator=(const CMjDanceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjDanceStatus& operator=(CMjDanceStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjDanceStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjDanceStatus* internal_default_instance() {
    return reinterpret_cast<const CMjDanceStatus*>(
               &_CMjDanceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMjDanceStatus& a, CMjDanceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjDanceStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjDanceStatus* New() const final {
    return CreateMaybeMessage<CMjDanceStatus>(nullptr);
  }

  CMjDanceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjDanceStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjDanceStatus& from);
  void MergeFrom(const CMjDanceStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjDanceStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjDanceStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mj.CMjDanceStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class SMjDanceStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjDanceStatus) */ {
 public:
  SMjDanceStatus();
  virtual ~SMjDanceStatus();

  SMjDanceStatus(const SMjDanceStatus& from);
  SMjDanceStatus(SMjDanceStatus&& from) noexcept
    : SMjDanceStatus() {
    *this = ::std::move(from);
  }

  inline SMjDanceStatus& operator=(const SMjDanceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjDanceStatus& operator=(SMjDanceStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjDanceStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjDanceStatus* internal_default_instance() {
    return reinterpret_cast<const SMjDanceStatus*>(
               &_SMjDanceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SMjDanceStatus& a, SMjDanceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjDanceStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjDanceStatus* New() const final {
    return CreateMaybeMessage<SMjDanceStatus>(nullptr);
  }

  SMjDanceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjDanceStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjDanceStatus& from);
  void MergeFrom(const SMjDanceStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjDanceStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjDanceStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kMusicFieldNumber = 3,
    kDanceIdFieldNumber = 1,
    kDurationFieldNumber = 4,
    kCurrentFieldNumber = 5,
    kCountdownFieldNumber = 6,
    kStartTimeFieldNumber = 7,
    kEndTimeFieldNumber = 8,
    kSongStartTimeFieldNumber = 9,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string music = 3;
  void clear_music();
  const std::string& music() const;
  void set_music(const std::string& value);
  void set_music(std::string&& value);
  void set_music(const char* value);
  void set_music(const char* value, size_t size);
  std::string* mutable_music();
  std::string* release_music();
  void set_allocated_music(std::string* music);
  private:
  const std::string& _internal_music() const;
  void _internal_set_music(const std::string& value);
  std::string* _internal_mutable_music();
  public:

  // int32 danceId = 1;
  void clear_danceid();
  ::PROTOBUF_NAMESPACE_ID::int32 danceid() const;
  void set_danceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_danceid() const;
  void _internal_set_danceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 duration = 4;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current = 5;
  void clear_current();
  ::PROTOBUF_NAMESPACE_ID::int32 current() const;
  void set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current() const;
  void _internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 countdown = 6;
  void clear_countdown();
  ::PROTOBUF_NAMESPACE_ID::int32 countdown() const;
  void set_countdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_countdown() const;
  void _internal_set_countdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 startTime = 7;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTime = 8;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 songStartTime = 9;
  void clear_songstarttime();
  ::PROTOBUF_NAMESPACE_ID::int64 songstarttime() const;
  void set_songstarttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_songstarttime() const;
  void _internal_set_songstarttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjDanceStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr music_;
  ::PROTOBUF_NAMESPACE_ID::int32 danceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_;
  ::PROTOBUF_NAMESPACE_ID::int32 countdown_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 songstarttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class CMjDanceScore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjDanceScore) */ {
 public:
  CMjDanceScore();
  virtual ~CMjDanceScore();

  CMjDanceScore(const CMjDanceScore& from);
  CMjDanceScore(CMjDanceScore&& from) noexcept
    : CMjDanceScore() {
    *this = ::std::move(from);
  }

  inline CMjDanceScore& operator=(const CMjDanceScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjDanceScore& operator=(CMjDanceScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjDanceScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjDanceScore* internal_default_instance() {
    return reinterpret_cast<const CMjDanceScore*>(
               &_CMjDanceScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMjDanceScore& a, CMjDanceScore& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjDanceScore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjDanceScore* New() const final {
    return CreateMaybeMessage<CMjDanceScore>(nullptr);
  }

  CMjDanceScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjDanceScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjDanceScore& from);
  void MergeFrom(const CMjDanceScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjDanceScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjDanceScore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpCityFieldNumber = 5,
    kDanceIdFieldNumber = 1,
    kScoreFieldNumber = 2,
    kUidFieldNumber = 3,
    kNumberFieldNumber = 4,
  };
  // string ipCity = 5;
  void clear_ipcity();
  const std::string& ipcity() const;
  void set_ipcity(const std::string& value);
  void set_ipcity(std::string&& value);
  void set_ipcity(const char* value);
  void set_ipcity(const char* value, size_t size);
  std::string* mutable_ipcity();
  std::string* release_ipcity();
  void set_allocated_ipcity(std::string* ipcity);
  private:
  const std::string& _internal_ipcity() const;
  void _internal_set_ipcity(const std::string& value);
  std::string* _internal_mutable_ipcity();
  public:

  // int32 danceId = 1;
  void clear_danceid();
  ::PROTOBUF_NAMESPACE_ID::int32 danceid() const;
  void set_danceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_danceid() const;
  void _internal_set_danceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 number = 4;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjDanceScore)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipcity_;
  ::PROTOBUF_NAMESPACE_ID::int32 danceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class SMjDanceScore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjDanceScore) */ {
 public:
  SMjDanceScore();
  virtual ~SMjDanceScore();

  SMjDanceScore(const SMjDanceScore& from);
  SMjDanceScore(SMjDanceScore&& from) noexcept
    : SMjDanceScore() {
    *this = ::std::move(from);
  }

  inline SMjDanceScore& operator=(const SMjDanceScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjDanceScore& operator=(SMjDanceScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjDanceScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjDanceScore* internal_default_instance() {
    return reinterpret_cast<const SMjDanceScore*>(
               &_SMjDanceScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SMjDanceScore& a, SMjDanceScore& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjDanceScore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjDanceScore* New() const final {
    return CreateMaybeMessage<SMjDanceScore>(nullptr);
  }

  SMjDanceScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjDanceScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjDanceScore& from);
  void MergeFrom(const SMjDanceScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjDanceScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjDanceScore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kStateFieldNumber = 2,
    kDefeatPercentFieldNumber = 3,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 defeatPercent = 3;
  void clear_defeatpercent();
  ::PROTOBUF_NAMESPACE_ID::int32 defeatpercent() const;
  void set_defeatpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_defeatpercent() const;
  void _internal_set_defeatpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjDanceScore)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 defeatpercent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class CMjDanceRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjDanceRank) */ {
 public:
  CMjDanceRank();
  virtual ~CMjDanceRank();

  CMjDanceRank(const CMjDanceRank& from);
  CMjDanceRank(CMjDanceRank&& from) noexcept
    : CMjDanceRank() {
    *this = ::std::move(from);
  }

  inline CMjDanceRank& operator=(const CMjDanceRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjDanceRank& operator=(CMjDanceRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjDanceRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjDanceRank* internal_default_instance() {
    return reinterpret_cast<const CMjDanceRank*>(
               &_CMjDanceRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMjDanceRank& a, CMjDanceRank& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjDanceRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjDanceRank* New() const final {
    return CreateMaybeMessage<CMjDanceRank>(nullptr);
  }

  CMjDanceRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjDanceRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjDanceRank& from);
  void MergeFrom(const CMjDanceRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjDanceRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjDanceRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mj.CMjDanceRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class SMjDanceRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjDanceRank) */ {
 public:
  SMjDanceRank();
  virtual ~SMjDanceRank();

  SMjDanceRank(const SMjDanceRank& from);
  SMjDanceRank(SMjDanceRank&& from) noexcept
    : SMjDanceRank() {
    *this = ::std::move(from);
  }

  inline SMjDanceRank& operator=(const SMjDanceRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjDanceRank& operator=(SMjDanceRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjDanceRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjDanceRank* internal_default_instance() {
    return reinterpret_cast<const SMjDanceRank*>(
               &_SMjDanceRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SMjDanceRank& a, SMjDanceRank& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjDanceRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjDanceRank* New() const final {
    return CreateMaybeMessage<SMjDanceRank>(nullptr);
  }

  SMjDanceRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjDanceRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjDanceRank& from);
  void MergeFrom(const SMjDanceRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjDanceRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjDanceRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 7,
    kTitleFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kMyRankFieldNumber = 4,
    kDefeatPercentFieldNumber = 5,
    kMyScoreFieldNumber = 6,
  };
  // repeated .mj.BMjDanceRank list = 7;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::mj::BMjDanceRank* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDanceRank >*
      mutable_list();
  private:
  const ::mj::BMjDanceRank& _internal_list(int index) const;
  ::mj::BMjDanceRank* _internal_add_list();
  public:
  const ::mj::BMjDanceRank& list(int index) const;
  ::mj::BMjDanceRank* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDanceRank >&
      list() const;

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 startTime = 2;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTime = 3;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 myRank = 4;
  void clear_myrank();
  ::PROTOBUF_NAMESPACE_ID::int32 myrank() const;
  void set_myrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_myrank() const;
  void _internal_set_myrank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 defeatPercent = 5;
  void clear_defeatpercent();
  ::PROTOBUF_NAMESPACE_ID::int32 defeatpercent() const;
  void set_defeatpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_defeatpercent() const;
  void _internal_set_defeatpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 myScore = 6;
  void clear_myscore();
  ::PROTOBUF_NAMESPACE_ID::int32 myscore() const;
  void set_myscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_myscore() const;
  void _internal_set_myscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjDanceRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDanceRank > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 myrank_;
  ::PROTOBUF_NAMESPACE_ID::int32 defeatpercent_;
  ::PROTOBUF_NAMESPACE_ID::int32 myscore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// -------------------------------------------------------------------

class BMjDanceRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.BMjDanceRank) */ {
 public:
  BMjDanceRank();
  virtual ~BMjDanceRank();

  BMjDanceRank(const BMjDanceRank& from);
  BMjDanceRank(BMjDanceRank&& from) noexcept
    : BMjDanceRank() {
    *this = ::std::move(from);
  }

  inline BMjDanceRank& operator=(const BMjDanceRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMjDanceRank& operator=(BMjDanceRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMjDanceRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMjDanceRank* internal_default_instance() {
    return reinterpret_cast<const BMjDanceRank*>(
               &_BMjDanceRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BMjDanceRank& a, BMjDanceRank& b) {
    a.Swap(&b);
  }
  inline void Swap(BMjDanceRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMjDanceRank* New() const final {
    return CreateMaybeMessage<BMjDanceRank>(nullptr);
  }

  BMjDanceRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMjDanceRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMjDanceRank& from);
  void MergeFrom(const BMjDanceRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMjDanceRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.BMjDanceRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjDance_2eproto);
    return ::descriptor_table_mjDance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kUserIconFieldNumber = 7,
    kIpCityFieldNumber = 8,
    kUserTitleFieldNumber = 9,
    kUidFieldNumber = 1,
    kScoreFieldNumber = 3,
    kRankFieldNumber = 4,
    kAvatarIdFieldNumber = 5,
    kAvatarKeyFieldNumber = 6,
  };
  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string userIcon = 7;
  void clear_usericon();
  const std::string& usericon() const;
  void set_usericon(const std::string& value);
  void set_usericon(std::string&& value);
  void set_usericon(const char* value);
  void set_usericon(const char* value, size_t size);
  std::string* mutable_usericon();
  std::string* release_usericon();
  void set_allocated_usericon(std::string* usericon);
  private:
  const std::string& _internal_usericon() const;
  void _internal_set_usericon(const std::string& value);
  std::string* _internal_mutable_usericon();
  public:

  // string ipCity = 8;
  void clear_ipcity();
  const std::string& ipcity() const;
  void set_ipcity(const std::string& value);
  void set_ipcity(std::string&& value);
  void set_ipcity(const char* value);
  void set_ipcity(const char* value, size_t size);
  std::string* mutable_ipcity();
  std::string* release_ipcity();
  void set_allocated_ipcity(std::string* ipcity);
  private:
  const std::string& _internal_ipcity() const;
  void _internal_set_ipcity(const std::string& value);
  std::string* _internal_mutable_ipcity();
  public:

  // string userTitle = 9;
  void clear_usertitle();
  const std::string& usertitle() const;
  void set_usertitle(const std::string& value);
  void set_usertitle(std::string&& value);
  void set_usertitle(const char* value);
  void set_usertitle(const char* value, size_t size);
  std::string* mutable_usertitle();
  std::string* release_usertitle();
  void set_allocated_usertitle(std::string* usertitle);
  private:
  const std::string& _internal_usertitle() const;
  void _internal_set_usertitle(const std::string& value);
  std::string* _internal_mutable_usertitle();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rank = 4;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarId = 5;
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarKey = 6;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.BMjDanceRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usericon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipcity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usertitle_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjDance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMjDancePosition

// -------------------------------------------------------------------

// SMjDancePosition

// repeated .mj.BMjDancePosition list = 1;
inline int SMjDancePosition::_internal_list_size() const {
  return list_.size();
}
inline int SMjDancePosition::list_size() const {
  return _internal_list_size();
}
inline void SMjDancePosition::clear_list() {
  list_.Clear();
}
inline ::mj::BMjDancePosition* SMjDancePosition::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:mj.SMjDancePosition.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDancePosition >*
SMjDancePosition::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:mj.SMjDancePosition.list)
  return &list_;
}
inline const ::mj::BMjDancePosition& SMjDancePosition::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::mj::BMjDancePosition& SMjDancePosition::list(int index) const {
  // @@protoc_insertion_point(field_get:mj.SMjDancePosition.list)
  return _internal_list(index);
}
inline ::mj::BMjDancePosition* SMjDancePosition::_internal_add_list() {
  return list_.Add();
}
inline ::mj::BMjDancePosition* SMjDancePosition::add_list() {
  // @@protoc_insertion_point(field_add:mj.SMjDancePosition.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDancePosition >&
SMjDancePosition::list() const {
  // @@protoc_insertion_point(field_list:mj.SMjDancePosition.list)
  return list_;
}

// -------------------------------------------------------------------

// BMjDancePosition

// int32 number = 1;
inline void BMjDancePosition::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDancePosition::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDancePosition::number() const {
  // @@protoc_insertion_point(field_get:mj.BMjDancePosition.number)
  return _internal_number();
}
inline void BMjDancePosition::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void BMjDancePosition::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:mj.BMjDancePosition.number)
}

// int32 uid = 2;
inline void BMjDancePosition::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDancePosition::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDancePosition::uid() const {
  // @@protoc_insertion_point(field_get:mj.BMjDancePosition.uid)
  return _internal_uid();
}
inline void BMjDancePosition::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BMjDancePosition::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mj.BMjDancePosition.uid)
}

// -------------------------------------------------------------------

// CMjUserDanceAction

// int32 number = 1;
inline void CMjUserDanceAction::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjUserDanceAction::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjUserDanceAction::number() const {
  // @@protoc_insertion_point(field_get:mj.CMjUserDanceAction.number)
  return _internal_number();
}
inline void CMjUserDanceAction::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void CMjUserDanceAction::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:mj.CMjUserDanceAction.number)
}

// int32 action = 2;
inline void CMjUserDanceAction::clear_action() {
  action_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjUserDanceAction::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjUserDanceAction::action() const {
  // @@protoc_insertion_point(field_get:mj.CMjUserDanceAction.action)
  return _internal_action();
}
inline void CMjUserDanceAction::_internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_ = value;
}
inline void CMjUserDanceAction::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:mj.CMjUserDanceAction.action)
}

// int32 uid = 3;
inline void CMjUserDanceAction::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjUserDanceAction::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjUserDanceAction::uid() const {
  // @@protoc_insertion_point(field_get:mj.CMjUserDanceAction.uid)
  return _internal_uid();
}
inline void CMjUserDanceAction::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CMjUserDanceAction::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mj.CMjUserDanceAction.uid)
}

// -------------------------------------------------------------------

// SMjUserDanceAction

// int32 uid = 1;
inline void SMjUserDanceAction::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserDanceAction::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserDanceAction::uid() const {
  // @@protoc_insertion_point(field_get:mj.SMjUserDanceAction.uid)
  return _internal_uid();
}
inline void SMjUserDanceAction::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SMjUserDanceAction::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mj.SMjUserDanceAction.uid)
}

// int32 state = 2;
inline void SMjUserDanceAction::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserDanceAction::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserDanceAction::state() const {
  // @@protoc_insertion_point(field_get:mj.SMjUserDanceAction.state)
  return _internal_state();
}
inline void SMjUserDanceAction::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SMjUserDanceAction::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mj.SMjUserDanceAction.state)
}

// string msg = 3;
inline void SMjUserDanceAction::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjUserDanceAction::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjUserDanceAction.msg)
  return _internal_msg();
}
inline void SMjUserDanceAction::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjUserDanceAction.msg)
}
inline std::string* SMjUserDanceAction::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjUserDanceAction.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjUserDanceAction::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjUserDanceAction::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjUserDanceAction::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjUserDanceAction.msg)
}
inline void SMjUserDanceAction::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjUserDanceAction.msg)
}
inline void SMjUserDanceAction::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjUserDanceAction.msg)
}
inline std::string* SMjUserDanceAction::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjUserDanceAction::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjUserDanceAction.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjUserDanceAction::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjUserDanceAction.msg)
}

// int32 action = 4;
inline void SMjUserDanceAction::clear_action() {
  action_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserDanceAction::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserDanceAction::action() const {
  // @@protoc_insertion_point(field_get:mj.SMjUserDanceAction.action)
  return _internal_action();
}
inline void SMjUserDanceAction::_internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_ = value;
}
inline void SMjUserDanceAction::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:mj.SMjUserDanceAction.action)
}

// int32 number = 5;
inline void SMjUserDanceAction::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserDanceAction::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserDanceAction::number() const {
  // @@protoc_insertion_point(field_get:mj.SMjUserDanceAction.number)
  return _internal_number();
}
inline void SMjUserDanceAction::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void SMjUserDanceAction::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:mj.SMjUserDanceAction.number)
}

// -------------------------------------------------------------------

// CMjDanceStatus

// -------------------------------------------------------------------

// SMjDanceStatus

// int32 danceId = 1;
inline void SMjDanceStatus::clear_danceid() {
  danceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceStatus::_internal_danceid() const {
  return danceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceStatus::danceid() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceStatus.danceId)
  return _internal_danceid();
}
inline void SMjDanceStatus::_internal_set_danceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  danceid_ = value;
}
inline void SMjDanceStatus::set_danceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_danceid(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceStatus.danceId)
}

// string title = 2;
inline void SMjDanceStatus::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjDanceStatus::title() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceStatus.title)
  return _internal_title();
}
inline void SMjDanceStatus::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceStatus.title)
}
inline std::string* SMjDanceStatus::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mj.SMjDanceStatus.title)
  return _internal_mutable_title();
}
inline const std::string& SMjDanceStatus::_internal_title() const {
  return title_.GetNoArena();
}
inline void SMjDanceStatus::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjDanceStatus::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjDanceStatus.title)
}
inline void SMjDanceStatus::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjDanceStatus.title)
}
inline void SMjDanceStatus::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjDanceStatus.title)
}
inline std::string* SMjDanceStatus::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjDanceStatus::release_title() {
  // @@protoc_insertion_point(field_release:mj.SMjDanceStatus.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjDanceStatus::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjDanceStatus.title)
}

// string music = 3;
inline void SMjDanceStatus::clear_music() {
  music_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjDanceStatus::music() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceStatus.music)
  return _internal_music();
}
inline void SMjDanceStatus::set_music(const std::string& value) {
  _internal_set_music(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceStatus.music)
}
inline std::string* SMjDanceStatus::mutable_music() {
  // @@protoc_insertion_point(field_mutable:mj.SMjDanceStatus.music)
  return _internal_mutable_music();
}
inline const std::string& SMjDanceStatus::_internal_music() const {
  return music_.GetNoArena();
}
inline void SMjDanceStatus::_internal_set_music(const std::string& value) {
  
  music_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjDanceStatus::set_music(std::string&& value) {
  
  music_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjDanceStatus.music)
}
inline void SMjDanceStatus::set_music(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  music_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjDanceStatus.music)
}
inline void SMjDanceStatus::set_music(const char* value, size_t size) {
  
  music_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjDanceStatus.music)
}
inline std::string* SMjDanceStatus::_internal_mutable_music() {
  
  return music_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjDanceStatus::release_music() {
  // @@protoc_insertion_point(field_release:mj.SMjDanceStatus.music)
  
  return music_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjDanceStatus::set_allocated_music(std::string* music) {
  if (music != nullptr) {
    
  } else {
    
  }
  music_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), music);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjDanceStatus.music)
}

// int32 duration = 4;
inline void SMjDanceStatus::clear_duration() {
  duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceStatus::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceStatus::duration() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceStatus.duration)
  return _internal_duration();
}
inline void SMjDanceStatus::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  duration_ = value;
}
inline void SMjDanceStatus::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceStatus.duration)
}

// int32 current = 5;
inline void SMjDanceStatus::clear_current() {
  current_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceStatus::_internal_current() const {
  return current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceStatus::current() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceStatus.current)
  return _internal_current();
}
inline void SMjDanceStatus::_internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_ = value;
}
inline void SMjDanceStatus::set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceStatus.current)
}

// int32 countdown = 6;
inline void SMjDanceStatus::clear_countdown() {
  countdown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceStatus::_internal_countdown() const {
  return countdown_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceStatus::countdown() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceStatus.countdown)
  return _internal_countdown();
}
inline void SMjDanceStatus::_internal_set_countdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  countdown_ = value;
}
inline void SMjDanceStatus::set_countdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_countdown(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceStatus.countdown)
}

// int64 startTime = 7;
inline void SMjDanceStatus::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceStatus::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceStatus::starttime() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceStatus.startTime)
  return _internal_starttime();
}
inline void SMjDanceStatus::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void SMjDanceStatus::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceStatus.startTime)
}

// int64 endTime = 8;
inline void SMjDanceStatus::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceStatus::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceStatus::endtime() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceStatus.endTime)
  return _internal_endtime();
}
inline void SMjDanceStatus::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endtime_ = value;
}
inline void SMjDanceStatus::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceStatus.endTime)
}

// int64 songStartTime = 9;
inline void SMjDanceStatus::clear_songstarttime() {
  songstarttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceStatus::_internal_songstarttime() const {
  return songstarttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceStatus::songstarttime() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceStatus.songStartTime)
  return _internal_songstarttime();
}
inline void SMjDanceStatus::_internal_set_songstarttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  songstarttime_ = value;
}
inline void SMjDanceStatus::set_songstarttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_songstarttime(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceStatus.songStartTime)
}

// -------------------------------------------------------------------

// CMjDanceScore

// int32 danceId = 1;
inline void CMjDanceScore::clear_danceid() {
  danceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDanceScore::_internal_danceid() const {
  return danceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDanceScore::danceid() const {
  // @@protoc_insertion_point(field_get:mj.CMjDanceScore.danceId)
  return _internal_danceid();
}
inline void CMjDanceScore::_internal_set_danceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  danceid_ = value;
}
inline void CMjDanceScore::set_danceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_danceid(value);
  // @@protoc_insertion_point(field_set:mj.CMjDanceScore.danceId)
}

// int32 score = 2;
inline void CMjDanceScore::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDanceScore::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDanceScore::score() const {
  // @@protoc_insertion_point(field_get:mj.CMjDanceScore.score)
  return _internal_score();
}
inline void CMjDanceScore::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void CMjDanceScore::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:mj.CMjDanceScore.score)
}

// int32 uid = 3;
inline void CMjDanceScore::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDanceScore::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDanceScore::uid() const {
  // @@protoc_insertion_point(field_get:mj.CMjDanceScore.uid)
  return _internal_uid();
}
inline void CMjDanceScore::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CMjDanceScore::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mj.CMjDanceScore.uid)
}

// int32 number = 4;
inline void CMjDanceScore::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDanceScore::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDanceScore::number() const {
  // @@protoc_insertion_point(field_get:mj.CMjDanceScore.number)
  return _internal_number();
}
inline void CMjDanceScore::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void CMjDanceScore::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:mj.CMjDanceScore.number)
}

// string ipCity = 5;
inline void CMjDanceScore::clear_ipcity() {
  ipcity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMjDanceScore::ipcity() const {
  // @@protoc_insertion_point(field_get:mj.CMjDanceScore.ipCity)
  return _internal_ipcity();
}
inline void CMjDanceScore::set_ipcity(const std::string& value) {
  _internal_set_ipcity(value);
  // @@protoc_insertion_point(field_set:mj.CMjDanceScore.ipCity)
}
inline std::string* CMjDanceScore::mutable_ipcity() {
  // @@protoc_insertion_point(field_mutable:mj.CMjDanceScore.ipCity)
  return _internal_mutable_ipcity();
}
inline const std::string& CMjDanceScore::_internal_ipcity() const {
  return ipcity_.GetNoArena();
}
inline void CMjDanceScore::_internal_set_ipcity(const std::string& value) {
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMjDanceScore::set_ipcity(std::string&& value) {
  
  ipcity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.CMjDanceScore.ipCity)
}
inline void CMjDanceScore::set_ipcity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.CMjDanceScore.ipCity)
}
inline void CMjDanceScore::set_ipcity(const char* value, size_t size) {
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.CMjDanceScore.ipCity)
}
inline std::string* CMjDanceScore::_internal_mutable_ipcity() {
  
  return ipcity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMjDanceScore::release_ipcity() {
  // @@protoc_insertion_point(field_release:mj.CMjDanceScore.ipCity)
  
  return ipcity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMjDanceScore::set_allocated_ipcity(std::string* ipcity) {
  if (ipcity != nullptr) {
    
  } else {
    
  }
  ipcity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipcity);
  // @@protoc_insertion_point(field_set_allocated:mj.CMjDanceScore.ipCity)
}

// -------------------------------------------------------------------

// SMjDanceScore

// string msg = 1;
inline void SMjDanceScore::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjDanceScore::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceScore.msg)
  return _internal_msg();
}
inline void SMjDanceScore::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceScore.msg)
}
inline std::string* SMjDanceScore::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjDanceScore.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjDanceScore::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjDanceScore::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjDanceScore::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjDanceScore.msg)
}
inline void SMjDanceScore::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjDanceScore.msg)
}
inline void SMjDanceScore::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjDanceScore.msg)
}
inline std::string* SMjDanceScore::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjDanceScore::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjDanceScore.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjDanceScore::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjDanceScore.msg)
}

// int32 state = 2;
inline void SMjDanceScore::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceScore::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceScore::state() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceScore.state)
  return _internal_state();
}
inline void SMjDanceScore::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SMjDanceScore::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceScore.state)
}

// int32 defeatPercent = 3;
inline void SMjDanceScore::clear_defeatpercent() {
  defeatpercent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceScore::_internal_defeatpercent() const {
  return defeatpercent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceScore::defeatpercent() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceScore.defeatPercent)
  return _internal_defeatpercent();
}
inline void SMjDanceScore::_internal_set_defeatpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  defeatpercent_ = value;
}
inline void SMjDanceScore::set_defeatpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_defeatpercent(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceScore.defeatPercent)
}

// -------------------------------------------------------------------

// CMjDanceRank

// -------------------------------------------------------------------

// SMjDanceRank

// string title = 1;
inline void SMjDanceRank::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjDanceRank::title() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceRank.title)
  return _internal_title();
}
inline void SMjDanceRank::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceRank.title)
}
inline std::string* SMjDanceRank::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mj.SMjDanceRank.title)
  return _internal_mutable_title();
}
inline const std::string& SMjDanceRank::_internal_title() const {
  return title_.GetNoArena();
}
inline void SMjDanceRank::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjDanceRank::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjDanceRank.title)
}
inline void SMjDanceRank::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjDanceRank.title)
}
inline void SMjDanceRank::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjDanceRank.title)
}
inline std::string* SMjDanceRank::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjDanceRank::release_title() {
  // @@protoc_insertion_point(field_release:mj.SMjDanceRank.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjDanceRank::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjDanceRank.title)
}

// int64 startTime = 2;
inline void SMjDanceRank::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceRank::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceRank::starttime() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceRank.startTime)
  return _internal_starttime();
}
inline void SMjDanceRank::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void SMjDanceRank::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceRank.startTime)
}

// int64 endTime = 3;
inline void SMjDanceRank::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceRank::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMjDanceRank::endtime() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceRank.endTime)
  return _internal_endtime();
}
inline void SMjDanceRank::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endtime_ = value;
}
inline void SMjDanceRank::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceRank.endTime)
}

// int32 myRank = 4;
inline void SMjDanceRank::clear_myrank() {
  myrank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceRank::_internal_myrank() const {
  return myrank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceRank::myrank() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceRank.myRank)
  return _internal_myrank();
}
inline void SMjDanceRank::_internal_set_myrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  myrank_ = value;
}
inline void SMjDanceRank::set_myrank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_myrank(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceRank.myRank)
}

// int32 defeatPercent = 5;
inline void SMjDanceRank::clear_defeatpercent() {
  defeatpercent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceRank::_internal_defeatpercent() const {
  return defeatpercent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceRank::defeatpercent() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceRank.defeatPercent)
  return _internal_defeatpercent();
}
inline void SMjDanceRank::_internal_set_defeatpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  defeatpercent_ = value;
}
inline void SMjDanceRank::set_defeatpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_defeatpercent(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceRank.defeatPercent)
}

// int32 myScore = 6;
inline void SMjDanceRank::clear_myscore() {
  myscore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceRank::_internal_myscore() const {
  return myscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDanceRank::myscore() const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceRank.myScore)
  return _internal_myscore();
}
inline void SMjDanceRank::_internal_set_myscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  myscore_ = value;
}
inline void SMjDanceRank::set_myscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_myscore(value);
  // @@protoc_insertion_point(field_set:mj.SMjDanceRank.myScore)
}

// repeated .mj.BMjDanceRank list = 7;
inline int SMjDanceRank::_internal_list_size() const {
  return list_.size();
}
inline int SMjDanceRank::list_size() const {
  return _internal_list_size();
}
inline void SMjDanceRank::clear_list() {
  list_.Clear();
}
inline ::mj::BMjDanceRank* SMjDanceRank::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:mj.SMjDanceRank.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDanceRank >*
SMjDanceRank::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:mj.SMjDanceRank.list)
  return &list_;
}
inline const ::mj::BMjDanceRank& SMjDanceRank::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::mj::BMjDanceRank& SMjDanceRank::list(int index) const {
  // @@protoc_insertion_point(field_get:mj.SMjDanceRank.list)
  return _internal_list(index);
}
inline ::mj::BMjDanceRank* SMjDanceRank::_internal_add_list() {
  return list_.Add();
}
inline ::mj::BMjDanceRank* SMjDanceRank::add_list() {
  // @@protoc_insertion_point(field_add:mj.SMjDanceRank.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDanceRank >&
SMjDanceRank::list() const {
  // @@protoc_insertion_point(field_list:mj.SMjDanceRank.list)
  return list_;
}

// -------------------------------------------------------------------

// BMjDanceRank

// int32 uid = 1;
inline void BMjDanceRank::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::uid() const {
  // @@protoc_insertion_point(field_get:mj.BMjDanceRank.uid)
  return _internal_uid();
}
inline void BMjDanceRank::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BMjDanceRank::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mj.BMjDanceRank.uid)
}

// string nick = 2;
inline void BMjDanceRank::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMjDanceRank::nick() const {
  // @@protoc_insertion_point(field_get:mj.BMjDanceRank.nick)
  return _internal_nick();
}
inline void BMjDanceRank::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:mj.BMjDanceRank.nick)
}
inline std::string* BMjDanceRank::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:mj.BMjDanceRank.nick)
  return _internal_mutable_nick();
}
inline const std::string& BMjDanceRank::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void BMjDanceRank::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMjDanceRank::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.BMjDanceRank.nick)
}
inline void BMjDanceRank::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.BMjDanceRank.nick)
}
inline void BMjDanceRank::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.BMjDanceRank.nick)
}
inline std::string* BMjDanceRank::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMjDanceRank::release_nick() {
  // @@protoc_insertion_point(field_release:mj.BMjDanceRank.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMjDanceRank::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:mj.BMjDanceRank.nick)
}

// int32 score = 3;
inline void BMjDanceRank::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::score() const {
  // @@protoc_insertion_point(field_get:mj.BMjDanceRank.score)
  return _internal_score();
}
inline void BMjDanceRank::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void BMjDanceRank::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:mj.BMjDanceRank.score)
}

// int32 rank = 4;
inline void BMjDanceRank::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::rank() const {
  // @@protoc_insertion_point(field_get:mj.BMjDanceRank.rank)
  return _internal_rank();
}
inline void BMjDanceRank::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void BMjDanceRank::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:mj.BMjDanceRank.rank)
}

// int32 avatarId = 5;
inline void BMjDanceRank::clear_avatarid() {
  avatarid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::avatarid() const {
  // @@protoc_insertion_point(field_get:mj.BMjDanceRank.avatarId)
  return _internal_avatarid();
}
inline void BMjDanceRank::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarid_ = value;
}
inline void BMjDanceRank::set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:mj.BMjDanceRank.avatarId)
}

// int32 avatarKey = 6;
inline void BMjDanceRank::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDanceRank::avatarkey() const {
  // @@protoc_insertion_point(field_get:mj.BMjDanceRank.avatarKey)
  return _internal_avatarkey();
}
inline void BMjDanceRank::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void BMjDanceRank::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:mj.BMjDanceRank.avatarKey)
}

// string userIcon = 7;
inline void BMjDanceRank::clear_usericon() {
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMjDanceRank::usericon() const {
  // @@protoc_insertion_point(field_get:mj.BMjDanceRank.userIcon)
  return _internal_usericon();
}
inline void BMjDanceRank::set_usericon(const std::string& value) {
  _internal_set_usericon(value);
  // @@protoc_insertion_point(field_set:mj.BMjDanceRank.userIcon)
}
inline std::string* BMjDanceRank::mutable_usericon() {
  // @@protoc_insertion_point(field_mutable:mj.BMjDanceRank.userIcon)
  return _internal_mutable_usericon();
}
inline const std::string& BMjDanceRank::_internal_usericon() const {
  return usericon_.GetNoArena();
}
inline void BMjDanceRank::_internal_set_usericon(const std::string& value) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMjDanceRank::set_usericon(std::string&& value) {
  
  usericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.BMjDanceRank.userIcon)
}
inline void BMjDanceRank::set_usericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.BMjDanceRank.userIcon)
}
inline void BMjDanceRank::set_usericon(const char* value, size_t size) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.BMjDanceRank.userIcon)
}
inline std::string* BMjDanceRank::_internal_mutable_usericon() {
  
  return usericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMjDanceRank::release_usericon() {
  // @@protoc_insertion_point(field_release:mj.BMjDanceRank.userIcon)
  
  return usericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMjDanceRank::set_allocated_usericon(std::string* usericon) {
  if (usericon != nullptr) {
    
  } else {
    
  }
  usericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usericon);
  // @@protoc_insertion_point(field_set_allocated:mj.BMjDanceRank.userIcon)
}

// string ipCity = 8;
inline void BMjDanceRank::clear_ipcity() {
  ipcity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMjDanceRank::ipcity() const {
  // @@protoc_insertion_point(field_get:mj.BMjDanceRank.ipCity)
  return _internal_ipcity();
}
inline void BMjDanceRank::set_ipcity(const std::string& value) {
  _internal_set_ipcity(value);
  // @@protoc_insertion_point(field_set:mj.BMjDanceRank.ipCity)
}
inline std::string* BMjDanceRank::mutable_ipcity() {
  // @@protoc_insertion_point(field_mutable:mj.BMjDanceRank.ipCity)
  return _internal_mutable_ipcity();
}
inline const std::string& BMjDanceRank::_internal_ipcity() const {
  return ipcity_.GetNoArena();
}
inline void BMjDanceRank::_internal_set_ipcity(const std::string& value) {
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMjDanceRank::set_ipcity(std::string&& value) {
  
  ipcity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.BMjDanceRank.ipCity)
}
inline void BMjDanceRank::set_ipcity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.BMjDanceRank.ipCity)
}
inline void BMjDanceRank::set_ipcity(const char* value, size_t size) {
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.BMjDanceRank.ipCity)
}
inline std::string* BMjDanceRank::_internal_mutable_ipcity() {
  
  return ipcity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMjDanceRank::release_ipcity() {
  // @@protoc_insertion_point(field_release:mj.BMjDanceRank.ipCity)
  
  return ipcity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMjDanceRank::set_allocated_ipcity(std::string* ipcity) {
  if (ipcity != nullptr) {
    
  } else {
    
  }
  ipcity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipcity);
  // @@protoc_insertion_point(field_set_allocated:mj.BMjDanceRank.ipCity)
}

// string userTitle = 9;
inline void BMjDanceRank::clear_usertitle() {
  usertitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMjDanceRank::usertitle() const {
  // @@protoc_insertion_point(field_get:mj.BMjDanceRank.userTitle)
  return _internal_usertitle();
}
inline void BMjDanceRank::set_usertitle(const std::string& value) {
  _internal_set_usertitle(value);
  // @@protoc_insertion_point(field_set:mj.BMjDanceRank.userTitle)
}
inline std::string* BMjDanceRank::mutable_usertitle() {
  // @@protoc_insertion_point(field_mutable:mj.BMjDanceRank.userTitle)
  return _internal_mutable_usertitle();
}
inline const std::string& BMjDanceRank::_internal_usertitle() const {
  return usertitle_.GetNoArena();
}
inline void BMjDanceRank::_internal_set_usertitle(const std::string& value) {
  
  usertitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMjDanceRank::set_usertitle(std::string&& value) {
  
  usertitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.BMjDanceRank.userTitle)
}
inline void BMjDanceRank::set_usertitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usertitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.BMjDanceRank.userTitle)
}
inline void BMjDanceRank::set_usertitle(const char* value, size_t size) {
  
  usertitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.BMjDanceRank.userTitle)
}
inline std::string* BMjDanceRank::_internal_mutable_usertitle() {
  
  return usertitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMjDanceRank::release_usertitle() {
  // @@protoc_insertion_point(field_release:mj.BMjDanceRank.userTitle)
  
  return usertitle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMjDanceRank::set_allocated_usertitle(std::string* usertitle) {
  if (usertitle != nullptr) {
    
  } else {
    
  }
  usertitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usertitle);
  // @@protoc_insertion_point(field_set_allocated:mj.BMjDanceRank.userTitle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mj

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mjDance_2eproto
