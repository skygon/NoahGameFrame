// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceBackpack.proto

#include "spaceBackpack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_spaceBackpack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BSpaceBackpack_spaceBackpack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spaceBackpack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Space_spaceBackpack_2eproto;
namespace spaceBackpack {
class CspaceBackpackListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CspaceBackpackList> _instance;
} _CspaceBackpackList_default_instance_;
class BSpaceBackpackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BSpaceBackpack> _instance;
} _BSpaceBackpack_default_instance_;
class SpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Space> _instance;
} _Space_default_instance_;
class SspaceBackpackListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SspaceBackpackList> _instance;
} _SspaceBackpackList_default_instance_;
class CMyDefaultSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMyDefaultSpace> _instance;
} _CMyDefaultSpace_default_instance_;
class SMyDefaultSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMyDefaultSpace> _instance;
} _SMyDefaultSpace_default_instance_;
class CSpaceIntroduceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSpaceIntroduce> _instance;
} _CSpaceIntroduce_default_instance_;
class SSpaceIntroduceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceIntroduce> _instance;
} _SSpaceIntroduce_default_instance_;
}  // namespace spaceBackpack
static void InitDefaultsscc_info_BSpaceBackpack_spaceBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceBackpack::_BSpaceBackpack_default_instance_;
    new (ptr) ::spaceBackpack::BSpaceBackpack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceBackpack::BSpaceBackpack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BSpaceBackpack_spaceBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BSpaceBackpack_spaceBackpack_2eproto}, {
      &scc_info_Space_spaceBackpack_2eproto.base,}};

static void InitDefaultsscc_info_CMyDefaultSpace_spaceBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceBackpack::_CMyDefaultSpace_default_instance_;
    new (ptr) ::spaceBackpack::CMyDefaultSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceBackpack::CMyDefaultSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMyDefaultSpace_spaceBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMyDefaultSpace_spaceBackpack_2eproto}, {}};

static void InitDefaultsscc_info_CSpaceIntroduce_spaceBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceBackpack::_CSpaceIntroduce_default_instance_;
    new (ptr) ::spaceBackpack::CSpaceIntroduce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceBackpack::CSpaceIntroduce::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSpaceIntroduce_spaceBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSpaceIntroduce_spaceBackpack_2eproto}, {}};

static void InitDefaultsscc_info_CspaceBackpackList_spaceBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceBackpack::_CspaceBackpackList_default_instance_;
    new (ptr) ::spaceBackpack::CspaceBackpackList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceBackpack::CspaceBackpackList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CspaceBackpackList_spaceBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CspaceBackpackList_spaceBackpack_2eproto}, {}};

static void InitDefaultsscc_info_SMyDefaultSpace_spaceBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceBackpack::_SMyDefaultSpace_default_instance_;
    new (ptr) ::spaceBackpack::SMyDefaultSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceBackpack::SMyDefaultSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMyDefaultSpace_spaceBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMyDefaultSpace_spaceBackpack_2eproto}, {}};

static void InitDefaultsscc_info_SSpaceIntroduce_spaceBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceBackpack::_SSpaceIntroduce_default_instance_;
    new (ptr) ::spaceBackpack::SSpaceIntroduce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceBackpack::SSpaceIntroduce::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSpaceIntroduce_spaceBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSpaceIntroduce_spaceBackpack_2eproto}, {}};

static void InitDefaultsscc_info_Space_spaceBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceBackpack::_Space_default_instance_;
    new (ptr) ::spaceBackpack::Space();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceBackpack::Space::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Space_spaceBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Space_spaceBackpack_2eproto}, {}};

static void InitDefaultsscc_info_SspaceBackpackList_spaceBackpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceBackpack::_SspaceBackpackList_default_instance_;
    new (ptr) ::spaceBackpack::SspaceBackpackList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceBackpack::SspaceBackpackList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SspaceBackpackList_spaceBackpack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SspaceBackpackList_spaceBackpack_2eproto}, {
      &scc_info_BSpaceBackpack_spaceBackpack_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spaceBackpack_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_spaceBackpack_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spaceBackpack_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spaceBackpack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::CspaceBackpackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::CspaceBackpackList, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::BSpaceBackpack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::BSpaceBackpack, spacebaid_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::BSpaceBackpack, uid_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::BSpaceBackpack, space_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::BSpaceBackpack, default__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, id_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, name_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, cover_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, type_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, createuid_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, checkstatus_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, resource_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, spacecover_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, androidurl_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, iosurl_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, windowsurl_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, onlinetime_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, delstatus_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, remark_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, housetype_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, serialnumber_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, spacevisitcount_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, spacetodayvisitcount_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, configurl_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, serverluaurl_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::Space, clientluaurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SspaceBackpackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SspaceBackpackList, spacebackpacklist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::CMyDefaultSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::CMyDefaultSpace, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacebackpackid_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacename_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacecover_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacehousetype_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacevisitcount_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacetodayvisitcount_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacecopybackpackid_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacecopyname_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacecopycover_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacecopyhousetype_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacecopyvisitcount_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SMyDefaultSpace, spacecopytodayvisitcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::CSpaceIntroduce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::CSpaceIntroduce, houseid_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::CSpaceIntroduce, housetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, userpic_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, usernick_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, spacename_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, spacedesc_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, spacerule_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, createusernick_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, iscollect_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, isrecreation_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, iscopy_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, isopen_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, createdat_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, updateat_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, houseid_),
  PROTOBUF_FIELD_OFFSET(::spaceBackpack::SSpaceIntroduce, housetype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::spaceBackpack::CspaceBackpackList)},
  { 6, -1, sizeof(::spaceBackpack::BSpaceBackpack)},
  { 15, -1, sizeof(::spaceBackpack::Space)},
  { 41, -1, sizeof(::spaceBackpack::SspaceBackpackList)},
  { 47, -1, sizeof(::spaceBackpack::CMyDefaultSpace)},
  { 53, -1, sizeof(::spaceBackpack::SMyDefaultSpace)},
  { 70, -1, sizeof(::spaceBackpack::CSpaceIntroduce)},
  { 77, -1, sizeof(::spaceBackpack::SSpaceIntroduce)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceBackpack::_CspaceBackpackList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceBackpack::_BSpaceBackpack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceBackpack::_Space_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceBackpack::_SspaceBackpackList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceBackpack::_CMyDefaultSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceBackpack::_SMyDefaultSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceBackpack::_CSpaceIntroduce_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceBackpack::_SSpaceIntroduce_default_instance_),
};

const char descriptor_table_protodef_spaceBackpack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023spaceBackpack.proto\022\rspaceBackpack\"!\n\022"
  "CspaceBackpackList\022\013\n\003uid\030\001 \001(\005\"f\n\016BSpac"
  "eBackpack\022\021\n\tspaceBaId\030\001 \001(\005\022\013\n\003uid\030\002 \001("
  "\005\022#\n\005space\030\003 \001(\0132\024.spaceBackpack.Space\022\017"
  "\n\007default\030\004 \001(\005\"\232\003\n\005Space\022\n\n\002id\030\001 \001(\005\022\014\n"
  "\004name\030\002 \001(\t\022\r\n\005cover\030\003 \001(\t\022\014\n\004type\030\004 \001(\005"
  "\022\021\n\tcreateUid\030\005 \001(\005\022\023\n\013checkStatus\030\006 \001(\005"
  "\022\020\n\010resource\030\007 \001(\t\022\022\n\nspaceCover\030\010 \001(\t\022\022"
  "\n\nandroidUrl\030\t \001(\t\022\016\n\006iosUrl\030\n \001(\t\022\022\n\nwi"
  "ndowsUrl\030\013 \001(\t\022\022\n\nonlineTime\030\014 \001(\005\022\021\n\tde"
  "lStatus\030\r \001(\005\022\016\n\006remark\030\016 \001(\t\022\021\n\thouseTy"
  "pe\030\017 \001(\005\022\024\n\014SerialNumber\030\020 \001(\005\022\027\n\017spaceV"
  "isitCount\030\021 \001(\005\022\034\n\024spaceTodayVisitCount\030"
  "\022 \001(\005\022\021\n\tconfigUrl\030\023 \001(\t\022\024\n\014ServerLuaUrl"
  "\030\024 \001(\t\022\024\n\014ClientLuaUrl\030\025 \001(\t\"N\n\022SspaceBa"
  "ckpackList\0228\n\021spaceBackpackList\030\001 \003(\0132\035."
  "spaceBackpack.BSpaceBackpack\"\036\n\017CMyDefau"
  "ltSpace\022\013\n\003uid\030\001 \001(\005\"\307\002\n\017SMyDefaultSpace"
  "\022\027\n\017spaceBackpackId\030\001 \001(\005\022\021\n\tspaceName\030\002"
  " \001(\t\022\022\n\nspaceCover\030\003 \001(\t\022\026\n\016spaceHouseTy"
  "pe\030\004 \001(\005\022\027\n\017spaceVisitCount\030\005 \001(\005\022\034\n\024spa"
  "ceTodayVisitCount\030\006 \001(\005\022\033\n\023spaceCopyBack"
  "packId\030\007 \001(\005\022\025\n\rspaceCopyName\030\010 \001(\t\022\026\n\016s"
  "paceCopyCover\030\t \001(\t\022\032\n\022spaceCopyHouseTyp"
  "e\030\n \001(\005\022\033\n\023spaceCopyVisitCount\030\013 \001(\005\022 \n\030"
  "spaceCopyTodayVisitCount\030\014 \001(\005\"5\n\017CSpace"
  "Introduce\022\017\n\007houseId\030\001 \001(\005\022\021\n\thouseType\030"
  "\002 \001(\005\"\227\002\n\017SSpaceIntroduce\022\017\n\007userPic\030\001 \001"
  "(\t\022\020\n\010userNick\030\002 \001(\t\022\021\n\tspaceName\030\003 \001(\t\022"
  "\021\n\tspaceDesc\030\004 \001(\t\022\021\n\tspaceRule\030\005 \001(\t\022\026\n"
  "\016createUserNick\030\006 \001(\t\022\021\n\tisCollect\030\007 \001(\005"
  "\022\024\n\014isRecreation\030\010 \001(\005\022\016\n\006isCopy\030\t \001(\005\022\016"
  "\n\006isOpen\030\n \001(\005\022\021\n\tcreatedAt\030\013 \001(\t\022\020\n\010upd"
  "ateAt\030\014 \001(\t\022\017\n\007houseId\030\r \001(\005\022\021\n\thouseTyp"
  "e\030\016 \001(\005B-\n\030com.dayou.space.protobufB\rSpa"
  "ceBackpackZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_spaceBackpack_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_spaceBackpack_2eproto_sccs[8] = {
  &scc_info_BSpaceBackpack_spaceBackpack_2eproto.base,
  &scc_info_CMyDefaultSpace_spaceBackpack_2eproto.base,
  &scc_info_CSpaceIntroduce_spaceBackpack_2eproto.base,
  &scc_info_CspaceBackpackList_spaceBackpack_2eproto.base,
  &scc_info_SMyDefaultSpace_spaceBackpack_2eproto.base,
  &scc_info_SSpaceIntroduce_spaceBackpack_2eproto.base,
  &scc_info_Space_spaceBackpack_2eproto.base,
  &scc_info_SspaceBackpackList_spaceBackpack_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spaceBackpack_2eproto_once;
static bool descriptor_table_spaceBackpack_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceBackpack_2eproto = {
  &descriptor_table_spaceBackpack_2eproto_initialized, descriptor_table_protodef_spaceBackpack_2eproto, "spaceBackpack.proto", 1422,
  &descriptor_table_spaceBackpack_2eproto_once, descriptor_table_spaceBackpack_2eproto_sccs, descriptor_table_spaceBackpack_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_spaceBackpack_2eproto::offsets,
  file_level_metadata_spaceBackpack_2eproto, 8, file_level_enum_descriptors_spaceBackpack_2eproto, file_level_service_descriptors_spaceBackpack_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spaceBackpack_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_spaceBackpack_2eproto), true);
namespace spaceBackpack {

// ===================================================================

void CspaceBackpackList::InitAsDefaultInstance() {
}
class CspaceBackpackList::_Internal {
 public:
};

CspaceBackpackList::CspaceBackpackList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceBackpack.CspaceBackpackList)
}
CspaceBackpackList::CspaceBackpackList(const CspaceBackpackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:spaceBackpack.CspaceBackpackList)
}

void CspaceBackpackList::SharedCtor() {
  uid_ = 0;
}

CspaceBackpackList::~CspaceBackpackList() {
  // @@protoc_insertion_point(destructor:spaceBackpack.CspaceBackpackList)
  SharedDtor();
}

void CspaceBackpackList::SharedDtor() {
}

void CspaceBackpackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CspaceBackpackList& CspaceBackpackList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CspaceBackpackList_spaceBackpack_2eproto.base);
  return *internal_default_instance();
}


void CspaceBackpackList::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceBackpack.CspaceBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CspaceBackpackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CspaceBackpackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceBackpack.CspaceBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceBackpack.CspaceBackpackList)
  return target;
}

size_t CspaceBackpackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceBackpack.CspaceBackpackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CspaceBackpackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceBackpack.CspaceBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  const CspaceBackpackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CspaceBackpackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceBackpack.CspaceBackpackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceBackpack.CspaceBackpackList)
    MergeFrom(*source);
  }
}

void CspaceBackpackList::MergeFrom(const CspaceBackpackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceBackpack.CspaceBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CspaceBackpackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceBackpack.CspaceBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CspaceBackpackList::CopyFrom(const CspaceBackpackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceBackpack.CspaceBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CspaceBackpackList::IsInitialized() const {
  return true;
}

void CspaceBackpackList::InternalSwap(CspaceBackpackList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CspaceBackpackList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BSpaceBackpack::InitAsDefaultInstance() {
  ::spaceBackpack::_BSpaceBackpack_default_instance_._instance.get_mutable()->space_ = const_cast< ::spaceBackpack::Space*>(
      ::spaceBackpack::Space::internal_default_instance());
}
class BSpaceBackpack::_Internal {
 public:
  static const ::spaceBackpack::Space& space(const BSpaceBackpack* msg);
};

const ::spaceBackpack::Space&
BSpaceBackpack::_Internal::space(const BSpaceBackpack* msg) {
  return *msg->space_;
}
BSpaceBackpack::BSpaceBackpack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceBackpack.BSpaceBackpack)
}
BSpaceBackpack::BSpaceBackpack(const BSpaceBackpack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_space()) {
    space_ = new ::spaceBackpack::Space(*from.space_);
  } else {
    space_ = nullptr;
  }
  ::memcpy(&spacebaid_, &from.spacebaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&default__) -
    reinterpret_cast<char*>(&spacebaid_)) + sizeof(default__));
  // @@protoc_insertion_point(copy_constructor:spaceBackpack.BSpaceBackpack)
}

void BSpaceBackpack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BSpaceBackpack_spaceBackpack_2eproto.base);
  ::memset(&space_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default__) -
      reinterpret_cast<char*>(&space_)) + sizeof(default__));
}

BSpaceBackpack::~BSpaceBackpack() {
  // @@protoc_insertion_point(destructor:spaceBackpack.BSpaceBackpack)
  SharedDtor();
}

void BSpaceBackpack::SharedDtor() {
  if (this != internal_default_instance()) delete space_;
}

void BSpaceBackpack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BSpaceBackpack& BSpaceBackpack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BSpaceBackpack_spaceBackpack_2eproto.base);
  return *internal_default_instance();
}


void BSpaceBackpack::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceBackpack.BSpaceBackpack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
  ::memset(&spacebaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default__) -
      reinterpret_cast<char*>(&spacebaid_)) + sizeof(default__));
  _internal_metadata_.Clear();
}

const char* BSpaceBackpack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 spaceBaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spacebaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .spaceBackpack.Space space = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 default = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BSpaceBackpack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceBackpack.BSpaceBackpack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spaceBaId = 1;
  if (this->spacebaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_spacebaid(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  // .spaceBackpack.Space space = 3;
  if (this->has_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::space(this), target, stream);
  }

  // int32 default = 4;
  if (this->default_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_default_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceBackpack.BSpaceBackpack)
  return target;
}

size_t BSpaceBackpack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceBackpack.BSpaceBackpack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .spaceBackpack.Space space = 3;
  if (this->has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *space_);
  }

  // int32 spaceBaId = 1;
  if (this->spacebaid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacebaid());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 default = 4;
  if (this->default_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_default_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BSpaceBackpack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceBackpack.BSpaceBackpack)
  GOOGLE_DCHECK_NE(&from, this);
  const BSpaceBackpack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BSpaceBackpack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceBackpack.BSpaceBackpack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceBackpack.BSpaceBackpack)
    MergeFrom(*source);
  }
}

void BSpaceBackpack::MergeFrom(const BSpaceBackpack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceBackpack.BSpaceBackpack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_space()) {
    _internal_mutable_space()->::spaceBackpack::Space::MergeFrom(from._internal_space());
  }
  if (from.spacebaid() != 0) {
    _internal_set_spacebaid(from._internal_spacebaid());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.default_() != 0) {
    _internal_set_default_(from._internal_default_());
  }
}

void BSpaceBackpack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceBackpack.BSpaceBackpack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSpaceBackpack::CopyFrom(const BSpaceBackpack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceBackpack.BSpaceBackpack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSpaceBackpack::IsInitialized() const {
  return true;
}

void BSpaceBackpack::InternalSwap(BSpaceBackpack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(space_, other->space_);
  swap(spacebaid_, other->spacebaid_);
  swap(uid_, other->uid_);
  swap(default__, other->default__);
}

::PROTOBUF_NAMESPACE_ID::Metadata BSpaceBackpack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Space::InitAsDefaultInstance() {
}
class Space::_Internal {
 public:
};

Space::Space()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceBackpack.Space)
}
Space::Space(const Space& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  spacecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecover().empty()) {
    spacecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacecover_);
  }
  androidurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_androidurl().empty()) {
    androidurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.androidurl_);
  }
  iosurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iosurl().empty()) {
    iosurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iosurl_);
  }
  windowsurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_windowsurl().empty()) {
    windowsurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.windowsurl_);
  }
  remark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remark().empty()) {
    remark_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remark_);
  }
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_configurl().empty()) {
    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverluaurl().empty()) {
    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientluaurl().empty()) {
    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&spacetodayvisitcount_) -
    reinterpret_cast<char*>(&id_)) + sizeof(spacetodayvisitcount_));
  // @@protoc_insertion_point(copy_constructor:spaceBackpack.Space)
}

void Space::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Space_spaceBackpack_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iosurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  windowsurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacetodayvisitcount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spacetodayvisitcount_));
}

Space::~Space() {
  // @@protoc_insertion_point(destructor:spaceBackpack.Space)
  SharedDtor();
}

void Space::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iosurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  windowsurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remark_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Space::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Space& Space::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Space_spaceBackpack_2eproto.base);
  return *internal_default_instance();
}


void Space::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceBackpack.Space)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iosurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  windowsurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remark_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacetodayvisitcount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spacetodayvisitcount_));
  _internal_metadata_.Clear();
}

const char* Space::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 createUid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          createuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 checkStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          checkstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceCover = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_spacecover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.spaceCover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string androidUrl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_androidurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.androidUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iosUrl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_iosurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.iosUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string windowsUrl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_windowsurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.windowsUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onlineTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          onlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delStatus = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          delstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remark = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_remark();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.remark"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseType = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          housetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SerialNumber = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          serialnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceVisitCount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          spacevisitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceTodayVisitCount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          spacetodayvisitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string configUrl = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_configurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.configUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerLuaUrl = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_serverluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.ServerLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ClientLuaUrl = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_clientluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.Space.ClientLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Space::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceBackpack.Space)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string cover = 3;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.cover");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cover(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 createUid = 5;
  if (this->createuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_createuid(), target);
  }

  // int32 checkStatus = 6;
  if (this->checkstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_checkstatus(), target);
  }

  // string resource = 7;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.resource");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_resource(), target);
  }

  // string spaceCover = 8;
  if (this->spacecover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecover().data(), static_cast<int>(this->_internal_spacecover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.spaceCover");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_spacecover(), target);
  }

  // string androidUrl = 9;
  if (this->androidurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_androidurl().data(), static_cast<int>(this->_internal_androidurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.androidUrl");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_androidurl(), target);
  }

  // string iosUrl = 10;
  if (this->iosurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iosurl().data(), static_cast<int>(this->_internal_iosurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.iosUrl");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_iosurl(), target);
  }

  // string windowsUrl = 11;
  if (this->windowsurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_windowsurl().data(), static_cast<int>(this->_internal_windowsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.windowsUrl");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_windowsurl(), target);
  }

  // int32 onlineTime = 12;
  if (this->onlinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_onlinetime(), target);
  }

  // int32 delStatus = 13;
  if (this->delstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_delstatus(), target);
  }

  // string remark = 14;
  if (this->remark().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remark().data(), static_cast<int>(this->_internal_remark().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.remark");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_remark(), target);
  }

  // int32 houseType = 15;
  if (this->housetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_housetype(), target);
  }

  // int32 SerialNumber = 16;
  if (this->serialnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_serialnumber(), target);
  }

  // int32 spaceVisitCount = 17;
  if (this->spacevisitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_spacevisitcount(), target);
  }

  // int32 spaceTodayVisitCount = 18;
  if (this->spacetodayvisitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_spacetodayvisitcount(), target);
  }

  // string configUrl = 19;
  if (this->configurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configurl().data(), static_cast<int>(this->_internal_configurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.configUrl");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_configurl(), target);
  }

  // string ServerLuaUrl = 20;
  if (this->serverluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverluaurl().data(), static_cast<int>(this->_internal_serverluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.ServerLuaUrl");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_serverluaurl(), target);
  }

  // string ClientLuaUrl = 21;
  if (this->clientluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientluaurl().data(), static_cast<int>(this->_internal_clientluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.Space.ClientLuaUrl");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_clientluaurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceBackpack.Space)
  return target;
}

size_t Space::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceBackpack.Space)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cover = 3;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // string resource = 7;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string spaceCover = 8;
  if (this->spacecover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecover());
  }

  // string androidUrl = 9;
  if (this->androidurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_androidurl());
  }

  // string iosUrl = 10;
  if (this->iosurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iosurl());
  }

  // string windowsUrl = 11;
  if (this->windowsurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_windowsurl());
  }

  // string remark = 14;
  if (this->remark().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remark());
  }

  // string configUrl = 19;
  if (this->configurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configurl());
  }

  // string ServerLuaUrl = 20;
  if (this->serverluaurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverluaurl());
  }

  // string ClientLuaUrl = 21;
  if (this->clientluaurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientluaurl());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 createUid = 5;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_createuid());
  }

  // int32 checkStatus = 6;
  if (this->checkstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_checkstatus());
  }

  // int32 onlineTime = 12;
  if (this->onlinetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onlinetime());
  }

  // int32 delStatus = 13;
  if (this->delstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delstatus());
  }

  // int32 houseType = 15;
  if (this->housetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_housetype());
  }

  // int32 SerialNumber = 16;
  if (this->serialnumber() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serialnumber());
  }

  // int32 spaceVisitCount = 17;
  if (this->spacevisitcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacevisitcount());
  }

  // int32 spaceTodayVisitCount = 18;
  if (this->spacetodayvisitcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacetodayvisitcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Space::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceBackpack.Space)
  GOOGLE_DCHECK_NE(&from, this);
  const Space* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Space>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceBackpack.Space)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceBackpack.Space)
    MergeFrom(*source);
  }
}

void Space::MergeFrom(const Space& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceBackpack.Space)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.resource().size() > 0) {

    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  if (from.spacecover().size() > 0) {

    spacecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacecover_);
  }
  if (from.androidurl().size() > 0) {

    androidurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.androidurl_);
  }
  if (from.iosurl().size() > 0) {

    iosurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iosurl_);
  }
  if (from.windowsurl().size() > 0) {

    windowsurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.windowsurl_);
  }
  if (from.remark().size() > 0) {

    remark_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remark_);
  }
  if (from.configurl().size() > 0) {

    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  if (from.serverluaurl().size() > 0) {

    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  if (from.clientluaurl().size() > 0) {

    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.createuid() != 0) {
    _internal_set_createuid(from._internal_createuid());
  }
  if (from.checkstatus() != 0) {
    _internal_set_checkstatus(from._internal_checkstatus());
  }
  if (from.onlinetime() != 0) {
    _internal_set_onlinetime(from._internal_onlinetime());
  }
  if (from.delstatus() != 0) {
    _internal_set_delstatus(from._internal_delstatus());
  }
  if (from.housetype() != 0) {
    _internal_set_housetype(from._internal_housetype());
  }
  if (from.serialnumber() != 0) {
    _internal_set_serialnumber(from._internal_serialnumber());
  }
  if (from.spacevisitcount() != 0) {
    _internal_set_spacevisitcount(from._internal_spacevisitcount());
  }
  if (from.spacetodayvisitcount() != 0) {
    _internal_set_spacetodayvisitcount(from._internal_spacetodayvisitcount());
  }
}

void Space::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceBackpack.Space)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Space::CopyFrom(const Space& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceBackpack.Space)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Space::IsInitialized() const {
  return true;
}

void Space::InternalSwap(Space* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spacecover_.Swap(&other->spacecover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  androidurl_.Swap(&other->androidurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iosurl_.Swap(&other->iosurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  windowsurl_.Swap(&other->windowsurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remark_.Swap(&other->remark_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  configurl_.Swap(&other->configurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverluaurl_.Swap(&other->serverluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientluaurl_.Swap(&other->clientluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(createuid_, other->createuid_);
  swap(checkstatus_, other->checkstatus_);
  swap(onlinetime_, other->onlinetime_);
  swap(delstatus_, other->delstatus_);
  swap(housetype_, other->housetype_);
  swap(serialnumber_, other->serialnumber_);
  swap(spacevisitcount_, other->spacevisitcount_);
  swap(spacetodayvisitcount_, other->spacetodayvisitcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Space::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SspaceBackpackList::InitAsDefaultInstance() {
}
class SspaceBackpackList::_Internal {
 public:
};

SspaceBackpackList::SspaceBackpackList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceBackpack.SspaceBackpackList)
}
SspaceBackpackList::SspaceBackpackList(const SspaceBackpackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      spacebackpacklist_(from.spacebackpacklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:spaceBackpack.SspaceBackpackList)
}

void SspaceBackpackList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SspaceBackpackList_spaceBackpack_2eproto.base);
}

SspaceBackpackList::~SspaceBackpackList() {
  // @@protoc_insertion_point(destructor:spaceBackpack.SspaceBackpackList)
  SharedDtor();
}

void SspaceBackpackList::SharedDtor() {
}

void SspaceBackpackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SspaceBackpackList& SspaceBackpackList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SspaceBackpackList_spaceBackpack_2eproto.base);
  return *internal_default_instance();
}


void SspaceBackpackList::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceBackpack.SspaceBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacebackpacklist_.Clear();
  _internal_metadata_.Clear();
}

const char* SspaceBackpackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .spaceBackpack.BSpaceBackpack spaceBackpackList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spacebackpacklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SspaceBackpackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceBackpack.SspaceBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spaceBackpack.BSpaceBackpack spaceBackpackList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spacebackpacklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_spacebackpacklist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceBackpack.SspaceBackpackList)
  return target;
}

size_t SspaceBackpackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceBackpack.SspaceBackpackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spaceBackpack.BSpaceBackpack spaceBackpackList = 1;
  total_size += 1UL * this->_internal_spacebackpacklist_size();
  for (const auto& msg : this->spacebackpacklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SspaceBackpackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceBackpack.SspaceBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  const SspaceBackpackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SspaceBackpackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceBackpack.SspaceBackpackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceBackpack.SspaceBackpackList)
    MergeFrom(*source);
  }
}

void SspaceBackpackList::MergeFrom(const SspaceBackpackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceBackpack.SspaceBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spacebackpacklist_.MergeFrom(from.spacebackpacklist_);
}

void SspaceBackpackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceBackpack.SspaceBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SspaceBackpackList::CopyFrom(const SspaceBackpackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceBackpack.SspaceBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SspaceBackpackList::IsInitialized() const {
  return true;
}

void SspaceBackpackList::InternalSwap(SspaceBackpackList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  spacebackpacklist_.InternalSwap(&other->spacebackpacklist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SspaceBackpackList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMyDefaultSpace::InitAsDefaultInstance() {
}
class CMyDefaultSpace::_Internal {
 public:
};

CMyDefaultSpace::CMyDefaultSpace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceBackpack.CMyDefaultSpace)
}
CMyDefaultSpace::CMyDefaultSpace(const CMyDefaultSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:spaceBackpack.CMyDefaultSpace)
}

void CMyDefaultSpace::SharedCtor() {
  uid_ = 0;
}

CMyDefaultSpace::~CMyDefaultSpace() {
  // @@protoc_insertion_point(destructor:spaceBackpack.CMyDefaultSpace)
  SharedDtor();
}

void CMyDefaultSpace::SharedDtor() {
}

void CMyDefaultSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMyDefaultSpace& CMyDefaultSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMyDefaultSpace_spaceBackpack_2eproto.base);
  return *internal_default_instance();
}


void CMyDefaultSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceBackpack.CMyDefaultSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CMyDefaultSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMyDefaultSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceBackpack.CMyDefaultSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceBackpack.CMyDefaultSpace)
  return target;
}

size_t CMyDefaultSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceBackpack.CMyDefaultSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMyDefaultSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceBackpack.CMyDefaultSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const CMyDefaultSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMyDefaultSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceBackpack.CMyDefaultSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceBackpack.CMyDefaultSpace)
    MergeFrom(*source);
  }
}

void CMyDefaultSpace::MergeFrom(const CMyDefaultSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceBackpack.CMyDefaultSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CMyDefaultSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceBackpack.CMyDefaultSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMyDefaultSpace::CopyFrom(const CMyDefaultSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceBackpack.CMyDefaultSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMyDefaultSpace::IsInitialized() const {
  return true;
}

void CMyDefaultSpace::InternalSwap(CMyDefaultSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMyDefaultSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMyDefaultSpace::InitAsDefaultInstance() {
}
class SMyDefaultSpace::_Internal {
 public:
};

SMyDefaultSpace::SMyDefaultSpace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceBackpack.SMyDefaultSpace)
}
SMyDefaultSpace::SMyDefaultSpace(const SMyDefaultSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacename().empty()) {
    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  spacecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecover().empty()) {
    spacecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacecover_);
  }
  spacecopyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecopyname().empty()) {
    spacecopyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacecopyname_);
  }
  spacecopycover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecopycover().empty()) {
    spacecopycover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacecopycover_);
  }
  ::memcpy(&spacebackpackid_, &from.spacebackpackid_,
    static_cast<size_t>(reinterpret_cast<char*>(&spacecopytodayvisitcount_) -
    reinterpret_cast<char*>(&spacebackpackid_)) + sizeof(spacecopytodayvisitcount_));
  // @@protoc_insertion_point(copy_constructor:spaceBackpack.SMyDefaultSpace)
}

void SMyDefaultSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMyDefaultSpace_spaceBackpack_2eproto.base);
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecopyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecopycover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spacebackpackid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacecopytodayvisitcount_) -
      reinterpret_cast<char*>(&spacebackpackid_)) + sizeof(spacecopytodayvisitcount_));
}

SMyDefaultSpace::~SMyDefaultSpace() {
  // @@protoc_insertion_point(destructor:spaceBackpack.SMyDefaultSpace)
  SharedDtor();
}

void SMyDefaultSpace::SharedDtor() {
  spacename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecopyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecopycover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMyDefaultSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMyDefaultSpace& SMyDefaultSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMyDefaultSpace_spaceBackpack_2eproto.base);
  return *internal_default_instance();
}


void SMyDefaultSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceBackpack.SMyDefaultSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecopyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecopycover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spacebackpackid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacecopytodayvisitcount_) -
      reinterpret_cast<char*>(&spacebackpackid_)) + sizeof(spacecopytodayvisitcount_));
  _internal_metadata_.Clear();
}

const char* SMyDefaultSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 spaceBackpackId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spacebackpackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_spacename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SMyDefaultSpace.spaceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceCover = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_spacecover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SMyDefaultSpace.spaceCover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceHouseType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          spacehousetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceVisitCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          spacevisitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceTodayVisitCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          spacetodayvisitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceCopyBackpackId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          spacecopybackpackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceCopyName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_spacecopyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SMyDefaultSpace.spaceCopyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceCopyCover = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_spacecopycover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SMyDefaultSpace.spaceCopyCover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceCopyHouseType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          spacecopyhousetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceCopyVisitCount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          spacecopyvisitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceCopyTodayVisitCount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          spacecopytodayvisitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMyDefaultSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceBackpack.SMyDefaultSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spaceBackpackId = 1;
  if (this->spacebackpackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_spacebackpackid(), target);
  }

  // string spaceName = 2;
  if (this->spacename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacename().data(), static_cast<int>(this->_internal_spacename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SMyDefaultSpace.spaceName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_spacename(), target);
  }

  // string spaceCover = 3;
  if (this->spacecover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecover().data(), static_cast<int>(this->_internal_spacecover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SMyDefaultSpace.spaceCover");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_spacecover(), target);
  }

  // int32 spaceHouseType = 4;
  if (this->spacehousetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_spacehousetype(), target);
  }

  // int32 spaceVisitCount = 5;
  if (this->spacevisitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_spacevisitcount(), target);
  }

  // int32 spaceTodayVisitCount = 6;
  if (this->spacetodayvisitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_spacetodayvisitcount(), target);
  }

  // int32 spaceCopyBackpackId = 7;
  if (this->spacecopybackpackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_spacecopybackpackid(), target);
  }

  // string spaceCopyName = 8;
  if (this->spacecopyname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecopyname().data(), static_cast<int>(this->_internal_spacecopyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SMyDefaultSpace.spaceCopyName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_spacecopyname(), target);
  }

  // string spaceCopyCover = 9;
  if (this->spacecopycover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecopycover().data(), static_cast<int>(this->_internal_spacecopycover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SMyDefaultSpace.spaceCopyCover");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_spacecopycover(), target);
  }

  // int32 spaceCopyHouseType = 10;
  if (this->spacecopyhousetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_spacecopyhousetype(), target);
  }

  // int32 spaceCopyVisitCount = 11;
  if (this->spacecopyvisitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_spacecopyvisitcount(), target);
  }

  // int32 spaceCopyTodayVisitCount = 12;
  if (this->spacecopytodayvisitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_spacecopytodayvisitcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceBackpack.SMyDefaultSpace)
  return target;
}

size_t SMyDefaultSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceBackpack.SMyDefaultSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spaceName = 2;
  if (this->spacename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacename());
  }

  // string spaceCover = 3;
  if (this->spacecover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecover());
  }

  // string spaceCopyName = 8;
  if (this->spacecopyname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecopyname());
  }

  // string spaceCopyCover = 9;
  if (this->spacecopycover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecopycover());
  }

  // int32 spaceBackpackId = 1;
  if (this->spacebackpackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacebackpackid());
  }

  // int32 spaceHouseType = 4;
  if (this->spacehousetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacehousetype());
  }

  // int32 spaceVisitCount = 5;
  if (this->spacevisitcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacevisitcount());
  }

  // int32 spaceTodayVisitCount = 6;
  if (this->spacetodayvisitcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacetodayvisitcount());
  }

  // int32 spaceCopyBackpackId = 7;
  if (this->spacecopybackpackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacecopybackpackid());
  }

  // int32 spaceCopyHouseType = 10;
  if (this->spacecopyhousetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacecopyhousetype());
  }

  // int32 spaceCopyVisitCount = 11;
  if (this->spacecopyvisitcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacecopyvisitcount());
  }

  // int32 spaceCopyTodayVisitCount = 12;
  if (this->spacecopytodayvisitcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacecopytodayvisitcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMyDefaultSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceBackpack.SMyDefaultSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const SMyDefaultSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMyDefaultSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceBackpack.SMyDefaultSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceBackpack.SMyDefaultSpace)
    MergeFrom(*source);
  }
}

void SMyDefaultSpace::MergeFrom(const SMyDefaultSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceBackpack.SMyDefaultSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spacename().size() > 0) {

    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  if (from.spacecover().size() > 0) {

    spacecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacecover_);
  }
  if (from.spacecopyname().size() > 0) {

    spacecopyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacecopyname_);
  }
  if (from.spacecopycover().size() > 0) {

    spacecopycover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacecopycover_);
  }
  if (from.spacebackpackid() != 0) {
    _internal_set_spacebackpackid(from._internal_spacebackpackid());
  }
  if (from.spacehousetype() != 0) {
    _internal_set_spacehousetype(from._internal_spacehousetype());
  }
  if (from.spacevisitcount() != 0) {
    _internal_set_spacevisitcount(from._internal_spacevisitcount());
  }
  if (from.spacetodayvisitcount() != 0) {
    _internal_set_spacetodayvisitcount(from._internal_spacetodayvisitcount());
  }
  if (from.spacecopybackpackid() != 0) {
    _internal_set_spacecopybackpackid(from._internal_spacecopybackpackid());
  }
  if (from.spacecopyhousetype() != 0) {
    _internal_set_spacecopyhousetype(from._internal_spacecopyhousetype());
  }
  if (from.spacecopyvisitcount() != 0) {
    _internal_set_spacecopyvisitcount(from._internal_spacecopyvisitcount());
  }
  if (from.spacecopytodayvisitcount() != 0) {
    _internal_set_spacecopytodayvisitcount(from._internal_spacecopytodayvisitcount());
  }
}

void SMyDefaultSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceBackpack.SMyDefaultSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMyDefaultSpace::CopyFrom(const SMyDefaultSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceBackpack.SMyDefaultSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMyDefaultSpace::IsInitialized() const {
  return true;
}

void SMyDefaultSpace::InternalSwap(SMyDefaultSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  spacename_.Swap(&other->spacename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spacecover_.Swap(&other->spacecover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spacecopyname_.Swap(&other->spacecopyname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spacecopycover_.Swap(&other->spacecopycover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(spacebackpackid_, other->spacebackpackid_);
  swap(spacehousetype_, other->spacehousetype_);
  swap(spacevisitcount_, other->spacevisitcount_);
  swap(spacetodayvisitcount_, other->spacetodayvisitcount_);
  swap(spacecopybackpackid_, other->spacecopybackpackid_);
  swap(spacecopyhousetype_, other->spacecopyhousetype_);
  swap(spacecopyvisitcount_, other->spacecopyvisitcount_);
  swap(spacecopytodayvisitcount_, other->spacecopytodayvisitcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMyDefaultSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSpaceIntroduce::InitAsDefaultInstance() {
}
class CSpaceIntroduce::_Internal {
 public:
};

CSpaceIntroduce::CSpaceIntroduce()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceBackpack.CSpaceIntroduce)
}
CSpaceIntroduce::CSpaceIntroduce(const CSpaceIntroduce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&housetype_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(housetype_));
  // @@protoc_insertion_point(copy_constructor:spaceBackpack.CSpaceIntroduce)
}

void CSpaceIntroduce::SharedCtor() {
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(housetype_));
}

CSpaceIntroduce::~CSpaceIntroduce() {
  // @@protoc_insertion_point(destructor:spaceBackpack.CSpaceIntroduce)
  SharedDtor();
}

void CSpaceIntroduce::SharedDtor() {
}

void CSpaceIntroduce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSpaceIntroduce& CSpaceIntroduce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSpaceIntroduce_spaceBackpack_2eproto.base);
  return *internal_default_instance();
}


void CSpaceIntroduce::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceBackpack.CSpaceIntroduce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(housetype_));
  _internal_metadata_.Clear();
}

const char* CSpaceIntroduce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          housetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSpaceIntroduce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceBackpack.CSpaceIntroduce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 houseType = 2;
  if (this->housetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_housetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceBackpack.CSpaceIntroduce)
  return target;
}

size_t CSpaceIntroduce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceBackpack.CSpaceIntroduce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 houseType = 2;
  if (this->housetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_housetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSpaceIntroduce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceBackpack.CSpaceIntroduce)
  GOOGLE_DCHECK_NE(&from, this);
  const CSpaceIntroduce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSpaceIntroduce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceBackpack.CSpaceIntroduce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceBackpack.CSpaceIntroduce)
    MergeFrom(*source);
  }
}

void CSpaceIntroduce::MergeFrom(const CSpaceIntroduce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceBackpack.CSpaceIntroduce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.housetype() != 0) {
    _internal_set_housetype(from._internal_housetype());
  }
}

void CSpaceIntroduce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceBackpack.CSpaceIntroduce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSpaceIntroduce::CopyFrom(const CSpaceIntroduce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceBackpack.CSpaceIntroduce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSpaceIntroduce::IsInitialized() const {
  return true;
}

void CSpaceIntroduce::InternalSwap(CSpaceIntroduce* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
  swap(housetype_, other->housetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSpaceIntroduce::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceIntroduce::InitAsDefaultInstance() {
}
class SSpaceIntroduce::_Internal {
 public:
};

SSpaceIntroduce::SSpaceIntroduce()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceBackpack.SSpaceIntroduce)
}
SSpaceIntroduce::SSpaceIntroduce(const SSpaceIntroduce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userpic().empty()) {
    userpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userpic_);
  }
  usernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usernick().empty()) {
    usernick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usernick_);
  }
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacename().empty()) {
    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  spacedesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacedesc().empty()) {
    spacedesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacedesc_);
  }
  spacerule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacerule().empty()) {
    spacerule_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacerule_);
  }
  createusernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createusernick().empty()) {
    createusernick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createusernick_);
  }
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdat().empty()) {
    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  updateat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updateat().empty()) {
    updateat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.updateat_);
  }
  ::memcpy(&iscollect_, &from.iscollect_,
    static_cast<size_t>(reinterpret_cast<char*>(&housetype_) -
    reinterpret_cast<char*>(&iscollect_)) + sizeof(housetype_));
  // @@protoc_insertion_point(copy_constructor:spaceBackpack.SSpaceIntroduce)
}

void SSpaceIntroduce::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSpaceIntroduce_spaceBackpack_2eproto.base);
  userpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacedesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacerule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createusernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&iscollect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&iscollect_)) + sizeof(housetype_));
}

SSpaceIntroduce::~SSpaceIntroduce() {
  // @@protoc_insertion_point(destructor:spaceBackpack.SSpaceIntroduce)
  SharedDtor();
}

void SSpaceIntroduce::SharedDtor() {
  userpic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usernick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacedesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacerule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createusernick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSpaceIntroduce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceIntroduce& SSpaceIntroduce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceIntroduce_spaceBackpack_2eproto.base);
  return *internal_default_instance();
}


void SSpaceIntroduce::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceBackpack.SSpaceIntroduce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usernick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacedesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacerule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createusernick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&iscollect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&iscollect_)) + sizeof(housetype_));
  _internal_metadata_.Clear();
}

const char* SSpaceIntroduce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string userPic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userpic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SSpaceIntroduce.userPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userNick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_usernick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SSpaceIntroduce.userNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_spacename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SSpaceIntroduce.spaceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceDesc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_spacedesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SSpaceIntroduce.spaceDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceRule = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_spacerule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SSpaceIntroduce.spaceRule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createUserNick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_createusernick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SSpaceIntroduce.createUserNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isCollect = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          iscollect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isRecreation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          isrecreation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isCopy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          iscopy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isOpen = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          isopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdAt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_createdat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SSpaceIntroduce.createdAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updateAt = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_updateat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceBackpack.SSpaceIntroduce.updateAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          housetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceIntroduce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceBackpack.SSpaceIntroduce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userPic = 1;
  if (this->userpic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userpic().data(), static_cast<int>(this->_internal_userpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SSpaceIntroduce.userPic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userpic(), target);
  }

  // string userNick = 2;
  if (this->usernick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usernick().data(), static_cast<int>(this->_internal_usernick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SSpaceIntroduce.userNick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usernick(), target);
  }

  // string spaceName = 3;
  if (this->spacename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacename().data(), static_cast<int>(this->_internal_spacename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SSpaceIntroduce.spaceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_spacename(), target);
  }

  // string spaceDesc = 4;
  if (this->spacedesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacedesc().data(), static_cast<int>(this->_internal_spacedesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SSpaceIntroduce.spaceDesc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_spacedesc(), target);
  }

  // string spaceRule = 5;
  if (this->spacerule().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacerule().data(), static_cast<int>(this->_internal_spacerule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SSpaceIntroduce.spaceRule");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_spacerule(), target);
  }

  // string createUserNick = 6;
  if (this->createusernick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createusernick().data(), static_cast<int>(this->_internal_createusernick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SSpaceIntroduce.createUserNick");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_createusernick(), target);
  }

  // int32 isCollect = 7;
  if (this->iscollect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_iscollect(), target);
  }

  // int32 isRecreation = 8;
  if (this->isrecreation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_isrecreation(), target);
  }

  // int32 isCopy = 9;
  if (this->iscopy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_iscopy(), target);
  }

  // int32 isOpen = 10;
  if (this->isopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_isopen(), target);
  }

  // string createdAt = 11;
  if (this->createdat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdat().data(), static_cast<int>(this->_internal_createdat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SSpaceIntroduce.createdAt");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_createdat(), target);
  }

  // string updateAt = 12;
  if (this->updateat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updateat().data(), static_cast<int>(this->_internal_updateat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceBackpack.SSpaceIntroduce.updateAt");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_updateat(), target);
  }

  // int32 houseId = 13;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_houseid(), target);
  }

  // int32 houseType = 14;
  if (this->housetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_housetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceBackpack.SSpaceIntroduce)
  return target;
}

size_t SSpaceIntroduce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceBackpack.SSpaceIntroduce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userPic = 1;
  if (this->userpic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userpic());
  }

  // string userNick = 2;
  if (this->usernick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usernick());
  }

  // string spaceName = 3;
  if (this->spacename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacename());
  }

  // string spaceDesc = 4;
  if (this->spacedesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacedesc());
  }

  // string spaceRule = 5;
  if (this->spacerule().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacerule());
  }

  // string createUserNick = 6;
  if (this->createusernick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createusernick());
  }

  // string createdAt = 11;
  if (this->createdat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdat());
  }

  // string updateAt = 12;
  if (this->updateat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updateat());
  }

  // int32 isCollect = 7;
  if (this->iscollect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iscollect());
  }

  // int32 isRecreation = 8;
  if (this->isrecreation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isrecreation());
  }

  // int32 isCopy = 9;
  if (this->iscopy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iscopy());
  }

  // int32 isOpen = 10;
  if (this->isopen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isopen());
  }

  // int32 houseId = 13;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 houseType = 14;
  if (this->housetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_housetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceIntroduce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceBackpack.SSpaceIntroduce)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceIntroduce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceIntroduce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceBackpack.SSpaceIntroduce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceBackpack.SSpaceIntroduce)
    MergeFrom(*source);
  }
}

void SSpaceIntroduce::MergeFrom(const SSpaceIntroduce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceBackpack.SSpaceIntroduce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userpic().size() > 0) {

    userpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userpic_);
  }
  if (from.usernick().size() > 0) {

    usernick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usernick_);
  }
  if (from.spacename().size() > 0) {

    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  if (from.spacedesc().size() > 0) {

    spacedesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacedesc_);
  }
  if (from.spacerule().size() > 0) {

    spacerule_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacerule_);
  }
  if (from.createusernick().size() > 0) {

    createusernick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createusernick_);
  }
  if (from.createdat().size() > 0) {

    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  if (from.updateat().size() > 0) {

    updateat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.updateat_);
  }
  if (from.iscollect() != 0) {
    _internal_set_iscollect(from._internal_iscollect());
  }
  if (from.isrecreation() != 0) {
    _internal_set_isrecreation(from._internal_isrecreation());
  }
  if (from.iscopy() != 0) {
    _internal_set_iscopy(from._internal_iscopy());
  }
  if (from.isopen() != 0) {
    _internal_set_isopen(from._internal_isopen());
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.housetype() != 0) {
    _internal_set_housetype(from._internal_housetype());
  }
}

void SSpaceIntroduce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceBackpack.SSpaceIntroduce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceIntroduce::CopyFrom(const SSpaceIntroduce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceBackpack.SSpaceIntroduce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceIntroduce::IsInitialized() const {
  return true;
}

void SSpaceIntroduce::InternalSwap(SSpaceIntroduce* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  userpic_.Swap(&other->userpic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usernick_.Swap(&other->usernick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spacename_.Swap(&other->spacename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spacedesc_.Swap(&other->spacedesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spacerule_.Swap(&other->spacerule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createusernick_.Swap(&other->createusernick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdat_.Swap(&other->createdat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  updateat_.Swap(&other->updateat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(iscollect_, other->iscollect_);
  swap(isrecreation_, other->isrecreation_);
  swap(iscopy_, other->iscopy_);
  swap(isopen_, other->isopen_);
  swap(houseid_, other->houseid_);
  swap(housetype_, other->housetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceIntroduce::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spaceBackpack
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::spaceBackpack::CspaceBackpackList* Arena::CreateMaybeMessage< ::spaceBackpack::CspaceBackpackList >(Arena* arena) {
  return Arena::CreateInternal< ::spaceBackpack::CspaceBackpackList >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceBackpack::BSpaceBackpack* Arena::CreateMaybeMessage< ::spaceBackpack::BSpaceBackpack >(Arena* arena) {
  return Arena::CreateInternal< ::spaceBackpack::BSpaceBackpack >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceBackpack::Space* Arena::CreateMaybeMessage< ::spaceBackpack::Space >(Arena* arena) {
  return Arena::CreateInternal< ::spaceBackpack::Space >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceBackpack::SspaceBackpackList* Arena::CreateMaybeMessage< ::spaceBackpack::SspaceBackpackList >(Arena* arena) {
  return Arena::CreateInternal< ::spaceBackpack::SspaceBackpackList >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceBackpack::CMyDefaultSpace* Arena::CreateMaybeMessage< ::spaceBackpack::CMyDefaultSpace >(Arena* arena) {
  return Arena::CreateInternal< ::spaceBackpack::CMyDefaultSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceBackpack::SMyDefaultSpace* Arena::CreateMaybeMessage< ::spaceBackpack::SMyDefaultSpace >(Arena* arena) {
  return Arena::CreateInternal< ::spaceBackpack::SMyDefaultSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceBackpack::CSpaceIntroduce* Arena::CreateMaybeMessage< ::spaceBackpack::CSpaceIntroduce >(Arena* arena) {
  return Arena::CreateInternal< ::spaceBackpack::CSpaceIntroduce >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceBackpack::SSpaceIntroduce* Arena::CreateMaybeMessage< ::spaceBackpack::SSpaceIntroduce >(Arena* arena) {
  return Arena::CreateInternal< ::spaceBackpack::SSpaceIntroduce >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
