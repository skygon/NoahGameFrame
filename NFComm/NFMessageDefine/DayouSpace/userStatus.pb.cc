// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userStatus.proto

#include "userStatus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace userStatus {
class CSpeakStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSpeakStatus> _instance;
} _CSpeakStatus_default_instance_;
class SSpeakStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpeakStatus> _instance;
} _SSpeakStatus_default_instance_;
}  // namespace userStatus
static void InitDefaultsscc_info_CSpeakStatus_userStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userStatus::_CSpeakStatus_default_instance_;
    new (ptr) ::userStatus::CSpeakStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userStatus::CSpeakStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSpeakStatus_userStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSpeakStatus_userStatus_2eproto}, {}};

static void InitDefaultsscc_info_SSpeakStatus_userStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userStatus::_SSpeakStatus_default_instance_;
    new (ptr) ::userStatus::SSpeakStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userStatus::SSpeakStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSpeakStatus_userStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSpeakStatus_userStatus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userStatus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_userStatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_userStatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userStatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userStatus::CSpeakStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userStatus::CSpeakStatus, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userStatus::SSpeakStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userStatus::SSpeakStatus, uid_),
  PROTOBUF_FIELD_OFFSET(::userStatus::SSpeakStatus, npcban_),
  PROTOBUF_FIELD_OFFSET(::userStatus::SSpeakStatus, npcbanendtime_),
  PROTOBUF_FIELD_OFFSET(::userStatus::SSpeakStatus, serverban_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::userStatus::CSpeakStatus)},
  { 6, -1, sizeof(::userStatus::SSpeakStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userStatus::_CSpeakStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userStatus::_SSpeakStatus_default_instance_),
};

const char descriptor_table_protodef_userStatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020userStatus.proto\022\nuserStatus\"\033\n\014CSpeak"
  "Status\022\013\n\003uid\030\001 \001(\005\"U\n\014SSpeakStatus\022\013\n\003u"
  "id\030\001 \001(\005\022\016\n\006npcBan\030\002 \001(\005\022\025\n\rnpcBanEndTim"
  "e\030\003 \001(\003\022\021\n\tserverBan\030\004 \001(\005B&\n\030com.dayou."
  "space.protobufB\nUserStatusb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userStatus_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userStatus_2eproto_sccs[2] = {
  &scc_info_CSpeakStatus_userStatus_2eproto.base,
  &scc_info_SSpeakStatus_userStatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userStatus_2eproto_once;
static bool descriptor_table_userStatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userStatus_2eproto = {
  &descriptor_table_userStatus_2eproto_initialized, descriptor_table_protodef_userStatus_2eproto, "userStatus.proto", 194,
  &descriptor_table_userStatus_2eproto_once, descriptor_table_userStatus_2eproto_sccs, descriptor_table_userStatus_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_userStatus_2eproto::offsets,
  file_level_metadata_userStatus_2eproto, 2, file_level_enum_descriptors_userStatus_2eproto, file_level_service_descriptors_userStatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userStatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userStatus_2eproto), true);
namespace userStatus {

// ===================================================================

void CSpeakStatus::InitAsDefaultInstance() {
}
class CSpeakStatus::_Internal {
 public:
};

CSpeakStatus::CSpeakStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userStatus.CSpeakStatus)
}
CSpeakStatus::CSpeakStatus(const CSpeakStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:userStatus.CSpeakStatus)
}

void CSpeakStatus::SharedCtor() {
  uid_ = 0;
}

CSpeakStatus::~CSpeakStatus() {
  // @@protoc_insertion_point(destructor:userStatus.CSpeakStatus)
  SharedDtor();
}

void CSpeakStatus::SharedDtor() {
}

void CSpeakStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSpeakStatus& CSpeakStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSpeakStatus_userStatus_2eproto.base);
  return *internal_default_instance();
}


void CSpeakStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:userStatus.CSpeakStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CSpeakStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSpeakStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userStatus.CSpeakStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userStatus.CSpeakStatus)
  return target;
}

size_t CSpeakStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userStatus.CSpeakStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSpeakStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userStatus.CSpeakStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSpeakStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSpeakStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userStatus.CSpeakStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userStatus.CSpeakStatus)
    MergeFrom(*source);
  }
}

void CSpeakStatus::MergeFrom(const CSpeakStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userStatus.CSpeakStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CSpeakStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userStatus.CSpeakStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSpeakStatus::CopyFrom(const CSpeakStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userStatus.CSpeakStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSpeakStatus::IsInitialized() const {
  return true;
}

void CSpeakStatus::InternalSwap(CSpeakStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSpeakStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpeakStatus::InitAsDefaultInstance() {
}
class SSpeakStatus::_Internal {
 public:
};

SSpeakStatus::SSpeakStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userStatus.SSpeakStatus)
}
SSpeakStatus::SSpeakStatus(const SSpeakStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverban_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(serverban_));
  // @@protoc_insertion_point(copy_constructor:userStatus.SSpeakStatus)
}

void SSpeakStatus::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverban_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(serverban_));
}

SSpeakStatus::~SSpeakStatus() {
  // @@protoc_insertion_point(destructor:userStatus.SSpeakStatus)
  SharedDtor();
}

void SSpeakStatus::SharedDtor() {
}

void SSpeakStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpeakStatus& SSpeakStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpeakStatus_userStatus_2eproto.base);
  return *internal_default_instance();
}


void SSpeakStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:userStatus.SSpeakStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverban_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(serverban_));
  _internal_metadata_.Clear();
}

const char* SSpeakStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 npcBan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          npcban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 npcBanEndTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          npcbanendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 serverBan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          serverban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpeakStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userStatus.SSpeakStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 npcBan = 2;
  if (this->npcban() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_npcban(), target);
  }

  // int64 npcBanEndTime = 3;
  if (this->npcbanendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_npcbanendtime(), target);
  }

  // int32 serverBan = 4;
  if (this->serverban() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverban(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userStatus.SSpeakStatus)
  return target;
}

size_t SSpeakStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userStatus.SSpeakStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 npcBan = 2;
  if (this->npcban() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_npcban());
  }

  // int64 npcBanEndTime = 3;
  if (this->npcbanendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_npcbanendtime());
  }

  // int32 serverBan = 4;
  if (this->serverban() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverban());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpeakStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userStatus.SSpeakStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpeakStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpeakStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userStatus.SSpeakStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userStatus.SSpeakStatus)
    MergeFrom(*source);
  }
}

void SSpeakStatus::MergeFrom(const SSpeakStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userStatus.SSpeakStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.npcban() != 0) {
    _internal_set_npcban(from._internal_npcban());
  }
  if (from.npcbanendtime() != 0) {
    _internal_set_npcbanendtime(from._internal_npcbanendtime());
  }
  if (from.serverban() != 0) {
    _internal_set_serverban(from._internal_serverban());
  }
}

void SSpeakStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userStatus.SSpeakStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpeakStatus::CopyFrom(const SSpeakStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userStatus.SSpeakStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpeakStatus::IsInitialized() const {
  return true;
}

void SSpeakStatus::InternalSwap(SSpeakStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(npcban_, other->npcban_);
  swap(npcbanendtime_, other->npcbanendtime_);
  swap(serverban_, other->serverban_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpeakStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userStatus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userStatus::CSpeakStatus* Arena::CreateMaybeMessage< ::userStatus::CSpeakStatus >(Arena* arena) {
  return Arena::CreateInternal< ::userStatus::CSpeakStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::userStatus::SSpeakStatus* Arena::CreateMaybeMessage< ::userStatus::SSpeakStatus >(Arena* arena) {
  return Arena::CreateInternal< ::userStatus::SSpeakStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
