// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concertEnter.proto

#include "concertEnter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace concert {
class CEnterConcertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CEnterConcert> _instance;
} _CEnterConcert_default_instance_;
class SEnterConcertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SEnterConcert> _instance;
} _SEnterConcert_default_instance_;
class CEnterConcertMainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CEnterConcertMain> _instance;
} _CEnterConcertMain_default_instance_;
class SEnterConcertMainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SEnterConcertMain> _instance;
} _SEnterConcertMain_default_instance_;
}  // namespace concert
static void InitDefaultsscc_info_CEnterConcert_concertEnter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_CEnterConcert_default_instance_;
    new (ptr) ::concert::CEnterConcert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::CEnterConcert::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CEnterConcert_concertEnter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CEnterConcert_concertEnter_2eproto}, {}};

static void InitDefaultsscc_info_CEnterConcertMain_concertEnter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_CEnterConcertMain_default_instance_;
    new (ptr) ::concert::CEnterConcertMain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::CEnterConcertMain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CEnterConcertMain_concertEnter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CEnterConcertMain_concertEnter_2eproto}, {}};

static void InitDefaultsscc_info_SEnterConcert_concertEnter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SEnterConcert_default_instance_;
    new (ptr) ::concert::SEnterConcert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SEnterConcert::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SEnterConcert_concertEnter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SEnterConcert_concertEnter_2eproto}, {}};

static void InitDefaultsscc_info_SEnterConcertMain_concertEnter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SEnterConcertMain_default_instance_;
    new (ptr) ::concert::SEnterConcertMain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SEnterConcertMain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SEnterConcertMain_concertEnter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SEnterConcertMain_concertEnter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_concertEnter_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_concertEnter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_concertEnter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_concertEnter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::CEnterConcert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, scene_),
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, servertime_),
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, concertstarttime_),
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, beforescenetime_),
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, mainscenetime_),
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, canentermain_),
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, isreserve_),
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, goodsid_),
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcert, disconnectconcert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::CEnterConcertMain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SEnterConcertMain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::concert::CEnterConcert)},
  { 5, -1, sizeof(::concert::SEnterConcert)},
  { 19, -1, sizeof(::concert::CEnterConcertMain)},
  { 24, -1, sizeof(::concert::SEnterConcertMain)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_CEnterConcert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SEnterConcert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_CEnterConcertMain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SEnterConcertMain_default_instance_),
};

const char descriptor_table_protodef_concertEnter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022concertEnter.proto\022\007concert\"\017\n\rCEnterC"
  "oncert\"\321\001\n\rSEnterConcert\022\r\n\005scene\030\001 \001(\005\022"
  "\022\n\nserverTime\030\002 \001(\005\022\030\n\020concertStartTime\030"
  "\003 \001(\005\022\027\n\017beforeSceneTime\030\004 \001(\005\022\025\n\rmainSc"
  "eneTime\030\005 \001(\005\022\024\n\014canEnterMain\030\006 \001(\005\022\021\n\ti"
  "sReserve\030\007 \001(\005\022\017\n\007goodsId\030\010 \001(\005\022\031\n\021disco"
  "nnectConcert\030\t \001(\005\"\023\n\021CEnterConcertMain\""
  "\023\n\021SEnterConcertMainB(\n\030com.dayou.space."
  "protobufB\014ConcertEnterb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_concertEnter_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_concertEnter_2eproto_sccs[4] = {
  &scc_info_CEnterConcert_concertEnter_2eproto.base,
  &scc_info_CEnterConcertMain_concertEnter_2eproto.base,
  &scc_info_SEnterConcert_concertEnter_2eproto.base,
  &scc_info_SEnterConcertMain_concertEnter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_concertEnter_2eproto_once;
static bool descriptor_table_concertEnter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_concertEnter_2eproto = {
  &descriptor_table_concertEnter_2eproto_initialized, descriptor_table_protodef_concertEnter_2eproto, "concertEnter.proto", 350,
  &descriptor_table_concertEnter_2eproto_once, descriptor_table_concertEnter_2eproto_sccs, descriptor_table_concertEnter_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_concertEnter_2eproto::offsets,
  file_level_metadata_concertEnter_2eproto, 4, file_level_enum_descriptors_concertEnter_2eproto, file_level_service_descriptors_concertEnter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_concertEnter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_concertEnter_2eproto), true);
namespace concert {

// ===================================================================

void CEnterConcert::InitAsDefaultInstance() {
}
class CEnterConcert::_Internal {
 public:
};

CEnterConcert::CEnterConcert()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.CEnterConcert)
}
CEnterConcert::CEnterConcert(const CEnterConcert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.CEnterConcert)
}

void CEnterConcert::SharedCtor() {
}

CEnterConcert::~CEnterConcert() {
  // @@protoc_insertion_point(destructor:concert.CEnterConcert)
  SharedDtor();
}

void CEnterConcert::SharedDtor() {
}

void CEnterConcert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEnterConcert& CEnterConcert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CEnterConcert_concertEnter_2eproto.base);
  return *internal_default_instance();
}


void CEnterConcert::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.CEnterConcert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CEnterConcert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEnterConcert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.CEnterConcert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.CEnterConcert)
  return target;
}

size_t CEnterConcert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.CEnterConcert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEnterConcert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.CEnterConcert)
  GOOGLE_DCHECK_NE(&from, this);
  const CEnterConcert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEnterConcert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.CEnterConcert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.CEnterConcert)
    MergeFrom(*source);
  }
}

void CEnterConcert::MergeFrom(const CEnterConcert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.CEnterConcert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CEnterConcert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.CEnterConcert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEnterConcert::CopyFrom(const CEnterConcert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.CEnterConcert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEnterConcert::IsInitialized() const {
  return true;
}

void CEnterConcert::InternalSwap(CEnterConcert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEnterConcert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SEnterConcert::InitAsDefaultInstance() {
}
class SEnterConcert::_Internal {
 public:
};

SEnterConcert::SEnterConcert()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SEnterConcert)
}
SEnterConcert::SEnterConcert(const SEnterConcert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_, &from.scene_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnectconcert_) -
    reinterpret_cast<char*>(&scene_)) + sizeof(disconnectconcert_));
  // @@protoc_insertion_point(copy_constructor:concert.SEnterConcert)
}

void SEnterConcert::SharedCtor() {
  ::memset(&scene_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnectconcert_) -
      reinterpret_cast<char*>(&scene_)) + sizeof(disconnectconcert_));
}

SEnterConcert::~SEnterConcert() {
  // @@protoc_insertion_point(destructor:concert.SEnterConcert)
  SharedDtor();
}

void SEnterConcert::SharedDtor() {
}

void SEnterConcert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SEnterConcert& SEnterConcert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SEnterConcert_concertEnter_2eproto.base);
  return *internal_default_instance();
}


void SEnterConcert::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SEnterConcert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnectconcert_) -
      reinterpret_cast<char*>(&scene_)) + sizeof(disconnectconcert_));
  _internal_metadata_.Clear();
}

const char* SEnterConcert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scene = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 serverTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 concertStartTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          concertstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beforeSceneTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          beforescenetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mainSceneTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mainscenetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 canEnterMain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          canentermain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isReserve = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isreserve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disconnectConcert = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          disconnectconcert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SEnterConcert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SEnterConcert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene = 1;
  if (this->scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scene(), target);
  }

  // int32 serverTime = 2;
  if (this->servertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_servertime(), target);
  }

  // int32 concertStartTime = 3;
  if (this->concertstarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_concertstarttime(), target);
  }

  // int32 beforeSceneTime = 4;
  if (this->beforescenetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_beforescenetime(), target);
  }

  // int32 mainSceneTime = 5;
  if (this->mainscenetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mainscenetime(), target);
  }

  // int32 canEnterMain = 6;
  if (this->canentermain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_canentermain(), target);
  }

  // int32 isReserve = 7;
  if (this->isreserve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_isreserve(), target);
  }

  // int32 goodsId = 8;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_goodsid(), target);
  }

  // int32 disconnectConcert = 9;
  if (this->disconnectconcert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_disconnectconcert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SEnterConcert)
  return target;
}

size_t SEnterConcert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SEnterConcert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 scene = 1;
  if (this->scene() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene());
  }

  // int32 serverTime = 2;
  if (this->servertime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_servertime());
  }

  // int32 concertStartTime = 3;
  if (this->concertstarttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_concertstarttime());
  }

  // int32 beforeSceneTime = 4;
  if (this->beforescenetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beforescenetime());
  }

  // int32 mainSceneTime = 5;
  if (this->mainscenetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mainscenetime());
  }

  // int32 canEnterMain = 6;
  if (this->canentermain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_canentermain());
  }

  // int32 isReserve = 7;
  if (this->isreserve() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isreserve());
  }

  // int32 goodsId = 8;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 disconnectConcert = 9;
  if (this->disconnectconcert() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disconnectconcert());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SEnterConcert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SEnterConcert)
  GOOGLE_DCHECK_NE(&from, this);
  const SEnterConcert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SEnterConcert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SEnterConcert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SEnterConcert)
    MergeFrom(*source);
  }
}

void SEnterConcert::MergeFrom(const SEnterConcert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SEnterConcert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene() != 0) {
    _internal_set_scene(from._internal_scene());
  }
  if (from.servertime() != 0) {
    _internal_set_servertime(from._internal_servertime());
  }
  if (from.concertstarttime() != 0) {
    _internal_set_concertstarttime(from._internal_concertstarttime());
  }
  if (from.beforescenetime() != 0) {
    _internal_set_beforescenetime(from._internal_beforescenetime());
  }
  if (from.mainscenetime() != 0) {
    _internal_set_mainscenetime(from._internal_mainscenetime());
  }
  if (from.canentermain() != 0) {
    _internal_set_canentermain(from._internal_canentermain());
  }
  if (from.isreserve() != 0) {
    _internal_set_isreserve(from._internal_isreserve());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.disconnectconcert() != 0) {
    _internal_set_disconnectconcert(from._internal_disconnectconcert());
  }
}

void SEnterConcert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SEnterConcert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SEnterConcert::CopyFrom(const SEnterConcert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SEnterConcert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEnterConcert::IsInitialized() const {
  return true;
}

void SEnterConcert::InternalSwap(SEnterConcert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scene_, other->scene_);
  swap(servertime_, other->servertime_);
  swap(concertstarttime_, other->concertstarttime_);
  swap(beforescenetime_, other->beforescenetime_);
  swap(mainscenetime_, other->mainscenetime_);
  swap(canentermain_, other->canentermain_);
  swap(isreserve_, other->isreserve_);
  swap(goodsid_, other->goodsid_);
  swap(disconnectconcert_, other->disconnectconcert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SEnterConcert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CEnterConcertMain::InitAsDefaultInstance() {
}
class CEnterConcertMain::_Internal {
 public:
};

CEnterConcertMain::CEnterConcertMain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.CEnterConcertMain)
}
CEnterConcertMain::CEnterConcertMain(const CEnterConcertMain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.CEnterConcertMain)
}

void CEnterConcertMain::SharedCtor() {
}

CEnterConcertMain::~CEnterConcertMain() {
  // @@protoc_insertion_point(destructor:concert.CEnterConcertMain)
  SharedDtor();
}

void CEnterConcertMain::SharedDtor() {
}

void CEnterConcertMain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEnterConcertMain& CEnterConcertMain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CEnterConcertMain_concertEnter_2eproto.base);
  return *internal_default_instance();
}


void CEnterConcertMain::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.CEnterConcertMain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CEnterConcertMain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEnterConcertMain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.CEnterConcertMain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.CEnterConcertMain)
  return target;
}

size_t CEnterConcertMain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.CEnterConcertMain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEnterConcertMain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.CEnterConcertMain)
  GOOGLE_DCHECK_NE(&from, this);
  const CEnterConcertMain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEnterConcertMain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.CEnterConcertMain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.CEnterConcertMain)
    MergeFrom(*source);
  }
}

void CEnterConcertMain::MergeFrom(const CEnterConcertMain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.CEnterConcertMain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CEnterConcertMain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.CEnterConcertMain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEnterConcertMain::CopyFrom(const CEnterConcertMain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.CEnterConcertMain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEnterConcertMain::IsInitialized() const {
  return true;
}

void CEnterConcertMain::InternalSwap(CEnterConcertMain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEnterConcertMain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SEnterConcertMain::InitAsDefaultInstance() {
}
class SEnterConcertMain::_Internal {
 public:
};

SEnterConcertMain::SEnterConcertMain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SEnterConcertMain)
}
SEnterConcertMain::SEnterConcertMain(const SEnterConcertMain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.SEnterConcertMain)
}

void SEnterConcertMain::SharedCtor() {
}

SEnterConcertMain::~SEnterConcertMain() {
  // @@protoc_insertion_point(destructor:concert.SEnterConcertMain)
  SharedDtor();
}

void SEnterConcertMain::SharedDtor() {
}

void SEnterConcertMain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SEnterConcertMain& SEnterConcertMain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SEnterConcertMain_concertEnter_2eproto.base);
  return *internal_default_instance();
}


void SEnterConcertMain::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SEnterConcertMain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SEnterConcertMain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SEnterConcertMain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SEnterConcertMain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SEnterConcertMain)
  return target;
}

size_t SEnterConcertMain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SEnterConcertMain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SEnterConcertMain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SEnterConcertMain)
  GOOGLE_DCHECK_NE(&from, this);
  const SEnterConcertMain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SEnterConcertMain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SEnterConcertMain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SEnterConcertMain)
    MergeFrom(*source);
  }
}

void SEnterConcertMain::MergeFrom(const SEnterConcertMain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SEnterConcertMain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SEnterConcertMain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SEnterConcertMain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SEnterConcertMain::CopyFrom(const SEnterConcertMain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SEnterConcertMain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEnterConcertMain::IsInitialized() const {
  return true;
}

void SEnterConcertMain::InternalSwap(SEnterConcertMain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SEnterConcertMain::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace concert
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::concert::CEnterConcert* Arena::CreateMaybeMessage< ::concert::CEnterConcert >(Arena* arena) {
  return Arena::CreateInternal< ::concert::CEnterConcert >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SEnterConcert* Arena::CreateMaybeMessage< ::concert::SEnterConcert >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SEnterConcert >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::CEnterConcertMain* Arena::CreateMaybeMessage< ::concert::CEnterConcertMain >(Arena* arena) {
  return Arena::CreateInternal< ::concert::CEnterConcertMain >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SEnterConcertMain* Arena::CreateMaybeMessage< ::concert::SEnterConcertMain >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SEnterConcertMain >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
