// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userBindWechat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userBindWechat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userBindWechat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userBindWechat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userBindWechat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userBindWechat_2eproto;
namespace userBindWechat {
class CUserBindWechat;
class CUserBindWechatDefaultTypeInternal;
extern CUserBindWechatDefaultTypeInternal _CUserBindWechat_default_instance_;
class SUserBindWechat;
class SUserBindWechatDefaultTypeInternal;
extern SUserBindWechatDefaultTypeInternal _SUserBindWechat_default_instance_;
}  // namespace userBindWechat
PROTOBUF_NAMESPACE_OPEN
template<> ::userBindWechat::CUserBindWechat* Arena::CreateMaybeMessage<::userBindWechat::CUserBindWechat>(Arena*);
template<> ::userBindWechat::SUserBindWechat* Arena::CreateMaybeMessage<::userBindWechat::SUserBindWechat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userBindWechat {

// ===================================================================

class CUserBindWechat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userBindWechat.CUserBindWechat) */ {
 public:
  CUserBindWechat();
  virtual ~CUserBindWechat();

  CUserBindWechat(const CUserBindWechat& from);
  CUserBindWechat(CUserBindWechat&& from) noexcept
    : CUserBindWechat() {
    *this = ::std::move(from);
  }

  inline CUserBindWechat& operator=(const CUserBindWechat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserBindWechat& operator=(CUserBindWechat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUserBindWechat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserBindWechat* internal_default_instance() {
    return reinterpret_cast<const CUserBindWechat*>(
               &_CUserBindWechat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CUserBindWechat& a, CUserBindWechat& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserBindWechat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUserBindWechat* New() const final {
    return CreateMaybeMessage<CUserBindWechat>(nullptr);
  }

  CUserBindWechat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUserBindWechat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUserBindWechat& from);
  void MergeFrom(const CUserBindWechat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserBindWechat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userBindWechat.CUserBindWechat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userBindWechat_2eproto);
    return ::descriptor_table_userBindWechat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kChannelFieldNumber = 2,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string channel = 2;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // @@protoc_insertion_point(class_scope:userBindWechat.CUserBindWechat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userBindWechat_2eproto;
};
// -------------------------------------------------------------------

class SUserBindWechat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userBindWechat.SUserBindWechat) */ {
 public:
  SUserBindWechat();
  virtual ~SUserBindWechat();

  SUserBindWechat(const SUserBindWechat& from);
  SUserBindWechat(SUserBindWechat&& from) noexcept
    : SUserBindWechat() {
    *this = ::std::move(from);
  }

  inline SUserBindWechat& operator=(const SUserBindWechat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUserBindWechat& operator=(SUserBindWechat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUserBindWechat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUserBindWechat* internal_default_instance() {
    return reinterpret_cast<const SUserBindWechat*>(
               &_SUserBindWechat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SUserBindWechat& a, SUserBindWechat& b) {
    a.Swap(&b);
  }
  inline void Swap(SUserBindWechat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUserBindWechat* New() const final {
    return CreateMaybeMessage<SUserBindWechat>(nullptr);
  }

  SUserBindWechat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUserBindWechat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUserBindWechat& from);
  void MergeFrom(const SUserBindWechat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUserBindWechat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userBindWechat.SUserBindWechat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userBindWechat_2eproto);
    return ::descriptor_table_userBindWechat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kUnionidFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string unionid = 3;
  void clear_unionid();
  const std::string& unionid() const;
  void set_unionid(const std::string& value);
  void set_unionid(std::string&& value);
  void set_unionid(const char* value);
  void set_unionid(const char* value, size_t size);
  std::string* mutable_unionid();
  std::string* release_unionid();
  void set_allocated_unionid(std::string* unionid);
  private:
  const std::string& _internal_unionid() const;
  void _internal_set_unionid(const std::string& value);
  std::string* _internal_mutable_unionid();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userBindWechat.SUserBindWechat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userBindWechat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CUserBindWechat

// string code = 1;
inline void CUserBindWechat::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CUserBindWechat::code() const {
  // @@protoc_insertion_point(field_get:userBindWechat.CUserBindWechat.code)
  return _internal_code();
}
inline void CUserBindWechat::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:userBindWechat.CUserBindWechat.code)
}
inline std::string* CUserBindWechat::mutable_code() {
  // @@protoc_insertion_point(field_mutable:userBindWechat.CUserBindWechat.code)
  return _internal_mutable_code();
}
inline const std::string& CUserBindWechat::_internal_code() const {
  return code_.GetNoArena();
}
inline void CUserBindWechat::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CUserBindWechat::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userBindWechat.CUserBindWechat.code)
}
inline void CUserBindWechat::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userBindWechat.CUserBindWechat.code)
}
inline void CUserBindWechat::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userBindWechat.CUserBindWechat.code)
}
inline std::string* CUserBindWechat::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CUserBindWechat::release_code() {
  // @@protoc_insertion_point(field_release:userBindWechat.CUserBindWechat.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CUserBindWechat::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:userBindWechat.CUserBindWechat.code)
}

// string channel = 2;
inline void CUserBindWechat::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CUserBindWechat::channel() const {
  // @@protoc_insertion_point(field_get:userBindWechat.CUserBindWechat.channel)
  return _internal_channel();
}
inline void CUserBindWechat::set_channel(const std::string& value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:userBindWechat.CUserBindWechat.channel)
}
inline std::string* CUserBindWechat::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:userBindWechat.CUserBindWechat.channel)
  return _internal_mutable_channel();
}
inline const std::string& CUserBindWechat::_internal_channel() const {
  return channel_.GetNoArena();
}
inline void CUserBindWechat::_internal_set_channel(const std::string& value) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CUserBindWechat::set_channel(std::string&& value) {
  
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userBindWechat.CUserBindWechat.channel)
}
inline void CUserBindWechat::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userBindWechat.CUserBindWechat.channel)
}
inline void CUserBindWechat::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userBindWechat.CUserBindWechat.channel)
}
inline std::string* CUserBindWechat::_internal_mutable_channel() {
  
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CUserBindWechat::release_channel() {
  // @@protoc_insertion_point(field_release:userBindWechat.CUserBindWechat.channel)
  
  return channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CUserBindWechat::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:userBindWechat.CUserBindWechat.channel)
}

// -------------------------------------------------------------------

// SUserBindWechat

// int32 status = 1;
inline void SUserBindWechat::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserBindWechat::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserBindWechat::status() const {
  // @@protoc_insertion_point(field_get:userBindWechat.SUserBindWechat.status)
  return _internal_status();
}
inline void SUserBindWechat::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SUserBindWechat::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:userBindWechat.SUserBindWechat.status)
}

// string msg = 2;
inline void SUserBindWechat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserBindWechat::msg() const {
  // @@protoc_insertion_point(field_get:userBindWechat.SUserBindWechat.msg)
  return _internal_msg();
}
inline void SUserBindWechat::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:userBindWechat.SUserBindWechat.msg)
}
inline std::string* SUserBindWechat::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:userBindWechat.SUserBindWechat.msg)
  return _internal_mutable_msg();
}
inline const std::string& SUserBindWechat::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SUserBindWechat::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserBindWechat::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userBindWechat.SUserBindWechat.msg)
}
inline void SUserBindWechat::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userBindWechat.SUserBindWechat.msg)
}
inline void SUserBindWechat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userBindWechat.SUserBindWechat.msg)
}
inline std::string* SUserBindWechat::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserBindWechat::release_msg() {
  // @@protoc_insertion_point(field_release:userBindWechat.SUserBindWechat.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserBindWechat::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:userBindWechat.SUserBindWechat.msg)
}

// string unionid = 3;
inline void SUserBindWechat::clear_unionid() {
  unionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserBindWechat::unionid() const {
  // @@protoc_insertion_point(field_get:userBindWechat.SUserBindWechat.unionid)
  return _internal_unionid();
}
inline void SUserBindWechat::set_unionid(const std::string& value) {
  _internal_set_unionid(value);
  // @@protoc_insertion_point(field_set:userBindWechat.SUserBindWechat.unionid)
}
inline std::string* SUserBindWechat::mutable_unionid() {
  // @@protoc_insertion_point(field_mutable:userBindWechat.SUserBindWechat.unionid)
  return _internal_mutable_unionid();
}
inline const std::string& SUserBindWechat::_internal_unionid() const {
  return unionid_.GetNoArena();
}
inline void SUserBindWechat::_internal_set_unionid(const std::string& value) {
  
  unionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserBindWechat::set_unionid(std::string&& value) {
  
  unionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userBindWechat.SUserBindWechat.unionid)
}
inline void SUserBindWechat::set_unionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userBindWechat.SUserBindWechat.unionid)
}
inline void SUserBindWechat::set_unionid(const char* value, size_t size) {
  
  unionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userBindWechat.SUserBindWechat.unionid)
}
inline std::string* SUserBindWechat::_internal_mutable_unionid() {
  
  return unionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserBindWechat::release_unionid() {
  // @@protoc_insertion_point(field_release:userBindWechat.SUserBindWechat.unionid)
  
  return unionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserBindWechat::set_allocated_unionid(std::string* unionid) {
  if (unionid != nullptr) {
    
  } else {
    
  }
  unionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unionid);
  // @@protoc_insertion_point(field_set_allocated:userBindWechat.SUserBindWechat.unionid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userBindWechat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userBindWechat_2eproto
