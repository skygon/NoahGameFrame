// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameOfBoating.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gameOfBoating_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gameOfBoating_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gameOfBoating_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gameOfBoating_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameOfBoating_2eproto;
namespace gameOfBoating {
class CGameOfBoatingDownBoat;
class CGameOfBoatingDownBoatDefaultTypeInternal;
extern CGameOfBoatingDownBoatDefaultTypeInternal _CGameOfBoatingDownBoat_default_instance_;
class CGameOfBoatingSuccess;
class CGameOfBoatingSuccessDefaultTypeInternal;
extern CGameOfBoatingSuccessDefaultTypeInternal _CGameOfBoatingSuccess_default_instance_;
class CGameOfBoatingSynchronizeBoat;
class CGameOfBoatingSynchronizeBoatDefaultTypeInternal;
extern CGameOfBoatingSynchronizeBoatDefaultTypeInternal _CGameOfBoatingSynchronizeBoat_default_instance_;
class CGameOfBoatingUpBoat;
class CGameOfBoatingUpBoatDefaultTypeInternal;
extern CGameOfBoatingUpBoatDefaultTypeInternal _CGameOfBoatingUpBoat_default_instance_;
class SGameOfBoatingDownBoat;
class SGameOfBoatingDownBoatDefaultTypeInternal;
extern SGameOfBoatingDownBoatDefaultTypeInternal _SGameOfBoatingDownBoat_default_instance_;
class SGameOfBoatingSuccess;
class SGameOfBoatingSuccessDefaultTypeInternal;
extern SGameOfBoatingSuccessDefaultTypeInternal _SGameOfBoatingSuccess_default_instance_;
class SGameOfBoatingSynchronizeBoat;
class SGameOfBoatingSynchronizeBoatDefaultTypeInternal;
extern SGameOfBoatingSynchronizeBoatDefaultTypeInternal _SGameOfBoatingSynchronizeBoat_default_instance_;
class SGameOfBoatingUpBoat;
class SGameOfBoatingUpBoatDefaultTypeInternal;
extern SGameOfBoatingUpBoatDefaultTypeInternal _SGameOfBoatingUpBoat_default_instance_;
}  // namespace gameOfBoating
PROTOBUF_NAMESPACE_OPEN
template<> ::gameOfBoating::CGameOfBoatingDownBoat* Arena::CreateMaybeMessage<::gameOfBoating::CGameOfBoatingDownBoat>(Arena*);
template<> ::gameOfBoating::CGameOfBoatingSuccess* Arena::CreateMaybeMessage<::gameOfBoating::CGameOfBoatingSuccess>(Arena*);
template<> ::gameOfBoating::CGameOfBoatingSynchronizeBoat* Arena::CreateMaybeMessage<::gameOfBoating::CGameOfBoatingSynchronizeBoat>(Arena*);
template<> ::gameOfBoating::CGameOfBoatingUpBoat* Arena::CreateMaybeMessage<::gameOfBoating::CGameOfBoatingUpBoat>(Arena*);
template<> ::gameOfBoating::SGameOfBoatingDownBoat* Arena::CreateMaybeMessage<::gameOfBoating::SGameOfBoatingDownBoat>(Arena*);
template<> ::gameOfBoating::SGameOfBoatingSuccess* Arena::CreateMaybeMessage<::gameOfBoating::SGameOfBoatingSuccess>(Arena*);
template<> ::gameOfBoating::SGameOfBoatingSynchronizeBoat* Arena::CreateMaybeMessage<::gameOfBoating::SGameOfBoatingSynchronizeBoat>(Arena*);
template<> ::gameOfBoating::SGameOfBoatingUpBoat* Arena::CreateMaybeMessage<::gameOfBoating::SGameOfBoatingUpBoat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gameOfBoating {

// ===================================================================

class CGameOfBoatingUpBoat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameOfBoating.CGameOfBoatingUpBoat) */ {
 public:
  CGameOfBoatingUpBoat();
  virtual ~CGameOfBoatingUpBoat();

  CGameOfBoatingUpBoat(const CGameOfBoatingUpBoat& from);
  CGameOfBoatingUpBoat(CGameOfBoatingUpBoat&& from) noexcept
    : CGameOfBoatingUpBoat() {
    *this = ::std::move(from);
  }

  inline CGameOfBoatingUpBoat& operator=(const CGameOfBoatingUpBoat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameOfBoatingUpBoat& operator=(CGameOfBoatingUpBoat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameOfBoatingUpBoat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameOfBoatingUpBoat* internal_default_instance() {
    return reinterpret_cast<const CGameOfBoatingUpBoat*>(
               &_CGameOfBoatingUpBoat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGameOfBoatingUpBoat& a, CGameOfBoatingUpBoat& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameOfBoatingUpBoat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameOfBoatingUpBoat* New() const final {
    return CreateMaybeMessage<CGameOfBoatingUpBoat>(nullptr);
  }

  CGameOfBoatingUpBoat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameOfBoatingUpBoat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameOfBoatingUpBoat& from);
  void MergeFrom(const CGameOfBoatingUpBoat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameOfBoatingUpBoat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameOfBoating.CGameOfBoatingUpBoat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameOfBoating_2eproto);
    return ::descriptor_table_gameOfBoating_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoatIdFieldNumber = 1,
  };
  // int32 boatId = 1;
  void clear_boatid();
  ::PROTOBUF_NAMESPACE_ID::int32 boatid() const;
  void set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boatid() const;
  void _internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameOfBoating.CGameOfBoatingUpBoat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 boatid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameOfBoating_2eproto;
};
// -------------------------------------------------------------------

class SGameOfBoatingUpBoat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameOfBoating.SGameOfBoatingUpBoat) */ {
 public:
  SGameOfBoatingUpBoat();
  virtual ~SGameOfBoatingUpBoat();

  SGameOfBoatingUpBoat(const SGameOfBoatingUpBoat& from);
  SGameOfBoatingUpBoat(SGameOfBoatingUpBoat&& from) noexcept
    : SGameOfBoatingUpBoat() {
    *this = ::std::move(from);
  }

  inline SGameOfBoatingUpBoat& operator=(const SGameOfBoatingUpBoat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGameOfBoatingUpBoat& operator=(SGameOfBoatingUpBoat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGameOfBoatingUpBoat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGameOfBoatingUpBoat* internal_default_instance() {
    return reinterpret_cast<const SGameOfBoatingUpBoat*>(
               &_SGameOfBoatingUpBoat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SGameOfBoatingUpBoat& a, SGameOfBoatingUpBoat& b) {
    a.Swap(&b);
  }
  inline void Swap(SGameOfBoatingUpBoat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGameOfBoatingUpBoat* New() const final {
    return CreateMaybeMessage<SGameOfBoatingUpBoat>(nullptr);
  }

  SGameOfBoatingUpBoat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGameOfBoatingUpBoat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGameOfBoatingUpBoat& from);
  void MergeFrom(const SGameOfBoatingUpBoat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGameOfBoatingUpBoat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameOfBoating.SGameOfBoatingUpBoat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameOfBoating_2eproto);
    return ::descriptor_table_gameOfBoating_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 6,
    kBoatIdFieldNumber = 1,
    kLeftUidFieldNumber = 2,
    kRightUidFieldNumber = 3,
    kUpBoatUidFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string msg = 6;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 boatId = 1;
  void clear_boatid();
  ::PROTOBUF_NAMESPACE_ID::int32 boatid() const;
  void set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boatid() const;
  void _internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 leftUid = 2;
  void clear_leftuid();
  ::PROTOBUF_NAMESPACE_ID::int32 leftuid() const;
  void set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leftuid() const;
  void _internal_set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rightUid = 3;
  void clear_rightuid();
  ::PROTOBUF_NAMESPACE_ID::int32 rightuid() const;
  void set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rightuid() const;
  void _internal_set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 upBoatUid = 4;
  void clear_upboatuid();
  ::PROTOBUF_NAMESPACE_ID::int32 upboatuid() const;
  void set_upboatuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upboatuid() const;
  void _internal_set_upboatuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameOfBoating.SGameOfBoatingUpBoat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 boatid_;
  ::PROTOBUF_NAMESPACE_ID::int32 leftuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rightuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 upboatuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameOfBoating_2eproto;
};
// -------------------------------------------------------------------

class CGameOfBoatingDownBoat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameOfBoating.CGameOfBoatingDownBoat) */ {
 public:
  CGameOfBoatingDownBoat();
  virtual ~CGameOfBoatingDownBoat();

  CGameOfBoatingDownBoat(const CGameOfBoatingDownBoat& from);
  CGameOfBoatingDownBoat(CGameOfBoatingDownBoat&& from) noexcept
    : CGameOfBoatingDownBoat() {
    *this = ::std::move(from);
  }

  inline CGameOfBoatingDownBoat& operator=(const CGameOfBoatingDownBoat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameOfBoatingDownBoat& operator=(CGameOfBoatingDownBoat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameOfBoatingDownBoat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameOfBoatingDownBoat* internal_default_instance() {
    return reinterpret_cast<const CGameOfBoatingDownBoat*>(
               &_CGameOfBoatingDownBoat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGameOfBoatingDownBoat& a, CGameOfBoatingDownBoat& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameOfBoatingDownBoat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameOfBoatingDownBoat* New() const final {
    return CreateMaybeMessage<CGameOfBoatingDownBoat>(nullptr);
  }

  CGameOfBoatingDownBoat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameOfBoatingDownBoat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameOfBoatingDownBoat& from);
  void MergeFrom(const CGameOfBoatingDownBoat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameOfBoatingDownBoat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameOfBoating.CGameOfBoatingDownBoat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameOfBoating_2eproto);
    return ::descriptor_table_gameOfBoating_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoatIdFieldNumber = 1,
  };
  // int32 boatId = 1;
  void clear_boatid();
  ::PROTOBUF_NAMESPACE_ID::int32 boatid() const;
  void set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boatid() const;
  void _internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameOfBoating.CGameOfBoatingDownBoat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 boatid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameOfBoating_2eproto;
};
// -------------------------------------------------------------------

class SGameOfBoatingDownBoat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameOfBoating.SGameOfBoatingDownBoat) */ {
 public:
  SGameOfBoatingDownBoat();
  virtual ~SGameOfBoatingDownBoat();

  SGameOfBoatingDownBoat(const SGameOfBoatingDownBoat& from);
  SGameOfBoatingDownBoat(SGameOfBoatingDownBoat&& from) noexcept
    : SGameOfBoatingDownBoat() {
    *this = ::std::move(from);
  }

  inline SGameOfBoatingDownBoat& operator=(const SGameOfBoatingDownBoat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGameOfBoatingDownBoat& operator=(SGameOfBoatingDownBoat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGameOfBoatingDownBoat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGameOfBoatingDownBoat* internal_default_instance() {
    return reinterpret_cast<const SGameOfBoatingDownBoat*>(
               &_SGameOfBoatingDownBoat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SGameOfBoatingDownBoat& a, SGameOfBoatingDownBoat& b) {
    a.Swap(&b);
  }
  inline void Swap(SGameOfBoatingDownBoat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGameOfBoatingDownBoat* New() const final {
    return CreateMaybeMessage<SGameOfBoatingDownBoat>(nullptr);
  }

  SGameOfBoatingDownBoat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGameOfBoatingDownBoat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGameOfBoatingDownBoat& from);
  void MergeFrom(const SGameOfBoatingDownBoat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGameOfBoatingDownBoat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameOfBoating.SGameOfBoatingDownBoat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameOfBoating_2eproto);
    return ::descriptor_table_gameOfBoating_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 6,
    kBoatIdFieldNumber = 1,
    kLeftUidFieldNumber = 2,
    kRightUidFieldNumber = 3,
    kDownBoatUidFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string msg = 6;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 boatId = 1;
  void clear_boatid();
  ::PROTOBUF_NAMESPACE_ID::int32 boatid() const;
  void set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boatid() const;
  void _internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 leftUid = 2;
  void clear_leftuid();
  ::PROTOBUF_NAMESPACE_ID::int32 leftuid() const;
  void set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leftuid() const;
  void _internal_set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rightUid = 3;
  void clear_rightuid();
  ::PROTOBUF_NAMESPACE_ID::int32 rightuid() const;
  void set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rightuid() const;
  void _internal_set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DownBoatUid = 4;
  void clear_downboatuid();
  ::PROTOBUF_NAMESPACE_ID::int32 downboatuid() const;
  void set_downboatuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_downboatuid() const;
  void _internal_set_downboatuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameOfBoating.SGameOfBoatingDownBoat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 boatid_;
  ::PROTOBUF_NAMESPACE_ID::int32 leftuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rightuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 downboatuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameOfBoating_2eproto;
};
// -------------------------------------------------------------------

class CGameOfBoatingSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameOfBoating.CGameOfBoatingSuccess) */ {
 public:
  CGameOfBoatingSuccess();
  virtual ~CGameOfBoatingSuccess();

  CGameOfBoatingSuccess(const CGameOfBoatingSuccess& from);
  CGameOfBoatingSuccess(CGameOfBoatingSuccess&& from) noexcept
    : CGameOfBoatingSuccess() {
    *this = ::std::move(from);
  }

  inline CGameOfBoatingSuccess& operator=(const CGameOfBoatingSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameOfBoatingSuccess& operator=(CGameOfBoatingSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameOfBoatingSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameOfBoatingSuccess* internal_default_instance() {
    return reinterpret_cast<const CGameOfBoatingSuccess*>(
               &_CGameOfBoatingSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CGameOfBoatingSuccess& a, CGameOfBoatingSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameOfBoatingSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameOfBoatingSuccess* New() const final {
    return CreateMaybeMessage<CGameOfBoatingSuccess>(nullptr);
  }

  CGameOfBoatingSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameOfBoatingSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameOfBoatingSuccess& from);
  void MergeFrom(const CGameOfBoatingSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameOfBoatingSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameOfBoating.CGameOfBoatingSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameOfBoating_2eproto);
    return ::descriptor_table_gameOfBoating_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoatIdFieldNumber = 1,
    kTeammateUidFieldNumber = 2,
  };
  // int32 boatId = 1;
  void clear_boatid();
  ::PROTOBUF_NAMESPACE_ID::int32 boatid() const;
  void set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boatid() const;
  void _internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 teammateUid = 2;
  void clear_teammateuid();
  ::PROTOBUF_NAMESPACE_ID::int32 teammateuid() const;
  void set_teammateuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teammateuid() const;
  void _internal_set_teammateuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameOfBoating.CGameOfBoatingSuccess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 boatid_;
  ::PROTOBUF_NAMESPACE_ID::int32 teammateuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameOfBoating_2eproto;
};
// -------------------------------------------------------------------

class SGameOfBoatingSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameOfBoating.SGameOfBoatingSuccess) */ {
 public:
  SGameOfBoatingSuccess();
  virtual ~SGameOfBoatingSuccess();

  SGameOfBoatingSuccess(const SGameOfBoatingSuccess& from);
  SGameOfBoatingSuccess(SGameOfBoatingSuccess&& from) noexcept
    : SGameOfBoatingSuccess() {
    *this = ::std::move(from);
  }

  inline SGameOfBoatingSuccess& operator=(const SGameOfBoatingSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGameOfBoatingSuccess& operator=(SGameOfBoatingSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGameOfBoatingSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGameOfBoatingSuccess* internal_default_instance() {
    return reinterpret_cast<const SGameOfBoatingSuccess*>(
               &_SGameOfBoatingSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SGameOfBoatingSuccess& a, SGameOfBoatingSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(SGameOfBoatingSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGameOfBoatingSuccess* New() const final {
    return CreateMaybeMessage<SGameOfBoatingSuccess>(nullptr);
  }

  SGameOfBoatingSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGameOfBoatingSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGameOfBoatingSuccess& from);
  void MergeFrom(const SGameOfBoatingSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGameOfBoatingSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameOfBoating.SGameOfBoatingSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameOfBoating_2eproto);
    return ::descriptor_table_gameOfBoating_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 4,
    kTeammateNickFieldNumber = 5,
    kUserIconFieldNumber = 6,
    kTeammateUserIconFieldNumber = 7,
    kMsgFieldNumber = 8,
    kBoatIdFieldNumber = 1,
    kUidFieldNumber = 2,
    kTeammateUidFieldNumber = 3,
    kGameScoreFieldNumber = 9,
  };
  // string nick = 4;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string teammateNick = 5;
  void clear_teammatenick();
  const std::string& teammatenick() const;
  void set_teammatenick(const std::string& value);
  void set_teammatenick(std::string&& value);
  void set_teammatenick(const char* value);
  void set_teammatenick(const char* value, size_t size);
  std::string* mutable_teammatenick();
  std::string* release_teammatenick();
  void set_allocated_teammatenick(std::string* teammatenick);
  private:
  const std::string& _internal_teammatenick() const;
  void _internal_set_teammatenick(const std::string& value);
  std::string* _internal_mutable_teammatenick();
  public:

  // string userIcon = 6;
  void clear_usericon();
  const std::string& usericon() const;
  void set_usericon(const std::string& value);
  void set_usericon(std::string&& value);
  void set_usericon(const char* value);
  void set_usericon(const char* value, size_t size);
  std::string* mutable_usericon();
  std::string* release_usericon();
  void set_allocated_usericon(std::string* usericon);
  private:
  const std::string& _internal_usericon() const;
  void _internal_set_usericon(const std::string& value);
  std::string* _internal_mutable_usericon();
  public:

  // string teammateUserIcon = 7;
  void clear_teammateusericon();
  const std::string& teammateusericon() const;
  void set_teammateusericon(const std::string& value);
  void set_teammateusericon(std::string&& value);
  void set_teammateusericon(const char* value);
  void set_teammateusericon(const char* value, size_t size);
  std::string* mutable_teammateusericon();
  std::string* release_teammateusericon();
  void set_allocated_teammateusericon(std::string* teammateusericon);
  private:
  const std::string& _internal_teammateusericon() const;
  void _internal_set_teammateusericon(const std::string& value);
  std::string* _internal_mutable_teammateusericon();
  public:

  // string msg = 8;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 boatId = 1;
  void clear_boatid();
  ::PROTOBUF_NAMESPACE_ID::int32 boatid() const;
  void set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boatid() const;
  void _internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 teammateUid = 3;
  void clear_teammateuid();
  ::PROTOBUF_NAMESPACE_ID::int32 teammateuid() const;
  void set_teammateuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teammateuid() const;
  void _internal_set_teammateuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gameScore = 9;
  void clear_gamescore();
  ::PROTOBUF_NAMESPACE_ID::int32 gamescore() const;
  void set_gamescore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamescore() const;
  void _internal_set_gamescore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameOfBoating.SGameOfBoatingSuccess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teammatenick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usericon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teammateusericon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 boatid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 teammateuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameOfBoating_2eproto;
};
// -------------------------------------------------------------------

class CGameOfBoatingSynchronizeBoat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameOfBoating.CGameOfBoatingSynchronizeBoat) */ {
 public:
  CGameOfBoatingSynchronizeBoat();
  virtual ~CGameOfBoatingSynchronizeBoat();

  CGameOfBoatingSynchronizeBoat(const CGameOfBoatingSynchronizeBoat& from);
  CGameOfBoatingSynchronizeBoat(CGameOfBoatingSynchronizeBoat&& from) noexcept
    : CGameOfBoatingSynchronizeBoat() {
    *this = ::std::move(from);
  }

  inline CGameOfBoatingSynchronizeBoat& operator=(const CGameOfBoatingSynchronizeBoat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameOfBoatingSynchronizeBoat& operator=(CGameOfBoatingSynchronizeBoat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameOfBoatingSynchronizeBoat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameOfBoatingSynchronizeBoat* internal_default_instance() {
    return reinterpret_cast<const CGameOfBoatingSynchronizeBoat*>(
               &_CGameOfBoatingSynchronizeBoat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CGameOfBoatingSynchronizeBoat& a, CGameOfBoatingSynchronizeBoat& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameOfBoatingSynchronizeBoat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameOfBoatingSynchronizeBoat* New() const final {
    return CreateMaybeMessage<CGameOfBoatingSynchronizeBoat>(nullptr);
  }

  CGameOfBoatingSynchronizeBoat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameOfBoatingSynchronizeBoat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameOfBoatingSynchronizeBoat& from);
  void MergeFrom(const CGameOfBoatingSynchronizeBoat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameOfBoatingSynchronizeBoat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameOfBoating.CGameOfBoatingSynchronizeBoat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameOfBoating_2eproto);
    return ::descriptor_table_gameOfBoating_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberOfOperationsFieldNumber = 1,
    kXFieldNumber = 2,
    kZFieldNumber = 3,
    kYFieldNumber = 4,
    kRotationYFieldNumber = 5,
    kRotationXFieldNumber = 6,
    kRotationZFieldNumber = 7,
  };
  // int32 numberOfOperations = 1;
  void clear_numberofoperations();
  ::PROTOBUF_NAMESPACE_ID::int32 numberofoperations() const;
  void set_numberofoperations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numberofoperations() const;
  void _internal_set_numberofoperations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float rotationY = 5;
  void clear_rotationy();
  float rotationy() const;
  void set_rotationy(float value);
  private:
  float _internal_rotationy() const;
  void _internal_set_rotationy(float value);
  public:

  // float rotationX = 6;
  void clear_rotationx();
  float rotationx() const;
  void set_rotationx(float value);
  private:
  float _internal_rotationx() const;
  void _internal_set_rotationx(float value);
  public:

  // float rotationZ = 7;
  void clear_rotationz();
  float rotationz() const;
  void set_rotationz(float value);
  private:
  float _internal_rotationz() const;
  void _internal_set_rotationz(float value);
  public:

  // @@protoc_insertion_point(class_scope:gameOfBoating.CGameOfBoatingSynchronizeBoat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 numberofoperations_;
  float x_;
  float z_;
  float y_;
  float rotationy_;
  float rotationx_;
  float rotationz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameOfBoating_2eproto;
};
// -------------------------------------------------------------------

class SGameOfBoatingSynchronizeBoat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameOfBoating.SGameOfBoatingSynchronizeBoat) */ {
 public:
  SGameOfBoatingSynchronizeBoat();
  virtual ~SGameOfBoatingSynchronizeBoat();

  SGameOfBoatingSynchronizeBoat(const SGameOfBoatingSynchronizeBoat& from);
  SGameOfBoatingSynchronizeBoat(SGameOfBoatingSynchronizeBoat&& from) noexcept
    : SGameOfBoatingSynchronizeBoat() {
    *this = ::std::move(from);
  }

  inline SGameOfBoatingSynchronizeBoat& operator=(const SGameOfBoatingSynchronizeBoat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGameOfBoatingSynchronizeBoat& operator=(SGameOfBoatingSynchronizeBoat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGameOfBoatingSynchronizeBoat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGameOfBoatingSynchronizeBoat* internal_default_instance() {
    return reinterpret_cast<const SGameOfBoatingSynchronizeBoat*>(
               &_SGameOfBoatingSynchronizeBoat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SGameOfBoatingSynchronizeBoat& a, SGameOfBoatingSynchronizeBoat& b) {
    a.Swap(&b);
  }
  inline void Swap(SGameOfBoatingSynchronizeBoat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGameOfBoatingSynchronizeBoat* New() const final {
    return CreateMaybeMessage<SGameOfBoatingSynchronizeBoat>(nullptr);
  }

  SGameOfBoatingSynchronizeBoat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGameOfBoatingSynchronizeBoat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGameOfBoatingSynchronizeBoat& from);
  void MergeFrom(const SGameOfBoatingSynchronizeBoat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGameOfBoatingSynchronizeBoat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameOfBoating.SGameOfBoatingSynchronizeBoat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameOfBoating_2eproto);
    return ::descriptor_table_gameOfBoating_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kNumberOfOperationsFieldNumber = 2,
    kXFieldNumber = 3,
    kZFieldNumber = 4,
    kYFieldNumber = 5,
    kRotationYFieldNumber = 6,
    kRotationXFieldNumber = 7,
    kRotationZFieldNumber = 8,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 numberOfOperations = 2;
  void clear_numberofoperations();
  ::PROTOBUF_NAMESPACE_ID::int32 numberofoperations() const;
  void set_numberofoperations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numberofoperations() const;
  void _internal_set_numberofoperations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float rotationY = 6;
  void clear_rotationy();
  float rotationy() const;
  void set_rotationy(float value);
  private:
  float _internal_rotationy() const;
  void _internal_set_rotationy(float value);
  public:

  // float rotationX = 7;
  void clear_rotationx();
  float rotationx() const;
  void set_rotationx(float value);
  private:
  float _internal_rotationx() const;
  void _internal_set_rotationx(float value);
  public:

  // float rotationZ = 8;
  void clear_rotationz();
  float rotationz() const;
  void set_rotationz(float value);
  private:
  float _internal_rotationz() const;
  void _internal_set_rotationz(float value);
  public:

  // @@protoc_insertion_point(class_scope:gameOfBoating.SGameOfBoatingSynchronizeBoat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 numberofoperations_;
  float x_;
  float z_;
  float y_;
  float rotationy_;
  float rotationx_;
  float rotationz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameOfBoating_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameOfBoatingUpBoat

// int32 boatId = 1;
inline void CGameOfBoatingUpBoat::clear_boatid() {
  boatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingUpBoat::_internal_boatid() const {
  return boatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingUpBoat::boatid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingUpBoat.boatId)
  return _internal_boatid();
}
inline void CGameOfBoatingUpBoat::_internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boatid_ = value;
}
inline void CGameOfBoatingUpBoat::set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boatid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingUpBoat.boatId)
}

// -------------------------------------------------------------------

// SGameOfBoatingUpBoat

// int32 boatId = 1;
inline void SGameOfBoatingUpBoat::clear_boatid() {
  boatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::_internal_boatid() const {
  return boatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::boatid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingUpBoat.boatId)
  return _internal_boatid();
}
inline void SGameOfBoatingUpBoat::_internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boatid_ = value;
}
inline void SGameOfBoatingUpBoat::set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boatid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingUpBoat.boatId)
}

// int32 leftUid = 2;
inline void SGameOfBoatingUpBoat::clear_leftuid() {
  leftuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::_internal_leftuid() const {
  return leftuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::leftuid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingUpBoat.leftUid)
  return _internal_leftuid();
}
inline void SGameOfBoatingUpBoat::_internal_set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leftuid_ = value;
}
inline void SGameOfBoatingUpBoat::set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leftuid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingUpBoat.leftUid)
}

// int32 rightUid = 3;
inline void SGameOfBoatingUpBoat::clear_rightuid() {
  rightuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::_internal_rightuid() const {
  return rightuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::rightuid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingUpBoat.rightUid)
  return _internal_rightuid();
}
inline void SGameOfBoatingUpBoat::_internal_set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rightuid_ = value;
}
inline void SGameOfBoatingUpBoat::set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rightuid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingUpBoat.rightUid)
}

// int32 upBoatUid = 4;
inline void SGameOfBoatingUpBoat::clear_upboatuid() {
  upboatuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::_internal_upboatuid() const {
  return upboatuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::upboatuid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingUpBoat.upBoatUid)
  return _internal_upboatuid();
}
inline void SGameOfBoatingUpBoat::_internal_set_upboatuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  upboatuid_ = value;
}
inline void SGameOfBoatingUpBoat::set_upboatuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upboatuid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingUpBoat.upBoatUid)
}

// int32 status = 5;
inline void SGameOfBoatingUpBoat::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingUpBoat::status() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingUpBoat.status)
  return _internal_status();
}
inline void SGameOfBoatingUpBoat::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SGameOfBoatingUpBoat::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingUpBoat.status)
}

// string msg = 6;
inline void SGameOfBoatingUpBoat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGameOfBoatingUpBoat::msg() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingUpBoat.msg)
  return _internal_msg();
}
inline void SGameOfBoatingUpBoat::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingUpBoat.msg)
}
inline std::string* SGameOfBoatingUpBoat::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:gameOfBoating.SGameOfBoatingUpBoat.msg)
  return _internal_mutable_msg();
}
inline const std::string& SGameOfBoatingUpBoat::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SGameOfBoatingUpBoat::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGameOfBoatingUpBoat::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameOfBoating.SGameOfBoatingUpBoat.msg)
}
inline void SGameOfBoatingUpBoat::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameOfBoating.SGameOfBoatingUpBoat.msg)
}
inline void SGameOfBoatingUpBoat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameOfBoating.SGameOfBoatingUpBoat.msg)
}
inline std::string* SGameOfBoatingUpBoat::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGameOfBoatingUpBoat::release_msg() {
  // @@protoc_insertion_point(field_release:gameOfBoating.SGameOfBoatingUpBoat.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGameOfBoatingUpBoat::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gameOfBoating.SGameOfBoatingUpBoat.msg)
}

// -------------------------------------------------------------------

// CGameOfBoatingDownBoat

// int32 boatId = 1;
inline void CGameOfBoatingDownBoat::clear_boatid() {
  boatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingDownBoat::_internal_boatid() const {
  return boatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingDownBoat::boatid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingDownBoat.boatId)
  return _internal_boatid();
}
inline void CGameOfBoatingDownBoat::_internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boatid_ = value;
}
inline void CGameOfBoatingDownBoat::set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boatid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingDownBoat.boatId)
}

// -------------------------------------------------------------------

// SGameOfBoatingDownBoat

// int32 boatId = 1;
inline void SGameOfBoatingDownBoat::clear_boatid() {
  boatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::_internal_boatid() const {
  return boatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::boatid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingDownBoat.boatId)
  return _internal_boatid();
}
inline void SGameOfBoatingDownBoat::_internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boatid_ = value;
}
inline void SGameOfBoatingDownBoat::set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boatid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingDownBoat.boatId)
}

// int32 leftUid = 2;
inline void SGameOfBoatingDownBoat::clear_leftuid() {
  leftuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::_internal_leftuid() const {
  return leftuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::leftuid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingDownBoat.leftUid)
  return _internal_leftuid();
}
inline void SGameOfBoatingDownBoat::_internal_set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leftuid_ = value;
}
inline void SGameOfBoatingDownBoat::set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leftuid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingDownBoat.leftUid)
}

// int32 rightUid = 3;
inline void SGameOfBoatingDownBoat::clear_rightuid() {
  rightuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::_internal_rightuid() const {
  return rightuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::rightuid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingDownBoat.rightUid)
  return _internal_rightuid();
}
inline void SGameOfBoatingDownBoat::_internal_set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rightuid_ = value;
}
inline void SGameOfBoatingDownBoat::set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rightuid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingDownBoat.rightUid)
}

// int32 DownBoatUid = 4;
inline void SGameOfBoatingDownBoat::clear_downboatuid() {
  downboatuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::_internal_downboatuid() const {
  return downboatuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::downboatuid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingDownBoat.DownBoatUid)
  return _internal_downboatuid();
}
inline void SGameOfBoatingDownBoat::_internal_set_downboatuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  downboatuid_ = value;
}
inline void SGameOfBoatingDownBoat::set_downboatuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_downboatuid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingDownBoat.DownBoatUid)
}

// int32 status = 5;
inline void SGameOfBoatingDownBoat::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingDownBoat::status() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingDownBoat.status)
  return _internal_status();
}
inline void SGameOfBoatingDownBoat::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SGameOfBoatingDownBoat::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingDownBoat.status)
}

// string msg = 6;
inline void SGameOfBoatingDownBoat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGameOfBoatingDownBoat::msg() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingDownBoat.msg)
  return _internal_msg();
}
inline void SGameOfBoatingDownBoat::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingDownBoat.msg)
}
inline std::string* SGameOfBoatingDownBoat::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:gameOfBoating.SGameOfBoatingDownBoat.msg)
  return _internal_mutable_msg();
}
inline const std::string& SGameOfBoatingDownBoat::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SGameOfBoatingDownBoat::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGameOfBoatingDownBoat::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameOfBoating.SGameOfBoatingDownBoat.msg)
}
inline void SGameOfBoatingDownBoat::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameOfBoating.SGameOfBoatingDownBoat.msg)
}
inline void SGameOfBoatingDownBoat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameOfBoating.SGameOfBoatingDownBoat.msg)
}
inline std::string* SGameOfBoatingDownBoat::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGameOfBoatingDownBoat::release_msg() {
  // @@protoc_insertion_point(field_release:gameOfBoating.SGameOfBoatingDownBoat.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGameOfBoatingDownBoat::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gameOfBoating.SGameOfBoatingDownBoat.msg)
}

// -------------------------------------------------------------------

// CGameOfBoatingSuccess

// int32 boatId = 1;
inline void CGameOfBoatingSuccess::clear_boatid() {
  boatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingSuccess::_internal_boatid() const {
  return boatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingSuccess::boatid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingSuccess.boatId)
  return _internal_boatid();
}
inline void CGameOfBoatingSuccess::_internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boatid_ = value;
}
inline void CGameOfBoatingSuccess::set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boatid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingSuccess.boatId)
}

// int32 teammateUid = 2;
inline void CGameOfBoatingSuccess::clear_teammateuid() {
  teammateuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingSuccess::_internal_teammateuid() const {
  return teammateuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingSuccess::teammateuid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingSuccess.teammateUid)
  return _internal_teammateuid();
}
inline void CGameOfBoatingSuccess::_internal_set_teammateuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  teammateuid_ = value;
}
inline void CGameOfBoatingSuccess::set_teammateuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teammateuid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingSuccess.teammateUid)
}

// -------------------------------------------------------------------

// SGameOfBoatingSuccess

// int32 boatId = 1;
inline void SGameOfBoatingSuccess::clear_boatid() {
  boatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSuccess::_internal_boatid() const {
  return boatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSuccess::boatid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSuccess.boatId)
  return _internal_boatid();
}
inline void SGameOfBoatingSuccess::_internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boatid_ = value;
}
inline void SGameOfBoatingSuccess::set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boatid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSuccess.boatId)
}

// int32 uid = 2;
inline void SGameOfBoatingSuccess::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSuccess::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSuccess::uid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSuccess.uid)
  return _internal_uid();
}
inline void SGameOfBoatingSuccess::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SGameOfBoatingSuccess::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSuccess.uid)
}

// int32 teammateUid = 3;
inline void SGameOfBoatingSuccess::clear_teammateuid() {
  teammateuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSuccess::_internal_teammateuid() const {
  return teammateuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSuccess::teammateuid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSuccess.teammateUid)
  return _internal_teammateuid();
}
inline void SGameOfBoatingSuccess::_internal_set_teammateuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  teammateuid_ = value;
}
inline void SGameOfBoatingSuccess::set_teammateuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teammateuid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSuccess.teammateUid)
}

// string nick = 4;
inline void SGameOfBoatingSuccess::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGameOfBoatingSuccess::nick() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSuccess.nick)
  return _internal_nick();
}
inline void SGameOfBoatingSuccess::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSuccess.nick)
}
inline std::string* SGameOfBoatingSuccess::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:gameOfBoating.SGameOfBoatingSuccess.nick)
  return _internal_mutable_nick();
}
inline const std::string& SGameOfBoatingSuccess::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void SGameOfBoatingSuccess::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGameOfBoatingSuccess::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameOfBoating.SGameOfBoatingSuccess.nick)
}
inline void SGameOfBoatingSuccess::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameOfBoating.SGameOfBoatingSuccess.nick)
}
inline void SGameOfBoatingSuccess::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameOfBoating.SGameOfBoatingSuccess.nick)
}
inline std::string* SGameOfBoatingSuccess::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGameOfBoatingSuccess::release_nick() {
  // @@protoc_insertion_point(field_release:gameOfBoating.SGameOfBoatingSuccess.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGameOfBoatingSuccess::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:gameOfBoating.SGameOfBoatingSuccess.nick)
}

// string teammateNick = 5;
inline void SGameOfBoatingSuccess::clear_teammatenick() {
  teammatenick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGameOfBoatingSuccess::teammatenick() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSuccess.teammateNick)
  return _internal_teammatenick();
}
inline void SGameOfBoatingSuccess::set_teammatenick(const std::string& value) {
  _internal_set_teammatenick(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSuccess.teammateNick)
}
inline std::string* SGameOfBoatingSuccess::mutable_teammatenick() {
  // @@protoc_insertion_point(field_mutable:gameOfBoating.SGameOfBoatingSuccess.teammateNick)
  return _internal_mutable_teammatenick();
}
inline const std::string& SGameOfBoatingSuccess::_internal_teammatenick() const {
  return teammatenick_.GetNoArena();
}
inline void SGameOfBoatingSuccess::_internal_set_teammatenick(const std::string& value) {
  
  teammatenick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGameOfBoatingSuccess::set_teammatenick(std::string&& value) {
  
  teammatenick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameOfBoating.SGameOfBoatingSuccess.teammateNick)
}
inline void SGameOfBoatingSuccess::set_teammatenick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  teammatenick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameOfBoating.SGameOfBoatingSuccess.teammateNick)
}
inline void SGameOfBoatingSuccess::set_teammatenick(const char* value, size_t size) {
  
  teammatenick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameOfBoating.SGameOfBoatingSuccess.teammateNick)
}
inline std::string* SGameOfBoatingSuccess::_internal_mutable_teammatenick() {
  
  return teammatenick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGameOfBoatingSuccess::release_teammatenick() {
  // @@protoc_insertion_point(field_release:gameOfBoating.SGameOfBoatingSuccess.teammateNick)
  
  return teammatenick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGameOfBoatingSuccess::set_allocated_teammatenick(std::string* teammatenick) {
  if (teammatenick != nullptr) {
    
  } else {
    
  }
  teammatenick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teammatenick);
  // @@protoc_insertion_point(field_set_allocated:gameOfBoating.SGameOfBoatingSuccess.teammateNick)
}

// string userIcon = 6;
inline void SGameOfBoatingSuccess::clear_usericon() {
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGameOfBoatingSuccess::usericon() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSuccess.userIcon)
  return _internal_usericon();
}
inline void SGameOfBoatingSuccess::set_usericon(const std::string& value) {
  _internal_set_usericon(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSuccess.userIcon)
}
inline std::string* SGameOfBoatingSuccess::mutable_usericon() {
  // @@protoc_insertion_point(field_mutable:gameOfBoating.SGameOfBoatingSuccess.userIcon)
  return _internal_mutable_usericon();
}
inline const std::string& SGameOfBoatingSuccess::_internal_usericon() const {
  return usericon_.GetNoArena();
}
inline void SGameOfBoatingSuccess::_internal_set_usericon(const std::string& value) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGameOfBoatingSuccess::set_usericon(std::string&& value) {
  
  usericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameOfBoating.SGameOfBoatingSuccess.userIcon)
}
inline void SGameOfBoatingSuccess::set_usericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameOfBoating.SGameOfBoatingSuccess.userIcon)
}
inline void SGameOfBoatingSuccess::set_usericon(const char* value, size_t size) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameOfBoating.SGameOfBoatingSuccess.userIcon)
}
inline std::string* SGameOfBoatingSuccess::_internal_mutable_usericon() {
  
  return usericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGameOfBoatingSuccess::release_usericon() {
  // @@protoc_insertion_point(field_release:gameOfBoating.SGameOfBoatingSuccess.userIcon)
  
  return usericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGameOfBoatingSuccess::set_allocated_usericon(std::string* usericon) {
  if (usericon != nullptr) {
    
  } else {
    
  }
  usericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usericon);
  // @@protoc_insertion_point(field_set_allocated:gameOfBoating.SGameOfBoatingSuccess.userIcon)
}

// string teammateUserIcon = 7;
inline void SGameOfBoatingSuccess::clear_teammateusericon() {
  teammateusericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGameOfBoatingSuccess::teammateusericon() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon)
  return _internal_teammateusericon();
}
inline void SGameOfBoatingSuccess::set_teammateusericon(const std::string& value) {
  _internal_set_teammateusericon(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon)
}
inline std::string* SGameOfBoatingSuccess::mutable_teammateusericon() {
  // @@protoc_insertion_point(field_mutable:gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon)
  return _internal_mutable_teammateusericon();
}
inline const std::string& SGameOfBoatingSuccess::_internal_teammateusericon() const {
  return teammateusericon_.GetNoArena();
}
inline void SGameOfBoatingSuccess::_internal_set_teammateusericon(const std::string& value) {
  
  teammateusericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGameOfBoatingSuccess::set_teammateusericon(std::string&& value) {
  
  teammateusericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon)
}
inline void SGameOfBoatingSuccess::set_teammateusericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  teammateusericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon)
}
inline void SGameOfBoatingSuccess::set_teammateusericon(const char* value, size_t size) {
  
  teammateusericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon)
}
inline std::string* SGameOfBoatingSuccess::_internal_mutable_teammateusericon() {
  
  return teammateusericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGameOfBoatingSuccess::release_teammateusericon() {
  // @@protoc_insertion_point(field_release:gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon)
  
  return teammateusericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGameOfBoatingSuccess::set_allocated_teammateusericon(std::string* teammateusericon) {
  if (teammateusericon != nullptr) {
    
  } else {
    
  }
  teammateusericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teammateusericon);
  // @@protoc_insertion_point(field_set_allocated:gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon)
}

// string msg = 8;
inline void SGameOfBoatingSuccess::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGameOfBoatingSuccess::msg() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSuccess.msg)
  return _internal_msg();
}
inline void SGameOfBoatingSuccess::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSuccess.msg)
}
inline std::string* SGameOfBoatingSuccess::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:gameOfBoating.SGameOfBoatingSuccess.msg)
  return _internal_mutable_msg();
}
inline const std::string& SGameOfBoatingSuccess::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SGameOfBoatingSuccess::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGameOfBoatingSuccess::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameOfBoating.SGameOfBoatingSuccess.msg)
}
inline void SGameOfBoatingSuccess::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameOfBoating.SGameOfBoatingSuccess.msg)
}
inline void SGameOfBoatingSuccess::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameOfBoating.SGameOfBoatingSuccess.msg)
}
inline std::string* SGameOfBoatingSuccess::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGameOfBoatingSuccess::release_msg() {
  // @@protoc_insertion_point(field_release:gameOfBoating.SGameOfBoatingSuccess.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGameOfBoatingSuccess::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gameOfBoating.SGameOfBoatingSuccess.msg)
}

// int32 gameScore = 9;
inline void SGameOfBoatingSuccess::clear_gamescore() {
  gamescore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSuccess::_internal_gamescore() const {
  return gamescore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSuccess::gamescore() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSuccess.gameScore)
  return _internal_gamescore();
}
inline void SGameOfBoatingSuccess::_internal_set_gamescore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gamescore_ = value;
}
inline void SGameOfBoatingSuccess::set_gamescore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamescore(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSuccess.gameScore)
}

// -------------------------------------------------------------------

// CGameOfBoatingSynchronizeBoat

// int32 numberOfOperations = 1;
inline void CGameOfBoatingSynchronizeBoat::clear_numberofoperations() {
  numberofoperations_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingSynchronizeBoat::_internal_numberofoperations() const {
  return numberofoperations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameOfBoatingSynchronizeBoat::numberofoperations() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingSynchronizeBoat.numberOfOperations)
  return _internal_numberofoperations();
}
inline void CGameOfBoatingSynchronizeBoat::_internal_set_numberofoperations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numberofoperations_ = value;
}
inline void CGameOfBoatingSynchronizeBoat::set_numberofoperations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numberofoperations(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingSynchronizeBoat.numberOfOperations)
}

// float x = 2;
inline void CGameOfBoatingSynchronizeBoat::clear_x() {
  x_ = 0;
}
inline float CGameOfBoatingSynchronizeBoat::_internal_x() const {
  return x_;
}
inline float CGameOfBoatingSynchronizeBoat::x() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingSynchronizeBoat.x)
  return _internal_x();
}
inline void CGameOfBoatingSynchronizeBoat::_internal_set_x(float value) {
  
  x_ = value;
}
inline void CGameOfBoatingSynchronizeBoat::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingSynchronizeBoat.x)
}

// float z = 3;
inline void CGameOfBoatingSynchronizeBoat::clear_z() {
  z_ = 0;
}
inline float CGameOfBoatingSynchronizeBoat::_internal_z() const {
  return z_;
}
inline float CGameOfBoatingSynchronizeBoat::z() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingSynchronizeBoat.z)
  return _internal_z();
}
inline void CGameOfBoatingSynchronizeBoat::_internal_set_z(float value) {
  
  z_ = value;
}
inline void CGameOfBoatingSynchronizeBoat::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingSynchronizeBoat.z)
}

// float y = 4;
inline void CGameOfBoatingSynchronizeBoat::clear_y() {
  y_ = 0;
}
inline float CGameOfBoatingSynchronizeBoat::_internal_y() const {
  return y_;
}
inline float CGameOfBoatingSynchronizeBoat::y() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingSynchronizeBoat.y)
  return _internal_y();
}
inline void CGameOfBoatingSynchronizeBoat::_internal_set_y(float value) {
  
  y_ = value;
}
inline void CGameOfBoatingSynchronizeBoat::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingSynchronizeBoat.y)
}

// float rotationY = 5;
inline void CGameOfBoatingSynchronizeBoat::clear_rotationy() {
  rotationy_ = 0;
}
inline float CGameOfBoatingSynchronizeBoat::_internal_rotationy() const {
  return rotationy_;
}
inline float CGameOfBoatingSynchronizeBoat::rotationy() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingSynchronizeBoat.rotationY)
  return _internal_rotationy();
}
inline void CGameOfBoatingSynchronizeBoat::_internal_set_rotationy(float value) {
  
  rotationy_ = value;
}
inline void CGameOfBoatingSynchronizeBoat::set_rotationy(float value) {
  _internal_set_rotationy(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingSynchronizeBoat.rotationY)
}

// float rotationX = 6;
inline void CGameOfBoatingSynchronizeBoat::clear_rotationx() {
  rotationx_ = 0;
}
inline float CGameOfBoatingSynchronizeBoat::_internal_rotationx() const {
  return rotationx_;
}
inline float CGameOfBoatingSynchronizeBoat::rotationx() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingSynchronizeBoat.rotationX)
  return _internal_rotationx();
}
inline void CGameOfBoatingSynchronizeBoat::_internal_set_rotationx(float value) {
  
  rotationx_ = value;
}
inline void CGameOfBoatingSynchronizeBoat::set_rotationx(float value) {
  _internal_set_rotationx(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingSynchronizeBoat.rotationX)
}

// float rotationZ = 7;
inline void CGameOfBoatingSynchronizeBoat::clear_rotationz() {
  rotationz_ = 0;
}
inline float CGameOfBoatingSynchronizeBoat::_internal_rotationz() const {
  return rotationz_;
}
inline float CGameOfBoatingSynchronizeBoat::rotationz() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.CGameOfBoatingSynchronizeBoat.rotationZ)
  return _internal_rotationz();
}
inline void CGameOfBoatingSynchronizeBoat::_internal_set_rotationz(float value) {
  
  rotationz_ = value;
}
inline void CGameOfBoatingSynchronizeBoat::set_rotationz(float value) {
  _internal_set_rotationz(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.CGameOfBoatingSynchronizeBoat.rotationZ)
}

// -------------------------------------------------------------------

// SGameOfBoatingSynchronizeBoat

// int32 uid = 1;
inline void SGameOfBoatingSynchronizeBoat::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSynchronizeBoat::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSynchronizeBoat::uid() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSynchronizeBoat.uid)
  return _internal_uid();
}
inline void SGameOfBoatingSynchronizeBoat::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SGameOfBoatingSynchronizeBoat::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSynchronizeBoat.uid)
}

// int32 numberOfOperations = 2;
inline void SGameOfBoatingSynchronizeBoat::clear_numberofoperations() {
  numberofoperations_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSynchronizeBoat::_internal_numberofoperations() const {
  return numberofoperations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameOfBoatingSynchronizeBoat::numberofoperations() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSynchronizeBoat.numberOfOperations)
  return _internal_numberofoperations();
}
inline void SGameOfBoatingSynchronizeBoat::_internal_set_numberofoperations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numberofoperations_ = value;
}
inline void SGameOfBoatingSynchronizeBoat::set_numberofoperations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numberofoperations(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSynchronizeBoat.numberOfOperations)
}

// float x = 3;
inline void SGameOfBoatingSynchronizeBoat::clear_x() {
  x_ = 0;
}
inline float SGameOfBoatingSynchronizeBoat::_internal_x() const {
  return x_;
}
inline float SGameOfBoatingSynchronizeBoat::x() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSynchronizeBoat.x)
  return _internal_x();
}
inline void SGameOfBoatingSynchronizeBoat::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SGameOfBoatingSynchronizeBoat::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSynchronizeBoat.x)
}

// float z = 4;
inline void SGameOfBoatingSynchronizeBoat::clear_z() {
  z_ = 0;
}
inline float SGameOfBoatingSynchronizeBoat::_internal_z() const {
  return z_;
}
inline float SGameOfBoatingSynchronizeBoat::z() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSynchronizeBoat.z)
  return _internal_z();
}
inline void SGameOfBoatingSynchronizeBoat::_internal_set_z(float value) {
  
  z_ = value;
}
inline void SGameOfBoatingSynchronizeBoat::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSynchronizeBoat.z)
}

// float y = 5;
inline void SGameOfBoatingSynchronizeBoat::clear_y() {
  y_ = 0;
}
inline float SGameOfBoatingSynchronizeBoat::_internal_y() const {
  return y_;
}
inline float SGameOfBoatingSynchronizeBoat::y() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSynchronizeBoat.y)
  return _internal_y();
}
inline void SGameOfBoatingSynchronizeBoat::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SGameOfBoatingSynchronizeBoat::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSynchronizeBoat.y)
}

// float rotationY = 6;
inline void SGameOfBoatingSynchronizeBoat::clear_rotationy() {
  rotationy_ = 0;
}
inline float SGameOfBoatingSynchronizeBoat::_internal_rotationy() const {
  return rotationy_;
}
inline float SGameOfBoatingSynchronizeBoat::rotationy() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSynchronizeBoat.rotationY)
  return _internal_rotationy();
}
inline void SGameOfBoatingSynchronizeBoat::_internal_set_rotationy(float value) {
  
  rotationy_ = value;
}
inline void SGameOfBoatingSynchronizeBoat::set_rotationy(float value) {
  _internal_set_rotationy(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSynchronizeBoat.rotationY)
}

// float rotationX = 7;
inline void SGameOfBoatingSynchronizeBoat::clear_rotationx() {
  rotationx_ = 0;
}
inline float SGameOfBoatingSynchronizeBoat::_internal_rotationx() const {
  return rotationx_;
}
inline float SGameOfBoatingSynchronizeBoat::rotationx() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSynchronizeBoat.rotationX)
  return _internal_rotationx();
}
inline void SGameOfBoatingSynchronizeBoat::_internal_set_rotationx(float value) {
  
  rotationx_ = value;
}
inline void SGameOfBoatingSynchronizeBoat::set_rotationx(float value) {
  _internal_set_rotationx(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSynchronizeBoat.rotationX)
}

// float rotationZ = 8;
inline void SGameOfBoatingSynchronizeBoat::clear_rotationz() {
  rotationz_ = 0;
}
inline float SGameOfBoatingSynchronizeBoat::_internal_rotationz() const {
  return rotationz_;
}
inline float SGameOfBoatingSynchronizeBoat::rotationz() const {
  // @@protoc_insertion_point(field_get:gameOfBoating.SGameOfBoatingSynchronizeBoat.rotationZ)
  return _internal_rotationz();
}
inline void SGameOfBoatingSynchronizeBoat::_internal_set_rotationz(float value) {
  
  rotationz_ = value;
}
inline void SGameOfBoatingSynchronizeBoat::set_rotationz(float value) {
  _internal_set_rotationz(value);
  // @@protoc_insertion_point(field_set:gameOfBoating.SGameOfBoatingSynchronizeBoat.rotationZ)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameOfBoating

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gameOfBoating_2eproto
