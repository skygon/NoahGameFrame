// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xiangshan.proto

#include "xiangshan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_xiangshan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BXiangshanChairStateInfo_xiangshan_2eproto;
namespace xiangshan {
class CXiangshanVisitLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CXiangshanVisitLog> _instance;
} _CXiangshanVisitLog_default_instance_;
class SXiangshanVisitLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SXiangshanVisitLog> _instance;
} _SXiangshanVisitLog_default_instance_;
class CXiangshanScreenSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CXiangshanScreenSource> _instance;
} _CXiangshanScreenSource_default_instance_;
class SXiangshanScreenSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SXiangshanScreenSource> _instance;
} _SXiangshanScreenSource_default_instance_;
class CXiangshanChairActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CXiangshanChairAction> _instance;
} _CXiangshanChairAction_default_instance_;
class SXiangshanChairActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SXiangshanChairAction> _instance;
} _SXiangshanChairAction_default_instance_;
class CXiangshanChairStateListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CXiangshanChairStateList> _instance;
} _CXiangshanChairStateList_default_instance_;
class SXiangshanChairStateListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SXiangshanChairStateList> _instance;
} _SXiangshanChairStateList_default_instance_;
class BXiangshanChairStateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BXiangshanChairStateInfo> _instance;
} _BXiangshanChairStateInfo_default_instance_;
}  // namespace xiangshan
static void InitDefaultsscc_info_BXiangshanChairStateInfo_xiangshan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xiangshan::_BXiangshanChairStateInfo_default_instance_;
    new (ptr) ::xiangshan::BXiangshanChairStateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xiangshan::BXiangshanChairStateInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BXiangshanChairStateInfo_xiangshan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BXiangshanChairStateInfo_xiangshan_2eproto}, {}};

static void InitDefaultsscc_info_CXiangshanChairAction_xiangshan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xiangshan::_CXiangshanChairAction_default_instance_;
    new (ptr) ::xiangshan::CXiangshanChairAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xiangshan::CXiangshanChairAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CXiangshanChairAction_xiangshan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CXiangshanChairAction_xiangshan_2eproto}, {}};

static void InitDefaultsscc_info_CXiangshanChairStateList_xiangshan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xiangshan::_CXiangshanChairStateList_default_instance_;
    new (ptr) ::xiangshan::CXiangshanChairStateList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xiangshan::CXiangshanChairStateList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CXiangshanChairStateList_xiangshan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CXiangshanChairStateList_xiangshan_2eproto}, {}};

static void InitDefaultsscc_info_CXiangshanScreenSource_xiangshan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xiangshan::_CXiangshanScreenSource_default_instance_;
    new (ptr) ::xiangshan::CXiangshanScreenSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xiangshan::CXiangshanScreenSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CXiangshanScreenSource_xiangshan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CXiangshanScreenSource_xiangshan_2eproto}, {}};

static void InitDefaultsscc_info_CXiangshanVisitLog_xiangshan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xiangshan::_CXiangshanVisitLog_default_instance_;
    new (ptr) ::xiangshan::CXiangshanVisitLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xiangshan::CXiangshanVisitLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CXiangshanVisitLog_xiangshan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CXiangshanVisitLog_xiangshan_2eproto}, {}};

static void InitDefaultsscc_info_SXiangshanChairAction_xiangshan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xiangshan::_SXiangshanChairAction_default_instance_;
    new (ptr) ::xiangshan::SXiangshanChairAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xiangshan::SXiangshanChairAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SXiangshanChairAction_xiangshan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SXiangshanChairAction_xiangshan_2eproto}, {}};

static void InitDefaultsscc_info_SXiangshanChairStateList_xiangshan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xiangshan::_SXiangshanChairStateList_default_instance_;
    new (ptr) ::xiangshan::SXiangshanChairStateList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xiangshan::SXiangshanChairStateList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SXiangshanChairStateList_xiangshan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SXiangshanChairStateList_xiangshan_2eproto}, {
      &scc_info_BXiangshanChairStateInfo_xiangshan_2eproto.base,}};

static void InitDefaultsscc_info_SXiangshanScreenSource_xiangshan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xiangshan::_SXiangshanScreenSource_default_instance_;
    new (ptr) ::xiangshan::SXiangshanScreenSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xiangshan::SXiangshanScreenSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SXiangshanScreenSource_xiangshan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SXiangshanScreenSource_xiangshan_2eproto}, {}};

static void InitDefaultsscc_info_SXiangshanVisitLog_xiangshan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xiangshan::_SXiangshanVisitLog_default_instance_;
    new (ptr) ::xiangshan::SXiangshanVisitLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xiangshan::SXiangshanVisitLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SXiangshanVisitLog_xiangshan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SXiangshanVisitLog_xiangshan_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_xiangshan_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_xiangshan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_xiangshan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_xiangshan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xiangshan::CXiangshanVisitLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xiangshan::CXiangshanVisitLog, actionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanVisitLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanVisitLog, uid_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanVisitLog, isfirst_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanVisitLog, actionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xiangshan::CXiangshanScreenSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, source_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, source2_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, source3_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, daynight_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, beijingfinancedaynight_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, beijingfinancesource1_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, beijingfinancesource2_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, beijingfinancesource3_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, beijingfinancesource4_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, beijingfinancesource5_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, beijingfinancesource6_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanScreenSource, beijingfinancesource7_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xiangshan::CXiangshanChairAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xiangshan::CXiangshanChairAction, action_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::CXiangshanChairAction, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanChairAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanChairAction, uid_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanChairAction, state_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanChairAction, msg_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanChairAction, action_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanChairAction, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xiangshan::CXiangshanChairStateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanChairStateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xiangshan::SXiangshanChairStateList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xiangshan::BXiangshanChairStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xiangshan::BXiangshanChairStateInfo, number_),
  PROTOBUF_FIELD_OFFSET(::xiangshan::BXiangshanChairStateInfo, uid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xiangshan::CXiangshanVisitLog)},
  { 6, -1, sizeof(::xiangshan::SXiangshanVisitLog)},
  { 14, -1, sizeof(::xiangshan::CXiangshanScreenSource)},
  { 19, -1, sizeof(::xiangshan::SXiangshanScreenSource)},
  { 36, -1, sizeof(::xiangshan::CXiangshanChairAction)},
  { 43, -1, sizeof(::xiangshan::SXiangshanChairAction)},
  { 53, -1, sizeof(::xiangshan::CXiangshanChairStateList)},
  { 58, -1, sizeof(::xiangshan::SXiangshanChairStateList)},
  { 64, -1, sizeof(::xiangshan::BXiangshanChairStateInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xiangshan::_CXiangshanVisitLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xiangshan::_SXiangshanVisitLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xiangshan::_CXiangshanScreenSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xiangshan::_SXiangshanScreenSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xiangshan::_CXiangshanChairAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xiangshan::_SXiangshanChairAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xiangshan::_CXiangshanChairStateList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xiangshan::_SXiangshanChairStateList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xiangshan::_BXiangshanChairStateInfo_default_instance_),
};

const char descriptor_table_protodef_xiangshan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017xiangshan.proto\022\txiangshan\"&\n\022CXiangsh"
  "anVisitLog\022\020\n\010actionId\030\001 \001(\005\"D\n\022SXiangsh"
  "anVisitLog\022\013\n\003uid\030\001 \001(\005\022\017\n\007isFirst\030\002 \001(\005"
  "\022\020\n\010actionId\030\003 \001(\005\"\030\n\026CXiangshanScreenSo"
  "urce\"\325\002\n\026SXiangshanScreenSource\022\016\n\006sourc"
  "e\030\001 \001(\005\022\017\n\007source2\030\002 \001(\005\022\017\n\007source3\030\003 \001("
  "\005\022\020\n\010daynight\030\004 \001(\005\022\036\n\026beijingFinanceDay"
  "night\030\005 \001(\005\022\035\n\025beijingFinanceSource1\030\006 \001"
  "(\005\022\035\n\025beijingFinanceSource2\030\007 \001(\005\022\035\n\025bei"
  "jingFinanceSource3\030\010 \001(\005\022\035\n\025beijingFinan"
  "ceSource4\030\t \001(\005\022\035\n\025beijingFinanceSource5"
  "\030\n \001(\005\022\035\n\025beijingFinanceSource6\030\013 \001(\005\022\035\n"
  "\025beijingFinanceSource7\030\014 \001(\005\"7\n\025CXiangsh"
  "anChairAction\022\016\n\006action\030\001 \001(\005\022\016\n\006number\030"
  "\002 \001(\005\"`\n\025SXiangshanChairAction\022\013\n\003uid\030\001 "
  "\001(\005\022\r\n\005state\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\022\016\n\006actio"
  "n\030\004 \001(\005\022\016\n\006number\030\005 \001(\005\"\032\n\030CXiangshanCha"
  "irStateList\"M\n\030SXiangshanChairStateList\022"
  "1\n\004list\030\001 \003(\0132#.xiangshan.BXiangshanChai"
  "rStateInfo\"7\n\030BXiangshanChairStateInfo\022\016"
  "\n\006number\030\001 \001(\005\022\013\n\003uid\030\002 \001(\005B\014Z\005./;pb\252\002\002P"
  "bb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_xiangshan_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_xiangshan_2eproto_sccs[9] = {
  &scc_info_BXiangshanChairStateInfo_xiangshan_2eproto.base,
  &scc_info_CXiangshanChairAction_xiangshan_2eproto.base,
  &scc_info_CXiangshanChairStateList_xiangshan_2eproto.base,
  &scc_info_CXiangshanScreenSource_xiangshan_2eproto.base,
  &scc_info_CXiangshanVisitLog_xiangshan_2eproto.base,
  &scc_info_SXiangshanChairAction_xiangshan_2eproto.base,
  &scc_info_SXiangshanChairStateList_xiangshan_2eproto.base,
  &scc_info_SXiangshanScreenSource_xiangshan_2eproto.base,
  &scc_info_SXiangshanVisitLog_xiangshan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_xiangshan_2eproto_once;
static bool descriptor_table_xiangshan_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xiangshan_2eproto = {
  &descriptor_table_xiangshan_2eproto_initialized, descriptor_table_protodef_xiangshan_2eproto, "xiangshan.proto", 849,
  &descriptor_table_xiangshan_2eproto_once, descriptor_table_xiangshan_2eproto_sccs, descriptor_table_xiangshan_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_xiangshan_2eproto::offsets,
  file_level_metadata_xiangshan_2eproto, 9, file_level_enum_descriptors_xiangshan_2eproto, file_level_service_descriptors_xiangshan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_xiangshan_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_xiangshan_2eproto), true);
namespace xiangshan {

// ===================================================================

void CXiangshanVisitLog::InitAsDefaultInstance() {
}
class CXiangshanVisitLog::_Internal {
 public:
};

CXiangshanVisitLog::CXiangshanVisitLog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xiangshan.CXiangshanVisitLog)
}
CXiangshanVisitLog::CXiangshanVisitLog(const CXiangshanVisitLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actionid_ = from.actionid_;
  // @@protoc_insertion_point(copy_constructor:xiangshan.CXiangshanVisitLog)
}

void CXiangshanVisitLog::SharedCtor() {
  actionid_ = 0;
}

CXiangshanVisitLog::~CXiangshanVisitLog() {
  // @@protoc_insertion_point(destructor:xiangshan.CXiangshanVisitLog)
  SharedDtor();
}

void CXiangshanVisitLog::SharedDtor() {
}

void CXiangshanVisitLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CXiangshanVisitLog& CXiangshanVisitLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CXiangshanVisitLog_xiangshan_2eproto.base);
  return *internal_default_instance();
}


void CXiangshanVisitLog::Clear() {
// @@protoc_insertion_point(message_clear_start:xiangshan.CXiangshanVisitLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_ = 0;
  _internal_metadata_.Clear();
}

const char* CXiangshanVisitLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 actionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CXiangshanVisitLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xiangshan.CXiangshanVisitLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 actionId = 1;
  if (this->actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xiangshan.CXiangshanVisitLog)
  return target;
}

size_t CXiangshanVisitLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xiangshan.CXiangshanVisitLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 actionId = 1;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CXiangshanVisitLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xiangshan.CXiangshanVisitLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CXiangshanVisitLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CXiangshanVisitLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xiangshan.CXiangshanVisitLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xiangshan.CXiangshanVisitLog)
    MergeFrom(*source);
  }
}

void CXiangshanVisitLog::MergeFrom(const CXiangshanVisitLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xiangshan.CXiangshanVisitLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
}

void CXiangshanVisitLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xiangshan.CXiangshanVisitLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CXiangshanVisitLog::CopyFrom(const CXiangshanVisitLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xiangshan.CXiangshanVisitLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CXiangshanVisitLog::IsInitialized() const {
  return true;
}

void CXiangshanVisitLog::InternalSwap(CXiangshanVisitLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actionid_, other->actionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CXiangshanVisitLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SXiangshanVisitLog::InitAsDefaultInstance() {
}
class SXiangshanVisitLog::_Internal {
 public:
};

SXiangshanVisitLog::SXiangshanVisitLog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xiangshan.SXiangshanVisitLog)
}
SXiangshanVisitLog::SXiangshanVisitLog(const SXiangshanVisitLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(actionid_));
  // @@protoc_insertion_point(copy_constructor:xiangshan.SXiangshanVisitLog)
}

void SXiangshanVisitLog::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(actionid_));
}

SXiangshanVisitLog::~SXiangshanVisitLog() {
  // @@protoc_insertion_point(destructor:xiangshan.SXiangshanVisitLog)
  SharedDtor();
}

void SXiangshanVisitLog::SharedDtor() {
}

void SXiangshanVisitLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SXiangshanVisitLog& SXiangshanVisitLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SXiangshanVisitLog_xiangshan_2eproto.base);
  return *internal_default_instance();
}


void SXiangshanVisitLog::Clear() {
// @@protoc_insertion_point(message_clear_start:xiangshan.SXiangshanVisitLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(actionid_));
  _internal_metadata_.Clear();
}

const char* SXiangshanVisitLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isFirst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isfirst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SXiangshanVisitLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xiangshan.SXiangshanVisitLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 isFirst = 2;
  if (this->isfirst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_isfirst(), target);
  }

  // int32 actionId = 3;
  if (this->actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xiangshan.SXiangshanVisitLog)
  return target;
}

size_t SXiangshanVisitLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xiangshan.SXiangshanVisitLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 isFirst = 2;
  if (this->isfirst() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isfirst());
  }

  // int32 actionId = 3;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SXiangshanVisitLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xiangshan.SXiangshanVisitLog)
  GOOGLE_DCHECK_NE(&from, this);
  const SXiangshanVisitLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SXiangshanVisitLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xiangshan.SXiangshanVisitLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xiangshan.SXiangshanVisitLog)
    MergeFrom(*source);
  }
}

void SXiangshanVisitLog::MergeFrom(const SXiangshanVisitLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xiangshan.SXiangshanVisitLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.isfirst() != 0) {
    _internal_set_isfirst(from._internal_isfirst());
  }
  if (from.actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
}

void SXiangshanVisitLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xiangshan.SXiangshanVisitLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SXiangshanVisitLog::CopyFrom(const SXiangshanVisitLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xiangshan.SXiangshanVisitLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SXiangshanVisitLog::IsInitialized() const {
  return true;
}

void SXiangshanVisitLog::InternalSwap(SXiangshanVisitLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(isfirst_, other->isfirst_);
  swap(actionid_, other->actionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SXiangshanVisitLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CXiangshanScreenSource::InitAsDefaultInstance() {
}
class CXiangshanScreenSource::_Internal {
 public:
};

CXiangshanScreenSource::CXiangshanScreenSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xiangshan.CXiangshanScreenSource)
}
CXiangshanScreenSource::CXiangshanScreenSource(const CXiangshanScreenSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xiangshan.CXiangshanScreenSource)
}

void CXiangshanScreenSource::SharedCtor() {
}

CXiangshanScreenSource::~CXiangshanScreenSource() {
  // @@protoc_insertion_point(destructor:xiangshan.CXiangshanScreenSource)
  SharedDtor();
}

void CXiangshanScreenSource::SharedDtor() {
}

void CXiangshanScreenSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CXiangshanScreenSource& CXiangshanScreenSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CXiangshanScreenSource_xiangshan_2eproto.base);
  return *internal_default_instance();
}


void CXiangshanScreenSource::Clear() {
// @@protoc_insertion_point(message_clear_start:xiangshan.CXiangshanScreenSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CXiangshanScreenSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CXiangshanScreenSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xiangshan.CXiangshanScreenSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xiangshan.CXiangshanScreenSource)
  return target;
}

size_t CXiangshanScreenSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xiangshan.CXiangshanScreenSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CXiangshanScreenSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xiangshan.CXiangshanScreenSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CXiangshanScreenSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CXiangshanScreenSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xiangshan.CXiangshanScreenSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xiangshan.CXiangshanScreenSource)
    MergeFrom(*source);
  }
}

void CXiangshanScreenSource::MergeFrom(const CXiangshanScreenSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xiangshan.CXiangshanScreenSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CXiangshanScreenSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xiangshan.CXiangshanScreenSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CXiangshanScreenSource::CopyFrom(const CXiangshanScreenSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xiangshan.CXiangshanScreenSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CXiangshanScreenSource::IsInitialized() const {
  return true;
}

void CXiangshanScreenSource::InternalSwap(CXiangshanScreenSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CXiangshanScreenSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SXiangshanScreenSource::InitAsDefaultInstance() {
}
class SXiangshanScreenSource::_Internal {
 public:
};

SXiangshanScreenSource::SXiangshanScreenSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xiangshan.SXiangshanScreenSource)
}
SXiangshanScreenSource::SXiangshanScreenSource(const SXiangshanScreenSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&beijingfinancesource7_) -
    reinterpret_cast<char*>(&source_)) + sizeof(beijingfinancesource7_));
  // @@protoc_insertion_point(copy_constructor:xiangshan.SXiangshanScreenSource)
}

void SXiangshanScreenSource::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beijingfinancesource7_) -
      reinterpret_cast<char*>(&source_)) + sizeof(beijingfinancesource7_));
}

SXiangshanScreenSource::~SXiangshanScreenSource() {
  // @@protoc_insertion_point(destructor:xiangshan.SXiangshanScreenSource)
  SharedDtor();
}

void SXiangshanScreenSource::SharedDtor() {
}

void SXiangshanScreenSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SXiangshanScreenSource& SXiangshanScreenSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SXiangshanScreenSource_xiangshan_2eproto.base);
  return *internal_default_instance();
}


void SXiangshanScreenSource::Clear() {
// @@protoc_insertion_point(message_clear_start:xiangshan.SXiangshanScreenSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beijingfinancesource7_) -
      reinterpret_cast<char*>(&source_)) + sizeof(beijingfinancesource7_));
  _internal_metadata_.Clear();
}

const char* SXiangshanScreenSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          source2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          source3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 daynight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          daynight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beijingFinanceDaynight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          beijingfinancedaynight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beijingFinanceSource1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          beijingfinancesource1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beijingFinanceSource2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          beijingfinancesource2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beijingFinanceSource3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          beijingfinancesource3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beijingFinanceSource4 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          beijingfinancesource4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beijingFinanceSource5 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          beijingfinancesource5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beijingFinanceSource6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          beijingfinancesource6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beijingFinanceSource7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          beijingfinancesource7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SXiangshanScreenSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xiangshan.SXiangshanScreenSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 source = 1;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source(), target);
  }

  // int32 source2 = 2;
  if (this->source2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_source2(), target);
  }

  // int32 source3 = 3;
  if (this->source3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_source3(), target);
  }

  // int32 daynight = 4;
  if (this->daynight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_daynight(), target);
  }

  // int32 beijingFinanceDaynight = 5;
  if (this->beijingfinancedaynight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_beijingfinancedaynight(), target);
  }

  // int32 beijingFinanceSource1 = 6;
  if (this->beijingfinancesource1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_beijingfinancesource1(), target);
  }

  // int32 beijingFinanceSource2 = 7;
  if (this->beijingfinancesource2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_beijingfinancesource2(), target);
  }

  // int32 beijingFinanceSource3 = 8;
  if (this->beijingfinancesource3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_beijingfinancesource3(), target);
  }

  // int32 beijingFinanceSource4 = 9;
  if (this->beijingfinancesource4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_beijingfinancesource4(), target);
  }

  // int32 beijingFinanceSource5 = 10;
  if (this->beijingfinancesource5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_beijingfinancesource5(), target);
  }

  // int32 beijingFinanceSource6 = 11;
  if (this->beijingfinancesource6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_beijingfinancesource6(), target);
  }

  // int32 beijingFinanceSource7 = 12;
  if (this->beijingfinancesource7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_beijingfinancesource7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xiangshan.SXiangshanScreenSource)
  return target;
}

size_t SXiangshanScreenSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xiangshan.SXiangshanScreenSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 source = 1;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source());
  }

  // int32 source2 = 2;
  if (this->source2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source2());
  }

  // int32 source3 = 3;
  if (this->source3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source3());
  }

  // int32 daynight = 4;
  if (this->daynight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_daynight());
  }

  // int32 beijingFinanceDaynight = 5;
  if (this->beijingfinancedaynight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beijingfinancedaynight());
  }

  // int32 beijingFinanceSource1 = 6;
  if (this->beijingfinancesource1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beijingfinancesource1());
  }

  // int32 beijingFinanceSource2 = 7;
  if (this->beijingfinancesource2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beijingfinancesource2());
  }

  // int32 beijingFinanceSource3 = 8;
  if (this->beijingfinancesource3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beijingfinancesource3());
  }

  // int32 beijingFinanceSource4 = 9;
  if (this->beijingfinancesource4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beijingfinancesource4());
  }

  // int32 beijingFinanceSource5 = 10;
  if (this->beijingfinancesource5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beijingfinancesource5());
  }

  // int32 beijingFinanceSource6 = 11;
  if (this->beijingfinancesource6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beijingfinancesource6());
  }

  // int32 beijingFinanceSource7 = 12;
  if (this->beijingfinancesource7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beijingfinancesource7());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SXiangshanScreenSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xiangshan.SXiangshanScreenSource)
  GOOGLE_DCHECK_NE(&from, this);
  const SXiangshanScreenSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SXiangshanScreenSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xiangshan.SXiangshanScreenSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xiangshan.SXiangshanScreenSource)
    MergeFrom(*source);
  }
}

void SXiangshanScreenSource::MergeFrom(const SXiangshanScreenSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xiangshan.SXiangshanScreenSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.source2() != 0) {
    _internal_set_source2(from._internal_source2());
  }
  if (from.source3() != 0) {
    _internal_set_source3(from._internal_source3());
  }
  if (from.daynight() != 0) {
    _internal_set_daynight(from._internal_daynight());
  }
  if (from.beijingfinancedaynight() != 0) {
    _internal_set_beijingfinancedaynight(from._internal_beijingfinancedaynight());
  }
  if (from.beijingfinancesource1() != 0) {
    _internal_set_beijingfinancesource1(from._internal_beijingfinancesource1());
  }
  if (from.beijingfinancesource2() != 0) {
    _internal_set_beijingfinancesource2(from._internal_beijingfinancesource2());
  }
  if (from.beijingfinancesource3() != 0) {
    _internal_set_beijingfinancesource3(from._internal_beijingfinancesource3());
  }
  if (from.beijingfinancesource4() != 0) {
    _internal_set_beijingfinancesource4(from._internal_beijingfinancesource4());
  }
  if (from.beijingfinancesource5() != 0) {
    _internal_set_beijingfinancesource5(from._internal_beijingfinancesource5());
  }
  if (from.beijingfinancesource6() != 0) {
    _internal_set_beijingfinancesource6(from._internal_beijingfinancesource6());
  }
  if (from.beijingfinancesource7() != 0) {
    _internal_set_beijingfinancesource7(from._internal_beijingfinancesource7());
  }
}

void SXiangshanScreenSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xiangshan.SXiangshanScreenSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SXiangshanScreenSource::CopyFrom(const SXiangshanScreenSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xiangshan.SXiangshanScreenSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SXiangshanScreenSource::IsInitialized() const {
  return true;
}

void SXiangshanScreenSource::InternalSwap(SXiangshanScreenSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(source_, other->source_);
  swap(source2_, other->source2_);
  swap(source3_, other->source3_);
  swap(daynight_, other->daynight_);
  swap(beijingfinancedaynight_, other->beijingfinancedaynight_);
  swap(beijingfinancesource1_, other->beijingfinancesource1_);
  swap(beijingfinancesource2_, other->beijingfinancesource2_);
  swap(beijingfinancesource3_, other->beijingfinancesource3_);
  swap(beijingfinancesource4_, other->beijingfinancesource4_);
  swap(beijingfinancesource5_, other->beijingfinancesource5_);
  swap(beijingfinancesource6_, other->beijingfinancesource6_);
  swap(beijingfinancesource7_, other->beijingfinancesource7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SXiangshanScreenSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CXiangshanChairAction::InitAsDefaultInstance() {
}
class CXiangshanChairAction::_Internal {
 public:
};

CXiangshanChairAction::CXiangshanChairAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xiangshan.CXiangshanChairAction)
}
CXiangshanChairAction::CXiangshanChairAction(const CXiangshanChairAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&action_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:xiangshan.CXiangshanChairAction)
}

void CXiangshanChairAction::SharedCtor() {
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&action_)) + sizeof(number_));
}

CXiangshanChairAction::~CXiangshanChairAction() {
  // @@protoc_insertion_point(destructor:xiangshan.CXiangshanChairAction)
  SharedDtor();
}

void CXiangshanChairAction::SharedDtor() {
}

void CXiangshanChairAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CXiangshanChairAction& CXiangshanChairAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CXiangshanChairAction_xiangshan_2eproto.base);
  return *internal_default_instance();
}


void CXiangshanChairAction::Clear() {
// @@protoc_insertion_point(message_clear_start:xiangshan.CXiangshanChairAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&action_)) + sizeof(number_));
  _internal_metadata_.Clear();
}

const char* CXiangshanChairAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CXiangshanChairAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xiangshan.CXiangshanChairAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action(), target);
  }

  // int32 number = 2;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xiangshan.CXiangshanChairAction)
  return target;
}

size_t CXiangshanChairAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xiangshan.CXiangshanChairAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  // int32 number = 2;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CXiangshanChairAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xiangshan.CXiangshanChairAction)
  GOOGLE_DCHECK_NE(&from, this);
  const CXiangshanChairAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CXiangshanChairAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xiangshan.CXiangshanChairAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xiangshan.CXiangshanChairAction)
    MergeFrom(*source);
  }
}

void CXiangshanChairAction::MergeFrom(const CXiangshanChairAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xiangshan.CXiangshanChairAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void CXiangshanChairAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xiangshan.CXiangshanChairAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CXiangshanChairAction::CopyFrom(const CXiangshanChairAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xiangshan.CXiangshanChairAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CXiangshanChairAction::IsInitialized() const {
  return true;
}

void CXiangshanChairAction::InternalSwap(CXiangshanChairAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CXiangshanChairAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SXiangshanChairAction::InitAsDefaultInstance() {
}
class SXiangshanChairAction::_Internal {
 public:
};

SXiangshanChairAction::SXiangshanChairAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xiangshan.SXiangshanChairAction)
}
SXiangshanChairAction::SXiangshanChairAction(const SXiangshanChairAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:xiangshan.SXiangshanChairAction)
}

void SXiangshanChairAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SXiangshanChairAction_xiangshan_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(number_));
}

SXiangshanChairAction::~SXiangshanChairAction() {
  // @@protoc_insertion_point(destructor:xiangshan.SXiangshanChairAction)
  SharedDtor();
}

void SXiangshanChairAction::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SXiangshanChairAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SXiangshanChairAction& SXiangshanChairAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SXiangshanChairAction_xiangshan_2eproto.base);
  return *internal_default_instance();
}


void SXiangshanChairAction::Clear() {
// @@protoc_insertion_point(message_clear_start:xiangshan.SXiangshanChairAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(number_));
  _internal_metadata_.Clear();
}

const char* SXiangshanChairAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xiangshan.SXiangshanChairAction.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SXiangshanChairAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xiangshan.SXiangshanChairAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xiangshan.SXiangshanChairAction.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // int32 action = 4;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_action(), target);
  }

  // int32 number = 5;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xiangshan.SXiangshanChairAction)
  return target;
}

size_t SXiangshanChairAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xiangshan.SXiangshanChairAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  // int32 number = 5;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SXiangshanChairAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xiangshan.SXiangshanChairAction)
  GOOGLE_DCHECK_NE(&from, this);
  const SXiangshanChairAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SXiangshanChairAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xiangshan.SXiangshanChairAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xiangshan.SXiangshanChairAction)
    MergeFrom(*source);
  }
}

void SXiangshanChairAction::MergeFrom(const SXiangshanChairAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xiangshan.SXiangshanChairAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void SXiangshanChairAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xiangshan.SXiangshanChairAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SXiangshanChairAction::CopyFrom(const SXiangshanChairAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xiangshan.SXiangshanChairAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SXiangshanChairAction::IsInitialized() const {
  return true;
}

void SXiangshanChairAction::InternalSwap(SXiangshanChairAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(state_, other->state_);
  swap(action_, other->action_);
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SXiangshanChairAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CXiangshanChairStateList::InitAsDefaultInstance() {
}
class CXiangshanChairStateList::_Internal {
 public:
};

CXiangshanChairStateList::CXiangshanChairStateList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xiangshan.CXiangshanChairStateList)
}
CXiangshanChairStateList::CXiangshanChairStateList(const CXiangshanChairStateList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xiangshan.CXiangshanChairStateList)
}

void CXiangshanChairStateList::SharedCtor() {
}

CXiangshanChairStateList::~CXiangshanChairStateList() {
  // @@protoc_insertion_point(destructor:xiangshan.CXiangshanChairStateList)
  SharedDtor();
}

void CXiangshanChairStateList::SharedDtor() {
}

void CXiangshanChairStateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CXiangshanChairStateList& CXiangshanChairStateList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CXiangshanChairStateList_xiangshan_2eproto.base);
  return *internal_default_instance();
}


void CXiangshanChairStateList::Clear() {
// @@protoc_insertion_point(message_clear_start:xiangshan.CXiangshanChairStateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CXiangshanChairStateList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CXiangshanChairStateList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xiangshan.CXiangshanChairStateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xiangshan.CXiangshanChairStateList)
  return target;
}

size_t CXiangshanChairStateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xiangshan.CXiangshanChairStateList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CXiangshanChairStateList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xiangshan.CXiangshanChairStateList)
  GOOGLE_DCHECK_NE(&from, this);
  const CXiangshanChairStateList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CXiangshanChairStateList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xiangshan.CXiangshanChairStateList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xiangshan.CXiangshanChairStateList)
    MergeFrom(*source);
  }
}

void CXiangshanChairStateList::MergeFrom(const CXiangshanChairStateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xiangshan.CXiangshanChairStateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CXiangshanChairStateList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xiangshan.CXiangshanChairStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CXiangshanChairStateList::CopyFrom(const CXiangshanChairStateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xiangshan.CXiangshanChairStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CXiangshanChairStateList::IsInitialized() const {
  return true;
}

void CXiangshanChairStateList::InternalSwap(CXiangshanChairStateList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CXiangshanChairStateList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SXiangshanChairStateList::InitAsDefaultInstance() {
}
class SXiangshanChairStateList::_Internal {
 public:
};

SXiangshanChairStateList::SXiangshanChairStateList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xiangshan.SXiangshanChairStateList)
}
SXiangshanChairStateList::SXiangshanChairStateList(const SXiangshanChairStateList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xiangshan.SXiangshanChairStateList)
}

void SXiangshanChairStateList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SXiangshanChairStateList_xiangshan_2eproto.base);
}

SXiangshanChairStateList::~SXiangshanChairStateList() {
  // @@protoc_insertion_point(destructor:xiangshan.SXiangshanChairStateList)
  SharedDtor();
}

void SXiangshanChairStateList::SharedDtor() {
}

void SXiangshanChairStateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SXiangshanChairStateList& SXiangshanChairStateList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SXiangshanChairStateList_xiangshan_2eproto.base);
  return *internal_default_instance();
}


void SXiangshanChairStateList::Clear() {
// @@protoc_insertion_point(message_clear_start:xiangshan.SXiangshanChairStateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SXiangshanChairStateList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .xiangshan.BXiangshanChairStateInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SXiangshanChairStateList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xiangshan.SXiangshanChairStateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xiangshan.BXiangshanChairStateInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xiangshan.SXiangshanChairStateList)
  return target;
}

size_t SXiangshanChairStateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xiangshan.SXiangshanChairStateList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xiangshan.BXiangshanChairStateInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SXiangshanChairStateList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xiangshan.SXiangshanChairStateList)
  GOOGLE_DCHECK_NE(&from, this);
  const SXiangshanChairStateList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SXiangshanChairStateList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xiangshan.SXiangshanChairStateList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xiangshan.SXiangshanChairStateList)
    MergeFrom(*source);
  }
}

void SXiangshanChairStateList::MergeFrom(const SXiangshanChairStateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xiangshan.SXiangshanChairStateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SXiangshanChairStateList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xiangshan.SXiangshanChairStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SXiangshanChairStateList::CopyFrom(const SXiangshanChairStateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xiangshan.SXiangshanChairStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SXiangshanChairStateList::IsInitialized() const {
  return true;
}

void SXiangshanChairStateList::InternalSwap(SXiangshanChairStateList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SXiangshanChairStateList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BXiangshanChairStateInfo::InitAsDefaultInstance() {
}
class BXiangshanChairStateInfo::_Internal {
 public:
};

BXiangshanChairStateInfo::BXiangshanChairStateInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xiangshan.BXiangshanChairStateInfo)
}
BXiangshanChairStateInfo::BXiangshanChairStateInfo(const BXiangshanChairStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&number_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:xiangshan.BXiangshanChairStateInfo)
}

void BXiangshanChairStateInfo::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&number_)) + sizeof(uid_));
}

BXiangshanChairStateInfo::~BXiangshanChairStateInfo() {
  // @@protoc_insertion_point(destructor:xiangshan.BXiangshanChairStateInfo)
  SharedDtor();
}

void BXiangshanChairStateInfo::SharedDtor() {
}

void BXiangshanChairStateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BXiangshanChairStateInfo& BXiangshanChairStateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BXiangshanChairStateInfo_xiangshan_2eproto.base);
  return *internal_default_instance();
}


void BXiangshanChairStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xiangshan.BXiangshanChairStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&number_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* BXiangshanChairStateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BXiangshanChairStateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xiangshan.BXiangshanChairStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xiangshan.BXiangshanChairStateInfo)
  return target;
}

size_t BXiangshanChairStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xiangshan.BXiangshanChairStateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BXiangshanChairStateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xiangshan.BXiangshanChairStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BXiangshanChairStateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BXiangshanChairStateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xiangshan.BXiangshanChairStateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xiangshan.BXiangshanChairStateInfo)
    MergeFrom(*source);
  }
}

void BXiangshanChairStateInfo::MergeFrom(const BXiangshanChairStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xiangshan.BXiangshanChairStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void BXiangshanChairStateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xiangshan.BXiangshanChairStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BXiangshanChairStateInfo::CopyFrom(const BXiangshanChairStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xiangshan.BXiangshanChairStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BXiangshanChairStateInfo::IsInitialized() const {
  return true;
}

void BXiangshanChairStateInfo::InternalSwap(BXiangshanChairStateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_, other->number_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BXiangshanChairStateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xiangshan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xiangshan::CXiangshanVisitLog* Arena::CreateMaybeMessage< ::xiangshan::CXiangshanVisitLog >(Arena* arena) {
  return Arena::CreateInternal< ::xiangshan::CXiangshanVisitLog >(arena);
}
template<> PROTOBUF_NOINLINE ::xiangshan::SXiangshanVisitLog* Arena::CreateMaybeMessage< ::xiangshan::SXiangshanVisitLog >(Arena* arena) {
  return Arena::CreateInternal< ::xiangshan::SXiangshanVisitLog >(arena);
}
template<> PROTOBUF_NOINLINE ::xiangshan::CXiangshanScreenSource* Arena::CreateMaybeMessage< ::xiangshan::CXiangshanScreenSource >(Arena* arena) {
  return Arena::CreateInternal< ::xiangshan::CXiangshanScreenSource >(arena);
}
template<> PROTOBUF_NOINLINE ::xiangshan::SXiangshanScreenSource* Arena::CreateMaybeMessage< ::xiangshan::SXiangshanScreenSource >(Arena* arena) {
  return Arena::CreateInternal< ::xiangshan::SXiangshanScreenSource >(arena);
}
template<> PROTOBUF_NOINLINE ::xiangshan::CXiangshanChairAction* Arena::CreateMaybeMessage< ::xiangshan::CXiangshanChairAction >(Arena* arena) {
  return Arena::CreateInternal< ::xiangshan::CXiangshanChairAction >(arena);
}
template<> PROTOBUF_NOINLINE ::xiangshan::SXiangshanChairAction* Arena::CreateMaybeMessage< ::xiangshan::SXiangshanChairAction >(Arena* arena) {
  return Arena::CreateInternal< ::xiangshan::SXiangshanChairAction >(arena);
}
template<> PROTOBUF_NOINLINE ::xiangshan::CXiangshanChairStateList* Arena::CreateMaybeMessage< ::xiangshan::CXiangshanChairStateList >(Arena* arena) {
  return Arena::CreateInternal< ::xiangshan::CXiangshanChairStateList >(arena);
}
template<> PROTOBUF_NOINLINE ::xiangshan::SXiangshanChairStateList* Arena::CreateMaybeMessage< ::xiangshan::SXiangshanChairStateList >(Arena* arena) {
  return Arena::CreateInternal< ::xiangshan::SXiangshanChairStateList >(arena);
}
template<> PROTOBUF_NOINLINE ::xiangshan::BXiangshanChairStateInfo* Arena::CreateMaybeMessage< ::xiangshan::BXiangshanChairStateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xiangshan::BXiangshanChairStateInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
