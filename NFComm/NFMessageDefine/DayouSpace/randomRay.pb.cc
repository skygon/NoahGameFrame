// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: randomRay.proto

#include "randomRay.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace randomRay {
class CRandomRayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRandomRay> _instance;
} _CRandomRay_default_instance_;
class SRandomRayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRandomRay> _instance;
} _SRandomRay_default_instance_;
}  // namespace randomRay
static void InitDefaultsscc_info_CRandomRay_randomRay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::randomRay::_CRandomRay_default_instance_;
    new (ptr) ::randomRay::CRandomRay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::randomRay::CRandomRay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRandomRay_randomRay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRandomRay_randomRay_2eproto}, {}};

static void InitDefaultsscc_info_SRandomRay_randomRay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::randomRay::_SRandomRay_default_instance_;
    new (ptr) ::randomRay::SRandomRay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::randomRay::SRandomRay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRandomRay_randomRay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRandomRay_randomRay_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_randomRay_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_randomRay_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_randomRay_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_randomRay_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::randomRay::CRandomRay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::randomRay::SRandomRay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::randomRay::SRandomRay, status_),
  PROTOBUF_FIELD_OFFSET(::randomRay::SRandomRay, uid_),
  PROTOBUF_FIELD_OFFSET(::randomRay::SRandomRay, duration_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::randomRay::CRandomRay)},
  { 5, -1, sizeof(::randomRay::SRandomRay)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::randomRay::_CRandomRay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::randomRay::_SRandomRay_default_instance_),
};

const char descriptor_table_protodef_randomRay_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017randomRay.proto\022\trandomRay\"\014\n\nCRandomR"
  "ay\";\n\nSRandomRay\022\016\n\006status\030\001 \001(\005\022\013\n\003uid\030"
  "\002 \001(\005\022\020\n\010duration\030\003 \001(\005B.\n\030com.dayou.spa"
  "ce.protobufB\tRandomRayZ\002./\252\002\002Pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_randomRay_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_randomRay_2eproto_sccs[2] = {
  &scc_info_CRandomRay_randomRay_2eproto.base,
  &scc_info_SRandomRay_randomRay_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_randomRay_2eproto_once;
static bool descriptor_table_randomRay_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_randomRay_2eproto = {
  &descriptor_table_randomRay_2eproto_initialized, descriptor_table_protodef_randomRay_2eproto, "randomRay.proto", 159,
  &descriptor_table_randomRay_2eproto_once, descriptor_table_randomRay_2eproto_sccs, descriptor_table_randomRay_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_randomRay_2eproto::offsets,
  file_level_metadata_randomRay_2eproto, 2, file_level_enum_descriptors_randomRay_2eproto, file_level_service_descriptors_randomRay_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_randomRay_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_randomRay_2eproto), true);
namespace randomRay {

// ===================================================================

void CRandomRay::InitAsDefaultInstance() {
}
class CRandomRay::_Internal {
 public:
};

CRandomRay::CRandomRay()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:randomRay.CRandomRay)
}
CRandomRay::CRandomRay(const CRandomRay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:randomRay.CRandomRay)
}

void CRandomRay::SharedCtor() {
}

CRandomRay::~CRandomRay() {
  // @@protoc_insertion_point(destructor:randomRay.CRandomRay)
  SharedDtor();
}

void CRandomRay::SharedDtor() {
}

void CRandomRay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRandomRay& CRandomRay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRandomRay_randomRay_2eproto.base);
  return *internal_default_instance();
}


void CRandomRay::Clear() {
// @@protoc_insertion_point(message_clear_start:randomRay.CRandomRay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CRandomRay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRandomRay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:randomRay.CRandomRay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:randomRay.CRandomRay)
  return target;
}

size_t CRandomRay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:randomRay.CRandomRay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRandomRay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:randomRay.CRandomRay)
  GOOGLE_DCHECK_NE(&from, this);
  const CRandomRay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRandomRay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:randomRay.CRandomRay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:randomRay.CRandomRay)
    MergeFrom(*source);
  }
}

void CRandomRay::MergeFrom(const CRandomRay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:randomRay.CRandomRay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CRandomRay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:randomRay.CRandomRay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRandomRay::CopyFrom(const CRandomRay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:randomRay.CRandomRay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRandomRay::IsInitialized() const {
  return true;
}

void CRandomRay::InternalSwap(CRandomRay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRandomRay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRandomRay::InitAsDefaultInstance() {
}
class SRandomRay::_Internal {
 public:
};

SRandomRay::SRandomRay()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:randomRay.SRandomRay)
}
SRandomRay::SRandomRay(const SRandomRay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&status_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:randomRay.SRandomRay)
}

void SRandomRay::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&status_)) + sizeof(duration_));
}

SRandomRay::~SRandomRay() {
  // @@protoc_insertion_point(destructor:randomRay.SRandomRay)
  SharedDtor();
}

void SRandomRay::SharedDtor() {
}

void SRandomRay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRandomRay& SRandomRay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRandomRay_randomRay_2eproto.base);
  return *internal_default_instance();
}


void SRandomRay::Clear() {
// @@protoc_insertion_point(message_clear_start:randomRay.SRandomRay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&status_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

const char* SRandomRay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRandomRay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:randomRay.SRandomRay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  // int32 duration = 3;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:randomRay.SRandomRay)
  return target;
}

size_t SRandomRay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:randomRay.SRandomRay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRandomRay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:randomRay.SRandomRay)
  GOOGLE_DCHECK_NE(&from, this);
  const SRandomRay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRandomRay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:randomRay.SRandomRay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:randomRay.SRandomRay)
    MergeFrom(*source);
  }
}

void SRandomRay::MergeFrom(const SRandomRay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:randomRay.SRandomRay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
}

void SRandomRay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:randomRay.SRandomRay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRandomRay::CopyFrom(const SRandomRay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:randomRay.SRandomRay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRandomRay::IsInitialized() const {
  return true;
}

void SRandomRay::InternalSwap(SRandomRay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(uid_, other->uid_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRandomRay::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace randomRay
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::randomRay::CRandomRay* Arena::CreateMaybeMessage< ::randomRay::CRandomRay >(Arena* arena) {
  return Arena::CreateInternal< ::randomRay::CRandomRay >(arena);
}
template<> PROTOBUF_NOINLINE ::randomRay::SRandomRay* Arena::CreateMaybeMessage< ::randomRay::SRandomRay >(Arena* arena) {
  return Arena::CreateInternal< ::randomRay::SRandomRay >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
