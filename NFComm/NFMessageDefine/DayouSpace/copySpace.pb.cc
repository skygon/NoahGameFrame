// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: copySpace.proto

#include "copySpace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace copySpace {
class CCopyHouseDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCopyHouseDetail> _instance;
} _CCopyHouseDetail_default_instance_;
class SCopyHouseDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCopyHouseDetail> _instance;
} _SCopyHouseDetail_default_instance_;
class CCopyHouseCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCopyHouseCreate> _instance;
} _CCopyHouseCreate_default_instance_;
class SCopyHouseCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCopyHouseCreate> _instance;
} _SCopyHouseCreate_default_instance_;
class CCopyHouseSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCopyHouseSet> _instance;
} _CCopyHouseSet_default_instance_;
class SCopyHouseSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCopyHouseSet> _instance;
} _SCopyHouseSet_default_instance_;
class CCopyHouseAuthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCopyHouseAuth> _instance;
} _CCopyHouseAuth_default_instance_;
class SCopyHouseAuthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCopyHouseAuth> _instance;
} _SCopyHouseAuth_default_instance_;
}  // namespace copySpace
static void InitDefaultsscc_info_CCopyHouseAuth_copySpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copySpace::_CCopyHouseAuth_default_instance_;
    new (ptr) ::copySpace::CCopyHouseAuth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copySpace::CCopyHouseAuth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCopyHouseAuth_copySpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCopyHouseAuth_copySpace_2eproto}, {}};

static void InitDefaultsscc_info_CCopyHouseCreate_copySpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copySpace::_CCopyHouseCreate_default_instance_;
    new (ptr) ::copySpace::CCopyHouseCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copySpace::CCopyHouseCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCopyHouseCreate_copySpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCopyHouseCreate_copySpace_2eproto}, {}};

static void InitDefaultsscc_info_CCopyHouseDetail_copySpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copySpace::_CCopyHouseDetail_default_instance_;
    new (ptr) ::copySpace::CCopyHouseDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copySpace::CCopyHouseDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCopyHouseDetail_copySpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCopyHouseDetail_copySpace_2eproto}, {}};

static void InitDefaultsscc_info_CCopyHouseSet_copySpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copySpace::_CCopyHouseSet_default_instance_;
    new (ptr) ::copySpace::CCopyHouseSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copySpace::CCopyHouseSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCopyHouseSet_copySpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCopyHouseSet_copySpace_2eproto}, {}};

static void InitDefaultsscc_info_SCopyHouseAuth_copySpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copySpace::_SCopyHouseAuth_default_instance_;
    new (ptr) ::copySpace::SCopyHouseAuth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copySpace::SCopyHouseAuth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCopyHouseAuth_copySpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCopyHouseAuth_copySpace_2eproto}, {}};

static void InitDefaultsscc_info_SCopyHouseCreate_copySpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copySpace::_SCopyHouseCreate_default_instance_;
    new (ptr) ::copySpace::SCopyHouseCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copySpace::SCopyHouseCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCopyHouseCreate_copySpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCopyHouseCreate_copySpace_2eproto}, {}};

static void InitDefaultsscc_info_SCopyHouseDetail_copySpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copySpace::_SCopyHouseDetail_default_instance_;
    new (ptr) ::copySpace::SCopyHouseDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copySpace::SCopyHouseDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCopyHouseDetail_copySpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCopyHouseDetail_copySpace_2eproto}, {}};

static void InitDefaultsscc_info_SCopyHouseSet_copySpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copySpace::_SCopyHouseSet_default_instance_;
    new (ptr) ::copySpace::SCopyHouseSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copySpace::SCopyHouseSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCopyHouseSet_copySpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCopyHouseSet_copySpace_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_copySpace_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_copySpace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_copySpace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_copySpace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseDetail, houseid_),
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseDetail, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, resource_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, name_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, image_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, hostuid_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, houseid_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, hostavatar_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, hostnick_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, type_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, secret_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, androidurl_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, iosurl_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, windowsurl_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, spaceid_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, serialnumber_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, onlinetime_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, pwd_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, configurl_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, serverluaurl_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseDetail, clientluaurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseCreate, houseid_),
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseCreate, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseCreate, houseid_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseCreate, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseSet, houseid_),
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseSet, type_),
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseSet, name_),
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseSet, secret_),
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseSet, psw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseAuth, houseid_),
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseAuth, type_),
  PROTOBUF_FIELD_OFFSET(::copySpace::CCopyHouseAuth, psw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseAuth, houseid_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseAuth, type_),
  PROTOBUF_FIELD_OFFSET(::copySpace::SCopyHouseAuth, authstatus_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::copySpace::CCopyHouseDetail)},
  { 7, -1, sizeof(::copySpace::SCopyHouseDetail)},
  { 31, -1, sizeof(::copySpace::CCopyHouseCreate)},
  { 38, -1, sizeof(::copySpace::SCopyHouseCreate)},
  { 45, -1, sizeof(::copySpace::CCopyHouseSet)},
  { 55, -1, sizeof(::copySpace::SCopyHouseSet)},
  { 60, -1, sizeof(::copySpace::CCopyHouseAuth)},
  { 68, -1, sizeof(::copySpace::SCopyHouseAuth)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copySpace::_CCopyHouseDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copySpace::_SCopyHouseDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copySpace::_CCopyHouseCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copySpace::_SCopyHouseCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copySpace::_CCopyHouseSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copySpace::_SCopyHouseSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copySpace::_CCopyHouseAuth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copySpace::_SCopyHouseAuth_default_instance_),
};

const char descriptor_table_protodef_copySpace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017copySpace.proto\022\tcopySpace\"1\n\020CCopyHou"
  "seDetail\022\017\n\007houseId\030\001 \001(\005\022\014\n\004Type\030\002 \001(\005\""
  "\346\002\n\020SCopyHouseDetail\022\020\n\010resource\030\001 \001(\t\022\014"
  "\n\004name\030\002 \001(\t\022\r\n\005image\030\003 \001(\t\022\017\n\007hostUid\030\004"
  " \001(\005\022\017\n\007houseId\030\005 \001(\005\022\022\n\nhostAvatar\030\006 \001("
  "\t\022\020\n\010hostNick\030\007 \001(\t\022\014\n\004type\030\010 \001(\005\022\016\n\006sec"
  "ret\030\t \001(\005\022\022\n\nandroidUrl\030\n \001(\t\022\016\n\006iosUrl\030"
  "\013 \001(\t\022\022\n\nwindowsUrl\030\014 \001(\t\022\017\n\007spaceId\030\r \001"
  "(\005\022\024\n\014SerialNumber\030\016 \001(\005\022\022\n\nonlineTime\030\017"
  " \001(\005\022\013\n\003pwd\030\020 \001(\t\022\021\n\tconfigUrl\030\021 \001(\t\022\024\n\014"
  "ServerLuaUrl\030\022 \001(\t\022\024\n\014ClientLuaUrl\030\023 \001(\t"
  "\"1\n\020CCopyHouseCreate\022\017\n\007houseId\030\001 \001(\005\022\014\n"
  "\004type\030\002 \001(\005\"1\n\020SCopyHouseCreate\022\017\n\007house"
  "Id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"Y\n\rCCopyHouseSet\022"
  "\017\n\007houseId\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\014\n\004name\030\003"
  " \001(\t\022\016\n\006secret\030\004 \001(\005\022\013\n\003psw\030\005 \001(\t\"\017\n\rSCo"
  "pyHouseSet\"<\n\016CCopyHouseAuth\022\017\n\007houseId\030"
  "\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\013\n\003psw\030\003 \001(\t\"C\n\016SCop"
  "yHouseAuth\022\017\n\007houseId\030\001 \001(\005\022\014\n\004type\030\002 \001("
  "\005\022\022\n\nauthStatus\030\003 \001(\005B.\n\030com.dayou.space"
  ".protobufB\tCopySpaceZ\007./pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_copySpace_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_copySpace_2eproto_sccs[8] = {
  &scc_info_CCopyHouseAuth_copySpace_2eproto.base,
  &scc_info_CCopyHouseCreate_copySpace_2eproto.base,
  &scc_info_CCopyHouseDetail_copySpace_2eproto.base,
  &scc_info_CCopyHouseSet_copySpace_2eproto.base,
  &scc_info_SCopyHouseAuth_copySpace_2eproto.base,
  &scc_info_SCopyHouseCreate_copySpace_2eproto.base,
  &scc_info_SCopyHouseDetail_copySpace_2eproto.base,
  &scc_info_SCopyHouseSet_copySpace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_copySpace_2eproto_once;
static bool descriptor_table_copySpace_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_copySpace_2eproto = {
  &descriptor_table_copySpace_2eproto_initialized, descriptor_table_protodef_copySpace_2eproto, "copySpace.proto", 837,
  &descriptor_table_copySpace_2eproto_once, descriptor_table_copySpace_2eproto_sccs, descriptor_table_copySpace_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_copySpace_2eproto::offsets,
  file_level_metadata_copySpace_2eproto, 8, file_level_enum_descriptors_copySpace_2eproto, file_level_service_descriptors_copySpace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_copySpace_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_copySpace_2eproto), true);
namespace copySpace {

// ===================================================================

void CCopyHouseDetail::InitAsDefaultInstance() {
}
class CCopyHouseDetail::_Internal {
 public:
};

CCopyHouseDetail::CCopyHouseDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copySpace.CCopyHouseDetail)
}
CCopyHouseDetail::CCopyHouseDetail(const CCopyHouseDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:copySpace.CCopyHouseDetail)
}

void CCopyHouseDetail::SharedCtor() {
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
}

CCopyHouseDetail::~CCopyHouseDetail() {
  // @@protoc_insertion_point(destructor:copySpace.CCopyHouseDetail)
  SharedDtor();
}

void CCopyHouseDetail::SharedDtor() {
}

void CCopyHouseDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCopyHouseDetail& CCopyHouseDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCopyHouseDetail_copySpace_2eproto.base);
  return *internal_default_instance();
}


void CCopyHouseDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:copySpace.CCopyHouseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* CCopyHouseDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCopyHouseDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copySpace.CCopyHouseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copySpace.CCopyHouseDetail)
  return target;
}

size_t CCopyHouseDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copySpace.CCopyHouseDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCopyHouseDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copySpace.CCopyHouseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CCopyHouseDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCopyHouseDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copySpace.CCopyHouseDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copySpace.CCopyHouseDetail)
    MergeFrom(*source);
  }
}

void CCopyHouseDetail::MergeFrom(const CCopyHouseDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copySpace.CCopyHouseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CCopyHouseDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copySpace.CCopyHouseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCopyHouseDetail::CopyFrom(const CCopyHouseDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copySpace.CCopyHouseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCopyHouseDetail::IsInitialized() const {
  return true;
}

void CCopyHouseDetail::InternalSwap(CCopyHouseDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCopyHouseDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCopyHouseDetail::InitAsDefaultInstance() {
}
class SCopyHouseDetail::_Internal {
 public:
};

SCopyHouseDetail::SCopyHouseDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copySpace.SCopyHouseDetail)
}
SCopyHouseDetail::SCopyHouseDetail(const SCopyHouseDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  hostavatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostavatar().empty()) {
    hostavatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostavatar_);
  }
  hostnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostnick().empty()) {
    hostnick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostnick_);
  }
  androidurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_androidurl().empty()) {
    androidurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.androidurl_);
  }
  iosurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iosurl().empty()) {
    iosurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iosurl_);
  }
  windowsurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_windowsurl().empty()) {
    windowsurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.windowsurl_);
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_configurl().empty()) {
    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverluaurl().empty()) {
    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientluaurl().empty()) {
    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  ::memcpy(&hostuid_, &from.hostuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&onlinetime_) -
    reinterpret_cast<char*>(&hostuid_)) + sizeof(onlinetime_));
  // @@protoc_insertion_point(copy_constructor:copySpace.SCopyHouseDetail)
}

void SCopyHouseDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCopyHouseDetail_copySpace_2eproto.base);
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostavatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iosurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  windowsurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hostuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onlinetime_) -
      reinterpret_cast<char*>(&hostuid_)) + sizeof(onlinetime_));
}

SCopyHouseDetail::~SCopyHouseDetail() {
  // @@protoc_insertion_point(destructor:copySpace.SCopyHouseDetail)
  SharedDtor();
}

void SCopyHouseDetail::SharedDtor() {
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostavatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostnick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iosurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  windowsurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCopyHouseDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCopyHouseDetail& SCopyHouseDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCopyHouseDetail_copySpace_2eproto.base);
  return *internal_default_instance();
}


void SCopyHouseDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:copySpace.SCopyHouseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostavatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostnick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iosurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  windowsurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hostuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onlinetime_) -
      reinterpret_cast<char*>(&hostuid_)) + sizeof(onlinetime_));
  _internal_metadata_.Clear();
}

const char* SCopyHouseDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hostUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hostuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostAvatar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_hostavatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.hostAvatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostNick = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_hostnick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.hostNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 secret = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          secret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string androidUrl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_androidurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.androidUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iosUrl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_iosurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.iosUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string windowsUrl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_windowsurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.windowsUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          spaceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SerialNumber = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          serialnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onlineTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          onlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string configUrl = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_configurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.configUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerLuaUrl = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_serverluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.ServerLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ClientLuaUrl = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_clientluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.SCopyHouseDetail.ClientLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCopyHouseDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copySpace.SCopyHouseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource = 1;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.resource");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string image = 3;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // int32 hostUid = 4;
  if (this->hostuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hostuid(), target);
  }

  // int32 houseId = 5;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_houseid(), target);
  }

  // string hostAvatar = 6;
  if (this->hostavatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostavatar().data(), static_cast<int>(this->_internal_hostavatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.hostAvatar");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hostavatar(), target);
  }

  // string hostNick = 7;
  if (this->hostnick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostnick().data(), static_cast<int>(this->_internal_hostnick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.hostNick");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hostnick(), target);
  }

  // int32 type = 8;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_type(), target);
  }

  // int32 secret = 9;
  if (this->secret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_secret(), target);
  }

  // string androidUrl = 10;
  if (this->androidurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_androidurl().data(), static_cast<int>(this->_internal_androidurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.androidUrl");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_androidurl(), target);
  }

  // string iosUrl = 11;
  if (this->iosurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iosurl().data(), static_cast<int>(this->_internal_iosurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.iosUrl");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_iosurl(), target);
  }

  // string windowsUrl = 12;
  if (this->windowsurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_windowsurl().data(), static_cast<int>(this->_internal_windowsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.windowsUrl");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_windowsurl(), target);
  }

  // int32 spaceId = 13;
  if (this->spaceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_spaceid(), target);
  }

  // int32 SerialNumber = 14;
  if (this->serialnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_serialnumber(), target);
  }

  // int32 onlineTime = 15;
  if (this->onlinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_onlinetime(), target);
  }

  // string pwd = 16;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.pwd");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_pwd(), target);
  }

  // string configUrl = 17;
  if (this->configurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configurl().data(), static_cast<int>(this->_internal_configurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.configUrl");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_configurl(), target);
  }

  // string ServerLuaUrl = 18;
  if (this->serverluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverluaurl().data(), static_cast<int>(this->_internal_serverluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.ServerLuaUrl");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_serverluaurl(), target);
  }

  // string ClientLuaUrl = 19;
  if (this->clientluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientluaurl().data(), static_cast<int>(this->_internal_clientluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.SCopyHouseDetail.ClientLuaUrl");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_clientluaurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copySpace.SCopyHouseDetail)
  return target;
}

size_t SCopyHouseDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copySpace.SCopyHouseDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource = 1;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 3;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string hostAvatar = 6;
  if (this->hostavatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostavatar());
  }

  // string hostNick = 7;
  if (this->hostnick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostnick());
  }

  // string androidUrl = 10;
  if (this->androidurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_androidurl());
  }

  // string iosUrl = 11;
  if (this->iosurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iosurl());
  }

  // string windowsUrl = 12;
  if (this->windowsurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_windowsurl());
  }

  // string pwd = 16;
  if (this->pwd().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // string configUrl = 17;
  if (this->configurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configurl());
  }

  // string ServerLuaUrl = 18;
  if (this->serverluaurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverluaurl());
  }

  // string ClientLuaUrl = 19;
  if (this->clientluaurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientluaurl());
  }

  // int32 hostUid = 4;
  if (this->hostuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hostuid());
  }

  // int32 houseId = 5;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 secret = 9;
  if (this->secret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_secret());
  }

  // int32 spaceId = 13;
  if (this->spaceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spaceid());
  }

  // int32 SerialNumber = 14;
  if (this->serialnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serialnumber());
  }

  // int32 onlineTime = 15;
  if (this->onlinetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onlinetime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCopyHouseDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copySpace.SCopyHouseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SCopyHouseDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCopyHouseDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copySpace.SCopyHouseDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copySpace.SCopyHouseDetail)
    MergeFrom(*source);
  }
}

void SCopyHouseDetail::MergeFrom(const SCopyHouseDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copySpace.SCopyHouseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource().size() > 0) {

    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.hostavatar().size() > 0) {

    hostavatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostavatar_);
  }
  if (from.hostnick().size() > 0) {

    hostnick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostnick_);
  }
  if (from.androidurl().size() > 0) {

    androidurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.androidurl_);
  }
  if (from.iosurl().size() > 0) {

    iosurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iosurl_);
  }
  if (from.windowsurl().size() > 0) {

    windowsurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.windowsurl_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.configurl().size() > 0) {

    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  if (from.serverluaurl().size() > 0) {

    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  if (from.clientluaurl().size() > 0) {

    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  if (from.hostuid() != 0) {
    _internal_set_hostuid(from._internal_hostuid());
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.secret() != 0) {
    _internal_set_secret(from._internal_secret());
  }
  if (from.spaceid() != 0) {
    _internal_set_spaceid(from._internal_spaceid());
  }
  if (from.serialnumber() != 0) {
    _internal_set_serialnumber(from._internal_serialnumber());
  }
  if (from.onlinetime() != 0) {
    _internal_set_onlinetime(from._internal_onlinetime());
  }
}

void SCopyHouseDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copySpace.SCopyHouseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCopyHouseDetail::CopyFrom(const SCopyHouseDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copySpace.SCopyHouseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCopyHouseDetail::IsInitialized() const {
  return true;
}

void SCopyHouseDetail::InternalSwap(SCopyHouseDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostavatar_.Swap(&other->hostavatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostnick_.Swap(&other->hostnick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  androidurl_.Swap(&other->androidurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iosurl_.Swap(&other->iosurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  windowsurl_.Swap(&other->windowsurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  configurl_.Swap(&other->configurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverluaurl_.Swap(&other->serverluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientluaurl_.Swap(&other->clientluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hostuid_, other->hostuid_);
  swap(houseid_, other->houseid_);
  swap(type_, other->type_);
  swap(secret_, other->secret_);
  swap(spaceid_, other->spaceid_);
  swap(serialnumber_, other->serialnumber_);
  swap(onlinetime_, other->onlinetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCopyHouseDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCopyHouseCreate::InitAsDefaultInstance() {
}
class CCopyHouseCreate::_Internal {
 public:
};

CCopyHouseCreate::CCopyHouseCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copySpace.CCopyHouseCreate)
}
CCopyHouseCreate::CCopyHouseCreate(const CCopyHouseCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:copySpace.CCopyHouseCreate)
}

void CCopyHouseCreate::SharedCtor() {
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
}

CCopyHouseCreate::~CCopyHouseCreate() {
  // @@protoc_insertion_point(destructor:copySpace.CCopyHouseCreate)
  SharedDtor();
}

void CCopyHouseCreate::SharedDtor() {
}

void CCopyHouseCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCopyHouseCreate& CCopyHouseCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCopyHouseCreate_copySpace_2eproto.base);
  return *internal_default_instance();
}


void CCopyHouseCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:copySpace.CCopyHouseCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* CCopyHouseCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCopyHouseCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copySpace.CCopyHouseCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copySpace.CCopyHouseCreate)
  return target;
}

size_t CCopyHouseCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copySpace.CCopyHouseCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCopyHouseCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copySpace.CCopyHouseCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CCopyHouseCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCopyHouseCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copySpace.CCopyHouseCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copySpace.CCopyHouseCreate)
    MergeFrom(*source);
  }
}

void CCopyHouseCreate::MergeFrom(const CCopyHouseCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copySpace.CCopyHouseCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CCopyHouseCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copySpace.CCopyHouseCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCopyHouseCreate::CopyFrom(const CCopyHouseCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copySpace.CCopyHouseCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCopyHouseCreate::IsInitialized() const {
  return true;
}

void CCopyHouseCreate::InternalSwap(CCopyHouseCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCopyHouseCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCopyHouseCreate::InitAsDefaultInstance() {
}
class SCopyHouseCreate::_Internal {
 public:
};

SCopyHouseCreate::SCopyHouseCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copySpace.SCopyHouseCreate)
}
SCopyHouseCreate::SCopyHouseCreate(const SCopyHouseCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:copySpace.SCopyHouseCreate)
}

void SCopyHouseCreate::SharedCtor() {
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
}

SCopyHouseCreate::~SCopyHouseCreate() {
  // @@protoc_insertion_point(destructor:copySpace.SCopyHouseCreate)
  SharedDtor();
}

void SCopyHouseCreate::SharedDtor() {
}

void SCopyHouseCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCopyHouseCreate& SCopyHouseCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCopyHouseCreate_copySpace_2eproto.base);
  return *internal_default_instance();
}


void SCopyHouseCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:copySpace.SCopyHouseCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* SCopyHouseCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCopyHouseCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copySpace.SCopyHouseCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copySpace.SCopyHouseCreate)
  return target;
}

size_t SCopyHouseCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copySpace.SCopyHouseCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCopyHouseCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copySpace.SCopyHouseCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const SCopyHouseCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCopyHouseCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copySpace.SCopyHouseCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copySpace.SCopyHouseCreate)
    MergeFrom(*source);
  }
}

void SCopyHouseCreate::MergeFrom(const SCopyHouseCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copySpace.SCopyHouseCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SCopyHouseCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copySpace.SCopyHouseCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCopyHouseCreate::CopyFrom(const SCopyHouseCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copySpace.SCopyHouseCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCopyHouseCreate::IsInitialized() const {
  return true;
}

void SCopyHouseCreate::InternalSwap(SCopyHouseCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCopyHouseCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCopyHouseSet::InitAsDefaultInstance() {
}
class CCopyHouseSet::_Internal {
 public:
};

CCopyHouseSet::CCopyHouseSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copySpace.CCopyHouseSet)
}
CCopyHouseSet::CCopyHouseSet(const CCopyHouseSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_psw().empty()) {
    psw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.psw_);
  }
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&secret_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(secret_));
  // @@protoc_insertion_point(copy_constructor:copySpace.CCopyHouseSet)
}

void CCopyHouseSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CCopyHouseSet_copySpace_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secret_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(secret_));
}

CCopyHouseSet::~CCopyHouseSet() {
  // @@protoc_insertion_point(destructor:copySpace.CCopyHouseSet)
  SharedDtor();
}

void CCopyHouseSet::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCopyHouseSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCopyHouseSet& CCopyHouseSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCopyHouseSet_copySpace_2eproto.base);
  return *internal_default_instance();
}


void CCopyHouseSet::Clear() {
// @@protoc_insertion_point(message_clear_start:copySpace.CCopyHouseSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secret_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(secret_));
  _internal_metadata_.Clear();
}

const char* CCopyHouseSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.CCopyHouseSet.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 secret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          secret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string psw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_psw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.CCopyHouseSet.psw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCopyHouseSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copySpace.CCopyHouseSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.CCopyHouseSet.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 secret = 4;
  if (this->secret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_secret(), target);
  }

  // string psw = 5;
  if (this->psw().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_psw().data(), static_cast<int>(this->_internal_psw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.CCopyHouseSet.psw");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_psw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copySpace.CCopyHouseSet)
  return target;
}

size_t CCopyHouseSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copySpace.CCopyHouseSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string psw = 5;
  if (this->psw().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_psw());
  }

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 secret = 4;
  if (this->secret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_secret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCopyHouseSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copySpace.CCopyHouseSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CCopyHouseSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCopyHouseSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copySpace.CCopyHouseSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copySpace.CCopyHouseSet)
    MergeFrom(*source);
  }
}

void CCopyHouseSet::MergeFrom(const CCopyHouseSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copySpace.CCopyHouseSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.psw().size() > 0) {

    psw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.psw_);
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.secret() != 0) {
    _internal_set_secret(from._internal_secret());
  }
}

void CCopyHouseSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copySpace.CCopyHouseSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCopyHouseSet::CopyFrom(const CCopyHouseSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copySpace.CCopyHouseSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCopyHouseSet::IsInitialized() const {
  return true;
}

void CCopyHouseSet::InternalSwap(CCopyHouseSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  psw_.Swap(&other->psw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(houseid_, other->houseid_);
  swap(type_, other->type_);
  swap(secret_, other->secret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCopyHouseSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCopyHouseSet::InitAsDefaultInstance() {
}
class SCopyHouseSet::_Internal {
 public:
};

SCopyHouseSet::SCopyHouseSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copySpace.SCopyHouseSet)
}
SCopyHouseSet::SCopyHouseSet(const SCopyHouseSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copySpace.SCopyHouseSet)
}

void SCopyHouseSet::SharedCtor() {
}

SCopyHouseSet::~SCopyHouseSet() {
  // @@protoc_insertion_point(destructor:copySpace.SCopyHouseSet)
  SharedDtor();
}

void SCopyHouseSet::SharedDtor() {
}

void SCopyHouseSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCopyHouseSet& SCopyHouseSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCopyHouseSet_copySpace_2eproto.base);
  return *internal_default_instance();
}


void SCopyHouseSet::Clear() {
// @@protoc_insertion_point(message_clear_start:copySpace.SCopyHouseSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SCopyHouseSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCopyHouseSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copySpace.SCopyHouseSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copySpace.SCopyHouseSet)
  return target;
}

size_t SCopyHouseSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copySpace.SCopyHouseSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCopyHouseSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copySpace.SCopyHouseSet)
  GOOGLE_DCHECK_NE(&from, this);
  const SCopyHouseSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCopyHouseSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copySpace.SCopyHouseSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copySpace.SCopyHouseSet)
    MergeFrom(*source);
  }
}

void SCopyHouseSet::MergeFrom(const SCopyHouseSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copySpace.SCopyHouseSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCopyHouseSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copySpace.SCopyHouseSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCopyHouseSet::CopyFrom(const SCopyHouseSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copySpace.SCopyHouseSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCopyHouseSet::IsInitialized() const {
  return true;
}

void SCopyHouseSet::InternalSwap(SCopyHouseSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCopyHouseSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCopyHouseAuth::InitAsDefaultInstance() {
}
class CCopyHouseAuth::_Internal {
 public:
};

CCopyHouseAuth::CCopyHouseAuth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copySpace.CCopyHouseAuth)
}
CCopyHouseAuth::CCopyHouseAuth(const CCopyHouseAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_psw().empty()) {
    psw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.psw_);
  }
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:copySpace.CCopyHouseAuth)
}

void CCopyHouseAuth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CCopyHouseAuth_copySpace_2eproto.base);
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
}

CCopyHouseAuth::~CCopyHouseAuth() {
  // @@protoc_insertion_point(destructor:copySpace.CCopyHouseAuth)
  SharedDtor();
}

void CCopyHouseAuth::SharedDtor() {
  psw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCopyHouseAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCopyHouseAuth& CCopyHouseAuth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCopyHouseAuth_copySpace_2eproto.base);
  return *internal_default_instance();
}


void CCopyHouseAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:copySpace.CCopyHouseAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  psw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* CCopyHouseAuth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string psw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_psw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copySpace.CCopyHouseAuth.psw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCopyHouseAuth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copySpace.CCopyHouseAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // string psw = 3;
  if (this->psw().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_psw().data(), static_cast<int>(this->_internal_psw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "copySpace.CCopyHouseAuth.psw");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_psw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copySpace.CCopyHouseAuth)
  return target;
}

size_t CCopyHouseAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copySpace.CCopyHouseAuth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string psw = 3;
  if (this->psw().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_psw());
  }

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCopyHouseAuth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copySpace.CCopyHouseAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const CCopyHouseAuth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCopyHouseAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copySpace.CCopyHouseAuth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copySpace.CCopyHouseAuth)
    MergeFrom(*source);
  }
}

void CCopyHouseAuth::MergeFrom(const CCopyHouseAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copySpace.CCopyHouseAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.psw().size() > 0) {

    psw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.psw_);
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CCopyHouseAuth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copySpace.CCopyHouseAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCopyHouseAuth::CopyFrom(const CCopyHouseAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copySpace.CCopyHouseAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCopyHouseAuth::IsInitialized() const {
  return true;
}

void CCopyHouseAuth::InternalSwap(CCopyHouseAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  psw_.Swap(&other->psw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(houseid_, other->houseid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCopyHouseAuth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCopyHouseAuth::InitAsDefaultInstance() {
}
class SCopyHouseAuth::_Internal {
 public:
};

SCopyHouseAuth::SCopyHouseAuth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copySpace.SCopyHouseAuth)
}
SCopyHouseAuth::SCopyHouseAuth(const SCopyHouseAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&authstatus_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(authstatus_));
  // @@protoc_insertion_point(copy_constructor:copySpace.SCopyHouseAuth)
}

void SCopyHouseAuth::SharedCtor() {
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authstatus_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(authstatus_));
}

SCopyHouseAuth::~SCopyHouseAuth() {
  // @@protoc_insertion_point(destructor:copySpace.SCopyHouseAuth)
  SharedDtor();
}

void SCopyHouseAuth::SharedDtor() {
}

void SCopyHouseAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCopyHouseAuth& SCopyHouseAuth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCopyHouseAuth_copySpace_2eproto.base);
  return *internal_default_instance();
}


void SCopyHouseAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:copySpace.SCopyHouseAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authstatus_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(authstatus_));
  _internal_metadata_.Clear();
}

const char* SCopyHouseAuth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 authStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          authstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCopyHouseAuth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copySpace.SCopyHouseAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 authStatus = 3;
  if (this->authstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_authstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copySpace.SCopyHouseAuth)
  return target;
}

size_t SCopyHouseAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copySpace.SCopyHouseAuth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 authStatus = 3;
  if (this->authstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_authstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCopyHouseAuth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copySpace.SCopyHouseAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const SCopyHouseAuth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCopyHouseAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copySpace.SCopyHouseAuth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copySpace.SCopyHouseAuth)
    MergeFrom(*source);
  }
}

void SCopyHouseAuth::MergeFrom(const SCopyHouseAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copySpace.SCopyHouseAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.authstatus() != 0) {
    _internal_set_authstatus(from._internal_authstatus());
  }
}

void SCopyHouseAuth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copySpace.SCopyHouseAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCopyHouseAuth::CopyFrom(const SCopyHouseAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copySpace.SCopyHouseAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCopyHouseAuth::IsInitialized() const {
  return true;
}

void SCopyHouseAuth::InternalSwap(SCopyHouseAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
  swap(type_, other->type_);
  swap(authstatus_, other->authstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCopyHouseAuth::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace copySpace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::copySpace::CCopyHouseDetail* Arena::CreateMaybeMessage< ::copySpace::CCopyHouseDetail >(Arena* arena) {
  return Arena::CreateInternal< ::copySpace::CCopyHouseDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::copySpace::SCopyHouseDetail* Arena::CreateMaybeMessage< ::copySpace::SCopyHouseDetail >(Arena* arena) {
  return Arena::CreateInternal< ::copySpace::SCopyHouseDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::copySpace::CCopyHouseCreate* Arena::CreateMaybeMessage< ::copySpace::CCopyHouseCreate >(Arena* arena) {
  return Arena::CreateInternal< ::copySpace::CCopyHouseCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::copySpace::SCopyHouseCreate* Arena::CreateMaybeMessage< ::copySpace::SCopyHouseCreate >(Arena* arena) {
  return Arena::CreateInternal< ::copySpace::SCopyHouseCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::copySpace::CCopyHouseSet* Arena::CreateMaybeMessage< ::copySpace::CCopyHouseSet >(Arena* arena) {
  return Arena::CreateInternal< ::copySpace::CCopyHouseSet >(arena);
}
template<> PROTOBUF_NOINLINE ::copySpace::SCopyHouseSet* Arena::CreateMaybeMessage< ::copySpace::SCopyHouseSet >(Arena* arena) {
  return Arena::CreateInternal< ::copySpace::SCopyHouseSet >(arena);
}
template<> PROTOBUF_NOINLINE ::copySpace::CCopyHouseAuth* Arena::CreateMaybeMessage< ::copySpace::CCopyHouseAuth >(Arena* arena) {
  return Arena::CreateInternal< ::copySpace::CCopyHouseAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::copySpace::SCopyHouseAuth* Arena::CreateMaybeMessage< ::copySpace::SCopyHouseAuth >(Arena* arena) {
  return Arena::CreateInternal< ::copySpace::SCopyHouseAuth >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
