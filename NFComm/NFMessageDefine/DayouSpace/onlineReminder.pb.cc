// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onlineReminder.proto

#include "onlineReminder.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace reminder {
class COnlineReminderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<COnlineReminder> _instance;
} _COnlineReminder_default_instance_;
class SOnlineReminderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SOnlineReminder> _instance;
} _SOnlineReminder_default_instance_;
class CReminderInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CReminderInfo> _instance;
} _CReminderInfo_default_instance_;
class SReminderInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SReminderInfo> _instance;
} _SReminderInfo_default_instance_;
}  // namespace reminder
static void InitDefaultsscc_info_COnlineReminder_onlineReminder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::reminder::_COnlineReminder_default_instance_;
    new (ptr) ::reminder::COnlineReminder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::reminder::COnlineReminder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_COnlineReminder_onlineReminder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_COnlineReminder_onlineReminder_2eproto}, {}};

static void InitDefaultsscc_info_CReminderInfo_onlineReminder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::reminder::_CReminderInfo_default_instance_;
    new (ptr) ::reminder::CReminderInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::reminder::CReminderInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CReminderInfo_onlineReminder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CReminderInfo_onlineReminder_2eproto}, {}};

static void InitDefaultsscc_info_SOnlineReminder_onlineReminder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::reminder::_SOnlineReminder_default_instance_;
    new (ptr) ::reminder::SOnlineReminder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::reminder::SOnlineReminder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SOnlineReminder_onlineReminder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SOnlineReminder_onlineReminder_2eproto}, {}};

static void InitDefaultsscc_info_SReminderInfo_onlineReminder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::reminder::_SReminderInfo_default_instance_;
    new (ptr) ::reminder::SReminderInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::reminder::SReminderInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SReminderInfo_onlineReminder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SReminderInfo_onlineReminder_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onlineReminder_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_onlineReminder_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onlineReminder_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_onlineReminder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reminder::COnlineReminder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reminder::COnlineReminder, fuid_),
  PROTOBUF_FIELD_OFFSET(::reminder::COnlineReminder, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reminder::SOnlineReminder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reminder::SOnlineReminder, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reminder::CReminderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reminder::CReminderInfo, fuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reminder::SReminderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reminder::SReminderInfo, code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::reminder::COnlineReminder)},
  { 7, -1, sizeof(::reminder::SOnlineReminder)},
  { 13, -1, sizeof(::reminder::CReminderInfo)},
  { 19, -1, sizeof(::reminder::SReminderInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reminder::_COnlineReminder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reminder::_SOnlineReminder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reminder::_CReminderInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reminder::_SReminderInfo_default_instance_),
};

const char descriptor_table_protodef_onlineReminder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024onlineReminder.proto\022\010reminder\"/\n\017COnl"
  "ineReminder\022\014\n\004fUid\030\001 \001(\005\022\016\n\006status\030\002 \001("
  "\005\"\037\n\017SOnlineReminder\022\014\n\004code\030\001 \001(\005\"\035\n\rCR"
  "eminderInfo\022\014\n\004fUid\030\001 \001(\005\"\035\n\rSReminderIn"
  "fo\022\014\n\004code\030\001 \001(\005B-\n\030com.dayou.space.prot"
  "obufB\010ReminderZ\007./pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onlineReminder_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_onlineReminder_2eproto_sccs[4] = {
  &scc_info_COnlineReminder_onlineReminder_2eproto.base,
  &scc_info_CReminderInfo_onlineReminder_2eproto.base,
  &scc_info_SOnlineReminder_onlineReminder_2eproto.base,
  &scc_info_SReminderInfo_onlineReminder_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onlineReminder_2eproto_once;
static bool descriptor_table_onlineReminder_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onlineReminder_2eproto = {
  &descriptor_table_onlineReminder_2eproto_initialized, descriptor_table_protodef_onlineReminder_2eproto, "onlineReminder.proto", 231,
  &descriptor_table_onlineReminder_2eproto_once, descriptor_table_onlineReminder_2eproto_sccs, descriptor_table_onlineReminder_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_onlineReminder_2eproto::offsets,
  file_level_metadata_onlineReminder_2eproto, 4, file_level_enum_descriptors_onlineReminder_2eproto, file_level_service_descriptors_onlineReminder_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_onlineReminder_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_onlineReminder_2eproto), true);
namespace reminder {

// ===================================================================

void COnlineReminder::InitAsDefaultInstance() {
}
class COnlineReminder::_Internal {
 public:
};

COnlineReminder::COnlineReminder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reminder.COnlineReminder)
}
COnlineReminder::COnlineReminder(const COnlineReminder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fuid_, &from.fuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&fuid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:reminder.COnlineReminder)
}

void COnlineReminder::SharedCtor() {
  ::memset(&fuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&fuid_)) + sizeof(status_));
}

COnlineReminder::~COnlineReminder() {
  // @@protoc_insertion_point(destructor:reminder.COnlineReminder)
  SharedDtor();
}

void COnlineReminder::SharedDtor() {
}

void COnlineReminder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COnlineReminder& COnlineReminder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_COnlineReminder_onlineReminder_2eproto.base);
  return *internal_default_instance();
}


void COnlineReminder::Clear() {
// @@protoc_insertion_point(message_clear_start:reminder.COnlineReminder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&fuid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* COnlineReminder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* COnlineReminder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reminder.COnlineReminder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fUid = 1;
  if (this->fuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fuid(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reminder.COnlineReminder)
  return target;
}

size_t COnlineReminder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reminder.COnlineReminder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fUid = 1;
  if (this->fuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fuid());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COnlineReminder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reminder.COnlineReminder)
  GOOGLE_DCHECK_NE(&from, this);
  const COnlineReminder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<COnlineReminder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reminder.COnlineReminder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reminder.COnlineReminder)
    MergeFrom(*source);
  }
}

void COnlineReminder::MergeFrom(const COnlineReminder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reminder.COnlineReminder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fuid() != 0) {
    _internal_set_fuid(from._internal_fuid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void COnlineReminder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reminder.COnlineReminder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COnlineReminder::CopyFrom(const COnlineReminder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reminder.COnlineReminder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COnlineReminder::IsInitialized() const {
  return true;
}

void COnlineReminder::InternalSwap(COnlineReminder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fuid_, other->fuid_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata COnlineReminder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SOnlineReminder::InitAsDefaultInstance() {
}
class SOnlineReminder::_Internal {
 public:
};

SOnlineReminder::SOnlineReminder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reminder.SOnlineReminder)
}
SOnlineReminder::SOnlineReminder(const SOnlineReminder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:reminder.SOnlineReminder)
}

void SOnlineReminder::SharedCtor() {
  code_ = 0;
}

SOnlineReminder::~SOnlineReminder() {
  // @@protoc_insertion_point(destructor:reminder.SOnlineReminder)
  SharedDtor();
}

void SOnlineReminder::SharedDtor() {
}

void SOnlineReminder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SOnlineReminder& SOnlineReminder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SOnlineReminder_onlineReminder_2eproto.base);
  return *internal_default_instance();
}


void SOnlineReminder::Clear() {
// @@protoc_insertion_point(message_clear_start:reminder.SOnlineReminder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* SOnlineReminder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SOnlineReminder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reminder.SOnlineReminder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reminder.SOnlineReminder)
  return target;
}

size_t SOnlineReminder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reminder.SOnlineReminder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SOnlineReminder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reminder.SOnlineReminder)
  GOOGLE_DCHECK_NE(&from, this);
  const SOnlineReminder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SOnlineReminder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reminder.SOnlineReminder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reminder.SOnlineReminder)
    MergeFrom(*source);
  }
}

void SOnlineReminder::MergeFrom(const SOnlineReminder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reminder.SOnlineReminder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SOnlineReminder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reminder.SOnlineReminder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOnlineReminder::CopyFrom(const SOnlineReminder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reminder.SOnlineReminder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOnlineReminder::IsInitialized() const {
  return true;
}

void SOnlineReminder::InternalSwap(SOnlineReminder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SOnlineReminder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CReminderInfo::InitAsDefaultInstance() {
}
class CReminderInfo::_Internal {
 public:
};

CReminderInfo::CReminderInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reminder.CReminderInfo)
}
CReminderInfo::CReminderInfo(const CReminderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fuid_ = from.fuid_;
  // @@protoc_insertion_point(copy_constructor:reminder.CReminderInfo)
}

void CReminderInfo::SharedCtor() {
  fuid_ = 0;
}

CReminderInfo::~CReminderInfo() {
  // @@protoc_insertion_point(destructor:reminder.CReminderInfo)
  SharedDtor();
}

void CReminderInfo::SharedDtor() {
}

void CReminderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CReminderInfo& CReminderInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CReminderInfo_onlineReminder_2eproto.base);
  return *internal_default_instance();
}


void CReminderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:reminder.CReminderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fuid_ = 0;
  _internal_metadata_.Clear();
}

const char* CReminderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CReminderInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reminder.CReminderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fUid = 1;
  if (this->fuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reminder.CReminderInfo)
  return target;
}

size_t CReminderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reminder.CReminderInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fUid = 1;
  if (this->fuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CReminderInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reminder.CReminderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CReminderInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CReminderInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reminder.CReminderInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reminder.CReminderInfo)
    MergeFrom(*source);
  }
}

void CReminderInfo::MergeFrom(const CReminderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reminder.CReminderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fuid() != 0) {
    _internal_set_fuid(from._internal_fuid());
  }
}

void CReminderInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reminder.CReminderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CReminderInfo::CopyFrom(const CReminderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reminder.CReminderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CReminderInfo::IsInitialized() const {
  return true;
}

void CReminderInfo::InternalSwap(CReminderInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fuid_, other->fuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CReminderInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SReminderInfo::InitAsDefaultInstance() {
}
class SReminderInfo::_Internal {
 public:
};

SReminderInfo::SReminderInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reminder.SReminderInfo)
}
SReminderInfo::SReminderInfo(const SReminderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:reminder.SReminderInfo)
}

void SReminderInfo::SharedCtor() {
  code_ = 0;
}

SReminderInfo::~SReminderInfo() {
  // @@protoc_insertion_point(destructor:reminder.SReminderInfo)
  SharedDtor();
}

void SReminderInfo::SharedDtor() {
}

void SReminderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SReminderInfo& SReminderInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SReminderInfo_onlineReminder_2eproto.base);
  return *internal_default_instance();
}


void SReminderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:reminder.SReminderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* SReminderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SReminderInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reminder.SReminderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reminder.SReminderInfo)
  return target;
}

size_t SReminderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reminder.SReminderInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SReminderInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reminder.SReminderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SReminderInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SReminderInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reminder.SReminderInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reminder.SReminderInfo)
    MergeFrom(*source);
  }
}

void SReminderInfo::MergeFrom(const SReminderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reminder.SReminderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SReminderInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reminder.SReminderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SReminderInfo::CopyFrom(const SReminderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reminder.SReminderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SReminderInfo::IsInitialized() const {
  return true;
}

void SReminderInfo::InternalSwap(SReminderInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SReminderInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace reminder
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reminder::COnlineReminder* Arena::CreateMaybeMessage< ::reminder::COnlineReminder >(Arena* arena) {
  return Arena::CreateInternal< ::reminder::COnlineReminder >(arena);
}
template<> PROTOBUF_NOINLINE ::reminder::SOnlineReminder* Arena::CreateMaybeMessage< ::reminder::SOnlineReminder >(Arena* arena) {
  return Arena::CreateInternal< ::reminder::SOnlineReminder >(arena);
}
template<> PROTOBUF_NOINLINE ::reminder::CReminderInfo* Arena::CreateMaybeMessage< ::reminder::CReminderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::reminder::CReminderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::reminder::SReminderInfo* Arena::CreateMaybeMessage< ::reminder::SReminderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::reminder::SReminderInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
