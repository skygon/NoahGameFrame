// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userTitle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userTitle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userTitle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userTitle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userTitle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userTitle_2eproto;
namespace userTitle {
class CEquipUserTitle;
class CEquipUserTitleDefaultTypeInternal;
extern CEquipUserTitleDefaultTypeInternal _CEquipUserTitle_default_instance_;
class CUserTitleList;
class CUserTitleListDefaultTypeInternal;
extern CUserTitleListDefaultTypeInternal _CUserTitleList_default_instance_;
class SEquipUserTitle;
class SEquipUserTitleDefaultTypeInternal;
extern SEquipUserTitleDefaultTypeInternal _SEquipUserTitle_default_instance_;
class SUserTitleList;
class SUserTitleListDefaultTypeInternal;
extern SUserTitleListDefaultTypeInternal _SUserTitleList_default_instance_;
class UserTitle;
class UserTitleDefaultTypeInternal;
extern UserTitleDefaultTypeInternal _UserTitle_default_instance_;
}  // namespace userTitle
PROTOBUF_NAMESPACE_OPEN
template<> ::userTitle::CEquipUserTitle* Arena::CreateMaybeMessage<::userTitle::CEquipUserTitle>(Arena*);
template<> ::userTitle::CUserTitleList* Arena::CreateMaybeMessage<::userTitle::CUserTitleList>(Arena*);
template<> ::userTitle::SEquipUserTitle* Arena::CreateMaybeMessage<::userTitle::SEquipUserTitle>(Arena*);
template<> ::userTitle::SUserTitleList* Arena::CreateMaybeMessage<::userTitle::SUserTitleList>(Arena*);
template<> ::userTitle::UserTitle* Arena::CreateMaybeMessage<::userTitle::UserTitle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userTitle {

// ===================================================================

class CUserTitleList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userTitle.CUserTitleList) */ {
 public:
  CUserTitleList();
  virtual ~CUserTitleList();

  CUserTitleList(const CUserTitleList& from);
  CUserTitleList(CUserTitleList&& from) noexcept
    : CUserTitleList() {
    *this = ::std::move(from);
  }

  inline CUserTitleList& operator=(const CUserTitleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserTitleList& operator=(CUserTitleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUserTitleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserTitleList* internal_default_instance() {
    return reinterpret_cast<const CUserTitleList*>(
               &_CUserTitleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CUserTitleList& a, CUserTitleList& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserTitleList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUserTitleList* New() const final {
    return CreateMaybeMessage<CUserTitleList>(nullptr);
  }

  CUserTitleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUserTitleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUserTitleList& from);
  void MergeFrom(const CUserTitleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserTitleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userTitle.CUserTitleList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userTitle_2eproto);
    return ::descriptor_table_userTitle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // int32 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageSize = 3;
  void clear_pagesize();
  ::PROTOBUF_NAMESPACE_ID::int32 pagesize() const;
  void set_pagesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagesize() const;
  void _internal_set_pagesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userTitle.CUserTitleList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userTitle_2eproto;
};
// -------------------------------------------------------------------

class SUserTitleList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userTitle.SUserTitleList) */ {
 public:
  SUserTitleList();
  virtual ~SUserTitleList();

  SUserTitleList(const SUserTitleList& from);
  SUserTitleList(SUserTitleList&& from) noexcept
    : SUserTitleList() {
    *this = ::std::move(from);
  }

  inline SUserTitleList& operator=(const SUserTitleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUserTitleList& operator=(SUserTitleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUserTitleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUserTitleList* internal_default_instance() {
    return reinterpret_cast<const SUserTitleList*>(
               &_SUserTitleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SUserTitleList& a, SUserTitleList& b) {
    a.Swap(&b);
  }
  inline void Swap(SUserTitleList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUserTitleList* New() const final {
    return CreateMaybeMessage<SUserTitleList>(nullptr);
  }

  SUserTitleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUserTitleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUserTitleList& from);
  void MergeFrom(const SUserTitleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUserTitleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userTitle.SUserTitleList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userTitle_2eproto);
    return ::descriptor_table_userTitle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserTitleListFieldNumber = 1,
    kCurrentTitleFieldNumber = 3,
    kTotalFieldNumber = 2,
    kUserIdFieldNumber = 4,
  };
  // repeated .userTitle.UserTitle userTitleList = 1;
  int usertitlelist_size() const;
  private:
  int _internal_usertitlelist_size() const;
  public:
  void clear_usertitlelist();
  ::userTitle::UserTitle* mutable_usertitlelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userTitle::UserTitle >*
      mutable_usertitlelist();
  private:
  const ::userTitle::UserTitle& _internal_usertitlelist(int index) const;
  ::userTitle::UserTitle* _internal_add_usertitlelist();
  public:
  const ::userTitle::UserTitle& usertitlelist(int index) const;
  ::userTitle::UserTitle* add_usertitlelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userTitle::UserTitle >&
      usertitlelist() const;

  // string currentTitle = 3;
  void clear_currenttitle();
  const std::string& currenttitle() const;
  void set_currenttitle(const std::string& value);
  void set_currenttitle(std::string&& value);
  void set_currenttitle(const char* value);
  void set_currenttitle(const char* value, size_t size);
  std::string* mutable_currenttitle();
  std::string* release_currenttitle();
  void set_allocated_currenttitle(std::string* currenttitle);
  private:
  const std::string& _internal_currenttitle() const;
  void _internal_set_currenttitle(const std::string& value);
  std::string* _internal_mutable_currenttitle();
  public:

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 userId = 4;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userTitle.SUserTitleList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userTitle::UserTitle > usertitlelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currenttitle_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userTitle_2eproto;
};
// -------------------------------------------------------------------

class UserTitle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userTitle.UserTitle) */ {
 public:
  UserTitle();
  virtual ~UserTitle();

  UserTitle(const UserTitle& from);
  UserTitle(UserTitle&& from) noexcept
    : UserTitle() {
    *this = ::std::move(from);
  }

  inline UserTitle& operator=(const UserTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTitle& operator=(UserTitle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTitle* internal_default_instance() {
    return reinterpret_cast<const UserTitle*>(
               &_UserTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserTitle& a, UserTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTitle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserTitle* New() const final {
    return CreateMaybeMessage<UserTitle>(nullptr);
  }

  UserTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserTitle& from);
  void MergeFrom(const UserTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userTitle.UserTitle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userTitle_2eproto);
    return ::descriptor_table_userTitle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kDescFieldNumber = 3,
    kTitlePicFieldNumber = 4,
    kIdFieldNumber = 1,
    kTitleStatusFieldNumber = 5,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string titlePic = 4;
  void clear_titlepic();
  const std::string& titlepic() const;
  void set_titlepic(const std::string& value);
  void set_titlepic(std::string&& value);
  void set_titlepic(const char* value);
  void set_titlepic(const char* value, size_t size);
  std::string* mutable_titlepic();
  std::string* release_titlepic();
  void set_allocated_titlepic(std::string* titlepic);
  private:
  const std::string& _internal_titlepic() const;
  void _internal_set_titlepic(const std::string& value);
  std::string* _internal_mutable_titlepic();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 title_status = 5;
  void clear_title_status();
  ::PROTOBUF_NAMESPACE_ID::int32 title_status() const;
  void set_title_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_title_status() const;
  void _internal_set_title_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userTitle.UserTitle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr titlepic_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 title_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userTitle_2eproto;
};
// -------------------------------------------------------------------

class CEquipUserTitle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userTitle.CEquipUserTitle) */ {
 public:
  CEquipUserTitle();
  virtual ~CEquipUserTitle();

  CEquipUserTitle(const CEquipUserTitle& from);
  CEquipUserTitle(CEquipUserTitle&& from) noexcept
    : CEquipUserTitle() {
    *this = ::std::move(from);
  }

  inline CEquipUserTitle& operator=(const CEquipUserTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEquipUserTitle& operator=(CEquipUserTitle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CEquipUserTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEquipUserTitle* internal_default_instance() {
    return reinterpret_cast<const CEquipUserTitle*>(
               &_CEquipUserTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CEquipUserTitle& a, CEquipUserTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(CEquipUserTitle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CEquipUserTitle* New() const final {
    return CreateMaybeMessage<CEquipUserTitle>(nullptr);
  }

  CEquipUserTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CEquipUserTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CEquipUserTitle& from);
  void MergeFrom(const CEquipUserTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEquipUserTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userTitle.CEquipUserTitle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userTitle_2eproto);
    return ::descriptor_table_userTitle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // int32 titleId = 1;
  void clear_titleid();
  ::PROTOBUF_NAMESPACE_ID::int32 titleid() const;
  void set_titleid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_titleid() const;
  void _internal_set_titleid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 action = 2;
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userTitle.CEquipUserTitle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 titleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userTitle_2eproto;
};
// -------------------------------------------------------------------

class SEquipUserTitle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userTitle.SEquipUserTitle) */ {
 public:
  SEquipUserTitle();
  virtual ~SEquipUserTitle();

  SEquipUserTitle(const SEquipUserTitle& from);
  SEquipUserTitle(SEquipUserTitle&& from) noexcept
    : SEquipUserTitle() {
    *this = ::std::move(from);
  }

  inline SEquipUserTitle& operator=(const SEquipUserTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SEquipUserTitle& operator=(SEquipUserTitle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SEquipUserTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SEquipUserTitle* internal_default_instance() {
    return reinterpret_cast<const SEquipUserTitle*>(
               &_SEquipUserTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SEquipUserTitle& a, SEquipUserTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(SEquipUserTitle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SEquipUserTitle* New() const final {
    return CreateMaybeMessage<SEquipUserTitle>(nullptr);
  }

  SEquipUserTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SEquipUserTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SEquipUserTitle& from);
  void MergeFrom(const SEquipUserTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SEquipUserTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userTitle.SEquipUserTitle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userTitle_2eproto);
    return ::descriptor_table_userTitle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kCodeFieldNumber = 1,
    kUidFieldNumber = 3,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userTitle.SEquipUserTitle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userTitle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CUserTitleList

// int32 userId = 1;
inline void CUserTitleList::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserTitleList::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserTitleList::userid() const {
  // @@protoc_insertion_point(field_get:userTitle.CUserTitleList.userId)
  return _internal_userid();
}
inline void CUserTitleList::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void CUserTitleList::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:userTitle.CUserTitleList.userId)
}

// int32 page = 2;
inline void CUserTitleList::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserTitleList::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserTitleList::page() const {
  // @@protoc_insertion_point(field_get:userTitle.CUserTitleList.page)
  return _internal_page();
}
inline void CUserTitleList::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void CUserTitleList::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:userTitle.CUserTitleList.page)
}

// int32 pageSize = 3;
inline void CUserTitleList::clear_pagesize() {
  pagesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserTitleList::_internal_pagesize() const {
  return pagesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserTitleList::pagesize() const {
  // @@protoc_insertion_point(field_get:userTitle.CUserTitleList.pageSize)
  return _internal_pagesize();
}
inline void CUserTitleList::_internal_set_pagesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagesize_ = value;
}
inline void CUserTitleList::set_pagesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagesize(value);
  // @@protoc_insertion_point(field_set:userTitle.CUserTitleList.pageSize)
}

// -------------------------------------------------------------------

// SUserTitleList

// repeated .userTitle.UserTitle userTitleList = 1;
inline int SUserTitleList::_internal_usertitlelist_size() const {
  return usertitlelist_.size();
}
inline int SUserTitleList::usertitlelist_size() const {
  return _internal_usertitlelist_size();
}
inline void SUserTitleList::clear_usertitlelist() {
  usertitlelist_.Clear();
}
inline ::userTitle::UserTitle* SUserTitleList::mutable_usertitlelist(int index) {
  // @@protoc_insertion_point(field_mutable:userTitle.SUserTitleList.userTitleList)
  return usertitlelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userTitle::UserTitle >*
SUserTitleList::mutable_usertitlelist() {
  // @@protoc_insertion_point(field_mutable_list:userTitle.SUserTitleList.userTitleList)
  return &usertitlelist_;
}
inline const ::userTitle::UserTitle& SUserTitleList::_internal_usertitlelist(int index) const {
  return usertitlelist_.Get(index);
}
inline const ::userTitle::UserTitle& SUserTitleList::usertitlelist(int index) const {
  // @@protoc_insertion_point(field_get:userTitle.SUserTitleList.userTitleList)
  return _internal_usertitlelist(index);
}
inline ::userTitle::UserTitle* SUserTitleList::_internal_add_usertitlelist() {
  return usertitlelist_.Add();
}
inline ::userTitle::UserTitle* SUserTitleList::add_usertitlelist() {
  // @@protoc_insertion_point(field_add:userTitle.SUserTitleList.userTitleList)
  return _internal_add_usertitlelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userTitle::UserTitle >&
SUserTitleList::usertitlelist() const {
  // @@protoc_insertion_point(field_list:userTitle.SUserTitleList.userTitleList)
  return usertitlelist_;
}

// int32 total = 2;
inline void SUserTitleList::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserTitleList::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserTitleList::total() const {
  // @@protoc_insertion_point(field_get:userTitle.SUserTitleList.total)
  return _internal_total();
}
inline void SUserTitleList::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SUserTitleList::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:userTitle.SUserTitleList.total)
}

// string currentTitle = 3;
inline void SUserTitleList::clear_currenttitle() {
  currenttitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserTitleList::currenttitle() const {
  // @@protoc_insertion_point(field_get:userTitle.SUserTitleList.currentTitle)
  return _internal_currenttitle();
}
inline void SUserTitleList::set_currenttitle(const std::string& value) {
  _internal_set_currenttitle(value);
  // @@protoc_insertion_point(field_set:userTitle.SUserTitleList.currentTitle)
}
inline std::string* SUserTitleList::mutable_currenttitle() {
  // @@protoc_insertion_point(field_mutable:userTitle.SUserTitleList.currentTitle)
  return _internal_mutable_currenttitle();
}
inline const std::string& SUserTitleList::_internal_currenttitle() const {
  return currenttitle_.GetNoArena();
}
inline void SUserTitleList::_internal_set_currenttitle(const std::string& value) {
  
  currenttitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserTitleList::set_currenttitle(std::string&& value) {
  
  currenttitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userTitle.SUserTitleList.currentTitle)
}
inline void SUserTitleList::set_currenttitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currenttitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userTitle.SUserTitleList.currentTitle)
}
inline void SUserTitleList::set_currenttitle(const char* value, size_t size) {
  
  currenttitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userTitle.SUserTitleList.currentTitle)
}
inline std::string* SUserTitleList::_internal_mutable_currenttitle() {
  
  return currenttitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserTitleList::release_currenttitle() {
  // @@protoc_insertion_point(field_release:userTitle.SUserTitleList.currentTitle)
  
  return currenttitle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserTitleList::set_allocated_currenttitle(std::string* currenttitle) {
  if (currenttitle != nullptr) {
    
  } else {
    
  }
  currenttitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currenttitle);
  // @@protoc_insertion_point(field_set_allocated:userTitle.SUserTitleList.currentTitle)
}

// int32 userId = 4;
inline void SUserTitleList::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserTitleList::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserTitleList::userid() const {
  // @@protoc_insertion_point(field_get:userTitle.SUserTitleList.userId)
  return _internal_userid();
}
inline void SUserTitleList::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void SUserTitleList::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:userTitle.SUserTitleList.userId)
}

// -------------------------------------------------------------------

// UserTitle

// int32 id = 1;
inline void UserTitle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTitle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTitle::id() const {
  // @@protoc_insertion_point(field_get:userTitle.UserTitle.id)
  return _internal_id();
}
inline void UserTitle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserTitle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:userTitle.UserTitle.id)
}

// string title = 2;
inline void UserTitle::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserTitle::title() const {
  // @@protoc_insertion_point(field_get:userTitle.UserTitle.title)
  return _internal_title();
}
inline void UserTitle::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:userTitle.UserTitle.title)
}
inline std::string* UserTitle::mutable_title() {
  // @@protoc_insertion_point(field_mutable:userTitle.UserTitle.title)
  return _internal_mutable_title();
}
inline const std::string& UserTitle::_internal_title() const {
  return title_.GetNoArena();
}
inline void UserTitle::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserTitle::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userTitle.UserTitle.title)
}
inline void UserTitle::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userTitle.UserTitle.title)
}
inline void UserTitle::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userTitle.UserTitle.title)
}
inline std::string* UserTitle::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserTitle::release_title() {
  // @@protoc_insertion_point(field_release:userTitle.UserTitle.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserTitle::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:userTitle.UserTitle.title)
}

// string desc = 3;
inline void UserTitle::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserTitle::desc() const {
  // @@protoc_insertion_point(field_get:userTitle.UserTitle.desc)
  return _internal_desc();
}
inline void UserTitle::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:userTitle.UserTitle.desc)
}
inline std::string* UserTitle::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:userTitle.UserTitle.desc)
  return _internal_mutable_desc();
}
inline const std::string& UserTitle::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void UserTitle::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserTitle::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userTitle.UserTitle.desc)
}
inline void UserTitle::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userTitle.UserTitle.desc)
}
inline void UserTitle::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userTitle.UserTitle.desc)
}
inline std::string* UserTitle::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserTitle::release_desc() {
  // @@protoc_insertion_point(field_release:userTitle.UserTitle.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserTitle::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:userTitle.UserTitle.desc)
}

// string titlePic = 4;
inline void UserTitle::clear_titlepic() {
  titlepic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserTitle::titlepic() const {
  // @@protoc_insertion_point(field_get:userTitle.UserTitle.titlePic)
  return _internal_titlepic();
}
inline void UserTitle::set_titlepic(const std::string& value) {
  _internal_set_titlepic(value);
  // @@protoc_insertion_point(field_set:userTitle.UserTitle.titlePic)
}
inline std::string* UserTitle::mutable_titlepic() {
  // @@protoc_insertion_point(field_mutable:userTitle.UserTitle.titlePic)
  return _internal_mutable_titlepic();
}
inline const std::string& UserTitle::_internal_titlepic() const {
  return titlepic_.GetNoArena();
}
inline void UserTitle::_internal_set_titlepic(const std::string& value) {
  
  titlepic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserTitle::set_titlepic(std::string&& value) {
  
  titlepic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userTitle.UserTitle.titlePic)
}
inline void UserTitle::set_titlepic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  titlepic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userTitle.UserTitle.titlePic)
}
inline void UserTitle::set_titlepic(const char* value, size_t size) {
  
  titlepic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userTitle.UserTitle.titlePic)
}
inline std::string* UserTitle::_internal_mutable_titlepic() {
  
  return titlepic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserTitle::release_titlepic() {
  // @@protoc_insertion_point(field_release:userTitle.UserTitle.titlePic)
  
  return titlepic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserTitle::set_allocated_titlepic(std::string* titlepic) {
  if (titlepic != nullptr) {
    
  } else {
    
  }
  titlepic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), titlepic);
  // @@protoc_insertion_point(field_set_allocated:userTitle.UserTitle.titlePic)
}

// int32 title_status = 5;
inline void UserTitle::clear_title_status() {
  title_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTitle::_internal_title_status() const {
  return title_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTitle::title_status() const {
  // @@protoc_insertion_point(field_get:userTitle.UserTitle.title_status)
  return _internal_title_status();
}
inline void UserTitle::_internal_set_title_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  title_status_ = value;
}
inline void UserTitle::set_title_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_title_status(value);
  // @@protoc_insertion_point(field_set:userTitle.UserTitle.title_status)
}

// -------------------------------------------------------------------

// CEquipUserTitle

// int32 titleId = 1;
inline void CEquipUserTitle::clear_titleid() {
  titleid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CEquipUserTitle::_internal_titleid() const {
  return titleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CEquipUserTitle::titleid() const {
  // @@protoc_insertion_point(field_get:userTitle.CEquipUserTitle.titleId)
  return _internal_titleid();
}
inline void CEquipUserTitle::_internal_set_titleid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  titleid_ = value;
}
inline void CEquipUserTitle::set_titleid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_titleid(value);
  // @@protoc_insertion_point(field_set:userTitle.CEquipUserTitle.titleId)
}

// int32 action = 2;
inline void CEquipUserTitle::clear_action() {
  action_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CEquipUserTitle::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CEquipUserTitle::action() const {
  // @@protoc_insertion_point(field_get:userTitle.CEquipUserTitle.action)
  return _internal_action();
}
inline void CEquipUserTitle::_internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_ = value;
}
inline void CEquipUserTitle::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:userTitle.CEquipUserTitle.action)
}

// -------------------------------------------------------------------

// SEquipUserTitle

// int32 code = 1;
inline void SEquipUserTitle::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEquipUserTitle::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEquipUserTitle::code() const {
  // @@protoc_insertion_point(field_get:userTitle.SEquipUserTitle.code)
  return _internal_code();
}
inline void SEquipUserTitle::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SEquipUserTitle::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:userTitle.SEquipUserTitle.code)
}

// string title = 2;
inline void SEquipUserTitle::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SEquipUserTitle::title() const {
  // @@protoc_insertion_point(field_get:userTitle.SEquipUserTitle.title)
  return _internal_title();
}
inline void SEquipUserTitle::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:userTitle.SEquipUserTitle.title)
}
inline std::string* SEquipUserTitle::mutable_title() {
  // @@protoc_insertion_point(field_mutable:userTitle.SEquipUserTitle.title)
  return _internal_mutable_title();
}
inline const std::string& SEquipUserTitle::_internal_title() const {
  return title_.GetNoArena();
}
inline void SEquipUserTitle::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SEquipUserTitle::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userTitle.SEquipUserTitle.title)
}
inline void SEquipUserTitle::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userTitle.SEquipUserTitle.title)
}
inline void SEquipUserTitle::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userTitle.SEquipUserTitle.title)
}
inline std::string* SEquipUserTitle::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SEquipUserTitle::release_title() {
  // @@protoc_insertion_point(field_release:userTitle.SEquipUserTitle.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SEquipUserTitle::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:userTitle.SEquipUserTitle.title)
}

// int32 uid = 3;
inline void SEquipUserTitle::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEquipUserTitle::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEquipUserTitle::uid() const {
  // @@protoc_insertion_point(field_get:userTitle.SEquipUserTitle.uid)
  return _internal_uid();
}
inline void SEquipUserTitle::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SEquipUserTitle::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userTitle.SEquipUserTitle.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userTitle

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userTitle_2eproto
