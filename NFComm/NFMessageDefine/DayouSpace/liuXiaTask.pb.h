// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: liuXiaTask.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_liuXiaTask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_liuXiaTask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_liuXiaTask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_liuXiaTask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_liuXiaTask_2eproto;
namespace liuXiaTask {
class CCollectionSiKuQuanShu;
class CCollectionSiKuQuanShuDefaultTypeInternal;
extern CCollectionSiKuQuanShuDefaultTypeInternal _CCollectionSiKuQuanShu_default_instance_;
class CGetLiuXiaTaskList;
class CGetLiuXiaTaskListDefaultTypeInternal;
extern CGetLiuXiaTaskListDefaultTypeInternal _CGetLiuXiaTaskList_default_instance_;
class CGetLiuxiaFreeGift;
class CGetLiuxiaFreeGiftDefaultTypeInternal;
extern CGetLiuxiaFreeGiftDefaultTypeInternal _CGetLiuxiaFreeGift_default_instance_;
class CGetLiuxiaSwitch;
class CGetLiuxiaSwitchDefaultTypeInternal;
extern CGetLiuxiaSwitchDefaultTypeInternal _CGetLiuxiaSwitch_default_instance_;
class CGetUserSiKuQuanShuPageNum;
class CGetUserSiKuQuanShuPageNumDefaultTypeInternal;
extern CGetUserSiKuQuanShuPageNumDefaultTypeInternal _CGetUserSiKuQuanShuPageNum_default_instance_;
class CLiuXiaClaimRewards;
class CLiuXiaClaimRewardsDefaultTypeInternal;
extern CLiuXiaClaimRewardsDefaultTypeInternal _CLiuXiaClaimRewards_default_instance_;
class CLiuXiaCompleteTaskReporting;
class CLiuXiaCompleteTaskReportingDefaultTypeInternal;
extern CLiuXiaCompleteTaskReportingDefaultTypeInternal _CLiuXiaCompleteTaskReporting_default_instance_;
class CStatCollectionSiKuQuanShu;
class CStatCollectionSiKuQuanShuDefaultTypeInternal;
extern CStatCollectionSiKuQuanShuDefaultTypeInternal _CStatCollectionSiKuQuanShu_default_instance_;
class LiuXiaTaskInfo;
class LiuXiaTaskInfoDefaultTypeInternal;
extern LiuXiaTaskInfoDefaultTypeInternal _LiuXiaTaskInfo_default_instance_;
class LiuXiaTaskRewardInfo;
class LiuXiaTaskRewardInfoDefaultTypeInternal;
extern LiuXiaTaskRewardInfoDefaultTypeInternal _LiuXiaTaskRewardInfo_default_instance_;
class SCollectionSiKuQuanShu;
class SCollectionSiKuQuanShuDefaultTypeInternal;
extern SCollectionSiKuQuanShuDefaultTypeInternal _SCollectionSiKuQuanShu_default_instance_;
class SGetLiuXiaTaskList;
class SGetLiuXiaTaskListDefaultTypeInternal;
extern SGetLiuXiaTaskListDefaultTypeInternal _SGetLiuXiaTaskList_default_instance_;
class SGetLiuxiaFreeGift;
class SGetLiuxiaFreeGiftDefaultTypeInternal;
extern SGetLiuxiaFreeGiftDefaultTypeInternal _SGetLiuxiaFreeGift_default_instance_;
class SGetLiuxiaSwitch;
class SGetLiuxiaSwitchDefaultTypeInternal;
extern SGetLiuxiaSwitchDefaultTypeInternal _SGetLiuxiaSwitch_default_instance_;
class SGetUserSiKuQuanShuPageNum;
class SGetUserSiKuQuanShuPageNumDefaultTypeInternal;
extern SGetUserSiKuQuanShuPageNumDefaultTypeInternal _SGetUserSiKuQuanShuPageNum_default_instance_;
class SLiuXiaClaimRewards;
class SLiuXiaClaimRewardsDefaultTypeInternal;
extern SLiuXiaClaimRewardsDefaultTypeInternal _SLiuXiaClaimRewards_default_instance_;
class SLiuXiaCompleteTaskReporting;
class SLiuXiaCompleteTaskReportingDefaultTypeInternal;
extern SLiuXiaCompleteTaskReportingDefaultTypeInternal _SLiuXiaCompleteTaskReporting_default_instance_;
class SStatCollectionSiKuQuanShu;
class SStatCollectionSiKuQuanShuDefaultTypeInternal;
extern SStatCollectionSiKuQuanShuDefaultTypeInternal _SStatCollectionSiKuQuanShu_default_instance_;
}  // namespace liuXiaTask
PROTOBUF_NAMESPACE_OPEN
template<> ::liuXiaTask::CCollectionSiKuQuanShu* Arena::CreateMaybeMessage<::liuXiaTask::CCollectionSiKuQuanShu>(Arena*);
template<> ::liuXiaTask::CGetLiuXiaTaskList* Arena::CreateMaybeMessage<::liuXiaTask::CGetLiuXiaTaskList>(Arena*);
template<> ::liuXiaTask::CGetLiuxiaFreeGift* Arena::CreateMaybeMessage<::liuXiaTask::CGetLiuxiaFreeGift>(Arena*);
template<> ::liuXiaTask::CGetLiuxiaSwitch* Arena::CreateMaybeMessage<::liuXiaTask::CGetLiuxiaSwitch>(Arena*);
template<> ::liuXiaTask::CGetUserSiKuQuanShuPageNum* Arena::CreateMaybeMessage<::liuXiaTask::CGetUserSiKuQuanShuPageNum>(Arena*);
template<> ::liuXiaTask::CLiuXiaClaimRewards* Arena::CreateMaybeMessage<::liuXiaTask::CLiuXiaClaimRewards>(Arena*);
template<> ::liuXiaTask::CLiuXiaCompleteTaskReporting* Arena::CreateMaybeMessage<::liuXiaTask::CLiuXiaCompleteTaskReporting>(Arena*);
template<> ::liuXiaTask::CStatCollectionSiKuQuanShu* Arena::CreateMaybeMessage<::liuXiaTask::CStatCollectionSiKuQuanShu>(Arena*);
template<> ::liuXiaTask::LiuXiaTaskInfo* Arena::CreateMaybeMessage<::liuXiaTask::LiuXiaTaskInfo>(Arena*);
template<> ::liuXiaTask::LiuXiaTaskRewardInfo* Arena::CreateMaybeMessage<::liuXiaTask::LiuXiaTaskRewardInfo>(Arena*);
template<> ::liuXiaTask::SCollectionSiKuQuanShu* Arena::CreateMaybeMessage<::liuXiaTask::SCollectionSiKuQuanShu>(Arena*);
template<> ::liuXiaTask::SGetLiuXiaTaskList* Arena::CreateMaybeMessage<::liuXiaTask::SGetLiuXiaTaskList>(Arena*);
template<> ::liuXiaTask::SGetLiuxiaFreeGift* Arena::CreateMaybeMessage<::liuXiaTask::SGetLiuxiaFreeGift>(Arena*);
template<> ::liuXiaTask::SGetLiuxiaSwitch* Arena::CreateMaybeMessage<::liuXiaTask::SGetLiuxiaSwitch>(Arena*);
template<> ::liuXiaTask::SGetUserSiKuQuanShuPageNum* Arena::CreateMaybeMessage<::liuXiaTask::SGetUserSiKuQuanShuPageNum>(Arena*);
template<> ::liuXiaTask::SLiuXiaClaimRewards* Arena::CreateMaybeMessage<::liuXiaTask::SLiuXiaClaimRewards>(Arena*);
template<> ::liuXiaTask::SLiuXiaCompleteTaskReporting* Arena::CreateMaybeMessage<::liuXiaTask::SLiuXiaCompleteTaskReporting>(Arena*);
template<> ::liuXiaTask::SStatCollectionSiKuQuanShu* Arena::CreateMaybeMessage<::liuXiaTask::SStatCollectionSiKuQuanShu>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace liuXiaTask {

// ===================================================================

class CGetLiuXiaTaskList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.CGetLiuXiaTaskList) */ {
 public:
  CGetLiuXiaTaskList();
  virtual ~CGetLiuXiaTaskList();

  CGetLiuXiaTaskList(const CGetLiuXiaTaskList& from);
  CGetLiuXiaTaskList(CGetLiuXiaTaskList&& from) noexcept
    : CGetLiuXiaTaskList() {
    *this = ::std::move(from);
  }

  inline CGetLiuXiaTaskList& operator=(const CGetLiuXiaTaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetLiuXiaTaskList& operator=(CGetLiuXiaTaskList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetLiuXiaTaskList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetLiuXiaTaskList* internal_default_instance() {
    return reinterpret_cast<const CGetLiuXiaTaskList*>(
               &_CGetLiuXiaTaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGetLiuXiaTaskList& a, CGetLiuXiaTaskList& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetLiuXiaTaskList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetLiuXiaTaskList* New() const final {
    return CreateMaybeMessage<CGetLiuXiaTaskList>(nullptr);
  }

  CGetLiuXiaTaskList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetLiuXiaTaskList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetLiuXiaTaskList& from);
  void MergeFrom(const CGetLiuXiaTaskList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetLiuXiaTaskList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.CGetLiuXiaTaskList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:liuXiaTask.CGetLiuXiaTaskList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class SGetLiuXiaTaskList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.SGetLiuXiaTaskList) */ {
 public:
  SGetLiuXiaTaskList();
  virtual ~SGetLiuXiaTaskList();

  SGetLiuXiaTaskList(const SGetLiuXiaTaskList& from);
  SGetLiuXiaTaskList(SGetLiuXiaTaskList&& from) noexcept
    : SGetLiuXiaTaskList() {
    *this = ::std::move(from);
  }

  inline SGetLiuXiaTaskList& operator=(const SGetLiuXiaTaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetLiuXiaTaskList& operator=(SGetLiuXiaTaskList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetLiuXiaTaskList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetLiuXiaTaskList* internal_default_instance() {
    return reinterpret_cast<const SGetLiuXiaTaskList*>(
               &_SGetLiuXiaTaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SGetLiuXiaTaskList& a, SGetLiuXiaTaskList& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetLiuXiaTaskList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetLiuXiaTaskList* New() const final {
    return CreateMaybeMessage<SGetLiuXiaTaskList>(nullptr);
  }

  SGetLiuXiaTaskList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetLiuXiaTaskList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetLiuXiaTaskList& from);
  void MergeFrom(const SGetLiuXiaTaskList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetLiuXiaTaskList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.SGetLiuXiaTaskList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturedTaskListFieldNumber = 3,
    kSuKuQuanShuTaskListFieldNumber = 4,
    kDailyTaskListFieldNumber = 5,
    kMsgFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // repeated .liuXiaTask.LiuXiaTaskInfo featuredTaskList = 3;
  int featuredtasklist_size() const;
  private:
  int _internal_featuredtasklist_size() const;
  public:
  void clear_featuredtasklist();
  ::liuXiaTask::LiuXiaTaskInfo* mutable_featuredtasklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >*
      mutable_featuredtasklist();
  private:
  const ::liuXiaTask::LiuXiaTaskInfo& _internal_featuredtasklist(int index) const;
  ::liuXiaTask::LiuXiaTaskInfo* _internal_add_featuredtasklist();
  public:
  const ::liuXiaTask::LiuXiaTaskInfo& featuredtasklist(int index) const;
  ::liuXiaTask::LiuXiaTaskInfo* add_featuredtasklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >&
      featuredtasklist() const;

  // repeated .liuXiaTask.LiuXiaTaskInfo suKuQuanShuTaskList = 4;
  int sukuquanshutasklist_size() const;
  private:
  int _internal_sukuquanshutasklist_size() const;
  public:
  void clear_sukuquanshutasklist();
  ::liuXiaTask::LiuXiaTaskInfo* mutable_sukuquanshutasklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >*
      mutable_sukuquanshutasklist();
  private:
  const ::liuXiaTask::LiuXiaTaskInfo& _internal_sukuquanshutasklist(int index) const;
  ::liuXiaTask::LiuXiaTaskInfo* _internal_add_sukuquanshutasklist();
  public:
  const ::liuXiaTask::LiuXiaTaskInfo& sukuquanshutasklist(int index) const;
  ::liuXiaTask::LiuXiaTaskInfo* add_sukuquanshutasklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >&
      sukuquanshutasklist() const;

  // repeated .liuXiaTask.LiuXiaTaskInfo dailyTaskList = 5;
  int dailytasklist_size() const;
  private:
  int _internal_dailytasklist_size() const;
  public:
  void clear_dailytasklist();
  ::liuXiaTask::LiuXiaTaskInfo* mutable_dailytasklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >*
      mutable_dailytasklist();
  private:
  const ::liuXiaTask::LiuXiaTaskInfo& _internal_dailytasklist(int index) const;
  ::liuXiaTask::LiuXiaTaskInfo* _internal_add_dailytasklist();
  public:
  const ::liuXiaTask::LiuXiaTaskInfo& dailytasklist(int index) const;
  ::liuXiaTask::LiuXiaTaskInfo* add_dailytasklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >&
      dailytasklist() const;

  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.SGetLiuXiaTaskList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo > featuredtasklist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo > sukuquanshutasklist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo > dailytasklist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class LiuXiaTaskInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.LiuXiaTaskInfo) */ {
 public:
  LiuXiaTaskInfo();
  virtual ~LiuXiaTaskInfo();

  LiuXiaTaskInfo(const LiuXiaTaskInfo& from);
  LiuXiaTaskInfo(LiuXiaTaskInfo&& from) noexcept
    : LiuXiaTaskInfo() {
    *this = ::std::move(from);
  }

  inline LiuXiaTaskInfo& operator=(const LiuXiaTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiuXiaTaskInfo& operator=(LiuXiaTaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiuXiaTaskInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiuXiaTaskInfo* internal_default_instance() {
    return reinterpret_cast<const LiuXiaTaskInfo*>(
               &_LiuXiaTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LiuXiaTaskInfo& a, LiuXiaTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LiuXiaTaskInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiuXiaTaskInfo* New() const final {
    return CreateMaybeMessage<LiuXiaTaskInfo>(nullptr);
  }

  LiuXiaTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiuXiaTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiuXiaTaskInfo& from);
  void MergeFrom(const LiuXiaTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiuXiaTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.LiuXiaTaskInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kKeyFieldNumber = 3,
    kDescFieldNumber = 4,
    kTaskIdFieldNumber = 1,
    kCopperCoinNumFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string desc = 4;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 taskId = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 copperCoinNum = 5;
  void clear_coppercoinnum();
  ::PROTOBUF_NAMESPACE_ID::int32 coppercoinnum() const;
  void set_coppercoinnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coppercoinnum() const;
  void _internal_set_coppercoinnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 6;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.LiuXiaTaskInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 coppercoinnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class CLiuXiaCompleteTaskReporting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.CLiuXiaCompleteTaskReporting) */ {
 public:
  CLiuXiaCompleteTaskReporting();
  virtual ~CLiuXiaCompleteTaskReporting();

  CLiuXiaCompleteTaskReporting(const CLiuXiaCompleteTaskReporting& from);
  CLiuXiaCompleteTaskReporting(CLiuXiaCompleteTaskReporting&& from) noexcept
    : CLiuXiaCompleteTaskReporting() {
    *this = ::std::move(from);
  }

  inline CLiuXiaCompleteTaskReporting& operator=(const CLiuXiaCompleteTaskReporting& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLiuXiaCompleteTaskReporting& operator=(CLiuXiaCompleteTaskReporting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLiuXiaCompleteTaskReporting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLiuXiaCompleteTaskReporting* internal_default_instance() {
    return reinterpret_cast<const CLiuXiaCompleteTaskReporting*>(
               &_CLiuXiaCompleteTaskReporting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CLiuXiaCompleteTaskReporting& a, CLiuXiaCompleteTaskReporting& b) {
    a.Swap(&b);
  }
  inline void Swap(CLiuXiaCompleteTaskReporting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLiuXiaCompleteTaskReporting* New() const final {
    return CreateMaybeMessage<CLiuXiaCompleteTaskReporting>(nullptr);
  }

  CLiuXiaCompleteTaskReporting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLiuXiaCompleteTaskReporting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLiuXiaCompleteTaskReporting& from);
  void MergeFrom(const CLiuXiaCompleteTaskReporting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLiuXiaCompleteTaskReporting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.CLiuXiaCompleteTaskReporting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTaskIdFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 taskId = 2;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.CLiuXiaCompleteTaskReporting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class SLiuXiaCompleteTaskReporting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.SLiuXiaCompleteTaskReporting) */ {
 public:
  SLiuXiaCompleteTaskReporting();
  virtual ~SLiuXiaCompleteTaskReporting();

  SLiuXiaCompleteTaskReporting(const SLiuXiaCompleteTaskReporting& from);
  SLiuXiaCompleteTaskReporting(SLiuXiaCompleteTaskReporting&& from) noexcept
    : SLiuXiaCompleteTaskReporting() {
    *this = ::std::move(from);
  }

  inline SLiuXiaCompleteTaskReporting& operator=(const SLiuXiaCompleteTaskReporting& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLiuXiaCompleteTaskReporting& operator=(SLiuXiaCompleteTaskReporting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLiuXiaCompleteTaskReporting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLiuXiaCompleteTaskReporting* internal_default_instance() {
    return reinterpret_cast<const SLiuXiaCompleteTaskReporting*>(
               &_SLiuXiaCompleteTaskReporting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLiuXiaCompleteTaskReporting& a, SLiuXiaCompleteTaskReporting& b) {
    a.Swap(&b);
  }
  inline void Swap(SLiuXiaCompleteTaskReporting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLiuXiaCompleteTaskReporting* New() const final {
    return CreateMaybeMessage<SLiuXiaCompleteTaskReporting>(nullptr);
  }

  SLiuXiaCompleteTaskReporting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLiuXiaCompleteTaskReporting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLiuXiaCompleteTaskReporting& from);
  void MergeFrom(const SLiuXiaCompleteTaskReporting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLiuXiaCompleteTaskReporting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.SLiuXiaCompleteTaskReporting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kMsgFieldNumber = 4,
    kTaskIdFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 taskId = 2;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 3;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.SLiuXiaCompleteTaskReporting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class CLiuXiaClaimRewards :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.CLiuXiaClaimRewards) */ {
 public:
  CLiuXiaClaimRewards();
  virtual ~CLiuXiaClaimRewards();

  CLiuXiaClaimRewards(const CLiuXiaClaimRewards& from);
  CLiuXiaClaimRewards(CLiuXiaClaimRewards&& from) noexcept
    : CLiuXiaClaimRewards() {
    *this = ::std::move(from);
  }

  inline CLiuXiaClaimRewards& operator=(const CLiuXiaClaimRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLiuXiaClaimRewards& operator=(CLiuXiaClaimRewards&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLiuXiaClaimRewards& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLiuXiaClaimRewards* internal_default_instance() {
    return reinterpret_cast<const CLiuXiaClaimRewards*>(
               &_CLiuXiaClaimRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CLiuXiaClaimRewards& a, CLiuXiaClaimRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(CLiuXiaClaimRewards* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLiuXiaClaimRewards* New() const final {
    return CreateMaybeMessage<CLiuXiaClaimRewards>(nullptr);
  }

  CLiuXiaClaimRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLiuXiaClaimRewards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLiuXiaClaimRewards& from);
  void MergeFrom(const CLiuXiaClaimRewards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLiuXiaClaimRewards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.CLiuXiaClaimRewards";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTaskIdFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 taskId = 2;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.CLiuXiaClaimRewards)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class SLiuXiaClaimRewards :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.SLiuXiaClaimRewards) */ {
 public:
  SLiuXiaClaimRewards();
  virtual ~SLiuXiaClaimRewards();

  SLiuXiaClaimRewards(const SLiuXiaClaimRewards& from);
  SLiuXiaClaimRewards(SLiuXiaClaimRewards&& from) noexcept
    : SLiuXiaClaimRewards() {
    *this = ::std::move(from);
  }

  inline SLiuXiaClaimRewards& operator=(const SLiuXiaClaimRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLiuXiaClaimRewards& operator=(SLiuXiaClaimRewards&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLiuXiaClaimRewards& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLiuXiaClaimRewards* internal_default_instance() {
    return reinterpret_cast<const SLiuXiaClaimRewards*>(
               &_SLiuXiaClaimRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLiuXiaClaimRewards& a, SLiuXiaClaimRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(SLiuXiaClaimRewards* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLiuXiaClaimRewards* New() const final {
    return CreateMaybeMessage<SLiuXiaClaimRewards>(nullptr);
  }

  SLiuXiaClaimRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLiuXiaClaimRewards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLiuXiaClaimRewards& from);
  void MergeFrom(const SLiuXiaClaimRewards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLiuXiaClaimRewards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.SLiuXiaClaimRewards";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 3,
    kKeyFieldNumber = 1,
    kMsgFieldNumber = 5,
    kTaskIdFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // repeated .liuXiaTask.LiuXiaTaskRewardInfo list = 3;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::liuXiaTask::LiuXiaTaskRewardInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskRewardInfo >*
      mutable_list();
  private:
  const ::liuXiaTask::LiuXiaTaskRewardInfo& _internal_list(int index) const;
  ::liuXiaTask::LiuXiaTaskRewardInfo* _internal_add_list();
  public:
  const ::liuXiaTask::LiuXiaTaskRewardInfo& list(int index) const;
  ::liuXiaTask::LiuXiaTaskRewardInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskRewardInfo >&
      list() const;

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 taskId = 2;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 4;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.SLiuXiaClaimRewards)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskRewardInfo > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class LiuXiaTaskRewardInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.LiuXiaTaskRewardInfo) */ {
 public:
  LiuXiaTaskRewardInfo();
  virtual ~LiuXiaTaskRewardInfo();

  LiuXiaTaskRewardInfo(const LiuXiaTaskRewardInfo& from);
  LiuXiaTaskRewardInfo(LiuXiaTaskRewardInfo&& from) noexcept
    : LiuXiaTaskRewardInfo() {
    *this = ::std::move(from);
  }

  inline LiuXiaTaskRewardInfo& operator=(const LiuXiaTaskRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiuXiaTaskRewardInfo& operator=(LiuXiaTaskRewardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiuXiaTaskRewardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiuXiaTaskRewardInfo* internal_default_instance() {
    return reinterpret_cast<const LiuXiaTaskRewardInfo*>(
               &_LiuXiaTaskRewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LiuXiaTaskRewardInfo& a, LiuXiaTaskRewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LiuXiaTaskRewardInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiuXiaTaskRewardInfo* New() const final {
    return CreateMaybeMessage<LiuXiaTaskRewardInfo>(nullptr);
  }

  LiuXiaTaskRewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiuXiaTaskRewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiuXiaTaskRewardInfo& from);
  void MergeFrom(const LiuXiaTaskRewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiuXiaTaskRewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.LiuXiaTaskRewardInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTaskIdFieldNumber = 2,
    kCopperCoinNumFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 taskId = 2;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 copperCoinNum = 3;
  void clear_coppercoinnum();
  ::PROTOBUF_NAMESPACE_ID::int32 coppercoinnum() const;
  void set_coppercoinnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coppercoinnum() const;
  void _internal_set_coppercoinnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.LiuXiaTaskRewardInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 coppercoinnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class CCollectionSiKuQuanShu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.CCollectionSiKuQuanShu) */ {
 public:
  CCollectionSiKuQuanShu();
  virtual ~CCollectionSiKuQuanShu();

  CCollectionSiKuQuanShu(const CCollectionSiKuQuanShu& from);
  CCollectionSiKuQuanShu(CCollectionSiKuQuanShu&& from) noexcept
    : CCollectionSiKuQuanShu() {
    *this = ::std::move(from);
  }

  inline CCollectionSiKuQuanShu& operator=(const CCollectionSiKuQuanShu& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCollectionSiKuQuanShu& operator=(CCollectionSiKuQuanShu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCollectionSiKuQuanShu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCollectionSiKuQuanShu* internal_default_instance() {
    return reinterpret_cast<const CCollectionSiKuQuanShu*>(
               &_CCollectionSiKuQuanShu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CCollectionSiKuQuanShu& a, CCollectionSiKuQuanShu& b) {
    a.Swap(&b);
  }
  inline void Swap(CCollectionSiKuQuanShu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCollectionSiKuQuanShu* New() const final {
    return CreateMaybeMessage<CCollectionSiKuQuanShu>(nullptr);
  }

  CCollectionSiKuQuanShu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCollectionSiKuQuanShu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCollectionSiKuQuanShu& from);
  void MergeFrom(const CCollectionSiKuQuanShu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCollectionSiKuQuanShu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.CCollectionSiKuQuanShu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kNpcIdFieldNumber = 2,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 npcId = 2;
  void clear_npcid();
  ::PROTOBUF_NAMESPACE_ID::int32 npcid() const;
  void set_npcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_npcid() const;
  void _internal_set_npcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.CCollectionSiKuQuanShu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 npcid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class SCollectionSiKuQuanShu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.SCollectionSiKuQuanShu) */ {
 public:
  SCollectionSiKuQuanShu();
  virtual ~SCollectionSiKuQuanShu();

  SCollectionSiKuQuanShu(const SCollectionSiKuQuanShu& from);
  SCollectionSiKuQuanShu(SCollectionSiKuQuanShu&& from) noexcept
    : SCollectionSiKuQuanShu() {
    *this = ::std::move(from);
  }

  inline SCollectionSiKuQuanShu& operator=(const SCollectionSiKuQuanShu& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCollectionSiKuQuanShu& operator=(SCollectionSiKuQuanShu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCollectionSiKuQuanShu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCollectionSiKuQuanShu* internal_default_instance() {
    return reinterpret_cast<const SCollectionSiKuQuanShu*>(
               &_SCollectionSiKuQuanShu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SCollectionSiKuQuanShu& a, SCollectionSiKuQuanShu& b) {
    a.Swap(&b);
  }
  inline void Swap(SCollectionSiKuQuanShu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCollectionSiKuQuanShu* New() const final {
    return CreateMaybeMessage<SCollectionSiKuQuanShu>(nullptr);
  }

  SCollectionSiKuQuanShu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCollectionSiKuQuanShu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCollectionSiKuQuanShu& from);
  void MergeFrom(const SCollectionSiKuQuanShu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCollectionSiKuQuanShu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.SCollectionSiKuQuanShu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.SCollectionSiKuQuanShu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class CStatCollectionSiKuQuanShu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.CStatCollectionSiKuQuanShu) */ {
 public:
  CStatCollectionSiKuQuanShu();
  virtual ~CStatCollectionSiKuQuanShu();

  CStatCollectionSiKuQuanShu(const CStatCollectionSiKuQuanShu& from);
  CStatCollectionSiKuQuanShu(CStatCollectionSiKuQuanShu&& from) noexcept
    : CStatCollectionSiKuQuanShu() {
    *this = ::std::move(from);
  }

  inline CStatCollectionSiKuQuanShu& operator=(const CStatCollectionSiKuQuanShu& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStatCollectionSiKuQuanShu& operator=(CStatCollectionSiKuQuanShu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStatCollectionSiKuQuanShu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CStatCollectionSiKuQuanShu* internal_default_instance() {
    return reinterpret_cast<const CStatCollectionSiKuQuanShu*>(
               &_CStatCollectionSiKuQuanShu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CStatCollectionSiKuQuanShu& a, CStatCollectionSiKuQuanShu& b) {
    a.Swap(&b);
  }
  inline void Swap(CStatCollectionSiKuQuanShu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStatCollectionSiKuQuanShu* New() const final {
    return CreateMaybeMessage<CStatCollectionSiKuQuanShu>(nullptr);
  }

  CStatCollectionSiKuQuanShu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStatCollectionSiKuQuanShu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStatCollectionSiKuQuanShu& from);
  void MergeFrom(const CStatCollectionSiKuQuanShu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStatCollectionSiKuQuanShu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.CStatCollectionSiKuQuanShu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:liuXiaTask.CStatCollectionSiKuQuanShu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class SStatCollectionSiKuQuanShu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.SStatCollectionSiKuQuanShu) */ {
 public:
  SStatCollectionSiKuQuanShu();
  virtual ~SStatCollectionSiKuQuanShu();

  SStatCollectionSiKuQuanShu(const SStatCollectionSiKuQuanShu& from);
  SStatCollectionSiKuQuanShu(SStatCollectionSiKuQuanShu&& from) noexcept
    : SStatCollectionSiKuQuanShu() {
    *this = ::std::move(from);
  }

  inline SStatCollectionSiKuQuanShu& operator=(const SStatCollectionSiKuQuanShu& from) {
    CopyFrom(from);
    return *this;
  }
  inline SStatCollectionSiKuQuanShu& operator=(SStatCollectionSiKuQuanShu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SStatCollectionSiKuQuanShu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SStatCollectionSiKuQuanShu* internal_default_instance() {
    return reinterpret_cast<const SStatCollectionSiKuQuanShu*>(
               &_SStatCollectionSiKuQuanShu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SStatCollectionSiKuQuanShu& a, SStatCollectionSiKuQuanShu& b) {
    a.Swap(&b);
  }
  inline void Swap(SStatCollectionSiKuQuanShu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SStatCollectionSiKuQuanShu* New() const final {
    return CreateMaybeMessage<SStatCollectionSiKuQuanShu>(nullptr);
  }

  SStatCollectionSiKuQuanShu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SStatCollectionSiKuQuanShu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SStatCollectionSiKuQuanShu& from);
  void MergeFrom(const SStatCollectionSiKuQuanShu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SStatCollectionSiKuQuanShu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.SStatCollectionSiKuQuanShu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalUserNumFieldNumber = 1,
    kTotalPageNumFieldNumber = 2,
  };
  // int32 totalUserNum = 1;
  void clear_totalusernum();
  ::PROTOBUF_NAMESPACE_ID::int32 totalusernum() const;
  void set_totalusernum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalusernum() const;
  void _internal_set_totalusernum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 totalPageNum = 2;
  void clear_totalpagenum();
  ::PROTOBUF_NAMESPACE_ID::int32 totalpagenum() const;
  void set_totalpagenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalpagenum() const;
  void _internal_set_totalpagenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.SStatCollectionSiKuQuanShu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalusernum_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalpagenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class CGetUserSiKuQuanShuPageNum :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.CGetUserSiKuQuanShuPageNum) */ {
 public:
  CGetUserSiKuQuanShuPageNum();
  virtual ~CGetUserSiKuQuanShuPageNum();

  CGetUserSiKuQuanShuPageNum(const CGetUserSiKuQuanShuPageNum& from);
  CGetUserSiKuQuanShuPageNum(CGetUserSiKuQuanShuPageNum&& from) noexcept
    : CGetUserSiKuQuanShuPageNum() {
    *this = ::std::move(from);
  }

  inline CGetUserSiKuQuanShuPageNum& operator=(const CGetUserSiKuQuanShuPageNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetUserSiKuQuanShuPageNum& operator=(CGetUserSiKuQuanShuPageNum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetUserSiKuQuanShuPageNum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetUserSiKuQuanShuPageNum* internal_default_instance() {
    return reinterpret_cast<const CGetUserSiKuQuanShuPageNum*>(
               &_CGetUserSiKuQuanShuPageNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CGetUserSiKuQuanShuPageNum& a, CGetUserSiKuQuanShuPageNum& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetUserSiKuQuanShuPageNum* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetUserSiKuQuanShuPageNum* New() const final {
    return CreateMaybeMessage<CGetUserSiKuQuanShuPageNum>(nullptr);
  }

  CGetUserSiKuQuanShuPageNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetUserSiKuQuanShuPageNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetUserSiKuQuanShuPageNum& from);
  void MergeFrom(const CGetUserSiKuQuanShuPageNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetUserSiKuQuanShuPageNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.CGetUserSiKuQuanShuPageNum";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:liuXiaTask.CGetUserSiKuQuanShuPageNum)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class SGetUserSiKuQuanShuPageNum :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.SGetUserSiKuQuanShuPageNum) */ {
 public:
  SGetUserSiKuQuanShuPageNum();
  virtual ~SGetUserSiKuQuanShuPageNum();

  SGetUserSiKuQuanShuPageNum(const SGetUserSiKuQuanShuPageNum& from);
  SGetUserSiKuQuanShuPageNum(SGetUserSiKuQuanShuPageNum&& from) noexcept
    : SGetUserSiKuQuanShuPageNum() {
    *this = ::std::move(from);
  }

  inline SGetUserSiKuQuanShuPageNum& operator=(const SGetUserSiKuQuanShuPageNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetUserSiKuQuanShuPageNum& operator=(SGetUserSiKuQuanShuPageNum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetUserSiKuQuanShuPageNum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetUserSiKuQuanShuPageNum* internal_default_instance() {
    return reinterpret_cast<const SGetUserSiKuQuanShuPageNum*>(
               &_SGetUserSiKuQuanShuPageNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SGetUserSiKuQuanShuPageNum& a, SGetUserSiKuQuanShuPageNum& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetUserSiKuQuanShuPageNum* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetUserSiKuQuanShuPageNum* New() const final {
    return CreateMaybeMessage<SGetUserSiKuQuanShuPageNum>(nullptr);
  }

  SGetUserSiKuQuanShuPageNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetUserSiKuQuanShuPageNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetUserSiKuQuanShuPageNum& from);
  void MergeFrom(const SGetUserSiKuQuanShuPageNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetUserSiKuQuanShuPageNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.SGetUserSiKuQuanShuPageNum";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.SGetUserSiKuQuanShuPageNum)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class CGetLiuxiaFreeGift :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.CGetLiuxiaFreeGift) */ {
 public:
  CGetLiuxiaFreeGift();
  virtual ~CGetLiuxiaFreeGift();

  CGetLiuxiaFreeGift(const CGetLiuxiaFreeGift& from);
  CGetLiuxiaFreeGift(CGetLiuxiaFreeGift&& from) noexcept
    : CGetLiuxiaFreeGift() {
    *this = ::std::move(from);
  }

  inline CGetLiuxiaFreeGift& operator=(const CGetLiuxiaFreeGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetLiuxiaFreeGift& operator=(CGetLiuxiaFreeGift&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetLiuxiaFreeGift& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetLiuxiaFreeGift* internal_default_instance() {
    return reinterpret_cast<const CGetLiuxiaFreeGift*>(
               &_CGetLiuxiaFreeGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CGetLiuxiaFreeGift& a, CGetLiuxiaFreeGift& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetLiuxiaFreeGift* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetLiuxiaFreeGift* New() const final {
    return CreateMaybeMessage<CGetLiuxiaFreeGift>(nullptr);
  }

  CGetLiuxiaFreeGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetLiuxiaFreeGift>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetLiuxiaFreeGift& from);
  void MergeFrom(const CGetLiuxiaFreeGift& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetLiuxiaFreeGift* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.CGetLiuxiaFreeGift";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:liuXiaTask.CGetLiuxiaFreeGift)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class SGetLiuxiaFreeGift :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.SGetLiuxiaFreeGift) */ {
 public:
  SGetLiuxiaFreeGift();
  virtual ~SGetLiuxiaFreeGift();

  SGetLiuxiaFreeGift(const SGetLiuxiaFreeGift& from);
  SGetLiuxiaFreeGift(SGetLiuxiaFreeGift&& from) noexcept
    : SGetLiuxiaFreeGift() {
    *this = ::std::move(from);
  }

  inline SGetLiuxiaFreeGift& operator=(const SGetLiuxiaFreeGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetLiuxiaFreeGift& operator=(SGetLiuxiaFreeGift&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetLiuxiaFreeGift& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetLiuxiaFreeGift* internal_default_instance() {
    return reinterpret_cast<const SGetLiuxiaFreeGift*>(
               &_SGetLiuxiaFreeGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SGetLiuxiaFreeGift& a, SGetLiuxiaFreeGift& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetLiuxiaFreeGift* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetLiuxiaFreeGift* New() const final {
    return CreateMaybeMessage<SGetLiuxiaFreeGift>(nullptr);
  }

  SGetLiuxiaFreeGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetLiuxiaFreeGift>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetLiuxiaFreeGift& from);
  void MergeFrom(const SGetLiuxiaFreeGift& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetLiuxiaFreeGift* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.SGetLiuxiaFreeGift";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.SGetLiuxiaFreeGift)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class CGetLiuxiaSwitch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.CGetLiuxiaSwitch) */ {
 public:
  CGetLiuxiaSwitch();
  virtual ~CGetLiuxiaSwitch();

  CGetLiuxiaSwitch(const CGetLiuxiaSwitch& from);
  CGetLiuxiaSwitch(CGetLiuxiaSwitch&& from) noexcept
    : CGetLiuxiaSwitch() {
    *this = ::std::move(from);
  }

  inline CGetLiuxiaSwitch& operator=(const CGetLiuxiaSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetLiuxiaSwitch& operator=(CGetLiuxiaSwitch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetLiuxiaSwitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetLiuxiaSwitch* internal_default_instance() {
    return reinterpret_cast<const CGetLiuxiaSwitch*>(
               &_CGetLiuxiaSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CGetLiuxiaSwitch& a, CGetLiuxiaSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetLiuxiaSwitch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetLiuxiaSwitch* New() const final {
    return CreateMaybeMessage<CGetLiuxiaSwitch>(nullptr);
  }

  CGetLiuxiaSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetLiuxiaSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetLiuxiaSwitch& from);
  void MergeFrom(const CGetLiuxiaSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetLiuxiaSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.CGetLiuxiaSwitch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:liuXiaTask.CGetLiuxiaSwitch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// -------------------------------------------------------------------

class SGetLiuxiaSwitch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liuXiaTask.SGetLiuxiaSwitch) */ {
 public:
  SGetLiuxiaSwitch();
  virtual ~SGetLiuxiaSwitch();

  SGetLiuxiaSwitch(const SGetLiuxiaSwitch& from);
  SGetLiuxiaSwitch(SGetLiuxiaSwitch&& from) noexcept
    : SGetLiuxiaSwitch() {
    *this = ::std::move(from);
  }

  inline SGetLiuxiaSwitch& operator=(const SGetLiuxiaSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetLiuxiaSwitch& operator=(SGetLiuxiaSwitch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetLiuxiaSwitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetLiuxiaSwitch* internal_default_instance() {
    return reinterpret_cast<const SGetLiuxiaSwitch*>(
               &_SGetLiuxiaSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SGetLiuxiaSwitch& a, SGetLiuxiaSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetLiuxiaSwitch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetLiuxiaSwitch* New() const final {
    return CreateMaybeMessage<SGetLiuxiaSwitch>(nullptr);
  }

  SGetLiuxiaSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetLiuxiaSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetLiuxiaSwitch& from);
  void MergeFrom(const SGetLiuxiaSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetLiuxiaSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liuXiaTask.SGetLiuxiaSwitch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_liuXiaTask_2eproto);
    return ::descriptor_table_liuXiaTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaynightFieldNumber = 1,
  };
  // int32 daynight = 1;
  void clear_daynight();
  ::PROTOBUF_NAMESPACE_ID::int32 daynight() const;
  void set_daynight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_daynight() const;
  void _internal_set_daynight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:liuXiaTask.SGetLiuxiaSwitch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 daynight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liuXiaTask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGetLiuXiaTaskList

// -------------------------------------------------------------------

// SGetLiuXiaTaskList

// string msg = 1;
inline void SGetLiuXiaTaskList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetLiuXiaTaskList::msg() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SGetLiuXiaTaskList.msg)
  return _internal_msg();
}
inline void SGetLiuXiaTaskList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SGetLiuXiaTaskList.msg)
}
inline std::string* SGetLiuXiaTaskList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SGetLiuXiaTaskList.msg)
  return _internal_mutable_msg();
}
inline const std::string& SGetLiuXiaTaskList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SGetLiuXiaTaskList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetLiuXiaTaskList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.SGetLiuXiaTaskList.msg)
}
inline void SGetLiuXiaTaskList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.SGetLiuXiaTaskList.msg)
}
inline void SGetLiuXiaTaskList::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.SGetLiuXiaTaskList.msg)
}
inline std::string* SGetLiuXiaTaskList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetLiuXiaTaskList::release_msg() {
  // @@protoc_insertion_point(field_release:liuXiaTask.SGetLiuXiaTaskList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetLiuXiaTaskList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.SGetLiuXiaTaskList.msg)
}

// int32 state = 2;
inline void SGetLiuXiaTaskList::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetLiuXiaTaskList::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetLiuXiaTaskList::state() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SGetLiuXiaTaskList.state)
  return _internal_state();
}
inline void SGetLiuXiaTaskList::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SGetLiuXiaTaskList::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SGetLiuXiaTaskList.state)
}

// repeated .liuXiaTask.LiuXiaTaskInfo featuredTaskList = 3;
inline int SGetLiuXiaTaskList::_internal_featuredtasklist_size() const {
  return featuredtasklist_.size();
}
inline int SGetLiuXiaTaskList::featuredtasklist_size() const {
  return _internal_featuredtasklist_size();
}
inline void SGetLiuXiaTaskList::clear_featuredtasklist() {
  featuredtasklist_.Clear();
}
inline ::liuXiaTask::LiuXiaTaskInfo* SGetLiuXiaTaskList::mutable_featuredtasklist(int index) {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SGetLiuXiaTaskList.featuredTaskList)
  return featuredtasklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >*
SGetLiuXiaTaskList::mutable_featuredtasklist() {
  // @@protoc_insertion_point(field_mutable_list:liuXiaTask.SGetLiuXiaTaskList.featuredTaskList)
  return &featuredtasklist_;
}
inline const ::liuXiaTask::LiuXiaTaskInfo& SGetLiuXiaTaskList::_internal_featuredtasklist(int index) const {
  return featuredtasklist_.Get(index);
}
inline const ::liuXiaTask::LiuXiaTaskInfo& SGetLiuXiaTaskList::featuredtasklist(int index) const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SGetLiuXiaTaskList.featuredTaskList)
  return _internal_featuredtasklist(index);
}
inline ::liuXiaTask::LiuXiaTaskInfo* SGetLiuXiaTaskList::_internal_add_featuredtasklist() {
  return featuredtasklist_.Add();
}
inline ::liuXiaTask::LiuXiaTaskInfo* SGetLiuXiaTaskList::add_featuredtasklist() {
  // @@protoc_insertion_point(field_add:liuXiaTask.SGetLiuXiaTaskList.featuredTaskList)
  return _internal_add_featuredtasklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >&
SGetLiuXiaTaskList::featuredtasklist() const {
  // @@protoc_insertion_point(field_list:liuXiaTask.SGetLiuXiaTaskList.featuredTaskList)
  return featuredtasklist_;
}

// repeated .liuXiaTask.LiuXiaTaskInfo suKuQuanShuTaskList = 4;
inline int SGetLiuXiaTaskList::_internal_sukuquanshutasklist_size() const {
  return sukuquanshutasklist_.size();
}
inline int SGetLiuXiaTaskList::sukuquanshutasklist_size() const {
  return _internal_sukuquanshutasklist_size();
}
inline void SGetLiuXiaTaskList::clear_sukuquanshutasklist() {
  sukuquanshutasklist_.Clear();
}
inline ::liuXiaTask::LiuXiaTaskInfo* SGetLiuXiaTaskList::mutable_sukuquanshutasklist(int index) {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SGetLiuXiaTaskList.suKuQuanShuTaskList)
  return sukuquanshutasklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >*
SGetLiuXiaTaskList::mutable_sukuquanshutasklist() {
  // @@protoc_insertion_point(field_mutable_list:liuXiaTask.SGetLiuXiaTaskList.suKuQuanShuTaskList)
  return &sukuquanshutasklist_;
}
inline const ::liuXiaTask::LiuXiaTaskInfo& SGetLiuXiaTaskList::_internal_sukuquanshutasklist(int index) const {
  return sukuquanshutasklist_.Get(index);
}
inline const ::liuXiaTask::LiuXiaTaskInfo& SGetLiuXiaTaskList::sukuquanshutasklist(int index) const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SGetLiuXiaTaskList.suKuQuanShuTaskList)
  return _internal_sukuquanshutasklist(index);
}
inline ::liuXiaTask::LiuXiaTaskInfo* SGetLiuXiaTaskList::_internal_add_sukuquanshutasklist() {
  return sukuquanshutasklist_.Add();
}
inline ::liuXiaTask::LiuXiaTaskInfo* SGetLiuXiaTaskList::add_sukuquanshutasklist() {
  // @@protoc_insertion_point(field_add:liuXiaTask.SGetLiuXiaTaskList.suKuQuanShuTaskList)
  return _internal_add_sukuquanshutasklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >&
SGetLiuXiaTaskList::sukuquanshutasklist() const {
  // @@protoc_insertion_point(field_list:liuXiaTask.SGetLiuXiaTaskList.suKuQuanShuTaskList)
  return sukuquanshutasklist_;
}

// repeated .liuXiaTask.LiuXiaTaskInfo dailyTaskList = 5;
inline int SGetLiuXiaTaskList::_internal_dailytasklist_size() const {
  return dailytasklist_.size();
}
inline int SGetLiuXiaTaskList::dailytasklist_size() const {
  return _internal_dailytasklist_size();
}
inline void SGetLiuXiaTaskList::clear_dailytasklist() {
  dailytasklist_.Clear();
}
inline ::liuXiaTask::LiuXiaTaskInfo* SGetLiuXiaTaskList::mutable_dailytasklist(int index) {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SGetLiuXiaTaskList.dailyTaskList)
  return dailytasklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >*
SGetLiuXiaTaskList::mutable_dailytasklist() {
  // @@protoc_insertion_point(field_mutable_list:liuXiaTask.SGetLiuXiaTaskList.dailyTaskList)
  return &dailytasklist_;
}
inline const ::liuXiaTask::LiuXiaTaskInfo& SGetLiuXiaTaskList::_internal_dailytasklist(int index) const {
  return dailytasklist_.Get(index);
}
inline const ::liuXiaTask::LiuXiaTaskInfo& SGetLiuXiaTaskList::dailytasklist(int index) const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SGetLiuXiaTaskList.dailyTaskList)
  return _internal_dailytasklist(index);
}
inline ::liuXiaTask::LiuXiaTaskInfo* SGetLiuXiaTaskList::_internal_add_dailytasklist() {
  return dailytasklist_.Add();
}
inline ::liuXiaTask::LiuXiaTaskInfo* SGetLiuXiaTaskList::add_dailytasklist() {
  // @@protoc_insertion_point(field_add:liuXiaTask.SGetLiuXiaTaskList.dailyTaskList)
  return _internal_add_dailytasklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskInfo >&
SGetLiuXiaTaskList::dailytasklist() const {
  // @@protoc_insertion_point(field_list:liuXiaTask.SGetLiuXiaTaskList.dailyTaskList)
  return dailytasklist_;
}

// -------------------------------------------------------------------

// LiuXiaTaskInfo

// int32 taskId = 1;
inline void LiuXiaTaskInfo::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskInfo::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskInfo::taskid() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.LiuXiaTaskInfo.taskId)
  return _internal_taskid();
}
inline void LiuXiaTaskInfo::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void LiuXiaTaskInfo::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.LiuXiaTaskInfo.taskId)
}

// string name = 2;
inline void LiuXiaTaskInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LiuXiaTaskInfo::name() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.LiuXiaTaskInfo.name)
  return _internal_name();
}
inline void LiuXiaTaskInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.LiuXiaTaskInfo.name)
}
inline std::string* LiuXiaTaskInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.LiuXiaTaskInfo.name)
  return _internal_mutable_name();
}
inline const std::string& LiuXiaTaskInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void LiuXiaTaskInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LiuXiaTaskInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.LiuXiaTaskInfo.name)
}
inline void LiuXiaTaskInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.LiuXiaTaskInfo.name)
}
inline void LiuXiaTaskInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.LiuXiaTaskInfo.name)
}
inline std::string* LiuXiaTaskInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LiuXiaTaskInfo::release_name() {
  // @@protoc_insertion_point(field_release:liuXiaTask.LiuXiaTaskInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LiuXiaTaskInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.LiuXiaTaskInfo.name)
}

// string key = 3;
inline void LiuXiaTaskInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LiuXiaTaskInfo::key() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.LiuXiaTaskInfo.key)
  return _internal_key();
}
inline void LiuXiaTaskInfo::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.LiuXiaTaskInfo.key)
}
inline std::string* LiuXiaTaskInfo::mutable_key() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.LiuXiaTaskInfo.key)
  return _internal_mutable_key();
}
inline const std::string& LiuXiaTaskInfo::_internal_key() const {
  return key_.GetNoArena();
}
inline void LiuXiaTaskInfo::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LiuXiaTaskInfo::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.LiuXiaTaskInfo.key)
}
inline void LiuXiaTaskInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.LiuXiaTaskInfo.key)
}
inline void LiuXiaTaskInfo::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.LiuXiaTaskInfo.key)
}
inline std::string* LiuXiaTaskInfo::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LiuXiaTaskInfo::release_key() {
  // @@protoc_insertion_point(field_release:liuXiaTask.LiuXiaTaskInfo.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LiuXiaTaskInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.LiuXiaTaskInfo.key)
}

// string desc = 4;
inline void LiuXiaTaskInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LiuXiaTaskInfo::desc() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.LiuXiaTaskInfo.desc)
  return _internal_desc();
}
inline void LiuXiaTaskInfo::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.LiuXiaTaskInfo.desc)
}
inline std::string* LiuXiaTaskInfo::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.LiuXiaTaskInfo.desc)
  return _internal_mutable_desc();
}
inline const std::string& LiuXiaTaskInfo::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void LiuXiaTaskInfo::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LiuXiaTaskInfo::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.LiuXiaTaskInfo.desc)
}
inline void LiuXiaTaskInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.LiuXiaTaskInfo.desc)
}
inline void LiuXiaTaskInfo::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.LiuXiaTaskInfo.desc)
}
inline std::string* LiuXiaTaskInfo::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LiuXiaTaskInfo::release_desc() {
  // @@protoc_insertion_point(field_release:liuXiaTask.LiuXiaTaskInfo.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LiuXiaTaskInfo::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.LiuXiaTaskInfo.desc)
}

// int32 copperCoinNum = 5;
inline void LiuXiaTaskInfo::clear_coppercoinnum() {
  coppercoinnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskInfo::_internal_coppercoinnum() const {
  return coppercoinnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskInfo::coppercoinnum() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.LiuXiaTaskInfo.copperCoinNum)
  return _internal_coppercoinnum();
}
inline void LiuXiaTaskInfo::_internal_set_coppercoinnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coppercoinnum_ = value;
}
inline void LiuXiaTaskInfo::set_coppercoinnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coppercoinnum(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.LiuXiaTaskInfo.copperCoinNum)
}

// int32 status = 6;
inline void LiuXiaTaskInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskInfo::status() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.LiuXiaTaskInfo.status)
  return _internal_status();
}
inline void LiuXiaTaskInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void LiuXiaTaskInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.LiuXiaTaskInfo.status)
}

// -------------------------------------------------------------------

// CLiuXiaCompleteTaskReporting

// string key = 1;
inline void CLiuXiaCompleteTaskReporting::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CLiuXiaCompleteTaskReporting::key() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.CLiuXiaCompleteTaskReporting.key)
  return _internal_key();
}
inline void CLiuXiaCompleteTaskReporting::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.CLiuXiaCompleteTaskReporting.key)
}
inline std::string* CLiuXiaCompleteTaskReporting::mutable_key() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.CLiuXiaCompleteTaskReporting.key)
  return _internal_mutable_key();
}
inline const std::string& CLiuXiaCompleteTaskReporting::_internal_key() const {
  return key_.GetNoArena();
}
inline void CLiuXiaCompleteTaskReporting::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CLiuXiaCompleteTaskReporting::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.CLiuXiaCompleteTaskReporting.key)
}
inline void CLiuXiaCompleteTaskReporting::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.CLiuXiaCompleteTaskReporting.key)
}
inline void CLiuXiaCompleteTaskReporting::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.CLiuXiaCompleteTaskReporting.key)
}
inline std::string* CLiuXiaCompleteTaskReporting::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CLiuXiaCompleteTaskReporting::release_key() {
  // @@protoc_insertion_point(field_release:liuXiaTask.CLiuXiaCompleteTaskReporting.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CLiuXiaCompleteTaskReporting::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.CLiuXiaCompleteTaskReporting.key)
}

// int32 taskId = 2;
inline void CLiuXiaCompleteTaskReporting::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLiuXiaCompleteTaskReporting::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLiuXiaCompleteTaskReporting::taskid() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.CLiuXiaCompleteTaskReporting.taskId)
  return _internal_taskid();
}
inline void CLiuXiaCompleteTaskReporting::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void CLiuXiaCompleteTaskReporting::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.CLiuXiaCompleteTaskReporting.taskId)
}

// -------------------------------------------------------------------

// SLiuXiaCompleteTaskReporting

// string key = 1;
inline void SLiuXiaCompleteTaskReporting::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SLiuXiaCompleteTaskReporting::key() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SLiuXiaCompleteTaskReporting.key)
  return _internal_key();
}
inline void SLiuXiaCompleteTaskReporting::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SLiuXiaCompleteTaskReporting.key)
}
inline std::string* SLiuXiaCompleteTaskReporting::mutable_key() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SLiuXiaCompleteTaskReporting.key)
  return _internal_mutable_key();
}
inline const std::string& SLiuXiaCompleteTaskReporting::_internal_key() const {
  return key_.GetNoArena();
}
inline void SLiuXiaCompleteTaskReporting::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SLiuXiaCompleteTaskReporting::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.SLiuXiaCompleteTaskReporting.key)
}
inline void SLiuXiaCompleteTaskReporting::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.SLiuXiaCompleteTaskReporting.key)
}
inline void SLiuXiaCompleteTaskReporting::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.SLiuXiaCompleteTaskReporting.key)
}
inline std::string* SLiuXiaCompleteTaskReporting::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SLiuXiaCompleteTaskReporting::release_key() {
  // @@protoc_insertion_point(field_release:liuXiaTask.SLiuXiaCompleteTaskReporting.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SLiuXiaCompleteTaskReporting::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.SLiuXiaCompleteTaskReporting.key)
}

// int32 taskId = 2;
inline void SLiuXiaCompleteTaskReporting::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLiuXiaCompleteTaskReporting::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLiuXiaCompleteTaskReporting::taskid() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SLiuXiaCompleteTaskReporting.taskId)
  return _internal_taskid();
}
inline void SLiuXiaCompleteTaskReporting::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void SLiuXiaCompleteTaskReporting::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SLiuXiaCompleteTaskReporting.taskId)
}

// int32 state = 3;
inline void SLiuXiaCompleteTaskReporting::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLiuXiaCompleteTaskReporting::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLiuXiaCompleteTaskReporting::state() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SLiuXiaCompleteTaskReporting.state)
  return _internal_state();
}
inline void SLiuXiaCompleteTaskReporting::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SLiuXiaCompleteTaskReporting::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SLiuXiaCompleteTaskReporting.state)
}

// string msg = 4;
inline void SLiuXiaCompleteTaskReporting::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SLiuXiaCompleteTaskReporting::msg() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SLiuXiaCompleteTaskReporting.msg)
  return _internal_msg();
}
inline void SLiuXiaCompleteTaskReporting::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SLiuXiaCompleteTaskReporting.msg)
}
inline std::string* SLiuXiaCompleteTaskReporting::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SLiuXiaCompleteTaskReporting.msg)
  return _internal_mutable_msg();
}
inline const std::string& SLiuXiaCompleteTaskReporting::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SLiuXiaCompleteTaskReporting::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SLiuXiaCompleteTaskReporting::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.SLiuXiaCompleteTaskReporting.msg)
}
inline void SLiuXiaCompleteTaskReporting::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.SLiuXiaCompleteTaskReporting.msg)
}
inline void SLiuXiaCompleteTaskReporting::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.SLiuXiaCompleteTaskReporting.msg)
}
inline std::string* SLiuXiaCompleteTaskReporting::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SLiuXiaCompleteTaskReporting::release_msg() {
  // @@protoc_insertion_point(field_release:liuXiaTask.SLiuXiaCompleteTaskReporting.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SLiuXiaCompleteTaskReporting::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.SLiuXiaCompleteTaskReporting.msg)
}

// -------------------------------------------------------------------

// CLiuXiaClaimRewards

// string key = 1;
inline void CLiuXiaClaimRewards::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CLiuXiaClaimRewards::key() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.CLiuXiaClaimRewards.key)
  return _internal_key();
}
inline void CLiuXiaClaimRewards::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.CLiuXiaClaimRewards.key)
}
inline std::string* CLiuXiaClaimRewards::mutable_key() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.CLiuXiaClaimRewards.key)
  return _internal_mutable_key();
}
inline const std::string& CLiuXiaClaimRewards::_internal_key() const {
  return key_.GetNoArena();
}
inline void CLiuXiaClaimRewards::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CLiuXiaClaimRewards::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.CLiuXiaClaimRewards.key)
}
inline void CLiuXiaClaimRewards::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.CLiuXiaClaimRewards.key)
}
inline void CLiuXiaClaimRewards::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.CLiuXiaClaimRewards.key)
}
inline std::string* CLiuXiaClaimRewards::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CLiuXiaClaimRewards::release_key() {
  // @@protoc_insertion_point(field_release:liuXiaTask.CLiuXiaClaimRewards.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CLiuXiaClaimRewards::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.CLiuXiaClaimRewards.key)
}

// int32 taskId = 2;
inline void CLiuXiaClaimRewards::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLiuXiaClaimRewards::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLiuXiaClaimRewards::taskid() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.CLiuXiaClaimRewards.taskId)
  return _internal_taskid();
}
inline void CLiuXiaClaimRewards::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void CLiuXiaClaimRewards::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.CLiuXiaClaimRewards.taskId)
}

// -------------------------------------------------------------------

// SLiuXiaClaimRewards

// string key = 1;
inline void SLiuXiaClaimRewards::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SLiuXiaClaimRewards::key() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SLiuXiaClaimRewards.key)
  return _internal_key();
}
inline void SLiuXiaClaimRewards::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SLiuXiaClaimRewards.key)
}
inline std::string* SLiuXiaClaimRewards::mutable_key() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SLiuXiaClaimRewards.key)
  return _internal_mutable_key();
}
inline const std::string& SLiuXiaClaimRewards::_internal_key() const {
  return key_.GetNoArena();
}
inline void SLiuXiaClaimRewards::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SLiuXiaClaimRewards::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.SLiuXiaClaimRewards.key)
}
inline void SLiuXiaClaimRewards::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.SLiuXiaClaimRewards.key)
}
inline void SLiuXiaClaimRewards::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.SLiuXiaClaimRewards.key)
}
inline std::string* SLiuXiaClaimRewards::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SLiuXiaClaimRewards::release_key() {
  // @@protoc_insertion_point(field_release:liuXiaTask.SLiuXiaClaimRewards.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SLiuXiaClaimRewards::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.SLiuXiaClaimRewards.key)
}

// int32 taskId = 2;
inline void SLiuXiaClaimRewards::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLiuXiaClaimRewards::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLiuXiaClaimRewards::taskid() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SLiuXiaClaimRewards.taskId)
  return _internal_taskid();
}
inline void SLiuXiaClaimRewards::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void SLiuXiaClaimRewards::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SLiuXiaClaimRewards.taskId)
}

// repeated .liuXiaTask.LiuXiaTaskRewardInfo list = 3;
inline int SLiuXiaClaimRewards::_internal_list_size() const {
  return list_.size();
}
inline int SLiuXiaClaimRewards::list_size() const {
  return _internal_list_size();
}
inline void SLiuXiaClaimRewards::clear_list() {
  list_.Clear();
}
inline ::liuXiaTask::LiuXiaTaskRewardInfo* SLiuXiaClaimRewards::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SLiuXiaClaimRewards.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskRewardInfo >*
SLiuXiaClaimRewards::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:liuXiaTask.SLiuXiaClaimRewards.list)
  return &list_;
}
inline const ::liuXiaTask::LiuXiaTaskRewardInfo& SLiuXiaClaimRewards::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::liuXiaTask::LiuXiaTaskRewardInfo& SLiuXiaClaimRewards::list(int index) const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SLiuXiaClaimRewards.list)
  return _internal_list(index);
}
inline ::liuXiaTask::LiuXiaTaskRewardInfo* SLiuXiaClaimRewards::_internal_add_list() {
  return list_.Add();
}
inline ::liuXiaTask::LiuXiaTaskRewardInfo* SLiuXiaClaimRewards::add_list() {
  // @@protoc_insertion_point(field_add:liuXiaTask.SLiuXiaClaimRewards.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liuXiaTask::LiuXiaTaskRewardInfo >&
SLiuXiaClaimRewards::list() const {
  // @@protoc_insertion_point(field_list:liuXiaTask.SLiuXiaClaimRewards.list)
  return list_;
}

// int32 state = 4;
inline void SLiuXiaClaimRewards::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLiuXiaClaimRewards::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLiuXiaClaimRewards::state() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SLiuXiaClaimRewards.state)
  return _internal_state();
}
inline void SLiuXiaClaimRewards::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SLiuXiaClaimRewards::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SLiuXiaClaimRewards.state)
}

// string msg = 5;
inline void SLiuXiaClaimRewards::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SLiuXiaClaimRewards::msg() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SLiuXiaClaimRewards.msg)
  return _internal_msg();
}
inline void SLiuXiaClaimRewards::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SLiuXiaClaimRewards.msg)
}
inline std::string* SLiuXiaClaimRewards::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SLiuXiaClaimRewards.msg)
  return _internal_mutable_msg();
}
inline const std::string& SLiuXiaClaimRewards::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SLiuXiaClaimRewards::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SLiuXiaClaimRewards::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.SLiuXiaClaimRewards.msg)
}
inline void SLiuXiaClaimRewards::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.SLiuXiaClaimRewards.msg)
}
inline void SLiuXiaClaimRewards::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.SLiuXiaClaimRewards.msg)
}
inline std::string* SLiuXiaClaimRewards::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SLiuXiaClaimRewards::release_msg() {
  // @@protoc_insertion_point(field_release:liuXiaTask.SLiuXiaClaimRewards.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SLiuXiaClaimRewards::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.SLiuXiaClaimRewards.msg)
}

// -------------------------------------------------------------------

// LiuXiaTaskRewardInfo

// string key = 1;
inline void LiuXiaTaskRewardInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LiuXiaTaskRewardInfo::key() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.LiuXiaTaskRewardInfo.key)
  return _internal_key();
}
inline void LiuXiaTaskRewardInfo::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.LiuXiaTaskRewardInfo.key)
}
inline std::string* LiuXiaTaskRewardInfo::mutable_key() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.LiuXiaTaskRewardInfo.key)
  return _internal_mutable_key();
}
inline const std::string& LiuXiaTaskRewardInfo::_internal_key() const {
  return key_.GetNoArena();
}
inline void LiuXiaTaskRewardInfo::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LiuXiaTaskRewardInfo::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.LiuXiaTaskRewardInfo.key)
}
inline void LiuXiaTaskRewardInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.LiuXiaTaskRewardInfo.key)
}
inline void LiuXiaTaskRewardInfo::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.LiuXiaTaskRewardInfo.key)
}
inline std::string* LiuXiaTaskRewardInfo::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LiuXiaTaskRewardInfo::release_key() {
  // @@protoc_insertion_point(field_release:liuXiaTask.LiuXiaTaskRewardInfo.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LiuXiaTaskRewardInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.LiuXiaTaskRewardInfo.key)
}

// int32 taskId = 2;
inline void LiuXiaTaskRewardInfo::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskRewardInfo::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskRewardInfo::taskid() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.LiuXiaTaskRewardInfo.taskId)
  return _internal_taskid();
}
inline void LiuXiaTaskRewardInfo::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void LiuXiaTaskRewardInfo::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.LiuXiaTaskRewardInfo.taskId)
}

// int32 copperCoinNum = 3;
inline void LiuXiaTaskRewardInfo::clear_coppercoinnum() {
  coppercoinnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskRewardInfo::_internal_coppercoinnum() const {
  return coppercoinnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiuXiaTaskRewardInfo::coppercoinnum() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.LiuXiaTaskRewardInfo.copperCoinNum)
  return _internal_coppercoinnum();
}
inline void LiuXiaTaskRewardInfo::_internal_set_coppercoinnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coppercoinnum_ = value;
}
inline void LiuXiaTaskRewardInfo::set_coppercoinnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coppercoinnum(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.LiuXiaTaskRewardInfo.copperCoinNum)
}

// -------------------------------------------------------------------

// CCollectionSiKuQuanShu

// int32 num = 1;
inline void CCollectionSiKuQuanShu::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCollectionSiKuQuanShu::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCollectionSiKuQuanShu::num() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.CCollectionSiKuQuanShu.num)
  return _internal_num();
}
inline void CCollectionSiKuQuanShu::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void CCollectionSiKuQuanShu::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.CCollectionSiKuQuanShu.num)
}

// int32 npcId = 2;
inline void CCollectionSiKuQuanShu::clear_npcid() {
  npcid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCollectionSiKuQuanShu::_internal_npcid() const {
  return npcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCollectionSiKuQuanShu::npcid() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.CCollectionSiKuQuanShu.npcId)
  return _internal_npcid();
}
inline void CCollectionSiKuQuanShu::_internal_set_npcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  npcid_ = value;
}
inline void CCollectionSiKuQuanShu::set_npcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_npcid(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.CCollectionSiKuQuanShu.npcId)
}

// -------------------------------------------------------------------

// SCollectionSiKuQuanShu

// int32 state = 1;
inline void SCollectionSiKuQuanShu::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCollectionSiKuQuanShu::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCollectionSiKuQuanShu::state() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SCollectionSiKuQuanShu.state)
  return _internal_state();
}
inline void SCollectionSiKuQuanShu::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SCollectionSiKuQuanShu::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SCollectionSiKuQuanShu.state)
}

// string msg = 2;
inline void SCollectionSiKuQuanShu::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCollectionSiKuQuanShu::msg() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SCollectionSiKuQuanShu.msg)
  return _internal_msg();
}
inline void SCollectionSiKuQuanShu::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SCollectionSiKuQuanShu.msg)
}
inline std::string* SCollectionSiKuQuanShu::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SCollectionSiKuQuanShu.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCollectionSiKuQuanShu::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SCollectionSiKuQuanShu::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCollectionSiKuQuanShu::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.SCollectionSiKuQuanShu.msg)
}
inline void SCollectionSiKuQuanShu::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.SCollectionSiKuQuanShu.msg)
}
inline void SCollectionSiKuQuanShu::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.SCollectionSiKuQuanShu.msg)
}
inline std::string* SCollectionSiKuQuanShu::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCollectionSiKuQuanShu::release_msg() {
  // @@protoc_insertion_point(field_release:liuXiaTask.SCollectionSiKuQuanShu.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCollectionSiKuQuanShu::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.SCollectionSiKuQuanShu.msg)
}

// -------------------------------------------------------------------

// CStatCollectionSiKuQuanShu

// -------------------------------------------------------------------

// SStatCollectionSiKuQuanShu

// int32 totalUserNum = 1;
inline void SStatCollectionSiKuQuanShu::clear_totalusernum() {
  totalusernum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SStatCollectionSiKuQuanShu::_internal_totalusernum() const {
  return totalusernum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SStatCollectionSiKuQuanShu::totalusernum() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SStatCollectionSiKuQuanShu.totalUserNum)
  return _internal_totalusernum();
}
inline void SStatCollectionSiKuQuanShu::_internal_set_totalusernum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalusernum_ = value;
}
inline void SStatCollectionSiKuQuanShu::set_totalusernum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalusernum(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SStatCollectionSiKuQuanShu.totalUserNum)
}

// int32 totalPageNum = 2;
inline void SStatCollectionSiKuQuanShu::clear_totalpagenum() {
  totalpagenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SStatCollectionSiKuQuanShu::_internal_totalpagenum() const {
  return totalpagenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SStatCollectionSiKuQuanShu::totalpagenum() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SStatCollectionSiKuQuanShu.totalPageNum)
  return _internal_totalpagenum();
}
inline void SStatCollectionSiKuQuanShu::_internal_set_totalpagenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalpagenum_ = value;
}
inline void SStatCollectionSiKuQuanShu::set_totalpagenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalpagenum(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SStatCollectionSiKuQuanShu.totalPageNum)
}

// -------------------------------------------------------------------

// CGetUserSiKuQuanShuPageNum

// -------------------------------------------------------------------

// SGetUserSiKuQuanShuPageNum

// int32 num = 1;
inline void SGetUserSiKuQuanShuPageNum::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetUserSiKuQuanShuPageNum::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetUserSiKuQuanShuPageNum::num() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SGetUserSiKuQuanShuPageNum.num)
  return _internal_num();
}
inline void SGetUserSiKuQuanShuPageNum::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void SGetUserSiKuQuanShuPageNum::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SGetUserSiKuQuanShuPageNum.num)
}

// -------------------------------------------------------------------

// CGetLiuxiaFreeGift

// -------------------------------------------------------------------

// SGetLiuxiaFreeGift

// int32 state = 1;
inline void SGetLiuxiaFreeGift::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetLiuxiaFreeGift::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetLiuxiaFreeGift::state() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SGetLiuxiaFreeGift.state)
  return _internal_state();
}
inline void SGetLiuxiaFreeGift::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SGetLiuxiaFreeGift::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SGetLiuxiaFreeGift.state)
}

// string msg = 2;
inline void SGetLiuxiaFreeGift::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetLiuxiaFreeGift::msg() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SGetLiuxiaFreeGift.msg)
  return _internal_msg();
}
inline void SGetLiuxiaFreeGift::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SGetLiuxiaFreeGift.msg)
}
inline std::string* SGetLiuxiaFreeGift::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:liuXiaTask.SGetLiuxiaFreeGift.msg)
  return _internal_mutable_msg();
}
inline const std::string& SGetLiuxiaFreeGift::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SGetLiuxiaFreeGift::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetLiuxiaFreeGift::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:liuXiaTask.SGetLiuxiaFreeGift.msg)
}
inline void SGetLiuxiaFreeGift::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:liuXiaTask.SGetLiuxiaFreeGift.msg)
}
inline void SGetLiuxiaFreeGift::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:liuXiaTask.SGetLiuxiaFreeGift.msg)
}
inline std::string* SGetLiuxiaFreeGift::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetLiuxiaFreeGift::release_msg() {
  // @@protoc_insertion_point(field_release:liuXiaTask.SGetLiuxiaFreeGift.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetLiuxiaFreeGift::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:liuXiaTask.SGetLiuxiaFreeGift.msg)
}

// -------------------------------------------------------------------

// CGetLiuxiaSwitch

// -------------------------------------------------------------------

// SGetLiuxiaSwitch

// int32 daynight = 1;
inline void SGetLiuxiaSwitch::clear_daynight() {
  daynight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetLiuxiaSwitch::_internal_daynight() const {
  return daynight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetLiuxiaSwitch::daynight() const {
  // @@protoc_insertion_point(field_get:liuXiaTask.SGetLiuxiaSwitch.daynight)
  return _internal_daynight();
}
inline void SGetLiuxiaSwitch::_internal_set_daynight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  daynight_ = value;
}
inline void SGetLiuxiaSwitch::set_daynight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_daynight(value);
  // @@protoc_insertion_point(field_set:liuXiaTask.SGetLiuxiaSwitch.daynight)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace liuXiaTask

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_liuXiaTask_2eproto
