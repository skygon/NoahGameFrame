// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: businessObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_businessObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_businessObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "position.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_businessObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_businessObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_businessObject_2eproto;
namespace space {
class BObject;
class BObjectDefaultTypeInternal;
extern BObjectDefaultTypeInternal _BObject_default_instance_;
class BSpaceAirVehicle;
class BSpaceAirVehicleDefaultTypeInternal;
extern BSpaceAirVehicleDefaultTypeInternal _BSpaceAirVehicle_default_instance_;
class BSpaceGoods;
class BSpaceGoodsDefaultTypeInternal;
extern BSpaceGoodsDefaultTypeInternal _BSpaceGoods_default_instance_;
class CBusinessObjectList;
class CBusinessObjectListDefaultTypeInternal;
extern CBusinessObjectListDefaultTypeInternal _CBusinessObjectList_default_instance_;
class CPickGoods;
class CPickGoodsDefaultTypeInternal;
extern CPickGoodsDefaultTypeInternal _CPickGoods_default_instance_;
class CPickSpaceGoods;
class CPickSpaceGoodsDefaultTypeInternal;
extern CPickSpaceGoodsDefaultTypeInternal _CPickSpaceGoods_default_instance_;
class CPutGoods;
class CPutGoodsDefaultTypeInternal;
extern CPutGoodsDefaultTypeInternal _CPutGoods_default_instance_;
class CSpaceAirVehicleTake;
class CSpaceAirVehicleTakeDefaultTypeInternal;
extern CSpaceAirVehicleTakeDefaultTypeInternal _CSpaceAirVehicleTake_default_instance_;
class CTriggerBo;
class CTriggerBoDefaultTypeInternal;
extern CTriggerBoDefaultTypeInternal _CTriggerBo_default_instance_;
class SBusinessObjectList;
class SBusinessObjectListDefaultTypeInternal;
extern SBusinessObjectListDefaultTypeInternal _SBusinessObjectList_default_instance_;
class SPickGoods;
class SPickGoodsDefaultTypeInternal;
extern SPickGoodsDefaultTypeInternal _SPickGoods_default_instance_;
class SPickSpaceGoods;
class SPickSpaceGoodsDefaultTypeInternal;
extern SPickSpaceGoodsDefaultTypeInternal _SPickSpaceGoods_default_instance_;
class SPutGoods;
class SPutGoodsDefaultTypeInternal;
extern SPutGoodsDefaultTypeInternal _SPutGoods_default_instance_;
class SPutGoodsList;
class SPutGoodsListDefaultTypeInternal;
extern SPutGoodsListDefaultTypeInternal _SPutGoodsList_default_instance_;
class SSpaceAirVehicle;
class SSpaceAirVehicleDefaultTypeInternal;
extern SSpaceAirVehicleDefaultTypeInternal _SSpaceAirVehicle_default_instance_;
class SSpaceAirVehicleDisappear;
class SSpaceAirVehicleDisappearDefaultTypeInternal;
extern SSpaceAirVehicleDisappearDefaultTypeInternal _SSpaceAirVehicleDisappear_default_instance_;
class SSpaceAirVehicleList;
class SSpaceAirVehicleListDefaultTypeInternal;
extern SSpaceAirVehicleListDefaultTypeInternal _SSpaceAirVehicleList_default_instance_;
class SSpaceAirVehicleTake;
class SSpaceAirVehicleTakeDefaultTypeInternal;
extern SSpaceAirVehicleTakeDefaultTypeInternal _SSpaceAirVehicleTake_default_instance_;
class SSpaceGoodsList;
class SSpaceGoodsListDefaultTypeInternal;
extern SSpaceGoodsListDefaultTypeInternal _SSpaceGoodsList_default_instance_;
class STriggerBo;
class STriggerBoDefaultTypeInternal;
extern STriggerBoDefaultTypeInternal _STriggerBo_default_instance_;
class STriggerBoBroad;
class STriggerBoBroadDefaultTypeInternal;
extern STriggerBoBroadDefaultTypeInternal _STriggerBoBroad_default_instance_;
}  // namespace space
PROTOBUF_NAMESPACE_OPEN
template<> ::space::BObject* Arena::CreateMaybeMessage<::space::BObject>(Arena*);
template<> ::space::BSpaceAirVehicle* Arena::CreateMaybeMessage<::space::BSpaceAirVehicle>(Arena*);
template<> ::space::BSpaceGoods* Arena::CreateMaybeMessage<::space::BSpaceGoods>(Arena*);
template<> ::space::CBusinessObjectList* Arena::CreateMaybeMessage<::space::CBusinessObjectList>(Arena*);
template<> ::space::CPickGoods* Arena::CreateMaybeMessage<::space::CPickGoods>(Arena*);
template<> ::space::CPickSpaceGoods* Arena::CreateMaybeMessage<::space::CPickSpaceGoods>(Arena*);
template<> ::space::CPutGoods* Arena::CreateMaybeMessage<::space::CPutGoods>(Arena*);
template<> ::space::CSpaceAirVehicleTake* Arena::CreateMaybeMessage<::space::CSpaceAirVehicleTake>(Arena*);
template<> ::space::CTriggerBo* Arena::CreateMaybeMessage<::space::CTriggerBo>(Arena*);
template<> ::space::SBusinessObjectList* Arena::CreateMaybeMessage<::space::SBusinessObjectList>(Arena*);
template<> ::space::SPickGoods* Arena::CreateMaybeMessage<::space::SPickGoods>(Arena*);
template<> ::space::SPickSpaceGoods* Arena::CreateMaybeMessage<::space::SPickSpaceGoods>(Arena*);
template<> ::space::SPutGoods* Arena::CreateMaybeMessage<::space::SPutGoods>(Arena*);
template<> ::space::SPutGoodsList* Arena::CreateMaybeMessage<::space::SPutGoodsList>(Arena*);
template<> ::space::SSpaceAirVehicle* Arena::CreateMaybeMessage<::space::SSpaceAirVehicle>(Arena*);
template<> ::space::SSpaceAirVehicleDisappear* Arena::CreateMaybeMessage<::space::SSpaceAirVehicleDisappear>(Arena*);
template<> ::space::SSpaceAirVehicleList* Arena::CreateMaybeMessage<::space::SSpaceAirVehicleList>(Arena*);
template<> ::space::SSpaceAirVehicleTake* Arena::CreateMaybeMessage<::space::SSpaceAirVehicleTake>(Arena*);
template<> ::space::SSpaceGoodsList* Arena::CreateMaybeMessage<::space::SSpaceGoodsList>(Arena*);
template<> ::space::STriggerBo* Arena::CreateMaybeMessage<::space::STriggerBo>(Arena*);
template<> ::space::STriggerBoBroad* Arena::CreateMaybeMessage<::space::STriggerBoBroad>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace space {

// ===================================================================

class CBusinessObjectList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.CBusinessObjectList) */ {
 public:
  CBusinessObjectList();
  virtual ~CBusinessObjectList();

  CBusinessObjectList(const CBusinessObjectList& from);
  CBusinessObjectList(CBusinessObjectList&& from) noexcept
    : CBusinessObjectList() {
    *this = ::std::move(from);
  }

  inline CBusinessObjectList& operator=(const CBusinessObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBusinessObjectList& operator=(CBusinessObjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBusinessObjectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBusinessObjectList* internal_default_instance() {
    return reinterpret_cast<const CBusinessObjectList*>(
               &_CBusinessObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CBusinessObjectList& a, CBusinessObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(CBusinessObjectList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBusinessObjectList* New() const final {
    return CreateMaybeMessage<CBusinessObjectList>(nullptr);
  }

  CBusinessObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBusinessObjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBusinessObjectList& from);
  void MergeFrom(const CBusinessObjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBusinessObjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.CBusinessObjectList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 1,
  };
  // int32 sceneId = 1;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.CBusinessObjectList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SBusinessObjectList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SBusinessObjectList) */ {
 public:
  SBusinessObjectList();
  virtual ~SBusinessObjectList();

  SBusinessObjectList(const SBusinessObjectList& from);
  SBusinessObjectList(SBusinessObjectList&& from) noexcept
    : SBusinessObjectList() {
    *this = ::std::move(from);
  }

  inline SBusinessObjectList& operator=(const SBusinessObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBusinessObjectList& operator=(SBusinessObjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBusinessObjectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBusinessObjectList* internal_default_instance() {
    return reinterpret_cast<const SBusinessObjectList*>(
               &_SBusinessObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SBusinessObjectList& a, SBusinessObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(SBusinessObjectList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBusinessObjectList* New() const final {
    return CreateMaybeMessage<SBusinessObjectList>(nullptr);
  }

  SBusinessObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBusinessObjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBusinessObjectList& from);
  void MergeFrom(const SBusinessObjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBusinessObjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SBusinessObjectList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoListFieldNumber = 1,
  };
  // repeated .space.BObject boList = 1;
  int bolist_size() const;
  private:
  int _internal_bolist_size() const;
  public:
  void clear_bolist();
  ::space::BObject* mutable_bolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BObject >*
      mutable_bolist();
  private:
  const ::space::BObject& _internal_bolist(int index) const;
  ::space::BObject* _internal_add_bolist();
  public:
  const ::space::BObject& bolist(int index) const;
  ::space::BObject* add_bolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BObject >&
      bolist() const;

  // @@protoc_insertion_point(class_scope:space.SBusinessObjectList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BObject > bolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class BObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.BObject) */ {
 public:
  BObject();
  virtual ~BObject();

  BObject(const BObject& from);
  BObject(BObject&& from) noexcept
    : BObject() {
    *this = ::std::move(from);
  }

  inline BObject& operator=(const BObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline BObject& operator=(BObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BObject* internal_default_instance() {
    return reinterpret_cast<const BObject*>(
               &_BObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BObject& a, BObject& b) {
    a.Swap(&b);
  }
  inline void Swap(BObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BObject* New() const final {
    return CreateMaybeMessage<BObject>(nullptr);
  }

  BObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BObject& from);
  void MergeFrom(const BObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.BObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kBoIdFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // .position.BPosition position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition& position() const;
  ::position::BPosition* release_position();
  ::position::BPosition* mutable_position();
  void set_allocated_position(::position::BPosition* position);
  private:
  const ::position::BPosition& _internal_position() const;
  ::position::BPosition* _internal_mutable_position();
  public:

  // int32 boId = 1;
  void clear_boid();
  ::PROTOBUF_NAMESPACE_ID::int32 boid() const;
  void set_boid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boid() const;
  void _internal_set_boid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 location = 2;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.BObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::position::BPosition* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 boid_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class CTriggerBo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.CTriggerBo) */ {
 public:
  CTriggerBo();
  virtual ~CTriggerBo();

  CTriggerBo(const CTriggerBo& from);
  CTriggerBo(CTriggerBo&& from) noexcept
    : CTriggerBo() {
    *this = ::std::move(from);
  }

  inline CTriggerBo& operator=(const CTriggerBo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTriggerBo& operator=(CTriggerBo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTriggerBo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTriggerBo* internal_default_instance() {
    return reinterpret_cast<const CTriggerBo*>(
               &_CTriggerBo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CTriggerBo& a, CTriggerBo& b) {
    a.Swap(&b);
  }
  inline void Swap(CTriggerBo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTriggerBo* New() const final {
    return CreateMaybeMessage<CTriggerBo>(nullptr);
  }

  CTriggerBo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTriggerBo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTriggerBo& from);
  void MergeFrom(const CTriggerBo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTriggerBo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.CTriggerBo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kLocationFieldNumber = 3,
    kGoodsIdFieldNumber = 4,
  };
  // int32 boId = 1;
  void clear_boid();
  ::PROTOBUF_NAMESPACE_ID::int32 boid() const;
  void set_boid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boid() const;
  void _internal_set_boid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 eventId = 2;
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 location = 3;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 4;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.CTriggerBo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 boid_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class STriggerBo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.STriggerBo) */ {
 public:
  STriggerBo();
  virtual ~STriggerBo();

  STriggerBo(const STriggerBo& from);
  STriggerBo(STriggerBo&& from) noexcept
    : STriggerBo() {
    *this = ::std::move(from);
  }

  inline STriggerBo& operator=(const STriggerBo& from) {
    CopyFrom(from);
    return *this;
  }
  inline STriggerBo& operator=(STriggerBo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STriggerBo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STriggerBo* internal_default_instance() {
    return reinterpret_cast<const STriggerBo*>(
               &_STriggerBo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(STriggerBo& a, STriggerBo& b) {
    a.Swap(&b);
  }
  inline void Swap(STriggerBo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STriggerBo* New() const final {
    return CreateMaybeMessage<STriggerBo>(nullptr);
  }

  STriggerBo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STriggerBo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STriggerBo& from);
  void MergeFrom(const STriggerBo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STriggerBo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.STriggerBo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSuccessFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // int32 isSuccess = 1;
  void clear_issuccess();
  ::PROTOBUF_NAMESPACE_ID::int32 issuccess() const;
  void set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_issuccess() const;
  void _internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 location = 2;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.STriggerBo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 issuccess_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class STriggerBoBroad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.STriggerBoBroad) */ {
 public:
  STriggerBoBroad();
  virtual ~STriggerBoBroad();

  STriggerBoBroad(const STriggerBoBroad& from);
  STriggerBoBroad(STriggerBoBroad&& from) noexcept
    : STriggerBoBroad() {
    *this = ::std::move(from);
  }

  inline STriggerBoBroad& operator=(const STriggerBoBroad& from) {
    CopyFrom(from);
    return *this;
  }
  inline STriggerBoBroad& operator=(STriggerBoBroad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STriggerBoBroad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STriggerBoBroad* internal_default_instance() {
    return reinterpret_cast<const STriggerBoBroad*>(
               &_STriggerBoBroad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(STriggerBoBroad& a, STriggerBoBroad& b) {
    a.Swap(&b);
  }
  inline void Swap(STriggerBoBroad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STriggerBoBroad* New() const final {
    return CreateMaybeMessage<STriggerBoBroad>(nullptr);
  }

  STriggerBoBroad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STriggerBoBroad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STriggerBoBroad& from);
  void MergeFrom(const STriggerBoBroad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STriggerBoBroad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.STriggerBoBroad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kLocationFieldNumber = 3,
  };
  // int32 boId = 1;
  void clear_boid();
  ::PROTOBUF_NAMESPACE_ID::int32 boid() const;
  void set_boid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boid() const;
  void _internal_set_boid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 eventId = 2;
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 location = 3;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.STriggerBoBroad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 boid_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class CPutGoods :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.CPutGoods) */ {
 public:
  CPutGoods();
  virtual ~CPutGoods();

  CPutGoods(const CPutGoods& from);
  CPutGoods(CPutGoods&& from) noexcept
    : CPutGoods() {
    *this = ::std::move(from);
  }

  inline CPutGoods& operator=(const CPutGoods& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPutGoods& operator=(CPutGoods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPutGoods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPutGoods* internal_default_instance() {
    return reinterpret_cast<const CPutGoods*>(
               &_CPutGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CPutGoods& a, CPutGoods& b) {
    a.Swap(&b);
  }
  inline void Swap(CPutGoods* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPutGoods* New() const final {
    return CreateMaybeMessage<CPutGoods>(nullptr);
  }

  CPutGoods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPutGoods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPutGoods& from);
  void MergeFrom(const CPutGoods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPutGoods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.CPutGoods";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kGoodsIdFieldNumber = 2,
  };
  // .position.BPosition position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition& position() const;
  ::position::BPosition* release_position();
  ::position::BPosition* mutable_position();
  void set_allocated_position(::position::BPosition* position);
  private:
  const ::position::BPosition& _internal_position() const;
  ::position::BPosition* _internal_mutable_position();
  public:

  // int32 goodsId = 2;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.CPutGoods)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::position::BPosition* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SPutGoods :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SPutGoods) */ {
 public:
  SPutGoods();
  virtual ~SPutGoods();

  SPutGoods(const SPutGoods& from);
  SPutGoods(SPutGoods&& from) noexcept
    : SPutGoods() {
    *this = ::std::move(from);
  }

  inline SPutGoods& operator=(const SPutGoods& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPutGoods& operator=(SPutGoods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPutGoods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPutGoods* internal_default_instance() {
    return reinterpret_cast<const SPutGoods*>(
               &_SPutGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SPutGoods& a, SPutGoods& b) {
    a.Swap(&b);
  }
  inline void Swap(SPutGoods* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPutGoods* New() const final {
    return CreateMaybeMessage<SPutGoods>(nullptr);
  }

  SPutGoods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPutGoods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPutGoods& from);
  void MergeFrom(const SPutGoods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPutGoods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SPutGoods";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kLocationFieldNumber = 1,
    kGoodsIdFieldNumber = 3,
    kSecondFieldNumber = 4,
    kUidFieldNumber = 5,
  };
  // .position.BPosition position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition& position() const;
  ::position::BPosition* release_position();
  ::position::BPosition* mutable_position();
  void set_allocated_position(::position::BPosition* position);
  private:
  const ::position::BPosition& _internal_position() const;
  ::position::BPosition* _internal_mutable_position();
  public:

  // int32 location = 1;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 3;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 second = 4;
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::int32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 5;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.SPutGoods)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::position::BPosition* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 second_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SPutGoodsList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SPutGoodsList) */ {
 public:
  SPutGoodsList();
  virtual ~SPutGoodsList();

  SPutGoodsList(const SPutGoodsList& from);
  SPutGoodsList(SPutGoodsList&& from) noexcept
    : SPutGoodsList() {
    *this = ::std::move(from);
  }

  inline SPutGoodsList& operator=(const SPutGoodsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPutGoodsList& operator=(SPutGoodsList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPutGoodsList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPutGoodsList* internal_default_instance() {
    return reinterpret_cast<const SPutGoodsList*>(
               &_SPutGoodsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SPutGoodsList& a, SPutGoodsList& b) {
    a.Swap(&b);
  }
  inline void Swap(SPutGoodsList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPutGoodsList* New() const final {
    return CreateMaybeMessage<SPutGoodsList>(nullptr);
  }

  SPutGoodsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPutGoodsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPutGoodsList& from);
  void MergeFrom(const SPutGoodsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPutGoodsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SPutGoodsList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .space.SPutGoods list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::space::SPutGoods* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::SPutGoods >*
      mutable_list();
  private:
  const ::space::SPutGoods& _internal_list(int index) const;
  ::space::SPutGoods* _internal_add_list();
  public:
  const ::space::SPutGoods& list(int index) const;
  ::space::SPutGoods* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::SPutGoods >&
      list() const;

  // @@protoc_insertion_point(class_scope:space.SPutGoodsList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::SPutGoods > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class CPickGoods :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.CPickGoods) */ {
 public:
  CPickGoods();
  virtual ~CPickGoods();

  CPickGoods(const CPickGoods& from);
  CPickGoods(CPickGoods&& from) noexcept
    : CPickGoods() {
    *this = ::std::move(from);
  }

  inline CPickGoods& operator=(const CPickGoods& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPickGoods& operator=(CPickGoods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPickGoods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPickGoods* internal_default_instance() {
    return reinterpret_cast<const CPickGoods*>(
               &_CPickGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CPickGoods& a, CPickGoods& b) {
    a.Swap(&b);
  }
  inline void Swap(CPickGoods* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPickGoods* New() const final {
    return CreateMaybeMessage<CPickGoods>(nullptr);
  }

  CPickGoods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPickGoods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPickGoods& from);
  void MergeFrom(const CPickGoods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPickGoods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.CPickGoods";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
  };
  // int32 location = 1;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.CPickGoods)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SPickGoods :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SPickGoods) */ {
 public:
  SPickGoods();
  virtual ~SPickGoods();

  SPickGoods(const SPickGoods& from);
  SPickGoods(SPickGoods&& from) noexcept
    : SPickGoods() {
    *this = ::std::move(from);
  }

  inline SPickGoods& operator=(const SPickGoods& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPickGoods& operator=(SPickGoods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPickGoods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPickGoods* internal_default_instance() {
    return reinterpret_cast<const SPickGoods*>(
               &_SPickGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SPickGoods& a, SPickGoods& b) {
    a.Swap(&b);
  }
  inline void Swap(SPickGoods* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPickGoods* New() const final {
    return CreateMaybeMessage<SPickGoods>(nullptr);
  }

  SPickGoods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPickGoods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPickGoods& from);
  void MergeFrom(const SPickGoods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPickGoods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SPickGoods";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
    kLocationFieldNumber = 3,
    kPickUidFieldNumber = 4,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 location = 3;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pickUid = 4;
  void clear_pickuid();
  ::PROTOBUF_NAMESPACE_ID::int32 pickuid() const;
  void set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pickuid() const;
  void _internal_set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.SPickGoods)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 pickuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class BSpaceGoods :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.BSpaceGoods) */ {
 public:
  BSpaceGoods();
  virtual ~BSpaceGoods();

  BSpaceGoods(const BSpaceGoods& from);
  BSpaceGoods(BSpaceGoods&& from) noexcept
    : BSpaceGoods() {
    *this = ::std::move(from);
  }

  inline BSpaceGoods& operator=(const BSpaceGoods& from) {
    CopyFrom(from);
    return *this;
  }
  inline BSpaceGoods& operator=(BSpaceGoods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BSpaceGoods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BSpaceGoods* internal_default_instance() {
    return reinterpret_cast<const BSpaceGoods*>(
               &_BSpaceGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BSpaceGoods& a, BSpaceGoods& b) {
    a.Swap(&b);
  }
  inline void Swap(BSpaceGoods* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BSpaceGoods* New() const final {
    return CreateMaybeMessage<BSpaceGoods>(nullptr);
  }

  BSpaceGoods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BSpaceGoods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BSpaceGoods& from);
  void MergeFrom(const BSpaceGoods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BSpaceGoods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.BSpaceGoods";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kLocationFieldNumber = 1,
    kGoodsIdFieldNumber = 3,
    kYuanliNumFieldNumber = 4,
  };
  // .position.BPosition position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition& position() const;
  ::position::BPosition* release_position();
  ::position::BPosition* mutable_position();
  void set_allocated_position(::position::BPosition* position);
  private:
  const ::position::BPosition& _internal_position() const;
  ::position::BPosition* _internal_mutable_position();
  public:

  // int32 location = 1;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 3;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 yuanliNum = 4;
  void clear_yuanlinum();
  ::PROTOBUF_NAMESPACE_ID::int32 yuanlinum() const;
  void set_yuanlinum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yuanlinum() const;
  void _internal_set_yuanlinum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.BSpaceGoods)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::position::BPosition* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 yuanlinum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SSpaceGoodsList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SSpaceGoodsList) */ {
 public:
  SSpaceGoodsList();
  virtual ~SSpaceGoodsList();

  SSpaceGoodsList(const SSpaceGoodsList& from);
  SSpaceGoodsList(SSpaceGoodsList&& from) noexcept
    : SSpaceGoodsList() {
    *this = ::std::move(from);
  }

  inline SSpaceGoodsList& operator=(const SSpaceGoodsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceGoodsList& operator=(SSpaceGoodsList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceGoodsList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceGoodsList* internal_default_instance() {
    return reinterpret_cast<const SSpaceGoodsList*>(
               &_SSpaceGoodsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SSpaceGoodsList& a, SSpaceGoodsList& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceGoodsList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceGoodsList* New() const final {
    return CreateMaybeMessage<SSpaceGoodsList>(nullptr);
  }

  SSpaceGoodsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceGoodsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceGoodsList& from);
  void MergeFrom(const SSpaceGoodsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceGoodsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SSpaceGoodsList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .space.BSpaceGoods list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::space::BSpaceGoods* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceGoods >*
      mutable_list();
  private:
  const ::space::BSpaceGoods& _internal_list(int index) const;
  ::space::BSpaceGoods* _internal_add_list();
  public:
  const ::space::BSpaceGoods& list(int index) const;
  ::space::BSpaceGoods* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceGoods >&
      list() const;

  // @@protoc_insertion_point(class_scope:space.SSpaceGoodsList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceGoods > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class CPickSpaceGoods :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.CPickSpaceGoods) */ {
 public:
  CPickSpaceGoods();
  virtual ~CPickSpaceGoods();

  CPickSpaceGoods(const CPickSpaceGoods& from);
  CPickSpaceGoods(CPickSpaceGoods&& from) noexcept
    : CPickSpaceGoods() {
    *this = ::std::move(from);
  }

  inline CPickSpaceGoods& operator=(const CPickSpaceGoods& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPickSpaceGoods& operator=(CPickSpaceGoods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPickSpaceGoods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPickSpaceGoods* internal_default_instance() {
    return reinterpret_cast<const CPickSpaceGoods*>(
               &_CPickSpaceGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CPickSpaceGoods& a, CPickSpaceGoods& b) {
    a.Swap(&b);
  }
  inline void Swap(CPickSpaceGoods* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPickSpaceGoods* New() const final {
    return CreateMaybeMessage<CPickSpaceGoods>(nullptr);
  }

  CPickSpaceGoods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPickSpaceGoods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPickSpaceGoods& from);
  void MergeFrom(const CPickSpaceGoods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPickSpaceGoods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.CPickSpaceGoods";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
  };
  // int32 location = 1;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.CPickSpaceGoods)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SPickSpaceGoods :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SPickSpaceGoods) */ {
 public:
  SPickSpaceGoods();
  virtual ~SPickSpaceGoods();

  SPickSpaceGoods(const SPickSpaceGoods& from);
  SPickSpaceGoods(SPickSpaceGoods&& from) noexcept
    : SPickSpaceGoods() {
    *this = ::std::move(from);
  }

  inline SPickSpaceGoods& operator=(const SPickSpaceGoods& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPickSpaceGoods& operator=(SPickSpaceGoods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPickSpaceGoods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPickSpaceGoods* internal_default_instance() {
    return reinterpret_cast<const SPickSpaceGoods*>(
               &_SPickSpaceGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SPickSpaceGoods& a, SPickSpaceGoods& b) {
    a.Swap(&b);
  }
  inline void Swap(SPickSpaceGoods* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPickSpaceGoods* New() const final {
    return CreateMaybeMessage<SPickSpaceGoods>(nullptr);
  }

  SPickSpaceGoods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPickSpaceGoods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPickSpaceGoods& from);
  void MergeFrom(const SPickSpaceGoods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPickSpaceGoods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SPickSpaceGoods";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
    kLocationFieldNumber = 3,
    kPickUidFieldNumber = 4,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 location = 3;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pickUid = 4;
  void clear_pickuid();
  ::PROTOBUF_NAMESPACE_ID::int32 pickuid() const;
  void set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pickuid() const;
  void _internal_set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.SPickSpaceGoods)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 pickuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class BSpaceAirVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.BSpaceAirVehicle) */ {
 public:
  BSpaceAirVehicle();
  virtual ~BSpaceAirVehicle();

  BSpaceAirVehicle(const BSpaceAirVehicle& from);
  BSpaceAirVehicle(BSpaceAirVehicle&& from) noexcept
    : BSpaceAirVehicle() {
    *this = ::std::move(from);
  }

  inline BSpaceAirVehicle& operator=(const BSpaceAirVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline BSpaceAirVehicle& operator=(BSpaceAirVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BSpaceAirVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BSpaceAirVehicle* internal_default_instance() {
    return reinterpret_cast<const BSpaceAirVehicle*>(
               &_BSpaceAirVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BSpaceAirVehicle& a, BSpaceAirVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(BSpaceAirVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BSpaceAirVehicle* New() const final {
    return CreateMaybeMessage<BSpaceAirVehicle>(nullptr);
  }

  BSpaceAirVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BSpaceAirVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BSpaceAirVehicle& from);
  void MergeFrom(const BSpaceAirVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BSpaceAirVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.BSpaceAirVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kDriverFieldNumber = 3,
    kPassengerFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner = 2;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 driver = 3;
  void clear_driver();
  ::PROTOBUF_NAMESPACE_ID::int32 driver() const;
  void set_driver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driver() const;
  void _internal_set_driver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 passenger = 4;
  void clear_passenger();
  ::PROTOBUF_NAMESPACE_ID::int32 passenger() const;
  void set_passenger(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passenger() const;
  void _internal_set_passenger(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.BSpaceAirVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_;
  ::PROTOBUF_NAMESPACE_ID::int32 driver_;
  ::PROTOBUF_NAMESPACE_ID::int32 passenger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SSpaceAirVehicleList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SSpaceAirVehicleList) */ {
 public:
  SSpaceAirVehicleList();
  virtual ~SSpaceAirVehicleList();

  SSpaceAirVehicleList(const SSpaceAirVehicleList& from);
  SSpaceAirVehicleList(SSpaceAirVehicleList&& from) noexcept
    : SSpaceAirVehicleList() {
    *this = ::std::move(from);
  }

  inline SSpaceAirVehicleList& operator=(const SSpaceAirVehicleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceAirVehicleList& operator=(SSpaceAirVehicleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceAirVehicleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceAirVehicleList* internal_default_instance() {
    return reinterpret_cast<const SSpaceAirVehicleList*>(
               &_SSpaceAirVehicleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SSpaceAirVehicleList& a, SSpaceAirVehicleList& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceAirVehicleList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceAirVehicleList* New() const final {
    return CreateMaybeMessage<SSpaceAirVehicleList>(nullptr);
  }

  SSpaceAirVehicleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceAirVehicleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceAirVehicleList& from);
  void MergeFrom(const SSpaceAirVehicleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceAirVehicleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SSpaceAirVehicleList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .space.BSpaceAirVehicle list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::space::BSpaceAirVehicle* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceAirVehicle >*
      mutable_list();
  private:
  const ::space::BSpaceAirVehicle& _internal_list(int index) const;
  ::space::BSpaceAirVehicle* _internal_add_list();
  public:
  const ::space::BSpaceAirVehicle& list(int index) const;
  ::space::BSpaceAirVehicle* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceAirVehicle >&
      list() const;

  // @@protoc_insertion_point(class_scope:space.SSpaceAirVehicleList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceAirVehicle > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class CSpaceAirVehicleTake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.CSpaceAirVehicleTake) */ {
 public:
  CSpaceAirVehicleTake();
  virtual ~CSpaceAirVehicleTake();

  CSpaceAirVehicleTake(const CSpaceAirVehicleTake& from);
  CSpaceAirVehicleTake(CSpaceAirVehicleTake&& from) noexcept
    : CSpaceAirVehicleTake() {
    *this = ::std::move(from);
  }

  inline CSpaceAirVehicleTake& operator=(const CSpaceAirVehicleTake& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceAirVehicleTake& operator=(CSpaceAirVehicleTake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceAirVehicleTake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceAirVehicleTake* internal_default_instance() {
    return reinterpret_cast<const CSpaceAirVehicleTake*>(
               &_CSpaceAirVehicleTake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CSpaceAirVehicleTake& a, CSpaceAirVehicleTake& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceAirVehicleTake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceAirVehicleTake* New() const final {
    return CreateMaybeMessage<CSpaceAirVehicleTake>(nullptr);
  }

  CSpaceAirVehicleTake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceAirVehicleTake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceAirVehicleTake& from);
  void MergeFrom(const CSpaceAirVehicleTake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceAirVehicleTake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.CSpaceAirVehicleTake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTakeActionFieldNumber = 2,
    kTakePositionFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 takeAction = 2;
  void clear_takeaction();
  ::PROTOBUF_NAMESPACE_ID::int32 takeaction() const;
  void set_takeaction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_takeaction() const;
  void _internal_set_takeaction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 takePosition = 3;
  void clear_takeposition();
  ::PROTOBUF_NAMESPACE_ID::int32 takeposition() const;
  void set_takeposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_takeposition() const;
  void _internal_set_takeposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.CSpaceAirVehicleTake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 takeaction_;
  ::PROTOBUF_NAMESPACE_ID::int32 takeposition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SSpaceAirVehicleTake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SSpaceAirVehicleTake) */ {
 public:
  SSpaceAirVehicleTake();
  virtual ~SSpaceAirVehicleTake();

  SSpaceAirVehicleTake(const SSpaceAirVehicleTake& from);
  SSpaceAirVehicleTake(SSpaceAirVehicleTake&& from) noexcept
    : SSpaceAirVehicleTake() {
    *this = ::std::move(from);
  }

  inline SSpaceAirVehicleTake& operator=(const SSpaceAirVehicleTake& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceAirVehicleTake& operator=(SSpaceAirVehicleTake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceAirVehicleTake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceAirVehicleTake* internal_default_instance() {
    return reinterpret_cast<const SSpaceAirVehicleTake*>(
               &_SSpaceAirVehicleTake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SSpaceAirVehicleTake& a, SSpaceAirVehicleTake& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceAirVehicleTake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceAirVehicleTake* New() const final {
    return CreateMaybeMessage<SSpaceAirVehicleTake>(nullptr);
  }

  SSpaceAirVehicleTake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceAirVehicleTake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceAirVehicleTake& from);
  void MergeFrom(const SSpaceAirVehicleTake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceAirVehicleTake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SSpaceAirVehicleTake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
    kIdFieldNumber = 3,
    kTakeUidFieldNumber = 4,
    kTakePositionFieldNumber = 5,
    kTakeActionFieldNumber = 6,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 takeUid = 4;
  void clear_takeuid();
  ::PROTOBUF_NAMESPACE_ID::int32 takeuid() const;
  void set_takeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_takeuid() const;
  void _internal_set_takeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 takePosition = 5;
  void clear_takeposition();
  ::PROTOBUF_NAMESPACE_ID::int32 takeposition() const;
  void set_takeposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_takeposition() const;
  void _internal_set_takeposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 takeAction = 6;
  void clear_takeaction();
  ::PROTOBUF_NAMESPACE_ID::int32 takeaction() const;
  void set_takeaction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_takeaction() const;
  void _internal_set_takeaction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.SSpaceAirVehicleTake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 takeuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 takeposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 takeaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SSpaceAirVehicleDisappear :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SSpaceAirVehicleDisappear) */ {
 public:
  SSpaceAirVehicleDisappear();
  virtual ~SSpaceAirVehicleDisappear();

  SSpaceAirVehicleDisappear(const SSpaceAirVehicleDisappear& from);
  SSpaceAirVehicleDisappear(SSpaceAirVehicleDisappear&& from) noexcept
    : SSpaceAirVehicleDisappear() {
    *this = ::std::move(from);
  }

  inline SSpaceAirVehicleDisappear& operator=(const SSpaceAirVehicleDisappear& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceAirVehicleDisappear& operator=(SSpaceAirVehicleDisappear&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceAirVehicleDisappear& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceAirVehicleDisappear* internal_default_instance() {
    return reinterpret_cast<const SSpaceAirVehicleDisappear*>(
               &_SSpaceAirVehicleDisappear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SSpaceAirVehicleDisappear& a, SSpaceAirVehicleDisappear& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceAirVehicleDisappear* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceAirVehicleDisappear* New() const final {
    return CreateMaybeMessage<SSpaceAirVehicleDisappear>(nullptr);
  }

  SSpaceAirVehicleDisappear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceAirVehicleDisappear>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceAirVehicleDisappear& from);
  void MergeFrom(const SSpaceAirVehicleDisappear& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceAirVehicleDisappear* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SSpaceAirVehicleDisappear";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSecondFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 second = 2;
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::int32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.SSpaceAirVehicleDisappear)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 second_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// -------------------------------------------------------------------

class SSpaceAirVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:space.SSpaceAirVehicle) */ {
 public:
  SSpaceAirVehicle();
  virtual ~SSpaceAirVehicle();

  SSpaceAirVehicle(const SSpaceAirVehicle& from);
  SSpaceAirVehicle(SSpaceAirVehicle&& from) noexcept
    : SSpaceAirVehicle() {
    *this = ::std::move(from);
  }

  inline SSpaceAirVehicle& operator=(const SSpaceAirVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceAirVehicle& operator=(SSpaceAirVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceAirVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceAirVehicle* internal_default_instance() {
    return reinterpret_cast<const SSpaceAirVehicle*>(
               &_SSpaceAirVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SSpaceAirVehicle& a, SSpaceAirVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceAirVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceAirVehicle* New() const final {
    return CreateMaybeMessage<SSpaceAirVehicle>(nullptr);
  }

  SSpaceAirVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceAirVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceAirVehicle& from);
  void MergeFrom(const SSpaceAirVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceAirVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "space.SSpaceAirVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessObject_2eproto);
    return ::descriptor_table_businessObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kDriverFieldNumber = 3,
    kPassengerFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner = 2;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 driver = 3;
  void clear_driver();
  ::PROTOBUF_NAMESPACE_ID::int32 driver() const;
  void set_driver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driver() const;
  void _internal_set_driver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 passenger = 4;
  void clear_passenger();
  ::PROTOBUF_NAMESPACE_ID::int32 passenger() const;
  void set_passenger(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passenger() const;
  void _internal_set_passenger(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:space.SSpaceAirVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_;
  ::PROTOBUF_NAMESPACE_ID::int32 driver_;
  ::PROTOBUF_NAMESPACE_ID::int32 passenger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBusinessObjectList

// int32 sceneId = 1;
inline void CBusinessObjectList::clear_sceneid() {
  sceneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBusinessObjectList::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBusinessObjectList::sceneid() const {
  // @@protoc_insertion_point(field_get:space.CBusinessObjectList.sceneId)
  return _internal_sceneid();
}
inline void CBusinessObjectList::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sceneid_ = value;
}
inline void CBusinessObjectList::set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:space.CBusinessObjectList.sceneId)
}

// -------------------------------------------------------------------

// SBusinessObjectList

// repeated .space.BObject boList = 1;
inline int SBusinessObjectList::_internal_bolist_size() const {
  return bolist_.size();
}
inline int SBusinessObjectList::bolist_size() const {
  return _internal_bolist_size();
}
inline void SBusinessObjectList::clear_bolist() {
  bolist_.Clear();
}
inline ::space::BObject* SBusinessObjectList::mutable_bolist(int index) {
  // @@protoc_insertion_point(field_mutable:space.SBusinessObjectList.boList)
  return bolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BObject >*
SBusinessObjectList::mutable_bolist() {
  // @@protoc_insertion_point(field_mutable_list:space.SBusinessObjectList.boList)
  return &bolist_;
}
inline const ::space::BObject& SBusinessObjectList::_internal_bolist(int index) const {
  return bolist_.Get(index);
}
inline const ::space::BObject& SBusinessObjectList::bolist(int index) const {
  // @@protoc_insertion_point(field_get:space.SBusinessObjectList.boList)
  return _internal_bolist(index);
}
inline ::space::BObject* SBusinessObjectList::_internal_add_bolist() {
  return bolist_.Add();
}
inline ::space::BObject* SBusinessObjectList::add_bolist() {
  // @@protoc_insertion_point(field_add:space.SBusinessObjectList.boList)
  return _internal_add_bolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BObject >&
SBusinessObjectList::bolist() const {
  // @@protoc_insertion_point(field_list:space.SBusinessObjectList.boList)
  return bolist_;
}

// -------------------------------------------------------------------

// BObject

// int32 boId = 1;
inline void BObject::clear_boid() {
  boid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BObject::_internal_boid() const {
  return boid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BObject::boid() const {
  // @@protoc_insertion_point(field_get:space.BObject.boId)
  return _internal_boid();
}
inline void BObject::_internal_set_boid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boid_ = value;
}
inline void BObject::set_boid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boid(value);
  // @@protoc_insertion_point(field_set:space.BObject.boId)
}

// int32 location = 2;
inline void BObject::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BObject::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BObject::location() const {
  // @@protoc_insertion_point(field_get:space.BObject.location)
  return _internal_location();
}
inline void BObject::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void BObject::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.BObject.location)
}

// .position.BPosition position = 3;
inline bool BObject::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BObject::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition& BObject::_internal_position() const {
  const ::position::BPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition*>(
      &::position::_BPosition_default_instance_);
}
inline const ::position::BPosition& BObject::position() const {
  // @@protoc_insertion_point(field_get:space.BObject.position)
  return _internal_position();
}
inline ::position::BPosition* BObject::release_position() {
  // @@protoc_insertion_point(field_release:space.BObject.position)
  
  ::position::BPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition* BObject::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition* BObject::mutable_position() {
  // @@protoc_insertion_point(field_mutable:space.BObject.position)
  return _internal_mutable_position();
}
inline void BObject::set_allocated_position(::position::BPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:space.BObject.position)
}

// -------------------------------------------------------------------

// CTriggerBo

// int32 boId = 1;
inline void CTriggerBo::clear_boid() {
  boid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTriggerBo::_internal_boid() const {
  return boid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTriggerBo::boid() const {
  // @@protoc_insertion_point(field_get:space.CTriggerBo.boId)
  return _internal_boid();
}
inline void CTriggerBo::_internal_set_boid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boid_ = value;
}
inline void CTriggerBo::set_boid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boid(value);
  // @@protoc_insertion_point(field_set:space.CTriggerBo.boId)
}

// int32 eventId = 2;
inline void CTriggerBo::clear_eventid() {
  eventid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTriggerBo::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTriggerBo::eventid() const {
  // @@protoc_insertion_point(field_get:space.CTriggerBo.eventId)
  return _internal_eventid();
}
inline void CTriggerBo::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventid_ = value;
}
inline void CTriggerBo::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:space.CTriggerBo.eventId)
}

// int32 location = 3;
inline void CTriggerBo::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTriggerBo::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTriggerBo::location() const {
  // @@protoc_insertion_point(field_get:space.CTriggerBo.location)
  return _internal_location();
}
inline void CTriggerBo::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void CTriggerBo::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.CTriggerBo.location)
}

// int32 goodsId = 4;
inline void CTriggerBo::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTriggerBo::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTriggerBo::goodsid() const {
  // @@protoc_insertion_point(field_get:space.CTriggerBo.goodsId)
  return _internal_goodsid();
}
inline void CTriggerBo::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CTriggerBo::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:space.CTriggerBo.goodsId)
}

// -------------------------------------------------------------------

// STriggerBo

// int32 isSuccess = 1;
inline void STriggerBo::clear_issuccess() {
  issuccess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBo::_internal_issuccess() const {
  return issuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBo::issuccess() const {
  // @@protoc_insertion_point(field_get:space.STriggerBo.isSuccess)
  return _internal_issuccess();
}
inline void STriggerBo::_internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  issuccess_ = value;
}
inline void STriggerBo::set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:space.STriggerBo.isSuccess)
}

// int32 location = 2;
inline void STriggerBo::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBo::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBo::location() const {
  // @@protoc_insertion_point(field_get:space.STriggerBo.location)
  return _internal_location();
}
inline void STriggerBo::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void STriggerBo::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.STriggerBo.location)
}

// -------------------------------------------------------------------

// STriggerBoBroad

// int32 boId = 1;
inline void STriggerBoBroad::clear_boid() {
  boid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBoBroad::_internal_boid() const {
  return boid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBoBroad::boid() const {
  // @@protoc_insertion_point(field_get:space.STriggerBoBroad.boId)
  return _internal_boid();
}
inline void STriggerBoBroad::_internal_set_boid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boid_ = value;
}
inline void STriggerBoBroad::set_boid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boid(value);
  // @@protoc_insertion_point(field_set:space.STriggerBoBroad.boId)
}

// int32 eventId = 2;
inline void STriggerBoBroad::clear_eventid() {
  eventid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBoBroad::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBoBroad::eventid() const {
  // @@protoc_insertion_point(field_get:space.STriggerBoBroad.eventId)
  return _internal_eventid();
}
inline void STriggerBoBroad::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventid_ = value;
}
inline void STriggerBoBroad::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:space.STriggerBoBroad.eventId)
}

// int32 location = 3;
inline void STriggerBoBroad::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBoBroad::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STriggerBoBroad::location() const {
  // @@protoc_insertion_point(field_get:space.STriggerBoBroad.location)
  return _internal_location();
}
inline void STriggerBoBroad::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void STriggerBoBroad::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.STriggerBoBroad.location)
}

// -------------------------------------------------------------------

// CPutGoods

// .position.BPosition position = 1;
inline bool CPutGoods::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CPutGoods::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition& CPutGoods::_internal_position() const {
  const ::position::BPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition*>(
      &::position::_BPosition_default_instance_);
}
inline const ::position::BPosition& CPutGoods::position() const {
  // @@protoc_insertion_point(field_get:space.CPutGoods.position)
  return _internal_position();
}
inline ::position::BPosition* CPutGoods::release_position() {
  // @@protoc_insertion_point(field_release:space.CPutGoods.position)
  
  ::position::BPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition* CPutGoods::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition* CPutGoods::mutable_position() {
  // @@protoc_insertion_point(field_mutable:space.CPutGoods.position)
  return _internal_mutable_position();
}
inline void CPutGoods::set_allocated_position(::position::BPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:space.CPutGoods.position)
}

// int32 goodsId = 2;
inline void CPutGoods::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPutGoods::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPutGoods::goodsid() const {
  // @@protoc_insertion_point(field_get:space.CPutGoods.goodsId)
  return _internal_goodsid();
}
inline void CPutGoods::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CPutGoods::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:space.CPutGoods.goodsId)
}

// -------------------------------------------------------------------

// SPutGoods

// int32 location = 1;
inline void SPutGoods::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutGoods::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutGoods::location() const {
  // @@protoc_insertion_point(field_get:space.SPutGoods.location)
  return _internal_location();
}
inline void SPutGoods::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void SPutGoods::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.SPutGoods.location)
}

// .position.BPosition position = 2;
inline bool SPutGoods::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SPutGoods::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition& SPutGoods::_internal_position() const {
  const ::position::BPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition*>(
      &::position::_BPosition_default_instance_);
}
inline const ::position::BPosition& SPutGoods::position() const {
  // @@protoc_insertion_point(field_get:space.SPutGoods.position)
  return _internal_position();
}
inline ::position::BPosition* SPutGoods::release_position() {
  // @@protoc_insertion_point(field_release:space.SPutGoods.position)
  
  ::position::BPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition* SPutGoods::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition* SPutGoods::mutable_position() {
  // @@protoc_insertion_point(field_mutable:space.SPutGoods.position)
  return _internal_mutable_position();
}
inline void SPutGoods::set_allocated_position(::position::BPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:space.SPutGoods.position)
}

// int32 goodsId = 3;
inline void SPutGoods::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutGoods::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutGoods::goodsid() const {
  // @@protoc_insertion_point(field_get:space.SPutGoods.goodsId)
  return _internal_goodsid();
}
inline void SPutGoods::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void SPutGoods::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:space.SPutGoods.goodsId)
}

// int32 second = 4;
inline void SPutGoods::clear_second() {
  second_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutGoods::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutGoods::second() const {
  // @@protoc_insertion_point(field_get:space.SPutGoods.second)
  return _internal_second();
}
inline void SPutGoods::_internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  second_ = value;
}
inline void SPutGoods::set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:space.SPutGoods.second)
}

// int32 uid = 5;
inline void SPutGoods::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutGoods::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPutGoods::uid() const {
  // @@protoc_insertion_point(field_get:space.SPutGoods.uid)
  return _internal_uid();
}
inline void SPutGoods::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SPutGoods::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:space.SPutGoods.uid)
}

// -------------------------------------------------------------------

// SPutGoodsList

// repeated .space.SPutGoods list = 1;
inline int SPutGoodsList::_internal_list_size() const {
  return list_.size();
}
inline int SPutGoodsList::list_size() const {
  return _internal_list_size();
}
inline void SPutGoodsList::clear_list() {
  list_.Clear();
}
inline ::space::SPutGoods* SPutGoodsList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:space.SPutGoodsList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::SPutGoods >*
SPutGoodsList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:space.SPutGoodsList.list)
  return &list_;
}
inline const ::space::SPutGoods& SPutGoodsList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::space::SPutGoods& SPutGoodsList::list(int index) const {
  // @@protoc_insertion_point(field_get:space.SPutGoodsList.list)
  return _internal_list(index);
}
inline ::space::SPutGoods* SPutGoodsList::_internal_add_list() {
  return list_.Add();
}
inline ::space::SPutGoods* SPutGoodsList::add_list() {
  // @@protoc_insertion_point(field_add:space.SPutGoodsList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::SPutGoods >&
SPutGoodsList::list() const {
  // @@protoc_insertion_point(field_list:space.SPutGoodsList.list)
  return list_;
}

// -------------------------------------------------------------------

// CPickGoods

// int32 location = 1;
inline void CPickGoods::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPickGoods::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPickGoods::location() const {
  // @@protoc_insertion_point(field_get:space.CPickGoods.location)
  return _internal_location();
}
inline void CPickGoods::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void CPickGoods::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.CPickGoods.location)
}

// -------------------------------------------------------------------

// SPickGoods

// int32 state = 1;
inline void SPickGoods::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickGoods::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickGoods::state() const {
  // @@protoc_insertion_point(field_get:space.SPickGoods.state)
  return _internal_state();
}
inline void SPickGoods::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SPickGoods::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:space.SPickGoods.state)
}

// string msg = 2;
inline void SPickGoods::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SPickGoods::msg() const {
  // @@protoc_insertion_point(field_get:space.SPickGoods.msg)
  return _internal_msg();
}
inline void SPickGoods::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:space.SPickGoods.msg)
}
inline std::string* SPickGoods::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:space.SPickGoods.msg)
  return _internal_mutable_msg();
}
inline const std::string& SPickGoods::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SPickGoods::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SPickGoods::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:space.SPickGoods.msg)
}
inline void SPickGoods::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:space.SPickGoods.msg)
}
inline void SPickGoods::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:space.SPickGoods.msg)
}
inline std::string* SPickGoods::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SPickGoods::release_msg() {
  // @@protoc_insertion_point(field_release:space.SPickGoods.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SPickGoods::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:space.SPickGoods.msg)
}

// int32 location = 3;
inline void SPickGoods::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickGoods::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickGoods::location() const {
  // @@protoc_insertion_point(field_get:space.SPickGoods.location)
  return _internal_location();
}
inline void SPickGoods::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void SPickGoods::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.SPickGoods.location)
}

// int32 pickUid = 4;
inline void SPickGoods::clear_pickuid() {
  pickuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickGoods::_internal_pickuid() const {
  return pickuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickGoods::pickuid() const {
  // @@protoc_insertion_point(field_get:space.SPickGoods.pickUid)
  return _internal_pickuid();
}
inline void SPickGoods::_internal_set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pickuid_ = value;
}
inline void SPickGoods::set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pickuid(value);
  // @@protoc_insertion_point(field_set:space.SPickGoods.pickUid)
}

// -------------------------------------------------------------------

// BSpaceGoods

// int32 location = 1;
inline void BSpaceGoods::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceGoods::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceGoods::location() const {
  // @@protoc_insertion_point(field_get:space.BSpaceGoods.location)
  return _internal_location();
}
inline void BSpaceGoods::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void BSpaceGoods::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.BSpaceGoods.location)
}

// .position.BPosition position = 2;
inline bool BSpaceGoods::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BSpaceGoods::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition& BSpaceGoods::_internal_position() const {
  const ::position::BPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition*>(
      &::position::_BPosition_default_instance_);
}
inline const ::position::BPosition& BSpaceGoods::position() const {
  // @@protoc_insertion_point(field_get:space.BSpaceGoods.position)
  return _internal_position();
}
inline ::position::BPosition* BSpaceGoods::release_position() {
  // @@protoc_insertion_point(field_release:space.BSpaceGoods.position)
  
  ::position::BPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition* BSpaceGoods::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition* BSpaceGoods::mutable_position() {
  // @@protoc_insertion_point(field_mutable:space.BSpaceGoods.position)
  return _internal_mutable_position();
}
inline void BSpaceGoods::set_allocated_position(::position::BPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:space.BSpaceGoods.position)
}

// int32 goodsId = 3;
inline void BSpaceGoods::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceGoods::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceGoods::goodsid() const {
  // @@protoc_insertion_point(field_get:space.BSpaceGoods.goodsId)
  return _internal_goodsid();
}
inline void BSpaceGoods::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void BSpaceGoods::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:space.BSpaceGoods.goodsId)
}

// int32 yuanliNum = 4;
inline void BSpaceGoods::clear_yuanlinum() {
  yuanlinum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceGoods::_internal_yuanlinum() const {
  return yuanlinum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceGoods::yuanlinum() const {
  // @@protoc_insertion_point(field_get:space.BSpaceGoods.yuanliNum)
  return _internal_yuanlinum();
}
inline void BSpaceGoods::_internal_set_yuanlinum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yuanlinum_ = value;
}
inline void BSpaceGoods::set_yuanlinum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yuanlinum(value);
  // @@protoc_insertion_point(field_set:space.BSpaceGoods.yuanliNum)
}

// -------------------------------------------------------------------

// SSpaceGoodsList

// repeated .space.BSpaceGoods list = 1;
inline int SSpaceGoodsList::_internal_list_size() const {
  return list_.size();
}
inline int SSpaceGoodsList::list_size() const {
  return _internal_list_size();
}
inline void SSpaceGoodsList::clear_list() {
  list_.Clear();
}
inline ::space::BSpaceGoods* SSpaceGoodsList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:space.SSpaceGoodsList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceGoods >*
SSpaceGoodsList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:space.SSpaceGoodsList.list)
  return &list_;
}
inline const ::space::BSpaceGoods& SSpaceGoodsList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::space::BSpaceGoods& SSpaceGoodsList::list(int index) const {
  // @@protoc_insertion_point(field_get:space.SSpaceGoodsList.list)
  return _internal_list(index);
}
inline ::space::BSpaceGoods* SSpaceGoodsList::_internal_add_list() {
  return list_.Add();
}
inline ::space::BSpaceGoods* SSpaceGoodsList::add_list() {
  // @@protoc_insertion_point(field_add:space.SSpaceGoodsList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceGoods >&
SSpaceGoodsList::list() const {
  // @@protoc_insertion_point(field_list:space.SSpaceGoodsList.list)
  return list_;
}

// -------------------------------------------------------------------

// CPickSpaceGoods

// int32 location = 1;
inline void CPickSpaceGoods::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPickSpaceGoods::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPickSpaceGoods::location() const {
  // @@protoc_insertion_point(field_get:space.CPickSpaceGoods.location)
  return _internal_location();
}
inline void CPickSpaceGoods::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void CPickSpaceGoods::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.CPickSpaceGoods.location)
}

// -------------------------------------------------------------------

// SPickSpaceGoods

// int32 state = 1;
inline void SPickSpaceGoods::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickSpaceGoods::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickSpaceGoods::state() const {
  // @@protoc_insertion_point(field_get:space.SPickSpaceGoods.state)
  return _internal_state();
}
inline void SPickSpaceGoods::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SPickSpaceGoods::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:space.SPickSpaceGoods.state)
}

// string msg = 2;
inline void SPickSpaceGoods::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SPickSpaceGoods::msg() const {
  // @@protoc_insertion_point(field_get:space.SPickSpaceGoods.msg)
  return _internal_msg();
}
inline void SPickSpaceGoods::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:space.SPickSpaceGoods.msg)
}
inline std::string* SPickSpaceGoods::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:space.SPickSpaceGoods.msg)
  return _internal_mutable_msg();
}
inline const std::string& SPickSpaceGoods::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SPickSpaceGoods::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SPickSpaceGoods::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:space.SPickSpaceGoods.msg)
}
inline void SPickSpaceGoods::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:space.SPickSpaceGoods.msg)
}
inline void SPickSpaceGoods::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:space.SPickSpaceGoods.msg)
}
inline std::string* SPickSpaceGoods::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SPickSpaceGoods::release_msg() {
  // @@protoc_insertion_point(field_release:space.SPickSpaceGoods.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SPickSpaceGoods::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:space.SPickSpaceGoods.msg)
}

// int32 location = 3;
inline void SPickSpaceGoods::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickSpaceGoods::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickSpaceGoods::location() const {
  // @@protoc_insertion_point(field_get:space.SPickSpaceGoods.location)
  return _internal_location();
}
inline void SPickSpaceGoods::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void SPickSpaceGoods::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:space.SPickSpaceGoods.location)
}

// int32 pickUid = 4;
inline void SPickSpaceGoods::clear_pickuid() {
  pickuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickSpaceGoods::_internal_pickuid() const {
  return pickuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPickSpaceGoods::pickuid() const {
  // @@protoc_insertion_point(field_get:space.SPickSpaceGoods.pickUid)
  return _internal_pickuid();
}
inline void SPickSpaceGoods::_internal_set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pickuid_ = value;
}
inline void SPickSpaceGoods::set_pickuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pickuid(value);
  // @@protoc_insertion_point(field_set:space.SPickSpaceGoods.pickUid)
}

// -------------------------------------------------------------------

// BSpaceAirVehicle

// int32 id = 1;
inline void BSpaceAirVehicle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceAirVehicle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceAirVehicle::id() const {
  // @@protoc_insertion_point(field_get:space.BSpaceAirVehicle.id)
  return _internal_id();
}
inline void BSpaceAirVehicle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void BSpaceAirVehicle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:space.BSpaceAirVehicle.id)
}

// int32 owner = 2;
inline void BSpaceAirVehicle::clear_owner() {
  owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceAirVehicle::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceAirVehicle::owner() const {
  // @@protoc_insertion_point(field_get:space.BSpaceAirVehicle.owner)
  return _internal_owner();
}
inline void BSpaceAirVehicle::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_ = value;
}
inline void BSpaceAirVehicle::set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:space.BSpaceAirVehicle.owner)
}

// int32 driver = 3;
inline void BSpaceAirVehicle::clear_driver() {
  driver_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceAirVehicle::_internal_driver() const {
  return driver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceAirVehicle::driver() const {
  // @@protoc_insertion_point(field_get:space.BSpaceAirVehicle.driver)
  return _internal_driver();
}
inline void BSpaceAirVehicle::_internal_set_driver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  driver_ = value;
}
inline void BSpaceAirVehicle::set_driver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driver(value);
  // @@protoc_insertion_point(field_set:space.BSpaceAirVehicle.driver)
}

// int32 passenger = 4;
inline void BSpaceAirVehicle::clear_passenger() {
  passenger_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceAirVehicle::_internal_passenger() const {
  return passenger_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceAirVehicle::passenger() const {
  // @@protoc_insertion_point(field_get:space.BSpaceAirVehicle.passenger)
  return _internal_passenger();
}
inline void BSpaceAirVehicle::_internal_set_passenger(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passenger_ = value;
}
inline void BSpaceAirVehicle::set_passenger(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passenger(value);
  // @@protoc_insertion_point(field_set:space.BSpaceAirVehicle.passenger)
}

// -------------------------------------------------------------------

// SSpaceAirVehicleList

// repeated .space.BSpaceAirVehicle list = 1;
inline int SSpaceAirVehicleList::_internal_list_size() const {
  return list_.size();
}
inline int SSpaceAirVehicleList::list_size() const {
  return _internal_list_size();
}
inline void SSpaceAirVehicleList::clear_list() {
  list_.Clear();
}
inline ::space::BSpaceAirVehicle* SSpaceAirVehicleList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:space.SSpaceAirVehicleList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceAirVehicle >*
SSpaceAirVehicleList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:space.SSpaceAirVehicleList.list)
  return &list_;
}
inline const ::space::BSpaceAirVehicle& SSpaceAirVehicleList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::space::BSpaceAirVehicle& SSpaceAirVehicleList::list(int index) const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicleList.list)
  return _internal_list(index);
}
inline ::space::BSpaceAirVehicle* SSpaceAirVehicleList::_internal_add_list() {
  return list_.Add();
}
inline ::space::BSpaceAirVehicle* SSpaceAirVehicleList::add_list() {
  // @@protoc_insertion_point(field_add:space.SSpaceAirVehicleList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::space::BSpaceAirVehicle >&
SSpaceAirVehicleList::list() const {
  // @@protoc_insertion_point(field_list:space.SSpaceAirVehicleList.list)
  return list_;
}

// -------------------------------------------------------------------

// CSpaceAirVehicleTake

// int32 id = 1;
inline void CSpaceAirVehicleTake::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceAirVehicleTake::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceAirVehicleTake::id() const {
  // @@protoc_insertion_point(field_get:space.CSpaceAirVehicleTake.id)
  return _internal_id();
}
inline void CSpaceAirVehicleTake::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSpaceAirVehicleTake::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:space.CSpaceAirVehicleTake.id)
}

// int32 takeAction = 2;
inline void CSpaceAirVehicleTake::clear_takeaction() {
  takeaction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceAirVehicleTake::_internal_takeaction() const {
  return takeaction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceAirVehicleTake::takeaction() const {
  // @@protoc_insertion_point(field_get:space.CSpaceAirVehicleTake.takeAction)
  return _internal_takeaction();
}
inline void CSpaceAirVehicleTake::_internal_set_takeaction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  takeaction_ = value;
}
inline void CSpaceAirVehicleTake::set_takeaction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_takeaction(value);
  // @@protoc_insertion_point(field_set:space.CSpaceAirVehicleTake.takeAction)
}

// int32 takePosition = 3;
inline void CSpaceAirVehicleTake::clear_takeposition() {
  takeposition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceAirVehicleTake::_internal_takeposition() const {
  return takeposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceAirVehicleTake::takeposition() const {
  // @@protoc_insertion_point(field_get:space.CSpaceAirVehicleTake.takePosition)
  return _internal_takeposition();
}
inline void CSpaceAirVehicleTake::_internal_set_takeposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  takeposition_ = value;
}
inline void CSpaceAirVehicleTake::set_takeposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_takeposition(value);
  // @@protoc_insertion_point(field_set:space.CSpaceAirVehicleTake.takePosition)
}

// -------------------------------------------------------------------

// SSpaceAirVehicleTake

// int32 state = 1;
inline void SSpaceAirVehicleTake::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::state() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicleTake.state)
  return _internal_state();
}
inline void SSpaceAirVehicleTake::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SSpaceAirVehicleTake::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicleTake.state)
}

// string msg = 2;
inline void SSpaceAirVehicleTake::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceAirVehicleTake::msg() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicleTake.msg)
  return _internal_msg();
}
inline void SSpaceAirVehicleTake::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicleTake.msg)
}
inline std::string* SSpaceAirVehicleTake::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:space.SSpaceAirVehicleTake.msg)
  return _internal_mutable_msg();
}
inline const std::string& SSpaceAirVehicleTake::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SSpaceAirVehicleTake::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceAirVehicleTake::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:space.SSpaceAirVehicleTake.msg)
}
inline void SSpaceAirVehicleTake::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:space.SSpaceAirVehicleTake.msg)
}
inline void SSpaceAirVehicleTake::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:space.SSpaceAirVehicleTake.msg)
}
inline std::string* SSpaceAirVehicleTake::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceAirVehicleTake::release_msg() {
  // @@protoc_insertion_point(field_release:space.SSpaceAirVehicleTake.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceAirVehicleTake::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:space.SSpaceAirVehicleTake.msg)
}

// int32 id = 3;
inline void SSpaceAirVehicleTake::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::id() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicleTake.id)
  return _internal_id();
}
inline void SSpaceAirVehicleTake::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SSpaceAirVehicleTake::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicleTake.id)
}

// int32 takeUid = 4;
inline void SSpaceAirVehicleTake::clear_takeuid() {
  takeuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::_internal_takeuid() const {
  return takeuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::takeuid() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicleTake.takeUid)
  return _internal_takeuid();
}
inline void SSpaceAirVehicleTake::_internal_set_takeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  takeuid_ = value;
}
inline void SSpaceAirVehicleTake::set_takeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_takeuid(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicleTake.takeUid)
}

// int32 takePosition = 5;
inline void SSpaceAirVehicleTake::clear_takeposition() {
  takeposition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::_internal_takeposition() const {
  return takeposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::takeposition() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicleTake.takePosition)
  return _internal_takeposition();
}
inline void SSpaceAirVehicleTake::_internal_set_takeposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  takeposition_ = value;
}
inline void SSpaceAirVehicleTake::set_takeposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_takeposition(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicleTake.takePosition)
}

// int32 takeAction = 6;
inline void SSpaceAirVehicleTake::clear_takeaction() {
  takeaction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::_internal_takeaction() const {
  return takeaction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleTake::takeaction() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicleTake.takeAction)
  return _internal_takeaction();
}
inline void SSpaceAirVehicleTake::_internal_set_takeaction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  takeaction_ = value;
}
inline void SSpaceAirVehicleTake::set_takeaction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_takeaction(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicleTake.takeAction)
}

// -------------------------------------------------------------------

// SSpaceAirVehicleDisappear

// int32 id = 1;
inline void SSpaceAirVehicleDisappear::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleDisappear::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleDisappear::id() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicleDisappear.id)
  return _internal_id();
}
inline void SSpaceAirVehicleDisappear::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SSpaceAirVehicleDisappear::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicleDisappear.id)
}

// int32 second = 2;
inline void SSpaceAirVehicleDisappear::clear_second() {
  second_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleDisappear::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicleDisappear::second() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicleDisappear.second)
  return _internal_second();
}
inline void SSpaceAirVehicleDisappear::_internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  second_ = value;
}
inline void SSpaceAirVehicleDisappear::set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicleDisappear.second)
}

// -------------------------------------------------------------------

// SSpaceAirVehicle

// int32 id = 1;
inline void SSpaceAirVehicle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicle::id() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicle.id)
  return _internal_id();
}
inline void SSpaceAirVehicle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SSpaceAirVehicle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicle.id)
}

// int32 owner = 2;
inline void SSpaceAirVehicle::clear_owner() {
  owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicle::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicle::owner() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicle.owner)
  return _internal_owner();
}
inline void SSpaceAirVehicle::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_ = value;
}
inline void SSpaceAirVehicle::set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicle.owner)
}

// int32 driver = 3;
inline void SSpaceAirVehicle::clear_driver() {
  driver_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicle::_internal_driver() const {
  return driver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicle::driver() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicle.driver)
  return _internal_driver();
}
inline void SSpaceAirVehicle::_internal_set_driver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  driver_ = value;
}
inline void SSpaceAirVehicle::set_driver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driver(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicle.driver)
}

// int32 passenger = 4;
inline void SSpaceAirVehicle::clear_passenger() {
  passenger_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicle::_internal_passenger() const {
  return passenger_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceAirVehicle::passenger() const {
  // @@protoc_insertion_point(field_get:space.SSpaceAirVehicle.passenger)
  return _internal_passenger();
}
inline void SSpaceAirVehicle::_internal_set_passenger(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passenger_ = value;
}
inline void SSpaceAirVehicle::set_passenger(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passenger(value);
  // @@protoc_insertion_point(field_set:space.SSpaceAirVehicle.passenger)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace space

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_businessObject_2eproto
