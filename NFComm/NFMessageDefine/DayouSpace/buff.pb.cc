// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buff.proto

#include "buff.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace buff {
class CBuffOnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CBuffOn> _instance;
} _CBuffOn_default_instance_;
class SBuffOnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBuffOn> _instance;
} _SBuffOn_default_instance_;
class CBuffInterruptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CBuffInterrupt> _instance;
} _CBuffInterrupt_default_instance_;
class SBuffInterruptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBuffInterrupt> _instance;
} _SBuffInterrupt_default_instance_;
}  // namespace buff
static void InitDefaultsscc_info_CBuffInterrupt_buff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buff::_CBuffInterrupt_default_instance_;
    new (ptr) ::buff::CBuffInterrupt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buff::CBuffInterrupt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CBuffInterrupt_buff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CBuffInterrupt_buff_2eproto}, {}};

static void InitDefaultsscc_info_CBuffOn_buff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buff::_CBuffOn_default_instance_;
    new (ptr) ::buff::CBuffOn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buff::CBuffOn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CBuffOn_buff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CBuffOn_buff_2eproto}, {}};

static void InitDefaultsscc_info_SBuffInterrupt_buff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buff::_SBuffInterrupt_default_instance_;
    new (ptr) ::buff::SBuffInterrupt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buff::SBuffInterrupt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SBuffInterrupt_buff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SBuffInterrupt_buff_2eproto}, {}};

static void InitDefaultsscc_info_SBuffOn_buff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buff::_SBuffOn_default_instance_;
    new (ptr) ::buff::SBuffOn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buff::SBuffOn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SBuffOn_buff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SBuffOn_buff_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_buff_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_buff_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_buff_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_buff_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::buff::CBuffOn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::buff::CBuffOn, buffid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::buff::SBuffOn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::buff::SBuffOn, buffid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::buff::CBuffInterrupt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::buff::CBuffInterrupt, buffid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::buff::SBuffInterrupt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::buff::SBuffInterrupt, buffid_),
  PROTOBUF_FIELD_OFFSET(::buff::SBuffInterrupt, buffuid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::buff::CBuffOn)},
  { 6, -1, sizeof(::buff::SBuffOn)},
  { 12, -1, sizeof(::buff::CBuffInterrupt)},
  { 18, -1, sizeof(::buff::SBuffInterrupt)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::buff::_CBuffOn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::buff::_SBuffOn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::buff::_CBuffInterrupt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::buff::_SBuffInterrupt_default_instance_),
};

const char descriptor_table_protodef_buff_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nbuff.proto\022\004buff\032\014vector.proto\"\031\n\007CBuf"
  "fOn\022\016\n\006buffId\030\001 \001(\005\"\031\n\007SBuffOn\022\016\n\006buffId"
  "\030\001 \001(\005\" \n\016CBuffInterrupt\022\016\n\006buffId\030\001 \001(\005"
  "\"1\n\016SBuffInterrupt\022\016\n\006buffId\030\001 \001(\005\022\017\n\007bu"
  "ffUid\030\002 \001(\005B \n\030com.dayou.space.protobufB"
  "\004buffb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_buff_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_buff_2eproto_sccs[4] = {
  &scc_info_CBuffInterrupt_buff_2eproto.base,
  &scc_info_CBuffOn_buff_2eproto.base,
  &scc_info_SBuffInterrupt_buff_2eproto.base,
  &scc_info_SBuffOn_buff_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_buff_2eproto_once;
static bool descriptor_table_buff_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_buff_2eproto = {
  &descriptor_table_buff_2eproto_initialized, descriptor_table_protodef_buff_2eproto, "buff.proto", 213,
  &descriptor_table_buff_2eproto_once, descriptor_table_buff_2eproto_sccs, descriptor_table_buff_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_buff_2eproto::offsets,
  file_level_metadata_buff_2eproto, 4, file_level_enum_descriptors_buff_2eproto, file_level_service_descriptors_buff_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_buff_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_buff_2eproto), true);
namespace buff {

// ===================================================================

void CBuffOn::InitAsDefaultInstance() {
}
class CBuffOn::_Internal {
 public:
};

CBuffOn::CBuffOn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:buff.CBuffOn)
}
CBuffOn::CBuffOn(const CBuffOn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffid_ = from.buffid_;
  // @@protoc_insertion_point(copy_constructor:buff.CBuffOn)
}

void CBuffOn::SharedCtor() {
  buffid_ = 0;
}

CBuffOn::~CBuffOn() {
  // @@protoc_insertion_point(destructor:buff.CBuffOn)
  SharedDtor();
}

void CBuffOn::SharedDtor() {
}

void CBuffOn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBuffOn& CBuffOn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CBuffOn_buff_2eproto.base);
  return *internal_default_instance();
}


void CBuffOn::Clear() {
// @@protoc_insertion_point(message_clear_start:buff.CBuffOn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffid_ = 0;
  _internal_metadata_.Clear();
}

const char* CBuffOn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 buffId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buffid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBuffOn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:buff.CBuffOn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buffId = 1;
  if (this->buffid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buffid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buff.CBuffOn)
  return target;
}

size_t CBuffOn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buff.CBuffOn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 buffId = 1;
  if (this->buffid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBuffOn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buff.CBuffOn)
  GOOGLE_DCHECK_NE(&from, this);
  const CBuffOn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBuffOn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buff.CBuffOn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buff.CBuffOn)
    MergeFrom(*source);
  }
}

void CBuffOn::MergeFrom(const CBuffOn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buff.CBuffOn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buffid() != 0) {
    _internal_set_buffid(from._internal_buffid());
  }
}

void CBuffOn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buff.CBuffOn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBuffOn::CopyFrom(const CBuffOn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buff.CBuffOn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBuffOn::IsInitialized() const {
  return true;
}

void CBuffOn::InternalSwap(CBuffOn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(buffid_, other->buffid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBuffOn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBuffOn::InitAsDefaultInstance() {
}
class SBuffOn::_Internal {
 public:
};

SBuffOn::SBuffOn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:buff.SBuffOn)
}
SBuffOn::SBuffOn(const SBuffOn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffid_ = from.buffid_;
  // @@protoc_insertion_point(copy_constructor:buff.SBuffOn)
}

void SBuffOn::SharedCtor() {
  buffid_ = 0;
}

SBuffOn::~SBuffOn() {
  // @@protoc_insertion_point(destructor:buff.SBuffOn)
  SharedDtor();
}

void SBuffOn::SharedDtor() {
}

void SBuffOn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBuffOn& SBuffOn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBuffOn_buff_2eproto.base);
  return *internal_default_instance();
}


void SBuffOn::Clear() {
// @@protoc_insertion_point(message_clear_start:buff.SBuffOn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffid_ = 0;
  _internal_metadata_.Clear();
}

const char* SBuffOn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 buffId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buffid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBuffOn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:buff.SBuffOn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buffId = 1;
  if (this->buffid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buffid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buff.SBuffOn)
  return target;
}

size_t SBuffOn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buff.SBuffOn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 buffId = 1;
  if (this->buffid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBuffOn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buff.SBuffOn)
  GOOGLE_DCHECK_NE(&from, this);
  const SBuffOn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBuffOn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buff.SBuffOn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buff.SBuffOn)
    MergeFrom(*source);
  }
}

void SBuffOn::MergeFrom(const SBuffOn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buff.SBuffOn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buffid() != 0) {
    _internal_set_buffid(from._internal_buffid());
  }
}

void SBuffOn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buff.SBuffOn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBuffOn::CopyFrom(const SBuffOn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buff.SBuffOn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBuffOn::IsInitialized() const {
  return true;
}

void SBuffOn::InternalSwap(SBuffOn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(buffid_, other->buffid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBuffOn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CBuffInterrupt::InitAsDefaultInstance() {
}
class CBuffInterrupt::_Internal {
 public:
};

CBuffInterrupt::CBuffInterrupt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:buff.CBuffInterrupt)
}
CBuffInterrupt::CBuffInterrupt(const CBuffInterrupt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffid_ = from.buffid_;
  // @@protoc_insertion_point(copy_constructor:buff.CBuffInterrupt)
}

void CBuffInterrupt::SharedCtor() {
  buffid_ = 0;
}

CBuffInterrupt::~CBuffInterrupt() {
  // @@protoc_insertion_point(destructor:buff.CBuffInterrupt)
  SharedDtor();
}

void CBuffInterrupt::SharedDtor() {
}

void CBuffInterrupt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBuffInterrupt& CBuffInterrupt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CBuffInterrupt_buff_2eproto.base);
  return *internal_default_instance();
}


void CBuffInterrupt::Clear() {
// @@protoc_insertion_point(message_clear_start:buff.CBuffInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffid_ = 0;
  _internal_metadata_.Clear();
}

const char* CBuffInterrupt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 buffId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buffid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBuffInterrupt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:buff.CBuffInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buffId = 1;
  if (this->buffid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buffid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buff.CBuffInterrupt)
  return target;
}

size_t CBuffInterrupt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buff.CBuffInterrupt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 buffId = 1;
  if (this->buffid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBuffInterrupt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buff.CBuffInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  const CBuffInterrupt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBuffInterrupt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buff.CBuffInterrupt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buff.CBuffInterrupt)
    MergeFrom(*source);
  }
}

void CBuffInterrupt::MergeFrom(const CBuffInterrupt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buff.CBuffInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buffid() != 0) {
    _internal_set_buffid(from._internal_buffid());
  }
}

void CBuffInterrupt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buff.CBuffInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBuffInterrupt::CopyFrom(const CBuffInterrupt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buff.CBuffInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBuffInterrupt::IsInitialized() const {
  return true;
}

void CBuffInterrupt::InternalSwap(CBuffInterrupt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(buffid_, other->buffid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBuffInterrupt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBuffInterrupt::InitAsDefaultInstance() {
}
class SBuffInterrupt::_Internal {
 public:
};

SBuffInterrupt::SBuffInterrupt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:buff.SBuffInterrupt)
}
SBuffInterrupt::SBuffInterrupt(const SBuffInterrupt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buffid_, &from.buffid_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffuid_) -
    reinterpret_cast<char*>(&buffid_)) + sizeof(buffuid_));
  // @@protoc_insertion_point(copy_constructor:buff.SBuffInterrupt)
}

void SBuffInterrupt::SharedCtor() {
  ::memset(&buffid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffuid_) -
      reinterpret_cast<char*>(&buffid_)) + sizeof(buffuid_));
}

SBuffInterrupt::~SBuffInterrupt() {
  // @@protoc_insertion_point(destructor:buff.SBuffInterrupt)
  SharedDtor();
}

void SBuffInterrupt::SharedDtor() {
}

void SBuffInterrupt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBuffInterrupt& SBuffInterrupt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBuffInterrupt_buff_2eproto.base);
  return *internal_default_instance();
}


void SBuffInterrupt::Clear() {
// @@protoc_insertion_point(message_clear_start:buff.SBuffInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buffid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffuid_) -
      reinterpret_cast<char*>(&buffid_)) + sizeof(buffuid_));
  _internal_metadata_.Clear();
}

const char* SBuffInterrupt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 buffId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buffid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buffUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          buffuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBuffInterrupt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:buff.SBuffInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buffId = 1;
  if (this->buffid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buffid(), target);
  }

  // int32 buffUid = 2;
  if (this->buffuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_buffuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buff.SBuffInterrupt)
  return target;
}

size_t SBuffInterrupt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buff.SBuffInterrupt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 buffId = 1;
  if (this->buffid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffid());
  }

  // int32 buffUid = 2;
  if (this->buffuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBuffInterrupt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buff.SBuffInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  const SBuffInterrupt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBuffInterrupt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buff.SBuffInterrupt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buff.SBuffInterrupt)
    MergeFrom(*source);
  }
}

void SBuffInterrupt::MergeFrom(const SBuffInterrupt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buff.SBuffInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buffid() != 0) {
    _internal_set_buffid(from._internal_buffid());
  }
  if (from.buffuid() != 0) {
    _internal_set_buffuid(from._internal_buffuid());
  }
}

void SBuffInterrupt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buff.SBuffInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBuffInterrupt::CopyFrom(const SBuffInterrupt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buff.SBuffInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBuffInterrupt::IsInitialized() const {
  return true;
}

void SBuffInterrupt::InternalSwap(SBuffInterrupt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(buffid_, other->buffid_);
  swap(buffuid_, other->buffuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBuffInterrupt::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace buff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::buff::CBuffOn* Arena::CreateMaybeMessage< ::buff::CBuffOn >(Arena* arena) {
  return Arena::CreateInternal< ::buff::CBuffOn >(arena);
}
template<> PROTOBUF_NOINLINE ::buff::SBuffOn* Arena::CreateMaybeMessage< ::buff::SBuffOn >(Arena* arena) {
  return Arena::CreateInternal< ::buff::SBuffOn >(arena);
}
template<> PROTOBUF_NOINLINE ::buff::CBuffInterrupt* Arena::CreateMaybeMessage< ::buff::CBuffInterrupt >(Arena* arena) {
  return Arena::CreateInternal< ::buff::CBuffInterrupt >(arena);
}
template<> PROTOBUF_NOINLINE ::buff::SBuffInterrupt* Arena::CreateMaybeMessage< ::buff::SBuffInterrupt >(Arena* arena) {
  return Arena::CreateInternal< ::buff::SBuffInterrupt >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
