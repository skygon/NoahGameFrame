// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userPosition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userPosition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userPosition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "position.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userPosition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userPosition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userPosition_2eproto;
namespace userPosition {
class BBonePos;
class BBonePosDefaultTypeInternal;
extern BBonePosDefaultTypeInternal _BBonePos_default_instance_;
class BFacePos;
class BFacePosDefaultTypeInternal;
extern BFacePosDefaultTypeInternal _BFacePos_default_instance_;
class BVrBonePos;
class BVrBonePosDefaultTypeInternal;
extern BVrBonePosDefaultTypeInternal _BVrBonePos_default_instance_;
class CNeuronConnect;
class CNeuronConnectDefaultTypeInternal;
extern CNeuronConnectDefaultTypeInternal _CNeuronConnect_default_instance_;
class CNeuronPosition;
class CNeuronPositionDefaultTypeInternal;
extern CNeuronPositionDefaultTypeInternal _CNeuronPosition_default_instance_;
class CUserPosition;
class CUserPositionDefaultTypeInternal;
extern CUserPositionDefaultTypeInternal _CUserPosition_default_instance_;
class CVrPosition;
class CVrPositionDefaultTypeInternal;
extern CVrPositionDefaultTypeInternal _CVrPosition_default_instance_;
class NeuronPosition;
class NeuronPositionDefaultTypeInternal;
extern NeuronPositionDefaultTypeInternal _NeuronPosition_default_instance_;
class SNeuronConnect;
class SNeuronConnectDefaultTypeInternal;
extern SNeuronConnectDefaultTypeInternal _SNeuronConnect_default_instance_;
class SNeuronPosition;
class SNeuronPositionDefaultTypeInternal;
extern SNeuronPositionDefaultTypeInternal _SNeuronPosition_default_instance_;
class SUserPosition;
class SUserPositionDefaultTypeInternal;
extern SUserPositionDefaultTypeInternal _SUserPosition_default_instance_;
class SVrPosition;
class SVrPositionDefaultTypeInternal;
extern SVrPositionDefaultTypeInternal _SVrPosition_default_instance_;
class UPosition;
class UPositionDefaultTypeInternal;
extern UPositionDefaultTypeInternal _UPosition_default_instance_;
class VrPosition;
class VrPositionDefaultTypeInternal;
extern VrPositionDefaultTypeInternal _VrPosition_default_instance_;
}  // namespace userPosition
PROTOBUF_NAMESPACE_OPEN
template<> ::userPosition::BBonePos* Arena::CreateMaybeMessage<::userPosition::BBonePos>(Arena*);
template<> ::userPosition::BFacePos* Arena::CreateMaybeMessage<::userPosition::BFacePos>(Arena*);
template<> ::userPosition::BVrBonePos* Arena::CreateMaybeMessage<::userPosition::BVrBonePos>(Arena*);
template<> ::userPosition::CNeuronConnect* Arena::CreateMaybeMessage<::userPosition::CNeuronConnect>(Arena*);
template<> ::userPosition::CNeuronPosition* Arena::CreateMaybeMessage<::userPosition::CNeuronPosition>(Arena*);
template<> ::userPosition::CUserPosition* Arena::CreateMaybeMessage<::userPosition::CUserPosition>(Arena*);
template<> ::userPosition::CVrPosition* Arena::CreateMaybeMessage<::userPosition::CVrPosition>(Arena*);
template<> ::userPosition::NeuronPosition* Arena::CreateMaybeMessage<::userPosition::NeuronPosition>(Arena*);
template<> ::userPosition::SNeuronConnect* Arena::CreateMaybeMessage<::userPosition::SNeuronConnect>(Arena*);
template<> ::userPosition::SNeuronPosition* Arena::CreateMaybeMessage<::userPosition::SNeuronPosition>(Arena*);
template<> ::userPosition::SUserPosition* Arena::CreateMaybeMessage<::userPosition::SUserPosition>(Arena*);
template<> ::userPosition::SVrPosition* Arena::CreateMaybeMessage<::userPosition::SVrPosition>(Arena*);
template<> ::userPosition::UPosition* Arena::CreateMaybeMessage<::userPosition::UPosition>(Arena*);
template<> ::userPosition::VrPosition* Arena::CreateMaybeMessage<::userPosition::VrPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userPosition {

// ===================================================================

class CUserPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.CUserPosition) */ {
 public:
  CUserPosition();
  virtual ~CUserPosition();

  CUserPosition(const CUserPosition& from);
  CUserPosition(CUserPosition&& from) noexcept
    : CUserPosition() {
    *this = ::std::move(from);
  }

  inline CUserPosition& operator=(const CUserPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserPosition& operator=(CUserPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUserPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserPosition* internal_default_instance() {
    return reinterpret_cast<const CUserPosition*>(
               &_CUserPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CUserPosition& a, CUserPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUserPosition* New() const final {
    return CreateMaybeMessage<CUserPosition>(nullptr);
  }

  CUserPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUserPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUserPosition& from);
  void MergeFrom(const CUserPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.CUserPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // .position.BPosition2 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition2& position() const;
  ::position::BPosition2* release_position();
  ::position::BPosition2* mutable_position();
  void set_allocated_position(::position::BPosition2* position);
  private:
  const ::position::BPosition2& _internal_position() const;
  ::position::BPosition2* _internal_mutable_position();
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.CUserPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::position::BPosition2* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class SUserPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.SUserPosition) */ {
 public:
  SUserPosition();
  virtual ~SUserPosition();

  SUserPosition(const SUserPosition& from);
  SUserPosition(SUserPosition&& from) noexcept
    : SUserPosition() {
    *this = ::std::move(from);
  }

  inline SUserPosition& operator=(const SUserPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUserPosition& operator=(SUserPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUserPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUserPosition* internal_default_instance() {
    return reinterpret_cast<const SUserPosition*>(
               &_SUserPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SUserPosition& a, SUserPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SUserPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUserPosition* New() const final {
    return CreateMaybeMessage<SUserPosition>(nullptr);
  }

  SUserPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUserPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUserPosition& from);
  void MergeFrom(const SUserPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUserPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.SUserPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 1,
  };
  // repeated .userPosition.UPosition positions = 1;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::userPosition::UPosition* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::UPosition >*
      mutable_positions();
  private:
  const ::userPosition::UPosition& _internal_positions(int index) const;
  ::userPosition::UPosition* _internal_add_positions();
  public:
  const ::userPosition::UPosition& positions(int index) const;
  ::userPosition::UPosition* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::UPosition >&
      positions() const;

  // @@protoc_insertion_point(class_scope:userPosition.SUserPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::UPosition > positions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class UPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.UPosition) */ {
 public:
  UPosition();
  virtual ~UPosition();

  UPosition(const UPosition& from);
  UPosition(UPosition&& from) noexcept
    : UPosition() {
    *this = ::std::move(from);
  }

  inline UPosition& operator=(const UPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline UPosition& operator=(UPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UPosition* internal_default_instance() {
    return reinterpret_cast<const UPosition*>(
               &_UPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UPosition& a, UPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(UPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UPosition* New() const final {
    return CreateMaybeMessage<UPosition>(nullptr);
  }

  UPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UPosition& from);
  void MergeFrom(const UPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.UPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // .position.BPosition2 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition2& position() const;
  ::position::BPosition2* release_position();
  ::position::BPosition2* mutable_position();
  void set_allocated_position(::position::BPosition2* position);
  private:
  const ::position::BPosition2& _internal_position() const;
  ::position::BPosition2* _internal_mutable_position();
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.UPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::position::BPosition2* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class CNeuronConnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.CNeuronConnect) */ {
 public:
  CNeuronConnect();
  virtual ~CNeuronConnect();

  CNeuronConnect(const CNeuronConnect& from);
  CNeuronConnect(CNeuronConnect&& from) noexcept
    : CNeuronConnect() {
    *this = ::std::move(from);
  }

  inline CNeuronConnect& operator=(const CNeuronConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNeuronConnect& operator=(CNeuronConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNeuronConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CNeuronConnect* internal_default_instance() {
    return reinterpret_cast<const CNeuronConnect*>(
               &_CNeuronConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CNeuronConnect& a, CNeuronConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CNeuronConnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNeuronConnect* New() const final {
    return CreateMaybeMessage<CNeuronConnect>(nullptr);
  }

  CNeuronConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNeuronConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNeuronConnect& from);
  void MergeFrom(const CNeuronConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNeuronConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.CNeuronConnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.CNeuronConnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class SNeuronConnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.SNeuronConnect) */ {
 public:
  SNeuronConnect();
  virtual ~SNeuronConnect();

  SNeuronConnect(const SNeuronConnect& from);
  SNeuronConnect(SNeuronConnect&& from) noexcept
    : SNeuronConnect() {
    *this = ::std::move(from);
  }

  inline SNeuronConnect& operator=(const SNeuronConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNeuronConnect& operator=(SNeuronConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNeuronConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNeuronConnect* internal_default_instance() {
    return reinterpret_cast<const SNeuronConnect*>(
               &_SNeuronConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SNeuronConnect& a, SNeuronConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(SNeuronConnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNeuronConnect* New() const final {
    return CreateMaybeMessage<SNeuronConnect>(nullptr);
  }

  SNeuronConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNeuronConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNeuronConnect& from);
  void MergeFrom(const SNeuronConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNeuronConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.SNeuronConnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.SNeuronConnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class BBonePos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.BBonePos) */ {
 public:
  BBonePos();
  virtual ~BBonePos();

  BBonePos(const BBonePos& from);
  BBonePos(BBonePos&& from) noexcept
    : BBonePos() {
    *this = ::std::move(from);
  }

  inline BBonePos& operator=(const BBonePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBonePos& operator=(BBonePos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BBonePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BBonePos* internal_default_instance() {
    return reinterpret_cast<const BBonePos*>(
               &_BBonePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BBonePos& a, BBonePos& b) {
    a.Swap(&b);
  }
  inline void Swap(BBonePos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBonePos* New() const final {
    return CreateMaybeMessage<BBonePos>(nullptr);
  }

  BBonePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBonePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBonePos& from);
  void MergeFrom(const BBonePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBonePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.BBonePos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kBoneIdFieldNumber = 1,
  };
  // .position.BPosition2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition2& position() const;
  ::position::BPosition2* release_position();
  ::position::BPosition2* mutable_position();
  void set_allocated_position(::position::BPosition2* position);
  private:
  const ::position::BPosition2& _internal_position() const;
  ::position::BPosition2* _internal_mutable_position();
  public:

  // int32 boneId = 1;
  void clear_boneid();
  ::PROTOBUF_NAMESPACE_ID::int32 boneid() const;
  void set_boneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boneid() const;
  void _internal_set_boneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.BBonePos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::position::BPosition2* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 boneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class BFacePos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.BFacePos) */ {
 public:
  BFacePos();
  virtual ~BFacePos();

  BFacePos(const BFacePos& from);
  BFacePos(BFacePos&& from) noexcept
    : BFacePos() {
    *this = ::std::move(from);
  }

  inline BFacePos& operator=(const BFacePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline BFacePos& operator=(BFacePos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BFacePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BFacePos* internal_default_instance() {
    return reinterpret_cast<const BFacePos*>(
               &_BFacePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BFacePos& a, BFacePos& b) {
    a.Swap(&b);
  }
  inline void Swap(BFacePos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BFacePos* New() const final {
    return CreateMaybeMessage<BFacePos>(nullptr);
  }

  BFacePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BFacePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BFacePos& from);
  void MergeFrom(const BFacePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BFacePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.BFacePos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaceIdFieldNumber = 1,
    kFaceValueFieldNumber = 2,
  };
  // int32 faceId = 1;
  void clear_faceid();
  ::PROTOBUF_NAMESPACE_ID::int32 faceid() const;
  void set_faceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_faceid() const;
  void _internal_set_faceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 faceValue = 2;
  void clear_facevalue();
  ::PROTOBUF_NAMESPACE_ID::int32 facevalue() const;
  void set_facevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_facevalue() const;
  void _internal_set_facevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.BFacePos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 faceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 facevalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class CNeuronPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.CNeuronPosition) */ {
 public:
  CNeuronPosition();
  virtual ~CNeuronPosition();

  CNeuronPosition(const CNeuronPosition& from);
  CNeuronPosition(CNeuronPosition&& from) noexcept
    : CNeuronPosition() {
    *this = ::std::move(from);
  }

  inline CNeuronPosition& operator=(const CNeuronPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNeuronPosition& operator=(CNeuronPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNeuronPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CNeuronPosition* internal_default_instance() {
    return reinterpret_cast<const CNeuronPosition*>(
               &_CNeuronPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CNeuronPosition& a, CNeuronPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CNeuronPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNeuronPosition* New() const final {
    return CreateMaybeMessage<CNeuronPosition>(nullptr);
  }

  CNeuronPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNeuronPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNeuronPosition& from);
  void MergeFrom(const CNeuronPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNeuronPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.CNeuronPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonePosFieldNumber = 2,
    kFacePosFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // repeated .userPosition.BBonePos bonePos = 2;
  int bonepos_size() const;
  private:
  int _internal_bonepos_size() const;
  public:
  void clear_bonepos();
  ::userPosition::BBonePos* mutable_bonepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos >*
      mutable_bonepos();
  private:
  const ::userPosition::BBonePos& _internal_bonepos(int index) const;
  ::userPosition::BBonePos* _internal_add_bonepos();
  public:
  const ::userPosition::BBonePos& bonepos(int index) const;
  ::userPosition::BBonePos* add_bonepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos >&
      bonepos() const;

  // repeated .userPosition.BFacePos facePos = 3;
  int facepos_size() const;
  private:
  int _internal_facepos_size() const;
  public:
  void clear_facepos();
  ::userPosition::BFacePos* mutable_facepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >*
      mutable_facepos();
  private:
  const ::userPosition::BFacePos& _internal_facepos(int index) const;
  ::userPosition::BFacePos* _internal_add_facepos();
  public:
  const ::userPosition::BFacePos& facepos(int index) const;
  ::userPosition::BFacePos* add_facepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >&
      facepos() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.CNeuronPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos > bonepos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos > facepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class NeuronPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.NeuronPosition) */ {
 public:
  NeuronPosition();
  virtual ~NeuronPosition();

  NeuronPosition(const NeuronPosition& from);
  NeuronPosition(NeuronPosition&& from) noexcept
    : NeuronPosition() {
    *this = ::std::move(from);
  }

  inline NeuronPosition& operator=(const NeuronPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeuronPosition& operator=(NeuronPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NeuronPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NeuronPosition* internal_default_instance() {
    return reinterpret_cast<const NeuronPosition*>(
               &_NeuronPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NeuronPosition& a, NeuronPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(NeuronPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NeuronPosition* New() const final {
    return CreateMaybeMessage<NeuronPosition>(nullptr);
  }

  NeuronPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NeuronPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NeuronPosition& from);
  void MergeFrom(const NeuronPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeuronPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.NeuronPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonePosFieldNumber = 2,
    kFacePosFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // repeated .userPosition.BBonePos bonePos = 2;
  int bonepos_size() const;
  private:
  int _internal_bonepos_size() const;
  public:
  void clear_bonepos();
  ::userPosition::BBonePos* mutable_bonepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos >*
      mutable_bonepos();
  private:
  const ::userPosition::BBonePos& _internal_bonepos(int index) const;
  ::userPosition::BBonePos* _internal_add_bonepos();
  public:
  const ::userPosition::BBonePos& bonepos(int index) const;
  ::userPosition::BBonePos* add_bonepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos >&
      bonepos() const;

  // repeated .userPosition.BFacePos facePos = 3;
  int facepos_size() const;
  private:
  int _internal_facepos_size() const;
  public:
  void clear_facepos();
  ::userPosition::BFacePos* mutable_facepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >*
      mutable_facepos();
  private:
  const ::userPosition::BFacePos& _internal_facepos(int index) const;
  ::userPosition::BFacePos* _internal_add_facepos();
  public:
  const ::userPosition::BFacePos& facepos(int index) const;
  ::userPosition::BFacePos* add_facepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >&
      facepos() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.NeuronPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos > bonepos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos > facepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class SNeuronPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.SNeuronPosition) */ {
 public:
  SNeuronPosition();
  virtual ~SNeuronPosition();

  SNeuronPosition(const SNeuronPosition& from);
  SNeuronPosition(SNeuronPosition&& from) noexcept
    : SNeuronPosition() {
    *this = ::std::move(from);
  }

  inline SNeuronPosition& operator=(const SNeuronPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNeuronPosition& operator=(SNeuronPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNeuronPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNeuronPosition* internal_default_instance() {
    return reinterpret_cast<const SNeuronPosition*>(
               &_SNeuronPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SNeuronPosition& a, SNeuronPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SNeuronPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNeuronPosition* New() const final {
    return CreateMaybeMessage<SNeuronPosition>(nullptr);
  }

  SNeuronPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNeuronPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNeuronPosition& from);
  void MergeFrom(const SNeuronPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNeuronPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.SNeuronPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeuronPosListFieldNumber = 1,
  };
  // repeated .userPosition.NeuronPosition neuronPosList = 1;
  int neuronposlist_size() const;
  private:
  int _internal_neuronposlist_size() const;
  public:
  void clear_neuronposlist();
  ::userPosition::NeuronPosition* mutable_neuronposlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::NeuronPosition >*
      mutable_neuronposlist();
  private:
  const ::userPosition::NeuronPosition& _internal_neuronposlist(int index) const;
  ::userPosition::NeuronPosition* _internal_add_neuronposlist();
  public:
  const ::userPosition::NeuronPosition& neuronposlist(int index) const;
  ::userPosition::NeuronPosition* add_neuronposlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::NeuronPosition >&
      neuronposlist() const;

  // @@protoc_insertion_point(class_scope:userPosition.SNeuronPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::NeuronPosition > neuronposlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class BVrBonePos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.BVrBonePos) */ {
 public:
  BVrBonePos();
  virtual ~BVrBonePos();

  BVrBonePos(const BVrBonePos& from);
  BVrBonePos(BVrBonePos&& from) noexcept
    : BVrBonePos() {
    *this = ::std::move(from);
  }

  inline BVrBonePos& operator=(const BVrBonePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline BVrBonePos& operator=(BVrBonePos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BVrBonePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BVrBonePos* internal_default_instance() {
    return reinterpret_cast<const BVrBonePos*>(
               &_BVrBonePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BVrBonePos& a, BVrBonePos& b) {
    a.Swap(&b);
  }
  inline void Swap(BVrBonePos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BVrBonePos* New() const final {
    return CreateMaybeMessage<BVrBonePos>(nullptr);
  }

  BVrBonePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BVrBonePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BVrBonePos& from);
  void MergeFrom(const BVrBonePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BVrBonePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.BVrBonePos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kBoneIdFieldNumber = 1,
  };
  // .position.BPosition position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition& position() const;
  ::position::BPosition* release_position();
  ::position::BPosition* mutable_position();
  void set_allocated_position(::position::BPosition* position);
  private:
  const ::position::BPosition& _internal_position() const;
  ::position::BPosition* _internal_mutable_position();
  public:

  // int32 boneId = 1;
  void clear_boneid();
  ::PROTOBUF_NAMESPACE_ID::int32 boneid() const;
  void set_boneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boneid() const;
  void _internal_set_boneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.BVrBonePos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::position::BPosition* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 boneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class CVrPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.CVrPosition) */ {
 public:
  CVrPosition();
  virtual ~CVrPosition();

  CVrPosition(const CVrPosition& from);
  CVrPosition(CVrPosition&& from) noexcept
    : CVrPosition() {
    *this = ::std::move(from);
  }

  inline CVrPosition& operator=(const CVrPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVrPosition& operator=(CVrPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVrPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVrPosition* internal_default_instance() {
    return reinterpret_cast<const CVrPosition*>(
               &_CVrPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CVrPosition& a, CVrPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CVrPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVrPosition* New() const final {
    return CreateMaybeMessage<CVrPosition>(nullptr);
  }

  CVrPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVrPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVrPosition& from);
  void MergeFrom(const CVrPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVrPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.CVrPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonePosFieldNumber = 2,
    kFacePosFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // repeated .userPosition.BVrBonePos bonePos = 2;
  int bonepos_size() const;
  private:
  int _internal_bonepos_size() const;
  public:
  void clear_bonepos();
  ::userPosition::BVrBonePos* mutable_bonepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos >*
      mutable_bonepos();
  private:
  const ::userPosition::BVrBonePos& _internal_bonepos(int index) const;
  ::userPosition::BVrBonePos* _internal_add_bonepos();
  public:
  const ::userPosition::BVrBonePos& bonepos(int index) const;
  ::userPosition::BVrBonePos* add_bonepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos >&
      bonepos() const;

  // repeated .userPosition.BFacePos facePos = 3;
  int facepos_size() const;
  private:
  int _internal_facepos_size() const;
  public:
  void clear_facepos();
  ::userPosition::BFacePos* mutable_facepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >*
      mutable_facepos();
  private:
  const ::userPosition::BFacePos& _internal_facepos(int index) const;
  ::userPosition::BFacePos* _internal_add_facepos();
  public:
  const ::userPosition::BFacePos& facepos(int index) const;
  ::userPosition::BFacePos* add_facepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >&
      facepos() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.CVrPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos > bonepos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos > facepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class VrPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.VrPosition) */ {
 public:
  VrPosition();
  virtual ~VrPosition();

  VrPosition(const VrPosition& from);
  VrPosition(VrPosition&& from) noexcept
    : VrPosition() {
    *this = ::std::move(from);
  }

  inline VrPosition& operator=(const VrPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline VrPosition& operator=(VrPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VrPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VrPosition* internal_default_instance() {
    return reinterpret_cast<const VrPosition*>(
               &_VrPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VrPosition& a, VrPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(VrPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VrPosition* New() const final {
    return CreateMaybeMessage<VrPosition>(nullptr);
  }

  VrPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VrPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VrPosition& from);
  void MergeFrom(const VrPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VrPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.VrPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonePosFieldNumber = 2,
    kFacePosFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // repeated .userPosition.BVrBonePos bonePos = 2;
  int bonepos_size() const;
  private:
  int _internal_bonepos_size() const;
  public:
  void clear_bonepos();
  ::userPosition::BVrBonePos* mutable_bonepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos >*
      mutable_bonepos();
  private:
  const ::userPosition::BVrBonePos& _internal_bonepos(int index) const;
  ::userPosition::BVrBonePos* _internal_add_bonepos();
  public:
  const ::userPosition::BVrBonePos& bonepos(int index) const;
  ::userPosition::BVrBonePos* add_bonepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos >&
      bonepos() const;

  // repeated .userPosition.BFacePos facePos = 3;
  int facepos_size() const;
  private:
  int _internal_facepos_size() const;
  public:
  void clear_facepos();
  ::userPosition::BFacePos* mutable_facepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >*
      mutable_facepos();
  private:
  const ::userPosition::BFacePos& _internal_facepos(int index) const;
  ::userPosition::BFacePos* _internal_add_facepos();
  public:
  const ::userPosition::BFacePos& facepos(int index) const;
  ::userPosition::BFacePos* add_facepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >&
      facepos() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userPosition.VrPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos > bonepos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos > facepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// -------------------------------------------------------------------

class SVrPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userPosition.SVrPosition) */ {
 public:
  SVrPosition();
  virtual ~SVrPosition();

  SVrPosition(const SVrPosition& from);
  SVrPosition(SVrPosition&& from) noexcept
    : SVrPosition() {
    *this = ::std::move(from);
  }

  inline SVrPosition& operator=(const SVrPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SVrPosition& operator=(SVrPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SVrPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVrPosition* internal_default_instance() {
    return reinterpret_cast<const SVrPosition*>(
               &_SVrPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SVrPosition& a, SVrPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SVrPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SVrPosition* New() const final {
    return CreateMaybeMessage<SVrPosition>(nullptr);
  }

  SVrPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SVrPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SVrPosition& from);
  void MergeFrom(const SVrPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SVrPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userPosition.SVrPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userPosition_2eproto);
    return ::descriptor_table_userPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrPostListFieldNumber = 1,
  };
  // repeated .userPosition.VrPosition vrPostList = 1;
  int vrpostlist_size() const;
  private:
  int _internal_vrpostlist_size() const;
  public:
  void clear_vrpostlist();
  ::userPosition::VrPosition* mutable_vrpostlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::VrPosition >*
      mutable_vrpostlist();
  private:
  const ::userPosition::VrPosition& _internal_vrpostlist(int index) const;
  ::userPosition::VrPosition* _internal_add_vrpostlist();
  public:
  const ::userPosition::VrPosition& vrpostlist(int index) const;
  ::userPosition::VrPosition* add_vrpostlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::VrPosition >&
      vrpostlist() const;

  // @@protoc_insertion_point(class_scope:userPosition.SVrPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::VrPosition > vrpostlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userPosition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CUserPosition

// .position.BPosition2 position = 1;
inline bool CUserPosition::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CUserPosition::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition2& CUserPosition::_internal_position() const {
  const ::position::BPosition2* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition2*>(
      &::position::_BPosition2_default_instance_);
}
inline const ::position::BPosition2& CUserPosition::position() const {
  // @@protoc_insertion_point(field_get:userPosition.CUserPosition.position)
  return _internal_position();
}
inline ::position::BPosition2* CUserPosition::release_position() {
  // @@protoc_insertion_point(field_release:userPosition.CUserPosition.position)
  
  ::position::BPosition2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition2* CUserPosition::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition2>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition2* CUserPosition::mutable_position() {
  // @@protoc_insertion_point(field_mutable:userPosition.CUserPosition.position)
  return _internal_mutable_position();
}
inline void CUserPosition::set_allocated_position(::position::BPosition2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:userPosition.CUserPosition.position)
}

// int32 uid = 2;
inline void CUserPosition::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserPosition::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserPosition::uid() const {
  // @@protoc_insertion_point(field_get:userPosition.CUserPosition.uid)
  return _internal_uid();
}
inline void CUserPosition::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CUserPosition::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userPosition.CUserPosition.uid)
}

// -------------------------------------------------------------------

// SUserPosition

// repeated .userPosition.UPosition positions = 1;
inline int SUserPosition::_internal_positions_size() const {
  return positions_.size();
}
inline int SUserPosition::positions_size() const {
  return _internal_positions_size();
}
inline void SUserPosition::clear_positions() {
  positions_.Clear();
}
inline ::userPosition::UPosition* SUserPosition::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.SUserPosition.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::UPosition >*
SUserPosition::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.SUserPosition.positions)
  return &positions_;
}
inline const ::userPosition::UPosition& SUserPosition::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::userPosition::UPosition& SUserPosition::positions(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.SUserPosition.positions)
  return _internal_positions(index);
}
inline ::userPosition::UPosition* SUserPosition::_internal_add_positions() {
  return positions_.Add();
}
inline ::userPosition::UPosition* SUserPosition::add_positions() {
  // @@protoc_insertion_point(field_add:userPosition.SUserPosition.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::UPosition >&
SUserPosition::positions() const {
  // @@protoc_insertion_point(field_list:userPosition.SUserPosition.positions)
  return positions_;
}

// -------------------------------------------------------------------

// UPosition

// .position.BPosition2 position = 1;
inline bool UPosition::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool UPosition::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition2& UPosition::_internal_position() const {
  const ::position::BPosition2* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition2*>(
      &::position::_BPosition2_default_instance_);
}
inline const ::position::BPosition2& UPosition::position() const {
  // @@protoc_insertion_point(field_get:userPosition.UPosition.position)
  return _internal_position();
}
inline ::position::BPosition2* UPosition::release_position() {
  // @@protoc_insertion_point(field_release:userPosition.UPosition.position)
  
  ::position::BPosition2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition2* UPosition::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition2>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition2* UPosition::mutable_position() {
  // @@protoc_insertion_point(field_mutable:userPosition.UPosition.position)
  return _internal_mutable_position();
}
inline void UPosition::set_allocated_position(::position::BPosition2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:userPosition.UPosition.position)
}

// int32 uid = 2;
inline void UPosition::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UPosition::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UPosition::uid() const {
  // @@protoc_insertion_point(field_get:userPosition.UPosition.uid)
  return _internal_uid();
}
inline void UPosition::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void UPosition::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userPosition.UPosition.uid)
}

// -------------------------------------------------------------------

// CNeuronConnect

// int32 state = 1;
inline void CNeuronConnect::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNeuronConnect::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNeuronConnect::state() const {
  // @@protoc_insertion_point(field_get:userPosition.CNeuronConnect.state)
  return _internal_state();
}
inline void CNeuronConnect::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void CNeuronConnect::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:userPosition.CNeuronConnect.state)
}

// -------------------------------------------------------------------

// SNeuronConnect

// int32 uid = 1;
inline void SNeuronConnect::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNeuronConnect::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNeuronConnect::uid() const {
  // @@protoc_insertion_point(field_get:userPosition.SNeuronConnect.uid)
  return _internal_uid();
}
inline void SNeuronConnect::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SNeuronConnect::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userPosition.SNeuronConnect.uid)
}

// int32 state = 2;
inline void SNeuronConnect::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNeuronConnect::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNeuronConnect::state() const {
  // @@protoc_insertion_point(field_get:userPosition.SNeuronConnect.state)
  return _internal_state();
}
inline void SNeuronConnect::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SNeuronConnect::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:userPosition.SNeuronConnect.state)
}

// -------------------------------------------------------------------

// BBonePos

// int32 boneId = 1;
inline void BBonePos::clear_boneid() {
  boneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBonePos::_internal_boneid() const {
  return boneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBonePos::boneid() const {
  // @@protoc_insertion_point(field_get:userPosition.BBonePos.boneId)
  return _internal_boneid();
}
inline void BBonePos::_internal_set_boneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boneid_ = value;
}
inline void BBonePos::set_boneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boneid(value);
  // @@protoc_insertion_point(field_set:userPosition.BBonePos.boneId)
}

// .position.BPosition2 position = 2;
inline bool BBonePos::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BBonePos::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition2& BBonePos::_internal_position() const {
  const ::position::BPosition2* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition2*>(
      &::position::_BPosition2_default_instance_);
}
inline const ::position::BPosition2& BBonePos::position() const {
  // @@protoc_insertion_point(field_get:userPosition.BBonePos.position)
  return _internal_position();
}
inline ::position::BPosition2* BBonePos::release_position() {
  // @@protoc_insertion_point(field_release:userPosition.BBonePos.position)
  
  ::position::BPosition2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition2* BBonePos::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition2>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition2* BBonePos::mutable_position() {
  // @@protoc_insertion_point(field_mutable:userPosition.BBonePos.position)
  return _internal_mutable_position();
}
inline void BBonePos::set_allocated_position(::position::BPosition2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:userPosition.BBonePos.position)
}

// -------------------------------------------------------------------

// BFacePos

// int32 faceId = 1;
inline void BFacePos::clear_faceid() {
  faceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BFacePos::_internal_faceid() const {
  return faceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BFacePos::faceid() const {
  // @@protoc_insertion_point(field_get:userPosition.BFacePos.faceId)
  return _internal_faceid();
}
inline void BFacePos::_internal_set_faceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  faceid_ = value;
}
inline void BFacePos::set_faceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_faceid(value);
  // @@protoc_insertion_point(field_set:userPosition.BFacePos.faceId)
}

// int32 faceValue = 2;
inline void BFacePos::clear_facevalue() {
  facevalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BFacePos::_internal_facevalue() const {
  return facevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BFacePos::facevalue() const {
  // @@protoc_insertion_point(field_get:userPosition.BFacePos.faceValue)
  return _internal_facevalue();
}
inline void BFacePos::_internal_set_facevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  facevalue_ = value;
}
inline void BFacePos::set_facevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_facevalue(value);
  // @@protoc_insertion_point(field_set:userPosition.BFacePos.faceValue)
}

// -------------------------------------------------------------------

// CNeuronPosition

// int32 uid = 1;
inline void CNeuronPosition::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNeuronPosition::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNeuronPosition::uid() const {
  // @@protoc_insertion_point(field_get:userPosition.CNeuronPosition.uid)
  return _internal_uid();
}
inline void CNeuronPosition::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CNeuronPosition::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userPosition.CNeuronPosition.uid)
}

// repeated .userPosition.BBonePos bonePos = 2;
inline int CNeuronPosition::_internal_bonepos_size() const {
  return bonepos_.size();
}
inline int CNeuronPosition::bonepos_size() const {
  return _internal_bonepos_size();
}
inline void CNeuronPosition::clear_bonepos() {
  bonepos_.Clear();
}
inline ::userPosition::BBonePos* CNeuronPosition::mutable_bonepos(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.CNeuronPosition.bonePos)
  return bonepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos >*
CNeuronPosition::mutable_bonepos() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.CNeuronPosition.bonePos)
  return &bonepos_;
}
inline const ::userPosition::BBonePos& CNeuronPosition::_internal_bonepos(int index) const {
  return bonepos_.Get(index);
}
inline const ::userPosition::BBonePos& CNeuronPosition::bonepos(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.CNeuronPosition.bonePos)
  return _internal_bonepos(index);
}
inline ::userPosition::BBonePos* CNeuronPosition::_internal_add_bonepos() {
  return bonepos_.Add();
}
inline ::userPosition::BBonePos* CNeuronPosition::add_bonepos() {
  // @@protoc_insertion_point(field_add:userPosition.CNeuronPosition.bonePos)
  return _internal_add_bonepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos >&
CNeuronPosition::bonepos() const {
  // @@protoc_insertion_point(field_list:userPosition.CNeuronPosition.bonePos)
  return bonepos_;
}

// repeated .userPosition.BFacePos facePos = 3;
inline int CNeuronPosition::_internal_facepos_size() const {
  return facepos_.size();
}
inline int CNeuronPosition::facepos_size() const {
  return _internal_facepos_size();
}
inline void CNeuronPosition::clear_facepos() {
  facepos_.Clear();
}
inline ::userPosition::BFacePos* CNeuronPosition::mutable_facepos(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.CNeuronPosition.facePos)
  return facepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >*
CNeuronPosition::mutable_facepos() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.CNeuronPosition.facePos)
  return &facepos_;
}
inline const ::userPosition::BFacePos& CNeuronPosition::_internal_facepos(int index) const {
  return facepos_.Get(index);
}
inline const ::userPosition::BFacePos& CNeuronPosition::facepos(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.CNeuronPosition.facePos)
  return _internal_facepos(index);
}
inline ::userPosition::BFacePos* CNeuronPosition::_internal_add_facepos() {
  return facepos_.Add();
}
inline ::userPosition::BFacePos* CNeuronPosition::add_facepos() {
  // @@protoc_insertion_point(field_add:userPosition.CNeuronPosition.facePos)
  return _internal_add_facepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >&
CNeuronPosition::facepos() const {
  // @@protoc_insertion_point(field_list:userPosition.CNeuronPosition.facePos)
  return facepos_;
}

// -------------------------------------------------------------------

// NeuronPosition

// int32 uid = 1;
inline void NeuronPosition::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NeuronPosition::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NeuronPosition::uid() const {
  // @@protoc_insertion_point(field_get:userPosition.NeuronPosition.uid)
  return _internal_uid();
}
inline void NeuronPosition::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void NeuronPosition::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userPosition.NeuronPosition.uid)
}

// repeated .userPosition.BBonePos bonePos = 2;
inline int NeuronPosition::_internal_bonepos_size() const {
  return bonepos_.size();
}
inline int NeuronPosition::bonepos_size() const {
  return _internal_bonepos_size();
}
inline void NeuronPosition::clear_bonepos() {
  bonepos_.Clear();
}
inline ::userPosition::BBonePos* NeuronPosition::mutable_bonepos(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.NeuronPosition.bonePos)
  return bonepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos >*
NeuronPosition::mutable_bonepos() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.NeuronPosition.bonePos)
  return &bonepos_;
}
inline const ::userPosition::BBonePos& NeuronPosition::_internal_bonepos(int index) const {
  return bonepos_.Get(index);
}
inline const ::userPosition::BBonePos& NeuronPosition::bonepos(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.NeuronPosition.bonePos)
  return _internal_bonepos(index);
}
inline ::userPosition::BBonePos* NeuronPosition::_internal_add_bonepos() {
  return bonepos_.Add();
}
inline ::userPosition::BBonePos* NeuronPosition::add_bonepos() {
  // @@protoc_insertion_point(field_add:userPosition.NeuronPosition.bonePos)
  return _internal_add_bonepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BBonePos >&
NeuronPosition::bonepos() const {
  // @@protoc_insertion_point(field_list:userPosition.NeuronPosition.bonePos)
  return bonepos_;
}

// repeated .userPosition.BFacePos facePos = 3;
inline int NeuronPosition::_internal_facepos_size() const {
  return facepos_.size();
}
inline int NeuronPosition::facepos_size() const {
  return _internal_facepos_size();
}
inline void NeuronPosition::clear_facepos() {
  facepos_.Clear();
}
inline ::userPosition::BFacePos* NeuronPosition::mutable_facepos(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.NeuronPosition.facePos)
  return facepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >*
NeuronPosition::mutable_facepos() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.NeuronPosition.facePos)
  return &facepos_;
}
inline const ::userPosition::BFacePos& NeuronPosition::_internal_facepos(int index) const {
  return facepos_.Get(index);
}
inline const ::userPosition::BFacePos& NeuronPosition::facepos(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.NeuronPosition.facePos)
  return _internal_facepos(index);
}
inline ::userPosition::BFacePos* NeuronPosition::_internal_add_facepos() {
  return facepos_.Add();
}
inline ::userPosition::BFacePos* NeuronPosition::add_facepos() {
  // @@protoc_insertion_point(field_add:userPosition.NeuronPosition.facePos)
  return _internal_add_facepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >&
NeuronPosition::facepos() const {
  // @@protoc_insertion_point(field_list:userPosition.NeuronPosition.facePos)
  return facepos_;
}

// -------------------------------------------------------------------

// SNeuronPosition

// repeated .userPosition.NeuronPosition neuronPosList = 1;
inline int SNeuronPosition::_internal_neuronposlist_size() const {
  return neuronposlist_.size();
}
inline int SNeuronPosition::neuronposlist_size() const {
  return _internal_neuronposlist_size();
}
inline void SNeuronPosition::clear_neuronposlist() {
  neuronposlist_.Clear();
}
inline ::userPosition::NeuronPosition* SNeuronPosition::mutable_neuronposlist(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.SNeuronPosition.neuronPosList)
  return neuronposlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::NeuronPosition >*
SNeuronPosition::mutable_neuronposlist() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.SNeuronPosition.neuronPosList)
  return &neuronposlist_;
}
inline const ::userPosition::NeuronPosition& SNeuronPosition::_internal_neuronposlist(int index) const {
  return neuronposlist_.Get(index);
}
inline const ::userPosition::NeuronPosition& SNeuronPosition::neuronposlist(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.SNeuronPosition.neuronPosList)
  return _internal_neuronposlist(index);
}
inline ::userPosition::NeuronPosition* SNeuronPosition::_internal_add_neuronposlist() {
  return neuronposlist_.Add();
}
inline ::userPosition::NeuronPosition* SNeuronPosition::add_neuronposlist() {
  // @@protoc_insertion_point(field_add:userPosition.SNeuronPosition.neuronPosList)
  return _internal_add_neuronposlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::NeuronPosition >&
SNeuronPosition::neuronposlist() const {
  // @@protoc_insertion_point(field_list:userPosition.SNeuronPosition.neuronPosList)
  return neuronposlist_;
}

// -------------------------------------------------------------------

// BVrBonePos

// int32 boneId = 1;
inline void BVrBonePos::clear_boneid() {
  boneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVrBonePos::_internal_boneid() const {
  return boneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVrBonePos::boneid() const {
  // @@protoc_insertion_point(field_get:userPosition.BVrBonePos.boneId)
  return _internal_boneid();
}
inline void BVrBonePos::_internal_set_boneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boneid_ = value;
}
inline void BVrBonePos::set_boneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boneid(value);
  // @@protoc_insertion_point(field_set:userPosition.BVrBonePos.boneId)
}

// .position.BPosition position = 2;
inline bool BVrBonePos::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BVrBonePos::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition& BVrBonePos::_internal_position() const {
  const ::position::BPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition*>(
      &::position::_BPosition_default_instance_);
}
inline const ::position::BPosition& BVrBonePos::position() const {
  // @@protoc_insertion_point(field_get:userPosition.BVrBonePos.position)
  return _internal_position();
}
inline ::position::BPosition* BVrBonePos::release_position() {
  // @@protoc_insertion_point(field_release:userPosition.BVrBonePos.position)
  
  ::position::BPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition* BVrBonePos::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition* BVrBonePos::mutable_position() {
  // @@protoc_insertion_point(field_mutable:userPosition.BVrBonePos.position)
  return _internal_mutable_position();
}
inline void BVrBonePos::set_allocated_position(::position::BPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:userPosition.BVrBonePos.position)
}

// -------------------------------------------------------------------

// CVrPosition

// int32 uid = 1;
inline void CVrPosition::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVrPosition::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVrPosition::uid() const {
  // @@protoc_insertion_point(field_get:userPosition.CVrPosition.uid)
  return _internal_uid();
}
inline void CVrPosition::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CVrPosition::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userPosition.CVrPosition.uid)
}

// repeated .userPosition.BVrBonePos bonePos = 2;
inline int CVrPosition::_internal_bonepos_size() const {
  return bonepos_.size();
}
inline int CVrPosition::bonepos_size() const {
  return _internal_bonepos_size();
}
inline void CVrPosition::clear_bonepos() {
  bonepos_.Clear();
}
inline ::userPosition::BVrBonePos* CVrPosition::mutable_bonepos(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.CVrPosition.bonePos)
  return bonepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos >*
CVrPosition::mutable_bonepos() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.CVrPosition.bonePos)
  return &bonepos_;
}
inline const ::userPosition::BVrBonePos& CVrPosition::_internal_bonepos(int index) const {
  return bonepos_.Get(index);
}
inline const ::userPosition::BVrBonePos& CVrPosition::bonepos(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.CVrPosition.bonePos)
  return _internal_bonepos(index);
}
inline ::userPosition::BVrBonePos* CVrPosition::_internal_add_bonepos() {
  return bonepos_.Add();
}
inline ::userPosition::BVrBonePos* CVrPosition::add_bonepos() {
  // @@protoc_insertion_point(field_add:userPosition.CVrPosition.bonePos)
  return _internal_add_bonepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos >&
CVrPosition::bonepos() const {
  // @@protoc_insertion_point(field_list:userPosition.CVrPosition.bonePos)
  return bonepos_;
}

// repeated .userPosition.BFacePos facePos = 3;
inline int CVrPosition::_internal_facepos_size() const {
  return facepos_.size();
}
inline int CVrPosition::facepos_size() const {
  return _internal_facepos_size();
}
inline void CVrPosition::clear_facepos() {
  facepos_.Clear();
}
inline ::userPosition::BFacePos* CVrPosition::mutable_facepos(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.CVrPosition.facePos)
  return facepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >*
CVrPosition::mutable_facepos() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.CVrPosition.facePos)
  return &facepos_;
}
inline const ::userPosition::BFacePos& CVrPosition::_internal_facepos(int index) const {
  return facepos_.Get(index);
}
inline const ::userPosition::BFacePos& CVrPosition::facepos(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.CVrPosition.facePos)
  return _internal_facepos(index);
}
inline ::userPosition::BFacePos* CVrPosition::_internal_add_facepos() {
  return facepos_.Add();
}
inline ::userPosition::BFacePos* CVrPosition::add_facepos() {
  // @@protoc_insertion_point(field_add:userPosition.CVrPosition.facePos)
  return _internal_add_facepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >&
CVrPosition::facepos() const {
  // @@protoc_insertion_point(field_list:userPosition.CVrPosition.facePos)
  return facepos_;
}

// -------------------------------------------------------------------

// VrPosition

// int32 uid = 1;
inline void VrPosition::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VrPosition::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VrPosition::uid() const {
  // @@protoc_insertion_point(field_get:userPosition.VrPosition.uid)
  return _internal_uid();
}
inline void VrPosition::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void VrPosition::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userPosition.VrPosition.uid)
}

// repeated .userPosition.BVrBonePos bonePos = 2;
inline int VrPosition::_internal_bonepos_size() const {
  return bonepos_.size();
}
inline int VrPosition::bonepos_size() const {
  return _internal_bonepos_size();
}
inline void VrPosition::clear_bonepos() {
  bonepos_.Clear();
}
inline ::userPosition::BVrBonePos* VrPosition::mutable_bonepos(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.VrPosition.bonePos)
  return bonepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos >*
VrPosition::mutable_bonepos() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.VrPosition.bonePos)
  return &bonepos_;
}
inline const ::userPosition::BVrBonePos& VrPosition::_internal_bonepos(int index) const {
  return bonepos_.Get(index);
}
inline const ::userPosition::BVrBonePos& VrPosition::bonepos(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.VrPosition.bonePos)
  return _internal_bonepos(index);
}
inline ::userPosition::BVrBonePos* VrPosition::_internal_add_bonepos() {
  return bonepos_.Add();
}
inline ::userPosition::BVrBonePos* VrPosition::add_bonepos() {
  // @@protoc_insertion_point(field_add:userPosition.VrPosition.bonePos)
  return _internal_add_bonepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BVrBonePos >&
VrPosition::bonepos() const {
  // @@protoc_insertion_point(field_list:userPosition.VrPosition.bonePos)
  return bonepos_;
}

// repeated .userPosition.BFacePos facePos = 3;
inline int VrPosition::_internal_facepos_size() const {
  return facepos_.size();
}
inline int VrPosition::facepos_size() const {
  return _internal_facepos_size();
}
inline void VrPosition::clear_facepos() {
  facepos_.Clear();
}
inline ::userPosition::BFacePos* VrPosition::mutable_facepos(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.VrPosition.facePos)
  return facepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >*
VrPosition::mutable_facepos() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.VrPosition.facePos)
  return &facepos_;
}
inline const ::userPosition::BFacePos& VrPosition::_internal_facepos(int index) const {
  return facepos_.Get(index);
}
inline const ::userPosition::BFacePos& VrPosition::facepos(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.VrPosition.facePos)
  return _internal_facepos(index);
}
inline ::userPosition::BFacePos* VrPosition::_internal_add_facepos() {
  return facepos_.Add();
}
inline ::userPosition::BFacePos* VrPosition::add_facepos() {
  // @@protoc_insertion_point(field_add:userPosition.VrPosition.facePos)
  return _internal_add_facepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::BFacePos >&
VrPosition::facepos() const {
  // @@protoc_insertion_point(field_list:userPosition.VrPosition.facePos)
  return facepos_;
}

// -------------------------------------------------------------------

// SVrPosition

// repeated .userPosition.VrPosition vrPostList = 1;
inline int SVrPosition::_internal_vrpostlist_size() const {
  return vrpostlist_.size();
}
inline int SVrPosition::vrpostlist_size() const {
  return _internal_vrpostlist_size();
}
inline void SVrPosition::clear_vrpostlist() {
  vrpostlist_.Clear();
}
inline ::userPosition::VrPosition* SVrPosition::mutable_vrpostlist(int index) {
  // @@protoc_insertion_point(field_mutable:userPosition.SVrPosition.vrPostList)
  return vrpostlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::VrPosition >*
SVrPosition::mutable_vrpostlist() {
  // @@protoc_insertion_point(field_mutable_list:userPosition.SVrPosition.vrPostList)
  return &vrpostlist_;
}
inline const ::userPosition::VrPosition& SVrPosition::_internal_vrpostlist(int index) const {
  return vrpostlist_.Get(index);
}
inline const ::userPosition::VrPosition& SVrPosition::vrpostlist(int index) const {
  // @@protoc_insertion_point(field_get:userPosition.SVrPosition.vrPostList)
  return _internal_vrpostlist(index);
}
inline ::userPosition::VrPosition* SVrPosition::_internal_add_vrpostlist() {
  return vrpostlist_.Add();
}
inline ::userPosition::VrPosition* SVrPosition::add_vrpostlist() {
  // @@protoc_insertion_point(field_add:userPosition.SVrPosition.vrPostList)
  return _internal_add_vrpostlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userPosition::VrPosition >&
SVrPosition::vrpostlist() const {
  // @@protoc_insertion_point(field_list:userPosition.SVrPosition.vrPostList)
  return vrpostlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userPosition

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userPosition_2eproto
