// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: troveGame.proto

#include "troveGame.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace space {
class CGameFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGameFinish> _instance;
} _CGameFinish_default_instance_;
class SGameFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameFinish> _instance;
} _SGameFinish_default_instance_;
class CGameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGameInfo> _instance;
} _CGameInfo_default_instance_;
class SGameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameInfo> _instance;
} _SGameInfo_default_instance_;
}  // namespace space
static void InitDefaultsscc_info_CGameFinish_troveGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_CGameFinish_default_instance_;
    new (ptr) ::space::CGameFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::CGameFinish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGameFinish_troveGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGameFinish_troveGame_2eproto}, {}};

static void InitDefaultsscc_info_CGameInfo_troveGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_CGameInfo_default_instance_;
    new (ptr) ::space::CGameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::CGameInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGameInfo_troveGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGameInfo_troveGame_2eproto}, {}};

static void InitDefaultsscc_info_SGameFinish_troveGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SGameFinish_default_instance_;
    new (ptr) ::space::SGameFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SGameFinish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGameFinish_troveGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGameFinish_troveGame_2eproto}, {}};

static void InitDefaultsscc_info_SGameInfo_troveGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SGameInfo_default_instance_;
    new (ptr) ::space::SGameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SGameInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGameInfo_troveGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGameInfo_troveGame_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_troveGame_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_troveGame_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_troveGame_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_troveGame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::CGameFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::CGameFinish, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SGameFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SGameFinish, goodsid_),
  PROTOBUF_FIELD_OFFSET(::space::SGameFinish, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::CGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SGameInfo, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::space::CGameFinish)},
  { 6, -1, sizeof(::space::SGameFinish)},
  { 13, -1, sizeof(::space::CGameInfo)},
  { 18, -1, sizeof(::space::SGameInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_CGameFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SGameFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_CGameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SGameInfo_default_instance_),
};

const char descriptor_table_protodef_troveGame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017troveGame.proto\022\005space\032\016position.proto"
  "\"\034\n\013CGameFinish\022\r\n\005score\030\001 \001(\005\"+\n\013SGameF"
  "inish\022\017\n\007goodsId\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\013\n\tC"
  "GameInfo\"\033\n\tSGameInfo\022\016\n\006status\030\001 \001(\005B%\n"
  "\030com.dayou.space.protobufB\tTroveGameb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_troveGame_2eproto_deps[1] = {
  &::descriptor_table_position_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_troveGame_2eproto_sccs[4] = {
  &scc_info_CGameFinish_troveGame_2eproto.base,
  &scc_info_CGameInfo_troveGame_2eproto.base,
  &scc_info_SGameFinish_troveGame_2eproto.base,
  &scc_info_SGameInfo_troveGame_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_troveGame_2eproto_once;
static bool descriptor_table_troveGame_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_troveGame_2eproto = {
  &descriptor_table_troveGame_2eproto_initialized, descriptor_table_protodef_troveGame_2eproto, "troveGame.proto", 204,
  &descriptor_table_troveGame_2eproto_once, descriptor_table_troveGame_2eproto_sccs, descriptor_table_troveGame_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_troveGame_2eproto::offsets,
  file_level_metadata_troveGame_2eproto, 4, file_level_enum_descriptors_troveGame_2eproto, file_level_service_descriptors_troveGame_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_troveGame_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_troveGame_2eproto), true);
namespace space {

// ===================================================================

void CGameFinish::InitAsDefaultInstance() {
}
class CGameFinish::_Internal {
 public:
};

CGameFinish::CGameFinish()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.CGameFinish)
}
CGameFinish::CGameFinish(const CGameFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:space.CGameFinish)
}

void CGameFinish::SharedCtor() {
  score_ = 0;
}

CGameFinish::~CGameFinish() {
  // @@protoc_insertion_point(destructor:space.CGameFinish)
  SharedDtor();
}

void CGameFinish::SharedDtor() {
}

void CGameFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameFinish& CGameFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGameFinish_troveGame_2eproto.base);
  return *internal_default_instance();
}


void CGameFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:space.CGameFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_ = 0;
  _internal_metadata_.Clear();
}

const char* CGameFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.CGameFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.CGameFinish)
  return target;
}

size_t CGameFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.CGameFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.CGameFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.CGameFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.CGameFinish)
    MergeFrom(*source);
  }
}

void CGameFinish::MergeFrom(const CGameFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.CGameFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void CGameFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.CGameFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameFinish::CopyFrom(const CGameFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.CGameFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameFinish::IsInitialized() const {
  return true;
}

void CGameFinish::InternalSwap(CGameFinish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameFinish::InitAsDefaultInstance() {
}
class SGameFinish::_Internal {
 public:
};

SGameFinish::SGameFinish()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SGameFinish)
}
SGameFinish::SGameFinish(const SGameFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:space.SGameFinish)
}

void SGameFinish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGameFinish_troveGame_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodsid_ = 0;
}

SGameFinish::~SGameFinish() {
  // @@protoc_insertion_point(destructor:space.SGameFinish)
  SharedDtor();
}

void SGameFinish::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGameFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameFinish& SGameFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameFinish_troveGame_2eproto.base);
  return *internal_default_instance();
}


void SGameFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SGameFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* SGameFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "space.SGameFinish.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SGameFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "space.SGameFinish.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SGameFinish)
  return target;
}

size_t SGameFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SGameFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SGameFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SGameFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SGameFinish)
    MergeFrom(*source);
  }
}

void SGameFinish::MergeFrom(const SGameFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SGameFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void SGameFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SGameFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameFinish::CopyFrom(const SGameFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SGameFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameFinish::IsInitialized() const {
  return true;
}

void SGameFinish::InternalSwap(SGameFinish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGameInfo::InitAsDefaultInstance() {
}
class CGameInfo::_Internal {
 public:
};

CGameInfo::CGameInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.CGameInfo)
}
CGameInfo::CGameInfo(const CGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:space.CGameInfo)
}

void CGameInfo::SharedCtor() {
}

CGameInfo::~CGameInfo() {
  // @@protoc_insertion_point(destructor:space.CGameInfo)
  SharedDtor();
}

void CGameInfo::SharedDtor() {
}

void CGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameInfo& CGameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGameInfo_troveGame_2eproto.base);
  return *internal_default_instance();
}


void CGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:space.CGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CGameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.CGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.CGameInfo)
  return target;
}

size_t CGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.CGameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.CGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.CGameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.CGameInfo)
    MergeFrom(*source);
  }
}

void CGameInfo::MergeFrom(const CGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.CGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.CGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo::CopyFrom(const CGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.CGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo::IsInitialized() const {
  return true;
}

void CGameInfo::InternalSwap(CGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameInfo::InitAsDefaultInstance() {
}
class SGameInfo::_Internal {
 public:
};

SGameInfo::SGameInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SGameInfo)
}
SGameInfo::SGameInfo(const SGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:space.SGameInfo)
}

void SGameInfo::SharedCtor() {
  status_ = 0;
}

SGameInfo::~SGameInfo() {
  // @@protoc_insertion_point(destructor:space.SGameInfo)
  SharedDtor();
}

void SGameInfo::SharedDtor() {
}

void SGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameInfo& SGameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameInfo_troveGame_2eproto.base);
  return *internal_default_instance();
}


void SGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SGameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SGameInfo)
  return target;
}

size_t SGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SGameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SGameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SGameInfo)
    MergeFrom(*source);
  }
}

void SGameInfo::MergeFrom(const SGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SGameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameInfo::CopyFrom(const SGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameInfo::IsInitialized() const {
  return true;
}

void SGameInfo::InternalSwap(SGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace space
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::space::CGameFinish* Arena::CreateMaybeMessage< ::space::CGameFinish >(Arena* arena) {
  return Arena::CreateInternal< ::space::CGameFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SGameFinish* Arena::CreateMaybeMessage< ::space::SGameFinish >(Arena* arena) {
  return Arena::CreateInternal< ::space::SGameFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::space::CGameInfo* Arena::CreateMaybeMessage< ::space::CGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::space::CGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SGameInfo* Arena::CreateMaybeMessage< ::space::SGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::space::SGameInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
