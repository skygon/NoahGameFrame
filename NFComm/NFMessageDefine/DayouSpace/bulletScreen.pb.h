// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bulletScreen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bulletScreen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bulletScreen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bulletScreen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bulletScreen_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bulletScreen_2eproto;
namespace bulletScreen {
class BBulletScreenUser;
class BBulletScreenUserDefaultTypeInternal;
extern BBulletScreenUserDefaultTypeInternal _BBulletScreenUser_default_instance_;
class CBulletScreenUserList;
class CBulletScreenUserListDefaultTypeInternal;
extern CBulletScreenUserListDefaultTypeInternal _CBulletScreenUserList_default_instance_;
class SBulletScreenUserCreate;
class SBulletScreenUserCreateDefaultTypeInternal;
extern SBulletScreenUserCreateDefaultTypeInternal _SBulletScreenUserCreate_default_instance_;
class SBulletScreenUserDelete;
class SBulletScreenUserDeleteDefaultTypeInternal;
extern SBulletScreenUserDeleteDefaultTypeInternal _SBulletScreenUserDelete_default_instance_;
class SBulletScreenUserList;
class SBulletScreenUserListDefaultTypeInternal;
extern SBulletScreenUserListDefaultTypeInternal _SBulletScreenUserList_default_instance_;
class SBulletScreenUserTalk;
class SBulletScreenUserTalkDefaultTypeInternal;
extern SBulletScreenUserTalkDefaultTypeInternal _SBulletScreenUserTalk_default_instance_;
}  // namespace bulletScreen
PROTOBUF_NAMESPACE_OPEN
template<> ::bulletScreen::BBulletScreenUser* Arena::CreateMaybeMessage<::bulletScreen::BBulletScreenUser>(Arena*);
template<> ::bulletScreen::CBulletScreenUserList* Arena::CreateMaybeMessage<::bulletScreen::CBulletScreenUserList>(Arena*);
template<> ::bulletScreen::SBulletScreenUserCreate* Arena::CreateMaybeMessage<::bulletScreen::SBulletScreenUserCreate>(Arena*);
template<> ::bulletScreen::SBulletScreenUserDelete* Arena::CreateMaybeMessage<::bulletScreen::SBulletScreenUserDelete>(Arena*);
template<> ::bulletScreen::SBulletScreenUserList* Arena::CreateMaybeMessage<::bulletScreen::SBulletScreenUserList>(Arena*);
template<> ::bulletScreen::SBulletScreenUserTalk* Arena::CreateMaybeMessage<::bulletScreen::SBulletScreenUserTalk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bulletScreen {

// ===================================================================

class CBulletScreenUserList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bulletScreen.CBulletScreenUserList) */ {
 public:
  CBulletScreenUserList();
  virtual ~CBulletScreenUserList();

  CBulletScreenUserList(const CBulletScreenUserList& from);
  CBulletScreenUserList(CBulletScreenUserList&& from) noexcept
    : CBulletScreenUserList() {
    *this = ::std::move(from);
  }

  inline CBulletScreenUserList& operator=(const CBulletScreenUserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBulletScreenUserList& operator=(CBulletScreenUserList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBulletScreenUserList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBulletScreenUserList* internal_default_instance() {
    return reinterpret_cast<const CBulletScreenUserList*>(
               &_CBulletScreenUserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CBulletScreenUserList& a, CBulletScreenUserList& b) {
    a.Swap(&b);
  }
  inline void Swap(CBulletScreenUserList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBulletScreenUserList* New() const final {
    return CreateMaybeMessage<CBulletScreenUserList>(nullptr);
  }

  CBulletScreenUserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBulletScreenUserList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBulletScreenUserList& from);
  void MergeFrom(const CBulletScreenUserList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBulletScreenUserList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bulletScreen.CBulletScreenUserList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bulletScreen_2eproto);
    return ::descriptor_table_bulletScreen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bulletScreen.CBulletScreenUserList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bulletScreen_2eproto;
};
// -------------------------------------------------------------------

class BBulletScreenUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bulletScreen.BBulletScreenUser) */ {
 public:
  BBulletScreenUser();
  virtual ~BBulletScreenUser();

  BBulletScreenUser(const BBulletScreenUser& from);
  BBulletScreenUser(BBulletScreenUser&& from) noexcept
    : BBulletScreenUser() {
    *this = ::std::move(from);
  }

  inline BBulletScreenUser& operator=(const BBulletScreenUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBulletScreenUser& operator=(BBulletScreenUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BBulletScreenUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BBulletScreenUser* internal_default_instance() {
    return reinterpret_cast<const BBulletScreenUser*>(
               &_BBulletScreenUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BBulletScreenUser& a, BBulletScreenUser& b) {
    a.Swap(&b);
  }
  inline void Swap(BBulletScreenUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBulletScreenUser* New() const final {
    return CreateMaybeMessage<BBulletScreenUser>(nullptr);
  }

  BBulletScreenUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBulletScreenUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBulletScreenUser& from);
  void MergeFrom(const BBulletScreenUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBulletScreenUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bulletScreen.BBulletScreenUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bulletScreen_2eproto);
    return ::descriptor_table_bulletScreen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kTempIdFieldNumber = 1,
  };
  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // int32 temp_id = 1;
  void clear_temp_id();
  ::PROTOBUF_NAMESPACE_ID::int32 temp_id() const;
  void set_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temp_id() const;
  void _internal_set_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bulletScreen.BBulletScreenUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::int32 temp_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bulletScreen_2eproto;
};
// -------------------------------------------------------------------

class SBulletScreenUserList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bulletScreen.SBulletScreenUserList) */ {
 public:
  SBulletScreenUserList();
  virtual ~SBulletScreenUserList();

  SBulletScreenUserList(const SBulletScreenUserList& from);
  SBulletScreenUserList(SBulletScreenUserList&& from) noexcept
    : SBulletScreenUserList() {
    *this = ::std::move(from);
  }

  inline SBulletScreenUserList& operator=(const SBulletScreenUserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBulletScreenUserList& operator=(SBulletScreenUserList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBulletScreenUserList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBulletScreenUserList* internal_default_instance() {
    return reinterpret_cast<const SBulletScreenUserList*>(
               &_SBulletScreenUserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SBulletScreenUserList& a, SBulletScreenUserList& b) {
    a.Swap(&b);
  }
  inline void Swap(SBulletScreenUserList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBulletScreenUserList* New() const final {
    return CreateMaybeMessage<SBulletScreenUserList>(nullptr);
  }

  SBulletScreenUserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBulletScreenUserList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBulletScreenUserList& from);
  void MergeFrom(const SBulletScreenUserList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBulletScreenUserList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bulletScreen.SBulletScreenUserList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bulletScreen_2eproto);
    return ::descriptor_table_bulletScreen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .bulletScreen.BBulletScreenUser users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::bulletScreen::BBulletScreenUser* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bulletScreen::BBulletScreenUser >*
      mutable_users();
  private:
  const ::bulletScreen::BBulletScreenUser& _internal_users(int index) const;
  ::bulletScreen::BBulletScreenUser* _internal_add_users();
  public:
  const ::bulletScreen::BBulletScreenUser& users(int index) const;
  ::bulletScreen::BBulletScreenUser* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bulletScreen::BBulletScreenUser >&
      users() const;

  // @@protoc_insertion_point(class_scope:bulletScreen.SBulletScreenUserList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bulletScreen::BBulletScreenUser > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bulletScreen_2eproto;
};
// -------------------------------------------------------------------

class SBulletScreenUserCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bulletScreen.SBulletScreenUserCreate) */ {
 public:
  SBulletScreenUserCreate();
  virtual ~SBulletScreenUserCreate();

  SBulletScreenUserCreate(const SBulletScreenUserCreate& from);
  SBulletScreenUserCreate(SBulletScreenUserCreate&& from) noexcept
    : SBulletScreenUserCreate() {
    *this = ::std::move(from);
  }

  inline SBulletScreenUserCreate& operator=(const SBulletScreenUserCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBulletScreenUserCreate& operator=(SBulletScreenUserCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBulletScreenUserCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBulletScreenUserCreate* internal_default_instance() {
    return reinterpret_cast<const SBulletScreenUserCreate*>(
               &_SBulletScreenUserCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SBulletScreenUserCreate& a, SBulletScreenUserCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(SBulletScreenUserCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBulletScreenUserCreate* New() const final {
    return CreateMaybeMessage<SBulletScreenUserCreate>(nullptr);
  }

  SBulletScreenUserCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBulletScreenUserCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBulletScreenUserCreate& from);
  void MergeFrom(const SBulletScreenUserCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBulletScreenUserCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bulletScreen.SBulletScreenUserCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bulletScreen_2eproto);
    return ::descriptor_table_bulletScreen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .bulletScreen.BBulletScreenUser user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::bulletScreen::BBulletScreenUser& user() const;
  ::bulletScreen::BBulletScreenUser* release_user();
  ::bulletScreen::BBulletScreenUser* mutable_user();
  void set_allocated_user(::bulletScreen::BBulletScreenUser* user);
  private:
  const ::bulletScreen::BBulletScreenUser& _internal_user() const;
  ::bulletScreen::BBulletScreenUser* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:bulletScreen.SBulletScreenUserCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::bulletScreen::BBulletScreenUser* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bulletScreen_2eproto;
};
// -------------------------------------------------------------------

class SBulletScreenUserDelete :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bulletScreen.SBulletScreenUserDelete) */ {
 public:
  SBulletScreenUserDelete();
  virtual ~SBulletScreenUserDelete();

  SBulletScreenUserDelete(const SBulletScreenUserDelete& from);
  SBulletScreenUserDelete(SBulletScreenUserDelete&& from) noexcept
    : SBulletScreenUserDelete() {
    *this = ::std::move(from);
  }

  inline SBulletScreenUserDelete& operator=(const SBulletScreenUserDelete& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBulletScreenUserDelete& operator=(SBulletScreenUserDelete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBulletScreenUserDelete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBulletScreenUserDelete* internal_default_instance() {
    return reinterpret_cast<const SBulletScreenUserDelete*>(
               &_SBulletScreenUserDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SBulletScreenUserDelete& a, SBulletScreenUserDelete& b) {
    a.Swap(&b);
  }
  inline void Swap(SBulletScreenUserDelete* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBulletScreenUserDelete* New() const final {
    return CreateMaybeMessage<SBulletScreenUserDelete>(nullptr);
  }

  SBulletScreenUserDelete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBulletScreenUserDelete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBulletScreenUserDelete& from);
  void MergeFrom(const SBulletScreenUserDelete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBulletScreenUserDelete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bulletScreen.SBulletScreenUserDelete";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bulletScreen_2eproto);
    return ::descriptor_table_bulletScreen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempIdFieldNumber = 1,
  };
  // repeated int32 temp_id = 1;
  int temp_id_size() const;
  private:
  int _internal_temp_id_size() const;
  public:
  void clear_temp_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temp_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_temp_id() const;
  void _internal_add_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_temp_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 temp_id(int index) const;
  void set_temp_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      temp_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_temp_id();

  // @@protoc_insertion_point(class_scope:bulletScreen.SBulletScreenUserDelete)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > temp_id_;
  mutable std::atomic<int> _temp_id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bulletScreen_2eproto;
};
// -------------------------------------------------------------------

class SBulletScreenUserTalk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bulletScreen.SBulletScreenUserTalk) */ {
 public:
  SBulletScreenUserTalk();
  virtual ~SBulletScreenUserTalk();

  SBulletScreenUserTalk(const SBulletScreenUserTalk& from);
  SBulletScreenUserTalk(SBulletScreenUserTalk&& from) noexcept
    : SBulletScreenUserTalk() {
    *this = ::std::move(from);
  }

  inline SBulletScreenUserTalk& operator=(const SBulletScreenUserTalk& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBulletScreenUserTalk& operator=(SBulletScreenUserTalk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBulletScreenUserTalk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBulletScreenUserTalk* internal_default_instance() {
    return reinterpret_cast<const SBulletScreenUserTalk*>(
               &_SBulletScreenUserTalk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SBulletScreenUserTalk& a, SBulletScreenUserTalk& b) {
    a.Swap(&b);
  }
  inline void Swap(SBulletScreenUserTalk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBulletScreenUserTalk* New() const final {
    return CreateMaybeMessage<SBulletScreenUserTalk>(nullptr);
  }

  SBulletScreenUserTalk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBulletScreenUserTalk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBulletScreenUserTalk& from);
  void MergeFrom(const SBulletScreenUserTalk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBulletScreenUserTalk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bulletScreen.SBulletScreenUserTalk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bulletScreen_2eproto);
    return ::descriptor_table_bulletScreen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTempIdFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 temp_id = 1;
  void clear_temp_id();
  ::PROTOBUF_NAMESPACE_ID::int32 temp_id() const;
  void set_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temp_id() const;
  void _internal_set_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bulletScreen.SBulletScreenUserTalk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 temp_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bulletScreen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBulletScreenUserList

// -------------------------------------------------------------------

// BBulletScreenUser

// int32 temp_id = 1;
inline void BBulletScreenUser::clear_temp_id() {
  temp_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBulletScreenUser::_internal_temp_id() const {
  return temp_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBulletScreenUser::temp_id() const {
  // @@protoc_insertion_point(field_get:bulletScreen.BBulletScreenUser.temp_id)
  return _internal_temp_id();
}
inline void BBulletScreenUser::_internal_set_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  temp_id_ = value;
}
inline void BBulletScreenUser::set_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temp_id(value);
  // @@protoc_insertion_point(field_set:bulletScreen.BBulletScreenUser.temp_id)
}

// string nick = 2;
inline void BBulletScreenUser::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BBulletScreenUser::nick() const {
  // @@protoc_insertion_point(field_get:bulletScreen.BBulletScreenUser.nick)
  return _internal_nick();
}
inline void BBulletScreenUser::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:bulletScreen.BBulletScreenUser.nick)
}
inline std::string* BBulletScreenUser::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:bulletScreen.BBulletScreenUser.nick)
  return _internal_mutable_nick();
}
inline const std::string& BBulletScreenUser::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void BBulletScreenUser::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BBulletScreenUser::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bulletScreen.BBulletScreenUser.nick)
}
inline void BBulletScreenUser::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bulletScreen.BBulletScreenUser.nick)
}
inline void BBulletScreenUser::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bulletScreen.BBulletScreenUser.nick)
}
inline std::string* BBulletScreenUser::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BBulletScreenUser::release_nick() {
  // @@protoc_insertion_point(field_release:bulletScreen.BBulletScreenUser.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BBulletScreenUser::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:bulletScreen.BBulletScreenUser.nick)
}

// -------------------------------------------------------------------

// SBulletScreenUserList

// repeated .bulletScreen.BBulletScreenUser users = 1;
inline int SBulletScreenUserList::_internal_users_size() const {
  return users_.size();
}
inline int SBulletScreenUserList::users_size() const {
  return _internal_users_size();
}
inline void SBulletScreenUserList::clear_users() {
  users_.Clear();
}
inline ::bulletScreen::BBulletScreenUser* SBulletScreenUserList::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:bulletScreen.SBulletScreenUserList.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bulletScreen::BBulletScreenUser >*
SBulletScreenUserList::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:bulletScreen.SBulletScreenUserList.users)
  return &users_;
}
inline const ::bulletScreen::BBulletScreenUser& SBulletScreenUserList::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::bulletScreen::BBulletScreenUser& SBulletScreenUserList::users(int index) const {
  // @@protoc_insertion_point(field_get:bulletScreen.SBulletScreenUserList.users)
  return _internal_users(index);
}
inline ::bulletScreen::BBulletScreenUser* SBulletScreenUserList::_internal_add_users() {
  return users_.Add();
}
inline ::bulletScreen::BBulletScreenUser* SBulletScreenUserList::add_users() {
  // @@protoc_insertion_point(field_add:bulletScreen.SBulletScreenUserList.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bulletScreen::BBulletScreenUser >&
SBulletScreenUserList::users() const {
  // @@protoc_insertion_point(field_list:bulletScreen.SBulletScreenUserList.users)
  return users_;
}

// -------------------------------------------------------------------

// SBulletScreenUserCreate

// .bulletScreen.BBulletScreenUser user = 1;
inline bool SBulletScreenUserCreate::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool SBulletScreenUserCreate::has_user() const {
  return _internal_has_user();
}
inline void SBulletScreenUserCreate::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::bulletScreen::BBulletScreenUser& SBulletScreenUserCreate::_internal_user() const {
  const ::bulletScreen::BBulletScreenUser* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bulletScreen::BBulletScreenUser*>(
      &::bulletScreen::_BBulletScreenUser_default_instance_);
}
inline const ::bulletScreen::BBulletScreenUser& SBulletScreenUserCreate::user() const {
  // @@protoc_insertion_point(field_get:bulletScreen.SBulletScreenUserCreate.user)
  return _internal_user();
}
inline ::bulletScreen::BBulletScreenUser* SBulletScreenUserCreate::release_user() {
  // @@protoc_insertion_point(field_release:bulletScreen.SBulletScreenUserCreate.user)
  
  ::bulletScreen::BBulletScreenUser* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::bulletScreen::BBulletScreenUser* SBulletScreenUserCreate::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::bulletScreen::BBulletScreenUser>(GetArenaNoVirtual());
    user_ = p;
  }
  return user_;
}
inline ::bulletScreen::BBulletScreenUser* SBulletScreenUserCreate::mutable_user() {
  // @@protoc_insertion_point(field_mutable:bulletScreen.SBulletScreenUserCreate.user)
  return _internal_mutable_user();
}
inline void SBulletScreenUserCreate::set_allocated_user(::bulletScreen::BBulletScreenUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:bulletScreen.SBulletScreenUserCreate.user)
}

// -------------------------------------------------------------------

// SBulletScreenUserDelete

// repeated int32 temp_id = 1;
inline int SBulletScreenUserDelete::_internal_temp_id_size() const {
  return temp_id_.size();
}
inline int SBulletScreenUserDelete::temp_id_size() const {
  return _internal_temp_id_size();
}
inline void SBulletScreenUserDelete::clear_temp_id() {
  temp_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBulletScreenUserDelete::_internal_temp_id(int index) const {
  return temp_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBulletScreenUserDelete::temp_id(int index) const {
  // @@protoc_insertion_point(field_get:bulletScreen.SBulletScreenUserDelete.temp_id)
  return _internal_temp_id(index);
}
inline void SBulletScreenUserDelete::set_temp_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  temp_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:bulletScreen.SBulletScreenUserDelete.temp_id)
}
inline void SBulletScreenUserDelete::_internal_add_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  temp_id_.Add(value);
}
inline void SBulletScreenUserDelete::add_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_temp_id(value);
  // @@protoc_insertion_point(field_add:bulletScreen.SBulletScreenUserDelete.temp_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SBulletScreenUserDelete::_internal_temp_id() const {
  return temp_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SBulletScreenUserDelete::temp_id() const {
  // @@protoc_insertion_point(field_list:bulletScreen.SBulletScreenUserDelete.temp_id)
  return _internal_temp_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SBulletScreenUserDelete::_internal_mutable_temp_id() {
  return &temp_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SBulletScreenUserDelete::mutable_temp_id() {
  // @@protoc_insertion_point(field_mutable_list:bulletScreen.SBulletScreenUserDelete.temp_id)
  return _internal_mutable_temp_id();
}

// -------------------------------------------------------------------

// SBulletScreenUserTalk

// int32 temp_id = 1;
inline void SBulletScreenUserTalk::clear_temp_id() {
  temp_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBulletScreenUserTalk::_internal_temp_id() const {
  return temp_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBulletScreenUserTalk::temp_id() const {
  // @@protoc_insertion_point(field_get:bulletScreen.SBulletScreenUserTalk.temp_id)
  return _internal_temp_id();
}
inline void SBulletScreenUserTalk::_internal_set_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  temp_id_ = value;
}
inline void SBulletScreenUserTalk::set_temp_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temp_id(value);
  // @@protoc_insertion_point(field_set:bulletScreen.SBulletScreenUserTalk.temp_id)
}

// string message = 2;
inline void SBulletScreenUserTalk::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SBulletScreenUserTalk::message() const {
  // @@protoc_insertion_point(field_get:bulletScreen.SBulletScreenUserTalk.message)
  return _internal_message();
}
inline void SBulletScreenUserTalk::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:bulletScreen.SBulletScreenUserTalk.message)
}
inline std::string* SBulletScreenUserTalk::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bulletScreen.SBulletScreenUserTalk.message)
  return _internal_mutable_message();
}
inline const std::string& SBulletScreenUserTalk::_internal_message() const {
  return message_.GetNoArena();
}
inline void SBulletScreenUserTalk::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SBulletScreenUserTalk::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bulletScreen.SBulletScreenUserTalk.message)
}
inline void SBulletScreenUserTalk::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bulletScreen.SBulletScreenUserTalk.message)
}
inline void SBulletScreenUserTalk::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bulletScreen.SBulletScreenUserTalk.message)
}
inline std::string* SBulletScreenUserTalk::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SBulletScreenUserTalk::release_message() {
  // @@protoc_insertion_point(field_release:bulletScreen.SBulletScreenUserTalk.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SBulletScreenUserTalk::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:bulletScreen.SBulletScreenUserTalk.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bulletScreen

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bulletScreen_2eproto
