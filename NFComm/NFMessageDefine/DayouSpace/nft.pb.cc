// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nft.proto

#include "nft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nftMsg_nft_2eproto;
namespace nft {
class nftMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nftMsg> _instance;
} _nftMsg_default_instance_;
class SMyNftListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMyNftList> _instance;
} _SMyNftList_default_instance_;
class CHouseNftListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHouseNftList> _instance;
} _CHouseNftList_default_instance_;
class SHouseNftListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHouseNftList> _instance;
} _SHouseNftList_default_instance_;
}  // namespace nft
static void InitDefaultsscc_info_CHouseNftList_nft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nft::_CHouseNftList_default_instance_;
    new (ptr) ::nft::CHouseNftList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nft::CHouseNftList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHouseNftList_nft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHouseNftList_nft_2eproto}, {}};

static void InitDefaultsscc_info_SHouseNftList_nft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nft::_SHouseNftList_default_instance_;
    new (ptr) ::nft::SHouseNftList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nft::SHouseNftList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SHouseNftList_nft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SHouseNftList_nft_2eproto}, {
      &scc_info_nftMsg_nft_2eproto.base,}};

static void InitDefaultsscc_info_SMyNftList_nft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nft::_SMyNftList_default_instance_;
    new (ptr) ::nft::SMyNftList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nft::SMyNftList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMyNftList_nft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMyNftList_nft_2eproto}, {
      &scc_info_nftMsg_nft_2eproto.base,}};

static void InitDefaultsscc_info_nftMsg_nft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nft::_nftMsg_default_instance_;
    new (ptr) ::nft::nftMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nft::nftMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nftMsg_nft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_nftMsg_nft_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nft_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nft_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, id_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, nftid_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, extrathing_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, issuenum_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, uid_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, name_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, image_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, resource_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, number_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, createdat_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, coverandroid_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, locationsort_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, housenftrefid_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, houseid_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, housename_),
  PROTOBUF_FIELD_OFFSET(::nft::nftMsg, resourcefbx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nft::SMyNftList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nft::SMyNftList, mynftlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nft::CHouseNftList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nft::CHouseNftList, houseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nft::SHouseNftList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nft::SHouseNftList, housenftlist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nft::nftMsg)},
  { 22, -1, sizeof(::nft::SMyNftList)},
  { 28, -1, sizeof(::nft::CHouseNftList)},
  { 34, -1, sizeof(::nft::SHouseNftList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nft::_nftMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nft::_SMyNftList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nft::_CHouseNftList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nft::_SHouseNftList_default_instance_),
};

const char descriptor_table_protodef_nft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnft.proto\022\003nft\"\272\002\n\006nftMsg\022\n\n\002id\030\001 \001(\005\022"
  "\r\n\005nftId\030\002 \001(\005\022\022\n\nextraThing\030\003 \001(\005\022\020\n\010is"
  "sueNum\030\005 \001(\005\022\013\n\003uid\030\006 \001(\005\022\014\n\004name\030\007 \001(\t\022"
  "\r\n\005image\030\010 \001(\t\022\024\n\014resourceType\030\t \001(\005\022\020\n\010"
  "resource\030\n \001(\t\022\016\n\006number\030\013 \001(\t\022\021\n\tcreate"
  "dAt\030\014 \001(\t\022\024\n\014coverAndroid\030\r \001(\t\022\024\n\014locat"
  "ionSort\030\016 \001(\005\022\025\n\rhouseNftRefId\030\017 \001(\005\022\017\n\007"
  "houseId\030\020 \001(\005\022\021\n\thouseName\030\021 \001(\t\022\023\n\013reso"
  "urceFbx\030\022 \001(\t\",\n\nSMyNftList\022\036\n\tmyNftList"
  "\030\001 \003(\0132\013.nft.nftMsg\" \n\rCHouseNftList\022\017\n\007"
  "houseId\030\001 \001(\005\"2\n\rSHouseNftList\022!\n\014houseN"
  "ftList\030\001 \003(\0132\013.nft.nftMsgB\037\n\030com.dayou.s"
  "pace.protobufB\003Nftb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nft_2eproto_sccs[4] = {
  &scc_info_CHouseNftList_nft_2eproto.base,
  &scc_info_SHouseNftList_nft_2eproto.base,
  &scc_info_SMyNftList_nft_2eproto.base,
  &scc_info_nftMsg_nft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nft_2eproto_once;
static bool descriptor_table_nft_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nft_2eproto = {
  &descriptor_table_nft_2eproto_initialized, descriptor_table_protodef_nft_2eproto, "nft.proto", 506,
  &descriptor_table_nft_2eproto_once, descriptor_table_nft_2eproto_sccs, descriptor_table_nft_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_nft_2eproto::offsets,
  file_level_metadata_nft_2eproto, 4, file_level_enum_descriptors_nft_2eproto, file_level_service_descriptors_nft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nft_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nft_2eproto), true);
namespace nft {

// ===================================================================

void nftMsg::InitAsDefaultInstance() {
}
class nftMsg::_Internal {
 public:
};

nftMsg::nftMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nft.nftMsg)
}
nftMsg::nftMsg(const nftMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_number().empty()) {
    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdat().empty()) {
    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  coverandroid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_coverandroid().empty()) {
    coverandroid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.coverandroid_);
  }
  housename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_housename().empty()) {
    housename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.housename_);
  }
  resourcefbx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcefbx().empty()) {
    resourcefbx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcefbx_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&houseid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(houseid_));
  // @@protoc_insertion_point(copy_constructor:nft.nftMsg)
}

void nftMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_nftMsg_nft_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coverandroid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcefbx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&houseid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(houseid_));
}

nftMsg::~nftMsg() {
  // @@protoc_insertion_point(destructor:nft.nftMsg)
  SharedDtor();
}

void nftMsg::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coverandroid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcefbx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void nftMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const nftMsg& nftMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_nftMsg_nft_2eproto.base);
  return *internal_default_instance();
}


void nftMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:nft.nftMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coverandroid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcefbx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&houseid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(houseid_));
  _internal_metadata_.Clear();
}

const char* nftMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nftId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 extraThing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          extrathing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 issueNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          issuenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nft.nftMsg.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nft.nftMsg.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resourceType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          resourcetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nft.nftMsg.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string number = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nft.nftMsg.number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdAt = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_createdat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nft.nftMsg.createdAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coverAndroid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_coverandroid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nft.nftMsg.coverAndroid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 locationSort = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          locationsort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseNftRefId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          housenftrefid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string houseName = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_housename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nft.nftMsg.houseName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceFbx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_resourcefbx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nft.nftMsg.resourceFbx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* nftMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nft.nftMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 nftId = 2;
  if (this->nftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nftid(), target);
  }

  // int32 extraThing = 3;
  if (this->extrathing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_extrathing(), target);
  }

  // int32 issueNum = 5;
  if (this->issuenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_issuenum(), target);
  }

  // int32 uid = 6;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_uid(), target);
  }

  // string name = 7;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nft.nftMsg.name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name(), target);
  }

  // string image = 8;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nft.nftMsg.image");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_image(), target);
  }

  // int32 resourceType = 9;
  if (this->resourcetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_resourcetype(), target);
  }

  // string resource = 10;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nft.nftMsg.resource");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_resource(), target);
  }

  // string number = 11;
  if (this->number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nft.nftMsg.number");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_number(), target);
  }

  // string createdAt = 12;
  if (this->createdat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdat().data(), static_cast<int>(this->_internal_createdat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nft.nftMsg.createdAt");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_createdat(), target);
  }

  // string coverAndroid = 13;
  if (this->coverandroid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coverandroid().data(), static_cast<int>(this->_internal_coverandroid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nft.nftMsg.coverAndroid");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_coverandroid(), target);
  }

  // int32 locationSort = 14;
  if (this->locationsort() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_locationsort(), target);
  }

  // int32 houseNftRefId = 15;
  if (this->housenftrefid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_housenftrefid(), target);
  }

  // int32 houseId = 16;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_houseid(), target);
  }

  // string houseName = 17;
  if (this->housename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_housename().data(), static_cast<int>(this->_internal_housename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nft.nftMsg.houseName");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_housename(), target);
  }

  // string resourceFbx = 18;
  if (this->resourcefbx().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcefbx().data(), static_cast<int>(this->_internal_resourcefbx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nft.nftMsg.resourceFbx");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_resourcefbx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nft.nftMsg)
  return target;
}

size_t nftMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nft.nftMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 8;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string resource = 10;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string number = 11;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // string createdAt = 12;
  if (this->createdat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdat());
  }

  // string coverAndroid = 13;
  if (this->coverandroid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coverandroid());
  }

  // string houseName = 17;
  if (this->housename().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_housename());
  }

  // string resourceFbx = 18;
  if (this->resourcefbx().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcefbx());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 nftId = 2;
  if (this->nftid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nftid());
  }

  // int32 extraThing = 3;
  if (this->extrathing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extrathing());
  }

  // int32 issueNum = 5;
  if (this->issuenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_issuenum());
  }

  // int32 uid = 6;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 resourceType = 9;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resourcetype());
  }

  // int32 locationSort = 14;
  if (this->locationsort() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_locationsort());
  }

  // int32 houseNftRefId = 15;
  if (this->housenftrefid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_housenftrefid());
  }

  // int32 houseId = 16;
  if (this->houseid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nftMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nft.nftMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const nftMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<nftMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nft.nftMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nft.nftMsg)
    MergeFrom(*source);
  }
}

void nftMsg::MergeFrom(const nftMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nft.nftMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.resource().size() > 0) {

    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  if (from.number().size() > 0) {

    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  if (from.createdat().size() > 0) {

    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  if (from.coverandroid().size() > 0) {

    coverandroid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.coverandroid_);
  }
  if (from.housename().size() > 0) {

    housename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.housename_);
  }
  if (from.resourcefbx().size() > 0) {

    resourcefbx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcefbx_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.nftid() != 0) {
    _internal_set_nftid(from._internal_nftid());
  }
  if (from.extrathing() != 0) {
    _internal_set_extrathing(from._internal_extrathing());
  }
  if (from.issuenum() != 0) {
    _internal_set_issuenum(from._internal_issuenum());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.locationsort() != 0) {
    _internal_set_locationsort(from._internal_locationsort());
  }
  if (from.housenftrefid() != 0) {
    _internal_set_housenftrefid(from._internal_housenftrefid());
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void nftMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nft.nftMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nftMsg::CopyFrom(const nftMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nft.nftMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nftMsg::IsInitialized() const {
  return true;
}

void nftMsg::InternalSwap(nftMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  number_.Swap(&other->number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdat_.Swap(&other->createdat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  coverandroid_.Swap(&other->coverandroid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  housename_.Swap(&other->housename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcefbx_.Swap(&other->resourcefbx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(nftid_, other->nftid_);
  swap(extrathing_, other->extrathing_);
  swap(issuenum_, other->issuenum_);
  swap(uid_, other->uid_);
  swap(resourcetype_, other->resourcetype_);
  swap(locationsort_, other->locationsort_);
  swap(housenftrefid_, other->housenftrefid_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata nftMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMyNftList::InitAsDefaultInstance() {
}
class SMyNftList::_Internal {
 public:
};

SMyNftList::SMyNftList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nft.SMyNftList)
}
SMyNftList::SMyNftList(const SMyNftList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mynftlist_(from.mynftlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nft.SMyNftList)
}

void SMyNftList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMyNftList_nft_2eproto.base);
}

SMyNftList::~SMyNftList() {
  // @@protoc_insertion_point(destructor:nft.SMyNftList)
  SharedDtor();
}

void SMyNftList::SharedDtor() {
}

void SMyNftList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMyNftList& SMyNftList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMyNftList_nft_2eproto.base);
  return *internal_default_instance();
}


void SMyNftList::Clear() {
// @@protoc_insertion_point(message_clear_start:nft.SMyNftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mynftlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SMyNftList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nft.nftMsg myNftList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mynftlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMyNftList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nft.SMyNftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nft.nftMsg myNftList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mynftlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mynftlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nft.SMyNftList)
  return target;
}

size_t SMyNftList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nft.SMyNftList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nft.nftMsg myNftList = 1;
  total_size += 1UL * this->_internal_mynftlist_size();
  for (const auto& msg : this->mynftlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMyNftList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nft.SMyNftList)
  GOOGLE_DCHECK_NE(&from, this);
  const SMyNftList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMyNftList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nft.SMyNftList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nft.SMyNftList)
    MergeFrom(*source);
  }
}

void SMyNftList::MergeFrom(const SMyNftList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nft.SMyNftList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mynftlist_.MergeFrom(from.mynftlist_);
}

void SMyNftList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nft.SMyNftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMyNftList::CopyFrom(const SMyNftList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nft.SMyNftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMyNftList::IsInitialized() const {
  return true;
}

void SMyNftList::InternalSwap(SMyNftList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mynftlist_.InternalSwap(&other->mynftlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMyNftList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHouseNftList::InitAsDefaultInstance() {
}
class CHouseNftList::_Internal {
 public:
};

CHouseNftList::CHouseNftList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nft.CHouseNftList)
}
CHouseNftList::CHouseNftList(const CHouseNftList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  houseid_ = from.houseid_;
  // @@protoc_insertion_point(copy_constructor:nft.CHouseNftList)
}

void CHouseNftList::SharedCtor() {
  houseid_ = 0;
}

CHouseNftList::~CHouseNftList() {
  // @@protoc_insertion_point(destructor:nft.CHouseNftList)
  SharedDtor();
}

void CHouseNftList::SharedDtor() {
}

void CHouseNftList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHouseNftList& CHouseNftList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHouseNftList_nft_2eproto.base);
  return *internal_default_instance();
}


void CHouseNftList::Clear() {
// @@protoc_insertion_point(message_clear_start:nft.CHouseNftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  houseid_ = 0;
  _internal_metadata_.Clear();
}

const char* CHouseNftList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHouseNftList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nft.CHouseNftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nft.CHouseNftList)
  return target;
}

size_t CHouseNftList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nft.CHouseNftList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHouseNftList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nft.CHouseNftList)
  GOOGLE_DCHECK_NE(&from, this);
  const CHouseNftList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHouseNftList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nft.CHouseNftList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nft.CHouseNftList)
    MergeFrom(*source);
  }
}

void CHouseNftList::MergeFrom(const CHouseNftList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nft.CHouseNftList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void CHouseNftList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nft.CHouseNftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHouseNftList::CopyFrom(const CHouseNftList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nft.CHouseNftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHouseNftList::IsInitialized() const {
  return true;
}

void CHouseNftList::InternalSwap(CHouseNftList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHouseNftList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHouseNftList::InitAsDefaultInstance() {
}
class SHouseNftList::_Internal {
 public:
};

SHouseNftList::SHouseNftList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nft.SHouseNftList)
}
SHouseNftList::SHouseNftList(const SHouseNftList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      housenftlist_(from.housenftlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nft.SHouseNftList)
}

void SHouseNftList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHouseNftList_nft_2eproto.base);
}

SHouseNftList::~SHouseNftList() {
  // @@protoc_insertion_point(destructor:nft.SHouseNftList)
  SharedDtor();
}

void SHouseNftList::SharedDtor() {
}

void SHouseNftList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHouseNftList& SHouseNftList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHouseNftList_nft_2eproto.base);
  return *internal_default_instance();
}


void SHouseNftList::Clear() {
// @@protoc_insertion_point(message_clear_start:nft.SHouseNftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  housenftlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SHouseNftList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nft.nftMsg houseNftList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_housenftlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHouseNftList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nft.SHouseNftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nft.nftMsg houseNftList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_housenftlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_housenftlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nft.SHouseNftList)
  return target;
}

size_t SHouseNftList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nft.SHouseNftList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nft.nftMsg houseNftList = 1;
  total_size += 1UL * this->_internal_housenftlist_size();
  for (const auto& msg : this->housenftlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHouseNftList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nft.SHouseNftList)
  GOOGLE_DCHECK_NE(&from, this);
  const SHouseNftList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHouseNftList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nft.SHouseNftList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nft.SHouseNftList)
    MergeFrom(*source);
  }
}

void SHouseNftList::MergeFrom(const SHouseNftList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nft.SHouseNftList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  housenftlist_.MergeFrom(from.housenftlist_);
}

void SHouseNftList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nft.SHouseNftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHouseNftList::CopyFrom(const SHouseNftList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nft.SHouseNftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHouseNftList::IsInitialized() const {
  return true;
}

void SHouseNftList::InternalSwap(SHouseNftList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  housenftlist_.InternalSwap(&other->housenftlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHouseNftList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nft::nftMsg* Arena::CreateMaybeMessage< ::nft::nftMsg >(Arena* arena) {
  return Arena::CreateInternal< ::nft::nftMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::nft::SMyNftList* Arena::CreateMaybeMessage< ::nft::SMyNftList >(Arena* arena) {
  return Arena::CreateInternal< ::nft::SMyNftList >(arena);
}
template<> PROTOBUF_NOINLINE ::nft::CHouseNftList* Arena::CreateMaybeMessage< ::nft::CHouseNftList >(Arena* arena) {
  return Arena::CreateInternal< ::nft::CHouseNftList >(arena);
}
template<> PROTOBUF_NOINLINE ::nft::SHouseNftList* Arena::CreateMaybeMessage< ::nft::SHouseNftList >(Arena* arena) {
  return Arena::CreateInternal< ::nft::SHouseNftList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
