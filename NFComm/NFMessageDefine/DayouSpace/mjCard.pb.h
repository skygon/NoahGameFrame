// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mjCard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mjCard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mjCard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mjCard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mjCard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mjCard_2eproto;
namespace mj {
class BMjCardDecompose;
class BMjCardDecomposeDefaultTypeInternal;
extern BMjCardDecomposeDefaultTypeInternal _BMjCardDecompose_default_instance_;
class BMjDrawCard;
class BMjDrawCardDefaultTypeInternal;
extern BMjDrawCardDefaultTypeInternal _BMjDrawCard_default_instance_;
class BMjTaskProcess;
class BMjTaskProcessDefaultTypeInternal;
extern BMjTaskProcessDefaultTypeInternal _BMjTaskProcess_default_instance_;
class BMjUserCardCollection;
class BMjUserCardCollectionDefaultTypeInternal;
extern BMjUserCardCollectionDefaultTypeInternal _BMjUserCardCollection_default_instance_;
class CMjCardDecompose;
class CMjCardDecomposeDefaultTypeInternal;
extern CMjCardDecomposeDefaultTypeInternal _CMjCardDecompose_default_instance_;
class CMjCardSynthesis;
class CMjCardSynthesisDefaultTypeInternal;
extern CMjCardSynthesisDefaultTypeInternal _CMjCardSynthesis_default_instance_;
class CMjDrawCard;
class CMjDrawCardDefaultTypeInternal;
extern CMjDrawCardDefaultTypeInternal _CMjDrawCard_default_instance_;
class CMjGetCardReward;
class CMjGetCardRewardDefaultTypeInternal;
extern CMjGetCardRewardDefaultTypeInternal _CMjGetCardReward_default_instance_;
class CMjGetTaskReward;
class CMjGetTaskRewardDefaultTypeInternal;
extern CMjGetTaskRewardDefaultTypeInternal _CMjGetTaskReward_default_instance_;
class CMjTaskProcess;
class CMjTaskProcessDefaultTypeInternal;
extern CMjTaskProcessDefaultTypeInternal _CMjTaskProcess_default_instance_;
class CMjUserCardCollection;
class CMjUserCardCollectionDefaultTypeInternal;
extern CMjUserCardCollectionDefaultTypeInternal _CMjUserCardCollection_default_instance_;
class SMjCardDecompose;
class SMjCardDecomposeDefaultTypeInternal;
extern SMjCardDecomposeDefaultTypeInternal _SMjCardDecompose_default_instance_;
class SMjCardSynthesis;
class SMjCardSynthesisDefaultTypeInternal;
extern SMjCardSynthesisDefaultTypeInternal _SMjCardSynthesis_default_instance_;
class SMjDrawCard;
class SMjDrawCardDefaultTypeInternal;
extern SMjDrawCardDefaultTypeInternal _SMjDrawCard_default_instance_;
class SMjGetCardReward;
class SMjGetCardRewardDefaultTypeInternal;
extern SMjGetCardRewardDefaultTypeInternal _SMjGetCardReward_default_instance_;
class SMjGetTaskReward;
class SMjGetTaskRewardDefaultTypeInternal;
extern SMjGetTaskRewardDefaultTypeInternal _SMjGetTaskReward_default_instance_;
class SMjTaskProcess;
class SMjTaskProcessDefaultTypeInternal;
extern SMjTaskProcessDefaultTypeInternal _SMjTaskProcess_default_instance_;
class SMjUserCardCollection;
class SMjUserCardCollectionDefaultTypeInternal;
extern SMjUserCardCollectionDefaultTypeInternal _SMjUserCardCollection_default_instance_;
}  // namespace mj
PROTOBUF_NAMESPACE_OPEN
template<> ::mj::BMjCardDecompose* Arena::CreateMaybeMessage<::mj::BMjCardDecompose>(Arena*);
template<> ::mj::BMjDrawCard* Arena::CreateMaybeMessage<::mj::BMjDrawCard>(Arena*);
template<> ::mj::BMjTaskProcess* Arena::CreateMaybeMessage<::mj::BMjTaskProcess>(Arena*);
template<> ::mj::BMjUserCardCollection* Arena::CreateMaybeMessage<::mj::BMjUserCardCollection>(Arena*);
template<> ::mj::CMjCardDecompose* Arena::CreateMaybeMessage<::mj::CMjCardDecompose>(Arena*);
template<> ::mj::CMjCardSynthesis* Arena::CreateMaybeMessage<::mj::CMjCardSynthesis>(Arena*);
template<> ::mj::CMjDrawCard* Arena::CreateMaybeMessage<::mj::CMjDrawCard>(Arena*);
template<> ::mj::CMjGetCardReward* Arena::CreateMaybeMessage<::mj::CMjGetCardReward>(Arena*);
template<> ::mj::CMjGetTaskReward* Arena::CreateMaybeMessage<::mj::CMjGetTaskReward>(Arena*);
template<> ::mj::CMjTaskProcess* Arena::CreateMaybeMessage<::mj::CMjTaskProcess>(Arena*);
template<> ::mj::CMjUserCardCollection* Arena::CreateMaybeMessage<::mj::CMjUserCardCollection>(Arena*);
template<> ::mj::SMjCardDecompose* Arena::CreateMaybeMessage<::mj::SMjCardDecompose>(Arena*);
template<> ::mj::SMjCardSynthesis* Arena::CreateMaybeMessage<::mj::SMjCardSynthesis>(Arena*);
template<> ::mj::SMjDrawCard* Arena::CreateMaybeMessage<::mj::SMjDrawCard>(Arena*);
template<> ::mj::SMjGetCardReward* Arena::CreateMaybeMessage<::mj::SMjGetCardReward>(Arena*);
template<> ::mj::SMjGetTaskReward* Arena::CreateMaybeMessage<::mj::SMjGetTaskReward>(Arena*);
template<> ::mj::SMjTaskProcess* Arena::CreateMaybeMessage<::mj::SMjTaskProcess>(Arena*);
template<> ::mj::SMjUserCardCollection* Arena::CreateMaybeMessage<::mj::SMjUserCardCollection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mj {

enum MjCardType : int {
  CardTypePic = 0,
  CardTypeAction = 1,
  CardTypeTitle = 2,
  CardTypeVideo = 3,
  CardTypeNPC = 4,
  MjCardType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MjCardType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MjCardType_IsValid(int value);
constexpr MjCardType MjCardType_MIN = CardTypePic;
constexpr MjCardType MjCardType_MAX = CardTypeNPC;
constexpr int MjCardType_ARRAYSIZE = MjCardType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MjCardType_descriptor();
template<typename T>
inline const std::string& MjCardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MjCardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MjCardType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MjCardType_descriptor(), enum_t_value);
}
inline bool MjCardType_Parse(
    const std::string& name, MjCardType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MjCardType>(
    MjCardType_descriptor(), name, value);
}
enum MjCardState : int {
  None = 0,
  Success = 1,
  Fail = 2,
  MjCardState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MjCardState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MjCardState_IsValid(int value);
constexpr MjCardState MjCardState_MIN = None;
constexpr MjCardState MjCardState_MAX = Fail;
constexpr int MjCardState_ARRAYSIZE = MjCardState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MjCardState_descriptor();
template<typename T>
inline const std::string& MjCardState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MjCardState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MjCardState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MjCardState_descriptor(), enum_t_value);
}
inline bool MjCardState_Parse(
    const std::string& name, MjCardState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MjCardState>(
    MjCardState_descriptor(), name, value);
}
enum MjTaskStatus : int {
  UnCompleted = 0,
  Completed = 1,
  Received = 2,
  MjTaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MjTaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MjTaskStatus_IsValid(int value);
constexpr MjTaskStatus MjTaskStatus_MIN = UnCompleted;
constexpr MjTaskStatus MjTaskStatus_MAX = Received;
constexpr int MjTaskStatus_ARRAYSIZE = MjTaskStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MjTaskStatus_descriptor();
template<typename T>
inline const std::string& MjTaskStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MjTaskStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MjTaskStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MjTaskStatus_descriptor(), enum_t_value);
}
inline bool MjTaskStatus_Parse(
    const std::string& name, MjTaskStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MjTaskStatus>(
    MjTaskStatus_descriptor(), name, value);
}
enum MjTaskRewardType : int {
  Nothing = 0,
  YuanLi = 1,
  YuanLiAndCard = 2,
  MjTaskRewardType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MjTaskRewardType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MjTaskRewardType_IsValid(int value);
constexpr MjTaskRewardType MjTaskRewardType_MIN = Nothing;
constexpr MjTaskRewardType MjTaskRewardType_MAX = YuanLiAndCard;
constexpr int MjTaskRewardType_ARRAYSIZE = MjTaskRewardType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MjTaskRewardType_descriptor();
template<typename T>
inline const std::string& MjTaskRewardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MjTaskRewardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MjTaskRewardType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MjTaskRewardType_descriptor(), enum_t_value);
}
inline bool MjTaskRewardType_Parse(
    const std::string& name, MjTaskRewardType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MjTaskRewardType>(
    MjTaskRewardType_descriptor(), name, value);
}
// ===================================================================

class CMjDrawCard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjDrawCard) */ {
 public:
  CMjDrawCard();
  virtual ~CMjDrawCard();

  CMjDrawCard(const CMjDrawCard& from);
  CMjDrawCard(CMjDrawCard&& from) noexcept
    : CMjDrawCard() {
    *this = ::std::move(from);
  }

  inline CMjDrawCard& operator=(const CMjDrawCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjDrawCard& operator=(CMjDrawCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjDrawCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjDrawCard* internal_default_instance() {
    return reinterpret_cast<const CMjDrawCard*>(
               &_CMjDrawCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMjDrawCard& a, CMjDrawCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjDrawCard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjDrawCard* New() const final {
    return CreateMaybeMessage<CMjDrawCard>(nullptr);
  }

  CMjDrawCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjDrawCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjDrawCard& from);
  void MergeFrom(const CMjDrawCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjDrawCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjDrawCard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjDrawCard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class SMjDrawCard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjDrawCard) */ {
 public:
  SMjDrawCard();
  virtual ~SMjDrawCard();

  SMjDrawCard(const SMjDrawCard& from);
  SMjDrawCard(SMjDrawCard&& from) noexcept
    : SMjDrawCard() {
    *this = ::std::move(from);
  }

  inline SMjDrawCard& operator=(const SMjDrawCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjDrawCard& operator=(SMjDrawCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjDrawCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjDrawCard* internal_default_instance() {
    return reinterpret_cast<const SMjDrawCard*>(
               &_SMjDrawCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SMjDrawCard& a, SMjDrawCard& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjDrawCard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjDrawCard* New() const final {
    return CreateMaybeMessage<SMjDrawCard>(nullptr);
  }

  SMjDrawCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjDrawCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjDrawCard& from);
  void MergeFrom(const SMjDrawCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjDrawCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjDrawCard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 3,
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // repeated .mj.BMjDrawCard list = 3;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::mj::BMjDrawCard* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDrawCard >*
      mutable_list();
  private:
  const ::mj::BMjDrawCard& _internal_list(int index) const;
  ::mj::BMjDrawCard* _internal_add_list();
  public:
  const ::mj::BMjDrawCard& list(int index) const;
  ::mj::BMjDrawCard* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDrawCard >&
      list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjDrawCard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDrawCard > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class BMjDrawCard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.BMjDrawCard) */ {
 public:
  BMjDrawCard();
  virtual ~BMjDrawCard();

  BMjDrawCard(const BMjDrawCard& from);
  BMjDrawCard(BMjDrawCard&& from) noexcept
    : BMjDrawCard() {
    *this = ::std::move(from);
  }

  inline BMjDrawCard& operator=(const BMjDrawCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMjDrawCard& operator=(BMjDrawCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMjDrawCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMjDrawCard* internal_default_instance() {
    return reinterpret_cast<const BMjDrawCard*>(
               &_BMjDrawCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BMjDrawCard& a, BMjDrawCard& b) {
    a.Swap(&b);
  }
  inline void Swap(BMjDrawCard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMjDrawCard* New() const final {
    return CreateMaybeMessage<BMjDrawCard>(nullptr);
  }

  BMjDrawCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMjDrawCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMjDrawCard& from);
  void MergeFrom(const BMjDrawCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMjDrawCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.BMjDrawCard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardIdFieldNumber = 1,
  };
  // int32 cardId = 1;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::int32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardid() const;
  void _internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.BMjDrawCard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class CMjUserCardCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjUserCardCollection) */ {
 public:
  CMjUserCardCollection();
  virtual ~CMjUserCardCollection();

  CMjUserCardCollection(const CMjUserCardCollection& from);
  CMjUserCardCollection(CMjUserCardCollection&& from) noexcept
    : CMjUserCardCollection() {
    *this = ::std::move(from);
  }

  inline CMjUserCardCollection& operator=(const CMjUserCardCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjUserCardCollection& operator=(CMjUserCardCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjUserCardCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjUserCardCollection* internal_default_instance() {
    return reinterpret_cast<const CMjUserCardCollection*>(
               &_CMjUserCardCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMjUserCardCollection& a, CMjUserCardCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjUserCardCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjUserCardCollection* New() const final {
    return CreateMaybeMessage<CMjUserCardCollection>(nullptr);
  }

  CMjUserCardCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjUserCardCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjUserCardCollection& from);
  void MergeFrom(const CMjUserCardCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjUserCardCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjUserCardCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjUserCardCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class SMjUserCardCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjUserCardCollection) */ {
 public:
  SMjUserCardCollection();
  virtual ~SMjUserCardCollection();

  SMjUserCardCollection(const SMjUserCardCollection& from);
  SMjUserCardCollection(SMjUserCardCollection&& from) noexcept
    : SMjUserCardCollection() {
    *this = ::std::move(from);
  }

  inline SMjUserCardCollection& operator=(const SMjUserCardCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjUserCardCollection& operator=(SMjUserCardCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjUserCardCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjUserCardCollection* internal_default_instance() {
    return reinterpret_cast<const SMjUserCardCollection*>(
               &_SMjUserCardCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SMjUserCardCollection& a, SMjUserCardCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjUserCardCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjUserCardCollection* New() const final {
    return CreateMaybeMessage<SMjUserCardCollection>(nullptr);
  }

  SMjUserCardCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjUserCardCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjUserCardCollection& from);
  void MergeFrom(const SMjUserCardCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjUserCardCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjUserCardCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 3,
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // repeated .mj.BMjUserCardCollection list = 3;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::mj::BMjUserCardCollection* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjUserCardCollection >*
      mutable_list();
  private:
  const ::mj::BMjUserCardCollection& _internal_list(int index) const;
  ::mj::BMjUserCardCollection* _internal_add_list();
  public:
  const ::mj::BMjUserCardCollection& list(int index) const;
  ::mj::BMjUserCardCollection* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjUserCardCollection >&
      list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjUserCardCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjUserCardCollection > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class BMjUserCardCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.BMjUserCardCollection) */ {
 public:
  BMjUserCardCollection();
  virtual ~BMjUserCardCollection();

  BMjUserCardCollection(const BMjUserCardCollection& from);
  BMjUserCardCollection(BMjUserCardCollection&& from) noexcept
    : BMjUserCardCollection() {
    *this = ::std::move(from);
  }

  inline BMjUserCardCollection& operator=(const BMjUserCardCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMjUserCardCollection& operator=(BMjUserCardCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMjUserCardCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMjUserCardCollection* internal_default_instance() {
    return reinterpret_cast<const BMjUserCardCollection*>(
               &_BMjUserCardCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BMjUserCardCollection& a, BMjUserCardCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(BMjUserCardCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMjUserCardCollection* New() const final {
    return CreateMaybeMessage<BMjUserCardCollection>(nullptr);
  }

  BMjUserCardCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMjUserCardCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMjUserCardCollection& from);
  void MergeFrom(const BMjUserCardCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMjUserCardCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.BMjUserCardCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardIdFieldNumber = 1,
    kNumFieldNumber = 2,
    kRewardStatusFieldNumber = 3,
  };
  // int32 cardId = 1;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::int32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardid() const;
  void _internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rewardStatus = 3;
  void clear_rewardstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 rewardstatus() const;
  void set_rewardstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rewardstatus() const;
  void _internal_set_rewardstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.BMjUserCardCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewardstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class CMjGetCardReward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjGetCardReward) */ {
 public:
  CMjGetCardReward();
  virtual ~CMjGetCardReward();

  CMjGetCardReward(const CMjGetCardReward& from);
  CMjGetCardReward(CMjGetCardReward&& from) noexcept
    : CMjGetCardReward() {
    *this = ::std::move(from);
  }

  inline CMjGetCardReward& operator=(const CMjGetCardReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjGetCardReward& operator=(CMjGetCardReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjGetCardReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjGetCardReward* internal_default_instance() {
    return reinterpret_cast<const CMjGetCardReward*>(
               &_CMjGetCardReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMjGetCardReward& a, CMjGetCardReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjGetCardReward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjGetCardReward* New() const final {
    return CreateMaybeMessage<CMjGetCardReward>(nullptr);
  }

  CMjGetCardReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjGetCardReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjGetCardReward& from);
  void MergeFrom(const CMjGetCardReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjGetCardReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjGetCardReward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardIdFieldNumber = 1,
  };
  // int32 cardId = 1;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::int32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardid() const;
  void _internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjGetCardReward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class SMjGetCardReward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjGetCardReward) */ {
 public:
  SMjGetCardReward();
  virtual ~SMjGetCardReward();

  SMjGetCardReward(const SMjGetCardReward& from);
  SMjGetCardReward(SMjGetCardReward&& from) noexcept
    : SMjGetCardReward() {
    *this = ::std::move(from);
  }

  inline SMjGetCardReward& operator=(const SMjGetCardReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjGetCardReward& operator=(SMjGetCardReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjGetCardReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjGetCardReward* internal_default_instance() {
    return reinterpret_cast<const SMjGetCardReward*>(
               &_SMjGetCardReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SMjGetCardReward& a, SMjGetCardReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjGetCardReward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjGetCardReward* New() const final {
    return CreateMaybeMessage<SMjGetCardReward>(nullptr);
  }

  SMjGetCardReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjGetCardReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjGetCardReward& from);
  void MergeFrom(const SMjGetCardReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjGetCardReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjGetCardReward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjGetCardReward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class CMjCardSynthesis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjCardSynthesis) */ {
 public:
  CMjCardSynthesis();
  virtual ~CMjCardSynthesis();

  CMjCardSynthesis(const CMjCardSynthesis& from);
  CMjCardSynthesis(CMjCardSynthesis&& from) noexcept
    : CMjCardSynthesis() {
    *this = ::std::move(from);
  }

  inline CMjCardSynthesis& operator=(const CMjCardSynthesis& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjCardSynthesis& operator=(CMjCardSynthesis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjCardSynthesis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjCardSynthesis* internal_default_instance() {
    return reinterpret_cast<const CMjCardSynthesis*>(
               &_CMjCardSynthesis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMjCardSynthesis& a, CMjCardSynthesis& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjCardSynthesis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjCardSynthesis* New() const final {
    return CreateMaybeMessage<CMjCardSynthesis>(nullptr);
  }

  CMjCardSynthesis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjCardSynthesis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjCardSynthesis& from);
  void MergeFrom(const CMjCardSynthesis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjCardSynthesis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjCardSynthesis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjCardSynthesis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class SMjCardSynthesis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjCardSynthesis) */ {
 public:
  SMjCardSynthesis();
  virtual ~SMjCardSynthesis();

  SMjCardSynthesis(const SMjCardSynthesis& from);
  SMjCardSynthesis(SMjCardSynthesis&& from) noexcept
    : SMjCardSynthesis() {
    *this = ::std::move(from);
  }

  inline SMjCardSynthesis& operator=(const SMjCardSynthesis& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjCardSynthesis& operator=(SMjCardSynthesis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjCardSynthesis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjCardSynthesis* internal_default_instance() {
    return reinterpret_cast<const SMjCardSynthesis*>(
               &_SMjCardSynthesis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SMjCardSynthesis& a, SMjCardSynthesis& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjCardSynthesis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjCardSynthesis* New() const final {
    return CreateMaybeMessage<SMjCardSynthesis>(nullptr);
  }

  SMjCardSynthesis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjCardSynthesis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjCardSynthesis& from);
  void MergeFrom(const SMjCardSynthesis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjCardSynthesis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjCardSynthesis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjCardSynthesis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class CMjCardDecompose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjCardDecompose) */ {
 public:
  CMjCardDecompose();
  virtual ~CMjCardDecompose();

  CMjCardDecompose(const CMjCardDecompose& from);
  CMjCardDecompose(CMjCardDecompose&& from) noexcept
    : CMjCardDecompose() {
    *this = ::std::move(from);
  }

  inline CMjCardDecompose& operator=(const CMjCardDecompose& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjCardDecompose& operator=(CMjCardDecompose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjCardDecompose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjCardDecompose* internal_default_instance() {
    return reinterpret_cast<const CMjCardDecompose*>(
               &_CMjCardDecompose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMjCardDecompose& a, CMjCardDecompose& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjCardDecompose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjCardDecompose* New() const final {
    return CreateMaybeMessage<CMjCardDecompose>(nullptr);
  }

  CMjCardDecompose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjCardDecompose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjCardDecompose& from);
  void MergeFrom(const CMjCardDecompose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjCardDecompose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjCardDecompose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 1,
    kCheckFieldNumber = 2,
  };
  // repeated .mj.BMjCardDecompose cards = 1;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::mj::BMjCardDecompose* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjCardDecompose >*
      mutable_cards();
  private:
  const ::mj::BMjCardDecompose& _internal_cards(int index) const;
  ::mj::BMjCardDecompose* _internal_add_cards();
  public:
  const ::mj::BMjCardDecompose& cards(int index) const;
  ::mj::BMjCardDecompose* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjCardDecompose >&
      cards() const;

  // int32 check = 2;
  void clear_check();
  ::PROTOBUF_NAMESPACE_ID::int32 check() const;
  void set_check(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_check() const;
  void _internal_set_check(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjCardDecompose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjCardDecompose > cards_;
  ::PROTOBUF_NAMESPACE_ID::int32 check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class BMjCardDecompose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.BMjCardDecompose) */ {
 public:
  BMjCardDecompose();
  virtual ~BMjCardDecompose();

  BMjCardDecompose(const BMjCardDecompose& from);
  BMjCardDecompose(BMjCardDecompose&& from) noexcept
    : BMjCardDecompose() {
    *this = ::std::move(from);
  }

  inline BMjCardDecompose& operator=(const BMjCardDecompose& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMjCardDecompose& operator=(BMjCardDecompose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMjCardDecompose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMjCardDecompose* internal_default_instance() {
    return reinterpret_cast<const BMjCardDecompose*>(
               &_BMjCardDecompose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BMjCardDecompose& a, BMjCardDecompose& b) {
    a.Swap(&b);
  }
  inline void Swap(BMjCardDecompose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMjCardDecompose* New() const final {
    return CreateMaybeMessage<BMjCardDecompose>(nullptr);
  }

  BMjCardDecompose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMjCardDecompose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMjCardDecompose& from);
  void MergeFrom(const BMjCardDecompose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMjCardDecompose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.BMjCardDecompose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 cardId = 1;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::int32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardid() const;
  void _internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.BMjCardDecompose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class SMjCardDecompose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjCardDecompose) */ {
 public:
  SMjCardDecompose();
  virtual ~SMjCardDecompose();

  SMjCardDecompose(const SMjCardDecompose& from);
  SMjCardDecompose(SMjCardDecompose&& from) noexcept
    : SMjCardDecompose() {
    *this = ::std::move(from);
  }

  inline SMjCardDecompose& operator=(const SMjCardDecompose& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjCardDecompose& operator=(SMjCardDecompose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjCardDecompose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjCardDecompose* internal_default_instance() {
    return reinterpret_cast<const SMjCardDecompose*>(
               &_SMjCardDecompose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SMjCardDecompose& a, SMjCardDecompose& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjCardDecompose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjCardDecompose* New() const final {
    return CreateMaybeMessage<SMjCardDecompose>(nullptr);
  }

  SMjCardDecompose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjCardDecompose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjCardDecompose& from);
  void MergeFrom(const SMjCardDecompose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjCardDecompose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjCardDecompose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
    kNumFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjCardDecompose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class CMjTaskProcess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjTaskProcess) */ {
 public:
  CMjTaskProcess();
  virtual ~CMjTaskProcess();

  CMjTaskProcess(const CMjTaskProcess& from);
  CMjTaskProcess(CMjTaskProcess&& from) noexcept
    : CMjTaskProcess() {
    *this = ::std::move(from);
  }

  inline CMjTaskProcess& operator=(const CMjTaskProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjTaskProcess& operator=(CMjTaskProcess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjTaskProcess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjTaskProcess* internal_default_instance() {
    return reinterpret_cast<const CMjTaskProcess*>(
               &_CMjTaskProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMjTaskProcess& a, CMjTaskProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjTaskProcess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjTaskProcess* New() const final {
    return CreateMaybeMessage<CMjTaskProcess>(nullptr);
  }

  CMjTaskProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjTaskProcess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjTaskProcess& from);
  void MergeFrom(const CMjTaskProcess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjTaskProcess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjTaskProcess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mj.CMjTaskProcess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class SMjTaskProcess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjTaskProcess) */ {
 public:
  SMjTaskProcess();
  virtual ~SMjTaskProcess();

  SMjTaskProcess(const SMjTaskProcess& from);
  SMjTaskProcess(SMjTaskProcess&& from) noexcept
    : SMjTaskProcess() {
    *this = ::std::move(from);
  }

  inline SMjTaskProcess& operator=(const SMjTaskProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjTaskProcess& operator=(SMjTaskProcess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjTaskProcess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjTaskProcess* internal_default_instance() {
    return reinterpret_cast<const SMjTaskProcess*>(
               &_SMjTaskProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SMjTaskProcess& a, SMjTaskProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjTaskProcess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjTaskProcess* New() const final {
    return CreateMaybeMessage<SMjTaskProcess>(nullptr);
  }

  SMjTaskProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjTaskProcess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjTaskProcess& from);
  void MergeFrom(const SMjTaskProcess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjTaskProcess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjTaskProcess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 3,
  };
  // repeated .mj.BMjTaskProcess list = 3;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::mj::BMjTaskProcess* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjTaskProcess >*
      mutable_list();
  private:
  const ::mj::BMjTaskProcess& _internal_list(int index) const;
  ::mj::BMjTaskProcess* _internal_add_list();
  public:
  const ::mj::BMjTaskProcess& list(int index) const;
  ::mj::BMjTaskProcess* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjTaskProcess >&
      list() const;

  // @@protoc_insertion_point(class_scope:mj.SMjTaskProcess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjTaskProcess > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class BMjTaskProcess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.BMjTaskProcess) */ {
 public:
  BMjTaskProcess();
  virtual ~BMjTaskProcess();

  BMjTaskProcess(const BMjTaskProcess& from);
  BMjTaskProcess(BMjTaskProcess&& from) noexcept
    : BMjTaskProcess() {
    *this = ::std::move(from);
  }

  inline BMjTaskProcess& operator=(const BMjTaskProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMjTaskProcess& operator=(BMjTaskProcess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMjTaskProcess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMjTaskProcess* internal_default_instance() {
    return reinterpret_cast<const BMjTaskProcess*>(
               &_BMjTaskProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BMjTaskProcess& a, BMjTaskProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(BMjTaskProcess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMjTaskProcess* New() const final {
    return CreateMaybeMessage<BMjTaskProcess>(nullptr);
  }

  BMjTaskProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMjTaskProcess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMjTaskProcess& from);
  void MergeFrom(const BMjTaskProcess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMjTaskProcess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.BMjTaskProcess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kProcessFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // int32 taskId = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 process = 2;
  void clear_process();
  ::PROTOBUF_NAMESPACE_ID::int32 process() const;
  void set_process(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_process() const;
  void _internal_set_process(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.BMjTaskProcess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class CMjGetTaskReward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjGetTaskReward) */ {
 public:
  CMjGetTaskReward();
  virtual ~CMjGetTaskReward();

  CMjGetTaskReward(const CMjGetTaskReward& from);
  CMjGetTaskReward(CMjGetTaskReward&& from) noexcept
    : CMjGetTaskReward() {
    *this = ::std::move(from);
  }

  inline CMjGetTaskReward& operator=(const CMjGetTaskReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjGetTaskReward& operator=(CMjGetTaskReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjGetTaskReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjGetTaskReward* internal_default_instance() {
    return reinterpret_cast<const CMjGetTaskReward*>(
               &_CMjGetTaskReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMjGetTaskReward& a, CMjGetTaskReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjGetTaskReward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjGetTaskReward* New() const final {
    return CreateMaybeMessage<CMjGetTaskReward>(nullptr);
  }

  CMjGetTaskReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjGetTaskReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjGetTaskReward& from);
  void MergeFrom(const CMjGetTaskReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjGetTaskReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjGetTaskReward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // int32 taskId = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjGetTaskReward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// -------------------------------------------------------------------

class SMjGetTaskReward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjGetTaskReward) */ {
 public:
  SMjGetTaskReward();
  virtual ~SMjGetTaskReward();

  SMjGetTaskReward(const SMjGetTaskReward& from);
  SMjGetTaskReward(SMjGetTaskReward&& from) noexcept
    : SMjGetTaskReward() {
    *this = ::std::move(from);
  }

  inline SMjGetTaskReward& operator=(const SMjGetTaskReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjGetTaskReward& operator=(SMjGetTaskReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjGetTaskReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjGetTaskReward* internal_default_instance() {
    return reinterpret_cast<const SMjGetTaskReward*>(
               &_SMjGetTaskReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SMjGetTaskReward& a, SMjGetTaskReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjGetTaskReward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjGetTaskReward* New() const final {
    return CreateMaybeMessage<SMjGetTaskReward>(nullptr);
  }

  SMjGetTaskReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjGetTaskReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjGetTaskReward& from);
  void MergeFrom(const SMjGetTaskReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjGetTaskReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjGetTaskReward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjCard_2eproto);
    return ::descriptor_table_mjCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
    kTaskIdFieldNumber = 3,
    kRewardTypeFieldNumber = 4,
    kYuanLiNumFieldNumber = 5,
    kCardIdFieldNumber = 6,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 taskId = 3;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rewardType = 4;
  void clear_rewardtype();
  ::PROTOBUF_NAMESPACE_ID::int32 rewardtype() const;
  void set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rewardtype() const;
  void _internal_set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 YuanLiNum = 5;
  void clear_yuanlinum();
  ::PROTOBUF_NAMESPACE_ID::int32 yuanlinum() const;
  void set_yuanlinum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yuanlinum() const;
  void _internal_set_yuanlinum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CardId = 6;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::int32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardid() const;
  void _internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjGetTaskReward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewardtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 yuanlinum_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjCard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMjDrawCard

// int32 num = 1;
inline void CMjDrawCard::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDrawCard::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDrawCard::num() const {
  // @@protoc_insertion_point(field_get:mj.CMjDrawCard.num)
  return _internal_num();
}
inline void CMjDrawCard::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void CMjDrawCard::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:mj.CMjDrawCard.num)
}

// -------------------------------------------------------------------

// SMjDrawCard

// int32 state = 1;
inline void SMjDrawCard::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDrawCard::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDrawCard::state() const {
  // @@protoc_insertion_point(field_get:mj.SMjDrawCard.state)
  return _internal_state();
}
inline void SMjDrawCard::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SMjDrawCard::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mj.SMjDrawCard.state)
}

// string msg = 2;
inline void SMjDrawCard::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjDrawCard::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjDrawCard.msg)
  return _internal_msg();
}
inline void SMjDrawCard::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjDrawCard.msg)
}
inline std::string* SMjDrawCard::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjDrawCard.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjDrawCard::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjDrawCard::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjDrawCard::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjDrawCard.msg)
}
inline void SMjDrawCard::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjDrawCard.msg)
}
inline void SMjDrawCard::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjDrawCard.msg)
}
inline std::string* SMjDrawCard::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjDrawCard::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjDrawCard.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjDrawCard::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjDrawCard.msg)
}

// repeated .mj.BMjDrawCard list = 3;
inline int SMjDrawCard::_internal_list_size() const {
  return list_.size();
}
inline int SMjDrawCard::list_size() const {
  return _internal_list_size();
}
inline void SMjDrawCard::clear_list() {
  list_.Clear();
}
inline ::mj::BMjDrawCard* SMjDrawCard::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:mj.SMjDrawCard.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDrawCard >*
SMjDrawCard::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:mj.SMjDrawCard.list)
  return &list_;
}
inline const ::mj::BMjDrawCard& SMjDrawCard::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::mj::BMjDrawCard& SMjDrawCard::list(int index) const {
  // @@protoc_insertion_point(field_get:mj.SMjDrawCard.list)
  return _internal_list(index);
}
inline ::mj::BMjDrawCard* SMjDrawCard::_internal_add_list() {
  return list_.Add();
}
inline ::mj::BMjDrawCard* SMjDrawCard::add_list() {
  // @@protoc_insertion_point(field_add:mj.SMjDrawCard.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjDrawCard >&
SMjDrawCard::list() const {
  // @@protoc_insertion_point(field_list:mj.SMjDrawCard.list)
  return list_;
}

// -------------------------------------------------------------------

// BMjDrawCard

// int32 cardId = 1;
inline void BMjDrawCard::clear_cardid() {
  cardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDrawCard::_internal_cardid() const {
  return cardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjDrawCard::cardid() const {
  // @@protoc_insertion_point(field_get:mj.BMjDrawCard.cardId)
  return _internal_cardid();
}
inline void BMjDrawCard::_internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardid_ = value;
}
inline void BMjDrawCard::set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardid(value);
  // @@protoc_insertion_point(field_set:mj.BMjDrawCard.cardId)
}

// -------------------------------------------------------------------

// CMjUserCardCollection

// int32 goodsId = 1;
inline void CMjUserCardCollection::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjUserCardCollection::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjUserCardCollection::goodsid() const {
  // @@protoc_insertion_point(field_get:mj.CMjUserCardCollection.goodsId)
  return _internal_goodsid();
}
inline void CMjUserCardCollection::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CMjUserCardCollection::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:mj.CMjUserCardCollection.goodsId)
}

// -------------------------------------------------------------------

// SMjUserCardCollection

// int32 state = 1;
inline void SMjUserCardCollection::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserCardCollection::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjUserCardCollection::state() const {
  // @@protoc_insertion_point(field_get:mj.SMjUserCardCollection.state)
  return _internal_state();
}
inline void SMjUserCardCollection::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SMjUserCardCollection::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mj.SMjUserCardCollection.state)
}

// string msg = 2;
inline void SMjUserCardCollection::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjUserCardCollection::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjUserCardCollection.msg)
  return _internal_msg();
}
inline void SMjUserCardCollection::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjUserCardCollection.msg)
}
inline std::string* SMjUserCardCollection::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjUserCardCollection.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjUserCardCollection::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjUserCardCollection::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjUserCardCollection::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjUserCardCollection.msg)
}
inline void SMjUserCardCollection::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjUserCardCollection.msg)
}
inline void SMjUserCardCollection::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjUserCardCollection.msg)
}
inline std::string* SMjUserCardCollection::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjUserCardCollection::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjUserCardCollection.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjUserCardCollection::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjUserCardCollection.msg)
}

// repeated .mj.BMjUserCardCollection list = 3;
inline int SMjUserCardCollection::_internal_list_size() const {
  return list_.size();
}
inline int SMjUserCardCollection::list_size() const {
  return _internal_list_size();
}
inline void SMjUserCardCollection::clear_list() {
  list_.Clear();
}
inline ::mj::BMjUserCardCollection* SMjUserCardCollection::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:mj.SMjUserCardCollection.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjUserCardCollection >*
SMjUserCardCollection::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:mj.SMjUserCardCollection.list)
  return &list_;
}
inline const ::mj::BMjUserCardCollection& SMjUserCardCollection::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::mj::BMjUserCardCollection& SMjUserCardCollection::list(int index) const {
  // @@protoc_insertion_point(field_get:mj.SMjUserCardCollection.list)
  return _internal_list(index);
}
inline ::mj::BMjUserCardCollection* SMjUserCardCollection::_internal_add_list() {
  return list_.Add();
}
inline ::mj::BMjUserCardCollection* SMjUserCardCollection::add_list() {
  // @@protoc_insertion_point(field_add:mj.SMjUserCardCollection.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjUserCardCollection >&
SMjUserCardCollection::list() const {
  // @@protoc_insertion_point(field_list:mj.SMjUserCardCollection.list)
  return list_;
}

// -------------------------------------------------------------------

// BMjUserCardCollection

// int32 cardId = 1;
inline void BMjUserCardCollection::clear_cardid() {
  cardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjUserCardCollection::_internal_cardid() const {
  return cardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjUserCardCollection::cardid() const {
  // @@protoc_insertion_point(field_get:mj.BMjUserCardCollection.cardId)
  return _internal_cardid();
}
inline void BMjUserCardCollection::_internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardid_ = value;
}
inline void BMjUserCardCollection::set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardid(value);
  // @@protoc_insertion_point(field_set:mj.BMjUserCardCollection.cardId)
}

// int32 num = 2;
inline void BMjUserCardCollection::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjUserCardCollection::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjUserCardCollection::num() const {
  // @@protoc_insertion_point(field_get:mj.BMjUserCardCollection.num)
  return _internal_num();
}
inline void BMjUserCardCollection::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void BMjUserCardCollection::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:mj.BMjUserCardCollection.num)
}

// int32 rewardStatus = 3;
inline void BMjUserCardCollection::clear_rewardstatus() {
  rewardstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjUserCardCollection::_internal_rewardstatus() const {
  return rewardstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjUserCardCollection::rewardstatus() const {
  // @@protoc_insertion_point(field_get:mj.BMjUserCardCollection.rewardStatus)
  return _internal_rewardstatus();
}
inline void BMjUserCardCollection::_internal_set_rewardstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewardstatus_ = value;
}
inline void BMjUserCardCollection::set_rewardstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rewardstatus(value);
  // @@protoc_insertion_point(field_set:mj.BMjUserCardCollection.rewardStatus)
}

// -------------------------------------------------------------------

// CMjGetCardReward

// int32 cardId = 1;
inline void CMjGetCardReward::clear_cardid() {
  cardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjGetCardReward::_internal_cardid() const {
  return cardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjGetCardReward::cardid() const {
  // @@protoc_insertion_point(field_get:mj.CMjGetCardReward.cardId)
  return _internal_cardid();
}
inline void CMjGetCardReward::_internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardid_ = value;
}
inline void CMjGetCardReward::set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardid(value);
  // @@protoc_insertion_point(field_set:mj.CMjGetCardReward.cardId)
}

// -------------------------------------------------------------------

// SMjGetCardReward

// int32 state = 1;
inline void SMjGetCardReward::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetCardReward::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetCardReward::state() const {
  // @@protoc_insertion_point(field_get:mj.SMjGetCardReward.state)
  return _internal_state();
}
inline void SMjGetCardReward::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SMjGetCardReward::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mj.SMjGetCardReward.state)
}

// string msg = 2;
inline void SMjGetCardReward::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjGetCardReward::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjGetCardReward.msg)
  return _internal_msg();
}
inline void SMjGetCardReward::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjGetCardReward.msg)
}
inline std::string* SMjGetCardReward::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjGetCardReward.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjGetCardReward::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjGetCardReward::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjGetCardReward::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjGetCardReward.msg)
}
inline void SMjGetCardReward::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjGetCardReward.msg)
}
inline void SMjGetCardReward::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjGetCardReward.msg)
}
inline std::string* SMjGetCardReward::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjGetCardReward::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjGetCardReward.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjGetCardReward::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjGetCardReward.msg)
}

// -------------------------------------------------------------------

// CMjCardSynthesis

// int32 goodsId = 1;
inline void CMjCardSynthesis::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjCardSynthesis::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjCardSynthesis::goodsid() const {
  // @@protoc_insertion_point(field_get:mj.CMjCardSynthesis.goodsId)
  return _internal_goodsid();
}
inline void CMjCardSynthesis::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CMjCardSynthesis::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:mj.CMjCardSynthesis.goodsId)
}

// -------------------------------------------------------------------

// SMjCardSynthesis

// int32 state = 1;
inline void SMjCardSynthesis::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjCardSynthesis::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjCardSynthesis::state() const {
  // @@protoc_insertion_point(field_get:mj.SMjCardSynthesis.state)
  return _internal_state();
}
inline void SMjCardSynthesis::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SMjCardSynthesis::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mj.SMjCardSynthesis.state)
}

// string msg = 2;
inline void SMjCardSynthesis::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjCardSynthesis::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjCardSynthesis.msg)
  return _internal_msg();
}
inline void SMjCardSynthesis::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjCardSynthesis.msg)
}
inline std::string* SMjCardSynthesis::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjCardSynthesis.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjCardSynthesis::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjCardSynthesis::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjCardSynthesis::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjCardSynthesis.msg)
}
inline void SMjCardSynthesis::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjCardSynthesis.msg)
}
inline void SMjCardSynthesis::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjCardSynthesis.msg)
}
inline std::string* SMjCardSynthesis::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjCardSynthesis::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjCardSynthesis.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjCardSynthesis::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjCardSynthesis.msg)
}

// -------------------------------------------------------------------

// CMjCardDecompose

// repeated .mj.BMjCardDecompose cards = 1;
inline int CMjCardDecompose::_internal_cards_size() const {
  return cards_.size();
}
inline int CMjCardDecompose::cards_size() const {
  return _internal_cards_size();
}
inline void CMjCardDecompose::clear_cards() {
  cards_.Clear();
}
inline ::mj::BMjCardDecompose* CMjCardDecompose::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:mj.CMjCardDecompose.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjCardDecompose >*
CMjCardDecompose::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:mj.CMjCardDecompose.cards)
  return &cards_;
}
inline const ::mj::BMjCardDecompose& CMjCardDecompose::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::mj::BMjCardDecompose& CMjCardDecompose::cards(int index) const {
  // @@protoc_insertion_point(field_get:mj.CMjCardDecompose.cards)
  return _internal_cards(index);
}
inline ::mj::BMjCardDecompose* CMjCardDecompose::_internal_add_cards() {
  return cards_.Add();
}
inline ::mj::BMjCardDecompose* CMjCardDecompose::add_cards() {
  // @@protoc_insertion_point(field_add:mj.CMjCardDecompose.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjCardDecompose >&
CMjCardDecompose::cards() const {
  // @@protoc_insertion_point(field_list:mj.CMjCardDecompose.cards)
  return cards_;
}

// int32 check = 2;
inline void CMjCardDecompose::clear_check() {
  check_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjCardDecompose::_internal_check() const {
  return check_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjCardDecompose::check() const {
  // @@protoc_insertion_point(field_get:mj.CMjCardDecompose.check)
  return _internal_check();
}
inline void CMjCardDecompose::_internal_set_check(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  check_ = value;
}
inline void CMjCardDecompose::set_check(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:mj.CMjCardDecompose.check)
}

// -------------------------------------------------------------------

// BMjCardDecompose

// int32 cardId = 1;
inline void BMjCardDecompose::clear_cardid() {
  cardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjCardDecompose::_internal_cardid() const {
  return cardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjCardDecompose::cardid() const {
  // @@protoc_insertion_point(field_get:mj.BMjCardDecompose.cardId)
  return _internal_cardid();
}
inline void BMjCardDecompose::_internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardid_ = value;
}
inline void BMjCardDecompose::set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardid(value);
  // @@protoc_insertion_point(field_set:mj.BMjCardDecompose.cardId)
}

// int32 num = 2;
inline void BMjCardDecompose::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjCardDecompose::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjCardDecompose::num() const {
  // @@protoc_insertion_point(field_get:mj.BMjCardDecompose.num)
  return _internal_num();
}
inline void BMjCardDecompose::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void BMjCardDecompose::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:mj.BMjCardDecompose.num)
}

// -------------------------------------------------------------------

// SMjCardDecompose

// int32 state = 1;
inline void SMjCardDecompose::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjCardDecompose::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjCardDecompose::state() const {
  // @@protoc_insertion_point(field_get:mj.SMjCardDecompose.state)
  return _internal_state();
}
inline void SMjCardDecompose::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SMjCardDecompose::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mj.SMjCardDecompose.state)
}

// string msg = 2;
inline void SMjCardDecompose::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjCardDecompose::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjCardDecompose.msg)
  return _internal_msg();
}
inline void SMjCardDecompose::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjCardDecompose.msg)
}
inline std::string* SMjCardDecompose::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjCardDecompose.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjCardDecompose::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjCardDecompose::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjCardDecompose::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjCardDecompose.msg)
}
inline void SMjCardDecompose::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjCardDecompose.msg)
}
inline void SMjCardDecompose::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjCardDecompose.msg)
}
inline std::string* SMjCardDecompose::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjCardDecompose::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjCardDecompose.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjCardDecompose::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjCardDecompose.msg)
}

// int32 num = 3;
inline void SMjCardDecompose::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjCardDecompose::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjCardDecompose::num() const {
  // @@protoc_insertion_point(field_get:mj.SMjCardDecompose.num)
  return _internal_num();
}
inline void SMjCardDecompose::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void SMjCardDecompose::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:mj.SMjCardDecompose.num)
}

// -------------------------------------------------------------------

// CMjTaskProcess

// -------------------------------------------------------------------

// SMjTaskProcess

// repeated .mj.BMjTaskProcess list = 3;
inline int SMjTaskProcess::_internal_list_size() const {
  return list_.size();
}
inline int SMjTaskProcess::list_size() const {
  return _internal_list_size();
}
inline void SMjTaskProcess::clear_list() {
  list_.Clear();
}
inline ::mj::BMjTaskProcess* SMjTaskProcess::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:mj.SMjTaskProcess.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjTaskProcess >*
SMjTaskProcess::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:mj.SMjTaskProcess.list)
  return &list_;
}
inline const ::mj::BMjTaskProcess& SMjTaskProcess::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::mj::BMjTaskProcess& SMjTaskProcess::list(int index) const {
  // @@protoc_insertion_point(field_get:mj.SMjTaskProcess.list)
  return _internal_list(index);
}
inline ::mj::BMjTaskProcess* SMjTaskProcess::_internal_add_list() {
  return list_.Add();
}
inline ::mj::BMjTaskProcess* SMjTaskProcess::add_list() {
  // @@protoc_insertion_point(field_add:mj.SMjTaskProcess.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjTaskProcess >&
SMjTaskProcess::list() const {
  // @@protoc_insertion_point(field_list:mj.SMjTaskProcess.list)
  return list_;
}

// -------------------------------------------------------------------

// BMjTaskProcess

// int32 taskId = 1;
inline void BMjTaskProcess::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjTaskProcess::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjTaskProcess::taskid() const {
  // @@protoc_insertion_point(field_get:mj.BMjTaskProcess.taskId)
  return _internal_taskid();
}
inline void BMjTaskProcess::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void BMjTaskProcess::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:mj.BMjTaskProcess.taskId)
}

// int32 process = 2;
inline void BMjTaskProcess::clear_process() {
  process_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjTaskProcess::_internal_process() const {
  return process_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjTaskProcess::process() const {
  // @@protoc_insertion_point(field_get:mj.BMjTaskProcess.process)
  return _internal_process();
}
inline void BMjTaskProcess::_internal_set_process(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  process_ = value;
}
inline void BMjTaskProcess::set_process(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_process(value);
  // @@protoc_insertion_point(field_set:mj.BMjTaskProcess.process)
}

// int32 status = 3;
inline void BMjTaskProcess::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjTaskProcess::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjTaskProcess::status() const {
  // @@protoc_insertion_point(field_get:mj.BMjTaskProcess.status)
  return _internal_status();
}
inline void BMjTaskProcess::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void BMjTaskProcess::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mj.BMjTaskProcess.status)
}

// -------------------------------------------------------------------

// CMjGetTaskReward

// int32 taskId = 1;
inline void CMjGetTaskReward::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjGetTaskReward::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjGetTaskReward::taskid() const {
  // @@protoc_insertion_point(field_get:mj.CMjGetTaskReward.taskId)
  return _internal_taskid();
}
inline void CMjGetTaskReward::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void CMjGetTaskReward::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:mj.CMjGetTaskReward.taskId)
}

// -------------------------------------------------------------------

// SMjGetTaskReward

// int32 state = 1;
inline void SMjGetTaskReward::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::state() const {
  // @@protoc_insertion_point(field_get:mj.SMjGetTaskReward.state)
  return _internal_state();
}
inline void SMjGetTaskReward::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SMjGetTaskReward::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mj.SMjGetTaskReward.state)
}

// string msg = 2;
inline void SMjGetTaskReward::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjGetTaskReward::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjGetTaskReward.msg)
  return _internal_msg();
}
inline void SMjGetTaskReward::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjGetTaskReward.msg)
}
inline std::string* SMjGetTaskReward::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjGetTaskReward.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjGetTaskReward::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjGetTaskReward::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjGetTaskReward::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjGetTaskReward.msg)
}
inline void SMjGetTaskReward::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjGetTaskReward.msg)
}
inline void SMjGetTaskReward::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjGetTaskReward.msg)
}
inline std::string* SMjGetTaskReward::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjGetTaskReward::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjGetTaskReward.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjGetTaskReward::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjGetTaskReward.msg)
}

// int32 taskId = 3;
inline void SMjGetTaskReward::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::taskid() const {
  // @@protoc_insertion_point(field_get:mj.SMjGetTaskReward.taskId)
  return _internal_taskid();
}
inline void SMjGetTaskReward::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void SMjGetTaskReward::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:mj.SMjGetTaskReward.taskId)
}

// int32 rewardType = 4;
inline void SMjGetTaskReward::clear_rewardtype() {
  rewardtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::_internal_rewardtype() const {
  return rewardtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::rewardtype() const {
  // @@protoc_insertion_point(field_get:mj.SMjGetTaskReward.rewardType)
  return _internal_rewardtype();
}
inline void SMjGetTaskReward::_internal_set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewardtype_ = value;
}
inline void SMjGetTaskReward::set_rewardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rewardtype(value);
  // @@protoc_insertion_point(field_set:mj.SMjGetTaskReward.rewardType)
}

// int32 YuanLiNum = 5;
inline void SMjGetTaskReward::clear_yuanlinum() {
  yuanlinum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::_internal_yuanlinum() const {
  return yuanlinum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::yuanlinum() const {
  // @@protoc_insertion_point(field_get:mj.SMjGetTaskReward.YuanLiNum)
  return _internal_yuanlinum();
}
inline void SMjGetTaskReward::_internal_set_yuanlinum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yuanlinum_ = value;
}
inline void SMjGetTaskReward::set_yuanlinum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yuanlinum(value);
  // @@protoc_insertion_point(field_set:mj.SMjGetTaskReward.YuanLiNum)
}

// int32 CardId = 6;
inline void SMjGetTaskReward::clear_cardid() {
  cardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::_internal_cardid() const {
  return cardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjGetTaskReward::cardid() const {
  // @@protoc_insertion_point(field_get:mj.SMjGetTaskReward.CardId)
  return _internal_cardid();
}
inline void SMjGetTaskReward::_internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardid_ = value;
}
inline void SMjGetTaskReward::set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardid(value);
  // @@protoc_insertion_point(field_set:mj.SMjGetTaskReward.CardId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mj

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mj::MjCardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mj::MjCardType>() {
  return ::mj::MjCardType_descriptor();
}
template <> struct is_proto_enum< ::mj::MjCardState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mj::MjCardState>() {
  return ::mj::MjCardState_descriptor();
}
template <> struct is_proto_enum< ::mj::MjTaskStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mj::MjTaskStatus>() {
  return ::mj::MjTaskStatus_descriptor();
}
template <> struct is_proto_enum< ::mj::MjTaskRewardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mj::MjTaskRewardType>() {
  return ::mj::MjTaskRewardType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mjCard_2eproto
