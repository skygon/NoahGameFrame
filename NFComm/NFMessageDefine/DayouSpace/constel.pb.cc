// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: constel.proto

#include "constel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace horoscope {
class CConstelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CConstel> _instance;
} _CConstel_default_instance_;
class SConstelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SConstel> _instance;
} _SConstel_default_instance_;
class CSaveConstelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSaveConstel> _instance;
} _CSaveConstel_default_instance_;
class SSaveConstelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSaveConstel> _instance;
} _SSaveConstel_default_instance_;
class SUserConstelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SUserConstelInfo> _instance;
} _SUserConstelInfo_default_instance_;
}  // namespace horoscope
static void InitDefaultsscc_info_CConstel_constel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::horoscope::_CConstel_default_instance_;
    new (ptr) ::horoscope::CConstel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::horoscope::CConstel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CConstel_constel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CConstel_constel_2eproto}, {}};

static void InitDefaultsscc_info_CSaveConstel_constel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::horoscope::_CSaveConstel_default_instance_;
    new (ptr) ::horoscope::CSaveConstel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::horoscope::CSaveConstel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSaveConstel_constel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSaveConstel_constel_2eproto}, {}};

static void InitDefaultsscc_info_SConstel_constel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::horoscope::_SConstel_default_instance_;
    new (ptr) ::horoscope::SConstel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::horoscope::SConstel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SConstel_constel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SConstel_constel_2eproto}, {}};

static void InitDefaultsscc_info_SSaveConstel_constel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::horoscope::_SSaveConstel_default_instance_;
    new (ptr) ::horoscope::SSaveConstel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::horoscope::SSaveConstel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSaveConstel_constel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSaveConstel_constel_2eproto}, {}};

static void InitDefaultsscc_info_SUserConstelInfo_constel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::horoscope::_SUserConstelInfo_default_instance_;
    new (ptr) ::horoscope::SUserConstelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::horoscope::SUserConstelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUserConstelInfo_constel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SUserConstelInfo_constel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_constel_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_constel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_constel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_constel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::horoscope::CConstel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::horoscope::CConstel, constelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::horoscope::SConstel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::horoscope::SConstel, uidlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::horoscope::CSaveConstel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::horoscope::CSaveConstel, constel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::horoscope::SSaveConstel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::horoscope::SSaveConstel, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::horoscope::SUserConstelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::horoscope::SUserConstelInfo, constelid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::horoscope::CConstel)},
  { 6, -1, sizeof(::horoscope::SConstel)},
  { 12, -1, sizeof(::horoscope::CSaveConstel)},
  { 18, -1, sizeof(::horoscope::SSaveConstel)},
  { 24, -1, sizeof(::horoscope::SUserConstelInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::horoscope::_CConstel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::horoscope::_SConstel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::horoscope::_CSaveConstel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::horoscope::_SSaveConstel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::horoscope::_SUserConstelInfo_default_instance_),
};

const char descriptor_table_protodef_constel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rconstel.proto\022\thoroscope\"\035\n\010CConstel\022\021"
  "\n\tconstelID\030\001 \001(\005\"\033\n\010SConstel\022\017\n\007uidList"
  "\030\001 \003(\005\"\037\n\014CSaveConstel\022\017\n\007constel\030\001 \001(\005\""
  "\034\n\014SSaveConstel\022\014\n\004data\030\001 \001(\005\"%\n\020SUserCo"
  "nstelInfo\022\021\n\tconstelId\030\001 \001(\005B#\n\030com.dayo"
  "u.space.protobufB\007Constelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_constel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_constel_2eproto_sccs[5] = {
  &scc_info_CConstel_constel_2eproto.base,
  &scc_info_CSaveConstel_constel_2eproto.base,
  &scc_info_SConstel_constel_2eproto.base,
  &scc_info_SSaveConstel_constel_2eproto.base,
  &scc_info_SUserConstelInfo_constel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_constel_2eproto_once;
static bool descriptor_table_constel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_constel_2eproto = {
  &descriptor_table_constel_2eproto_initialized, descriptor_table_protodef_constel_2eproto, "constel.proto", 233,
  &descriptor_table_constel_2eproto_once, descriptor_table_constel_2eproto_sccs, descriptor_table_constel_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_constel_2eproto::offsets,
  file_level_metadata_constel_2eproto, 5, file_level_enum_descriptors_constel_2eproto, file_level_service_descriptors_constel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_constel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_constel_2eproto), true);
namespace horoscope {

// ===================================================================

void CConstel::InitAsDefaultInstance() {
}
class CConstel::_Internal {
 public:
};

CConstel::CConstel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:horoscope.CConstel)
}
CConstel::CConstel(const CConstel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  constelid_ = from.constelid_;
  // @@protoc_insertion_point(copy_constructor:horoscope.CConstel)
}

void CConstel::SharedCtor() {
  constelid_ = 0;
}

CConstel::~CConstel() {
  // @@protoc_insertion_point(destructor:horoscope.CConstel)
  SharedDtor();
}

void CConstel::SharedDtor() {
}

void CConstel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CConstel& CConstel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CConstel_constel_2eproto.base);
  return *internal_default_instance();
}


void CConstel::Clear() {
// @@protoc_insertion_point(message_clear_start:horoscope.CConstel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constelid_ = 0;
  _internal_metadata_.Clear();
}

const char* CConstel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 constelID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          constelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CConstel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:horoscope.CConstel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 constelID = 1;
  if (this->constelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_constelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:horoscope.CConstel)
  return target;
}

size_t CConstel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:horoscope.CConstel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 constelID = 1;
  if (this->constelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_constelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CConstel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:horoscope.CConstel)
  GOOGLE_DCHECK_NE(&from, this);
  const CConstel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CConstel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:horoscope.CConstel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:horoscope.CConstel)
    MergeFrom(*source);
  }
}

void CConstel::MergeFrom(const CConstel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:horoscope.CConstel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.constelid() != 0) {
    _internal_set_constelid(from._internal_constelid());
  }
}

void CConstel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:horoscope.CConstel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CConstel::CopyFrom(const CConstel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:horoscope.CConstel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CConstel::IsInitialized() const {
  return true;
}

void CConstel::InternalSwap(CConstel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(constelid_, other->constelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CConstel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SConstel::InitAsDefaultInstance() {
}
class SConstel::_Internal {
 public:
};

SConstel::SConstel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:horoscope.SConstel)
}
SConstel::SConstel(const SConstel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:horoscope.SConstel)
}

void SConstel::SharedCtor() {
}

SConstel::~SConstel() {
  // @@protoc_insertion_point(destructor:horoscope.SConstel)
  SharedDtor();
}

void SConstel::SharedDtor() {
}

void SConstel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SConstel& SConstel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SConstel_constel_2eproto.base);
  return *internal_default_instance();
}


void SConstel::Clear() {
// @@protoc_insertion_point(message_clear_start:horoscope.SConstel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SConstel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 uidList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SConstel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:horoscope.SConstel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uidList = 1;
  {
    int byte_size = _uidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uidlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:horoscope.SConstel)
  return target;
}

size_t SConstel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:horoscope.SConstel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uidList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SConstel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:horoscope.SConstel)
  GOOGLE_DCHECK_NE(&from, this);
  const SConstel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SConstel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:horoscope.SConstel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:horoscope.SConstel)
    MergeFrom(*source);
  }
}

void SConstel::MergeFrom(const SConstel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:horoscope.SConstel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
}

void SConstel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:horoscope.SConstel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SConstel::CopyFrom(const SConstel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:horoscope.SConstel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SConstel::IsInitialized() const {
  return true;
}

void SConstel::InternalSwap(SConstel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uidlist_.InternalSwap(&other->uidlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SConstel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSaveConstel::InitAsDefaultInstance() {
}
class CSaveConstel::_Internal {
 public:
};

CSaveConstel::CSaveConstel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:horoscope.CSaveConstel)
}
CSaveConstel::CSaveConstel(const CSaveConstel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  constel_ = from.constel_;
  // @@protoc_insertion_point(copy_constructor:horoscope.CSaveConstel)
}

void CSaveConstel::SharedCtor() {
  constel_ = 0;
}

CSaveConstel::~CSaveConstel() {
  // @@protoc_insertion_point(destructor:horoscope.CSaveConstel)
  SharedDtor();
}

void CSaveConstel::SharedDtor() {
}

void CSaveConstel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSaveConstel& CSaveConstel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSaveConstel_constel_2eproto.base);
  return *internal_default_instance();
}


void CSaveConstel::Clear() {
// @@protoc_insertion_point(message_clear_start:horoscope.CSaveConstel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constel_ = 0;
  _internal_metadata_.Clear();
}

const char* CSaveConstel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 constel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          constel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSaveConstel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:horoscope.CSaveConstel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 constel = 1;
  if (this->constel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_constel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:horoscope.CSaveConstel)
  return target;
}

size_t CSaveConstel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:horoscope.CSaveConstel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 constel = 1;
  if (this->constel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_constel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSaveConstel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:horoscope.CSaveConstel)
  GOOGLE_DCHECK_NE(&from, this);
  const CSaveConstel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSaveConstel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:horoscope.CSaveConstel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:horoscope.CSaveConstel)
    MergeFrom(*source);
  }
}

void CSaveConstel::MergeFrom(const CSaveConstel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:horoscope.CSaveConstel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.constel() != 0) {
    _internal_set_constel(from._internal_constel());
  }
}

void CSaveConstel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:horoscope.CSaveConstel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSaveConstel::CopyFrom(const CSaveConstel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:horoscope.CSaveConstel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSaveConstel::IsInitialized() const {
  return true;
}

void CSaveConstel::InternalSwap(CSaveConstel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(constel_, other->constel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSaveConstel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSaveConstel::InitAsDefaultInstance() {
}
class SSaveConstel::_Internal {
 public:
};

SSaveConstel::SSaveConstel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:horoscope.SSaveConstel)
}
SSaveConstel::SSaveConstel(const SSaveConstel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:horoscope.SSaveConstel)
}

void SSaveConstel::SharedCtor() {
  data_ = 0;
}

SSaveConstel::~SSaveConstel() {
  // @@protoc_insertion_point(destructor:horoscope.SSaveConstel)
  SharedDtor();
}

void SSaveConstel::SharedDtor() {
}

void SSaveConstel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSaveConstel& SSaveConstel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSaveConstel_constel_2eproto.base);
  return *internal_default_instance();
}


void SSaveConstel::Clear() {
// @@protoc_insertion_point(message_clear_start:horoscope.SSaveConstel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = 0;
  _internal_metadata_.Clear();
}

const char* SSaveConstel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSaveConstel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:horoscope.SSaveConstel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:horoscope.SSaveConstel)
  return target;
}

size_t SSaveConstel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:horoscope.SSaveConstel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSaveConstel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:horoscope.SSaveConstel)
  GOOGLE_DCHECK_NE(&from, this);
  const SSaveConstel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSaveConstel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:horoscope.SSaveConstel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:horoscope.SSaveConstel)
    MergeFrom(*source);
  }
}

void SSaveConstel::MergeFrom(const SSaveConstel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:horoscope.SSaveConstel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
}

void SSaveConstel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:horoscope.SSaveConstel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSaveConstel::CopyFrom(const SSaveConstel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:horoscope.SSaveConstel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSaveConstel::IsInitialized() const {
  return true;
}

void SSaveConstel::InternalSwap(SSaveConstel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSaveConstel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SUserConstelInfo::InitAsDefaultInstance() {
}
class SUserConstelInfo::_Internal {
 public:
};

SUserConstelInfo::SUserConstelInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:horoscope.SUserConstelInfo)
}
SUserConstelInfo::SUserConstelInfo(const SUserConstelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  constelid_ = from.constelid_;
  // @@protoc_insertion_point(copy_constructor:horoscope.SUserConstelInfo)
}

void SUserConstelInfo::SharedCtor() {
  constelid_ = 0;
}

SUserConstelInfo::~SUserConstelInfo() {
  // @@protoc_insertion_point(destructor:horoscope.SUserConstelInfo)
  SharedDtor();
}

void SUserConstelInfo::SharedDtor() {
}

void SUserConstelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SUserConstelInfo& SUserConstelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SUserConstelInfo_constel_2eproto.base);
  return *internal_default_instance();
}


void SUserConstelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:horoscope.SUserConstelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constelid_ = 0;
  _internal_metadata_.Clear();
}

const char* SUserConstelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 constelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          constelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUserConstelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:horoscope.SUserConstelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 constelId = 1;
  if (this->constelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_constelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:horoscope.SUserConstelInfo)
  return target;
}

size_t SUserConstelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:horoscope.SUserConstelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 constelId = 1;
  if (this->constelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_constelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUserConstelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:horoscope.SUserConstelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SUserConstelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SUserConstelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:horoscope.SUserConstelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:horoscope.SUserConstelInfo)
    MergeFrom(*source);
  }
}

void SUserConstelInfo::MergeFrom(const SUserConstelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:horoscope.SUserConstelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.constelid() != 0) {
    _internal_set_constelid(from._internal_constelid());
  }
}

void SUserConstelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:horoscope.SUserConstelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUserConstelInfo::CopyFrom(const SUserConstelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:horoscope.SUserConstelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUserConstelInfo::IsInitialized() const {
  return true;
}

void SUserConstelInfo::InternalSwap(SUserConstelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(constelid_, other->constelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SUserConstelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace horoscope
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::horoscope::CConstel* Arena::CreateMaybeMessage< ::horoscope::CConstel >(Arena* arena) {
  return Arena::CreateInternal< ::horoscope::CConstel >(arena);
}
template<> PROTOBUF_NOINLINE ::horoscope::SConstel* Arena::CreateMaybeMessage< ::horoscope::SConstel >(Arena* arena) {
  return Arena::CreateInternal< ::horoscope::SConstel >(arena);
}
template<> PROTOBUF_NOINLINE ::horoscope::CSaveConstel* Arena::CreateMaybeMessage< ::horoscope::CSaveConstel >(Arena* arena) {
  return Arena::CreateInternal< ::horoscope::CSaveConstel >(arena);
}
template<> PROTOBUF_NOINLINE ::horoscope::SSaveConstel* Arena::CreateMaybeMessage< ::horoscope::SSaveConstel >(Arena* arena) {
  return Arena::CreateInternal< ::horoscope::SSaveConstel >(arena);
}
template<> PROTOBUF_NOINLINE ::horoscope::SUserConstelInfo* Arena::CreateMaybeMessage< ::horoscope::SUserConstelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::horoscope::SUserConstelInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
