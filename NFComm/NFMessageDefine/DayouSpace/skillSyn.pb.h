// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skillSyn.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skillSyn_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skillSyn_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "position.pb.h"
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skillSyn_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skillSyn_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skillSyn_2eproto;
namespace skillSyn {
class CSkillSyn;
class CSkillSynDefaultTypeInternal;
extern CSkillSynDefaultTypeInternal _CSkillSyn_default_instance_;
class SBroadGift;
class SBroadGiftDefaultTypeInternal;
extern SBroadGiftDefaultTypeInternal _SBroadGift_default_instance_;
class SSkillSyn;
class SSkillSynDefaultTypeInternal;
extern SSkillSynDefaultTypeInternal _SSkillSyn_default_instance_;
}  // namespace skillSyn
PROTOBUF_NAMESPACE_OPEN
template<> ::skillSyn::CSkillSyn* Arena::CreateMaybeMessage<::skillSyn::CSkillSyn>(Arena*);
template<> ::skillSyn::SBroadGift* Arena::CreateMaybeMessage<::skillSyn::SBroadGift>(Arena*);
template<> ::skillSyn::SSkillSyn* Arena::CreateMaybeMessage<::skillSyn::SSkillSyn>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skillSyn {

// ===================================================================

class CSkillSyn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skillSyn.CSkillSyn) */ {
 public:
  CSkillSyn();
  virtual ~CSkillSyn();

  CSkillSyn(const CSkillSyn& from);
  CSkillSyn(CSkillSyn&& from) noexcept
    : CSkillSyn() {
    *this = ::std::move(from);
  }

  inline CSkillSyn& operator=(const CSkillSyn& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSkillSyn& operator=(CSkillSyn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSkillSyn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSkillSyn* internal_default_instance() {
    return reinterpret_cast<const CSkillSyn*>(
               &_CSkillSyn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSkillSyn& a, CSkillSyn& b) {
    a.Swap(&b);
  }
  inline void Swap(CSkillSyn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSkillSyn* New() const final {
    return CreateMaybeMessage<CSkillSyn>(nullptr);
  }

  CSkillSyn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSkillSyn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSkillSyn& from);
  void MergeFrom(const CSkillSyn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSkillSyn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skillSyn.CSkillSyn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skillSyn_2eproto);
    return ::descriptor_table_skillSyn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosListFieldNumber = 2,
    kActionIdFieldNumber = 1,
    kSendToIdFieldNumber = 3,
  };
  // .vector.PVector3 posList = 2;
  bool has_poslist() const;
  private:
  bool _internal_has_poslist() const;
  public:
  void clear_poslist();
  const ::vector::PVector3& poslist() const;
  ::vector::PVector3* release_poslist();
  ::vector::PVector3* mutable_poslist();
  void set_allocated_poslist(::vector::PVector3* poslist);
  private:
  const ::vector::PVector3& _internal_poslist() const;
  ::vector::PVector3* _internal_mutable_poslist();
  public:

  // int32 actionId = 1;
  void clear_actionid();
  ::PROTOBUF_NAMESPACE_ID::int32 actionid() const;
  void set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionid() const;
  void _internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sendToId = 3;
  void clear_sendtoid();
  ::PROTOBUF_NAMESPACE_ID::int32 sendtoid() const;
  void set_sendtoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sendtoid() const;
  void _internal_set_sendtoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:skillSyn.CSkillSyn)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vector::PVector3* poslist_;
  ::PROTOBUF_NAMESPACE_ID::int32 actionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sendtoid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skillSyn_2eproto;
};
// -------------------------------------------------------------------

class SSkillSyn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skillSyn.SSkillSyn) */ {
 public:
  SSkillSyn();
  virtual ~SSkillSyn();

  SSkillSyn(const SSkillSyn& from);
  SSkillSyn(SSkillSyn&& from) noexcept
    : SSkillSyn() {
    *this = ::std::move(from);
  }

  inline SSkillSyn& operator=(const SSkillSyn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSkillSyn& operator=(SSkillSyn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSkillSyn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSkillSyn* internal_default_instance() {
    return reinterpret_cast<const SSkillSyn*>(
               &_SSkillSyn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSkillSyn& a, SSkillSyn& b) {
    a.Swap(&b);
  }
  inline void Swap(SSkillSyn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSkillSyn* New() const final {
    return CreateMaybeMessage<SSkillSyn>(nullptr);
  }

  SSkillSyn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSkillSyn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSkillSyn& from);
  void MergeFrom(const SSkillSyn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSkillSyn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skillSyn.SSkillSyn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skillSyn_2eproto);
    return ::descriptor_table_skillSyn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kActionIdFieldNumber = 2,
  };
  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 actionId = 2;
  void clear_actionid();
  ::PROTOBUF_NAMESPACE_ID::int32 actionid() const;
  void set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionid() const;
  void _internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:skillSyn.SSkillSyn)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 actionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skillSyn_2eproto;
};
// -------------------------------------------------------------------

class SBroadGift :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skillSyn.SBroadGift) */ {
 public:
  SBroadGift();
  virtual ~SBroadGift();

  SBroadGift(const SBroadGift& from);
  SBroadGift(SBroadGift&& from) noexcept
    : SBroadGift() {
    *this = ::std::move(from);
  }

  inline SBroadGift& operator=(const SBroadGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBroadGift& operator=(SBroadGift&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBroadGift& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBroadGift* internal_default_instance() {
    return reinterpret_cast<const SBroadGift*>(
               &_SBroadGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SBroadGift& a, SBroadGift& b) {
    a.Swap(&b);
  }
  inline void Swap(SBroadGift* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBroadGift* New() const final {
    return CreateMaybeMessage<SBroadGift>(nullptr);
  }

  SBroadGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBroadGift>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBroadGift& from);
  void MergeFrom(const SBroadGift& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBroadGift* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skillSyn.SBroadGift";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skillSyn_2eproto);
    return ::descriptor_table_skillSyn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kPositionFieldNumber = 4,
    kAvatarKeyFieldNumber = 1,
    kActionIdFieldNumber = 3,
  };
  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // .position.BPosition position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::position::BPosition& position() const;
  ::position::BPosition* release_position();
  ::position::BPosition* mutable_position();
  void set_allocated_position(::position::BPosition* position);
  private:
  const ::position::BPosition& _internal_position() const;
  ::position::BPosition* _internal_mutable_position();
  public:

  // int32 avatarKey = 1;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 actionId = 3;
  void clear_actionid();
  ::PROTOBUF_NAMESPACE_ID::int32 actionid() const;
  void set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionid() const;
  void _internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:skillSyn.SBroadGift)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::position::BPosition* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 actionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skillSyn_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSkillSyn

// int32 actionId = 1;
inline void CSkillSyn::clear_actionid() {
  actionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSkillSyn::_internal_actionid() const {
  return actionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSkillSyn::actionid() const {
  // @@protoc_insertion_point(field_get:skillSyn.CSkillSyn.actionId)
  return _internal_actionid();
}
inline void CSkillSyn::_internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actionid_ = value;
}
inline void CSkillSyn::set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_actionid(value);
  // @@protoc_insertion_point(field_set:skillSyn.CSkillSyn.actionId)
}

// .vector.PVector3 posList = 2;
inline bool CSkillSyn::_internal_has_poslist() const {
  return this != internal_default_instance() && poslist_ != nullptr;
}
inline bool CSkillSyn::has_poslist() const {
  return _internal_has_poslist();
}
inline const ::vector::PVector3& CSkillSyn::_internal_poslist() const {
  const ::vector::PVector3* p = poslist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& CSkillSyn::poslist() const {
  // @@protoc_insertion_point(field_get:skillSyn.CSkillSyn.posList)
  return _internal_poslist();
}
inline ::vector::PVector3* CSkillSyn::release_poslist() {
  // @@protoc_insertion_point(field_release:skillSyn.CSkillSyn.posList)
  
  ::vector::PVector3* temp = poslist_;
  poslist_ = nullptr;
  return temp;
}
inline ::vector::PVector3* CSkillSyn::_internal_mutable_poslist() {
  
  if (poslist_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    poslist_ = p;
  }
  return poslist_;
}
inline ::vector::PVector3* CSkillSyn::mutable_poslist() {
  // @@protoc_insertion_point(field_mutable:skillSyn.CSkillSyn.posList)
  return _internal_mutable_poslist();
}
inline void CSkillSyn::set_allocated_poslist(::vector::PVector3* poslist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(poslist_);
  }
  if (poslist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      poslist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poslist, submessage_arena);
    }
    
  } else {
    
  }
  poslist_ = poslist;
  // @@protoc_insertion_point(field_set_allocated:skillSyn.CSkillSyn.posList)
}

// int32 sendToId = 3;
inline void CSkillSyn::clear_sendtoid() {
  sendtoid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSkillSyn::_internal_sendtoid() const {
  return sendtoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSkillSyn::sendtoid() const {
  // @@protoc_insertion_point(field_get:skillSyn.CSkillSyn.sendToId)
  return _internal_sendtoid();
}
inline void CSkillSyn::_internal_set_sendtoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sendtoid_ = value;
}
inline void CSkillSyn::set_sendtoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sendtoid(value);
  // @@protoc_insertion_point(field_set:skillSyn.CSkillSyn.sendToId)
}

// -------------------------------------------------------------------

// SSkillSyn

// int32 code = 1;
inline void SSkillSyn::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSkillSyn::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSkillSyn::code() const {
  // @@protoc_insertion_point(field_get:skillSyn.SSkillSyn.code)
  return _internal_code();
}
inline void SSkillSyn::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SSkillSyn::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:skillSyn.SSkillSyn.code)
}

// int32 actionId = 2;
inline void SSkillSyn::clear_actionid() {
  actionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSkillSyn::_internal_actionid() const {
  return actionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSkillSyn::actionid() const {
  // @@protoc_insertion_point(field_get:skillSyn.SSkillSyn.actionId)
  return _internal_actionid();
}
inline void SSkillSyn::_internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actionid_ = value;
}
inline void SSkillSyn::set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_actionid(value);
  // @@protoc_insertion_point(field_set:skillSyn.SSkillSyn.actionId)
}

// -------------------------------------------------------------------

// SBroadGift

// int32 avatarKey = 1;
inline void SBroadGift::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadGift::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadGift::avatarkey() const {
  // @@protoc_insertion_point(field_get:skillSyn.SBroadGift.avatarKey)
  return _internal_avatarkey();
}
inline void SBroadGift::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void SBroadGift::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:skillSyn.SBroadGift.avatarKey)
}

// string nick = 2;
inline void SBroadGift::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SBroadGift::nick() const {
  // @@protoc_insertion_point(field_get:skillSyn.SBroadGift.nick)
  return _internal_nick();
}
inline void SBroadGift::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:skillSyn.SBroadGift.nick)
}
inline std::string* SBroadGift::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:skillSyn.SBroadGift.nick)
  return _internal_mutable_nick();
}
inline const std::string& SBroadGift::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void SBroadGift::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SBroadGift::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:skillSyn.SBroadGift.nick)
}
inline void SBroadGift::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skillSyn.SBroadGift.nick)
}
inline void SBroadGift::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skillSyn.SBroadGift.nick)
}
inline std::string* SBroadGift::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SBroadGift::release_nick() {
  // @@protoc_insertion_point(field_release:skillSyn.SBroadGift.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SBroadGift::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:skillSyn.SBroadGift.nick)
}

// int32 actionId = 3;
inline void SBroadGift::clear_actionid() {
  actionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadGift::_internal_actionid() const {
  return actionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadGift::actionid() const {
  // @@protoc_insertion_point(field_get:skillSyn.SBroadGift.actionId)
  return _internal_actionid();
}
inline void SBroadGift::_internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actionid_ = value;
}
inline void SBroadGift::set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_actionid(value);
  // @@protoc_insertion_point(field_set:skillSyn.SBroadGift.actionId)
}

// .position.BPosition position = 4;
inline bool SBroadGift::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SBroadGift::has_position() const {
  return _internal_has_position();
}
inline const ::position::BPosition& SBroadGift::_internal_position() const {
  const ::position::BPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::BPosition*>(
      &::position::_BPosition_default_instance_);
}
inline const ::position::BPosition& SBroadGift::position() const {
  // @@protoc_insertion_point(field_get:skillSyn.SBroadGift.position)
  return _internal_position();
}
inline ::position::BPosition* SBroadGift::release_position() {
  // @@protoc_insertion_point(field_release:skillSyn.SBroadGift.position)
  
  ::position::BPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::position::BPosition* SBroadGift::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::BPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::position::BPosition* SBroadGift::mutable_position() {
  // @@protoc_insertion_point(field_mutable:skillSyn.SBroadGift.position)
  return _internal_mutable_position();
}
inline void SBroadGift::set_allocated_position(::position::BPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:skillSyn.SBroadGift.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace skillSyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skillSyn_2eproto
