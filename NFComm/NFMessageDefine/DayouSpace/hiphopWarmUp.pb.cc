// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hiphopWarmUp.proto

#include "hiphopWarmUp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hiphopWarmUp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPoster_hiphopWarmUp_2eproto;
namespace hiphop {
class CHiphopWarmUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHiphopWarmUp> _instance;
} _CHiphopWarmUp_default_instance_;
class BPosterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BPoster> _instance;
} _BPoster_default_instance_;
class SHiphopWarmUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopWarmUp> _instance;
} _SHiphopWarmUp_default_instance_;
class CHiphopListStarTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHiphopListStarToken> _instance;
} _CHiphopListStarToken_default_instance_;
class SHiphopListStarTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopListStarToken> _instance;
} _SHiphopListStarToken_default_instance_;
class CHiphopGetStarTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHiphopGetStarToken> _instance;
} _CHiphopGetStarToken_default_instance_;
class SHiphopGetStarTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopGetStarToken> _instance;
} _SHiphopGetStarToken_default_instance_;
class CHiphopUseStarTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHiphopUseStarToken> _instance;
} _CHiphopUseStarToken_default_instance_;
class SHiphopUseStarTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopUseStarToken> _instance;
} _SHiphopUseStarToken_default_instance_;
}  // namespace hiphop
static void InitDefaultsscc_info_BPoster_hiphopWarmUp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_BPoster_default_instance_;
    new (ptr) ::hiphop::BPoster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::BPoster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPoster_hiphopWarmUp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BPoster_hiphopWarmUp_2eproto}, {}};

static void InitDefaultsscc_info_CHiphopGetStarToken_hiphopWarmUp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_CHiphopGetStarToken_default_instance_;
    new (ptr) ::hiphop::CHiphopGetStarToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::CHiphopGetStarToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHiphopGetStarToken_hiphopWarmUp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHiphopGetStarToken_hiphopWarmUp_2eproto}, {}};

static void InitDefaultsscc_info_CHiphopListStarToken_hiphopWarmUp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_CHiphopListStarToken_default_instance_;
    new (ptr) ::hiphop::CHiphopListStarToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::CHiphopListStarToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHiphopListStarToken_hiphopWarmUp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHiphopListStarToken_hiphopWarmUp_2eproto}, {}};

static void InitDefaultsscc_info_CHiphopUseStarToken_hiphopWarmUp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_CHiphopUseStarToken_default_instance_;
    new (ptr) ::hiphop::CHiphopUseStarToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::CHiphopUseStarToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHiphopUseStarToken_hiphopWarmUp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHiphopUseStarToken_hiphopWarmUp_2eproto}, {}};

static void InitDefaultsscc_info_CHiphopWarmUp_hiphopWarmUp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_CHiphopWarmUp_default_instance_;
    new (ptr) ::hiphop::CHiphopWarmUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::CHiphopWarmUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHiphopWarmUp_hiphopWarmUp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHiphopWarmUp_hiphopWarmUp_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopGetStarToken_hiphopWarmUp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopGetStarToken_default_instance_;
    new (ptr) ::hiphop::SHiphopGetStarToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopGetStarToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHiphopGetStarToken_hiphopWarmUp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHiphopGetStarToken_hiphopWarmUp_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopListStarToken_hiphopWarmUp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopListStarToken_default_instance_;
    new (ptr) ::hiphop::SHiphopListStarToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopListStarToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHiphopListStarToken_hiphopWarmUp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHiphopListStarToken_hiphopWarmUp_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopUseStarToken_hiphopWarmUp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopUseStarToken_default_instance_;
    new (ptr) ::hiphop::SHiphopUseStarToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopUseStarToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHiphopUseStarToken_hiphopWarmUp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHiphopUseStarToken_hiphopWarmUp_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopWarmUp_hiphopWarmUp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopWarmUp_default_instance_;
    new (ptr) ::hiphop::SHiphopWarmUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopWarmUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SHiphopWarmUp_hiphopWarmUp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SHiphopWarmUp_hiphopWarmUp_2eproto}, {
      &scc_info_BPoster_hiphopWarmUp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hiphopWarmUp_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hiphopWarmUp_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hiphopWarmUp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hiphopWarmUp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopWarmUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::BPoster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::BPoster, goodsid_),
  PROTOBUF_FIELD_OFFSET(::hiphop::BPoster, pic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopWarmUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopWarmUp, posterlist_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopWarmUp, starttime_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopWarmUp, isfirst_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopWarmUp, currgoodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopListStarToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopListStarToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopListStarToken, ownedgoodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopGetStarToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopGetStarToken, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopGetStarToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopGetStarToken, goodsid_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopGetStarToken, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopUseStarToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopUseStarToken, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopUseStarToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopUseStarToken, goodsid_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopUseStarToken, res_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopUseStarToken, uid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hiphop::CHiphopWarmUp)},
  { 5, -1, sizeof(::hiphop::BPoster)},
  { 12, -1, sizeof(::hiphop::SHiphopWarmUp)},
  { 21, -1, sizeof(::hiphop::CHiphopListStarToken)},
  { 26, -1, sizeof(::hiphop::SHiphopListStarToken)},
  { 32, -1, sizeof(::hiphop::CHiphopGetStarToken)},
  { 38, -1, sizeof(::hiphop::SHiphopGetStarToken)},
  { 45, -1, sizeof(::hiphop::CHiphopUseStarToken)},
  { 51, -1, sizeof(::hiphop::SHiphopUseStarToken)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_CHiphopWarmUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_BPoster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopWarmUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_CHiphopListStarToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopListStarToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_CHiphopGetStarToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopGetStarToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_CHiphopUseStarToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopUseStarToken_default_instance_),
};

const char descriptor_table_protodef_hiphopWarmUp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022hiphopWarmUp.proto\022\006hiphop\"\017\n\rCHiphopW"
  "armUp\"\'\n\007BPoster\022\017\n\007goodsId\030\001 \001(\005\022\013\n\003pic"
  "\030\002 \001(\t\"m\n\rSHiphopWarmUp\022#\n\nposterList\030\001 "
  "\003(\0132\017.hiphop.BPoster\022\021\n\tstartTime\030\002 \001(\003\022"
  "\017\n\007isFirst\030\003 \001(\010\022\023\n\013currGoodsId\030\004 \001(\005\"\026\n"
  "\024CHiphopListStarToken\",\n\024SHiphopListStar"
  "Token\022\024\n\014ownedGoodsId\030\001 \003(\005\"&\n\023CHiphopGe"
  "tStarToken\022\017\n\007goodsId\030\001 \001(\005\"3\n\023SHiphopGe"
  "tStarToken\022\017\n\007goodsId\030\001 \001(\005\022\013\n\003res\030\002 \001(\005"
  "\"&\n\023CHiphopUseStarToken\022\017\n\007goodsId\030\001 \001(\005"
  "\"@\n\023SHiphopUseStarToken\022\017\n\007goodsId\030\001 \001(\005"
  "\022\013\n\003res\030\002 \001(\005\022\013\n\003uid\030\003 \001(\005B1\n\030com.dayou."
  "space.protobufB\014HiphopWarmUpZ\007./pb;pbb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hiphopWarmUp_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hiphopWarmUp_2eproto_sccs[9] = {
  &scc_info_BPoster_hiphopWarmUp_2eproto.base,
  &scc_info_CHiphopGetStarToken_hiphopWarmUp_2eproto.base,
  &scc_info_CHiphopListStarToken_hiphopWarmUp_2eproto.base,
  &scc_info_CHiphopUseStarToken_hiphopWarmUp_2eproto.base,
  &scc_info_CHiphopWarmUp_hiphopWarmUp_2eproto.base,
  &scc_info_SHiphopGetStarToken_hiphopWarmUp_2eproto.base,
  &scc_info_SHiphopListStarToken_hiphopWarmUp_2eproto.base,
  &scc_info_SHiphopUseStarToken_hiphopWarmUp_2eproto.base,
  &scc_info_SHiphopWarmUp_hiphopWarmUp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hiphopWarmUp_2eproto_once;
static bool descriptor_table_hiphopWarmUp_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hiphopWarmUp_2eproto = {
  &descriptor_table_hiphopWarmUp_2eproto_initialized, descriptor_table_protodef_hiphopWarmUp_2eproto, "hiphopWarmUp.proto", 525,
  &descriptor_table_hiphopWarmUp_2eproto_once, descriptor_table_hiphopWarmUp_2eproto_sccs, descriptor_table_hiphopWarmUp_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_hiphopWarmUp_2eproto::offsets,
  file_level_metadata_hiphopWarmUp_2eproto, 9, file_level_enum_descriptors_hiphopWarmUp_2eproto, file_level_service_descriptors_hiphopWarmUp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hiphopWarmUp_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hiphopWarmUp_2eproto), true);
namespace hiphop {

// ===================================================================

void CHiphopWarmUp::InitAsDefaultInstance() {
}
class CHiphopWarmUp::_Internal {
 public:
};

CHiphopWarmUp::CHiphopWarmUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.CHiphopWarmUp)
}
CHiphopWarmUp::CHiphopWarmUp(const CHiphopWarmUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hiphop.CHiphopWarmUp)
}

void CHiphopWarmUp::SharedCtor() {
}

CHiphopWarmUp::~CHiphopWarmUp() {
  // @@protoc_insertion_point(destructor:hiphop.CHiphopWarmUp)
  SharedDtor();
}

void CHiphopWarmUp::SharedDtor() {
}

void CHiphopWarmUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHiphopWarmUp& CHiphopWarmUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHiphopWarmUp_hiphopWarmUp_2eproto.base);
  return *internal_default_instance();
}


void CHiphopWarmUp::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.CHiphopWarmUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CHiphopWarmUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHiphopWarmUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.CHiphopWarmUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.CHiphopWarmUp)
  return target;
}

size_t CHiphopWarmUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.CHiphopWarmUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHiphopWarmUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.CHiphopWarmUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CHiphopWarmUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHiphopWarmUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.CHiphopWarmUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.CHiphopWarmUp)
    MergeFrom(*source);
  }
}

void CHiphopWarmUp::MergeFrom(const CHiphopWarmUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.CHiphopWarmUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHiphopWarmUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.CHiphopWarmUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHiphopWarmUp::CopyFrom(const CHiphopWarmUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.CHiphopWarmUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHiphopWarmUp::IsInitialized() const {
  return true;
}

void CHiphopWarmUp::InternalSwap(CHiphopWarmUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHiphopWarmUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BPoster::InitAsDefaultInstance() {
}
class BPoster::_Internal {
 public:
};

BPoster::BPoster()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.BPoster)
}
BPoster::BPoster(const BPoster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pic().empty()) {
    pic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pic_);
  }
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:hiphop.BPoster)
}

void BPoster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BPoster_hiphopWarmUp_2eproto.base);
  pic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodsid_ = 0;
}

BPoster::~BPoster() {
  // @@protoc_insertion_point(destructor:hiphop.BPoster)
  SharedDtor();
}

void BPoster::SharedDtor() {
  pic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BPoster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BPoster& BPoster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BPoster_hiphopWarmUp_2eproto.base);
  return *internal_default_instance();
}


void BPoster::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.BPoster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* BPoster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hiphop.BPoster.pic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BPoster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.BPoster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  // string pic = 2;
  if (this->pic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pic().data(), static_cast<int>(this->_internal_pic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hiphop.BPoster.pic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.BPoster)
  return target;
}

size_t BPoster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.BPoster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pic = 2;
  if (this->pic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pic());
  }

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BPoster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.BPoster)
  GOOGLE_DCHECK_NE(&from, this);
  const BPoster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BPoster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.BPoster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.BPoster)
    MergeFrom(*source);
  }
}

void BPoster::MergeFrom(const BPoster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.BPoster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pic().size() > 0) {

    pic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pic_);
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void BPoster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.BPoster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPoster::CopyFrom(const BPoster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.BPoster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPoster::IsInitialized() const {
  return true;
}

void BPoster::InternalSwap(BPoster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pic_.Swap(&other->pic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BPoster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopWarmUp::InitAsDefaultInstance() {
}
class SHiphopWarmUp::_Internal {
 public:
};

SHiphopWarmUp::SHiphopWarmUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopWarmUp)
}
SHiphopWarmUp::SHiphopWarmUp(const SHiphopWarmUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      posterlist_(from.posterlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&currgoodsid_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(currgoodsid_));
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopWarmUp)
}

void SHiphopWarmUp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHiphopWarmUp_hiphopWarmUp_2eproto.base);
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currgoodsid_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(currgoodsid_));
}

SHiphopWarmUp::~SHiphopWarmUp() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopWarmUp)
  SharedDtor();
}

void SHiphopWarmUp::SharedDtor() {
}

void SHiphopWarmUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopWarmUp& SHiphopWarmUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopWarmUp_hiphopWarmUp_2eproto.base);
  return *internal_default_instance();
}


void SHiphopWarmUp::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopWarmUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  posterlist_.Clear();
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currgoodsid_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(currgoodsid_));
  _internal_metadata_.Clear();
}

const char* SHiphopWarmUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hiphop.BPoster posterList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posterlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 startTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFirst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isfirst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currGoodsId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          currgoodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopWarmUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopWarmUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hiphop.BPoster posterList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_posterlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_posterlist(i), target, stream);
  }

  // int64 startTime = 2;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_starttime(), target);
  }

  // bool isFirst = 3;
  if (this->isfirst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isfirst(), target);
  }

  // int32 currGoodsId = 4;
  if (this->currgoodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_currgoodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopWarmUp)
  return target;
}

size_t SHiphopWarmUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopWarmUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hiphop.BPoster posterList = 1;
  total_size += 1UL * this->_internal_posterlist_size();
  for (const auto& msg : this->posterlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 startTime = 2;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_starttime());
  }

  // bool isFirst = 3;
  if (this->isfirst() != 0) {
    total_size += 1 + 1;
  }

  // int32 currGoodsId = 4;
  if (this->currgoodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currgoodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopWarmUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopWarmUp)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopWarmUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopWarmUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopWarmUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopWarmUp)
    MergeFrom(*source);
  }
}

void SHiphopWarmUp::MergeFrom(const SHiphopWarmUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopWarmUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  posterlist_.MergeFrom(from.posterlist_);
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.isfirst() != 0) {
    _internal_set_isfirst(from._internal_isfirst());
  }
  if (from.currgoodsid() != 0) {
    _internal_set_currgoodsid(from._internal_currgoodsid());
  }
}

void SHiphopWarmUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopWarmUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopWarmUp::CopyFrom(const SHiphopWarmUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopWarmUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopWarmUp::IsInitialized() const {
  return true;
}

void SHiphopWarmUp::InternalSwap(SHiphopWarmUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  posterlist_.InternalSwap(&other->posterlist_);
  swap(starttime_, other->starttime_);
  swap(isfirst_, other->isfirst_);
  swap(currgoodsid_, other->currgoodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopWarmUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHiphopListStarToken::InitAsDefaultInstance() {
}
class CHiphopListStarToken::_Internal {
 public:
};

CHiphopListStarToken::CHiphopListStarToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.CHiphopListStarToken)
}
CHiphopListStarToken::CHiphopListStarToken(const CHiphopListStarToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hiphop.CHiphopListStarToken)
}

void CHiphopListStarToken::SharedCtor() {
}

CHiphopListStarToken::~CHiphopListStarToken() {
  // @@protoc_insertion_point(destructor:hiphop.CHiphopListStarToken)
  SharedDtor();
}

void CHiphopListStarToken::SharedDtor() {
}

void CHiphopListStarToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHiphopListStarToken& CHiphopListStarToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHiphopListStarToken_hiphopWarmUp_2eproto.base);
  return *internal_default_instance();
}


void CHiphopListStarToken::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.CHiphopListStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CHiphopListStarToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHiphopListStarToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.CHiphopListStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.CHiphopListStarToken)
  return target;
}

size_t CHiphopListStarToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.CHiphopListStarToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHiphopListStarToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.CHiphopListStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CHiphopListStarToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHiphopListStarToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.CHiphopListStarToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.CHiphopListStarToken)
    MergeFrom(*source);
  }
}

void CHiphopListStarToken::MergeFrom(const CHiphopListStarToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.CHiphopListStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHiphopListStarToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.CHiphopListStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHiphopListStarToken::CopyFrom(const CHiphopListStarToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.CHiphopListStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHiphopListStarToken::IsInitialized() const {
  return true;
}

void CHiphopListStarToken::InternalSwap(CHiphopListStarToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHiphopListStarToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopListStarToken::InitAsDefaultInstance() {
}
class SHiphopListStarToken::_Internal {
 public:
};

SHiphopListStarToken::SHiphopListStarToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopListStarToken)
}
SHiphopListStarToken::SHiphopListStarToken(const SHiphopListStarToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ownedgoodsid_(from.ownedgoodsid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopListStarToken)
}

void SHiphopListStarToken::SharedCtor() {
}

SHiphopListStarToken::~SHiphopListStarToken() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopListStarToken)
  SharedDtor();
}

void SHiphopListStarToken::SharedDtor() {
}

void SHiphopListStarToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopListStarToken& SHiphopListStarToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopListStarToken_hiphopWarmUp_2eproto.base);
  return *internal_default_instance();
}


void SHiphopListStarToken::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopListStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ownedgoodsid_.Clear();
  _internal_metadata_.Clear();
}

const char* SHiphopListStarToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ownedGoodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ownedgoodsid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ownedgoodsid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopListStarToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopListStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ownedGoodsId = 1;
  {
    int byte_size = _ownedgoodsid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_ownedgoodsid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopListStarToken)
  return target;
}

size_t SHiphopListStarToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopListStarToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ownedGoodsId = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ownedgoodsid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ownedgoodsid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopListStarToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopListStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopListStarToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopListStarToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopListStarToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopListStarToken)
    MergeFrom(*source);
  }
}

void SHiphopListStarToken::MergeFrom(const SHiphopListStarToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopListStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ownedgoodsid_.MergeFrom(from.ownedgoodsid_);
}

void SHiphopListStarToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopListStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopListStarToken::CopyFrom(const SHiphopListStarToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopListStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopListStarToken::IsInitialized() const {
  return true;
}

void SHiphopListStarToken::InternalSwap(SHiphopListStarToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ownedgoodsid_.InternalSwap(&other->ownedgoodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopListStarToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHiphopGetStarToken::InitAsDefaultInstance() {
}
class CHiphopGetStarToken::_Internal {
 public:
};

CHiphopGetStarToken::CHiphopGetStarToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.CHiphopGetStarToken)
}
CHiphopGetStarToken::CHiphopGetStarToken(const CHiphopGetStarToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:hiphop.CHiphopGetStarToken)
}

void CHiphopGetStarToken::SharedCtor() {
  goodsid_ = 0;
}

CHiphopGetStarToken::~CHiphopGetStarToken() {
  // @@protoc_insertion_point(destructor:hiphop.CHiphopGetStarToken)
  SharedDtor();
}

void CHiphopGetStarToken::SharedDtor() {
}

void CHiphopGetStarToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHiphopGetStarToken& CHiphopGetStarToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHiphopGetStarToken_hiphopWarmUp_2eproto.base);
  return *internal_default_instance();
}


void CHiphopGetStarToken::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.CHiphopGetStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* CHiphopGetStarToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHiphopGetStarToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.CHiphopGetStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.CHiphopGetStarToken)
  return target;
}

size_t CHiphopGetStarToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.CHiphopGetStarToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHiphopGetStarToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.CHiphopGetStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CHiphopGetStarToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHiphopGetStarToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.CHiphopGetStarToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.CHiphopGetStarToken)
    MergeFrom(*source);
  }
}

void CHiphopGetStarToken::MergeFrom(const CHiphopGetStarToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.CHiphopGetStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CHiphopGetStarToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.CHiphopGetStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHiphopGetStarToken::CopyFrom(const CHiphopGetStarToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.CHiphopGetStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHiphopGetStarToken::IsInitialized() const {
  return true;
}

void CHiphopGetStarToken::InternalSwap(CHiphopGetStarToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHiphopGetStarToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopGetStarToken::InitAsDefaultInstance() {
}
class SHiphopGetStarToken::_Internal {
 public:
};

SHiphopGetStarToken::SHiphopGetStarToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopGetStarToken)
}
SHiphopGetStarToken::SHiphopGetStarToken(const SHiphopGetStarToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&goodsid_, &from.goodsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&goodsid_)) + sizeof(res_));
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopGetStarToken)
}

void SHiphopGetStarToken::SharedCtor() {
  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(res_));
}

SHiphopGetStarToken::~SHiphopGetStarToken() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopGetStarToken)
  SharedDtor();
}

void SHiphopGetStarToken::SharedDtor() {
}

void SHiphopGetStarToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopGetStarToken& SHiphopGetStarToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopGetStarToken_hiphopWarmUp_2eproto.base);
  return *internal_default_instance();
}


void SHiphopGetStarToken::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopGetStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(res_));
  _internal_metadata_.Clear();
}

const char* SHiphopGetStarToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopGetStarToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopGetStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  // int32 res = 2;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopGetStarToken)
  return target;
}

size_t SHiphopGetStarToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopGetStarToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 res = 2;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopGetStarToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopGetStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopGetStarToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopGetStarToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopGetStarToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopGetStarToken)
    MergeFrom(*source);
  }
}

void SHiphopGetStarToken::MergeFrom(const SHiphopGetStarToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopGetStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void SHiphopGetStarToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopGetStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopGetStarToken::CopyFrom(const SHiphopGetStarToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopGetStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopGetStarToken::IsInitialized() const {
  return true;
}

void SHiphopGetStarToken::InternalSwap(SHiphopGetStarToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopGetStarToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHiphopUseStarToken::InitAsDefaultInstance() {
}
class CHiphopUseStarToken::_Internal {
 public:
};

CHiphopUseStarToken::CHiphopUseStarToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.CHiphopUseStarToken)
}
CHiphopUseStarToken::CHiphopUseStarToken(const CHiphopUseStarToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:hiphop.CHiphopUseStarToken)
}

void CHiphopUseStarToken::SharedCtor() {
  goodsid_ = 0;
}

CHiphopUseStarToken::~CHiphopUseStarToken() {
  // @@protoc_insertion_point(destructor:hiphop.CHiphopUseStarToken)
  SharedDtor();
}

void CHiphopUseStarToken::SharedDtor() {
}

void CHiphopUseStarToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHiphopUseStarToken& CHiphopUseStarToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHiphopUseStarToken_hiphopWarmUp_2eproto.base);
  return *internal_default_instance();
}


void CHiphopUseStarToken::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.CHiphopUseStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* CHiphopUseStarToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHiphopUseStarToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.CHiphopUseStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.CHiphopUseStarToken)
  return target;
}

size_t CHiphopUseStarToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.CHiphopUseStarToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHiphopUseStarToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.CHiphopUseStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CHiphopUseStarToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHiphopUseStarToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.CHiphopUseStarToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.CHiphopUseStarToken)
    MergeFrom(*source);
  }
}

void CHiphopUseStarToken::MergeFrom(const CHiphopUseStarToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.CHiphopUseStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CHiphopUseStarToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.CHiphopUseStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHiphopUseStarToken::CopyFrom(const CHiphopUseStarToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.CHiphopUseStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHiphopUseStarToken::IsInitialized() const {
  return true;
}

void CHiphopUseStarToken::InternalSwap(CHiphopUseStarToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHiphopUseStarToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopUseStarToken::InitAsDefaultInstance() {
}
class SHiphopUseStarToken::_Internal {
 public:
};

SHiphopUseStarToken::SHiphopUseStarToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopUseStarToken)
}
SHiphopUseStarToken::SHiphopUseStarToken(const SHiphopUseStarToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&goodsid_, &from.goodsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&goodsid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopUseStarToken)
}

void SHiphopUseStarToken::SharedCtor() {
  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(uid_));
}

SHiphopUseStarToken::~SHiphopUseStarToken() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopUseStarToken)
  SharedDtor();
}

void SHiphopUseStarToken::SharedDtor() {
}

void SHiphopUseStarToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopUseStarToken& SHiphopUseStarToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopUseStarToken_hiphopWarmUp_2eproto.base);
  return *internal_default_instance();
}


void SHiphopUseStarToken::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopUseStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SHiphopUseStarToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopUseStarToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopUseStarToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  // int32 res = 2;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_res(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopUseStarToken)
  return target;
}

size_t SHiphopUseStarToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopUseStarToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 res = 2;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopUseStarToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopUseStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopUseStarToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopUseStarToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopUseStarToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopUseStarToken)
    MergeFrom(*source);
  }
}

void SHiphopUseStarToken::MergeFrom(const SHiphopUseStarToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopUseStarToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SHiphopUseStarToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopUseStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopUseStarToken::CopyFrom(const SHiphopUseStarToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopUseStarToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopUseStarToken::IsInitialized() const {
  return true;
}

void SHiphopUseStarToken::InternalSwap(SHiphopUseStarToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
  swap(res_, other->res_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopUseStarToken::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hiphop
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hiphop::CHiphopWarmUp* Arena::CreateMaybeMessage< ::hiphop::CHiphopWarmUp >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::CHiphopWarmUp >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::BPoster* Arena::CreateMaybeMessage< ::hiphop::BPoster >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::BPoster >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopWarmUp* Arena::CreateMaybeMessage< ::hiphop::SHiphopWarmUp >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopWarmUp >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::CHiphopListStarToken* Arena::CreateMaybeMessage< ::hiphop::CHiphopListStarToken >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::CHiphopListStarToken >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopListStarToken* Arena::CreateMaybeMessage< ::hiphop::SHiphopListStarToken >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopListStarToken >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::CHiphopGetStarToken* Arena::CreateMaybeMessage< ::hiphop::CHiphopGetStarToken >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::CHiphopGetStarToken >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopGetStarToken* Arena::CreateMaybeMessage< ::hiphop::SHiphopGetStarToken >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopGetStarToken >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::CHiphopUseStarToken* Arena::CreateMaybeMessage< ::hiphop::CHiphopUseStarToken >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::CHiphopUseStarToken >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopUseStarToken* Arena::CreateMaybeMessage< ::hiphop::SHiphopUseStarToken >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopUseStarToken >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
