// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cardVisitorList.proto

#include "cardVisitorList.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cardVisitorList_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BCardVisitorList_cardVisitorList_2eproto;
namespace cardVisitorList {
class BCardVisitorListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BCardVisitorList> _instance;
} _BCardVisitorList_default_instance_;
class CCardVisitorListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCardVisitorList> _instance;
} _CCardVisitorList_default_instance_;
class SCardVisitorListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCardVisitorList> _instance;
} _SCardVisitorList_default_instance_;
class CCardVisitNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCardVisitNumber> _instance;
} _CCardVisitNumber_default_instance_;
class SCardVisitNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCardVisitNumber> _instance;
} _SCardVisitNumber_default_instance_;
}  // namespace cardVisitorList
static void InitDefaultsscc_info_BCardVisitorList_cardVisitorList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cardVisitorList::_BCardVisitorList_default_instance_;
    new (ptr) ::cardVisitorList::BCardVisitorList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cardVisitorList::BCardVisitorList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BCardVisitorList_cardVisitorList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BCardVisitorList_cardVisitorList_2eproto}, {}};

static void InitDefaultsscc_info_CCardVisitNumber_cardVisitorList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cardVisitorList::_CCardVisitNumber_default_instance_;
    new (ptr) ::cardVisitorList::CCardVisitNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cardVisitorList::CCardVisitNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCardVisitNumber_cardVisitorList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCardVisitNumber_cardVisitorList_2eproto}, {}};

static void InitDefaultsscc_info_CCardVisitorList_cardVisitorList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cardVisitorList::_CCardVisitorList_default_instance_;
    new (ptr) ::cardVisitorList::CCardVisitorList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cardVisitorList::CCardVisitorList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCardVisitorList_cardVisitorList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCardVisitorList_cardVisitorList_2eproto}, {}};

static void InitDefaultsscc_info_SCardVisitNumber_cardVisitorList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cardVisitorList::_SCardVisitNumber_default_instance_;
    new (ptr) ::cardVisitorList::SCardVisitNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cardVisitorList::SCardVisitNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCardVisitNumber_cardVisitorList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCardVisitNumber_cardVisitorList_2eproto}, {}};

static void InitDefaultsscc_info_SCardVisitorList_cardVisitorList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cardVisitorList::_SCardVisitorList_default_instance_;
    new (ptr) ::cardVisitorList::SCardVisitorList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cardVisitorList::SCardVisitorList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCardVisitorList_cardVisitorList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCardVisitorList_cardVisitorList_2eproto}, {
      &scc_info_BCardVisitorList_cardVisitorList_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cardVisitorList_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cardVisitorList_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cardVisitorList_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cardVisitorList_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::BCardVisitorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::BCardVisitorList, uid_),
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::BCardVisitorList, headpic_),
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::BCardVisitorList, nick_),
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::BCardVisitorList, followstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::CCardVisitorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::CCardVisitorList, uid_),
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::CCardVisitorList, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::SCardVisitorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::SCardVisitorList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::CCardVisitNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::CCardVisitNumber, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::SCardVisitNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cardVisitorList::SCardVisitNumber, number_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cardVisitorList::BCardVisitorList)},
  { 9, -1, sizeof(::cardVisitorList::CCardVisitorList)},
  { 16, -1, sizeof(::cardVisitorList::SCardVisitorList)},
  { 22, -1, sizeof(::cardVisitorList::CCardVisitNumber)},
  { 28, -1, sizeof(::cardVisitorList::SCardVisitNumber)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cardVisitorList::_BCardVisitorList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cardVisitorList::_CCardVisitorList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cardVisitorList::_SCardVisitorList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cardVisitorList::_CCardVisitNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cardVisitorList::_SCardVisitNumber_default_instance_),
};

const char descriptor_table_protodef_cardVisitorList_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025cardVisitorList.proto\022\017cardVisitorList"
  "\"T\n\020BCardVisitorList\022\013\n\003uid\030\001 \001(\005\022\017\n\007hea"
  "dPic\030\002 \001(\t\022\014\n\004nick\030\003 \001(\t\022\024\n\014followStatus"
  "\030\004 \001(\005\".\n\020CCardVisitorList\022\013\n\003uid\030\001 \001(\005\022"
  "\r\n\005count\030\002 \001(\005\"C\n\020SCardVisitorList\022/\n\004li"
  "st\030\001 \003(\0132!.cardVisitorList.BCardVisitorL"
  "ist\"\037\n\020CCardVisitNumber\022\013\n\003uid\030\001 \001(\005\"\"\n\020"
  "SCardVisitNumber\022\016\n\006number\030\001 \001(\005B2\n\030com."
  "dayou.space.protobufB\017CardVisitorListZ\005."
  "/;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cardVisitorList_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cardVisitorList_2eproto_sccs[5] = {
  &scc_info_BCardVisitorList_cardVisitorList_2eproto.base,
  &scc_info_CCardVisitNumber_cardVisitorList_2eproto.base,
  &scc_info_CCardVisitorList_cardVisitorList_2eproto.base,
  &scc_info_SCardVisitNumber_cardVisitorList_2eproto.base,
  &scc_info_SCardVisitorList_cardVisitorList_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cardVisitorList_2eproto_once;
static bool descriptor_table_cardVisitorList_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cardVisitorList_2eproto = {
  &descriptor_table_cardVisitorList_2eproto_initialized, descriptor_table_protodef_cardVisitorList_2eproto, "cardVisitorList.proto", 372,
  &descriptor_table_cardVisitorList_2eproto_once, descriptor_table_cardVisitorList_2eproto_sccs, descriptor_table_cardVisitorList_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_cardVisitorList_2eproto::offsets,
  file_level_metadata_cardVisitorList_2eproto, 5, file_level_enum_descriptors_cardVisitorList_2eproto, file_level_service_descriptors_cardVisitorList_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cardVisitorList_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cardVisitorList_2eproto), true);
namespace cardVisitorList {

// ===================================================================

void BCardVisitorList::InitAsDefaultInstance() {
}
class BCardVisitorList::_Internal {
 public:
};

BCardVisitorList::BCardVisitorList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cardVisitorList.BCardVisitorList)
}
BCardVisitorList::BCardVisitorList(const BCardVisitorList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headpic().empty()) {
    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&followstatus_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
  // @@protoc_insertion_point(copy_constructor:cardVisitorList.BCardVisitorList)
}

void BCardVisitorList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BCardVisitorList_cardVisitorList_2eproto.base);
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&followstatus_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
}

BCardVisitorList::~BCardVisitorList() {
  // @@protoc_insertion_point(destructor:cardVisitorList.BCardVisitorList)
  SharedDtor();
}

void BCardVisitorList::SharedDtor() {
  headpic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BCardVisitorList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BCardVisitorList& BCardVisitorList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BCardVisitorList_cardVisitorList_2eproto.base);
  return *internal_default_instance();
}


void BCardVisitorList::Clear() {
// @@protoc_insertion_point(message_clear_start:cardVisitorList.BCardVisitorList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&followstatus_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
  _internal_metadata_.Clear();
}

const char* BCardVisitorList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headPic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_headpic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cardVisitorList.BCardVisitorList.headPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cardVisitorList.BCardVisitorList.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 followStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          followstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BCardVisitorList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cardVisitorList.BCardVisitorList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string headPic = 2;
  if (this->headpic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headpic().data(), static_cast<int>(this->_internal_headpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cardVisitorList.BCardVisitorList.headPic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_headpic(), target);
  }

  // string nick = 3;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cardVisitorList.BCardVisitorList.nick");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nick(), target);
  }

  // int32 followStatus = 4;
  if (this->followstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_followstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cardVisitorList.BCardVisitorList)
  return target;
}

size_t BCardVisitorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cardVisitorList.BCardVisitorList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string headPic = 2;
  if (this->headpic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headpic());
  }

  // string nick = 3;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 followStatus = 4;
  if (this->followstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_followstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCardVisitorList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cardVisitorList.BCardVisitorList)
  GOOGLE_DCHECK_NE(&from, this);
  const BCardVisitorList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BCardVisitorList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cardVisitorList.BCardVisitorList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cardVisitorList.BCardVisitorList)
    MergeFrom(*source);
  }
}

void BCardVisitorList::MergeFrom(const BCardVisitorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cardVisitorList.BCardVisitorList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.headpic().size() > 0) {

    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.followstatus() != 0) {
    _internal_set_followstatus(from._internal_followstatus());
  }
}

void BCardVisitorList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cardVisitorList.BCardVisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCardVisitorList::CopyFrom(const BCardVisitorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cardVisitorList.BCardVisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCardVisitorList::IsInitialized() const {
  return true;
}

void BCardVisitorList::InternalSwap(BCardVisitorList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  headpic_.Swap(&other->headpic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(followstatus_, other->followstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BCardVisitorList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCardVisitorList::InitAsDefaultInstance() {
}
class CCardVisitorList::_Internal {
 public:
};

CCardVisitorList::CCardVisitorList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cardVisitorList.CCardVisitorList)
}
CCardVisitorList::CCardVisitorList(const CCardVisitorList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:cardVisitorList.CCardVisitorList)
}

void CCardVisitorList::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(count_));
}

CCardVisitorList::~CCardVisitorList() {
  // @@protoc_insertion_point(destructor:cardVisitorList.CCardVisitorList)
  SharedDtor();
}

void CCardVisitorList::SharedDtor() {
}

void CCardVisitorList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCardVisitorList& CCardVisitorList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCardVisitorList_cardVisitorList_2eproto.base);
  return *internal_default_instance();
}


void CCardVisitorList::Clear() {
// @@protoc_insertion_point(message_clear_start:cardVisitorList.CCardVisitorList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* CCardVisitorList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCardVisitorList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cardVisitorList.CCardVisitorList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cardVisitorList.CCardVisitorList)
  return target;
}

size_t CCardVisitorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cardVisitorList.CCardVisitorList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCardVisitorList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cardVisitorList.CCardVisitorList)
  GOOGLE_DCHECK_NE(&from, this);
  const CCardVisitorList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCardVisitorList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cardVisitorList.CCardVisitorList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cardVisitorList.CCardVisitorList)
    MergeFrom(*source);
  }
}

void CCardVisitorList::MergeFrom(const CCardVisitorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cardVisitorList.CCardVisitorList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void CCardVisitorList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cardVisitorList.CCardVisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCardVisitorList::CopyFrom(const CCardVisitorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cardVisitorList.CCardVisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCardVisitorList::IsInitialized() const {
  return true;
}

void CCardVisitorList::InternalSwap(CCardVisitorList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCardVisitorList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCardVisitorList::InitAsDefaultInstance() {
}
class SCardVisitorList::_Internal {
 public:
};

SCardVisitorList::SCardVisitorList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cardVisitorList.SCardVisitorList)
}
SCardVisitorList::SCardVisitorList(const SCardVisitorList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cardVisitorList.SCardVisitorList)
}

void SCardVisitorList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCardVisitorList_cardVisitorList_2eproto.base);
}

SCardVisitorList::~SCardVisitorList() {
  // @@protoc_insertion_point(destructor:cardVisitorList.SCardVisitorList)
  SharedDtor();
}

void SCardVisitorList::SharedDtor() {
}

void SCardVisitorList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCardVisitorList& SCardVisitorList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCardVisitorList_cardVisitorList_2eproto.base);
  return *internal_default_instance();
}


void SCardVisitorList::Clear() {
// @@protoc_insertion_point(message_clear_start:cardVisitorList.SCardVisitorList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SCardVisitorList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cardVisitorList.BCardVisitorList list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCardVisitorList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cardVisitorList.SCardVisitorList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cardVisitorList.BCardVisitorList list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cardVisitorList.SCardVisitorList)
  return target;
}

size_t SCardVisitorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cardVisitorList.SCardVisitorList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cardVisitorList.BCardVisitorList list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCardVisitorList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cardVisitorList.SCardVisitorList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCardVisitorList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCardVisitorList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cardVisitorList.SCardVisitorList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cardVisitorList.SCardVisitorList)
    MergeFrom(*source);
  }
}

void SCardVisitorList::MergeFrom(const SCardVisitorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cardVisitorList.SCardVisitorList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SCardVisitorList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cardVisitorList.SCardVisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCardVisitorList::CopyFrom(const SCardVisitorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cardVisitorList.SCardVisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCardVisitorList::IsInitialized() const {
  return true;
}

void SCardVisitorList::InternalSwap(SCardVisitorList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCardVisitorList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCardVisitNumber::InitAsDefaultInstance() {
}
class CCardVisitNumber::_Internal {
 public:
};

CCardVisitNumber::CCardVisitNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cardVisitorList.CCardVisitNumber)
}
CCardVisitNumber::CCardVisitNumber(const CCardVisitNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:cardVisitorList.CCardVisitNumber)
}

void CCardVisitNumber::SharedCtor() {
  uid_ = 0;
}

CCardVisitNumber::~CCardVisitNumber() {
  // @@protoc_insertion_point(destructor:cardVisitorList.CCardVisitNumber)
  SharedDtor();
}

void CCardVisitNumber::SharedDtor() {
}

void CCardVisitNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCardVisitNumber& CCardVisitNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCardVisitNumber_cardVisitorList_2eproto.base);
  return *internal_default_instance();
}


void CCardVisitNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:cardVisitorList.CCardVisitNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CCardVisitNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCardVisitNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cardVisitorList.CCardVisitNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cardVisitorList.CCardVisitNumber)
  return target;
}

size_t CCardVisitNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cardVisitorList.CCardVisitNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCardVisitNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cardVisitorList.CCardVisitNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const CCardVisitNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCardVisitNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cardVisitorList.CCardVisitNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cardVisitorList.CCardVisitNumber)
    MergeFrom(*source);
  }
}

void CCardVisitNumber::MergeFrom(const CCardVisitNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cardVisitorList.CCardVisitNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CCardVisitNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cardVisitorList.CCardVisitNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCardVisitNumber::CopyFrom(const CCardVisitNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cardVisitorList.CCardVisitNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCardVisitNumber::IsInitialized() const {
  return true;
}

void CCardVisitNumber::InternalSwap(CCardVisitNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCardVisitNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCardVisitNumber::InitAsDefaultInstance() {
}
class SCardVisitNumber::_Internal {
 public:
};

SCardVisitNumber::SCardVisitNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cardVisitorList.SCardVisitNumber)
}
SCardVisitNumber::SCardVisitNumber(const SCardVisitNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:cardVisitorList.SCardVisitNumber)
}

void SCardVisitNumber::SharedCtor() {
  number_ = 0;
}

SCardVisitNumber::~SCardVisitNumber() {
  // @@protoc_insertion_point(destructor:cardVisitorList.SCardVisitNumber)
  SharedDtor();
}

void SCardVisitNumber::SharedDtor() {
}

void SCardVisitNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCardVisitNumber& SCardVisitNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCardVisitNumber_cardVisitorList_2eproto.base);
  return *internal_default_instance();
}


void SCardVisitNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:cardVisitorList.SCardVisitNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_ = 0;
  _internal_metadata_.Clear();
}

const char* SCardVisitNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCardVisitNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cardVisitorList.SCardVisitNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cardVisitorList.SCardVisitNumber)
  return target;
}

size_t SCardVisitNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cardVisitorList.SCardVisitNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCardVisitNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cardVisitorList.SCardVisitNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const SCardVisitNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCardVisitNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cardVisitorList.SCardVisitNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cardVisitorList.SCardVisitNumber)
    MergeFrom(*source);
  }
}

void SCardVisitNumber::MergeFrom(const SCardVisitNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cardVisitorList.SCardVisitNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void SCardVisitNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cardVisitorList.SCardVisitNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCardVisitNumber::CopyFrom(const SCardVisitNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cardVisitorList.SCardVisitNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCardVisitNumber::IsInitialized() const {
  return true;
}

void SCardVisitNumber::InternalSwap(SCardVisitNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCardVisitNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cardVisitorList
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cardVisitorList::BCardVisitorList* Arena::CreateMaybeMessage< ::cardVisitorList::BCardVisitorList >(Arena* arena) {
  return Arena::CreateInternal< ::cardVisitorList::BCardVisitorList >(arena);
}
template<> PROTOBUF_NOINLINE ::cardVisitorList::CCardVisitorList* Arena::CreateMaybeMessage< ::cardVisitorList::CCardVisitorList >(Arena* arena) {
  return Arena::CreateInternal< ::cardVisitorList::CCardVisitorList >(arena);
}
template<> PROTOBUF_NOINLINE ::cardVisitorList::SCardVisitorList* Arena::CreateMaybeMessage< ::cardVisitorList::SCardVisitorList >(Arena* arena) {
  return Arena::CreateInternal< ::cardVisitorList::SCardVisitorList >(arena);
}
template<> PROTOBUF_NOINLINE ::cardVisitorList::CCardVisitNumber* Arena::CreateMaybeMessage< ::cardVisitorList::CCardVisitNumber >(Arena* arena) {
  return Arena::CreateInternal< ::cardVisitorList::CCardVisitNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::cardVisitorList::SCardVisitNumber* Arena::CreateMaybeMessage< ::cardVisitorList::SCardVisitNumber >(Arena* arena) {
  return Arena::CreateInternal< ::cardVisitorList::SCardVisitNumber >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
