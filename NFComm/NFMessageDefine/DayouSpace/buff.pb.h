// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buff.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_buff_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_buff_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_buff_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_buff_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_buff_2eproto;
namespace buff {
class CBuffInterrupt;
class CBuffInterruptDefaultTypeInternal;
extern CBuffInterruptDefaultTypeInternal _CBuffInterrupt_default_instance_;
class CBuffOn;
class CBuffOnDefaultTypeInternal;
extern CBuffOnDefaultTypeInternal _CBuffOn_default_instance_;
class SBuffInterrupt;
class SBuffInterruptDefaultTypeInternal;
extern SBuffInterruptDefaultTypeInternal _SBuffInterrupt_default_instance_;
class SBuffOn;
class SBuffOnDefaultTypeInternal;
extern SBuffOnDefaultTypeInternal _SBuffOn_default_instance_;
}  // namespace buff
PROTOBUF_NAMESPACE_OPEN
template<> ::buff::CBuffInterrupt* Arena::CreateMaybeMessage<::buff::CBuffInterrupt>(Arena*);
template<> ::buff::CBuffOn* Arena::CreateMaybeMessage<::buff::CBuffOn>(Arena*);
template<> ::buff::SBuffInterrupt* Arena::CreateMaybeMessage<::buff::SBuffInterrupt>(Arena*);
template<> ::buff::SBuffOn* Arena::CreateMaybeMessage<::buff::SBuffOn>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace buff {

// ===================================================================

class CBuffOn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buff.CBuffOn) */ {
 public:
  CBuffOn();
  virtual ~CBuffOn();

  CBuffOn(const CBuffOn& from);
  CBuffOn(CBuffOn&& from) noexcept
    : CBuffOn() {
    *this = ::std::move(from);
  }

  inline CBuffOn& operator=(const CBuffOn& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBuffOn& operator=(CBuffOn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBuffOn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBuffOn* internal_default_instance() {
    return reinterpret_cast<const CBuffOn*>(
               &_CBuffOn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CBuffOn& a, CBuffOn& b) {
    a.Swap(&b);
  }
  inline void Swap(CBuffOn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBuffOn* New() const final {
    return CreateMaybeMessage<CBuffOn>(nullptr);
  }

  CBuffOn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBuffOn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBuffOn& from);
  void MergeFrom(const CBuffOn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBuffOn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buff.CBuffOn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buff_2eproto);
    return ::descriptor_table_buff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffIdFieldNumber = 1,
  };
  // int32 buffId = 1;
  void clear_buffid();
  ::PROTOBUF_NAMESPACE_ID::int32 buffid() const;
  void set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffid() const;
  void _internal_set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:buff.CBuffOn)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buff_2eproto;
};
// -------------------------------------------------------------------

class SBuffOn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buff.SBuffOn) */ {
 public:
  SBuffOn();
  virtual ~SBuffOn();

  SBuffOn(const SBuffOn& from);
  SBuffOn(SBuffOn&& from) noexcept
    : SBuffOn() {
    *this = ::std::move(from);
  }

  inline SBuffOn& operator=(const SBuffOn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBuffOn& operator=(SBuffOn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBuffOn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBuffOn* internal_default_instance() {
    return reinterpret_cast<const SBuffOn*>(
               &_SBuffOn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SBuffOn& a, SBuffOn& b) {
    a.Swap(&b);
  }
  inline void Swap(SBuffOn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBuffOn* New() const final {
    return CreateMaybeMessage<SBuffOn>(nullptr);
  }

  SBuffOn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBuffOn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBuffOn& from);
  void MergeFrom(const SBuffOn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBuffOn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buff.SBuffOn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buff_2eproto);
    return ::descriptor_table_buff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffIdFieldNumber = 1,
  };
  // int32 buffId = 1;
  void clear_buffid();
  ::PROTOBUF_NAMESPACE_ID::int32 buffid() const;
  void set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffid() const;
  void _internal_set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:buff.SBuffOn)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buff_2eproto;
};
// -------------------------------------------------------------------

class CBuffInterrupt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buff.CBuffInterrupt) */ {
 public:
  CBuffInterrupt();
  virtual ~CBuffInterrupt();

  CBuffInterrupt(const CBuffInterrupt& from);
  CBuffInterrupt(CBuffInterrupt&& from) noexcept
    : CBuffInterrupt() {
    *this = ::std::move(from);
  }

  inline CBuffInterrupt& operator=(const CBuffInterrupt& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBuffInterrupt& operator=(CBuffInterrupt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBuffInterrupt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBuffInterrupt* internal_default_instance() {
    return reinterpret_cast<const CBuffInterrupt*>(
               &_CBuffInterrupt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CBuffInterrupt& a, CBuffInterrupt& b) {
    a.Swap(&b);
  }
  inline void Swap(CBuffInterrupt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBuffInterrupt* New() const final {
    return CreateMaybeMessage<CBuffInterrupt>(nullptr);
  }

  CBuffInterrupt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBuffInterrupt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBuffInterrupt& from);
  void MergeFrom(const CBuffInterrupt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBuffInterrupt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buff.CBuffInterrupt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buff_2eproto);
    return ::descriptor_table_buff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffIdFieldNumber = 1,
  };
  // int32 buffId = 1;
  void clear_buffid();
  ::PROTOBUF_NAMESPACE_ID::int32 buffid() const;
  void set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffid() const;
  void _internal_set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:buff.CBuffInterrupt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buff_2eproto;
};
// -------------------------------------------------------------------

class SBuffInterrupt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buff.SBuffInterrupt) */ {
 public:
  SBuffInterrupt();
  virtual ~SBuffInterrupt();

  SBuffInterrupt(const SBuffInterrupt& from);
  SBuffInterrupt(SBuffInterrupt&& from) noexcept
    : SBuffInterrupt() {
    *this = ::std::move(from);
  }

  inline SBuffInterrupt& operator=(const SBuffInterrupt& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBuffInterrupt& operator=(SBuffInterrupt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBuffInterrupt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBuffInterrupt* internal_default_instance() {
    return reinterpret_cast<const SBuffInterrupt*>(
               &_SBuffInterrupt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SBuffInterrupt& a, SBuffInterrupt& b) {
    a.Swap(&b);
  }
  inline void Swap(SBuffInterrupt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBuffInterrupt* New() const final {
    return CreateMaybeMessage<SBuffInterrupt>(nullptr);
  }

  SBuffInterrupt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBuffInterrupt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBuffInterrupt& from);
  void MergeFrom(const SBuffInterrupt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBuffInterrupt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buff.SBuffInterrupt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buff_2eproto);
    return ::descriptor_table_buff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffIdFieldNumber = 1,
    kBuffUidFieldNumber = 2,
  };
  // int32 buffId = 1;
  void clear_buffid();
  ::PROTOBUF_NAMESPACE_ID::int32 buffid() const;
  void set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffid() const;
  void _internal_set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buffUid = 2;
  void clear_buffuid();
  ::PROTOBUF_NAMESPACE_ID::int32 buffuid() const;
  void set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffuid() const;
  void _internal_set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:buff.SBuffInterrupt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffid_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buff_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBuffOn

// int32 buffId = 1;
inline void CBuffOn::clear_buffid() {
  buffid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBuffOn::_internal_buffid() const {
  return buffid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBuffOn::buffid() const {
  // @@protoc_insertion_point(field_get:buff.CBuffOn.buffId)
  return _internal_buffid();
}
inline void CBuffOn::_internal_set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffid_ = value;
}
inline void CBuffOn::set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffid(value);
  // @@protoc_insertion_point(field_set:buff.CBuffOn.buffId)
}

// -------------------------------------------------------------------

// SBuffOn

// int32 buffId = 1;
inline void SBuffOn::clear_buffid() {
  buffid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuffOn::_internal_buffid() const {
  return buffid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuffOn::buffid() const {
  // @@protoc_insertion_point(field_get:buff.SBuffOn.buffId)
  return _internal_buffid();
}
inline void SBuffOn::_internal_set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffid_ = value;
}
inline void SBuffOn::set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffid(value);
  // @@protoc_insertion_point(field_set:buff.SBuffOn.buffId)
}

// -------------------------------------------------------------------

// CBuffInterrupt

// int32 buffId = 1;
inline void CBuffInterrupt::clear_buffid() {
  buffid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBuffInterrupt::_internal_buffid() const {
  return buffid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBuffInterrupt::buffid() const {
  // @@protoc_insertion_point(field_get:buff.CBuffInterrupt.buffId)
  return _internal_buffid();
}
inline void CBuffInterrupt::_internal_set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffid_ = value;
}
inline void CBuffInterrupt::set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffid(value);
  // @@protoc_insertion_point(field_set:buff.CBuffInterrupt.buffId)
}

// -------------------------------------------------------------------

// SBuffInterrupt

// int32 buffId = 1;
inline void SBuffInterrupt::clear_buffid() {
  buffid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuffInterrupt::_internal_buffid() const {
  return buffid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuffInterrupt::buffid() const {
  // @@protoc_insertion_point(field_get:buff.SBuffInterrupt.buffId)
  return _internal_buffid();
}
inline void SBuffInterrupt::_internal_set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffid_ = value;
}
inline void SBuffInterrupt::set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffid(value);
  // @@protoc_insertion_point(field_set:buff.SBuffInterrupt.buffId)
}

// int32 buffUid = 2;
inline void SBuffInterrupt::clear_buffuid() {
  buffuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuffInterrupt::_internal_buffuid() const {
  return buffuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuffInterrupt::buffuid() const {
  // @@protoc_insertion_point(field_get:buff.SBuffInterrupt.buffUid)
  return _internal_buffuid();
}
inline void SBuffInterrupt::_internal_set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffuid_ = value;
}
inline void SBuffInterrupt::set_buffuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffuid(value);
  // @@protoc_insertion_point(field_set:buff.SBuffInterrupt.buffUid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace buff

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_buff_2eproto
