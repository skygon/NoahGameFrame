// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: follow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_follow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_follow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_follow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_follow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_follow_2eproto;
namespace follow {
class CFollowList;
class CFollowListDefaultTypeInternal;
extern CFollowListDefaultTypeInternal _CFollowList_default_instance_;
class CFollowUser;
class CFollowUserDefaultTypeInternal;
extern CFollowUserDefaultTypeInternal _CFollowUser_default_instance_;
class CRecommendList;
class CRecommendListDefaultTypeInternal;
extern CRecommendListDefaultTypeInternal _CRecommendList_default_instance_;
class FollowListInfo;
class FollowListInfoDefaultTypeInternal;
extern FollowListInfoDefaultTypeInternal _FollowListInfo_default_instance_;
class SFollowList;
class SFollowListDefaultTypeInternal;
extern SFollowListDefaultTypeInternal _SFollowList_default_instance_;
class SFollowUser;
class SFollowUserDefaultTypeInternal;
extern SFollowUserDefaultTypeInternal _SFollowUser_default_instance_;
class SRecommendList;
class SRecommendListDefaultTypeInternal;
extern SRecommendListDefaultTypeInternal _SRecommendList_default_instance_;
}  // namespace follow
PROTOBUF_NAMESPACE_OPEN
template<> ::follow::CFollowList* Arena::CreateMaybeMessage<::follow::CFollowList>(Arena*);
template<> ::follow::CFollowUser* Arena::CreateMaybeMessage<::follow::CFollowUser>(Arena*);
template<> ::follow::CRecommendList* Arena::CreateMaybeMessage<::follow::CRecommendList>(Arena*);
template<> ::follow::FollowListInfo* Arena::CreateMaybeMessage<::follow::FollowListInfo>(Arena*);
template<> ::follow::SFollowList* Arena::CreateMaybeMessage<::follow::SFollowList>(Arena*);
template<> ::follow::SFollowUser* Arena::CreateMaybeMessage<::follow::SFollowUser>(Arena*);
template<> ::follow::SRecommendList* Arena::CreateMaybeMessage<::follow::SRecommendList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace follow {

// ===================================================================

class CFollowUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:follow.CFollowUser) */ {
 public:
  CFollowUser();
  virtual ~CFollowUser();

  CFollowUser(const CFollowUser& from);
  CFollowUser(CFollowUser&& from) noexcept
    : CFollowUser() {
    *this = ::std::move(from);
  }

  inline CFollowUser& operator=(const CFollowUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFollowUser& operator=(CFollowUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CFollowUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFollowUser* internal_default_instance() {
    return reinterpret_cast<const CFollowUser*>(
               &_CFollowUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CFollowUser& a, CFollowUser& b) {
    a.Swap(&b);
  }
  inline void Swap(CFollowUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CFollowUser* New() const final {
    return CreateMaybeMessage<CFollowUser>(nullptr);
  }

  CFollowUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CFollowUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CFollowUser& from);
  void MergeFrom(const CFollowUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFollowUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "follow.CFollowUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_follow_2eproto);
    return ::descriptor_table_follow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:follow.CFollowUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follow_2eproto;
};
// -------------------------------------------------------------------

class SFollowUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:follow.SFollowUser) */ {
 public:
  SFollowUser();
  virtual ~SFollowUser();

  SFollowUser(const SFollowUser& from);
  SFollowUser(SFollowUser&& from) noexcept
    : SFollowUser() {
    *this = ::std::move(from);
  }

  inline SFollowUser& operator=(const SFollowUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFollowUser& operator=(SFollowUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SFollowUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFollowUser* internal_default_instance() {
    return reinterpret_cast<const SFollowUser*>(
               &_SFollowUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SFollowUser& a, SFollowUser& b) {
    a.Swap(&b);
  }
  inline void Swap(SFollowUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFollowUser* New() const final {
    return CreateMaybeMessage<SFollowUser>(nullptr);
  }

  SFollowUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFollowUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SFollowUser& from);
  void MergeFrom(const SFollowUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFollowUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "follow.SFollowUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_follow_2eproto);
    return ::descriptor_table_follow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kCodeFieldNumber = 2,
    kIsFollowFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isFollow = 3;
  void clear_isfollow();
  bool isfollow() const;
  void set_isfollow(bool value);
  private:
  bool _internal_isfollow() const;
  void _internal_set_isfollow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:follow.SFollowUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  bool isfollow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follow_2eproto;
};
// -------------------------------------------------------------------

class FollowListInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:follow.FollowListInfo) */ {
 public:
  FollowListInfo();
  virtual ~FollowListInfo();

  FollowListInfo(const FollowListInfo& from);
  FollowListInfo(FollowListInfo&& from) noexcept
    : FollowListInfo() {
    *this = ::std::move(from);
  }

  inline FollowListInfo& operator=(const FollowListInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowListInfo& operator=(FollowListInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FollowListInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowListInfo* internal_default_instance() {
    return reinterpret_cast<const FollowListInfo*>(
               &_FollowListInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FollowListInfo& a, FollowListInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowListInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FollowListInfo* New() const final {
    return CreateMaybeMessage<FollowListInfo>(nullptr);
  }

  FollowListInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FollowListInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FollowListInfo& from);
  void MergeFrom(const FollowListInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FollowListInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "follow.FollowListInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_follow_2eproto);
    return ::descriptor_table_follow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kHeadPicFieldNumber = 3,
    kSignFieldNumber = 6,
    kUidFieldNumber = 1,
    kFansNumFieldNumber = 4,
    kFollowStatusFieldNumber = 5,
  };
  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string headPic = 3;
  void clear_headpic();
  const std::string& headpic() const;
  void set_headpic(const std::string& value);
  void set_headpic(std::string&& value);
  void set_headpic(const char* value);
  void set_headpic(const char* value, size_t size);
  std::string* mutable_headpic();
  std::string* release_headpic();
  void set_allocated_headpic(std::string* headpic);
  private:
  const std::string& _internal_headpic() const;
  void _internal_set_headpic(const std::string& value);
  std::string* _internal_mutable_headpic();
  public:

  // string sign = 6;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fansNum = 4;
  void clear_fansnum();
  ::PROTOBUF_NAMESPACE_ID::int32 fansnum() const;
  void set_fansnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fansnum() const;
  void _internal_set_fansnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 followStatus = 5;
  void clear_followstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus() const;
  void set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_followstatus() const;
  void _internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:follow.FollowListInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headpic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fansnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follow_2eproto;
};
// -------------------------------------------------------------------

class CFollowList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:follow.CFollowList) */ {
 public:
  CFollowList();
  virtual ~CFollowList();

  CFollowList(const CFollowList& from);
  CFollowList(CFollowList&& from) noexcept
    : CFollowList() {
    *this = ::std::move(from);
  }

  inline CFollowList& operator=(const CFollowList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFollowList& operator=(CFollowList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CFollowList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFollowList* internal_default_instance() {
    return reinterpret_cast<const CFollowList*>(
               &_CFollowList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CFollowList& a, CFollowList& b) {
    a.Swap(&b);
  }
  inline void Swap(CFollowList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CFollowList* New() const final {
    return CreateMaybeMessage<CFollowList>(nullptr);
  }

  CFollowList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CFollowList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CFollowList& from);
  void MergeFrom(const CFollowList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFollowList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "follow.CFollowList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_follow_2eproto);
    return ::descriptor_table_follow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPageFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:follow.CFollowList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follow_2eproto;
};
// -------------------------------------------------------------------

class SFollowList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:follow.SFollowList) */ {
 public:
  SFollowList();
  virtual ~SFollowList();

  SFollowList(const SFollowList& from);
  SFollowList(SFollowList&& from) noexcept
    : SFollowList() {
    *this = ::std::move(from);
  }

  inline SFollowList& operator=(const SFollowList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFollowList& operator=(SFollowList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SFollowList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFollowList* internal_default_instance() {
    return reinterpret_cast<const SFollowList*>(
               &_SFollowList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SFollowList& a, SFollowList& b) {
    a.Swap(&b);
  }
  inline void Swap(SFollowList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFollowList* New() const final {
    return CreateMaybeMessage<SFollowList>(nullptr);
  }

  SFollowList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFollowList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SFollowList& from);
  void MergeFrom(const SFollowList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFollowList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "follow.SFollowList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_follow_2eproto);
    return ::descriptor_table_follow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kTypeFieldNumber = 1,
    kTotalFieldNumber = 3,
  };
  // repeated .follow.FollowListInfo infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::follow::FollowListInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo >*
      mutable_infos();
  private:
  const ::follow::FollowListInfo& _internal_infos(int index) const;
  ::follow::FollowListInfo* _internal_add_infos();
  public:
  const ::follow::FollowListInfo& infos(int index) const;
  ::follow::FollowListInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo >&
      infos() const;

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 3;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:follow.SFollowList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo > infos_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follow_2eproto;
};
// -------------------------------------------------------------------

class CRecommendList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:follow.CRecommendList) */ {
 public:
  CRecommendList();
  virtual ~CRecommendList();

  CRecommendList(const CRecommendList& from);
  CRecommendList(CRecommendList&& from) noexcept
    : CRecommendList() {
    *this = ::std::move(from);
  }

  inline CRecommendList& operator=(const CRecommendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRecommendList& operator=(CRecommendList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRecommendList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CRecommendList* internal_default_instance() {
    return reinterpret_cast<const CRecommendList*>(
               &_CRecommendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CRecommendList& a, CRecommendList& b) {
    a.Swap(&b);
  }
  inline void Swap(CRecommendList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRecommendList* New() const final {
    return CreateMaybeMessage<CRecommendList>(nullptr);
  }

  CRecommendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRecommendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRecommendList& from);
  void MergeFrom(const CRecommendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRecommendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "follow.CRecommendList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_follow_2eproto);
    return ::descriptor_table_follow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:follow.CRecommendList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follow_2eproto;
};
// -------------------------------------------------------------------

class SRecommendList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:follow.SRecommendList) */ {
 public:
  SRecommendList();
  virtual ~SRecommendList();

  SRecommendList(const SRecommendList& from);
  SRecommendList(SRecommendList&& from) noexcept
    : SRecommendList() {
    *this = ::std::move(from);
  }

  inline SRecommendList& operator=(const SRecommendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRecommendList& operator=(SRecommendList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRecommendList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRecommendList* internal_default_instance() {
    return reinterpret_cast<const SRecommendList*>(
               &_SRecommendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SRecommendList& a, SRecommendList& b) {
    a.Swap(&b);
  }
  inline void Swap(SRecommendList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRecommendList* New() const final {
    return CreateMaybeMessage<SRecommendList>(nullptr);
  }

  SRecommendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRecommendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRecommendList& from);
  void MergeFrom(const SRecommendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRecommendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "follow.SRecommendList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_follow_2eproto);
    return ::descriptor_table_follow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kTotalFieldNumber = 3,
  };
  // repeated .follow.FollowListInfo infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::follow::FollowListInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo >*
      mutable_infos();
  private:
  const ::follow::FollowListInfo& _internal_infos(int index) const;
  ::follow::FollowListInfo* _internal_add_infos();
  public:
  const ::follow::FollowListInfo& infos(int index) const;
  ::follow::FollowListInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo >&
      infos() const;

  // int32 total = 3;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:follow.SRecommendList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo > infos_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CFollowUser

// int32 uid = 1;
inline void CFollowUser::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowUser::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowUser::uid() const {
  // @@protoc_insertion_point(field_get:follow.CFollowUser.uid)
  return _internal_uid();
}
inline void CFollowUser::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CFollowUser::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:follow.CFollowUser.uid)
}

// int32 type = 2;
inline void CFollowUser::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowUser::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowUser::type() const {
  // @@protoc_insertion_point(field_get:follow.CFollowUser.type)
  return _internal_type();
}
inline void CFollowUser::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CFollowUser::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:follow.CFollowUser.type)
}

// -------------------------------------------------------------------

// SFollowUser

// int32 uid = 1;
inline void SFollowUser::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFollowUser::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFollowUser::uid() const {
  // @@protoc_insertion_point(field_get:follow.SFollowUser.uid)
  return _internal_uid();
}
inline void SFollowUser::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SFollowUser::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:follow.SFollowUser.uid)
}

// int32 code = 2;
inline void SFollowUser::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFollowUser::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFollowUser::code() const {
  // @@protoc_insertion_point(field_get:follow.SFollowUser.code)
  return _internal_code();
}
inline void SFollowUser::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SFollowUser::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:follow.SFollowUser.code)
}

// bool isFollow = 3;
inline void SFollowUser::clear_isfollow() {
  isfollow_ = false;
}
inline bool SFollowUser::_internal_isfollow() const {
  return isfollow_;
}
inline bool SFollowUser::isfollow() const {
  // @@protoc_insertion_point(field_get:follow.SFollowUser.isFollow)
  return _internal_isfollow();
}
inline void SFollowUser::_internal_set_isfollow(bool value) {
  
  isfollow_ = value;
}
inline void SFollowUser::set_isfollow(bool value) {
  _internal_set_isfollow(value);
  // @@protoc_insertion_point(field_set:follow.SFollowUser.isFollow)
}

// -------------------------------------------------------------------

// FollowListInfo

// int32 uid = 1;
inline void FollowListInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowListInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowListInfo::uid() const {
  // @@protoc_insertion_point(field_get:follow.FollowListInfo.uid)
  return _internal_uid();
}
inline void FollowListInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void FollowListInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:follow.FollowListInfo.uid)
}

// string nick = 2;
inline void FollowListInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FollowListInfo::nick() const {
  // @@protoc_insertion_point(field_get:follow.FollowListInfo.nick)
  return _internal_nick();
}
inline void FollowListInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:follow.FollowListInfo.nick)
}
inline std::string* FollowListInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:follow.FollowListInfo.nick)
  return _internal_mutable_nick();
}
inline const std::string& FollowListInfo::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void FollowListInfo::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FollowListInfo::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:follow.FollowListInfo.nick)
}
inline void FollowListInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:follow.FollowListInfo.nick)
}
inline void FollowListInfo::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:follow.FollowListInfo.nick)
}
inline std::string* FollowListInfo::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FollowListInfo::release_nick() {
  // @@protoc_insertion_point(field_release:follow.FollowListInfo.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FollowListInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:follow.FollowListInfo.nick)
}

// string headPic = 3;
inline void FollowListInfo::clear_headpic() {
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FollowListInfo::headpic() const {
  // @@protoc_insertion_point(field_get:follow.FollowListInfo.headPic)
  return _internal_headpic();
}
inline void FollowListInfo::set_headpic(const std::string& value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:follow.FollowListInfo.headPic)
}
inline std::string* FollowListInfo::mutable_headpic() {
  // @@protoc_insertion_point(field_mutable:follow.FollowListInfo.headPic)
  return _internal_mutable_headpic();
}
inline const std::string& FollowListInfo::_internal_headpic() const {
  return headpic_.GetNoArena();
}
inline void FollowListInfo::_internal_set_headpic(const std::string& value) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FollowListInfo::set_headpic(std::string&& value) {
  
  headpic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:follow.FollowListInfo.headPic)
}
inline void FollowListInfo::set_headpic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:follow.FollowListInfo.headPic)
}
inline void FollowListInfo::set_headpic(const char* value, size_t size) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:follow.FollowListInfo.headPic)
}
inline std::string* FollowListInfo::_internal_mutable_headpic() {
  
  return headpic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FollowListInfo::release_headpic() {
  // @@protoc_insertion_point(field_release:follow.FollowListInfo.headPic)
  
  return headpic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FollowListInfo::set_allocated_headpic(std::string* headpic) {
  if (headpic != nullptr) {
    
  } else {
    
  }
  headpic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headpic);
  // @@protoc_insertion_point(field_set_allocated:follow.FollowListInfo.headPic)
}

// int32 fansNum = 4;
inline void FollowListInfo::clear_fansnum() {
  fansnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowListInfo::_internal_fansnum() const {
  return fansnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowListInfo::fansnum() const {
  // @@protoc_insertion_point(field_get:follow.FollowListInfo.fansNum)
  return _internal_fansnum();
}
inline void FollowListInfo::_internal_set_fansnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fansnum_ = value;
}
inline void FollowListInfo::set_fansnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fansnum(value);
  // @@protoc_insertion_point(field_set:follow.FollowListInfo.fansNum)
}

// int32 followStatus = 5;
inline void FollowListInfo::clear_followstatus() {
  followstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowListInfo::_internal_followstatus() const {
  return followstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowListInfo::followstatus() const {
  // @@protoc_insertion_point(field_get:follow.FollowListInfo.followStatus)
  return _internal_followstatus();
}
inline void FollowListInfo::_internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  followstatus_ = value;
}
inline void FollowListInfo::set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_followstatus(value);
  // @@protoc_insertion_point(field_set:follow.FollowListInfo.followStatus)
}

// string sign = 6;
inline void FollowListInfo::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FollowListInfo::sign() const {
  // @@protoc_insertion_point(field_get:follow.FollowListInfo.sign)
  return _internal_sign();
}
inline void FollowListInfo::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:follow.FollowListInfo.sign)
}
inline std::string* FollowListInfo::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:follow.FollowListInfo.sign)
  return _internal_mutable_sign();
}
inline const std::string& FollowListInfo::_internal_sign() const {
  return sign_.GetNoArena();
}
inline void FollowListInfo::_internal_set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FollowListInfo::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:follow.FollowListInfo.sign)
}
inline void FollowListInfo::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:follow.FollowListInfo.sign)
}
inline void FollowListInfo::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:follow.FollowListInfo.sign)
}
inline std::string* FollowListInfo::_internal_mutable_sign() {
  
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FollowListInfo::release_sign() {
  // @@protoc_insertion_point(field_release:follow.FollowListInfo.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FollowListInfo::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:follow.FollowListInfo.sign)
}

// -------------------------------------------------------------------

// CFollowList

// int32 uid = 1;
inline void CFollowList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowList::uid() const {
  // @@protoc_insertion_point(field_get:follow.CFollowList.uid)
  return _internal_uid();
}
inline void CFollowList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CFollowList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:follow.CFollowList.uid)
}

// int32 type = 2;
inline void CFollowList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowList::type() const {
  // @@protoc_insertion_point(field_get:follow.CFollowList.type)
  return _internal_type();
}
inline void CFollowList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CFollowList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:follow.CFollowList.type)
}

// int32 page = 3;
inline void CFollowList::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowList::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowList::page() const {
  // @@protoc_insertion_point(field_get:follow.CFollowList.page)
  return _internal_page();
}
inline void CFollowList::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void CFollowList::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:follow.CFollowList.page)
}

// int32 size = 4;
inline void CFollowList::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowList::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFollowList::size() const {
  // @@protoc_insertion_point(field_get:follow.CFollowList.size)
  return _internal_size();
}
inline void CFollowList::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void CFollowList::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:follow.CFollowList.size)
}

// -------------------------------------------------------------------

// SFollowList

// int32 type = 1;
inline void SFollowList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFollowList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFollowList::type() const {
  // @@protoc_insertion_point(field_get:follow.SFollowList.type)
  return _internal_type();
}
inline void SFollowList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SFollowList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:follow.SFollowList.type)
}

// repeated .follow.FollowListInfo infos = 2;
inline int SFollowList::_internal_infos_size() const {
  return infos_.size();
}
inline int SFollowList::infos_size() const {
  return _internal_infos_size();
}
inline void SFollowList::clear_infos() {
  infos_.Clear();
}
inline ::follow::FollowListInfo* SFollowList::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:follow.SFollowList.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo >*
SFollowList::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:follow.SFollowList.infos)
  return &infos_;
}
inline const ::follow::FollowListInfo& SFollowList::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::follow::FollowListInfo& SFollowList::infos(int index) const {
  // @@protoc_insertion_point(field_get:follow.SFollowList.infos)
  return _internal_infos(index);
}
inline ::follow::FollowListInfo* SFollowList::_internal_add_infos() {
  return infos_.Add();
}
inline ::follow::FollowListInfo* SFollowList::add_infos() {
  // @@protoc_insertion_point(field_add:follow.SFollowList.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo >&
SFollowList::infos() const {
  // @@protoc_insertion_point(field_list:follow.SFollowList.infos)
  return infos_;
}

// int32 total = 3;
inline void SFollowList::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFollowList::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFollowList::total() const {
  // @@protoc_insertion_point(field_get:follow.SFollowList.total)
  return _internal_total();
}
inline void SFollowList::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SFollowList::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:follow.SFollowList.total)
}

// -------------------------------------------------------------------

// CRecommendList

// -------------------------------------------------------------------

// SRecommendList

// repeated .follow.FollowListInfo infos = 2;
inline int SRecommendList::_internal_infos_size() const {
  return infos_.size();
}
inline int SRecommendList::infos_size() const {
  return _internal_infos_size();
}
inline void SRecommendList::clear_infos() {
  infos_.Clear();
}
inline ::follow::FollowListInfo* SRecommendList::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:follow.SRecommendList.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo >*
SRecommendList::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:follow.SRecommendList.infos)
  return &infos_;
}
inline const ::follow::FollowListInfo& SRecommendList::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::follow::FollowListInfo& SRecommendList::infos(int index) const {
  // @@protoc_insertion_point(field_get:follow.SRecommendList.infos)
  return _internal_infos(index);
}
inline ::follow::FollowListInfo* SRecommendList::_internal_add_infos() {
  return infos_.Add();
}
inline ::follow::FollowListInfo* SRecommendList::add_infos() {
  // @@protoc_insertion_point(field_add:follow.SRecommendList.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::follow::FollowListInfo >&
SRecommendList::infos() const {
  // @@protoc_insertion_point(field_list:follow.SRecommendList.infos)
  return infos_;
}

// int32 total = 3;
inline void SRecommendList::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRecommendList::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRecommendList::total() const {
  // @@protoc_insertion_point(field_get:follow.SRecommendList.total)
  return _internal_total();
}
inline void SRecommendList::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SRecommendList::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:follow.SRecommendList.total)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace follow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_follow_2eproto
