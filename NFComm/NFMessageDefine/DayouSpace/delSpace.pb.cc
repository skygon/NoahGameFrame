// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: delSpace.proto

#include "delSpace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace delSpace {
class CDelSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDelSpace> _instance;
} _CDelSpace_default_instance_;
class SDelSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDelSpace> _instance;
} _SDelSpace_default_instance_;
}  // namespace delSpace
static void InitDefaultsscc_info_CDelSpace_delSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::delSpace::_CDelSpace_default_instance_;
    new (ptr) ::delSpace::CDelSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::delSpace::CDelSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CDelSpace_delSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CDelSpace_delSpace_2eproto}, {}};

static void InitDefaultsscc_info_SDelSpace_delSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::delSpace::_SDelSpace_default_instance_;
    new (ptr) ::delSpace::SDelSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::delSpace::SDelSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDelSpace_delSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SDelSpace_delSpace_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_delSpace_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_delSpace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_delSpace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_delSpace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delSpace::CDelSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delSpace::CDelSpace, spaceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delSpace::SDelSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delSpace::SDelSpace, code_),
  PROTOBUF_FIELD_OFFSET(::delSpace::SDelSpace, msg_),
  PROTOBUF_FIELD_OFFSET(::delSpace::SDelSpace, spaceid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::delSpace::CDelSpace)},
  { 6, -1, sizeof(::delSpace::SDelSpace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delSpace::_CDelSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delSpace::_SDelSpace_default_instance_),
};

const char descriptor_table_protodef_delSpace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016delSpace.proto\022\010delSpace\"\034\n\tCDelSpace\022"
  "\017\n\007spaceId\030\001 \001(\005\"7\n\tSDelSpace\022\014\n\004code\030\001 "
  "\001(\005\022\013\n\003msg\030\002 \001(\t\022\017\n\007spaceId\030\003 \001(\005B+\n\030com"
  ".dayou.space.protobufB\010DelSpaceZ\005./;pbb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_delSpace_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_delSpace_2eproto_sccs[2] = {
  &scc_info_CDelSpace_delSpace_2eproto.base,
  &scc_info_SDelSpace_delSpace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_delSpace_2eproto_once;
static bool descriptor_table_delSpace_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_delSpace_2eproto = {
  &descriptor_table_delSpace_2eproto_initialized, descriptor_table_protodef_delSpace_2eproto, "delSpace.proto", 166,
  &descriptor_table_delSpace_2eproto_once, descriptor_table_delSpace_2eproto_sccs, descriptor_table_delSpace_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_delSpace_2eproto::offsets,
  file_level_metadata_delSpace_2eproto, 2, file_level_enum_descriptors_delSpace_2eproto, file_level_service_descriptors_delSpace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_delSpace_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_delSpace_2eproto), true);
namespace delSpace {

// ===================================================================

void CDelSpace::InitAsDefaultInstance() {
}
class CDelSpace::_Internal {
 public:
};

CDelSpace::CDelSpace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:delSpace.CDelSpace)
}
CDelSpace::CDelSpace(const CDelSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spaceid_ = from.spaceid_;
  // @@protoc_insertion_point(copy_constructor:delSpace.CDelSpace)
}

void CDelSpace::SharedCtor() {
  spaceid_ = 0;
}

CDelSpace::~CDelSpace() {
  // @@protoc_insertion_point(destructor:delSpace.CDelSpace)
  SharedDtor();
}

void CDelSpace::SharedDtor() {
}

void CDelSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDelSpace& CDelSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDelSpace_delSpace_2eproto.base);
  return *internal_default_instance();
}


void CDelSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:delSpace.CDelSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spaceid_ = 0;
  _internal_metadata_.Clear();
}

const char* CDelSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 spaceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spaceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDelSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delSpace.CDelSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spaceId = 1;
  if (this->spaceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_spaceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delSpace.CDelSpace)
  return target;
}

size_t CDelSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delSpace.CDelSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 spaceId = 1;
  if (this->spaceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spaceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDelSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delSpace.CDelSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const CDelSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDelSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delSpace.CDelSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delSpace.CDelSpace)
    MergeFrom(*source);
  }
}

void CDelSpace::MergeFrom(const CDelSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delSpace.CDelSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spaceid() != 0) {
    _internal_set_spaceid(from._internal_spaceid());
  }
}

void CDelSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delSpace.CDelSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDelSpace::CopyFrom(const CDelSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delSpace.CDelSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDelSpace::IsInitialized() const {
  return true;
}

void CDelSpace::InternalSwap(CDelSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(spaceid_, other->spaceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDelSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SDelSpace::InitAsDefaultInstance() {
}
class SDelSpace::_Internal {
 public:
};

SDelSpace::SDelSpace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:delSpace.SDelSpace)
}
SDelSpace::SDelSpace(const SDelSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&spaceid_) -
    reinterpret_cast<char*>(&code_)) + sizeof(spaceid_));
  // @@protoc_insertion_point(copy_constructor:delSpace.SDelSpace)
}

void SDelSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SDelSpace_delSpace_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spaceid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(spaceid_));
}

SDelSpace::~SDelSpace() {
  // @@protoc_insertion_point(destructor:delSpace.SDelSpace)
  SharedDtor();
}

void SDelSpace::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SDelSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDelSpace& SDelSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDelSpace_delSpace_2eproto.base);
  return *internal_default_instance();
}


void SDelSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:delSpace.SDelSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spaceid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(spaceid_));
  _internal_metadata_.Clear();
}

const char* SDelSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delSpace.SDelSpace.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          spaceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDelSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delSpace.SDelSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delSpace.SDelSpace.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 spaceId = 3;
  if (this->spaceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_spaceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delSpace.SDelSpace)
  return target;
}

size_t SDelSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delSpace.SDelSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 spaceId = 3;
  if (this->spaceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spaceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDelSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delSpace.SDelSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const SDelSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDelSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delSpace.SDelSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delSpace.SDelSpace)
    MergeFrom(*source);
  }
}

void SDelSpace::MergeFrom(const SDelSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delSpace.SDelSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.spaceid() != 0) {
    _internal_set_spaceid(from._internal_spaceid());
  }
}

void SDelSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delSpace.SDelSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDelSpace::CopyFrom(const SDelSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delSpace.SDelSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDelSpace::IsInitialized() const {
  return true;
}

void SDelSpace::InternalSwap(SDelSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(spaceid_, other->spaceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDelSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace delSpace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::delSpace::CDelSpace* Arena::CreateMaybeMessage< ::delSpace::CDelSpace >(Arena* arena) {
  return Arena::CreateInternal< ::delSpace::CDelSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::delSpace::SDelSpace* Arena::CreateMaybeMessage< ::delSpace::SDelSpace >(Arena* arena) {
  return Arena::CreateInternal< ::delSpace::SDelSpace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
