// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chipReport.proto

#include "chipReport.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace chipReport {
class CChipReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CChipReport> _instance;
} _CChipReport_default_instance_;
class SChipReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SChipReport> _instance;
} _SChipReport_default_instance_;
}  // namespace chipReport
static void InitDefaultsscc_info_CChipReport_chipReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chipReport::_CChipReport_default_instance_;
    new (ptr) ::chipReport::CChipReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chipReport::CChipReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CChipReport_chipReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CChipReport_chipReport_2eproto}, {}};

static void InitDefaultsscc_info_SChipReport_chipReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chipReport::_SChipReport_default_instance_;
    new (ptr) ::chipReport::SChipReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chipReport::SChipReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SChipReport_chipReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SChipReport_chipReport_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chipReport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chipReport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chipReport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chipReport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chipReport::CChipReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chipReport::CChipReport, chipid_),
  PROTOBUF_FIELD_OFFSET(::chipReport::CChipReport, chipplatform_),
  PROTOBUF_FIELD_OFFSET(::chipReport::CChipReport, enterorexit_),
  PROTOBUF_FIELD_OFFSET(::chipReport::CChipReport, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chipReport::SChipReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chipReport::SChipReport, isselect_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chipReport::CChipReport)},
  { 9, -1, sizeof(::chipReport::SChipReport)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chipReport::_CChipReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chipReport::_SChipReport_default_instance_),
};

const char descriptor_table_protodef_chipReport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020chipReport.proto\022\nchipReport\"Y\n\013CChipR"
  "eport\022\016\n\006chipID\030\001 \001(\005\022\024\n\014chipPlatform\030\002 "
  "\001(\005\022\023\n\013enterOrExit\030\003 \001(\005\022\017\n\007goodsId\030\005 \001("
  "\005\"\037\n\013SChipReport\022\020\n\010isSelect\030\001 \001(\005B&\n\030co"
  "m.dayou.space.protobufB\nChipReportb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chipReport_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chipReport_2eproto_sccs[2] = {
  &scc_info_CChipReport_chipReport_2eproto.base,
  &scc_info_SChipReport_chipReport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chipReport_2eproto_once;
static bool descriptor_table_chipReport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chipReport_2eproto = {
  &descriptor_table_chipReport_2eproto_initialized, descriptor_table_protodef_chipReport_2eproto, "chipReport.proto", 202,
  &descriptor_table_chipReport_2eproto_once, descriptor_table_chipReport_2eproto_sccs, descriptor_table_chipReport_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_chipReport_2eproto::offsets,
  file_level_metadata_chipReport_2eproto, 2, file_level_enum_descriptors_chipReport_2eproto, file_level_service_descriptors_chipReport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chipReport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chipReport_2eproto), true);
namespace chipReport {

// ===================================================================

void CChipReport::InitAsDefaultInstance() {
}
class CChipReport::_Internal {
 public:
};

CChipReport::CChipReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chipReport.CChipReport)
}
CChipReport::CChipReport(const CChipReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chipid_, &from.chipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&chipid_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:chipReport.CChipReport)
}

void CChipReport::SharedCtor() {
  ::memset(&chipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&chipid_)) + sizeof(goodsid_));
}

CChipReport::~CChipReport() {
  // @@protoc_insertion_point(destructor:chipReport.CChipReport)
  SharedDtor();
}

void CChipReport::SharedDtor() {
}

void CChipReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CChipReport& CChipReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CChipReport_chipReport_2eproto.base);
  return *internal_default_instance();
}


void CChipReport::Clear() {
// @@protoc_insertion_point(message_clear_start:chipReport.CChipReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&chipid_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* CChipReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chipID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chipPlatform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chipplatform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enterOrExit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enterorexit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CChipReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chipReport.CChipReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chipID = 1;
  if (this->chipid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chipid(), target);
  }

  // int32 chipPlatform = 2;
  if (this->chipplatform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chipplatform(), target);
  }

  // int32 enterOrExit = 3;
  if (this->enterorexit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_enterorexit(), target);
  }

  // int32 goodsId = 5;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chipReport.CChipReport)
  return target;
}

size_t CChipReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chipReport.CChipReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chipID = 1;
  if (this->chipid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chipid());
  }

  // int32 chipPlatform = 2;
  if (this->chipplatform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chipplatform());
  }

  // int32 enterOrExit = 3;
  if (this->enterorexit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enterorexit());
  }

  // int32 goodsId = 5;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChipReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chipReport.CChipReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CChipReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CChipReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chipReport.CChipReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chipReport.CChipReport)
    MergeFrom(*source);
  }
}

void CChipReport::MergeFrom(const CChipReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chipReport.CChipReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chipid() != 0) {
    _internal_set_chipid(from._internal_chipid());
  }
  if (from.chipplatform() != 0) {
    _internal_set_chipplatform(from._internal_chipplatform());
  }
  if (from.enterorexit() != 0) {
    _internal_set_enterorexit(from._internal_enterorexit());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CChipReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chipReport.CChipReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChipReport::CopyFrom(const CChipReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chipReport.CChipReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChipReport::IsInitialized() const {
  return true;
}

void CChipReport::InternalSwap(CChipReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chipid_, other->chipid_);
  swap(chipplatform_, other->chipplatform_);
  swap(enterorexit_, other->enterorexit_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChipReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SChipReport::InitAsDefaultInstance() {
}
class SChipReport::_Internal {
 public:
};

SChipReport::SChipReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chipReport.SChipReport)
}
SChipReport::SChipReport(const SChipReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isselect_ = from.isselect_;
  // @@protoc_insertion_point(copy_constructor:chipReport.SChipReport)
}

void SChipReport::SharedCtor() {
  isselect_ = 0;
}

SChipReport::~SChipReport() {
  // @@protoc_insertion_point(destructor:chipReport.SChipReport)
  SharedDtor();
}

void SChipReport::SharedDtor() {
}

void SChipReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SChipReport& SChipReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SChipReport_chipReport_2eproto.base);
  return *internal_default_instance();
}


void SChipReport::Clear() {
// @@protoc_insertion_point(message_clear_start:chipReport.SChipReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isselect_ = 0;
  _internal_metadata_.Clear();
}

const char* SChipReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 isSelect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isselect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChipReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chipReport.SChipReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isSelect = 1;
  if (this->isselect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_isselect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chipReport.SChipReport)
  return target;
}

size_t SChipReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chipReport.SChipReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 isSelect = 1;
  if (this->isselect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isselect());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SChipReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chipReport.SChipReport)
  GOOGLE_DCHECK_NE(&from, this);
  const SChipReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SChipReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chipReport.SChipReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chipReport.SChipReport)
    MergeFrom(*source);
  }
}

void SChipReport::MergeFrom(const SChipReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chipReport.SChipReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isselect() != 0) {
    _internal_set_isselect(from._internal_isselect());
  }
}

void SChipReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chipReport.SChipReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChipReport::CopyFrom(const SChipReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chipReport.SChipReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChipReport::IsInitialized() const {
  return true;
}

void SChipReport::InternalSwap(SChipReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isselect_, other->isselect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SChipReport::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chipReport
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chipReport::CChipReport* Arena::CreateMaybeMessage< ::chipReport::CChipReport >(Arena* arena) {
  return Arena::CreateInternal< ::chipReport::CChipReport >(arena);
}
template<> PROTOBUF_NOINLINE ::chipReport::SChipReport* Arena::CreateMaybeMessage< ::chipReport::SChipReport >(Arena* arena) {
  return Arena::CreateInternal< ::chipReport::SChipReport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
