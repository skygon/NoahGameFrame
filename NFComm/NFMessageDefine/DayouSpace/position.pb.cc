// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: position.proto

#include "position.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace position {
class BPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BPosition> _instance;
} _BPosition_default_instance_;
class BPosition2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BPosition2> _instance;
} _BPosition2_default_instance_;
}  // namespace position
static void InitDefaultsscc_info_BPosition_position_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::position::_BPosition_default_instance_;
    new (ptr) ::position::BPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::position::BPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPosition_position_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BPosition_position_2eproto}, {}};

static void InitDefaultsscc_info_BPosition2_position_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::position::_BPosition2_default_instance_;
    new (ptr) ::position::BPosition2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::position::BPosition2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPosition2_position_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BPosition2_position_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_position_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_position_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_position_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_position_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::position::BPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::position::BPosition, x_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, y_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, z_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, px_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, py_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, pz_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, stickx_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, sticky_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, namehash_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, normalizedtime_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, x_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, y_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, z_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, px_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, py_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, pz_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, stickx_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, sticky_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, namehash_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, normalizedtime_),
  PROTOBUF_FIELD_OFFSET(::position::BPosition2, speed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::position::BPosition)},
  { 16, -1, sizeof(::position::BPosition2)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::position::_BPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::position::_BPosition2_default_instance_),
};

const char descriptor_table_protodef_position_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016position.proto\022\010position\"\251\001\n\tBPosition"
  "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\n\n\002px\030"
  "\004 \001(\002\022\n\n\002py\030\005 \001(\002\022\n\n\002pz\030\006 \001(\002\022\016\n\006stickX\030"
  "\007 \001(\002\022\016\n\006stickY\030\010 \001(\002\022\020\n\010nameHash\030\t \001(\005\022"
  "\026\n\016normalizedTime\030\n \001(\002\022\r\n\005speed\030c \001(\002\"\252"
  "\001\n\nBPosition2\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z"
  "\030\003 \001(\005\022\n\n\002px\030\004 \001(\005\022\n\n\002py\030\005 \001(\005\022\n\n\002pz\030\006 \001"
  "(\005\022\016\n\006stickX\030\007 \001(\002\022\016\n\006stickY\030\010 \001(\002\022\020\n\010na"
  "meHash\030\t \001(\005\022\026\n\016normalizedTime\030\n \001(\002\022\r\n\005"
  "speed\030c \001(\002B$\n\030com.dayou.space.protobufB"
  "\010Positionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_position_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_position_2eproto_sccs[2] = {
  &scc_info_BPosition_position_2eproto.base,
  &scc_info_BPosition2_position_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_position_2eproto_once;
static bool descriptor_table_position_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_position_2eproto = {
  &descriptor_table_position_2eproto_initialized, descriptor_table_protodef_position_2eproto, "position.proto", 417,
  &descriptor_table_position_2eproto_once, descriptor_table_position_2eproto_sccs, descriptor_table_position_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_position_2eproto::offsets,
  file_level_metadata_position_2eproto, 2, file_level_enum_descriptors_position_2eproto, file_level_service_descriptors_position_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_position_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_position_2eproto), true);
namespace position {

// ===================================================================

void BPosition::InitAsDefaultInstance() {
}
class BPosition::_Internal {
 public:
};

BPosition::BPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:position.BPosition)
}
BPosition::BPosition(const BPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&x_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:position.BPosition)
}

void BPosition::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(speed_));
}

BPosition::~BPosition() {
  // @@protoc_insertion_point(destructor:position.BPosition)
  SharedDtor();
}

void BPosition::SharedDtor() {
}

void BPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BPosition& BPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BPosition_position_2eproto.base);
  return *internal_default_instance();
}


void BPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:position.BPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

const char* BPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float px = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float py = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          py_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          pz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float stickX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          stickx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float stickY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 nameHash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          namehash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float normalizedTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          normalizedtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:position.BPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float px = 4;
  if (!(this->px() <= 0 && this->px() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_px(), target);
  }

  // float py = 5;
  if (!(this->py() <= 0 && this->py() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_py(), target);
  }

  // float pz = 6;
  if (!(this->pz() <= 0 && this->pz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pz(), target);
  }

  // float stickX = 7;
  if (!(this->stickx() <= 0 && this->stickx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_stickx(), target);
  }

  // float stickY = 8;
  if (!(this->sticky() <= 0 && this->sticky() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_sticky(), target);
  }

  // int32 nameHash = 9;
  if (this->namehash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_namehash(), target);
  }

  // float normalizedTime = 10;
  if (!(this->normalizedtime() <= 0 && this->normalizedtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_normalizedtime(), target);
  }

  // float speed = 99;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(99, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:position.BPosition)
  return target;
}

size_t BPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:position.BPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float px = 4;
  if (!(this->px() <= 0 && this->px() >= 0)) {
    total_size += 1 + 4;
  }

  // float py = 5;
  if (!(this->py() <= 0 && this->py() >= 0)) {
    total_size += 1 + 4;
  }

  // float pz = 6;
  if (!(this->pz() <= 0 && this->pz() >= 0)) {
    total_size += 1 + 4;
  }

  // float stickX = 7;
  if (!(this->stickx() <= 0 && this->stickx() >= 0)) {
    total_size += 1 + 4;
  }

  // float stickY = 8;
  if (!(this->sticky() <= 0 && this->sticky() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nameHash = 9;
  if (this->namehash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_namehash());
  }

  // float normalizedTime = 10;
  if (!(this->normalizedtime() <= 0 && this->normalizedtime() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed = 99;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:position.BPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const BPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:position.BPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:position.BPosition)
    MergeFrom(*source);
  }
}

void BPosition::MergeFrom(const BPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:position.BPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.px() <= 0 && from.px() >= 0)) {
    _internal_set_px(from._internal_px());
  }
  if (!(from.py() <= 0 && from.py() >= 0)) {
    _internal_set_py(from._internal_py());
  }
  if (!(from.pz() <= 0 && from.pz() >= 0)) {
    _internal_set_pz(from._internal_pz());
  }
  if (!(from.stickx() <= 0 && from.stickx() >= 0)) {
    _internal_set_stickx(from._internal_stickx());
  }
  if (!(from.sticky() <= 0 && from.sticky() >= 0)) {
    _internal_set_sticky(from._internal_sticky());
  }
  if (from.namehash() != 0) {
    _internal_set_namehash(from._internal_namehash());
  }
  if (!(from.normalizedtime() <= 0 && from.normalizedtime() >= 0)) {
    _internal_set_normalizedtime(from._internal_normalizedtime());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
}

void BPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:position.BPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPosition::CopyFrom(const BPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:position.BPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPosition::IsInitialized() const {
  return true;
}

void BPosition::InternalSwap(BPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(px_, other->px_);
  swap(py_, other->py_);
  swap(pz_, other->pz_);
  swap(stickx_, other->stickx_);
  swap(sticky_, other->sticky_);
  swap(namehash_, other->namehash_);
  swap(normalizedtime_, other->normalizedtime_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BPosition2::InitAsDefaultInstance() {
}
class BPosition2::_Internal {
 public:
};

BPosition2::BPosition2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:position.BPosition2)
}
BPosition2::BPosition2(const BPosition2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&x_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:position.BPosition2)
}

void BPosition2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(speed_));
}

BPosition2::~BPosition2() {
  // @@protoc_insertion_point(destructor:position.BPosition2)
  SharedDtor();
}

void BPosition2::SharedDtor() {
}

void BPosition2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BPosition2& BPosition2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BPosition2_position_2eproto.base);
  return *internal_default_instance();
}


void BPosition2::Clear() {
// @@protoc_insertion_point(message_clear_start:position.BPosition2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

const char* BPosition2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 px = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 py = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          py_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float stickX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          stickx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float stickY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 nameHash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          namehash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float normalizedTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          normalizedtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BPosition2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:position.BPosition2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 z = 3;
  if (this->z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  // int32 px = 4;
  if (this->px() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_px(), target);
  }

  // int32 py = 5;
  if (this->py() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_py(), target);
  }

  // int32 pz = 6;
  if (this->pz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_pz(), target);
  }

  // float stickX = 7;
  if (!(this->stickx() <= 0 && this->stickx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_stickx(), target);
  }

  // float stickY = 8;
  if (!(this->sticky() <= 0 && this->sticky() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_sticky(), target);
  }

  // int32 nameHash = 9;
  if (this->namehash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_namehash(), target);
  }

  // float normalizedTime = 10;
  if (!(this->normalizedtime() <= 0 && this->normalizedtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_normalizedtime(), target);
  }

  // float speed = 99;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(99, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:position.BPosition2)
  return target;
}

size_t BPosition2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:position.BPosition2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z());
  }

  // int32 px = 4;
  if (this->px() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_px());
  }

  // int32 py = 5;
  if (this->py() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_py());
  }

  // int32 pz = 6;
  if (this->pz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pz());
  }

  // float stickX = 7;
  if (!(this->stickx() <= 0 && this->stickx() >= 0)) {
    total_size += 1 + 4;
  }

  // float stickY = 8;
  if (!(this->sticky() <= 0 && this->sticky() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nameHash = 9;
  if (this->namehash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_namehash());
  }

  // float normalizedTime = 10;
  if (!(this->normalizedtime() <= 0 && this->normalizedtime() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed = 99;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BPosition2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:position.BPosition2)
  GOOGLE_DCHECK_NE(&from, this);
  const BPosition2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BPosition2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:position.BPosition2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:position.BPosition2)
    MergeFrom(*source);
  }
}

void BPosition2::MergeFrom(const BPosition2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:position.BPosition2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.z() != 0) {
    _internal_set_z(from._internal_z());
  }
  if (from.px() != 0) {
    _internal_set_px(from._internal_px());
  }
  if (from.py() != 0) {
    _internal_set_py(from._internal_py());
  }
  if (from.pz() != 0) {
    _internal_set_pz(from._internal_pz());
  }
  if (!(from.stickx() <= 0 && from.stickx() >= 0)) {
    _internal_set_stickx(from._internal_stickx());
  }
  if (!(from.sticky() <= 0 && from.sticky() >= 0)) {
    _internal_set_sticky(from._internal_sticky());
  }
  if (from.namehash() != 0) {
    _internal_set_namehash(from._internal_namehash());
  }
  if (!(from.normalizedtime() <= 0 && from.normalizedtime() >= 0)) {
    _internal_set_normalizedtime(from._internal_normalizedtime());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
}

void BPosition2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:position.BPosition2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPosition2::CopyFrom(const BPosition2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:position.BPosition2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPosition2::IsInitialized() const {
  return true;
}

void BPosition2::InternalSwap(BPosition2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(px_, other->px_);
  swap(py_, other->py_);
  swap(pz_, other->pz_);
  swap(stickx_, other->stickx_);
  swap(sticky_, other->sticky_);
  swap(namehash_, other->namehash_);
  swap(normalizedtime_, other->normalizedtime_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BPosition2::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace position
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::position::BPosition* Arena::CreateMaybeMessage< ::position::BPosition >(Arena* arena) {
  return Arena::CreateInternal< ::position::BPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::position::BPosition2* Arena::CreateMaybeMessage< ::position::BPosition2 >(Arena* arena) {
  return Arena::CreateInternal< ::position::BPosition2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
