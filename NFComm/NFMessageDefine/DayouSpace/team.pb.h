// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_team_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_team_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_team_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_team_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_team_2eproto;
namespace pb {
class BTeamUser;
class BTeamUserDefaultTypeInternal;
extern BTeamUserDefaultTypeInternal _BTeamUser_default_instance_;
class BUsersTeamState;
class BUsersTeamStateDefaultTypeInternal;
extern BUsersTeamStateDefaultTypeInternal _BUsersTeamState_default_instance_;
class CInviteTeam;
class CInviteTeamDefaultTypeInternal;
extern CInviteTeamDefaultTypeInternal _CInviteTeam_default_instance_;
class CLeaveTeam;
class CLeaveTeamDefaultTypeInternal;
extern CLeaveTeamDefaultTypeInternal _CLeaveTeam_default_instance_;
class CReplyInviteTeam;
class CReplyInviteTeamDefaultTypeInternal;
extern CReplyInviteTeamDefaultTypeInternal _CReplyInviteTeam_default_instance_;
class CUpdateMikeStatus;
class CUpdateMikeStatusDefaultTypeInternal;
extern CUpdateMikeStatusDefaultTypeInternal _CUpdateMikeStatus_default_instance_;
class CUsersTeamState;
class CUsersTeamStateDefaultTypeInternal;
extern CUsersTeamStateDefaultTypeInternal _CUsersTeamState_default_instance_;
class SInviteTeam;
class SInviteTeamDefaultTypeInternal;
extern SInviteTeamDefaultTypeInternal _SInviteTeam_default_instance_;
class SLeaveTeam;
class SLeaveTeamDefaultTypeInternal;
extern SLeaveTeamDefaultTypeInternal _SLeaveTeam_default_instance_;
class SReplyInviteTeam;
class SReplyInviteTeamDefaultTypeInternal;
extern SReplyInviteTeamDefaultTypeInternal _SReplyInviteTeam_default_instance_;
class STeamUserList;
class STeamUserListDefaultTypeInternal;
extern STeamUserListDefaultTypeInternal _STeamUserList_default_instance_;
class SUpdateMikeStatus;
class SUpdateMikeStatusDefaultTypeInternal;
extern SUpdateMikeStatusDefaultTypeInternal _SUpdateMikeStatus_default_instance_;
class SUsersTeamState;
class SUsersTeamStateDefaultTypeInternal;
extern SUsersTeamStateDefaultTypeInternal _SUsersTeamState_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::BTeamUser* Arena::CreateMaybeMessage<::pb::BTeamUser>(Arena*);
template<> ::pb::BUsersTeamState* Arena::CreateMaybeMessage<::pb::BUsersTeamState>(Arena*);
template<> ::pb::CInviteTeam* Arena::CreateMaybeMessage<::pb::CInviteTeam>(Arena*);
template<> ::pb::CLeaveTeam* Arena::CreateMaybeMessage<::pb::CLeaveTeam>(Arena*);
template<> ::pb::CReplyInviteTeam* Arena::CreateMaybeMessage<::pb::CReplyInviteTeam>(Arena*);
template<> ::pb::CUpdateMikeStatus* Arena::CreateMaybeMessage<::pb::CUpdateMikeStatus>(Arena*);
template<> ::pb::CUsersTeamState* Arena::CreateMaybeMessage<::pb::CUsersTeamState>(Arena*);
template<> ::pb::SInviteTeam* Arena::CreateMaybeMessage<::pb::SInviteTeam>(Arena*);
template<> ::pb::SLeaveTeam* Arena::CreateMaybeMessage<::pb::SLeaveTeam>(Arena*);
template<> ::pb::SReplyInviteTeam* Arena::CreateMaybeMessage<::pb::SReplyInviteTeam>(Arena*);
template<> ::pb::STeamUserList* Arena::CreateMaybeMessage<::pb::STeamUserList>(Arena*);
template<> ::pb::SUpdateMikeStatus* Arena::CreateMaybeMessage<::pb::SUpdateMikeStatus>(Arena*);
template<> ::pb::SUsersTeamState* Arena::CreateMaybeMessage<::pb::SUsersTeamState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class CInviteTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CInviteTeam) */ {
 public:
  CInviteTeam();
  virtual ~CInviteTeam();

  CInviteTeam(const CInviteTeam& from);
  CInviteTeam(CInviteTeam&& from) noexcept
    : CInviteTeam() {
    *this = ::std::move(from);
  }

  inline CInviteTeam& operator=(const CInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInviteTeam& operator=(CInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CInviteTeam* internal_default_instance() {
    return reinterpret_cast<const CInviteTeam*>(
               &_CInviteTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CInviteTeam& a, CInviteTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CInviteTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CInviteTeam* New() const final {
    return CreateMaybeMessage<CInviteTeam>(nullptr);
  }

  CInviteTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CInviteTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CInviteTeam& from);
  void MergeFrom(const CInviteTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInviteTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CInviteTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteeUidFieldNumber = 1,
  };
  // int32 inviteeUid = 1;
  void clear_inviteeuid();
  ::PROTOBUF_NAMESPACE_ID::int32 inviteeuid() const;
  void set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inviteeuid() const;
  void _internal_set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CInviteTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 inviteeuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class SInviteTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SInviteTeam) */ {
 public:
  SInviteTeam();
  virtual ~SInviteTeam();

  SInviteTeam(const SInviteTeam& from);
  SInviteTeam(SInviteTeam&& from) noexcept
    : SInviteTeam() {
    *this = ::std::move(from);
  }

  inline SInviteTeam& operator=(const SInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SInviteTeam& operator=(SInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SInviteTeam* internal_default_instance() {
    return reinterpret_cast<const SInviteTeam*>(
               &_SInviteTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SInviteTeam& a, SInviteTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(SInviteTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SInviteTeam* New() const final {
    return CreateMaybeMessage<SInviteTeam>(nullptr);
  }

  SInviteTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SInviteTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SInviteTeam& from);
  void MergeFrom(const SInviteTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SInviteTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SInviteTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kInviteAvatarFieldNumber = 4,
    kInviteNickFieldNumber = 6,
    kInviteRelationFieldNumber = 7,
    kIpFieldNumber = 8,
    kStateFieldNumber = 1,
    kInviteUidFieldNumber = 5,
    kInviteRelationIdFieldNumber = 9,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string channelId = 3;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string inviteAvatar = 4;
  void clear_inviteavatar();
  const std::string& inviteavatar() const;
  void set_inviteavatar(const std::string& value);
  void set_inviteavatar(std::string&& value);
  void set_inviteavatar(const char* value);
  void set_inviteavatar(const char* value, size_t size);
  std::string* mutable_inviteavatar();
  std::string* release_inviteavatar();
  void set_allocated_inviteavatar(std::string* inviteavatar);
  private:
  const std::string& _internal_inviteavatar() const;
  void _internal_set_inviteavatar(const std::string& value);
  std::string* _internal_mutable_inviteavatar();
  public:

  // string inviteNick = 6;
  void clear_invitenick();
  const std::string& invitenick() const;
  void set_invitenick(const std::string& value);
  void set_invitenick(std::string&& value);
  void set_invitenick(const char* value);
  void set_invitenick(const char* value, size_t size);
  std::string* mutable_invitenick();
  std::string* release_invitenick();
  void set_allocated_invitenick(std::string* invitenick);
  private:
  const std::string& _internal_invitenick() const;
  void _internal_set_invitenick(const std::string& value);
  std::string* _internal_mutable_invitenick();
  public:

  // string inviteRelation = 7;
  void clear_inviterelation();
  const std::string& inviterelation() const;
  void set_inviterelation(const std::string& value);
  void set_inviterelation(std::string&& value);
  void set_inviterelation(const char* value);
  void set_inviterelation(const char* value, size_t size);
  std::string* mutable_inviterelation();
  std::string* release_inviterelation();
  void set_allocated_inviterelation(std::string* inviterelation);
  private:
  const std::string& _internal_inviterelation() const;
  void _internal_set_inviterelation(const std::string& value);
  std::string* _internal_mutable_inviterelation();
  public:

  // string ip = 8;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inviteUid = 5;
  void clear_inviteuid();
  ::PROTOBUF_NAMESPACE_ID::int32 inviteuid() const;
  void set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inviteuid() const;
  void _internal_set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inviteRelationId = 9;
  void clear_inviterelationid();
  ::PROTOBUF_NAMESPACE_ID::int32 inviterelationid() const;
  void set_inviterelationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inviterelationid() const;
  void _internal_set_inviterelationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SInviteTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviteavatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitenick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviterelation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 inviteuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 inviterelationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class CReplyInviteTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CReplyInviteTeam) */ {
 public:
  CReplyInviteTeam();
  virtual ~CReplyInviteTeam();

  CReplyInviteTeam(const CReplyInviteTeam& from);
  CReplyInviteTeam(CReplyInviteTeam&& from) noexcept
    : CReplyInviteTeam() {
    *this = ::std::move(from);
  }

  inline CReplyInviteTeam& operator=(const CReplyInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CReplyInviteTeam& operator=(CReplyInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CReplyInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CReplyInviteTeam* internal_default_instance() {
    return reinterpret_cast<const CReplyInviteTeam*>(
               &_CReplyInviteTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CReplyInviteTeam& a, CReplyInviteTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CReplyInviteTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CReplyInviteTeam* New() const final {
    return CreateMaybeMessage<CReplyInviteTeam>(nullptr);
  }

  CReplyInviteTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CReplyInviteTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CReplyInviteTeam& from);
  void MergeFrom(const CReplyInviteTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CReplyInviteTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CReplyInviteTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CReplyInviteTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class SReplyInviteTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SReplyInviteTeam) */ {
 public:
  SReplyInviteTeam();
  virtual ~SReplyInviteTeam();

  SReplyInviteTeam(const SReplyInviteTeam& from);
  SReplyInviteTeam(SReplyInviteTeam&& from) noexcept
    : SReplyInviteTeam() {
    *this = ::std::move(from);
  }

  inline SReplyInviteTeam& operator=(const SReplyInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SReplyInviteTeam& operator=(SReplyInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SReplyInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SReplyInviteTeam* internal_default_instance() {
    return reinterpret_cast<const SReplyInviteTeam*>(
               &_SReplyInviteTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SReplyInviteTeam& a, SReplyInviteTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(SReplyInviteTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SReplyInviteTeam* New() const final {
    return CreateMaybeMessage<SReplyInviteTeam>(nullptr);
  }

  SReplyInviteTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SReplyInviteTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SReplyInviteTeam& from);
  void MergeFrom(const SReplyInviteTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SReplyInviteTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SReplyInviteTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserListFieldNumber = 7,
    kMsgFieldNumber = 2,
    kAppidFieldNumber = 3,
    kChannelIdFieldNumber = 4,
    kTokenFieldNumber = 5,
    kStateFieldNumber = 1,
    kInviteeUidFieldNumber = 6,
  };
  // repeated .pb.BTeamUser userList = 7;
  int userlist_size() const;
  private:
  int _internal_userlist_size() const;
  public:
  void clear_userlist();
  ::pb::BTeamUser* mutable_userlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser >*
      mutable_userlist();
  private:
  const ::pb::BTeamUser& _internal_userlist(int index) const;
  ::pb::BTeamUser* _internal_add_userlist();
  public:
  const ::pb::BTeamUser& userlist(int index) const;
  ::pb::BTeamUser* add_userlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser >&
      userlist() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string appid = 3;
  void clear_appid();
  const std::string& appid() const;
  void set_appid(const std::string& value);
  void set_appid(std::string&& value);
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  std::string* mutable_appid();
  std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // string channelId = 4;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string token = 5;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inviteeUid = 6;
  void clear_inviteeuid();
  ::PROTOBUF_NAMESPACE_ID::int32 inviteeuid() const;
  void set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inviteeuid() const;
  void _internal_set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SReplyInviteTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser > userlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 inviteeuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class BTeamUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BTeamUser) */ {
 public:
  BTeamUser();
  virtual ~BTeamUser();

  BTeamUser(const BTeamUser& from);
  BTeamUser(BTeamUser&& from) noexcept
    : BTeamUser() {
    *this = ::std::move(from);
  }

  inline BTeamUser& operator=(const BTeamUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTeamUser& operator=(BTeamUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BTeamUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BTeamUser* internal_default_instance() {
    return reinterpret_cast<const BTeamUser*>(
               &_BTeamUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BTeamUser& a, BTeamUser& b) {
    a.Swap(&b);
  }
  inline void Swap(BTeamUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTeamUser* New() const final {
    return CreateMaybeMessage<BTeamUser>(nullptr);
  }

  BTeamUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTeamUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTeamUser& from);
  void MergeFrom(const BTeamUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTeamUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BTeamUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarFieldNumber = 2,
    kNickFieldNumber = 3,
    kUidFieldNumber = 1,
    kIdentityFieldNumber = 4,
    kMikeStatusFieldNumber = 5,
  };
  // string avatar = 2;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string nick = 3;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 identity = 4;
  void clear_identity();
  ::PROTOBUF_NAMESPACE_ID::int32 identity() const;
  void set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_identity() const;
  void _internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mikeStatus = 5;
  void clear_mikestatus();
  ::PROTOBUF_NAMESPACE_ID::int32 mikestatus() const;
  void set_mikestatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mikestatus() const;
  void _internal_set_mikestatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BTeamUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 identity_;
  ::PROTOBUF_NAMESPACE_ID::int32 mikestatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class STeamUserList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.STeamUserList) */ {
 public:
  STeamUserList();
  virtual ~STeamUserList();

  STeamUserList(const STeamUserList& from);
  STeamUserList(STeamUserList&& from) noexcept
    : STeamUserList() {
    *this = ::std::move(from);
  }

  inline STeamUserList& operator=(const STeamUserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline STeamUserList& operator=(STeamUserList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STeamUserList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STeamUserList* internal_default_instance() {
    return reinterpret_cast<const STeamUserList*>(
               &_STeamUserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(STeamUserList& a, STeamUserList& b) {
    a.Swap(&b);
  }
  inline void Swap(STeamUserList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STeamUserList* New() const final {
    return CreateMaybeMessage<STeamUserList>(nullptr);
  }

  STeamUserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STeamUserList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STeamUserList& from);
  void MergeFrom(const STeamUserList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STeamUserList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.STeamUserList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserListFieldNumber = 5,
    kAppidFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kTokenFieldNumber = 4,
    kStateFieldNumber = 1,
  };
  // repeated .pb.BTeamUser userList = 5;
  int userlist_size() const;
  private:
  int _internal_userlist_size() const;
  public:
  void clear_userlist();
  ::pb::BTeamUser* mutable_userlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser >*
      mutable_userlist();
  private:
  const ::pb::BTeamUser& _internal_userlist(int index) const;
  ::pb::BTeamUser* _internal_add_userlist();
  public:
  const ::pb::BTeamUser& userlist(int index) const;
  ::pb::BTeamUser* add_userlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser >&
      userlist() const;

  // string appid = 2;
  void clear_appid();
  const std::string& appid() const;
  void set_appid(const std::string& value);
  void set_appid(std::string&& value);
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  std::string* mutable_appid();
  std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // string channelId = 3;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.STeamUserList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser > userlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class CLeaveTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CLeaveTeam) */ {
 public:
  CLeaveTeam();
  virtual ~CLeaveTeam();

  CLeaveTeam(const CLeaveTeam& from);
  CLeaveTeam(CLeaveTeam&& from) noexcept
    : CLeaveTeam() {
    *this = ::std::move(from);
  }

  inline CLeaveTeam& operator=(const CLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLeaveTeam& operator=(CLeaveTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLeaveTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLeaveTeam* internal_default_instance() {
    return reinterpret_cast<const CLeaveTeam*>(
               &_CLeaveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CLeaveTeam& a, CLeaveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CLeaveTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLeaveTeam* New() const final {
    return CreateMaybeMessage<CLeaveTeam>(nullptr);
  }

  CLeaveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLeaveTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLeaveTeam& from);
  void MergeFrom(const CLeaveTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLeaveTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CLeaveTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CLeaveTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class SLeaveTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SLeaveTeam) */ {
 public:
  SLeaveTeam();
  virtual ~SLeaveTeam();

  SLeaveTeam(const SLeaveTeam& from);
  SLeaveTeam(SLeaveTeam&& from) noexcept
    : SLeaveTeam() {
    *this = ::std::move(from);
  }

  inline SLeaveTeam& operator=(const SLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLeaveTeam& operator=(SLeaveTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLeaveTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLeaveTeam* internal_default_instance() {
    return reinterpret_cast<const SLeaveTeam*>(
               &_SLeaveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLeaveTeam& a, SLeaveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(SLeaveTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLeaveTeam* New() const final {
    return CreateMaybeMessage<SLeaveTeam>(nullptr);
  }

  SLeaveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLeaveTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLeaveTeam& from);
  void MergeFrom(const SLeaveTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLeaveTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SLeaveTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
    kUidFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SLeaveTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class CUsersTeamState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CUsersTeamState) */ {
 public:
  CUsersTeamState();
  virtual ~CUsersTeamState();

  CUsersTeamState(const CUsersTeamState& from);
  CUsersTeamState(CUsersTeamState&& from) noexcept
    : CUsersTeamState() {
    *this = ::std::move(from);
  }

  inline CUsersTeamState& operator=(const CUsersTeamState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUsersTeamState& operator=(CUsersTeamState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUsersTeamState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUsersTeamState* internal_default_instance() {
    return reinterpret_cast<const CUsersTeamState*>(
               &_CUsersTeamState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CUsersTeamState& a, CUsersTeamState& b) {
    a.Swap(&b);
  }
  inline void Swap(CUsersTeamState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUsersTeamState* New() const final {
    return CreateMaybeMessage<CUsersTeamState>(nullptr);
  }

  CUsersTeamState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUsersTeamState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUsersTeamState& from);
  void MergeFrom(const CUsersTeamState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUsersTeamState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CUsersTeamState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 1,
  };
  // repeated int32 uids = 1;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uids() const;
  void _internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uids(int index) const;
  void set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:pb.CUsersTeamState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class SUsersTeamState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SUsersTeamState) */ {
 public:
  SUsersTeamState();
  virtual ~SUsersTeamState();

  SUsersTeamState(const SUsersTeamState& from);
  SUsersTeamState(SUsersTeamState&& from) noexcept
    : SUsersTeamState() {
    *this = ::std::move(from);
  }

  inline SUsersTeamState& operator=(const SUsersTeamState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUsersTeamState& operator=(SUsersTeamState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUsersTeamState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUsersTeamState* internal_default_instance() {
    return reinterpret_cast<const SUsersTeamState*>(
               &_SUsersTeamState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SUsersTeamState& a, SUsersTeamState& b) {
    a.Swap(&b);
  }
  inline void Swap(SUsersTeamState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUsersTeamState* New() const final {
    return CreateMaybeMessage<SUsersTeamState>(nullptr);
  }

  SUsersTeamState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUsersTeamState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUsersTeamState& from);
  void MergeFrom(const SUsersTeamState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUsersTeamState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SUsersTeamState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .pb.BUsersTeamState list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::pb::BUsersTeamState* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BUsersTeamState >*
      mutable_list();
  private:
  const ::pb::BUsersTeamState& _internal_list(int index) const;
  ::pb::BUsersTeamState* _internal_add_list();
  public:
  const ::pb::BUsersTeamState& list(int index) const;
  ::pb::BUsersTeamState* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BUsersTeamState >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.SUsersTeamState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BUsersTeamState > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class BUsersTeamState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BUsersTeamState) */ {
 public:
  BUsersTeamState();
  virtual ~BUsersTeamState();

  BUsersTeamState(const BUsersTeamState& from);
  BUsersTeamState(BUsersTeamState&& from) noexcept
    : BUsersTeamState() {
    *this = ::std::move(from);
  }

  inline BUsersTeamState& operator=(const BUsersTeamState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BUsersTeamState& operator=(BUsersTeamState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BUsersTeamState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BUsersTeamState* internal_default_instance() {
    return reinterpret_cast<const BUsersTeamState*>(
               &_BUsersTeamState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BUsersTeamState& a, BUsersTeamState& b) {
    a.Swap(&b);
  }
  inline void Swap(BUsersTeamState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BUsersTeamState* New() const final {
    return CreateMaybeMessage<BUsersTeamState>(nullptr);
  }

  BUsersTeamState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BUsersTeamState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BUsersTeamState& from);
  void MergeFrom(const BUsersTeamState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BUsersTeamState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BUsersTeamState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BUsersTeamState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class CUpdateMikeStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CUpdateMikeStatus) */ {
 public:
  CUpdateMikeStatus();
  virtual ~CUpdateMikeStatus();

  CUpdateMikeStatus(const CUpdateMikeStatus& from);
  CUpdateMikeStatus(CUpdateMikeStatus&& from) noexcept
    : CUpdateMikeStatus() {
    *this = ::std::move(from);
  }

  inline CUpdateMikeStatus& operator=(const CUpdateMikeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUpdateMikeStatus& operator=(CUpdateMikeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUpdateMikeStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUpdateMikeStatus* internal_default_instance() {
    return reinterpret_cast<const CUpdateMikeStatus*>(
               &_CUpdateMikeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CUpdateMikeStatus& a, CUpdateMikeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CUpdateMikeStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUpdateMikeStatus* New() const final {
    return CreateMaybeMessage<CUpdateMikeStatus>(nullptr);
  }

  CUpdateMikeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUpdateMikeStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUpdateMikeStatus& from);
  void MergeFrom(const CUpdateMikeStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUpdateMikeStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CUpdateMikeStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CUpdateMikeStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class SUpdateMikeStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SUpdateMikeStatus) */ {
 public:
  SUpdateMikeStatus();
  virtual ~SUpdateMikeStatus();

  SUpdateMikeStatus(const SUpdateMikeStatus& from);
  SUpdateMikeStatus(SUpdateMikeStatus&& from) noexcept
    : SUpdateMikeStatus() {
    *this = ::std::move(from);
  }

  inline SUpdateMikeStatus& operator=(const SUpdateMikeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUpdateMikeStatus& operator=(SUpdateMikeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUpdateMikeStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUpdateMikeStatus* internal_default_instance() {
    return reinterpret_cast<const SUpdateMikeStatus*>(
               &_SUpdateMikeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SUpdateMikeStatus& a, SUpdateMikeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SUpdateMikeStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUpdateMikeStatus* New() const final {
    return CreateMaybeMessage<SUpdateMikeStatus>(nullptr);
  }

  SUpdateMikeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUpdateMikeStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUpdateMikeStatus& from);
  void MergeFrom(const SUpdateMikeStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUpdateMikeStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SUpdateMikeStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SUpdateMikeStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CInviteTeam

// int32 inviteeUid = 1;
inline void CInviteTeam::clear_inviteeuid() {
  inviteeuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CInviteTeam::_internal_inviteeuid() const {
  return inviteeuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CInviteTeam::inviteeuid() const {
  // @@protoc_insertion_point(field_get:pb.CInviteTeam.inviteeUid)
  return _internal_inviteeuid();
}
inline void CInviteTeam::_internal_set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inviteeuid_ = value;
}
inline void CInviteTeam::set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inviteeuid(value);
  // @@protoc_insertion_point(field_set:pb.CInviteTeam.inviteeUid)
}

// -------------------------------------------------------------------

// SInviteTeam

// int32 state = 1;
inline void SInviteTeam::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInviteTeam::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInviteTeam::state() const {
  // @@protoc_insertion_point(field_get:pb.SInviteTeam.state)
  return _internal_state();
}
inline void SInviteTeam::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SInviteTeam::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.SInviteTeam.state)
}

// string msg = 2;
inline void SInviteTeam::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SInviteTeam::msg() const {
  // @@protoc_insertion_point(field_get:pb.SInviteTeam.msg)
  return _internal_msg();
}
inline void SInviteTeam::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:pb.SInviteTeam.msg)
}
inline std::string* SInviteTeam::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:pb.SInviteTeam.msg)
  return _internal_mutable_msg();
}
inline const std::string& SInviteTeam::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SInviteTeam::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SInviteTeam::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SInviteTeam.msg)
}
inline void SInviteTeam::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SInviteTeam.msg)
}
inline void SInviteTeam::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SInviteTeam.msg)
}
inline std::string* SInviteTeam::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SInviteTeam::release_msg() {
  // @@protoc_insertion_point(field_release:pb.SInviteTeam.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SInviteTeam::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.SInviteTeam.msg)
}

// string channelId = 3;
inline void SInviteTeam::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SInviteTeam::channelid() const {
  // @@protoc_insertion_point(field_get:pb.SInviteTeam.channelId)
  return _internal_channelid();
}
inline void SInviteTeam::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:pb.SInviteTeam.channelId)
}
inline std::string* SInviteTeam::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:pb.SInviteTeam.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& SInviteTeam::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void SInviteTeam::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SInviteTeam::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SInviteTeam.channelId)
}
inline void SInviteTeam::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SInviteTeam.channelId)
}
inline void SInviteTeam::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SInviteTeam.channelId)
}
inline std::string* SInviteTeam::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SInviteTeam::release_channelid() {
  // @@protoc_insertion_point(field_release:pb.SInviteTeam.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SInviteTeam::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:pb.SInviteTeam.channelId)
}

// string inviteAvatar = 4;
inline void SInviteTeam::clear_inviteavatar() {
  inviteavatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SInviteTeam::inviteavatar() const {
  // @@protoc_insertion_point(field_get:pb.SInviteTeam.inviteAvatar)
  return _internal_inviteavatar();
}
inline void SInviteTeam::set_inviteavatar(const std::string& value) {
  _internal_set_inviteavatar(value);
  // @@protoc_insertion_point(field_set:pb.SInviteTeam.inviteAvatar)
}
inline std::string* SInviteTeam::mutable_inviteavatar() {
  // @@protoc_insertion_point(field_mutable:pb.SInviteTeam.inviteAvatar)
  return _internal_mutable_inviteavatar();
}
inline const std::string& SInviteTeam::_internal_inviteavatar() const {
  return inviteavatar_.GetNoArena();
}
inline void SInviteTeam::_internal_set_inviteavatar(const std::string& value) {
  
  inviteavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SInviteTeam::set_inviteavatar(std::string&& value) {
  
  inviteavatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SInviteTeam.inviteAvatar)
}
inline void SInviteTeam::set_inviteavatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inviteavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SInviteTeam.inviteAvatar)
}
inline void SInviteTeam::set_inviteavatar(const char* value, size_t size) {
  
  inviteavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SInviteTeam.inviteAvatar)
}
inline std::string* SInviteTeam::_internal_mutable_inviteavatar() {
  
  return inviteavatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SInviteTeam::release_inviteavatar() {
  // @@protoc_insertion_point(field_release:pb.SInviteTeam.inviteAvatar)
  
  return inviteavatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SInviteTeam::set_allocated_inviteavatar(std::string* inviteavatar) {
  if (inviteavatar != nullptr) {
    
  } else {
    
  }
  inviteavatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviteavatar);
  // @@protoc_insertion_point(field_set_allocated:pb.SInviteTeam.inviteAvatar)
}

// int32 inviteUid = 5;
inline void SInviteTeam::clear_inviteuid() {
  inviteuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInviteTeam::_internal_inviteuid() const {
  return inviteuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInviteTeam::inviteuid() const {
  // @@protoc_insertion_point(field_get:pb.SInviteTeam.inviteUid)
  return _internal_inviteuid();
}
inline void SInviteTeam::_internal_set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inviteuid_ = value;
}
inline void SInviteTeam::set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inviteuid(value);
  // @@protoc_insertion_point(field_set:pb.SInviteTeam.inviteUid)
}

// string inviteNick = 6;
inline void SInviteTeam::clear_invitenick() {
  invitenick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SInviteTeam::invitenick() const {
  // @@protoc_insertion_point(field_get:pb.SInviteTeam.inviteNick)
  return _internal_invitenick();
}
inline void SInviteTeam::set_invitenick(const std::string& value) {
  _internal_set_invitenick(value);
  // @@protoc_insertion_point(field_set:pb.SInviteTeam.inviteNick)
}
inline std::string* SInviteTeam::mutable_invitenick() {
  // @@protoc_insertion_point(field_mutable:pb.SInviteTeam.inviteNick)
  return _internal_mutable_invitenick();
}
inline const std::string& SInviteTeam::_internal_invitenick() const {
  return invitenick_.GetNoArena();
}
inline void SInviteTeam::_internal_set_invitenick(const std::string& value) {
  
  invitenick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SInviteTeam::set_invitenick(std::string&& value) {
  
  invitenick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SInviteTeam.inviteNick)
}
inline void SInviteTeam::set_invitenick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invitenick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SInviteTeam.inviteNick)
}
inline void SInviteTeam::set_invitenick(const char* value, size_t size) {
  
  invitenick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SInviteTeam.inviteNick)
}
inline std::string* SInviteTeam::_internal_mutable_invitenick() {
  
  return invitenick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SInviteTeam::release_invitenick() {
  // @@protoc_insertion_point(field_release:pb.SInviteTeam.inviteNick)
  
  return invitenick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SInviteTeam::set_allocated_invitenick(std::string* invitenick) {
  if (invitenick != nullptr) {
    
  } else {
    
  }
  invitenick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitenick);
  // @@protoc_insertion_point(field_set_allocated:pb.SInviteTeam.inviteNick)
}

// string inviteRelation = 7;
inline void SInviteTeam::clear_inviterelation() {
  inviterelation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SInviteTeam::inviterelation() const {
  // @@protoc_insertion_point(field_get:pb.SInviteTeam.inviteRelation)
  return _internal_inviterelation();
}
inline void SInviteTeam::set_inviterelation(const std::string& value) {
  _internal_set_inviterelation(value);
  // @@protoc_insertion_point(field_set:pb.SInviteTeam.inviteRelation)
}
inline std::string* SInviteTeam::mutable_inviterelation() {
  // @@protoc_insertion_point(field_mutable:pb.SInviteTeam.inviteRelation)
  return _internal_mutable_inviterelation();
}
inline const std::string& SInviteTeam::_internal_inviterelation() const {
  return inviterelation_.GetNoArena();
}
inline void SInviteTeam::_internal_set_inviterelation(const std::string& value) {
  
  inviterelation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SInviteTeam::set_inviterelation(std::string&& value) {
  
  inviterelation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SInviteTeam.inviteRelation)
}
inline void SInviteTeam::set_inviterelation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inviterelation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SInviteTeam.inviteRelation)
}
inline void SInviteTeam::set_inviterelation(const char* value, size_t size) {
  
  inviterelation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SInviteTeam.inviteRelation)
}
inline std::string* SInviteTeam::_internal_mutable_inviterelation() {
  
  return inviterelation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SInviteTeam::release_inviterelation() {
  // @@protoc_insertion_point(field_release:pb.SInviteTeam.inviteRelation)
  
  return inviterelation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SInviteTeam::set_allocated_inviterelation(std::string* inviterelation) {
  if (inviterelation != nullptr) {
    
  } else {
    
  }
  inviterelation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviterelation);
  // @@protoc_insertion_point(field_set_allocated:pb.SInviteTeam.inviteRelation)
}

// string ip = 8;
inline void SInviteTeam::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SInviteTeam::ip() const {
  // @@protoc_insertion_point(field_get:pb.SInviteTeam.ip)
  return _internal_ip();
}
inline void SInviteTeam::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:pb.SInviteTeam.ip)
}
inline std::string* SInviteTeam::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:pb.SInviteTeam.ip)
  return _internal_mutable_ip();
}
inline const std::string& SInviteTeam::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void SInviteTeam::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SInviteTeam::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SInviteTeam.ip)
}
inline void SInviteTeam::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SInviteTeam.ip)
}
inline void SInviteTeam::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SInviteTeam.ip)
}
inline std::string* SInviteTeam::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SInviteTeam::release_ip() {
  // @@protoc_insertion_point(field_release:pb.SInviteTeam.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SInviteTeam::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:pb.SInviteTeam.ip)
}

// int32 inviteRelationId = 9;
inline void SInviteTeam::clear_inviterelationid() {
  inviterelationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInviteTeam::_internal_inviterelationid() const {
  return inviterelationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInviteTeam::inviterelationid() const {
  // @@protoc_insertion_point(field_get:pb.SInviteTeam.inviteRelationId)
  return _internal_inviterelationid();
}
inline void SInviteTeam::_internal_set_inviterelationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inviterelationid_ = value;
}
inline void SInviteTeam::set_inviterelationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inviterelationid(value);
  // @@protoc_insertion_point(field_set:pb.SInviteTeam.inviteRelationId)
}

// -------------------------------------------------------------------

// CReplyInviteTeam

// string channelId = 1;
inline void CReplyInviteTeam::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CReplyInviteTeam::channelid() const {
  // @@protoc_insertion_point(field_get:pb.CReplyInviteTeam.channelId)
  return _internal_channelid();
}
inline void CReplyInviteTeam::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:pb.CReplyInviteTeam.channelId)
}
inline std::string* CReplyInviteTeam::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:pb.CReplyInviteTeam.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& CReplyInviteTeam::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void CReplyInviteTeam::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CReplyInviteTeam::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CReplyInviteTeam.channelId)
}
inline void CReplyInviteTeam::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CReplyInviteTeam.channelId)
}
inline void CReplyInviteTeam::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CReplyInviteTeam.channelId)
}
inline std::string* CReplyInviteTeam::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CReplyInviteTeam::release_channelid() {
  // @@protoc_insertion_point(field_release:pb.CReplyInviteTeam.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CReplyInviteTeam::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:pb.CReplyInviteTeam.channelId)
}

// int32 state = 2;
inline void CReplyInviteTeam::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CReplyInviteTeam::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CReplyInviteTeam::state() const {
  // @@protoc_insertion_point(field_get:pb.CReplyInviteTeam.state)
  return _internal_state();
}
inline void CReplyInviteTeam::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void CReplyInviteTeam::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.CReplyInviteTeam.state)
}

// -------------------------------------------------------------------

// SReplyInviteTeam

// int32 state = 1;
inline void SReplyInviteTeam::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SReplyInviteTeam::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SReplyInviteTeam::state() const {
  // @@protoc_insertion_point(field_get:pb.SReplyInviteTeam.state)
  return _internal_state();
}
inline void SReplyInviteTeam::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SReplyInviteTeam::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.SReplyInviteTeam.state)
}

// string msg = 2;
inline void SReplyInviteTeam::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SReplyInviteTeam::msg() const {
  // @@protoc_insertion_point(field_get:pb.SReplyInviteTeam.msg)
  return _internal_msg();
}
inline void SReplyInviteTeam::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:pb.SReplyInviteTeam.msg)
}
inline std::string* SReplyInviteTeam::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:pb.SReplyInviteTeam.msg)
  return _internal_mutable_msg();
}
inline const std::string& SReplyInviteTeam::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SReplyInviteTeam::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SReplyInviteTeam::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SReplyInviteTeam.msg)
}
inline void SReplyInviteTeam::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SReplyInviteTeam.msg)
}
inline void SReplyInviteTeam::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SReplyInviteTeam.msg)
}
inline std::string* SReplyInviteTeam::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SReplyInviteTeam::release_msg() {
  // @@protoc_insertion_point(field_release:pb.SReplyInviteTeam.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SReplyInviteTeam::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.SReplyInviteTeam.msg)
}

// string appid = 3;
inline void SReplyInviteTeam::clear_appid() {
  appid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SReplyInviteTeam::appid() const {
  // @@protoc_insertion_point(field_get:pb.SReplyInviteTeam.appid)
  return _internal_appid();
}
inline void SReplyInviteTeam::set_appid(const std::string& value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:pb.SReplyInviteTeam.appid)
}
inline std::string* SReplyInviteTeam::mutable_appid() {
  // @@protoc_insertion_point(field_mutable:pb.SReplyInviteTeam.appid)
  return _internal_mutable_appid();
}
inline const std::string& SReplyInviteTeam::_internal_appid() const {
  return appid_.GetNoArena();
}
inline void SReplyInviteTeam::_internal_set_appid(const std::string& value) {
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SReplyInviteTeam::set_appid(std::string&& value) {
  
  appid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SReplyInviteTeam.appid)
}
inline void SReplyInviteTeam::set_appid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SReplyInviteTeam.appid)
}
inline void SReplyInviteTeam::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SReplyInviteTeam.appid)
}
inline std::string* SReplyInviteTeam::_internal_mutable_appid() {
  
  return appid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SReplyInviteTeam::release_appid() {
  // @@protoc_insertion_point(field_release:pb.SReplyInviteTeam.appid)
  
  return appid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SReplyInviteTeam::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:pb.SReplyInviteTeam.appid)
}

// string channelId = 4;
inline void SReplyInviteTeam::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SReplyInviteTeam::channelid() const {
  // @@protoc_insertion_point(field_get:pb.SReplyInviteTeam.channelId)
  return _internal_channelid();
}
inline void SReplyInviteTeam::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:pb.SReplyInviteTeam.channelId)
}
inline std::string* SReplyInviteTeam::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:pb.SReplyInviteTeam.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& SReplyInviteTeam::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void SReplyInviteTeam::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SReplyInviteTeam::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SReplyInviteTeam.channelId)
}
inline void SReplyInviteTeam::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SReplyInviteTeam.channelId)
}
inline void SReplyInviteTeam::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SReplyInviteTeam.channelId)
}
inline std::string* SReplyInviteTeam::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SReplyInviteTeam::release_channelid() {
  // @@protoc_insertion_point(field_release:pb.SReplyInviteTeam.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SReplyInviteTeam::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:pb.SReplyInviteTeam.channelId)
}

// string token = 5;
inline void SReplyInviteTeam::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SReplyInviteTeam::token() const {
  // @@protoc_insertion_point(field_get:pb.SReplyInviteTeam.token)
  return _internal_token();
}
inline void SReplyInviteTeam::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:pb.SReplyInviteTeam.token)
}
inline std::string* SReplyInviteTeam::mutable_token() {
  // @@protoc_insertion_point(field_mutable:pb.SReplyInviteTeam.token)
  return _internal_mutable_token();
}
inline const std::string& SReplyInviteTeam::_internal_token() const {
  return token_.GetNoArena();
}
inline void SReplyInviteTeam::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SReplyInviteTeam::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SReplyInviteTeam.token)
}
inline void SReplyInviteTeam::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SReplyInviteTeam.token)
}
inline void SReplyInviteTeam::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SReplyInviteTeam.token)
}
inline std::string* SReplyInviteTeam::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SReplyInviteTeam::release_token() {
  // @@protoc_insertion_point(field_release:pb.SReplyInviteTeam.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SReplyInviteTeam::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.SReplyInviteTeam.token)
}

// int32 inviteeUid = 6;
inline void SReplyInviteTeam::clear_inviteeuid() {
  inviteeuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SReplyInviteTeam::_internal_inviteeuid() const {
  return inviteeuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SReplyInviteTeam::inviteeuid() const {
  // @@protoc_insertion_point(field_get:pb.SReplyInviteTeam.inviteeUid)
  return _internal_inviteeuid();
}
inline void SReplyInviteTeam::_internal_set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inviteeuid_ = value;
}
inline void SReplyInviteTeam::set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inviteeuid(value);
  // @@protoc_insertion_point(field_set:pb.SReplyInviteTeam.inviteeUid)
}

// repeated .pb.BTeamUser userList = 7;
inline int SReplyInviteTeam::_internal_userlist_size() const {
  return userlist_.size();
}
inline int SReplyInviteTeam::userlist_size() const {
  return _internal_userlist_size();
}
inline void SReplyInviteTeam::clear_userlist() {
  userlist_.Clear();
}
inline ::pb::BTeamUser* SReplyInviteTeam::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SReplyInviteTeam.userList)
  return userlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser >*
SReplyInviteTeam::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.SReplyInviteTeam.userList)
  return &userlist_;
}
inline const ::pb::BTeamUser& SReplyInviteTeam::_internal_userlist(int index) const {
  return userlist_.Get(index);
}
inline const ::pb::BTeamUser& SReplyInviteTeam::userlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.SReplyInviteTeam.userList)
  return _internal_userlist(index);
}
inline ::pb::BTeamUser* SReplyInviteTeam::_internal_add_userlist() {
  return userlist_.Add();
}
inline ::pb::BTeamUser* SReplyInviteTeam::add_userlist() {
  // @@protoc_insertion_point(field_add:pb.SReplyInviteTeam.userList)
  return _internal_add_userlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser >&
SReplyInviteTeam::userlist() const {
  // @@protoc_insertion_point(field_list:pb.SReplyInviteTeam.userList)
  return userlist_;
}

// -------------------------------------------------------------------

// BTeamUser

// int32 uid = 1;
inline void BTeamUser::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTeamUser::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTeamUser::uid() const {
  // @@protoc_insertion_point(field_get:pb.BTeamUser.uid)
  return _internal_uid();
}
inline void BTeamUser::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BTeamUser::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.BTeamUser.uid)
}

// string avatar = 2;
inline void BTeamUser::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BTeamUser::avatar() const {
  // @@protoc_insertion_point(field_get:pb.BTeamUser.avatar)
  return _internal_avatar();
}
inline void BTeamUser::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:pb.BTeamUser.avatar)
}
inline std::string* BTeamUser::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:pb.BTeamUser.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& BTeamUser::_internal_avatar() const {
  return avatar_.GetNoArena();
}
inline void BTeamUser::_internal_set_avatar(const std::string& value) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BTeamUser::set_avatar(std::string&& value) {
  
  avatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BTeamUser.avatar)
}
inline void BTeamUser::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BTeamUser.avatar)
}
inline void BTeamUser::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BTeamUser.avatar)
}
inline std::string* BTeamUser::_internal_mutable_avatar() {
  
  return avatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BTeamUser::release_avatar() {
  // @@protoc_insertion_point(field_release:pb.BTeamUser.avatar)
  
  return avatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BTeamUser::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:pb.BTeamUser.avatar)
}

// string nick = 3;
inline void BTeamUser::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BTeamUser::nick() const {
  // @@protoc_insertion_point(field_get:pb.BTeamUser.nick)
  return _internal_nick();
}
inline void BTeamUser::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:pb.BTeamUser.nick)
}
inline std::string* BTeamUser::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:pb.BTeamUser.nick)
  return _internal_mutable_nick();
}
inline const std::string& BTeamUser::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void BTeamUser::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BTeamUser::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BTeamUser.nick)
}
inline void BTeamUser::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BTeamUser.nick)
}
inline void BTeamUser::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BTeamUser.nick)
}
inline std::string* BTeamUser::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BTeamUser::release_nick() {
  // @@protoc_insertion_point(field_release:pb.BTeamUser.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BTeamUser::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:pb.BTeamUser.nick)
}

// int32 identity = 4;
inline void BTeamUser::clear_identity() {
  identity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTeamUser::_internal_identity() const {
  return identity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTeamUser::identity() const {
  // @@protoc_insertion_point(field_get:pb.BTeamUser.identity)
  return _internal_identity();
}
inline void BTeamUser::_internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  identity_ = value;
}
inline void BTeamUser::set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_identity(value);
  // @@protoc_insertion_point(field_set:pb.BTeamUser.identity)
}

// int32 mikeStatus = 5;
inline void BTeamUser::clear_mikestatus() {
  mikestatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTeamUser::_internal_mikestatus() const {
  return mikestatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTeamUser::mikestatus() const {
  // @@protoc_insertion_point(field_get:pb.BTeamUser.mikeStatus)
  return _internal_mikestatus();
}
inline void BTeamUser::_internal_set_mikestatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mikestatus_ = value;
}
inline void BTeamUser::set_mikestatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mikestatus(value);
  // @@protoc_insertion_point(field_set:pb.BTeamUser.mikeStatus)
}

// -------------------------------------------------------------------

// STeamUserList

// int32 state = 1;
inline void STeamUserList::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STeamUserList::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STeamUserList::state() const {
  // @@protoc_insertion_point(field_get:pb.STeamUserList.state)
  return _internal_state();
}
inline void STeamUserList::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void STeamUserList::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.STeamUserList.state)
}

// string appid = 2;
inline void STeamUserList::clear_appid() {
  appid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STeamUserList::appid() const {
  // @@protoc_insertion_point(field_get:pb.STeamUserList.appid)
  return _internal_appid();
}
inline void STeamUserList::set_appid(const std::string& value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:pb.STeamUserList.appid)
}
inline std::string* STeamUserList::mutable_appid() {
  // @@protoc_insertion_point(field_mutable:pb.STeamUserList.appid)
  return _internal_mutable_appid();
}
inline const std::string& STeamUserList::_internal_appid() const {
  return appid_.GetNoArena();
}
inline void STeamUserList::_internal_set_appid(const std::string& value) {
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void STeamUserList::set_appid(std::string&& value) {
  
  appid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.STeamUserList.appid)
}
inline void STeamUserList::set_appid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.STeamUserList.appid)
}
inline void STeamUserList::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.STeamUserList.appid)
}
inline std::string* STeamUserList::_internal_mutable_appid() {
  
  return appid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STeamUserList::release_appid() {
  // @@protoc_insertion_point(field_release:pb.STeamUserList.appid)
  
  return appid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STeamUserList::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:pb.STeamUserList.appid)
}

// string channelId = 3;
inline void STeamUserList::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STeamUserList::channelid() const {
  // @@protoc_insertion_point(field_get:pb.STeamUserList.channelId)
  return _internal_channelid();
}
inline void STeamUserList::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:pb.STeamUserList.channelId)
}
inline std::string* STeamUserList::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:pb.STeamUserList.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& STeamUserList::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void STeamUserList::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void STeamUserList::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.STeamUserList.channelId)
}
inline void STeamUserList::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.STeamUserList.channelId)
}
inline void STeamUserList::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.STeamUserList.channelId)
}
inline std::string* STeamUserList::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STeamUserList::release_channelid() {
  // @@protoc_insertion_point(field_release:pb.STeamUserList.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STeamUserList::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:pb.STeamUserList.channelId)
}

// string token = 4;
inline void STeamUserList::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STeamUserList::token() const {
  // @@protoc_insertion_point(field_get:pb.STeamUserList.token)
  return _internal_token();
}
inline void STeamUserList::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:pb.STeamUserList.token)
}
inline std::string* STeamUserList::mutable_token() {
  // @@protoc_insertion_point(field_mutable:pb.STeamUserList.token)
  return _internal_mutable_token();
}
inline const std::string& STeamUserList::_internal_token() const {
  return token_.GetNoArena();
}
inline void STeamUserList::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void STeamUserList::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.STeamUserList.token)
}
inline void STeamUserList::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.STeamUserList.token)
}
inline void STeamUserList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.STeamUserList.token)
}
inline std::string* STeamUserList::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STeamUserList::release_token() {
  // @@protoc_insertion_point(field_release:pb.STeamUserList.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STeamUserList::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.STeamUserList.token)
}

// repeated .pb.BTeamUser userList = 5;
inline int STeamUserList::_internal_userlist_size() const {
  return userlist_.size();
}
inline int STeamUserList::userlist_size() const {
  return _internal_userlist_size();
}
inline void STeamUserList::clear_userlist() {
  userlist_.Clear();
}
inline ::pb::BTeamUser* STeamUserList::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.STeamUserList.userList)
  return userlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser >*
STeamUserList::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.STeamUserList.userList)
  return &userlist_;
}
inline const ::pb::BTeamUser& STeamUserList::_internal_userlist(int index) const {
  return userlist_.Get(index);
}
inline const ::pb::BTeamUser& STeamUserList::userlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.STeamUserList.userList)
  return _internal_userlist(index);
}
inline ::pb::BTeamUser* STeamUserList::_internal_add_userlist() {
  return userlist_.Add();
}
inline ::pb::BTeamUser* STeamUserList::add_userlist() {
  // @@protoc_insertion_point(field_add:pb.STeamUserList.userList)
  return _internal_add_userlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BTeamUser >&
STeamUserList::userlist() const {
  // @@protoc_insertion_point(field_list:pb.STeamUserList.userList)
  return userlist_;
}

// -------------------------------------------------------------------

// CLeaveTeam

// string channelId = 1;
inline void CLeaveTeam::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CLeaveTeam::channelid() const {
  // @@protoc_insertion_point(field_get:pb.CLeaveTeam.channelId)
  return _internal_channelid();
}
inline void CLeaveTeam::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:pb.CLeaveTeam.channelId)
}
inline std::string* CLeaveTeam::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:pb.CLeaveTeam.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& CLeaveTeam::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void CLeaveTeam::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CLeaveTeam::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CLeaveTeam.channelId)
}
inline void CLeaveTeam::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CLeaveTeam.channelId)
}
inline void CLeaveTeam::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CLeaveTeam.channelId)
}
inline std::string* CLeaveTeam::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CLeaveTeam::release_channelid() {
  // @@protoc_insertion_point(field_release:pb.CLeaveTeam.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CLeaveTeam::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:pb.CLeaveTeam.channelId)
}

// int32 uid = 2;
inline void CLeaveTeam::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLeaveTeam::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLeaveTeam::uid() const {
  // @@protoc_insertion_point(field_get:pb.CLeaveTeam.uid)
  return _internal_uid();
}
inline void CLeaveTeam::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CLeaveTeam::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.CLeaveTeam.uid)
}

// -------------------------------------------------------------------

// SLeaveTeam

// int32 state = 1;
inline void SLeaveTeam::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLeaveTeam::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLeaveTeam::state() const {
  // @@protoc_insertion_point(field_get:pb.SLeaveTeam.state)
  return _internal_state();
}
inline void SLeaveTeam::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SLeaveTeam::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.SLeaveTeam.state)
}

// string msg = 2;
inline void SLeaveTeam::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SLeaveTeam::msg() const {
  // @@protoc_insertion_point(field_get:pb.SLeaveTeam.msg)
  return _internal_msg();
}
inline void SLeaveTeam::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:pb.SLeaveTeam.msg)
}
inline std::string* SLeaveTeam::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:pb.SLeaveTeam.msg)
  return _internal_mutable_msg();
}
inline const std::string& SLeaveTeam::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SLeaveTeam::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SLeaveTeam::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SLeaveTeam.msg)
}
inline void SLeaveTeam::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SLeaveTeam.msg)
}
inline void SLeaveTeam::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SLeaveTeam.msg)
}
inline std::string* SLeaveTeam::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SLeaveTeam::release_msg() {
  // @@protoc_insertion_point(field_release:pb.SLeaveTeam.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SLeaveTeam::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.SLeaveTeam.msg)
}

// int32 uid = 3;
inline void SLeaveTeam::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLeaveTeam::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLeaveTeam::uid() const {
  // @@protoc_insertion_point(field_get:pb.SLeaveTeam.uid)
  return _internal_uid();
}
inline void SLeaveTeam::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SLeaveTeam::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.SLeaveTeam.uid)
}

// -------------------------------------------------------------------

// CUsersTeamState

// repeated int32 uids = 1;
inline int CUsersTeamState::_internal_uids_size() const {
  return uids_.size();
}
inline int CUsersTeamState::uids_size() const {
  return _internal_uids_size();
}
inline void CUsersTeamState::clear_uids() {
  uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUsersTeamState::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUsersTeamState::uids(int index) const {
  // @@protoc_insertion_point(field_get:pb.CUsersTeamState.uids)
  return _internal_uids(index);
}
inline void CUsersTeamState::set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.CUsersTeamState.uids)
}
inline void CUsersTeamState::_internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Add(value);
}
inline void CUsersTeamState::add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:pb.CUsersTeamState.uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CUsersTeamState::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CUsersTeamState::uids() const {
  // @@protoc_insertion_point(field_list:pb.CUsersTeamState.uids)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CUsersTeamState::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CUsersTeamState::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:pb.CUsersTeamState.uids)
  return _internal_mutable_uids();
}

// -------------------------------------------------------------------

// SUsersTeamState

// repeated .pb.BUsersTeamState list = 1;
inline int SUsersTeamState::_internal_list_size() const {
  return list_.size();
}
inline int SUsersTeamState::list_size() const {
  return _internal_list_size();
}
inline void SUsersTeamState::clear_list() {
  list_.Clear();
}
inline ::pb::BUsersTeamState* SUsersTeamState::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SUsersTeamState.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BUsersTeamState >*
SUsersTeamState::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.SUsersTeamState.list)
  return &list_;
}
inline const ::pb::BUsersTeamState& SUsersTeamState::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::pb::BUsersTeamState& SUsersTeamState::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.SUsersTeamState.list)
  return _internal_list(index);
}
inline ::pb::BUsersTeamState* SUsersTeamState::_internal_add_list() {
  return list_.Add();
}
inline ::pb::BUsersTeamState* SUsersTeamState::add_list() {
  // @@protoc_insertion_point(field_add:pb.SUsersTeamState.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BUsersTeamState >&
SUsersTeamState::list() const {
  // @@protoc_insertion_point(field_list:pb.SUsersTeamState.list)
  return list_;
}

// -------------------------------------------------------------------

// BUsersTeamState

// int32 uid = 1;
inline void BUsersTeamState::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BUsersTeamState::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BUsersTeamState::uid() const {
  // @@protoc_insertion_point(field_get:pb.BUsersTeamState.uid)
  return _internal_uid();
}
inline void BUsersTeamState::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BUsersTeamState::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.BUsersTeamState.uid)
}

// int32 state = 2;
inline void BUsersTeamState::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BUsersTeamState::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BUsersTeamState::state() const {
  // @@protoc_insertion_point(field_get:pb.BUsersTeamState.state)
  return _internal_state();
}
inline void BUsersTeamState::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void BUsersTeamState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.BUsersTeamState.state)
}

// -------------------------------------------------------------------

// CUpdateMikeStatus

// int32 status = 1;
inline void CUpdateMikeStatus::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUpdateMikeStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUpdateMikeStatus::status() const {
  // @@protoc_insertion_point(field_get:pb.CUpdateMikeStatus.status)
  return _internal_status();
}
inline void CUpdateMikeStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void CUpdateMikeStatus::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pb.CUpdateMikeStatus.status)
}

// -------------------------------------------------------------------

// SUpdateMikeStatus

// int32 status = 1;
inline void SUpdateMikeStatus::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateMikeStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateMikeStatus::status() const {
  // @@protoc_insertion_point(field_get:pb.SUpdateMikeStatus.status)
  return _internal_status();
}
inline void SUpdateMikeStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SUpdateMikeStatus::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pb.SUpdateMikeStatus.status)
}

// int32 uid = 2;
inline void SUpdateMikeStatus::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateMikeStatus::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateMikeStatus::uid() const {
  // @@protoc_insertion_point(field_get:pb.SUpdateMikeStatus.uid)
  return _internal_uid();
}
inline void SUpdateMikeStatus::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SUpdateMikeStatus::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.SUpdateMikeStatus.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_team_2eproto
