// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace chat {
class BChatListInfo;
class BChatListInfoDefaultTypeInternal;
extern BChatListInfoDefaultTypeInternal _BChatListInfo_default_instance_;
class CChatDetail;
class CChatDetailDefaultTypeInternal;
extern CChatDetailDefaultTypeInternal _CChatDetail_default_instance_;
class CChatList;
class CChatListDefaultTypeInternal;
extern CChatListDefaultTypeInternal _CChatList_default_instance_;
class CChatSend;
class CChatSendDefaultTypeInternal;
extern CChatSendDefaultTypeInternal _CChatSend_default_instance_;
class SChatDetail;
class SChatDetailDefaultTypeInternal;
extern SChatDetailDefaultTypeInternal _SChatDetail_default_instance_;
class SChatList;
class SChatListDefaultTypeInternal;
extern SChatListDefaultTypeInternal _SChatList_default_instance_;
class SChatSend;
class SChatSendDefaultTypeInternal;
extern SChatSendDefaultTypeInternal _SChatSend_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::BChatListInfo* Arena::CreateMaybeMessage<::chat::BChatListInfo>(Arena*);
template<> ::chat::CChatDetail* Arena::CreateMaybeMessage<::chat::CChatDetail>(Arena*);
template<> ::chat::CChatList* Arena::CreateMaybeMessage<::chat::CChatList>(Arena*);
template<> ::chat::CChatSend* Arena::CreateMaybeMessage<::chat::CChatSend>(Arena*);
template<> ::chat::SChatDetail* Arena::CreateMaybeMessage<::chat::SChatDetail>(Arena*);
template<> ::chat::SChatList* Arena::CreateMaybeMessage<::chat::SChatList>(Arena*);
template<> ::chat::SChatSend* Arena::CreateMaybeMessage<::chat::SChatSend>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

// ===================================================================

class CChatList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.CChatList) */ {
 public:
  CChatList();
  virtual ~CChatList();

  CChatList(const CChatList& from);
  CChatList(CChatList&& from) noexcept
    : CChatList() {
    *this = ::std::move(from);
  }

  inline CChatList& operator=(const CChatList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CChatList& operator=(CChatList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CChatList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CChatList* internal_default_instance() {
    return reinterpret_cast<const CChatList*>(
               &_CChatList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CChatList& a, CChatList& b) {
    a.Swap(&b);
  }
  inline void Swap(CChatList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CChatList* New() const final {
    return CreateMaybeMessage<CChatList>(nullptr);
  }

  CChatList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CChatList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CChatList& from);
  void MergeFrom(const CChatList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CChatList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.CChatList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.CChatList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SChatList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.SChatList) */ {
 public:
  SChatList();
  virtual ~SChatList();

  SChatList(const SChatList& from);
  SChatList(SChatList&& from) noexcept
    : SChatList() {
    *this = ::std::move(from);
  }

  inline SChatList& operator=(const SChatList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChatList& operator=(SChatList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChatList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChatList* internal_default_instance() {
    return reinterpret_cast<const SChatList*>(
               &_SChatList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SChatList& a, SChatList& b) {
    a.Swap(&b);
  }
  inline void Swap(SChatList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChatList* New() const final {
    return CreateMaybeMessage<SChatList>(nullptr);
  }

  SChatList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChatList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChatList& from);
  void MergeFrom(const SChatList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChatList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.SChatList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .chat.BChatListInfo infoList = 2;
  int infolist_size() const;
  private:
  int _internal_infolist_size() const;
  public:
  void clear_infolist();
  ::chat::BChatListInfo* mutable_infolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::BChatListInfo >*
      mutable_infolist();
  private:
  const ::chat::BChatListInfo& _internal_infolist(int index) const;
  ::chat::BChatListInfo* _internal_add_infolist();
  public:
  const ::chat::BChatListInfo& infolist(int index) const;
  ::chat::BChatListInfo* add_infolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::BChatListInfo >&
      infolist() const;

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.SChatList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::BChatListInfo > infolist_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class BChatListInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.BChatListInfo) */ {
 public:
  BChatListInfo();
  virtual ~BChatListInfo();

  BChatListInfo(const BChatListInfo& from);
  BChatListInfo(BChatListInfo&& from) noexcept
    : BChatListInfo() {
    *this = ::std::move(from);
  }

  inline BChatListInfo& operator=(const BChatListInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BChatListInfo& operator=(BChatListInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BChatListInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BChatListInfo* internal_default_instance() {
    return reinterpret_cast<const BChatListInfo*>(
               &_BChatListInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BChatListInfo& a, BChatListInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BChatListInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BChatListInfo* New() const final {
    return CreateMaybeMessage<BChatListInfo>(nullptr);
  }

  BChatListInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BChatListInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BChatListInfo& from);
  void MergeFrom(const BChatListInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BChatListInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.BChatListInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kHeadPicFieldNumber = 3,
    kImAccountFieldNumber = 4,
    kUidFieldNumber = 1,
    kFollowStatusFieldNumber = 5,
  };
  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string headPic = 3;
  void clear_headpic();
  const std::string& headpic() const;
  void set_headpic(const std::string& value);
  void set_headpic(std::string&& value);
  void set_headpic(const char* value);
  void set_headpic(const char* value, size_t size);
  std::string* mutable_headpic();
  std::string* release_headpic();
  void set_allocated_headpic(std::string* headpic);
  private:
  const std::string& _internal_headpic() const;
  void _internal_set_headpic(const std::string& value);
  std::string* _internal_mutable_headpic();
  public:

  // string imAccount = 4;
  void clear_imaccount();
  const std::string& imaccount() const;
  void set_imaccount(const std::string& value);
  void set_imaccount(std::string&& value);
  void set_imaccount(const char* value);
  void set_imaccount(const char* value, size_t size);
  std::string* mutable_imaccount();
  std::string* release_imaccount();
  void set_allocated_imaccount(std::string* imaccount);
  private:
  const std::string& _internal_imaccount() const;
  void _internal_set_imaccount(const std::string& value);
  std::string* _internal_mutable_imaccount();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 followStatus = 5;
  void clear_followstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus() const;
  void set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_followstatus() const;
  void _internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.BChatListInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headpic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imaccount_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class CChatDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.CChatDetail) */ {
 public:
  CChatDetail();
  virtual ~CChatDetail();

  CChatDetail(const CChatDetail& from);
  CChatDetail(CChatDetail&& from) noexcept
    : CChatDetail() {
    *this = ::std::move(from);
  }

  inline CChatDetail& operator=(const CChatDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CChatDetail& operator=(CChatDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CChatDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CChatDetail* internal_default_instance() {
    return reinterpret_cast<const CChatDetail*>(
               &_CChatDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CChatDetail& a, CChatDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CChatDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CChatDetail* New() const final {
    return CreateMaybeMessage<CChatDetail>(nullptr);
  }

  CChatDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CChatDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CChatDetail& from);
  void MergeFrom(const CChatDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CChatDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.CChatDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.CChatDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SChatDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.SChatDetail) */ {
 public:
  SChatDetail();
  virtual ~SChatDetail();

  SChatDetail(const SChatDetail& from);
  SChatDetail(SChatDetail&& from) noexcept
    : SChatDetail() {
    *this = ::std::move(from);
  }

  inline SChatDetail& operator=(const SChatDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChatDetail& operator=(SChatDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChatDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChatDetail* internal_default_instance() {
    return reinterpret_cast<const SChatDetail*>(
               &_SChatDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SChatDetail& a, SChatDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SChatDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChatDetail* New() const final {
    return CreateMaybeMessage<SChatDetail>(nullptr);
  }

  SChatDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChatDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChatDetail& from);
  void MergeFrom(const SChatDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChatDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.SChatDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceNameFieldNumber = 3,
    kInfoFieldNumber = 1,
    kHouseIdFieldNumber = 2,
    kSeqFieldNumber = 4,
  };
  // string spaceName = 3;
  void clear_spacename();
  const std::string& spacename() const;
  void set_spacename(const std::string& value);
  void set_spacename(std::string&& value);
  void set_spacename(const char* value);
  void set_spacename(const char* value, size_t size);
  std::string* mutable_spacename();
  std::string* release_spacename();
  void set_allocated_spacename(std::string* spacename);
  private:
  const std::string& _internal_spacename() const;
  void _internal_set_spacename(const std::string& value);
  std::string* _internal_mutable_spacename();
  public:

  // .chat.BChatListInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::chat::BChatListInfo& info() const;
  ::chat::BChatListInfo* release_info();
  ::chat::BChatListInfo* mutable_info();
  void set_allocated_info(::chat::BChatListInfo* info);
  private:
  const ::chat::BChatListInfo& _internal_info() const;
  ::chat::BChatListInfo* _internal_mutable_info();
  public:

  // int32 houseId = 2;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seq = 4;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.SChatDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacename_;
  ::chat::BChatListInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class CChatSend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.CChatSend) */ {
 public:
  CChatSend();
  virtual ~CChatSend();

  CChatSend(const CChatSend& from);
  CChatSend(CChatSend&& from) noexcept
    : CChatSend() {
    *this = ::std::move(from);
  }

  inline CChatSend& operator=(const CChatSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CChatSend& operator=(CChatSend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CChatSend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CChatSend* internal_default_instance() {
    return reinterpret_cast<const CChatSend*>(
               &_CChatSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CChatSend& a, CChatSend& b) {
    a.Swap(&b);
  }
  inline void Swap(CChatSend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CChatSend* New() const final {
    return CreateMaybeMessage<CChatSend>(nullptr);
  }

  CChatSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CChatSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CChatSend& from);
  void MergeFrom(const CChatSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CChatSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.CChatSend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToUidFieldNumber = 1,
  };
  // int32 toUid = 1;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.CChatSend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SChatSend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.SChatSend) */ {
 public:
  SChatSend();
  virtual ~SChatSend();

  SChatSend(const SChatSend& from);
  SChatSend(SChatSend&& from) noexcept
    : SChatSend() {
    *this = ::std::move(from);
  }

  inline SChatSend& operator=(const SChatSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChatSend& operator=(SChatSend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChatSend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChatSend* internal_default_instance() {
    return reinterpret_cast<const SChatSend*>(
               &_SChatSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SChatSend& a, SChatSend& b) {
    a.Swap(&b);
  }
  inline void Swap(SChatSend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChatSend* New() const final {
    return CreateMaybeMessage<SChatSend>(nullptr);
  }

  SChatSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChatSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChatSend& from);
  void MergeFrom(const SChatSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChatSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.SChatSend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowStatusFieldNumber = 1,
  };
  // int32 followStatus = 1;
  void clear_followstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus() const;
  void set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_followstatus() const;
  void _internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.SChatSend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CChatList

// int32 type = 1;
inline void CChatList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChatList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChatList::type() const {
  // @@protoc_insertion_point(field_get:chat.CChatList.type)
  return _internal_type();
}
inline void CChatList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CChatList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chat.CChatList.type)
}

// -------------------------------------------------------------------

// SChatList

// int32 type = 1;
inline void SChatList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChatList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChatList::type() const {
  // @@protoc_insertion_point(field_get:chat.SChatList.type)
  return _internal_type();
}
inline void SChatList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SChatList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chat.SChatList.type)
}

// repeated .chat.BChatListInfo infoList = 2;
inline int SChatList::_internal_infolist_size() const {
  return infolist_.size();
}
inline int SChatList::infolist_size() const {
  return _internal_infolist_size();
}
inline void SChatList::clear_infolist() {
  infolist_.Clear();
}
inline ::chat::BChatListInfo* SChatList::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:chat.SChatList.infoList)
  return infolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::BChatListInfo >*
SChatList::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:chat.SChatList.infoList)
  return &infolist_;
}
inline const ::chat::BChatListInfo& SChatList::_internal_infolist(int index) const {
  return infolist_.Get(index);
}
inline const ::chat::BChatListInfo& SChatList::infolist(int index) const {
  // @@protoc_insertion_point(field_get:chat.SChatList.infoList)
  return _internal_infolist(index);
}
inline ::chat::BChatListInfo* SChatList::_internal_add_infolist() {
  return infolist_.Add();
}
inline ::chat::BChatListInfo* SChatList::add_infolist() {
  // @@protoc_insertion_point(field_add:chat.SChatList.infoList)
  return _internal_add_infolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::BChatListInfo >&
SChatList::infolist() const {
  // @@protoc_insertion_point(field_list:chat.SChatList.infoList)
  return infolist_;
}

// -------------------------------------------------------------------

// BChatListInfo

// int32 uid = 1;
inline void BChatListInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BChatListInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BChatListInfo::uid() const {
  // @@protoc_insertion_point(field_get:chat.BChatListInfo.uid)
  return _internal_uid();
}
inline void BChatListInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BChatListInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:chat.BChatListInfo.uid)
}

// string nick = 2;
inline void BChatListInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BChatListInfo::nick() const {
  // @@protoc_insertion_point(field_get:chat.BChatListInfo.nick)
  return _internal_nick();
}
inline void BChatListInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:chat.BChatListInfo.nick)
}
inline std::string* BChatListInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:chat.BChatListInfo.nick)
  return _internal_mutable_nick();
}
inline const std::string& BChatListInfo::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void BChatListInfo::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BChatListInfo::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.BChatListInfo.nick)
}
inline void BChatListInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BChatListInfo.nick)
}
inline void BChatListInfo::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BChatListInfo.nick)
}
inline std::string* BChatListInfo::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BChatListInfo::release_nick() {
  // @@protoc_insertion_point(field_release:chat.BChatListInfo.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BChatListInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.BChatListInfo.nick)
}

// string headPic = 3;
inline void BChatListInfo::clear_headpic() {
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BChatListInfo::headpic() const {
  // @@protoc_insertion_point(field_get:chat.BChatListInfo.headPic)
  return _internal_headpic();
}
inline void BChatListInfo::set_headpic(const std::string& value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:chat.BChatListInfo.headPic)
}
inline std::string* BChatListInfo::mutable_headpic() {
  // @@protoc_insertion_point(field_mutable:chat.BChatListInfo.headPic)
  return _internal_mutable_headpic();
}
inline const std::string& BChatListInfo::_internal_headpic() const {
  return headpic_.GetNoArena();
}
inline void BChatListInfo::_internal_set_headpic(const std::string& value) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BChatListInfo::set_headpic(std::string&& value) {
  
  headpic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.BChatListInfo.headPic)
}
inline void BChatListInfo::set_headpic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BChatListInfo.headPic)
}
inline void BChatListInfo::set_headpic(const char* value, size_t size) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BChatListInfo.headPic)
}
inline std::string* BChatListInfo::_internal_mutable_headpic() {
  
  return headpic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BChatListInfo::release_headpic() {
  // @@protoc_insertion_point(field_release:chat.BChatListInfo.headPic)
  
  return headpic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BChatListInfo::set_allocated_headpic(std::string* headpic) {
  if (headpic != nullptr) {
    
  } else {
    
  }
  headpic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headpic);
  // @@protoc_insertion_point(field_set_allocated:chat.BChatListInfo.headPic)
}

// string imAccount = 4;
inline void BChatListInfo::clear_imaccount() {
  imaccount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BChatListInfo::imaccount() const {
  // @@protoc_insertion_point(field_get:chat.BChatListInfo.imAccount)
  return _internal_imaccount();
}
inline void BChatListInfo::set_imaccount(const std::string& value) {
  _internal_set_imaccount(value);
  // @@protoc_insertion_point(field_set:chat.BChatListInfo.imAccount)
}
inline std::string* BChatListInfo::mutable_imaccount() {
  // @@protoc_insertion_point(field_mutable:chat.BChatListInfo.imAccount)
  return _internal_mutable_imaccount();
}
inline const std::string& BChatListInfo::_internal_imaccount() const {
  return imaccount_.GetNoArena();
}
inline void BChatListInfo::_internal_set_imaccount(const std::string& value) {
  
  imaccount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BChatListInfo::set_imaccount(std::string&& value) {
  
  imaccount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.BChatListInfo.imAccount)
}
inline void BChatListInfo::set_imaccount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imaccount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BChatListInfo.imAccount)
}
inline void BChatListInfo::set_imaccount(const char* value, size_t size) {
  
  imaccount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BChatListInfo.imAccount)
}
inline std::string* BChatListInfo::_internal_mutable_imaccount() {
  
  return imaccount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BChatListInfo::release_imaccount() {
  // @@protoc_insertion_point(field_release:chat.BChatListInfo.imAccount)
  
  return imaccount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BChatListInfo::set_allocated_imaccount(std::string* imaccount) {
  if (imaccount != nullptr) {
    
  } else {
    
  }
  imaccount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imaccount);
  // @@protoc_insertion_point(field_set_allocated:chat.BChatListInfo.imAccount)
}

// int32 followStatus = 5;
inline void BChatListInfo::clear_followstatus() {
  followstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BChatListInfo::_internal_followstatus() const {
  return followstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BChatListInfo::followstatus() const {
  // @@protoc_insertion_point(field_get:chat.BChatListInfo.followStatus)
  return _internal_followstatus();
}
inline void BChatListInfo::_internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  followstatus_ = value;
}
inline void BChatListInfo::set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_followstatus(value);
  // @@protoc_insertion_point(field_set:chat.BChatListInfo.followStatus)
}

// -------------------------------------------------------------------

// CChatDetail

// int32 uid = 1;
inline void CChatDetail::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChatDetail::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChatDetail::uid() const {
  // @@protoc_insertion_point(field_get:chat.CChatDetail.uid)
  return _internal_uid();
}
inline void CChatDetail::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CChatDetail::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:chat.CChatDetail.uid)
}

// -------------------------------------------------------------------

// SChatDetail

// .chat.BChatListInfo info = 1;
inline bool SChatDetail::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SChatDetail::has_info() const {
  return _internal_has_info();
}
inline void SChatDetail::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::chat::BChatListInfo& SChatDetail::_internal_info() const {
  const ::chat::BChatListInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::BChatListInfo*>(
      &::chat::_BChatListInfo_default_instance_);
}
inline const ::chat::BChatListInfo& SChatDetail::info() const {
  // @@protoc_insertion_point(field_get:chat.SChatDetail.info)
  return _internal_info();
}
inline ::chat::BChatListInfo* SChatDetail::release_info() {
  // @@protoc_insertion_point(field_release:chat.SChatDetail.info)
  
  ::chat::BChatListInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::chat::BChatListInfo* SChatDetail::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::BChatListInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::chat::BChatListInfo* SChatDetail::mutable_info() {
  // @@protoc_insertion_point(field_mutable:chat.SChatDetail.info)
  return _internal_mutable_info();
}
inline void SChatDetail::set_allocated_info(::chat::BChatListInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:chat.SChatDetail.info)
}

// int32 houseId = 2;
inline void SChatDetail::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChatDetail::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChatDetail::houseid() const {
  // @@protoc_insertion_point(field_get:chat.SChatDetail.houseId)
  return _internal_houseid();
}
inline void SChatDetail::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SChatDetail::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:chat.SChatDetail.houseId)
}

// string spaceName = 3;
inline void SChatDetail::clear_spacename() {
  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SChatDetail::spacename() const {
  // @@protoc_insertion_point(field_get:chat.SChatDetail.spaceName)
  return _internal_spacename();
}
inline void SChatDetail::set_spacename(const std::string& value) {
  _internal_set_spacename(value);
  // @@protoc_insertion_point(field_set:chat.SChatDetail.spaceName)
}
inline std::string* SChatDetail::mutable_spacename() {
  // @@protoc_insertion_point(field_mutable:chat.SChatDetail.spaceName)
  return _internal_mutable_spacename();
}
inline const std::string& SChatDetail::_internal_spacename() const {
  return spacename_.GetNoArena();
}
inline void SChatDetail::_internal_set_spacename(const std::string& value) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SChatDetail::set_spacename(std::string&& value) {
  
  spacename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.SChatDetail.spaceName)
}
inline void SChatDetail::set_spacename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.SChatDetail.spaceName)
}
inline void SChatDetail::set_spacename(const char* value, size_t size) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.SChatDetail.spaceName)
}
inline std::string* SChatDetail::_internal_mutable_spacename() {
  
  return spacename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SChatDetail::release_spacename() {
  // @@protoc_insertion_point(field_release:chat.SChatDetail.spaceName)
  
  return spacename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SChatDetail::set_allocated_spacename(std::string* spacename) {
  if (spacename != nullptr) {
    
  } else {
    
  }
  spacename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacename);
  // @@protoc_insertion_point(field_set_allocated:chat.SChatDetail.spaceName)
}

// int32 seq = 4;
inline void SChatDetail::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChatDetail::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChatDetail::seq() const {
  // @@protoc_insertion_point(field_get:chat.SChatDetail.seq)
  return _internal_seq();
}
inline void SChatDetail::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void SChatDetail::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:chat.SChatDetail.seq)
}

// -------------------------------------------------------------------

// CChatSend

// int32 toUid = 1;
inline void CChatSend::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChatSend::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChatSend::touid() const {
  // @@protoc_insertion_point(field_get:chat.CChatSend.toUid)
  return _internal_touid();
}
inline void CChatSend::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void CChatSend::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:chat.CChatSend.toUid)
}

// -------------------------------------------------------------------

// SChatSend

// int32 followStatus = 1;
inline void SChatSend::clear_followstatus() {
  followstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChatSend::_internal_followstatus() const {
  return followstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChatSend::followstatus() const {
  // @@protoc_insertion_point(field_get:chat.SChatSend.followStatus)
  return _internal_followstatus();
}
inline void SChatSend::_internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  followstatus_ = value;
}
inline void SChatSend::set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_followstatus(value);
  // @@protoc_insertion_point(field_set:chat.SChatSend.followStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
