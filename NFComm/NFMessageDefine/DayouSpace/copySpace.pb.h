// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: copySpace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_copySpace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_copySpace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_copySpace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_copySpace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_copySpace_2eproto;
namespace copySpace {
class CCopyHouseAuth;
class CCopyHouseAuthDefaultTypeInternal;
extern CCopyHouseAuthDefaultTypeInternal _CCopyHouseAuth_default_instance_;
class CCopyHouseCreate;
class CCopyHouseCreateDefaultTypeInternal;
extern CCopyHouseCreateDefaultTypeInternal _CCopyHouseCreate_default_instance_;
class CCopyHouseDetail;
class CCopyHouseDetailDefaultTypeInternal;
extern CCopyHouseDetailDefaultTypeInternal _CCopyHouseDetail_default_instance_;
class CCopyHouseSet;
class CCopyHouseSetDefaultTypeInternal;
extern CCopyHouseSetDefaultTypeInternal _CCopyHouseSet_default_instance_;
class SCopyHouseAuth;
class SCopyHouseAuthDefaultTypeInternal;
extern SCopyHouseAuthDefaultTypeInternal _SCopyHouseAuth_default_instance_;
class SCopyHouseCreate;
class SCopyHouseCreateDefaultTypeInternal;
extern SCopyHouseCreateDefaultTypeInternal _SCopyHouseCreate_default_instance_;
class SCopyHouseDetail;
class SCopyHouseDetailDefaultTypeInternal;
extern SCopyHouseDetailDefaultTypeInternal _SCopyHouseDetail_default_instance_;
class SCopyHouseSet;
class SCopyHouseSetDefaultTypeInternal;
extern SCopyHouseSetDefaultTypeInternal _SCopyHouseSet_default_instance_;
}  // namespace copySpace
PROTOBUF_NAMESPACE_OPEN
template<> ::copySpace::CCopyHouseAuth* Arena::CreateMaybeMessage<::copySpace::CCopyHouseAuth>(Arena*);
template<> ::copySpace::CCopyHouseCreate* Arena::CreateMaybeMessage<::copySpace::CCopyHouseCreate>(Arena*);
template<> ::copySpace::CCopyHouseDetail* Arena::CreateMaybeMessage<::copySpace::CCopyHouseDetail>(Arena*);
template<> ::copySpace::CCopyHouseSet* Arena::CreateMaybeMessage<::copySpace::CCopyHouseSet>(Arena*);
template<> ::copySpace::SCopyHouseAuth* Arena::CreateMaybeMessage<::copySpace::SCopyHouseAuth>(Arena*);
template<> ::copySpace::SCopyHouseCreate* Arena::CreateMaybeMessage<::copySpace::SCopyHouseCreate>(Arena*);
template<> ::copySpace::SCopyHouseDetail* Arena::CreateMaybeMessage<::copySpace::SCopyHouseDetail>(Arena*);
template<> ::copySpace::SCopyHouseSet* Arena::CreateMaybeMessage<::copySpace::SCopyHouseSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace copySpace {

// ===================================================================

class CCopyHouseDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copySpace.CCopyHouseDetail) */ {
 public:
  CCopyHouseDetail();
  virtual ~CCopyHouseDetail();

  CCopyHouseDetail(const CCopyHouseDetail& from);
  CCopyHouseDetail(CCopyHouseDetail&& from) noexcept
    : CCopyHouseDetail() {
    *this = ::std::move(from);
  }

  inline CCopyHouseDetail& operator=(const CCopyHouseDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCopyHouseDetail& operator=(CCopyHouseDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCopyHouseDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCopyHouseDetail* internal_default_instance() {
    return reinterpret_cast<const CCopyHouseDetail*>(
               &_CCopyHouseDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCopyHouseDetail& a, CCopyHouseDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CCopyHouseDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCopyHouseDetail* New() const final {
    return CreateMaybeMessage<CCopyHouseDetail>(nullptr);
  }

  CCopyHouseDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCopyHouseDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCopyHouseDetail& from);
  void MergeFrom(const CCopyHouseDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCopyHouseDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copySpace.CCopyHouseDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copySpace_2eproto);
    return ::descriptor_table_copySpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:copySpace.CCopyHouseDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copySpace_2eproto;
};
// -------------------------------------------------------------------

class SCopyHouseDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copySpace.SCopyHouseDetail) */ {
 public:
  SCopyHouseDetail();
  virtual ~SCopyHouseDetail();

  SCopyHouseDetail(const SCopyHouseDetail& from);
  SCopyHouseDetail(SCopyHouseDetail&& from) noexcept
    : SCopyHouseDetail() {
    *this = ::std::move(from);
  }

  inline SCopyHouseDetail& operator=(const SCopyHouseDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCopyHouseDetail& operator=(SCopyHouseDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCopyHouseDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCopyHouseDetail* internal_default_instance() {
    return reinterpret_cast<const SCopyHouseDetail*>(
               &_SCopyHouseDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCopyHouseDetail& a, SCopyHouseDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SCopyHouseDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCopyHouseDetail* New() const final {
    return CreateMaybeMessage<SCopyHouseDetail>(nullptr);
  }

  SCopyHouseDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCopyHouseDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCopyHouseDetail& from);
  void MergeFrom(const SCopyHouseDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCopyHouseDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copySpace.SCopyHouseDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copySpace_2eproto);
    return ::descriptor_table_copySpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kHostAvatarFieldNumber = 6,
    kHostNickFieldNumber = 7,
    kAndroidUrlFieldNumber = 10,
    kIosUrlFieldNumber = 11,
    kWindowsUrlFieldNumber = 12,
    kPwdFieldNumber = 16,
    kConfigUrlFieldNumber = 17,
    kServerLuaUrlFieldNumber = 18,
    kClientLuaUrlFieldNumber = 19,
    kHostUidFieldNumber = 4,
    kHouseIdFieldNumber = 5,
    kTypeFieldNumber = 8,
    kSecretFieldNumber = 9,
    kSpaceIdFieldNumber = 13,
    kSerialNumberFieldNumber = 14,
    kOnlineTimeFieldNumber = 15,
  };
  // string resource = 1;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string hostAvatar = 6;
  void clear_hostavatar();
  const std::string& hostavatar() const;
  void set_hostavatar(const std::string& value);
  void set_hostavatar(std::string&& value);
  void set_hostavatar(const char* value);
  void set_hostavatar(const char* value, size_t size);
  std::string* mutable_hostavatar();
  std::string* release_hostavatar();
  void set_allocated_hostavatar(std::string* hostavatar);
  private:
  const std::string& _internal_hostavatar() const;
  void _internal_set_hostavatar(const std::string& value);
  std::string* _internal_mutable_hostavatar();
  public:

  // string hostNick = 7;
  void clear_hostnick();
  const std::string& hostnick() const;
  void set_hostnick(const std::string& value);
  void set_hostnick(std::string&& value);
  void set_hostnick(const char* value);
  void set_hostnick(const char* value, size_t size);
  std::string* mutable_hostnick();
  std::string* release_hostnick();
  void set_allocated_hostnick(std::string* hostnick);
  private:
  const std::string& _internal_hostnick() const;
  void _internal_set_hostnick(const std::string& value);
  std::string* _internal_mutable_hostnick();
  public:

  // string androidUrl = 10;
  void clear_androidurl();
  const std::string& androidurl() const;
  void set_androidurl(const std::string& value);
  void set_androidurl(std::string&& value);
  void set_androidurl(const char* value);
  void set_androidurl(const char* value, size_t size);
  std::string* mutable_androidurl();
  std::string* release_androidurl();
  void set_allocated_androidurl(std::string* androidurl);
  private:
  const std::string& _internal_androidurl() const;
  void _internal_set_androidurl(const std::string& value);
  std::string* _internal_mutable_androidurl();
  public:

  // string iosUrl = 11;
  void clear_iosurl();
  const std::string& iosurl() const;
  void set_iosurl(const std::string& value);
  void set_iosurl(std::string&& value);
  void set_iosurl(const char* value);
  void set_iosurl(const char* value, size_t size);
  std::string* mutable_iosurl();
  std::string* release_iosurl();
  void set_allocated_iosurl(std::string* iosurl);
  private:
  const std::string& _internal_iosurl() const;
  void _internal_set_iosurl(const std::string& value);
  std::string* _internal_mutable_iosurl();
  public:

  // string windowsUrl = 12;
  void clear_windowsurl();
  const std::string& windowsurl() const;
  void set_windowsurl(const std::string& value);
  void set_windowsurl(std::string&& value);
  void set_windowsurl(const char* value);
  void set_windowsurl(const char* value, size_t size);
  std::string* mutable_windowsurl();
  std::string* release_windowsurl();
  void set_allocated_windowsurl(std::string* windowsurl);
  private:
  const std::string& _internal_windowsurl() const;
  void _internal_set_windowsurl(const std::string& value);
  std::string* _internal_mutable_windowsurl();
  public:

  // string pwd = 16;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // string configUrl = 17;
  void clear_configurl();
  const std::string& configurl() const;
  void set_configurl(const std::string& value);
  void set_configurl(std::string&& value);
  void set_configurl(const char* value);
  void set_configurl(const char* value, size_t size);
  std::string* mutable_configurl();
  std::string* release_configurl();
  void set_allocated_configurl(std::string* configurl);
  private:
  const std::string& _internal_configurl() const;
  void _internal_set_configurl(const std::string& value);
  std::string* _internal_mutable_configurl();
  public:

  // string ServerLuaUrl = 18;
  void clear_serverluaurl();
  const std::string& serverluaurl() const;
  void set_serverluaurl(const std::string& value);
  void set_serverluaurl(std::string&& value);
  void set_serverluaurl(const char* value);
  void set_serverluaurl(const char* value, size_t size);
  std::string* mutable_serverluaurl();
  std::string* release_serverluaurl();
  void set_allocated_serverluaurl(std::string* serverluaurl);
  private:
  const std::string& _internal_serverluaurl() const;
  void _internal_set_serverluaurl(const std::string& value);
  std::string* _internal_mutable_serverluaurl();
  public:

  // string ClientLuaUrl = 19;
  void clear_clientluaurl();
  const std::string& clientluaurl() const;
  void set_clientluaurl(const std::string& value);
  void set_clientluaurl(std::string&& value);
  void set_clientluaurl(const char* value);
  void set_clientluaurl(const char* value, size_t size);
  std::string* mutable_clientluaurl();
  std::string* release_clientluaurl();
  void set_allocated_clientluaurl(std::string* clientluaurl);
  private:
  const std::string& _internal_clientluaurl() const;
  void _internal_set_clientluaurl(const std::string& value);
  std::string* _internal_mutable_clientluaurl();
  public:

  // int32 hostUid = 4;
  void clear_hostuid();
  ::PROTOBUF_NAMESPACE_ID::int32 hostuid() const;
  void set_hostuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hostuid() const;
  void _internal_set_hostuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseId = 5;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 8;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 secret = 9;
  void clear_secret();
  ::PROTOBUF_NAMESPACE_ID::int32 secret() const;
  void set_secret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_secret() const;
  void _internal_set_secret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceId = 13;
  void clear_spaceid();
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid() const;
  void set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spaceid() const;
  void _internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SerialNumber = 14;
  void clear_serialnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 serialnumber() const;
  void set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serialnumber() const;
  void _internal_set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 onlineTime = 15;
  void clear_onlinetime();
  ::PROTOBUF_NAMESPACE_ID::int32 onlinetime() const;
  void set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onlinetime() const;
  void _internal_set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:copySpace.SCopyHouseDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostavatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostnick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr androidurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iosurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr windowsurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverluaurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientluaurl_;
  ::PROTOBUF_NAMESPACE_ID::int32 hostuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 secret_;
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serialnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 onlinetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copySpace_2eproto;
};
// -------------------------------------------------------------------

class CCopyHouseCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copySpace.CCopyHouseCreate) */ {
 public:
  CCopyHouseCreate();
  virtual ~CCopyHouseCreate();

  CCopyHouseCreate(const CCopyHouseCreate& from);
  CCopyHouseCreate(CCopyHouseCreate&& from) noexcept
    : CCopyHouseCreate() {
    *this = ::std::move(from);
  }

  inline CCopyHouseCreate& operator=(const CCopyHouseCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCopyHouseCreate& operator=(CCopyHouseCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCopyHouseCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCopyHouseCreate* internal_default_instance() {
    return reinterpret_cast<const CCopyHouseCreate*>(
               &_CCopyHouseCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CCopyHouseCreate& a, CCopyHouseCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(CCopyHouseCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCopyHouseCreate* New() const final {
    return CreateMaybeMessage<CCopyHouseCreate>(nullptr);
  }

  CCopyHouseCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCopyHouseCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCopyHouseCreate& from);
  void MergeFrom(const CCopyHouseCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCopyHouseCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copySpace.CCopyHouseCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copySpace_2eproto);
    return ::descriptor_table_copySpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:copySpace.CCopyHouseCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copySpace_2eproto;
};
// -------------------------------------------------------------------

class SCopyHouseCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copySpace.SCopyHouseCreate) */ {
 public:
  SCopyHouseCreate();
  virtual ~SCopyHouseCreate();

  SCopyHouseCreate(const SCopyHouseCreate& from);
  SCopyHouseCreate(SCopyHouseCreate&& from) noexcept
    : SCopyHouseCreate() {
    *this = ::std::move(from);
  }

  inline SCopyHouseCreate& operator=(const SCopyHouseCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCopyHouseCreate& operator=(SCopyHouseCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCopyHouseCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCopyHouseCreate* internal_default_instance() {
    return reinterpret_cast<const SCopyHouseCreate*>(
               &_SCopyHouseCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SCopyHouseCreate& a, SCopyHouseCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(SCopyHouseCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCopyHouseCreate* New() const final {
    return CreateMaybeMessage<SCopyHouseCreate>(nullptr);
  }

  SCopyHouseCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCopyHouseCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCopyHouseCreate& from);
  void MergeFrom(const SCopyHouseCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCopyHouseCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copySpace.SCopyHouseCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copySpace_2eproto);
    return ::descriptor_table_copySpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:copySpace.SCopyHouseCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copySpace_2eproto;
};
// -------------------------------------------------------------------

class CCopyHouseSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copySpace.CCopyHouseSet) */ {
 public:
  CCopyHouseSet();
  virtual ~CCopyHouseSet();

  CCopyHouseSet(const CCopyHouseSet& from);
  CCopyHouseSet(CCopyHouseSet&& from) noexcept
    : CCopyHouseSet() {
    *this = ::std::move(from);
  }

  inline CCopyHouseSet& operator=(const CCopyHouseSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCopyHouseSet& operator=(CCopyHouseSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCopyHouseSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCopyHouseSet* internal_default_instance() {
    return reinterpret_cast<const CCopyHouseSet*>(
               &_CCopyHouseSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCopyHouseSet& a, CCopyHouseSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CCopyHouseSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCopyHouseSet* New() const final {
    return CreateMaybeMessage<CCopyHouseSet>(nullptr);
  }

  CCopyHouseSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCopyHouseSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCopyHouseSet& from);
  void MergeFrom(const CCopyHouseSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCopyHouseSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copySpace.CCopyHouseSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copySpace_2eproto);
    return ::descriptor_table_copySpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPswFieldNumber = 5,
    kHouseIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSecretFieldNumber = 4,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string psw = 5;
  void clear_psw();
  const std::string& psw() const;
  void set_psw(const std::string& value);
  void set_psw(std::string&& value);
  void set_psw(const char* value);
  void set_psw(const char* value, size_t size);
  std::string* mutable_psw();
  std::string* release_psw();
  void set_allocated_psw(std::string* psw);
  private:
  const std::string& _internal_psw() const;
  void _internal_set_psw(const std::string& value);
  std::string* _internal_mutable_psw();
  public:

  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 secret = 4;
  void clear_secret();
  ::PROTOBUF_NAMESPACE_ID::int32 secret() const;
  void set_secret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_secret() const;
  void _internal_set_secret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:copySpace.CCopyHouseSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copySpace_2eproto;
};
// -------------------------------------------------------------------

class SCopyHouseSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copySpace.SCopyHouseSet) */ {
 public:
  SCopyHouseSet();
  virtual ~SCopyHouseSet();

  SCopyHouseSet(const SCopyHouseSet& from);
  SCopyHouseSet(SCopyHouseSet&& from) noexcept
    : SCopyHouseSet() {
    *this = ::std::move(from);
  }

  inline SCopyHouseSet& operator=(const SCopyHouseSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCopyHouseSet& operator=(SCopyHouseSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCopyHouseSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCopyHouseSet* internal_default_instance() {
    return reinterpret_cast<const SCopyHouseSet*>(
               &_SCopyHouseSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SCopyHouseSet& a, SCopyHouseSet& b) {
    a.Swap(&b);
  }
  inline void Swap(SCopyHouseSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCopyHouseSet* New() const final {
    return CreateMaybeMessage<SCopyHouseSet>(nullptr);
  }

  SCopyHouseSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCopyHouseSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCopyHouseSet& from);
  void MergeFrom(const SCopyHouseSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCopyHouseSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copySpace.SCopyHouseSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copySpace_2eproto);
    return ::descriptor_table_copySpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:copySpace.SCopyHouseSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copySpace_2eproto;
};
// -------------------------------------------------------------------

class CCopyHouseAuth :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copySpace.CCopyHouseAuth) */ {
 public:
  CCopyHouseAuth();
  virtual ~CCopyHouseAuth();

  CCopyHouseAuth(const CCopyHouseAuth& from);
  CCopyHouseAuth(CCopyHouseAuth&& from) noexcept
    : CCopyHouseAuth() {
    *this = ::std::move(from);
  }

  inline CCopyHouseAuth& operator=(const CCopyHouseAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCopyHouseAuth& operator=(CCopyHouseAuth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCopyHouseAuth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCopyHouseAuth* internal_default_instance() {
    return reinterpret_cast<const CCopyHouseAuth*>(
               &_CCopyHouseAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CCopyHouseAuth& a, CCopyHouseAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(CCopyHouseAuth* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCopyHouseAuth* New() const final {
    return CreateMaybeMessage<CCopyHouseAuth>(nullptr);
  }

  CCopyHouseAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCopyHouseAuth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCopyHouseAuth& from);
  void MergeFrom(const CCopyHouseAuth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCopyHouseAuth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copySpace.CCopyHouseAuth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copySpace_2eproto);
    return ::descriptor_table_copySpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPswFieldNumber = 3,
    kHouseIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string psw = 3;
  void clear_psw();
  const std::string& psw() const;
  void set_psw(const std::string& value);
  void set_psw(std::string&& value);
  void set_psw(const char* value);
  void set_psw(const char* value, size_t size);
  std::string* mutable_psw();
  std::string* release_psw();
  void set_allocated_psw(std::string* psw);
  private:
  const std::string& _internal_psw() const;
  void _internal_set_psw(const std::string& value);
  std::string* _internal_mutable_psw();
  public:

  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:copySpace.CCopyHouseAuth)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copySpace_2eproto;
};
// -------------------------------------------------------------------

class SCopyHouseAuth :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copySpace.SCopyHouseAuth) */ {
 public:
  SCopyHouseAuth();
  virtual ~SCopyHouseAuth();

  SCopyHouseAuth(const SCopyHouseAuth& from);
  SCopyHouseAuth(SCopyHouseAuth&& from) noexcept
    : SCopyHouseAuth() {
    *this = ::std::move(from);
  }

  inline SCopyHouseAuth& operator=(const SCopyHouseAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCopyHouseAuth& operator=(SCopyHouseAuth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCopyHouseAuth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCopyHouseAuth* internal_default_instance() {
    return reinterpret_cast<const SCopyHouseAuth*>(
               &_SCopyHouseAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SCopyHouseAuth& a, SCopyHouseAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(SCopyHouseAuth* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCopyHouseAuth* New() const final {
    return CreateMaybeMessage<SCopyHouseAuth>(nullptr);
  }

  SCopyHouseAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCopyHouseAuth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCopyHouseAuth& from);
  void MergeFrom(const SCopyHouseAuth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCopyHouseAuth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copySpace.SCopyHouseAuth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copySpace_2eproto);
    return ::descriptor_table_copySpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAuthStatusFieldNumber = 3,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 authStatus = 3;
  void clear_authstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 authstatus() const;
  void set_authstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_authstatus() const;
  void _internal_set_authstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:copySpace.SCopyHouseAuth)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 authstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copySpace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCopyHouseDetail

// int32 houseId = 1;
inline void CCopyHouseDetail::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseDetail::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseDetail::houseid() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseDetail.houseId)
  return _internal_houseid();
}
inline void CCopyHouseDetail::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CCopyHouseDetail::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseDetail.houseId)
}

// int32 Type = 2;
inline void CCopyHouseDetail::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseDetail::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseDetail::type() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseDetail.Type)
  return _internal_type();
}
inline void CCopyHouseDetail::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CCopyHouseDetail::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseDetail.Type)
}

// -------------------------------------------------------------------

// SCopyHouseDetail

// string resource = 1;
inline void SCopyHouseDetail::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::resource() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.resource)
  return _internal_resource();
}
inline void SCopyHouseDetail::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.resource)
}
inline std::string* SCopyHouseDetail::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.resource)
  return _internal_mutable_resource();
}
inline const std::string& SCopyHouseDetail::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_resource(const std::string& value) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_resource(std::string&& value) {
  
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.resource)
}
inline void SCopyHouseDetail::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.resource)
}
inline void SCopyHouseDetail::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.resource)
}
inline std::string* SCopyHouseDetail::_internal_mutable_resource() {
  
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_resource() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.resource)
  
  return resource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.resource)
}

// string name = 2;
inline void SCopyHouseDetail::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::name() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.name)
  return _internal_name();
}
inline void SCopyHouseDetail::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.name)
}
inline std::string* SCopyHouseDetail::mutable_name() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.name)
  return _internal_mutable_name();
}
inline const std::string& SCopyHouseDetail::_internal_name() const {
  return name_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.name)
}
inline void SCopyHouseDetail::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.name)
}
inline void SCopyHouseDetail::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.name)
}
inline std::string* SCopyHouseDetail::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_name() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.name)
}

// string image = 3;
inline void SCopyHouseDetail::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::image() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.image)
  return _internal_image();
}
inline void SCopyHouseDetail::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.image)
}
inline std::string* SCopyHouseDetail::mutable_image() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.image)
  return _internal_mutable_image();
}
inline const std::string& SCopyHouseDetail::_internal_image() const {
  return image_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_image(const std::string& value) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_image(std::string&& value) {
  
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.image)
}
inline void SCopyHouseDetail::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.image)
}
inline void SCopyHouseDetail::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.image)
}
inline std::string* SCopyHouseDetail::_internal_mutable_image() {
  
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_image() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.image)
  
  return image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.image)
}

// int32 hostUid = 4;
inline void SCopyHouseDetail::clear_hostuid() {
  hostuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::_internal_hostuid() const {
  return hostuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::hostuid() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.hostUid)
  return _internal_hostuid();
}
inline void SCopyHouseDetail::_internal_set_hostuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hostuid_ = value;
}
inline void SCopyHouseDetail::set_hostuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hostuid(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.hostUid)
}

// int32 houseId = 5;
inline void SCopyHouseDetail::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::houseid() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.houseId)
  return _internal_houseid();
}
inline void SCopyHouseDetail::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SCopyHouseDetail::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.houseId)
}

// string hostAvatar = 6;
inline void SCopyHouseDetail::clear_hostavatar() {
  hostavatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::hostavatar() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.hostAvatar)
  return _internal_hostavatar();
}
inline void SCopyHouseDetail::set_hostavatar(const std::string& value) {
  _internal_set_hostavatar(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.hostAvatar)
}
inline std::string* SCopyHouseDetail::mutable_hostavatar() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.hostAvatar)
  return _internal_mutable_hostavatar();
}
inline const std::string& SCopyHouseDetail::_internal_hostavatar() const {
  return hostavatar_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_hostavatar(const std::string& value) {
  
  hostavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_hostavatar(std::string&& value) {
  
  hostavatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.hostAvatar)
}
inline void SCopyHouseDetail::set_hostavatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.hostAvatar)
}
inline void SCopyHouseDetail::set_hostavatar(const char* value, size_t size) {
  
  hostavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.hostAvatar)
}
inline std::string* SCopyHouseDetail::_internal_mutable_hostavatar() {
  
  return hostavatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_hostavatar() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.hostAvatar)
  
  return hostavatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_hostavatar(std::string* hostavatar) {
  if (hostavatar != nullptr) {
    
  } else {
    
  }
  hostavatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostavatar);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.hostAvatar)
}

// string hostNick = 7;
inline void SCopyHouseDetail::clear_hostnick() {
  hostnick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::hostnick() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.hostNick)
  return _internal_hostnick();
}
inline void SCopyHouseDetail::set_hostnick(const std::string& value) {
  _internal_set_hostnick(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.hostNick)
}
inline std::string* SCopyHouseDetail::mutable_hostnick() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.hostNick)
  return _internal_mutable_hostnick();
}
inline const std::string& SCopyHouseDetail::_internal_hostnick() const {
  return hostnick_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_hostnick(const std::string& value) {
  
  hostnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_hostnick(std::string&& value) {
  
  hostnick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.hostNick)
}
inline void SCopyHouseDetail::set_hostnick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.hostNick)
}
inline void SCopyHouseDetail::set_hostnick(const char* value, size_t size) {
  
  hostnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.hostNick)
}
inline std::string* SCopyHouseDetail::_internal_mutable_hostnick() {
  
  return hostnick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_hostnick() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.hostNick)
  
  return hostnick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_hostnick(std::string* hostnick) {
  if (hostnick != nullptr) {
    
  } else {
    
  }
  hostnick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostnick);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.hostNick)
}

// int32 type = 8;
inline void SCopyHouseDetail::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::type() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.type)
  return _internal_type();
}
inline void SCopyHouseDetail::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCopyHouseDetail::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.type)
}

// int32 secret = 9;
inline void SCopyHouseDetail::clear_secret() {
  secret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::_internal_secret() const {
  return secret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::secret() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.secret)
  return _internal_secret();
}
inline void SCopyHouseDetail::_internal_set_secret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  secret_ = value;
}
inline void SCopyHouseDetail::set_secret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.secret)
}

// string androidUrl = 10;
inline void SCopyHouseDetail::clear_androidurl() {
  androidurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::androidurl() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.androidUrl)
  return _internal_androidurl();
}
inline void SCopyHouseDetail::set_androidurl(const std::string& value) {
  _internal_set_androidurl(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.androidUrl)
}
inline std::string* SCopyHouseDetail::mutable_androidurl() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.androidUrl)
  return _internal_mutable_androidurl();
}
inline const std::string& SCopyHouseDetail::_internal_androidurl() const {
  return androidurl_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_androidurl(const std::string& value) {
  
  androidurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_androidurl(std::string&& value) {
  
  androidurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.androidUrl)
}
inline void SCopyHouseDetail::set_androidurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  androidurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.androidUrl)
}
inline void SCopyHouseDetail::set_androidurl(const char* value, size_t size) {
  
  androidurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.androidUrl)
}
inline std::string* SCopyHouseDetail::_internal_mutable_androidurl() {
  
  return androidurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_androidurl() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.androidUrl)
  
  return androidurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_androidurl(std::string* androidurl) {
  if (androidurl != nullptr) {
    
  } else {
    
  }
  androidurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), androidurl);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.androidUrl)
}

// string iosUrl = 11;
inline void SCopyHouseDetail::clear_iosurl() {
  iosurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::iosurl() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.iosUrl)
  return _internal_iosurl();
}
inline void SCopyHouseDetail::set_iosurl(const std::string& value) {
  _internal_set_iosurl(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.iosUrl)
}
inline std::string* SCopyHouseDetail::mutable_iosurl() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.iosUrl)
  return _internal_mutable_iosurl();
}
inline const std::string& SCopyHouseDetail::_internal_iosurl() const {
  return iosurl_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_iosurl(const std::string& value) {
  
  iosurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_iosurl(std::string&& value) {
  
  iosurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.iosUrl)
}
inline void SCopyHouseDetail::set_iosurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iosurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.iosUrl)
}
inline void SCopyHouseDetail::set_iosurl(const char* value, size_t size) {
  
  iosurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.iosUrl)
}
inline std::string* SCopyHouseDetail::_internal_mutable_iosurl() {
  
  return iosurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_iosurl() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.iosUrl)
  
  return iosurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_iosurl(std::string* iosurl) {
  if (iosurl != nullptr) {
    
  } else {
    
  }
  iosurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iosurl);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.iosUrl)
}

// string windowsUrl = 12;
inline void SCopyHouseDetail::clear_windowsurl() {
  windowsurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::windowsurl() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.windowsUrl)
  return _internal_windowsurl();
}
inline void SCopyHouseDetail::set_windowsurl(const std::string& value) {
  _internal_set_windowsurl(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.windowsUrl)
}
inline std::string* SCopyHouseDetail::mutable_windowsurl() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.windowsUrl)
  return _internal_mutable_windowsurl();
}
inline const std::string& SCopyHouseDetail::_internal_windowsurl() const {
  return windowsurl_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_windowsurl(const std::string& value) {
  
  windowsurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_windowsurl(std::string&& value) {
  
  windowsurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.windowsUrl)
}
inline void SCopyHouseDetail::set_windowsurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  windowsurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.windowsUrl)
}
inline void SCopyHouseDetail::set_windowsurl(const char* value, size_t size) {
  
  windowsurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.windowsUrl)
}
inline std::string* SCopyHouseDetail::_internal_mutable_windowsurl() {
  
  return windowsurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_windowsurl() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.windowsUrl)
  
  return windowsurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_windowsurl(std::string* windowsurl) {
  if (windowsurl != nullptr) {
    
  } else {
    
  }
  windowsurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), windowsurl);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.windowsUrl)
}

// int32 spaceId = 13;
inline void SCopyHouseDetail::clear_spaceid() {
  spaceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::_internal_spaceid() const {
  return spaceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::spaceid() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.spaceId)
  return _internal_spaceid();
}
inline void SCopyHouseDetail::_internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spaceid_ = value;
}
inline void SCopyHouseDetail::set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spaceid(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.spaceId)
}

// int32 SerialNumber = 14;
inline void SCopyHouseDetail::clear_serialnumber() {
  serialnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::_internal_serialnumber() const {
  return serialnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::serialnumber() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.SerialNumber)
  return _internal_serialnumber();
}
inline void SCopyHouseDetail::_internal_set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serialnumber_ = value;
}
inline void SCopyHouseDetail::set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serialnumber(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.SerialNumber)
}

// int32 onlineTime = 15;
inline void SCopyHouseDetail::clear_onlinetime() {
  onlinetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::_internal_onlinetime() const {
  return onlinetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseDetail::onlinetime() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.onlineTime)
  return _internal_onlinetime();
}
inline void SCopyHouseDetail::_internal_set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onlinetime_ = value;
}
inline void SCopyHouseDetail::set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onlinetime(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.onlineTime)
}

// string pwd = 16;
inline void SCopyHouseDetail::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::pwd() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.pwd)
  return _internal_pwd();
}
inline void SCopyHouseDetail::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.pwd)
}
inline std::string* SCopyHouseDetail::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& SCopyHouseDetail::_internal_pwd() const {
  return pwd_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.pwd)
}
inline void SCopyHouseDetail::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.pwd)
}
inline void SCopyHouseDetail::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.pwd)
}
inline std::string* SCopyHouseDetail::_internal_mutable_pwd() {
  
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_pwd() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.pwd)
}

// string configUrl = 17;
inline void SCopyHouseDetail::clear_configurl() {
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::configurl() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.configUrl)
  return _internal_configurl();
}
inline void SCopyHouseDetail::set_configurl(const std::string& value) {
  _internal_set_configurl(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.configUrl)
}
inline std::string* SCopyHouseDetail::mutable_configurl() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.configUrl)
  return _internal_mutable_configurl();
}
inline const std::string& SCopyHouseDetail::_internal_configurl() const {
  return configurl_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_configurl(const std::string& value) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_configurl(std::string&& value) {
  
  configurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.configUrl)
}
inline void SCopyHouseDetail::set_configurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.configUrl)
}
inline void SCopyHouseDetail::set_configurl(const char* value, size_t size) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.configUrl)
}
inline std::string* SCopyHouseDetail::_internal_mutable_configurl() {
  
  return configurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_configurl() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.configUrl)
  
  return configurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_configurl(std::string* configurl) {
  if (configurl != nullptr) {
    
  } else {
    
  }
  configurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configurl);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.configUrl)
}

// string ServerLuaUrl = 18;
inline void SCopyHouseDetail::clear_serverluaurl() {
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::serverluaurl() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.ServerLuaUrl)
  return _internal_serverluaurl();
}
inline void SCopyHouseDetail::set_serverluaurl(const std::string& value) {
  _internal_set_serverluaurl(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.ServerLuaUrl)
}
inline std::string* SCopyHouseDetail::mutable_serverluaurl() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.ServerLuaUrl)
  return _internal_mutable_serverluaurl();
}
inline const std::string& SCopyHouseDetail::_internal_serverluaurl() const {
  return serverluaurl_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_serverluaurl(const std::string& value) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_serverluaurl(std::string&& value) {
  
  serverluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.ServerLuaUrl)
}
inline void SCopyHouseDetail::set_serverluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.ServerLuaUrl)
}
inline void SCopyHouseDetail::set_serverluaurl(const char* value, size_t size) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.ServerLuaUrl)
}
inline std::string* SCopyHouseDetail::_internal_mutable_serverluaurl() {
  
  return serverluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_serverluaurl() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.ServerLuaUrl)
  
  return serverluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_serverluaurl(std::string* serverluaurl) {
  if (serverluaurl != nullptr) {
    
  } else {
    
  }
  serverluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverluaurl);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.ServerLuaUrl)
}

// string ClientLuaUrl = 19;
inline void SCopyHouseDetail::clear_clientluaurl() {
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCopyHouseDetail::clientluaurl() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseDetail.ClientLuaUrl)
  return _internal_clientluaurl();
}
inline void SCopyHouseDetail::set_clientluaurl(const std::string& value) {
  _internal_set_clientluaurl(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseDetail.ClientLuaUrl)
}
inline std::string* SCopyHouseDetail::mutable_clientluaurl() {
  // @@protoc_insertion_point(field_mutable:copySpace.SCopyHouseDetail.ClientLuaUrl)
  return _internal_mutable_clientluaurl();
}
inline const std::string& SCopyHouseDetail::_internal_clientluaurl() const {
  return clientluaurl_.GetNoArena();
}
inline void SCopyHouseDetail::_internal_set_clientluaurl(const std::string& value) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCopyHouseDetail::set_clientluaurl(std::string&& value) {
  
  clientluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.SCopyHouseDetail.ClientLuaUrl)
}
inline void SCopyHouseDetail::set_clientluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.SCopyHouseDetail.ClientLuaUrl)
}
inline void SCopyHouseDetail::set_clientluaurl(const char* value, size_t size) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.SCopyHouseDetail.ClientLuaUrl)
}
inline std::string* SCopyHouseDetail::_internal_mutable_clientluaurl() {
  
  return clientluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCopyHouseDetail::release_clientluaurl() {
  // @@protoc_insertion_point(field_release:copySpace.SCopyHouseDetail.ClientLuaUrl)
  
  return clientluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCopyHouseDetail::set_allocated_clientluaurl(std::string* clientluaurl) {
  if (clientluaurl != nullptr) {
    
  } else {
    
  }
  clientluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientluaurl);
  // @@protoc_insertion_point(field_set_allocated:copySpace.SCopyHouseDetail.ClientLuaUrl)
}

// -------------------------------------------------------------------

// CCopyHouseCreate

// int32 houseId = 1;
inline void CCopyHouseCreate::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseCreate::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseCreate::houseid() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseCreate.houseId)
  return _internal_houseid();
}
inline void CCopyHouseCreate::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CCopyHouseCreate::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseCreate.houseId)
}

// int32 type = 2;
inline void CCopyHouseCreate::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseCreate::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseCreate::type() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseCreate.type)
  return _internal_type();
}
inline void CCopyHouseCreate::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CCopyHouseCreate::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseCreate.type)
}

// -------------------------------------------------------------------

// SCopyHouseCreate

// int32 houseId = 1;
inline void SCopyHouseCreate::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseCreate::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseCreate::houseid() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseCreate.houseId)
  return _internal_houseid();
}
inline void SCopyHouseCreate::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SCopyHouseCreate::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseCreate.houseId)
}

// int32 type = 2;
inline void SCopyHouseCreate::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseCreate::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseCreate::type() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseCreate.type)
  return _internal_type();
}
inline void SCopyHouseCreate::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCopyHouseCreate::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseCreate.type)
}

// -------------------------------------------------------------------

// CCopyHouseSet

// int32 houseId = 1;
inline void CCopyHouseSet::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseSet::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseSet::houseid() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseSet.houseId)
  return _internal_houseid();
}
inline void CCopyHouseSet::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CCopyHouseSet::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseSet.houseId)
}

// int32 type = 2;
inline void CCopyHouseSet::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseSet::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseSet::type() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseSet.type)
  return _internal_type();
}
inline void CCopyHouseSet::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CCopyHouseSet::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseSet.type)
}

// string name = 3;
inline void CCopyHouseSet::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CCopyHouseSet::name() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseSet.name)
  return _internal_name();
}
inline void CCopyHouseSet::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseSet.name)
}
inline std::string* CCopyHouseSet::mutable_name() {
  // @@protoc_insertion_point(field_mutable:copySpace.CCopyHouseSet.name)
  return _internal_mutable_name();
}
inline const std::string& CCopyHouseSet::_internal_name() const {
  return name_.GetNoArena();
}
inline void CCopyHouseSet::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CCopyHouseSet::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.CCopyHouseSet.name)
}
inline void CCopyHouseSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.CCopyHouseSet.name)
}
inline void CCopyHouseSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.CCopyHouseSet.name)
}
inline std::string* CCopyHouseSet::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CCopyHouseSet::release_name() {
  // @@protoc_insertion_point(field_release:copySpace.CCopyHouseSet.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CCopyHouseSet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:copySpace.CCopyHouseSet.name)
}

// int32 secret = 4;
inline void CCopyHouseSet::clear_secret() {
  secret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseSet::_internal_secret() const {
  return secret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseSet::secret() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseSet.secret)
  return _internal_secret();
}
inline void CCopyHouseSet::_internal_set_secret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  secret_ = value;
}
inline void CCopyHouseSet::set_secret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseSet.secret)
}

// string psw = 5;
inline void CCopyHouseSet::clear_psw() {
  psw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CCopyHouseSet::psw() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseSet.psw)
  return _internal_psw();
}
inline void CCopyHouseSet::set_psw(const std::string& value) {
  _internal_set_psw(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseSet.psw)
}
inline std::string* CCopyHouseSet::mutable_psw() {
  // @@protoc_insertion_point(field_mutable:copySpace.CCopyHouseSet.psw)
  return _internal_mutable_psw();
}
inline const std::string& CCopyHouseSet::_internal_psw() const {
  return psw_.GetNoArena();
}
inline void CCopyHouseSet::_internal_set_psw(const std::string& value) {
  
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CCopyHouseSet::set_psw(std::string&& value) {
  
  psw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.CCopyHouseSet.psw)
}
inline void CCopyHouseSet::set_psw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.CCopyHouseSet.psw)
}
inline void CCopyHouseSet::set_psw(const char* value, size_t size) {
  
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.CCopyHouseSet.psw)
}
inline std::string* CCopyHouseSet::_internal_mutable_psw() {
  
  return psw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CCopyHouseSet::release_psw() {
  // @@protoc_insertion_point(field_release:copySpace.CCopyHouseSet.psw)
  
  return psw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CCopyHouseSet::set_allocated_psw(std::string* psw) {
  if (psw != nullptr) {
    
  } else {
    
  }
  psw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psw);
  // @@protoc_insertion_point(field_set_allocated:copySpace.CCopyHouseSet.psw)
}

// -------------------------------------------------------------------

// SCopyHouseSet

// -------------------------------------------------------------------

// CCopyHouseAuth

// int32 houseId = 1;
inline void CCopyHouseAuth::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseAuth::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseAuth::houseid() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseAuth.houseId)
  return _internal_houseid();
}
inline void CCopyHouseAuth::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CCopyHouseAuth::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseAuth.houseId)
}

// int32 type = 2;
inline void CCopyHouseAuth::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseAuth::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyHouseAuth::type() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseAuth.type)
  return _internal_type();
}
inline void CCopyHouseAuth::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CCopyHouseAuth::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseAuth.type)
}

// string psw = 3;
inline void CCopyHouseAuth::clear_psw() {
  psw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CCopyHouseAuth::psw() const {
  // @@protoc_insertion_point(field_get:copySpace.CCopyHouseAuth.psw)
  return _internal_psw();
}
inline void CCopyHouseAuth::set_psw(const std::string& value) {
  _internal_set_psw(value);
  // @@protoc_insertion_point(field_set:copySpace.CCopyHouseAuth.psw)
}
inline std::string* CCopyHouseAuth::mutable_psw() {
  // @@protoc_insertion_point(field_mutable:copySpace.CCopyHouseAuth.psw)
  return _internal_mutable_psw();
}
inline const std::string& CCopyHouseAuth::_internal_psw() const {
  return psw_.GetNoArena();
}
inline void CCopyHouseAuth::_internal_set_psw(const std::string& value) {
  
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CCopyHouseAuth::set_psw(std::string&& value) {
  
  psw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copySpace.CCopyHouseAuth.psw)
}
inline void CCopyHouseAuth::set_psw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copySpace.CCopyHouseAuth.psw)
}
inline void CCopyHouseAuth::set_psw(const char* value, size_t size) {
  
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copySpace.CCopyHouseAuth.psw)
}
inline std::string* CCopyHouseAuth::_internal_mutable_psw() {
  
  return psw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CCopyHouseAuth::release_psw() {
  // @@protoc_insertion_point(field_release:copySpace.CCopyHouseAuth.psw)
  
  return psw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CCopyHouseAuth::set_allocated_psw(std::string* psw) {
  if (psw != nullptr) {
    
  } else {
    
  }
  psw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psw);
  // @@protoc_insertion_point(field_set_allocated:copySpace.CCopyHouseAuth.psw)
}

// -------------------------------------------------------------------

// SCopyHouseAuth

// int32 houseId = 1;
inline void SCopyHouseAuth::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseAuth::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseAuth::houseid() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseAuth.houseId)
  return _internal_houseid();
}
inline void SCopyHouseAuth::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SCopyHouseAuth::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseAuth.houseId)
}

// int32 type = 2;
inline void SCopyHouseAuth::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseAuth::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseAuth::type() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseAuth.type)
  return _internal_type();
}
inline void SCopyHouseAuth::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCopyHouseAuth::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseAuth.type)
}

// int32 authStatus = 3;
inline void SCopyHouseAuth::clear_authstatus() {
  authstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseAuth::_internal_authstatus() const {
  return authstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyHouseAuth::authstatus() const {
  // @@protoc_insertion_point(field_get:copySpace.SCopyHouseAuth.authStatus)
  return _internal_authstatus();
}
inline void SCopyHouseAuth::_internal_set_authstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  authstatus_ = value;
}
inline void SCopyHouseAuth::set_authstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_authstatus(value);
  // @@protoc_insertion_point(field_set:copySpace.SCopyHouseAuth.authStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace copySpace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_copySpace_2eproto
