// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skillSyn.proto

#include "skillSyn.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_position_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPosition_position_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVector3_vector_2eproto;
namespace skillSyn {
class CSkillSynDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSkillSyn> _instance;
} _CSkillSyn_default_instance_;
class SSkillSynDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSkillSyn> _instance;
} _SSkillSyn_default_instance_;
class SBroadGiftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBroadGift> _instance;
} _SBroadGift_default_instance_;
}  // namespace skillSyn
static void InitDefaultsscc_info_CSkillSyn_skillSyn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skillSyn::_CSkillSyn_default_instance_;
    new (ptr) ::skillSyn::CSkillSyn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skillSyn::CSkillSyn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSkillSyn_skillSyn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSkillSyn_skillSyn_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_SBroadGift_skillSyn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skillSyn::_SBroadGift_default_instance_;
    new (ptr) ::skillSyn::SBroadGift();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skillSyn::SBroadGift::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SBroadGift_skillSyn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SBroadGift_skillSyn_2eproto}, {
      &scc_info_BPosition_position_2eproto.base,}};

static void InitDefaultsscc_info_SSkillSyn_skillSyn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skillSyn::_SSkillSyn_default_instance_;
    new (ptr) ::skillSyn::SSkillSyn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skillSyn::SSkillSyn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSkillSyn_skillSyn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSkillSyn_skillSyn_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skillSyn_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skillSyn_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skillSyn_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skillSyn_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skillSyn::CSkillSyn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skillSyn::CSkillSyn, actionid_),
  PROTOBUF_FIELD_OFFSET(::skillSyn::CSkillSyn, poslist_),
  PROTOBUF_FIELD_OFFSET(::skillSyn::CSkillSyn, sendtoid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skillSyn::SSkillSyn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skillSyn::SSkillSyn, code_),
  PROTOBUF_FIELD_OFFSET(::skillSyn::SSkillSyn, actionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skillSyn::SBroadGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skillSyn::SBroadGift, avatarkey_),
  PROTOBUF_FIELD_OFFSET(::skillSyn::SBroadGift, nick_),
  PROTOBUF_FIELD_OFFSET(::skillSyn::SBroadGift, actionid_),
  PROTOBUF_FIELD_OFFSET(::skillSyn::SBroadGift, position_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::skillSyn::CSkillSyn)},
  { 8, -1, sizeof(::skillSyn::SSkillSyn)},
  { 15, -1, sizeof(::skillSyn::SBroadGift)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skillSyn::_CSkillSyn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skillSyn::_SSkillSyn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skillSyn::_SBroadGift_default_instance_),
};

const char descriptor_table_protodef_skillSyn_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016skillSyn.proto\022\010skillSyn\032\016position.pro"
  "to\032\014vector.proto\"R\n\tCSkillSyn\022\020\n\010actionI"
  "d\030\001 \001(\005\022!\n\007posList\030\002 \001(\0132\020.vector.PVecto"
  "r3\022\020\n\010sendToId\030\003 \001(\005\"+\n\tSSkillSyn\022\014\n\004cod"
  "e\030\001 \001(\005\022\020\n\010actionId\030\002 \001(\005\"f\n\nSBroadGift\022"
  "\021\n\tavatarKey\030\001 \001(\005\022\014\n\004nick\030\002 \001(\t\022\020\n\010acti"
  "onId\030\003 \001(\005\022%\n\010position\030\004 \001(\0132\023.position."
  "BPositionB$\n\030com.dayou.space.protobufB\010S"
  "killSynb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skillSyn_2eproto_deps[2] = {
  &::descriptor_table_position_2eproto,
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_skillSyn_2eproto_sccs[3] = {
  &scc_info_CSkillSyn_skillSyn_2eproto.base,
  &scc_info_SBroadGift_skillSyn_2eproto.base,
  &scc_info_SSkillSyn_skillSyn_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skillSyn_2eproto_once;
static bool descriptor_table_skillSyn_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skillSyn_2eproto = {
  &descriptor_table_skillSyn_2eproto_initialized, descriptor_table_protodef_skillSyn_2eproto, "skillSyn.proto", 335,
  &descriptor_table_skillSyn_2eproto_once, descriptor_table_skillSyn_2eproto_sccs, descriptor_table_skillSyn_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_skillSyn_2eproto::offsets,
  file_level_metadata_skillSyn_2eproto, 3, file_level_enum_descriptors_skillSyn_2eproto, file_level_service_descriptors_skillSyn_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_skillSyn_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_skillSyn_2eproto), true);
namespace skillSyn {

// ===================================================================

void CSkillSyn::InitAsDefaultInstance() {
  ::skillSyn::_CSkillSyn_default_instance_._instance.get_mutable()->poslist_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class CSkillSyn::_Internal {
 public:
  static const ::vector::PVector3& poslist(const CSkillSyn* msg);
};

const ::vector::PVector3&
CSkillSyn::_Internal::poslist(const CSkillSyn* msg) {
  return *msg->poslist_;
}
void CSkillSyn::clear_poslist() {
  if (GetArenaNoVirtual() == nullptr && poslist_ != nullptr) {
    delete poslist_;
  }
  poslist_ = nullptr;
}
CSkillSyn::CSkillSyn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skillSyn.CSkillSyn)
}
CSkillSyn::CSkillSyn(const CSkillSyn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_poslist()) {
    poslist_ = new ::vector::PVector3(*from.poslist_);
  } else {
    poslist_ = nullptr;
  }
  ::memcpy(&actionid_, &from.actionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sendtoid_) -
    reinterpret_cast<char*>(&actionid_)) + sizeof(sendtoid_));
  // @@protoc_insertion_point(copy_constructor:skillSyn.CSkillSyn)
}

void CSkillSyn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSkillSyn_skillSyn_2eproto.base);
  ::memset(&poslist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendtoid_) -
      reinterpret_cast<char*>(&poslist_)) + sizeof(sendtoid_));
}

CSkillSyn::~CSkillSyn() {
  // @@protoc_insertion_point(destructor:skillSyn.CSkillSyn)
  SharedDtor();
}

void CSkillSyn::SharedDtor() {
  if (this != internal_default_instance()) delete poslist_;
}

void CSkillSyn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSkillSyn& CSkillSyn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSkillSyn_skillSyn_2eproto.base);
  return *internal_default_instance();
}


void CSkillSyn::Clear() {
// @@protoc_insertion_point(message_clear_start:skillSyn.CSkillSyn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && poslist_ != nullptr) {
    delete poslist_;
  }
  poslist_ = nullptr;
  ::memset(&actionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendtoid_) -
      reinterpret_cast<char*>(&actionid_)) + sizeof(sendtoid_));
  _internal_metadata_.Clear();
}

const char* CSkillSyn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 actionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 posList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_poslist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sendToId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sendtoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSkillSyn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skillSyn.CSkillSyn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 actionId = 1;
  if (this->actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_actionid(), target);
  }

  // .vector.PVector3 posList = 2;
  if (this->has_poslist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::poslist(this), target, stream);
  }

  // int32 sendToId = 3;
  if (this->sendtoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sendtoid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skillSyn.CSkillSyn)
  return target;
}

size_t CSkillSyn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skillSyn.CSkillSyn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vector.PVector3 posList = 2;
  if (this->has_poslist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *poslist_);
  }

  // int32 actionId = 1;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actionid());
  }

  // int32 sendToId = 3;
  if (this->sendtoid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sendtoid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSkillSyn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skillSyn.CSkillSyn)
  GOOGLE_DCHECK_NE(&from, this);
  const CSkillSyn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSkillSyn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skillSyn.CSkillSyn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skillSyn.CSkillSyn)
    MergeFrom(*source);
  }
}

void CSkillSyn::MergeFrom(const CSkillSyn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skillSyn.CSkillSyn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_poslist()) {
    _internal_mutable_poslist()->::vector::PVector3::MergeFrom(from._internal_poslist());
  }
  if (from.actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
  if (from.sendtoid() != 0) {
    _internal_set_sendtoid(from._internal_sendtoid());
  }
}

void CSkillSyn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skillSyn.CSkillSyn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSkillSyn::CopyFrom(const CSkillSyn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skillSyn.CSkillSyn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSkillSyn::IsInitialized() const {
  return true;
}

void CSkillSyn::InternalSwap(CSkillSyn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(poslist_, other->poslist_);
  swap(actionid_, other->actionid_);
  swap(sendtoid_, other->sendtoid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSkillSyn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSkillSyn::InitAsDefaultInstance() {
}
class SSkillSyn::_Internal {
 public:
};

SSkillSyn::SSkillSyn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skillSyn.SSkillSyn)
}
SSkillSyn::SSkillSyn(const SSkillSyn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&code_)) + sizeof(actionid_));
  // @@protoc_insertion_point(copy_constructor:skillSyn.SSkillSyn)
}

void SSkillSyn::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(actionid_));
}

SSkillSyn::~SSkillSyn() {
  // @@protoc_insertion_point(destructor:skillSyn.SSkillSyn)
  SharedDtor();
}

void SSkillSyn::SharedDtor() {
}

void SSkillSyn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSkillSyn& SSkillSyn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSkillSyn_skillSyn_2eproto.base);
  return *internal_default_instance();
}


void SSkillSyn::Clear() {
// @@protoc_insertion_point(message_clear_start:skillSyn.SSkillSyn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(actionid_));
  _internal_metadata_.Clear();
}

const char* SSkillSyn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSkillSyn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skillSyn.SSkillSyn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int32 actionId = 2;
  if (this->actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skillSyn.SSkillSyn)
  return target;
}

size_t SSkillSyn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skillSyn.SSkillSyn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 actionId = 2;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSkillSyn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skillSyn.SSkillSyn)
  GOOGLE_DCHECK_NE(&from, this);
  const SSkillSyn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSkillSyn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skillSyn.SSkillSyn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skillSyn.SSkillSyn)
    MergeFrom(*source);
  }
}

void SSkillSyn::MergeFrom(const SSkillSyn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skillSyn.SSkillSyn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
}

void SSkillSyn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skillSyn.SSkillSyn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSkillSyn::CopyFrom(const SSkillSyn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skillSyn.SSkillSyn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSkillSyn::IsInitialized() const {
  return true;
}

void SSkillSyn::InternalSwap(SSkillSyn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
  swap(actionid_, other->actionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSkillSyn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBroadGift::InitAsDefaultInstance() {
  ::skillSyn::_SBroadGift_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition*>(
      ::position::BPosition::internal_default_instance());
}
class SBroadGift::_Internal {
 public:
  static const ::position::BPosition& position(const SBroadGift* msg);
};

const ::position::BPosition&
SBroadGift::_Internal::position(const SBroadGift* msg) {
  return *msg->position_;
}
void SBroadGift::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
SBroadGift::SBroadGift()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skillSyn.SBroadGift)
}
SBroadGift::SBroadGift(const SBroadGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&avatarkey_, &from.avatarkey_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&avatarkey_)) + sizeof(actionid_));
  // @@protoc_insertion_point(copy_constructor:skillSyn.SBroadGift)
}

void SBroadGift::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBroadGift_skillSyn_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(actionid_));
}

SBroadGift::~SBroadGift() {
  // @@protoc_insertion_point(destructor:skillSyn.SBroadGift)
  SharedDtor();
}

void SBroadGift::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void SBroadGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBroadGift& SBroadGift::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBroadGift_skillSyn_2eproto.base);
  return *internal_default_instance();
}


void SBroadGift::Clear() {
// @@protoc_insertion_point(message_clear_start:skillSyn.SBroadGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&avatarkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&avatarkey_)) + sizeof(actionid_));
  _internal_metadata_.Clear();
}

const char* SBroadGift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "skillSyn.SBroadGift.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .position.BPosition position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBroadGift::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skillSyn.SBroadGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarkey(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skillSyn.SBroadGift.nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick(), target);
  }

  // int32 actionId = 3;
  if (this->actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_actionid(), target);
  }

  // .position.BPosition position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skillSyn.SBroadGift)
  return target;
}

size_t SBroadGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skillSyn.SBroadGift)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // .position.BPosition position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  // int32 actionId = 3;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBroadGift::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skillSyn.SBroadGift)
  GOOGLE_DCHECK_NE(&from, this);
  const SBroadGift* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBroadGift>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skillSyn.SBroadGift)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skillSyn.SBroadGift)
    MergeFrom(*source);
  }
}

void SBroadGift::MergeFrom(const SBroadGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skillSyn.SBroadGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition::MergeFrom(from._internal_position());
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
  if (from.actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
}

void SBroadGift::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skillSyn.SBroadGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBroadGift::CopyFrom(const SBroadGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skillSyn.SBroadGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBroadGift::IsInitialized() const {
  return true;
}

void SBroadGift::InternalSwap(SBroadGift* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(avatarkey_, other->avatarkey_);
  swap(actionid_, other->actionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBroadGift::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace skillSyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skillSyn::CSkillSyn* Arena::CreateMaybeMessage< ::skillSyn::CSkillSyn >(Arena* arena) {
  return Arena::CreateInternal< ::skillSyn::CSkillSyn >(arena);
}
template<> PROTOBUF_NOINLINE ::skillSyn::SSkillSyn* Arena::CreateMaybeMessage< ::skillSyn::SSkillSyn >(Arena* arena) {
  return Arena::CreateInternal< ::skillSyn::SSkillSyn >(arena);
}
template<> PROTOBUF_NOINLINE ::skillSyn::SBroadGift* Arena::CreateMaybeMessage< ::skillSyn::SBroadGift >(Arena* arena) {
  return Arena::CreateInternal< ::skillSyn::SBroadGift >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
