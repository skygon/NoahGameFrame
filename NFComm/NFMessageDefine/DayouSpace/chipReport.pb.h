// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chipReport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chipReport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chipReport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chipReport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chipReport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chipReport_2eproto;
namespace chipReport {
class CChipReport;
class CChipReportDefaultTypeInternal;
extern CChipReportDefaultTypeInternal _CChipReport_default_instance_;
class SChipReport;
class SChipReportDefaultTypeInternal;
extern SChipReportDefaultTypeInternal _SChipReport_default_instance_;
}  // namespace chipReport
PROTOBUF_NAMESPACE_OPEN
template<> ::chipReport::CChipReport* Arena::CreateMaybeMessage<::chipReport::CChipReport>(Arena*);
template<> ::chipReport::SChipReport* Arena::CreateMaybeMessage<::chipReport::SChipReport>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chipReport {

// ===================================================================

class CChipReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chipReport.CChipReport) */ {
 public:
  CChipReport();
  virtual ~CChipReport();

  CChipReport(const CChipReport& from);
  CChipReport(CChipReport&& from) noexcept
    : CChipReport() {
    *this = ::std::move(from);
  }

  inline CChipReport& operator=(const CChipReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CChipReport& operator=(CChipReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CChipReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CChipReport* internal_default_instance() {
    return reinterpret_cast<const CChipReport*>(
               &_CChipReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CChipReport& a, CChipReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CChipReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CChipReport* New() const final {
    return CreateMaybeMessage<CChipReport>(nullptr);
  }

  CChipReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CChipReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CChipReport& from);
  void MergeFrom(const CChipReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CChipReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chipReport.CChipReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipReport_2eproto);
    return ::descriptor_table_chipReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChipIDFieldNumber = 1,
    kChipPlatformFieldNumber = 2,
    kEnterOrExitFieldNumber = 3,
    kGoodsIdFieldNumber = 5,
  };
  // int32 chipID = 1;
  void clear_chipid();
  ::PROTOBUF_NAMESPACE_ID::int32 chipid() const;
  void set_chipid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chipid() const;
  void _internal_set_chipid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chipPlatform = 2;
  void clear_chipplatform();
  ::PROTOBUF_NAMESPACE_ID::int32 chipplatform() const;
  void set_chipplatform(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chipplatform() const;
  void _internal_set_chipplatform(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enterOrExit = 3;
  void clear_enterorexit();
  ::PROTOBUF_NAMESPACE_ID::int32 enterorexit() const;
  void set_enterorexit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enterorexit() const;
  void _internal_set_enterorexit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 5;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chipReport.CChipReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 chipid_;
  ::PROTOBUF_NAMESPACE_ID::int32 chipplatform_;
  ::PROTOBUF_NAMESPACE_ID::int32 enterorexit_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipReport_2eproto;
};
// -------------------------------------------------------------------

class SChipReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chipReport.SChipReport) */ {
 public:
  SChipReport();
  virtual ~SChipReport();

  SChipReport(const SChipReport& from);
  SChipReport(SChipReport&& from) noexcept
    : SChipReport() {
    *this = ::std::move(from);
  }

  inline SChipReport& operator=(const SChipReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChipReport& operator=(SChipReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChipReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChipReport* internal_default_instance() {
    return reinterpret_cast<const SChipReport*>(
               &_SChipReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SChipReport& a, SChipReport& b) {
    a.Swap(&b);
  }
  inline void Swap(SChipReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChipReport* New() const final {
    return CreateMaybeMessage<SChipReport>(nullptr);
  }

  SChipReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChipReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChipReport& from);
  void MergeFrom(const SChipReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChipReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chipReport.SChipReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipReport_2eproto);
    return ::descriptor_table_chipReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSelectFieldNumber = 1,
  };
  // int32 isSelect = 1;
  void clear_isselect();
  ::PROTOBUF_NAMESPACE_ID::int32 isselect() const;
  void set_isselect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isselect() const;
  void _internal_set_isselect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chipReport.SChipReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 isselect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipReport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CChipReport

// int32 chipID = 1;
inline void CChipReport::clear_chipid() {
  chipid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChipReport::_internal_chipid() const {
  return chipid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChipReport::chipid() const {
  // @@protoc_insertion_point(field_get:chipReport.CChipReport.chipID)
  return _internal_chipid();
}
inline void CChipReport::_internal_set_chipid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chipid_ = value;
}
inline void CChipReport::set_chipid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chipid(value);
  // @@protoc_insertion_point(field_set:chipReport.CChipReport.chipID)
}

// int32 chipPlatform = 2;
inline void CChipReport::clear_chipplatform() {
  chipplatform_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChipReport::_internal_chipplatform() const {
  return chipplatform_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChipReport::chipplatform() const {
  // @@protoc_insertion_point(field_get:chipReport.CChipReport.chipPlatform)
  return _internal_chipplatform();
}
inline void CChipReport::_internal_set_chipplatform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chipplatform_ = value;
}
inline void CChipReport::set_chipplatform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chipplatform(value);
  // @@protoc_insertion_point(field_set:chipReport.CChipReport.chipPlatform)
}

// int32 enterOrExit = 3;
inline void CChipReport::clear_enterorexit() {
  enterorexit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChipReport::_internal_enterorexit() const {
  return enterorexit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChipReport::enterorexit() const {
  // @@protoc_insertion_point(field_get:chipReport.CChipReport.enterOrExit)
  return _internal_enterorexit();
}
inline void CChipReport::_internal_set_enterorexit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enterorexit_ = value;
}
inline void CChipReport::set_enterorexit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enterorexit(value);
  // @@protoc_insertion_point(field_set:chipReport.CChipReport.enterOrExit)
}

// int32 goodsId = 5;
inline void CChipReport::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChipReport::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChipReport::goodsid() const {
  // @@protoc_insertion_point(field_get:chipReport.CChipReport.goodsId)
  return _internal_goodsid();
}
inline void CChipReport::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CChipReport::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:chipReport.CChipReport.goodsId)
}

// -------------------------------------------------------------------

// SChipReport

// int32 isSelect = 1;
inline void SChipReport::clear_isselect() {
  isselect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipReport::_internal_isselect() const {
  return isselect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipReport::isselect() const {
  // @@protoc_insertion_point(field_get:chipReport.SChipReport.isSelect)
  return _internal_isselect();
}
inline void SChipReport::_internal_set_isselect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isselect_ = value;
}
inline void SChipReport::set_isselect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isselect(value);
  // @@protoc_insertion_point(field_set:chipReport.SChipReport.isSelect)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chipReport

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chipReport_2eproto
