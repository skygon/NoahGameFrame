// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chipMerge.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chipMerge_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chipMerge_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "userInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chipMerge_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chipMerge_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chipMerge_2eproto;
namespace chipMerge {
class Prize;
class PrizeDefaultTypeInternal;
extern PrizeDefaultTypeInternal _Prize_default_instance_;
class SBroadcastChipMerge;
class SBroadcastChipMergeDefaultTypeInternal;
extern SBroadcastChipMergeDefaultTypeInternal _SBroadcastChipMerge_default_instance_;
class SChipMerge;
class SChipMergeDefaultTypeInternal;
extern SChipMergeDefaultTypeInternal _SChipMerge_default_instance_;
}  // namespace chipMerge
PROTOBUF_NAMESPACE_OPEN
template<> ::chipMerge::Prize* Arena::CreateMaybeMessage<::chipMerge::Prize>(Arena*);
template<> ::chipMerge::SBroadcastChipMerge* Arena::CreateMaybeMessage<::chipMerge::SBroadcastChipMerge>(Arena*);
template<> ::chipMerge::SChipMerge* Arena::CreateMaybeMessage<::chipMerge::SChipMerge>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chipMerge {

// ===================================================================

class Prize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chipMerge.Prize) */ {
 public:
  Prize();
  virtual ~Prize();

  Prize(const Prize& from);
  Prize(Prize&& from) noexcept
    : Prize() {
    *this = ::std::move(from);
  }

  inline Prize& operator=(const Prize& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prize& operator=(Prize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prize* internal_default_instance() {
    return reinterpret_cast<const Prize*>(
               &_Prize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Prize& a, Prize& b) {
    a.Swap(&b);
  }
  inline void Swap(Prize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prize* New() const final {
    return CreateMaybeMessage<Prize>(nullptr);
  }

  Prize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prize& from);
  void MergeFrom(const Prize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chipMerge.Prize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipMerge_2eproto);
    return ::descriptor_table_chipMerge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:chipMerge.Prize)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipMerge_2eproto;
};
// -------------------------------------------------------------------

class SChipMerge :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chipMerge.SChipMerge) */ {
 public:
  SChipMerge();
  virtual ~SChipMerge();

  SChipMerge(const SChipMerge& from);
  SChipMerge(SChipMerge&& from) noexcept
    : SChipMerge() {
    *this = ::std::move(from);
  }

  inline SChipMerge& operator=(const SChipMerge& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChipMerge& operator=(SChipMerge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChipMerge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChipMerge* internal_default_instance() {
    return reinterpret_cast<const SChipMerge*>(
               &_SChipMerge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SChipMerge& a, SChipMerge& b) {
    a.Swap(&b);
  }
  inline void Swap(SChipMerge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChipMerge* New() const final {
    return CreateMaybeMessage<SChipMerge>(nullptr);
  }

  SChipMerge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChipMerge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChipMerge& from);
  void MergeFrom(const SChipMerge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChipMerge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chipMerge.SChipMerge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipMerge_2eproto);
    return ::descriptor_table_chipMerge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrizeFieldNumber = 4,
    kTextContentFieldNumber = 3,
    kMergeFlagFieldNumber = 1,
    kScoreFieldNumber = 2,
    kConstelOneFieldNumber = 5,
    kConstelTwoFieldNumber = 6,
    kLevelFieldNumber = 7,
  };
  // repeated .chipMerge.Prize prize = 4;
  int prize_size() const;
  private:
  int _internal_prize_size() const;
  public:
  void clear_prize();
  ::chipMerge::Prize* mutable_prize(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize >*
      mutable_prize();
  private:
  const ::chipMerge::Prize& _internal_prize(int index) const;
  ::chipMerge::Prize* _internal_add_prize();
  public:
  const ::chipMerge::Prize& prize(int index) const;
  ::chipMerge::Prize* add_prize();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize >&
      prize() const;

  // string textContent = 3;
  void clear_textcontent();
  const std::string& textcontent() const;
  void set_textcontent(const std::string& value);
  void set_textcontent(std::string&& value);
  void set_textcontent(const char* value);
  void set_textcontent(const char* value, size_t size);
  std::string* mutable_textcontent();
  std::string* release_textcontent();
  void set_allocated_textcontent(std::string* textcontent);
  private:
  const std::string& _internal_textcontent() const;
  void _internal_set_textcontent(const std::string& value);
  std::string* _internal_mutable_textcontent();
  public:

  // int32 mergeFlag = 1;
  void clear_mergeflag();
  ::PROTOBUF_NAMESPACE_ID::int32 mergeflag() const;
  void set_mergeflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mergeflag() const;
  void _internal_set_mergeflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 constelOne = 5;
  void clear_constelone();
  ::PROTOBUF_NAMESPACE_ID::int32 constelone() const;
  void set_constelone(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_constelone() const;
  void _internal_set_constelone(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 constelTwo = 6;
  void clear_consteltwo();
  ::PROTOBUF_NAMESPACE_ID::int32 consteltwo() const;
  void set_consteltwo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_consteltwo() const;
  void _internal_set_consteltwo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 7;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chipMerge.SChipMerge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize > prize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textcontent_;
  ::PROTOBUF_NAMESPACE_ID::int32 mergeflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 constelone_;
  ::PROTOBUF_NAMESPACE_ID::int32 consteltwo_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipMerge_2eproto;
};
// -------------------------------------------------------------------

class SBroadcastChipMerge :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chipMerge.SBroadcastChipMerge) */ {
 public:
  SBroadcastChipMerge();
  virtual ~SBroadcastChipMerge();

  SBroadcastChipMerge(const SBroadcastChipMerge& from);
  SBroadcastChipMerge(SBroadcastChipMerge&& from) noexcept
    : SBroadcastChipMerge() {
    *this = ::std::move(from);
  }

  inline SBroadcastChipMerge& operator=(const SBroadcastChipMerge& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBroadcastChipMerge& operator=(SBroadcastChipMerge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBroadcastChipMerge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBroadcastChipMerge* internal_default_instance() {
    return reinterpret_cast<const SBroadcastChipMerge*>(
               &_SBroadcastChipMerge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SBroadcastChipMerge& a, SBroadcastChipMerge& b) {
    a.Swap(&b);
  }
  inline void Swap(SBroadcastChipMerge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBroadcastChipMerge* New() const final {
    return CreateMaybeMessage<SBroadcastChipMerge>(nullptr);
  }

  SBroadcastChipMerge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBroadcastChipMerge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBroadcastChipMerge& from);
  void MergeFrom(const SBroadcastChipMerge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBroadcastChipMerge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chipMerge.SBroadcastChipMerge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipMerge_2eproto);
    return ::descriptor_table_chipMerge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 2,
    kPrizeFieldNumber = 5,
    kTextContentFieldNumber = 4,
    kMergeFlagFieldNumber = 1,
    kScoreFieldNumber = 3,
    kConstelOneFieldNumber = 6,
    kConstelTwoFieldNumber = 7,
    kLevelFieldNumber = 8,
  };
  // repeated .userInfo.SUserInfo infoList = 2;
  int infolist_size() const;
  private:
  int _internal_infolist_size() const;
  public:
  void clear_infolist();
  ::userInfo::SUserInfo* mutable_infolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
      mutable_infolist();
  private:
  const ::userInfo::SUserInfo& _internal_infolist(int index) const;
  ::userInfo::SUserInfo* _internal_add_infolist();
  public:
  const ::userInfo::SUserInfo& infolist(int index) const;
  ::userInfo::SUserInfo* add_infolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
      infolist() const;

  // repeated .chipMerge.Prize prize = 5;
  int prize_size() const;
  private:
  int _internal_prize_size() const;
  public:
  void clear_prize();
  ::chipMerge::Prize* mutable_prize(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize >*
      mutable_prize();
  private:
  const ::chipMerge::Prize& _internal_prize(int index) const;
  ::chipMerge::Prize* _internal_add_prize();
  public:
  const ::chipMerge::Prize& prize(int index) const;
  ::chipMerge::Prize* add_prize();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize >&
      prize() const;

  // string textContent = 4;
  void clear_textcontent();
  const std::string& textcontent() const;
  void set_textcontent(const std::string& value);
  void set_textcontent(std::string&& value);
  void set_textcontent(const char* value);
  void set_textcontent(const char* value, size_t size);
  std::string* mutable_textcontent();
  std::string* release_textcontent();
  void set_allocated_textcontent(std::string* textcontent);
  private:
  const std::string& _internal_textcontent() const;
  void _internal_set_textcontent(const std::string& value);
  std::string* _internal_mutable_textcontent();
  public:

  // int32 mergeFlag = 1;
  void clear_mergeflag();
  ::PROTOBUF_NAMESPACE_ID::int32 mergeflag() const;
  void set_mergeflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mergeflag() const;
  void _internal_set_mergeflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 constelOne = 6;
  void clear_constelone();
  ::PROTOBUF_NAMESPACE_ID::int32 constelone() const;
  void set_constelone(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_constelone() const;
  void _internal_set_constelone(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 constelTwo = 7;
  void clear_consteltwo();
  ::PROTOBUF_NAMESPACE_ID::int32 consteltwo() const;
  void set_consteltwo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_consteltwo() const;
  void _internal_set_consteltwo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 8;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chipMerge.SBroadcastChipMerge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo > infolist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize > prize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textcontent_;
  ::PROTOBUF_NAMESPACE_ID::int32 mergeflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 constelone_;
  ::PROTOBUF_NAMESPACE_ID::int32 consteltwo_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipMerge_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Prize

// string name = 1;
inline void Prize::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Prize::name() const {
  // @@protoc_insertion_point(field_get:chipMerge.Prize.name)
  return _internal_name();
}
inline void Prize::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:chipMerge.Prize.name)
}
inline std::string* Prize::mutable_name() {
  // @@protoc_insertion_point(field_mutable:chipMerge.Prize.name)
  return _internal_mutable_name();
}
inline const std::string& Prize::_internal_name() const {
  return name_.GetNoArena();
}
inline void Prize::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Prize::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chipMerge.Prize.name)
}
inline void Prize::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chipMerge.Prize.name)
}
inline void Prize::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chipMerge.Prize.name)
}
inline std::string* Prize::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Prize::release_name() {
  // @@protoc_insertion_point(field_release:chipMerge.Prize.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Prize::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chipMerge.Prize.name)
}

// string url = 2;
inline void Prize::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Prize::url() const {
  // @@protoc_insertion_point(field_get:chipMerge.Prize.url)
  return _internal_url();
}
inline void Prize::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:chipMerge.Prize.url)
}
inline std::string* Prize::mutable_url() {
  // @@protoc_insertion_point(field_mutable:chipMerge.Prize.url)
  return _internal_mutable_url();
}
inline const std::string& Prize::_internal_url() const {
  return url_.GetNoArena();
}
inline void Prize::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Prize::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chipMerge.Prize.url)
}
inline void Prize::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chipMerge.Prize.url)
}
inline void Prize::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chipMerge.Prize.url)
}
inline std::string* Prize::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Prize::release_url() {
  // @@protoc_insertion_point(field_release:chipMerge.Prize.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Prize::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:chipMerge.Prize.url)
}

// -------------------------------------------------------------------

// SChipMerge

// int32 mergeFlag = 1;
inline void SChipMerge::clear_mergeflag() {
  mergeflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::_internal_mergeflag() const {
  return mergeflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::mergeflag() const {
  // @@protoc_insertion_point(field_get:chipMerge.SChipMerge.mergeFlag)
  return _internal_mergeflag();
}
inline void SChipMerge::_internal_set_mergeflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mergeflag_ = value;
}
inline void SChipMerge::set_mergeflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mergeflag(value);
  // @@protoc_insertion_point(field_set:chipMerge.SChipMerge.mergeFlag)
}

// int32 score = 2;
inline void SChipMerge::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::score() const {
  // @@protoc_insertion_point(field_get:chipMerge.SChipMerge.score)
  return _internal_score();
}
inline void SChipMerge::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SChipMerge::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:chipMerge.SChipMerge.score)
}

// string textContent = 3;
inline void SChipMerge::clear_textcontent() {
  textcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SChipMerge::textcontent() const {
  // @@protoc_insertion_point(field_get:chipMerge.SChipMerge.textContent)
  return _internal_textcontent();
}
inline void SChipMerge::set_textcontent(const std::string& value) {
  _internal_set_textcontent(value);
  // @@protoc_insertion_point(field_set:chipMerge.SChipMerge.textContent)
}
inline std::string* SChipMerge::mutable_textcontent() {
  // @@protoc_insertion_point(field_mutable:chipMerge.SChipMerge.textContent)
  return _internal_mutable_textcontent();
}
inline const std::string& SChipMerge::_internal_textcontent() const {
  return textcontent_.GetNoArena();
}
inline void SChipMerge::_internal_set_textcontent(const std::string& value) {
  
  textcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SChipMerge::set_textcontent(std::string&& value) {
  
  textcontent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chipMerge.SChipMerge.textContent)
}
inline void SChipMerge::set_textcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  textcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chipMerge.SChipMerge.textContent)
}
inline void SChipMerge::set_textcontent(const char* value, size_t size) {
  
  textcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chipMerge.SChipMerge.textContent)
}
inline std::string* SChipMerge::_internal_mutable_textcontent() {
  
  return textcontent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SChipMerge::release_textcontent() {
  // @@protoc_insertion_point(field_release:chipMerge.SChipMerge.textContent)
  
  return textcontent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SChipMerge::set_allocated_textcontent(std::string* textcontent) {
  if (textcontent != nullptr) {
    
  } else {
    
  }
  textcontent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), textcontent);
  // @@protoc_insertion_point(field_set_allocated:chipMerge.SChipMerge.textContent)
}

// repeated .chipMerge.Prize prize = 4;
inline int SChipMerge::_internal_prize_size() const {
  return prize_.size();
}
inline int SChipMerge::prize_size() const {
  return _internal_prize_size();
}
inline void SChipMerge::clear_prize() {
  prize_.Clear();
}
inline ::chipMerge::Prize* SChipMerge::mutable_prize(int index) {
  // @@protoc_insertion_point(field_mutable:chipMerge.SChipMerge.prize)
  return prize_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize >*
SChipMerge::mutable_prize() {
  // @@protoc_insertion_point(field_mutable_list:chipMerge.SChipMerge.prize)
  return &prize_;
}
inline const ::chipMerge::Prize& SChipMerge::_internal_prize(int index) const {
  return prize_.Get(index);
}
inline const ::chipMerge::Prize& SChipMerge::prize(int index) const {
  // @@protoc_insertion_point(field_get:chipMerge.SChipMerge.prize)
  return _internal_prize(index);
}
inline ::chipMerge::Prize* SChipMerge::_internal_add_prize() {
  return prize_.Add();
}
inline ::chipMerge::Prize* SChipMerge::add_prize() {
  // @@protoc_insertion_point(field_add:chipMerge.SChipMerge.prize)
  return _internal_add_prize();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize >&
SChipMerge::prize() const {
  // @@protoc_insertion_point(field_list:chipMerge.SChipMerge.prize)
  return prize_;
}

// int32 constelOne = 5;
inline void SChipMerge::clear_constelone() {
  constelone_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::_internal_constelone() const {
  return constelone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::constelone() const {
  // @@protoc_insertion_point(field_get:chipMerge.SChipMerge.constelOne)
  return _internal_constelone();
}
inline void SChipMerge::_internal_set_constelone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  constelone_ = value;
}
inline void SChipMerge::set_constelone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_constelone(value);
  // @@protoc_insertion_point(field_set:chipMerge.SChipMerge.constelOne)
}

// int32 constelTwo = 6;
inline void SChipMerge::clear_consteltwo() {
  consteltwo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::_internal_consteltwo() const {
  return consteltwo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::consteltwo() const {
  // @@protoc_insertion_point(field_get:chipMerge.SChipMerge.constelTwo)
  return _internal_consteltwo();
}
inline void SChipMerge::_internal_set_consteltwo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  consteltwo_ = value;
}
inline void SChipMerge::set_consteltwo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_consteltwo(value);
  // @@protoc_insertion_point(field_set:chipMerge.SChipMerge.constelTwo)
}

// int32 level = 7;
inline void SChipMerge::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChipMerge::level() const {
  // @@protoc_insertion_point(field_get:chipMerge.SChipMerge.level)
  return _internal_level();
}
inline void SChipMerge::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SChipMerge::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:chipMerge.SChipMerge.level)
}

// -------------------------------------------------------------------

// SBroadcastChipMerge

// int32 mergeFlag = 1;
inline void SBroadcastChipMerge::clear_mergeflag() {
  mergeflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::_internal_mergeflag() const {
  return mergeflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::mergeflag() const {
  // @@protoc_insertion_point(field_get:chipMerge.SBroadcastChipMerge.mergeFlag)
  return _internal_mergeflag();
}
inline void SBroadcastChipMerge::_internal_set_mergeflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mergeflag_ = value;
}
inline void SBroadcastChipMerge::set_mergeflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mergeflag(value);
  // @@protoc_insertion_point(field_set:chipMerge.SBroadcastChipMerge.mergeFlag)
}

// repeated .userInfo.SUserInfo infoList = 2;
inline int SBroadcastChipMerge::_internal_infolist_size() const {
  return infolist_.size();
}
inline int SBroadcastChipMerge::infolist_size() const {
  return _internal_infolist_size();
}
inline ::userInfo::SUserInfo* SBroadcastChipMerge::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:chipMerge.SBroadcastChipMerge.infoList)
  return infolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
SBroadcastChipMerge::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:chipMerge.SBroadcastChipMerge.infoList)
  return &infolist_;
}
inline const ::userInfo::SUserInfo& SBroadcastChipMerge::_internal_infolist(int index) const {
  return infolist_.Get(index);
}
inline const ::userInfo::SUserInfo& SBroadcastChipMerge::infolist(int index) const {
  // @@protoc_insertion_point(field_get:chipMerge.SBroadcastChipMerge.infoList)
  return _internal_infolist(index);
}
inline ::userInfo::SUserInfo* SBroadcastChipMerge::_internal_add_infolist() {
  return infolist_.Add();
}
inline ::userInfo::SUserInfo* SBroadcastChipMerge::add_infolist() {
  // @@protoc_insertion_point(field_add:chipMerge.SBroadcastChipMerge.infoList)
  return _internal_add_infolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
SBroadcastChipMerge::infolist() const {
  // @@protoc_insertion_point(field_list:chipMerge.SBroadcastChipMerge.infoList)
  return infolist_;
}

// int32 score = 3;
inline void SBroadcastChipMerge::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::score() const {
  // @@protoc_insertion_point(field_get:chipMerge.SBroadcastChipMerge.score)
  return _internal_score();
}
inline void SBroadcastChipMerge::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SBroadcastChipMerge::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:chipMerge.SBroadcastChipMerge.score)
}

// string textContent = 4;
inline void SBroadcastChipMerge::clear_textcontent() {
  textcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SBroadcastChipMerge::textcontent() const {
  // @@protoc_insertion_point(field_get:chipMerge.SBroadcastChipMerge.textContent)
  return _internal_textcontent();
}
inline void SBroadcastChipMerge::set_textcontent(const std::string& value) {
  _internal_set_textcontent(value);
  // @@protoc_insertion_point(field_set:chipMerge.SBroadcastChipMerge.textContent)
}
inline std::string* SBroadcastChipMerge::mutable_textcontent() {
  // @@protoc_insertion_point(field_mutable:chipMerge.SBroadcastChipMerge.textContent)
  return _internal_mutable_textcontent();
}
inline const std::string& SBroadcastChipMerge::_internal_textcontent() const {
  return textcontent_.GetNoArena();
}
inline void SBroadcastChipMerge::_internal_set_textcontent(const std::string& value) {
  
  textcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SBroadcastChipMerge::set_textcontent(std::string&& value) {
  
  textcontent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chipMerge.SBroadcastChipMerge.textContent)
}
inline void SBroadcastChipMerge::set_textcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  textcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chipMerge.SBroadcastChipMerge.textContent)
}
inline void SBroadcastChipMerge::set_textcontent(const char* value, size_t size) {
  
  textcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chipMerge.SBroadcastChipMerge.textContent)
}
inline std::string* SBroadcastChipMerge::_internal_mutable_textcontent() {
  
  return textcontent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SBroadcastChipMerge::release_textcontent() {
  // @@protoc_insertion_point(field_release:chipMerge.SBroadcastChipMerge.textContent)
  
  return textcontent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SBroadcastChipMerge::set_allocated_textcontent(std::string* textcontent) {
  if (textcontent != nullptr) {
    
  } else {
    
  }
  textcontent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), textcontent);
  // @@protoc_insertion_point(field_set_allocated:chipMerge.SBroadcastChipMerge.textContent)
}

// repeated .chipMerge.Prize prize = 5;
inline int SBroadcastChipMerge::_internal_prize_size() const {
  return prize_.size();
}
inline int SBroadcastChipMerge::prize_size() const {
  return _internal_prize_size();
}
inline void SBroadcastChipMerge::clear_prize() {
  prize_.Clear();
}
inline ::chipMerge::Prize* SBroadcastChipMerge::mutable_prize(int index) {
  // @@protoc_insertion_point(field_mutable:chipMerge.SBroadcastChipMerge.prize)
  return prize_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize >*
SBroadcastChipMerge::mutable_prize() {
  // @@protoc_insertion_point(field_mutable_list:chipMerge.SBroadcastChipMerge.prize)
  return &prize_;
}
inline const ::chipMerge::Prize& SBroadcastChipMerge::_internal_prize(int index) const {
  return prize_.Get(index);
}
inline const ::chipMerge::Prize& SBroadcastChipMerge::prize(int index) const {
  // @@protoc_insertion_point(field_get:chipMerge.SBroadcastChipMerge.prize)
  return _internal_prize(index);
}
inline ::chipMerge::Prize* SBroadcastChipMerge::_internal_add_prize() {
  return prize_.Add();
}
inline ::chipMerge::Prize* SBroadcastChipMerge::add_prize() {
  // @@protoc_insertion_point(field_add:chipMerge.SBroadcastChipMerge.prize)
  return _internal_add_prize();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipMerge::Prize >&
SBroadcastChipMerge::prize() const {
  // @@protoc_insertion_point(field_list:chipMerge.SBroadcastChipMerge.prize)
  return prize_;
}

// int32 constelOne = 6;
inline void SBroadcastChipMerge::clear_constelone() {
  constelone_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::_internal_constelone() const {
  return constelone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::constelone() const {
  // @@protoc_insertion_point(field_get:chipMerge.SBroadcastChipMerge.constelOne)
  return _internal_constelone();
}
inline void SBroadcastChipMerge::_internal_set_constelone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  constelone_ = value;
}
inline void SBroadcastChipMerge::set_constelone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_constelone(value);
  // @@protoc_insertion_point(field_set:chipMerge.SBroadcastChipMerge.constelOne)
}

// int32 constelTwo = 7;
inline void SBroadcastChipMerge::clear_consteltwo() {
  consteltwo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::_internal_consteltwo() const {
  return consteltwo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::consteltwo() const {
  // @@protoc_insertion_point(field_get:chipMerge.SBroadcastChipMerge.constelTwo)
  return _internal_consteltwo();
}
inline void SBroadcastChipMerge::_internal_set_consteltwo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  consteltwo_ = value;
}
inline void SBroadcastChipMerge::set_consteltwo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_consteltwo(value);
  // @@protoc_insertion_point(field_set:chipMerge.SBroadcastChipMerge.constelTwo)
}

// int32 level = 8;
inline void SBroadcastChipMerge::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadcastChipMerge::level() const {
  // @@protoc_insertion_point(field_get:chipMerge.SBroadcastChipMerge.level)
  return _internal_level();
}
inline void SBroadcastChipMerge::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SBroadcastChipMerge::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:chipMerge.SBroadcastChipMerge.level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chipMerge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chipMerge_2eproto
