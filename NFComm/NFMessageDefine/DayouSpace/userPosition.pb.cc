// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userPosition.proto

#include "userPosition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_position_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPosition_position_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_position_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPosition2_position_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userPosition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BBonePos_userPosition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userPosition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BFacePos_userPosition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userPosition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BVrBonePos_userPosition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userPosition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NeuronPosition_userPosition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userPosition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UPosition_userPosition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userPosition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VrPosition_userPosition_2eproto;
namespace userPosition {
class CUserPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CUserPosition> _instance;
} _CUserPosition_default_instance_;
class SUserPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SUserPosition> _instance;
} _SUserPosition_default_instance_;
class UPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UPosition> _instance;
} _UPosition_default_instance_;
class CNeuronConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNeuronConnect> _instance;
} _CNeuronConnect_default_instance_;
class SNeuronConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNeuronConnect> _instance;
} _SNeuronConnect_default_instance_;
class BBonePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BBonePos> _instance;
} _BBonePos_default_instance_;
class BFacePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BFacePos> _instance;
} _BFacePos_default_instance_;
class CNeuronPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNeuronPosition> _instance;
} _CNeuronPosition_default_instance_;
class NeuronPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NeuronPosition> _instance;
} _NeuronPosition_default_instance_;
class SNeuronPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNeuronPosition> _instance;
} _SNeuronPosition_default_instance_;
class BVrBonePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BVrBonePos> _instance;
} _BVrBonePos_default_instance_;
class CVrPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CVrPosition> _instance;
} _CVrPosition_default_instance_;
class VrPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VrPosition> _instance;
} _VrPosition_default_instance_;
class SVrPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SVrPosition> _instance;
} _SVrPosition_default_instance_;
}  // namespace userPosition
static void InitDefaultsscc_info_BBonePos_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_BBonePos_default_instance_;
    new (ptr) ::userPosition::BBonePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::BBonePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BBonePos_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BBonePos_userPosition_2eproto}, {
      &scc_info_BPosition2_position_2eproto.base,}};

static void InitDefaultsscc_info_BFacePos_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_BFacePos_default_instance_;
    new (ptr) ::userPosition::BFacePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::BFacePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BFacePos_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BFacePos_userPosition_2eproto}, {}};

static void InitDefaultsscc_info_BVrBonePos_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_BVrBonePos_default_instance_;
    new (ptr) ::userPosition::BVrBonePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::BVrBonePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BVrBonePos_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BVrBonePos_userPosition_2eproto}, {
      &scc_info_BPosition_position_2eproto.base,}};

static void InitDefaultsscc_info_CNeuronConnect_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_CNeuronConnect_default_instance_;
    new (ptr) ::userPosition::CNeuronConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::CNeuronConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNeuronConnect_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNeuronConnect_userPosition_2eproto}, {}};

static void InitDefaultsscc_info_CNeuronPosition_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_CNeuronPosition_default_instance_;
    new (ptr) ::userPosition::CNeuronPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::CNeuronPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CNeuronPosition_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CNeuronPosition_userPosition_2eproto}, {
      &scc_info_BBonePos_userPosition_2eproto.base,
      &scc_info_BFacePos_userPosition_2eproto.base,}};

static void InitDefaultsscc_info_CUserPosition_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_CUserPosition_default_instance_;
    new (ptr) ::userPosition::CUserPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::CUserPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CUserPosition_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CUserPosition_userPosition_2eproto}, {
      &scc_info_BPosition2_position_2eproto.base,}};

static void InitDefaultsscc_info_CVrPosition_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_CVrPosition_default_instance_;
    new (ptr) ::userPosition::CVrPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::CVrPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CVrPosition_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CVrPosition_userPosition_2eproto}, {
      &scc_info_BVrBonePos_userPosition_2eproto.base,
      &scc_info_BFacePos_userPosition_2eproto.base,}};

static void InitDefaultsscc_info_NeuronPosition_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_NeuronPosition_default_instance_;
    new (ptr) ::userPosition::NeuronPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::NeuronPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NeuronPosition_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NeuronPosition_userPosition_2eproto}, {
      &scc_info_BBonePos_userPosition_2eproto.base,
      &scc_info_BFacePos_userPosition_2eproto.base,}};

static void InitDefaultsscc_info_SNeuronConnect_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_SNeuronConnect_default_instance_;
    new (ptr) ::userPosition::SNeuronConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::SNeuronConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNeuronConnect_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNeuronConnect_userPosition_2eproto}, {}};

static void InitDefaultsscc_info_SNeuronPosition_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_SNeuronPosition_default_instance_;
    new (ptr) ::userPosition::SNeuronPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::SNeuronPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SNeuronPosition_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SNeuronPosition_userPosition_2eproto}, {
      &scc_info_NeuronPosition_userPosition_2eproto.base,}};

static void InitDefaultsscc_info_SUserPosition_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_SUserPosition_default_instance_;
    new (ptr) ::userPosition::SUserPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::SUserPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SUserPosition_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SUserPosition_userPosition_2eproto}, {
      &scc_info_UPosition_userPosition_2eproto.base,}};

static void InitDefaultsscc_info_SVrPosition_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_SVrPosition_default_instance_;
    new (ptr) ::userPosition::SVrPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::SVrPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SVrPosition_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SVrPosition_userPosition_2eproto}, {
      &scc_info_VrPosition_userPosition_2eproto.base,}};

static void InitDefaultsscc_info_UPosition_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_UPosition_default_instance_;
    new (ptr) ::userPosition::UPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::UPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UPosition_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UPosition_userPosition_2eproto}, {
      &scc_info_BPosition2_position_2eproto.base,}};

static void InitDefaultsscc_info_VrPosition_userPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userPosition::_VrPosition_default_instance_;
    new (ptr) ::userPosition::VrPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userPosition::VrPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VrPosition_userPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VrPosition_userPosition_2eproto}, {
      &scc_info_BVrBonePos_userPosition_2eproto.base,
      &scc_info_BFacePos_userPosition_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userPosition_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_userPosition_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_userPosition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userPosition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::CUserPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::CUserPosition, position_),
  PROTOBUF_FIELD_OFFSET(::userPosition::CUserPosition, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::SUserPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::SUserPosition, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::UPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::UPosition, position_),
  PROTOBUF_FIELD_OFFSET(::userPosition::UPosition, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::CNeuronConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::CNeuronConnect, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::SNeuronConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::SNeuronConnect, uid_),
  PROTOBUF_FIELD_OFFSET(::userPosition::SNeuronConnect, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::BBonePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::BBonePos, boneid_),
  PROTOBUF_FIELD_OFFSET(::userPosition::BBonePos, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::BFacePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::BFacePos, faceid_),
  PROTOBUF_FIELD_OFFSET(::userPosition::BFacePos, facevalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::CNeuronPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::CNeuronPosition, uid_),
  PROTOBUF_FIELD_OFFSET(::userPosition::CNeuronPosition, bonepos_),
  PROTOBUF_FIELD_OFFSET(::userPosition::CNeuronPosition, facepos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::NeuronPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::NeuronPosition, uid_),
  PROTOBUF_FIELD_OFFSET(::userPosition::NeuronPosition, bonepos_),
  PROTOBUF_FIELD_OFFSET(::userPosition::NeuronPosition, facepos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::SNeuronPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::SNeuronPosition, neuronposlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::BVrBonePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::BVrBonePos, boneid_),
  PROTOBUF_FIELD_OFFSET(::userPosition::BVrBonePos, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::CVrPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::CVrPosition, uid_),
  PROTOBUF_FIELD_OFFSET(::userPosition::CVrPosition, bonepos_),
  PROTOBUF_FIELD_OFFSET(::userPosition::CVrPosition, facepos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::VrPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::VrPosition, uid_),
  PROTOBUF_FIELD_OFFSET(::userPosition::VrPosition, bonepos_),
  PROTOBUF_FIELD_OFFSET(::userPosition::VrPosition, facepos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userPosition::SVrPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userPosition::SVrPosition, vrpostlist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::userPosition::CUserPosition)},
  { 7, -1, sizeof(::userPosition::SUserPosition)},
  { 13, -1, sizeof(::userPosition::UPosition)},
  { 20, -1, sizeof(::userPosition::CNeuronConnect)},
  { 26, -1, sizeof(::userPosition::SNeuronConnect)},
  { 33, -1, sizeof(::userPosition::BBonePos)},
  { 40, -1, sizeof(::userPosition::BFacePos)},
  { 47, -1, sizeof(::userPosition::CNeuronPosition)},
  { 55, -1, sizeof(::userPosition::NeuronPosition)},
  { 63, -1, sizeof(::userPosition::SNeuronPosition)},
  { 69, -1, sizeof(::userPosition::BVrBonePos)},
  { 76, -1, sizeof(::userPosition::CVrPosition)},
  { 84, -1, sizeof(::userPosition::VrPosition)},
  { 92, -1, sizeof(::userPosition::SVrPosition)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_CUserPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_SUserPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_UPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_CNeuronConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_SNeuronConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_BBonePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_BFacePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_CNeuronPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_NeuronPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_SNeuronPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_BVrBonePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_CVrPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_VrPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userPosition::_SVrPosition_default_instance_),
};

const char descriptor_table_protodef_userPosition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022userPosition.proto\022\014userPosition\032\016posi"
  "tion.proto\"D\n\rCUserPosition\022&\n\010position\030"
  "\001 \001(\0132\024.position.BPosition2\022\013\n\003uid\030\002 \001(\005"
  "\";\n\rSUserPosition\022*\n\tpositions\030\001 \003(\0132\027.u"
  "serPosition.UPosition\"@\n\tUPosition\022&\n\010po"
  "sition\030\001 \001(\0132\024.position.BPosition2\022\013\n\003ui"
  "d\030\002 \001(\005\"\037\n\016CNeuronConnect\022\r\n\005state\030\001 \001(\005"
  "\",\n\016SNeuronConnect\022\013\n\003uid\030\001 \001(\005\022\r\n\005state"
  "\030\002 \001(\005\"B\n\010BBonePos\022\016\n\006boneId\030\001 \001(\005\022&\n\010po"
  "sition\030\002 \001(\0132\024.position.BPosition2\"-\n\010BF"
  "acePos\022\016\n\006faceId\030\001 \001(\005\022\021\n\tfaceValue\030\002 \001("
  "\005\"p\n\017CNeuronPosition\022\013\n\003uid\030\001 \001(\005\022\'\n\007bon"
  "ePos\030\002 \003(\0132\026.userPosition.BBonePos\022\'\n\007fa"
  "cePos\030\003 \003(\0132\026.userPosition.BFacePos\"o\n\016N"
  "euronPosition\022\013\n\003uid\030\001 \001(\005\022\'\n\007bonePos\030\002 "
  "\003(\0132\026.userPosition.BBonePos\022\'\n\007facePos\030\003"
  " \003(\0132\026.userPosition.BFacePos\"F\n\017SNeuronP"
  "osition\0223\n\rneuronPosList\030\001 \003(\0132\034.userPos"
  "ition.NeuronPosition\"C\n\nBVrBonePos\022\016\n\006bo"
  "neId\030\001 \001(\005\022%\n\010position\030\002 \001(\0132\023.position."
  "BPosition\"n\n\013CVrPosition\022\013\n\003uid\030\001 \001(\005\022)\n"
  "\007bonePos\030\002 \003(\0132\030.userPosition.BVrBonePos"
  "\022\'\n\007facePos\030\003 \003(\0132\026.userPosition.BFacePo"
  "s\"m\n\nVrPosition\022\013\n\003uid\030\001 \001(\005\022)\n\007bonePos\030"
  "\002 \003(\0132\030.userPosition.BVrBonePos\022\'\n\007faceP"
  "os\030\003 \003(\0132\026.userPosition.BFacePos\";\n\013SVrP"
  "osition\022,\n\nvrPostList\030\001 \003(\0132\030.userPositi"
  "on.VrPositionB(\n\030com.dayou.space.protobu"
  "fB\014UserPositionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userPosition_2eproto_deps[1] = {
  &::descriptor_table_position_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userPosition_2eproto_sccs[14] = {
  &scc_info_BBonePos_userPosition_2eproto.base,
  &scc_info_BFacePos_userPosition_2eproto.base,
  &scc_info_BVrBonePos_userPosition_2eproto.base,
  &scc_info_CNeuronConnect_userPosition_2eproto.base,
  &scc_info_CNeuronPosition_userPosition_2eproto.base,
  &scc_info_CUserPosition_userPosition_2eproto.base,
  &scc_info_CVrPosition_userPosition_2eproto.base,
  &scc_info_NeuronPosition_userPosition_2eproto.base,
  &scc_info_SNeuronConnect_userPosition_2eproto.base,
  &scc_info_SNeuronPosition_userPosition_2eproto.base,
  &scc_info_SUserPosition_userPosition_2eproto.base,
  &scc_info_SVrPosition_userPosition_2eproto.base,
  &scc_info_UPosition_userPosition_2eproto.base,
  &scc_info_VrPosition_userPosition_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userPosition_2eproto_once;
static bool descriptor_table_userPosition_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userPosition_2eproto = {
  &descriptor_table_userPosition_2eproto_initialized, descriptor_table_protodef_userPosition_2eproto, "userPosition.proto", 1143,
  &descriptor_table_userPosition_2eproto_once, descriptor_table_userPosition_2eproto_sccs, descriptor_table_userPosition_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_userPosition_2eproto::offsets,
  file_level_metadata_userPosition_2eproto, 14, file_level_enum_descriptors_userPosition_2eproto, file_level_service_descriptors_userPosition_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userPosition_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userPosition_2eproto), true);
namespace userPosition {

// ===================================================================

void CUserPosition::InitAsDefaultInstance() {
  ::userPosition::_CUserPosition_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition2*>(
      ::position::BPosition2::internal_default_instance());
}
class CUserPosition::_Internal {
 public:
  static const ::position::BPosition2& position(const CUserPosition* msg);
};

const ::position::BPosition2&
CUserPosition::_Internal::position(const CUserPosition* msg) {
  return *msg->position_;
}
void CUserPosition::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
CUserPosition::CUserPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.CUserPosition)
}
CUserPosition::CUserPosition(const CUserPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition2(*from.position_);
  } else {
    position_ = nullptr;
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:userPosition.CUserPosition)
}

void CUserPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CUserPosition_userPosition_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(uid_));
}

CUserPosition::~CUserPosition() {
  // @@protoc_insertion_point(destructor:userPosition.CUserPosition)
  SharedDtor();
}

void CUserPosition::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CUserPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserPosition& CUserPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CUserPosition_userPosition_2eproto.base);
  return *internal_default_instance();
}


void CUserPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.CUserPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CUserPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .position.BPosition2 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.CUserPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .position.BPosition2 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.CUserPosition)
  return target;
}

size_t CUserPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.CUserPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .position.BPosition2 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.CUserPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.CUserPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.CUserPosition)
    MergeFrom(*source);
  }
}

void CUserPosition::MergeFrom(const CUserPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.CUserPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition2::MergeFrom(from._internal_position());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CUserPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.CUserPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserPosition::CopyFrom(const CUserPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.CUserPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserPosition::IsInitialized() const {
  return true;
}

void CUserPosition::InternalSwap(CUserPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SUserPosition::InitAsDefaultInstance() {
}
class SUserPosition::_Internal {
 public:
};

SUserPosition::SUserPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.SUserPosition)
}
SUserPosition::SUserPosition(const SUserPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:userPosition.SUserPosition)
}

void SUserPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SUserPosition_userPosition_2eproto.base);
}

SUserPosition::~SUserPosition() {
  // @@protoc_insertion_point(destructor:userPosition.SUserPosition)
  SharedDtor();
}

void SUserPosition::SharedDtor() {
}

void SUserPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SUserPosition& SUserPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SUserPosition_userPosition_2eproto.base);
  return *internal_default_instance();
}


void SUserPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.SUserPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _internal_metadata_.Clear();
}

const char* SUserPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .userPosition.UPosition positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUserPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.SUserPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .userPosition.UPosition positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.SUserPosition)
  return target;
}

size_t SUserPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.SUserPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userPosition.UPosition positions = 1;
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUserPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.SUserPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SUserPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SUserPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.SUserPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.SUserPosition)
    MergeFrom(*source);
  }
}

void SUserPosition::MergeFrom(const SUserPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.SUserPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
}

void SUserPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.SUserPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUserPosition::CopyFrom(const SUserPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.SUserPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUserPosition::IsInitialized() const {
  return true;
}

void SUserPosition::InternalSwap(SUserPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SUserPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UPosition::InitAsDefaultInstance() {
  ::userPosition::_UPosition_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition2*>(
      ::position::BPosition2::internal_default_instance());
}
class UPosition::_Internal {
 public:
  static const ::position::BPosition2& position(const UPosition* msg);
};

const ::position::BPosition2&
UPosition::_Internal::position(const UPosition* msg) {
  return *msg->position_;
}
void UPosition::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
UPosition::UPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.UPosition)
}
UPosition::UPosition(const UPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition2(*from.position_);
  } else {
    position_ = nullptr;
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:userPosition.UPosition)
}

void UPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UPosition_userPosition_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(uid_));
}

UPosition::~UPosition() {
  // @@protoc_insertion_point(destructor:userPosition.UPosition)
  SharedDtor();
}

void UPosition::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void UPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UPosition& UPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UPosition_userPosition_2eproto.base);
  return *internal_default_instance();
}


void UPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.UPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* UPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .position.BPosition2 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.UPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .position.BPosition2 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.UPosition)
  return target;
}

size_t UPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.UPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .position.BPosition2 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.UPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const UPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.UPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.UPosition)
    MergeFrom(*source);
  }
}

void UPosition::MergeFrom(const UPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.UPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition2::MergeFrom(from._internal_position());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void UPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.UPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UPosition::CopyFrom(const UPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.UPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UPosition::IsInitialized() const {
  return true;
}

void UPosition::InternalSwap(UPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CNeuronConnect::InitAsDefaultInstance() {
}
class CNeuronConnect::_Internal {
 public:
};

CNeuronConnect::CNeuronConnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.CNeuronConnect)
}
CNeuronConnect::CNeuronConnect(const CNeuronConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:userPosition.CNeuronConnect)
}

void CNeuronConnect::SharedCtor() {
  state_ = 0;
}

CNeuronConnect::~CNeuronConnect() {
  // @@protoc_insertion_point(destructor:userPosition.CNeuronConnect)
  SharedDtor();
}

void CNeuronConnect::SharedDtor() {
}

void CNeuronConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNeuronConnect& CNeuronConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNeuronConnect_userPosition_2eproto.base);
  return *internal_default_instance();
}


void CNeuronConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.CNeuronConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

const char* CNeuronConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNeuronConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.CNeuronConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.CNeuronConnect)
  return target;
}

size_t CNeuronConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.CNeuronConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNeuronConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.CNeuronConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CNeuronConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNeuronConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.CNeuronConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.CNeuronConnect)
    MergeFrom(*source);
  }
}

void CNeuronConnect::MergeFrom(const CNeuronConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.CNeuronConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void CNeuronConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.CNeuronConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNeuronConnect::CopyFrom(const CNeuronConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.CNeuronConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNeuronConnect::IsInitialized() const {
  return true;
}

void CNeuronConnect::InternalSwap(CNeuronConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNeuronConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNeuronConnect::InitAsDefaultInstance() {
}
class SNeuronConnect::_Internal {
 public:
};

SNeuronConnect::SNeuronConnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.SNeuronConnect)
}
SNeuronConnect::SNeuronConnect(const SNeuronConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:userPosition.SNeuronConnect)
}

void SNeuronConnect::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(state_));
}

SNeuronConnect::~SNeuronConnect() {
  // @@protoc_insertion_point(destructor:userPosition.SNeuronConnect)
  SharedDtor();
}

void SNeuronConnect::SharedDtor() {
}

void SNeuronConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNeuronConnect& SNeuronConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNeuronConnect_userPosition_2eproto.base);
  return *internal_default_instance();
}


void SNeuronConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.SNeuronConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* SNeuronConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNeuronConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.SNeuronConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.SNeuronConnect)
  return target;
}

size_t SNeuronConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.SNeuronConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNeuronConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.SNeuronConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const SNeuronConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNeuronConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.SNeuronConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.SNeuronConnect)
    MergeFrom(*source);
  }
}

void SNeuronConnect::MergeFrom(const SNeuronConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.SNeuronConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SNeuronConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.SNeuronConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNeuronConnect::CopyFrom(const SNeuronConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.SNeuronConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNeuronConnect::IsInitialized() const {
  return true;
}

void SNeuronConnect::InternalSwap(SNeuronConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNeuronConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BBonePos::InitAsDefaultInstance() {
  ::userPosition::_BBonePos_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition2*>(
      ::position::BPosition2::internal_default_instance());
}
class BBonePos::_Internal {
 public:
  static const ::position::BPosition2& position(const BBonePos* msg);
};

const ::position::BPosition2&
BBonePos::_Internal::position(const BBonePos* msg) {
  return *msg->position_;
}
void BBonePos::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
BBonePos::BBonePos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.BBonePos)
}
BBonePos::BBonePos(const BBonePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition2(*from.position_);
  } else {
    position_ = nullptr;
  }
  boneid_ = from.boneid_;
  // @@protoc_insertion_point(copy_constructor:userPosition.BBonePos)
}

void BBonePos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BBonePos_userPosition_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boneid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(boneid_));
}

BBonePos::~BBonePos() {
  // @@protoc_insertion_point(destructor:userPosition.BBonePos)
  SharedDtor();
}

void BBonePos::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void BBonePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBonePos& BBonePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BBonePos_userPosition_2eproto.base);
  return *internal_default_instance();
}


void BBonePos::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.BBonePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  boneid_ = 0;
  _internal_metadata_.Clear();
}

const char* BBonePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boneId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .position.BPosition2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBonePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.BBonePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boneId = 1;
  if (this->boneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boneid(), target);
  }

  // .position.BPosition2 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.BBonePos)
  return target;
}

size_t BBonePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.BBonePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .position.BPosition2 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 boneId = 1;
  if (this->boneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBonePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.BBonePos)
  GOOGLE_DCHECK_NE(&from, this);
  const BBonePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBonePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.BBonePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.BBonePos)
    MergeFrom(*source);
  }
}

void BBonePos::MergeFrom(const BBonePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.BBonePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition2::MergeFrom(from._internal_position());
  }
  if (from.boneid() != 0) {
    _internal_set_boneid(from._internal_boneid());
  }
}

void BBonePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.BBonePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBonePos::CopyFrom(const BBonePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.BBonePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBonePos::IsInitialized() const {
  return true;
}

void BBonePos::InternalSwap(BBonePos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(boneid_, other->boneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBonePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BFacePos::InitAsDefaultInstance() {
}
class BFacePos::_Internal {
 public:
};

BFacePos::BFacePos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.BFacePos)
}
BFacePos::BFacePos(const BFacePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&faceid_, &from.faceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&facevalue_) -
    reinterpret_cast<char*>(&faceid_)) + sizeof(facevalue_));
  // @@protoc_insertion_point(copy_constructor:userPosition.BFacePos)
}

void BFacePos::SharedCtor() {
  ::memset(&faceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&facevalue_) -
      reinterpret_cast<char*>(&faceid_)) + sizeof(facevalue_));
}

BFacePos::~BFacePos() {
  // @@protoc_insertion_point(destructor:userPosition.BFacePos)
  SharedDtor();
}

void BFacePos::SharedDtor() {
}

void BFacePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BFacePos& BFacePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BFacePos_userPosition_2eproto.base);
  return *internal_default_instance();
}


void BFacePos::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.BFacePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&faceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&facevalue_) -
      reinterpret_cast<char*>(&faceid_)) + sizeof(facevalue_));
  _internal_metadata_.Clear();
}

const char* BFacePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 faceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          faceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 faceValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          facevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BFacePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.BFacePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 faceId = 1;
  if (this->faceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_faceid(), target);
  }

  // int32 faceValue = 2;
  if (this->facevalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_facevalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.BFacePos)
  return target;
}

size_t BFacePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.BFacePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 faceId = 1;
  if (this->faceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_faceid());
  }

  // int32 faceValue = 2;
  if (this->facevalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_facevalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BFacePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.BFacePos)
  GOOGLE_DCHECK_NE(&from, this);
  const BFacePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BFacePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.BFacePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.BFacePos)
    MergeFrom(*source);
  }
}

void BFacePos::MergeFrom(const BFacePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.BFacePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.faceid() != 0) {
    _internal_set_faceid(from._internal_faceid());
  }
  if (from.facevalue() != 0) {
    _internal_set_facevalue(from._internal_facevalue());
  }
}

void BFacePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.BFacePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFacePos::CopyFrom(const BFacePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.BFacePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFacePos::IsInitialized() const {
  return true;
}

void BFacePos::InternalSwap(BFacePos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(faceid_, other->faceid_);
  swap(facevalue_, other->facevalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BFacePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CNeuronPosition::InitAsDefaultInstance() {
}
class CNeuronPosition::_Internal {
 public:
};

CNeuronPosition::CNeuronPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.CNeuronPosition)
}
CNeuronPosition::CNeuronPosition(const CNeuronPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bonepos_(from.bonepos_),
      facepos_(from.facepos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:userPosition.CNeuronPosition)
}

void CNeuronPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CNeuronPosition_userPosition_2eproto.base);
  uid_ = 0;
}

CNeuronPosition::~CNeuronPosition() {
  // @@protoc_insertion_point(destructor:userPosition.CNeuronPosition)
  SharedDtor();
}

void CNeuronPosition::SharedDtor() {
}

void CNeuronPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNeuronPosition& CNeuronPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNeuronPosition_userPosition_2eproto.base);
  return *internal_default_instance();
}


void CNeuronPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.CNeuronPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bonepos_.Clear();
  facepos_.Clear();
  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CNeuronPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .userPosition.BBonePos bonePos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bonepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .userPosition.BFacePos facePos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_facepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNeuronPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.CNeuronPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // repeated .userPosition.BBonePos bonePos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bonepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bonepos(i), target, stream);
  }

  // repeated .userPosition.BFacePos facePos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_facepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_facepos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.CNeuronPosition)
  return target;
}

size_t CNeuronPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.CNeuronPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userPosition.BBonePos bonePos = 2;
  total_size += 1UL * this->_internal_bonepos_size();
  for (const auto& msg : this->bonepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .userPosition.BFacePos facePos = 3;
  total_size += 1UL * this->_internal_facepos_size();
  for (const auto& msg : this->facepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNeuronPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.CNeuronPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CNeuronPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNeuronPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.CNeuronPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.CNeuronPosition)
    MergeFrom(*source);
  }
}

void CNeuronPosition::MergeFrom(const CNeuronPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.CNeuronPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bonepos_.MergeFrom(from.bonepos_);
  facepos_.MergeFrom(from.facepos_);
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CNeuronPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.CNeuronPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNeuronPosition::CopyFrom(const CNeuronPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.CNeuronPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNeuronPosition::IsInitialized() const {
  return true;
}

void CNeuronPosition::InternalSwap(CNeuronPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bonepos_.InternalSwap(&other->bonepos_);
  facepos_.InternalSwap(&other->facepos_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNeuronPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NeuronPosition::InitAsDefaultInstance() {
}
class NeuronPosition::_Internal {
 public:
};

NeuronPosition::NeuronPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.NeuronPosition)
}
NeuronPosition::NeuronPosition(const NeuronPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bonepos_(from.bonepos_),
      facepos_(from.facepos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:userPosition.NeuronPosition)
}

void NeuronPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NeuronPosition_userPosition_2eproto.base);
  uid_ = 0;
}

NeuronPosition::~NeuronPosition() {
  // @@protoc_insertion_point(destructor:userPosition.NeuronPosition)
  SharedDtor();
}

void NeuronPosition::SharedDtor() {
}

void NeuronPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NeuronPosition& NeuronPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NeuronPosition_userPosition_2eproto.base);
  return *internal_default_instance();
}


void NeuronPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.NeuronPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bonepos_.Clear();
  facepos_.Clear();
  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* NeuronPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .userPosition.BBonePos bonePos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bonepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .userPosition.BFacePos facePos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_facepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NeuronPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.NeuronPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // repeated .userPosition.BBonePos bonePos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bonepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bonepos(i), target, stream);
  }

  // repeated .userPosition.BFacePos facePos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_facepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_facepos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.NeuronPosition)
  return target;
}

size_t NeuronPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.NeuronPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userPosition.BBonePos bonePos = 2;
  total_size += 1UL * this->_internal_bonepos_size();
  for (const auto& msg : this->bonepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .userPosition.BFacePos facePos = 3;
  total_size += 1UL * this->_internal_facepos_size();
  for (const auto& msg : this->facepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NeuronPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.NeuronPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const NeuronPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NeuronPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.NeuronPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.NeuronPosition)
    MergeFrom(*source);
  }
}

void NeuronPosition::MergeFrom(const NeuronPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.NeuronPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bonepos_.MergeFrom(from.bonepos_);
  facepos_.MergeFrom(from.facepos_);
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void NeuronPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.NeuronPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeuronPosition::CopyFrom(const NeuronPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.NeuronPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeuronPosition::IsInitialized() const {
  return true;
}

void NeuronPosition::InternalSwap(NeuronPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bonepos_.InternalSwap(&other->bonepos_);
  facepos_.InternalSwap(&other->facepos_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NeuronPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNeuronPosition::InitAsDefaultInstance() {
}
class SNeuronPosition::_Internal {
 public:
};

SNeuronPosition::SNeuronPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.SNeuronPosition)
}
SNeuronPosition::SNeuronPosition(const SNeuronPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      neuronposlist_(from.neuronposlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:userPosition.SNeuronPosition)
}

void SNeuronPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNeuronPosition_userPosition_2eproto.base);
}

SNeuronPosition::~SNeuronPosition() {
  // @@protoc_insertion_point(destructor:userPosition.SNeuronPosition)
  SharedDtor();
}

void SNeuronPosition::SharedDtor() {
}

void SNeuronPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNeuronPosition& SNeuronPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNeuronPosition_userPosition_2eproto.base);
  return *internal_default_instance();
}


void SNeuronPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.SNeuronPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neuronposlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SNeuronPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .userPosition.NeuronPosition neuronPosList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neuronposlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNeuronPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.SNeuronPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .userPosition.NeuronPosition neuronPosList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_neuronposlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_neuronposlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.SNeuronPosition)
  return target;
}

size_t SNeuronPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.SNeuronPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userPosition.NeuronPosition neuronPosList = 1;
  total_size += 1UL * this->_internal_neuronposlist_size();
  for (const auto& msg : this->neuronposlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNeuronPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.SNeuronPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SNeuronPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNeuronPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.SNeuronPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.SNeuronPosition)
    MergeFrom(*source);
  }
}

void SNeuronPosition::MergeFrom(const SNeuronPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.SNeuronPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neuronposlist_.MergeFrom(from.neuronposlist_);
}

void SNeuronPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.SNeuronPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNeuronPosition::CopyFrom(const SNeuronPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.SNeuronPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNeuronPosition::IsInitialized() const {
  return true;
}

void SNeuronPosition::InternalSwap(SNeuronPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  neuronposlist_.InternalSwap(&other->neuronposlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNeuronPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BVrBonePos::InitAsDefaultInstance() {
  ::userPosition::_BVrBonePos_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition*>(
      ::position::BPosition::internal_default_instance());
}
class BVrBonePos::_Internal {
 public:
  static const ::position::BPosition& position(const BVrBonePos* msg);
};

const ::position::BPosition&
BVrBonePos::_Internal::position(const BVrBonePos* msg) {
  return *msg->position_;
}
void BVrBonePos::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
BVrBonePos::BVrBonePos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.BVrBonePos)
}
BVrBonePos::BVrBonePos(const BVrBonePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  boneid_ = from.boneid_;
  // @@protoc_insertion_point(copy_constructor:userPosition.BVrBonePos)
}

void BVrBonePos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BVrBonePos_userPosition_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boneid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(boneid_));
}

BVrBonePos::~BVrBonePos() {
  // @@protoc_insertion_point(destructor:userPosition.BVrBonePos)
  SharedDtor();
}

void BVrBonePos::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void BVrBonePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BVrBonePos& BVrBonePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BVrBonePos_userPosition_2eproto.base);
  return *internal_default_instance();
}


void BVrBonePos::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.BVrBonePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  boneid_ = 0;
  _internal_metadata_.Clear();
}

const char* BVrBonePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boneId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .position.BPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BVrBonePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.BVrBonePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boneId = 1;
  if (this->boneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boneid(), target);
  }

  // .position.BPosition position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.BVrBonePos)
  return target;
}

size_t BVrBonePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.BVrBonePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .position.BPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 boneId = 1;
  if (this->boneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BVrBonePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.BVrBonePos)
  GOOGLE_DCHECK_NE(&from, this);
  const BVrBonePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BVrBonePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.BVrBonePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.BVrBonePos)
    MergeFrom(*source);
  }
}

void BVrBonePos::MergeFrom(const BVrBonePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.BVrBonePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition::MergeFrom(from._internal_position());
  }
  if (from.boneid() != 0) {
    _internal_set_boneid(from._internal_boneid());
  }
}

void BVrBonePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.BVrBonePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BVrBonePos::CopyFrom(const BVrBonePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.BVrBonePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BVrBonePos::IsInitialized() const {
  return true;
}

void BVrBonePos::InternalSwap(BVrBonePos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(boneid_, other->boneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BVrBonePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CVrPosition::InitAsDefaultInstance() {
}
class CVrPosition::_Internal {
 public:
};

CVrPosition::CVrPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.CVrPosition)
}
CVrPosition::CVrPosition(const CVrPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bonepos_(from.bonepos_),
      facepos_(from.facepos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:userPosition.CVrPosition)
}

void CVrPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CVrPosition_userPosition_2eproto.base);
  uid_ = 0;
}

CVrPosition::~CVrPosition() {
  // @@protoc_insertion_point(destructor:userPosition.CVrPosition)
  SharedDtor();
}

void CVrPosition::SharedDtor() {
}

void CVrPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVrPosition& CVrPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CVrPosition_userPosition_2eproto.base);
  return *internal_default_instance();
}


void CVrPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.CVrPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bonepos_.Clear();
  facepos_.Clear();
  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CVrPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .userPosition.BVrBonePos bonePos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bonepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .userPosition.BFacePos facePos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_facepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVrPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.CVrPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // repeated .userPosition.BVrBonePos bonePos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bonepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bonepos(i), target, stream);
  }

  // repeated .userPosition.BFacePos facePos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_facepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_facepos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.CVrPosition)
  return target;
}

size_t CVrPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.CVrPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userPosition.BVrBonePos bonePos = 2;
  total_size += 1UL * this->_internal_bonepos_size();
  for (const auto& msg : this->bonepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .userPosition.BFacePos facePos = 3;
  total_size += 1UL * this->_internal_facepos_size();
  for (const auto& msg : this->facepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVrPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.CVrPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CVrPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVrPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.CVrPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.CVrPosition)
    MergeFrom(*source);
  }
}

void CVrPosition::MergeFrom(const CVrPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.CVrPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bonepos_.MergeFrom(from.bonepos_);
  facepos_.MergeFrom(from.facepos_);
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CVrPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.CVrPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVrPosition::CopyFrom(const CVrPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.CVrPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVrPosition::IsInitialized() const {
  return true;
}

void CVrPosition::InternalSwap(CVrPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bonepos_.InternalSwap(&other->bonepos_);
  facepos_.InternalSwap(&other->facepos_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVrPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VrPosition::InitAsDefaultInstance() {
}
class VrPosition::_Internal {
 public:
};

VrPosition::VrPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.VrPosition)
}
VrPosition::VrPosition(const VrPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bonepos_(from.bonepos_),
      facepos_(from.facepos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:userPosition.VrPosition)
}

void VrPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VrPosition_userPosition_2eproto.base);
  uid_ = 0;
}

VrPosition::~VrPosition() {
  // @@protoc_insertion_point(destructor:userPosition.VrPosition)
  SharedDtor();
}

void VrPosition::SharedDtor() {
}

void VrPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VrPosition& VrPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VrPosition_userPosition_2eproto.base);
  return *internal_default_instance();
}


void VrPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.VrPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bonepos_.Clear();
  facepos_.Clear();
  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* VrPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .userPosition.BVrBonePos bonePos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bonepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .userPosition.BFacePos facePos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_facepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VrPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.VrPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // repeated .userPosition.BVrBonePos bonePos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bonepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bonepos(i), target, stream);
  }

  // repeated .userPosition.BFacePos facePos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_facepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_facepos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.VrPosition)
  return target;
}

size_t VrPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.VrPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userPosition.BVrBonePos bonePos = 2;
  total_size += 1UL * this->_internal_bonepos_size();
  for (const auto& msg : this->bonepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .userPosition.BFacePos facePos = 3;
  total_size += 1UL * this->_internal_facepos_size();
  for (const auto& msg : this->facepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VrPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.VrPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const VrPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VrPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.VrPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.VrPosition)
    MergeFrom(*source);
  }
}

void VrPosition::MergeFrom(const VrPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.VrPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bonepos_.MergeFrom(from.bonepos_);
  facepos_.MergeFrom(from.facepos_);
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void VrPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.VrPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VrPosition::CopyFrom(const VrPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.VrPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VrPosition::IsInitialized() const {
  return true;
}

void VrPosition::InternalSwap(VrPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bonepos_.InternalSwap(&other->bonepos_);
  facepos_.InternalSwap(&other->facepos_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VrPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SVrPosition::InitAsDefaultInstance() {
}
class SVrPosition::_Internal {
 public:
};

SVrPosition::SVrPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userPosition.SVrPosition)
}
SVrPosition::SVrPosition(const SVrPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vrpostlist_(from.vrpostlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:userPosition.SVrPosition)
}

void SVrPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SVrPosition_userPosition_2eproto.base);
}

SVrPosition::~SVrPosition() {
  // @@protoc_insertion_point(destructor:userPosition.SVrPosition)
  SharedDtor();
}

void SVrPosition::SharedDtor() {
}

void SVrPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SVrPosition& SVrPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SVrPosition_userPosition_2eproto.base);
  return *internal_default_instance();
}


void SVrPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:userPosition.SVrPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrpostlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SVrPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .userPosition.VrPosition vrPostList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vrpostlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SVrPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userPosition.SVrPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .userPosition.VrPosition vrPostList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vrpostlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vrpostlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userPosition.SVrPosition)
  return target;
}

size_t SVrPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userPosition.SVrPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userPosition.VrPosition vrPostList = 1;
  total_size += 1UL * this->_internal_vrpostlist_size();
  for (const auto& msg : this->vrpostlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SVrPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userPosition.SVrPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SVrPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SVrPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userPosition.SVrPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userPosition.SVrPosition)
    MergeFrom(*source);
  }
}

void SVrPosition::MergeFrom(const SVrPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userPosition.SVrPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vrpostlist_.MergeFrom(from.vrpostlist_);
}

void SVrPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userPosition.SVrPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SVrPosition::CopyFrom(const SVrPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userPosition.SVrPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVrPosition::IsInitialized() const {
  return true;
}

void SVrPosition::InternalSwap(SVrPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vrpostlist_.InternalSwap(&other->vrpostlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SVrPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userPosition
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userPosition::CUserPosition* Arena::CreateMaybeMessage< ::userPosition::CUserPosition >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::CUserPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::SUserPosition* Arena::CreateMaybeMessage< ::userPosition::SUserPosition >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::SUserPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::UPosition* Arena::CreateMaybeMessage< ::userPosition::UPosition >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::UPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::CNeuronConnect* Arena::CreateMaybeMessage< ::userPosition::CNeuronConnect >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::CNeuronConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::SNeuronConnect* Arena::CreateMaybeMessage< ::userPosition::SNeuronConnect >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::SNeuronConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::BBonePos* Arena::CreateMaybeMessage< ::userPosition::BBonePos >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::BBonePos >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::BFacePos* Arena::CreateMaybeMessage< ::userPosition::BFacePos >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::BFacePos >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::CNeuronPosition* Arena::CreateMaybeMessage< ::userPosition::CNeuronPosition >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::CNeuronPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::NeuronPosition* Arena::CreateMaybeMessage< ::userPosition::NeuronPosition >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::NeuronPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::SNeuronPosition* Arena::CreateMaybeMessage< ::userPosition::SNeuronPosition >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::SNeuronPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::BVrBonePos* Arena::CreateMaybeMessage< ::userPosition::BVrBonePos >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::BVrBonePos >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::CVrPosition* Arena::CreateMaybeMessage< ::userPosition::CVrPosition >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::CVrPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::VrPosition* Arena::CreateMaybeMessage< ::userPosition::VrPosition >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::VrPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::userPosition::SVrPosition* Arena::CreateMaybeMessage< ::userPosition::SVrPosition >(Arena* arena) {
  return Arena::CreateInternal< ::userPosition::SVrPosition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
