// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: businessCard.proto

#include "businessCard.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_businessCard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBusinessCardInfo_businessCard_2eproto;
namespace businessCard {
class CCardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCardInfo> _instance;
} _CCardInfo_default_instance_;
class SCardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCardInfo> _instance;
} _SCardInfo_default_instance_;
class CRenameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRename> _instance;
} _CRename_default_instance_;
class SRenameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRename> _instance;
} _SRename_default_instance_;
class SCardTransferBtnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCardTransferBtn> _instance;
} _SCardTransferBtn_default_instance_;
class SCardTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCardTransfer> _instance;
} _SCardTransfer_default_instance_;
class CBusinessCardSaveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CBusinessCardSave> _instance;
} _CBusinessCardSave_default_instance_;
class SBusinessCardSaveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBusinessCardSave> _instance;
} _SBusinessCardSave_default_instance_;
class BBusinessCardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BBusinessCardInfo> _instance;
} _BBusinessCardInfo_default_instance_;
class CBusinessCardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CBusinessCardList> _instance;
} _CBusinessCardList_default_instance_;
class SBusinessCardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBusinessCardList> _instance;
} _SBusinessCardList_default_instance_;
}  // namespace businessCard
static void InitDefaultsscc_info_BBusinessCardInfo_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_BBusinessCardInfo_default_instance_;
    new (ptr) ::businessCard::BBusinessCardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::BBusinessCardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBusinessCardInfo_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BBusinessCardInfo_businessCard_2eproto}, {}};

static void InitDefaultsscc_info_CBusinessCardList_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_CBusinessCardList_default_instance_;
    new (ptr) ::businessCard::CBusinessCardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::CBusinessCardList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CBusinessCardList_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CBusinessCardList_businessCard_2eproto}, {}};

static void InitDefaultsscc_info_CBusinessCardSave_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_CBusinessCardSave_default_instance_;
    new (ptr) ::businessCard::CBusinessCardSave();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::CBusinessCardSave::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CBusinessCardSave_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CBusinessCardSave_businessCard_2eproto}, {}};

static void InitDefaultsscc_info_CCardInfo_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_CCardInfo_default_instance_;
    new (ptr) ::businessCard::CCardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::CCardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCardInfo_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCardInfo_businessCard_2eproto}, {}};

static void InitDefaultsscc_info_CRename_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_CRename_default_instance_;
    new (ptr) ::businessCard::CRename();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::CRename::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRename_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRename_businessCard_2eproto}, {}};

static void InitDefaultsscc_info_SBusinessCardList_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_SBusinessCardList_default_instance_;
    new (ptr) ::businessCard::SBusinessCardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::SBusinessCardList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SBusinessCardList_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SBusinessCardList_businessCard_2eproto}, {
      &scc_info_BBusinessCardInfo_businessCard_2eproto.base,}};

static void InitDefaultsscc_info_SBusinessCardSave_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_SBusinessCardSave_default_instance_;
    new (ptr) ::businessCard::SBusinessCardSave();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::SBusinessCardSave::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SBusinessCardSave_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SBusinessCardSave_businessCard_2eproto}, {
      &scc_info_BBusinessCardInfo_businessCard_2eproto.base,}};

static void InitDefaultsscc_info_SCardInfo_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_SCardInfo_default_instance_;
    new (ptr) ::businessCard::SCardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::SCardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCardInfo_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCardInfo_businessCard_2eproto}, {}};

static void InitDefaultsscc_info_SCardTransfer_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_SCardTransfer_default_instance_;
    new (ptr) ::businessCard::SCardTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::SCardTransfer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCardTransfer_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCardTransfer_businessCard_2eproto}, {}};

static void InitDefaultsscc_info_SCardTransferBtn_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_SCardTransferBtn_default_instance_;
    new (ptr) ::businessCard::SCardTransferBtn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::SCardTransferBtn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCardTransferBtn_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCardTransferBtn_businessCard_2eproto}, {}};

static void InitDefaultsscc_info_SRename_businessCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::businessCard::_SRename_default_instance_;
    new (ptr) ::businessCard::SRename();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::businessCard::SRename::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRename_businessCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRename_businessCard_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_businessCard_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_businessCard_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_businessCard_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_businessCard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::CCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::CCardInfo, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, followcount_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, fanscount_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, isfollow_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, headpic_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, visitcount_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, houseid_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, seq_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, spacename_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, identifierid_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, phone_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, isin_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, registereddays_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, visitnumber_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, offlinestatus_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, inuid_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, sign_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, avatarkey_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardInfo, housetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::CRename, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::CRename, nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::SRename, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::SRename, isrenametrue_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SRename, nickname_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SRename, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardTransferBtn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardTransferBtn, isshow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::SCardTransfer, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::CBusinessCardSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::CBusinessCardSave, orgname_),
  PROTOBUF_FIELD_OFFSET(::businessCard::CBusinessCardSave, title_),
  PROTOBUF_FIELD_OFFSET(::businessCard::CBusinessCardSave, email_),
  PROTOBUF_FIELD_OFFSET(::businessCard::CBusinessCardSave, nameofparticipants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::SBusinessCardSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::SBusinessCardSave, state_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SBusinessCardSave, msg_),
  PROTOBUF_FIELD_OFFSET(::businessCard::SBusinessCardSave, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::BBusinessCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::BBusinessCardInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::businessCard::BBusinessCardInfo, orgname_),
  PROTOBUF_FIELD_OFFSET(::businessCard::BBusinessCardInfo, title_),
  PROTOBUF_FIELD_OFFSET(::businessCard::BBusinessCardInfo, email_),
  PROTOBUF_FIELD_OFFSET(::businessCard::BBusinessCardInfo, nameofparticipants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::CBusinessCardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::CBusinessCardList, uids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::businessCard::SBusinessCardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::businessCard::SBusinessCardList, list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::businessCard::CCardInfo)},
  { 6, -1, sizeof(::businessCard::SCardInfo)},
  { 31, -1, sizeof(::businessCard::CRename)},
  { 37, -1, sizeof(::businessCard::SRename)},
  { 45, -1, sizeof(::businessCard::SCardTransferBtn)},
  { 51, -1, sizeof(::businessCard::SCardTransfer)},
  { 57, -1, sizeof(::businessCard::CBusinessCardSave)},
  { 66, -1, sizeof(::businessCard::SBusinessCardSave)},
  { 74, -1, sizeof(::businessCard::BBusinessCardInfo)},
  { 84, -1, sizeof(::businessCard::CBusinessCardList)},
  { 90, -1, sizeof(::businessCard::SBusinessCardList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_CCardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_SCardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_CRename_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_SRename_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_SCardTransferBtn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_SCardTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_CBusinessCardSave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_SBusinessCardSave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_BBusinessCardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_CBusinessCardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::businessCard::_SBusinessCardList_default_instance_),
};

const char descriptor_table_protodef_businessCard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022businessCard.proto\022\014businessCard\"\030\n\tCC"
  "ardInfo\022\013\n\003uid\030\001 \001(\005\"\360\002\n\tSCardInfo\022\013\n\003ui"
  "d\030\001 \001(\005\022\023\n\013followCount\030\002 \001(\005\022\021\n\tfansCoun"
  "t\030\003 \001(\005\022\020\n\010isFollow\030\004 \001(\010\022\014\n\004nick\030\005 \001(\t\022"
  "\017\n\007headPic\030\006 \001(\t\022\022\n\nvisitCount\030\007 \001(\005\022\017\n\007"
  "houseId\030\010 \001(\005\022\013\n\003seq\030\t \001(\005\022\021\n\tspaceName\030"
  "\n \001(\t\022\024\n\014identifierId\030\013 \001(\t\022\r\n\005phone\030\014 \001"
  "(\t\022\014\n\004isIn\030\r \001(\010\022\026\n\016registeredDays\030\016 \001(\005"
  "\022\023\n\013visitNumber\030\017 \001(\005\022\025\n\rofflineStatus\030\020"
  " \001(\t\022\r\n\005inUid\030\021 \001(\t\022\014\n\004sign\030\022 \001(\t\022\021\n\tava"
  "tarKey\030\023 \001(\005\022\021\n\thouseType\030\024 \001(\005\"\033\n\007CRena"
  "me\022\020\n\010nickName\030\001 \001(\t\">\n\007SRename\022\024\n\014isRen"
  "ameTrue\030\001 \001(\005\022\020\n\010nickName\030\002 \001(\t\022\013\n\003uid\030\003"
  " \001(\005\"\"\n\020SCardTransferBtn\022\016\n\006isShow\030\001 \001(\005"
  "\"\037\n\rSCardTransfer\022\016\n\006status\030\001 \001(\005\"^\n\021CBu"
  "sinessCardSave\022\017\n\007orgName\030\001 \001(\t\022\r\n\005title"
  "\030\002 \001(\t\022\r\n\005email\030\003 \001(\t\022\032\n\022nameOfParticipa"
  "nts\030\004 \001(\t\"^\n\021SBusinessCardSave\022\r\n\005state\030"
  "\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022-\n\004info\030\003 \001(\0132\037.busin"
  "essCard.BBusinessCardInfo\"k\n\021BBusinessCa"
  "rdInfo\022\013\n\003uid\030\001 \001(\005\022\017\n\007orgName\030\002 \001(\t\022\r\n\005"
  "title\030\003 \001(\t\022\r\n\005email\030\004 \001(\t\022\032\n\022nameOfPart"
  "icipants\030\005 \001(\t\"!\n\021CBusinessCardList\022\014\n\004u"
  "ids\030\001 \003(\005\"B\n\021SBusinessCardList\022-\n\004list\030\001"
  " \003(\0132\037.businessCard.BBusinessCardInfoB/\n"
  "\030com.dayou.space.protobufB\014BusinessCardZ"
  "\005./;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_businessCard_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_businessCard_2eproto_sccs[11] = {
  &scc_info_BBusinessCardInfo_businessCard_2eproto.base,
  &scc_info_CBusinessCardList_businessCard_2eproto.base,
  &scc_info_CBusinessCardSave_businessCard_2eproto.base,
  &scc_info_CCardInfo_businessCard_2eproto.base,
  &scc_info_CRename_businessCard_2eproto.base,
  &scc_info_SBusinessCardList_businessCard_2eproto.base,
  &scc_info_SBusinessCardSave_businessCard_2eproto.base,
  &scc_info_SCardInfo_businessCard_2eproto.base,
  &scc_info_SCardTransfer_businessCard_2eproto.base,
  &scc_info_SCardTransferBtn_businessCard_2eproto.base,
  &scc_info_SRename_businessCard_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_businessCard_2eproto_once;
static bool descriptor_table_businessCard_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_businessCard_2eproto = {
  &descriptor_table_businessCard_2eproto_initialized, descriptor_table_protodef_businessCard_2eproto, "businessCard.proto", 1054,
  &descriptor_table_businessCard_2eproto_once, descriptor_table_businessCard_2eproto_sccs, descriptor_table_businessCard_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_businessCard_2eproto::offsets,
  file_level_metadata_businessCard_2eproto, 11, file_level_enum_descriptors_businessCard_2eproto, file_level_service_descriptors_businessCard_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_businessCard_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_businessCard_2eproto), true);
namespace businessCard {

// ===================================================================

void CCardInfo::InitAsDefaultInstance() {
}
class CCardInfo::_Internal {
 public:
};

CCardInfo::CCardInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.CCardInfo)
}
CCardInfo::CCardInfo(const CCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:businessCard.CCardInfo)
}

void CCardInfo::SharedCtor() {
  uid_ = 0;
}

CCardInfo::~CCardInfo() {
  // @@protoc_insertion_point(destructor:businessCard.CCardInfo)
  SharedDtor();
}

void CCardInfo::SharedDtor() {
}

void CCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCardInfo& CCardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCardInfo_businessCard_2eproto.base);
  return *internal_default_instance();
}


void CCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.CCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CCardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.CCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.CCardInfo)
  return target;
}

size_t CCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.CCardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.CCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CCardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.CCardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.CCardInfo)
    MergeFrom(*source);
  }
}

void CCardInfo::MergeFrom(const CCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.CCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CCardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.CCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCardInfo::CopyFrom(const CCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.CCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCardInfo::IsInitialized() const {
  return true;
}

void CCardInfo::InternalSwap(CCardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCardInfo::InitAsDefaultInstance() {
}
class SCardInfo::_Internal {
 public:
};

SCardInfo::SCardInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.SCardInfo)
}
SCardInfo::SCardInfo(const SCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headpic().empty()) {
    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacename().empty()) {
    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  identifierid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identifierid().empty()) {
    identifierid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifierid_);
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  offlinestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offlinestatus().empty()) {
    offlinestatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.offlinestatus_);
  }
  inuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inuid().empty()) {
    inuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inuid_);
  }
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sign().empty()) {
    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&housetype_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(housetype_));
  // @@protoc_insertion_point(copy_constructor:businessCard.SCardInfo)
}

void SCardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCardInfo_businessCard_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifierid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offlinestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(housetype_));
}

SCardInfo::~SCardInfo() {
  // @@protoc_insertion_point(destructor:businessCard.SCardInfo)
  SharedDtor();
}

void SCardInfo::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifierid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offlinestatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCardInfo& SCardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCardInfo_businessCard_2eproto.base);
  return *internal_default_instance();
}


void SCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.SCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifierid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offlinestatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(housetype_));
  _internal_metadata_.Clear();
}

const char* SCardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 followCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          followcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fansCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fanscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFollow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isfollow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SCardInfo.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headPic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_headpic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SCardInfo.headPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 visitCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          visitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_spacename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SCardInfo.spaceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string identifierId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_identifierid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SCardInfo.identifierId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SCardInfo.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isIn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          isin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 registeredDays = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          registereddays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 visitNumber = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          visitnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string offlineStatus = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_offlinestatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SCardInfo.offlineStatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inUid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_inuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SCardInfo.inUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sign = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SCardInfo.sign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarKey = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseType = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          housetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.SCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 followCount = 2;
  if (this->followcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_followcount(), target);
  }

  // int32 fansCount = 3;
  if (this->fanscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fanscount(), target);
  }

  // bool isFollow = 4;
  if (this->isfollow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isfollow(), target);
  }

  // string nick = 5;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SCardInfo.nick");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nick(), target);
  }

  // string headPic = 6;
  if (this->headpic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headpic().data(), static_cast<int>(this->_internal_headpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SCardInfo.headPic");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_headpic(), target);
  }

  // int32 visitCount = 7;
  if (this->visitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_visitcount(), target);
  }

  // int32 houseId = 8;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_houseid(), target);
  }

  // int32 seq = 9;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_seq(), target);
  }

  // string spaceName = 10;
  if (this->spacename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacename().data(), static_cast<int>(this->_internal_spacename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SCardInfo.spaceName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_spacename(), target);
  }

  // string identifierId = 11;
  if (this->identifierid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifierid().data(), static_cast<int>(this->_internal_identifierid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SCardInfo.identifierId");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_identifierid(), target);
  }

  // string phone = 12;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SCardInfo.phone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_phone(), target);
  }

  // bool isIn = 13;
  if (this->isin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_isin(), target);
  }

  // int32 registeredDays = 14;
  if (this->registereddays() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_registereddays(), target);
  }

  // int32 visitNumber = 15;
  if (this->visitnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_visitnumber(), target);
  }

  // string offlineStatus = 16;
  if (this->offlinestatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offlinestatus().data(), static_cast<int>(this->_internal_offlinestatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SCardInfo.offlineStatus");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_offlinestatus(), target);
  }

  // string inUid = 17;
  if (this->inuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inuid().data(), static_cast<int>(this->_internal_inuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SCardInfo.inUid");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_inuid(), target);
  }

  // string sign = 18;
  if (this->sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign().data(), static_cast<int>(this->_internal_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SCardInfo.sign");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_sign(), target);
  }

  // int32 avatarKey = 19;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_avatarkey(), target);
  }

  // int32 houseType = 20;
  if (this->housetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_housetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.SCardInfo)
  return target;
}

size_t SCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.SCardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 5;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string headPic = 6;
  if (this->headpic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headpic());
  }

  // string spaceName = 10;
  if (this->spacename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacename());
  }

  // string identifierId = 11;
  if (this->identifierid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifierid());
  }

  // string phone = 12;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string offlineStatus = 16;
  if (this->offlinestatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offlinestatus());
  }

  // string inUid = 17;
  if (this->inuid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inuid());
  }

  // string sign = 18;
  if (this->sign().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sign());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 followCount = 2;
  if (this->followcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_followcount());
  }

  // int32 fansCount = 3;
  if (this->fanscount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fanscount());
  }

  // int32 visitCount = 7;
  if (this->visitcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_visitcount());
  }

  // int32 houseId = 8;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // bool isFollow = 4;
  if (this->isfollow() != 0) {
    total_size += 1 + 1;
  }

  // bool isIn = 13;
  if (this->isin() != 0) {
    total_size += 1 + 1;
  }

  // int32 seq = 9;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seq());
  }

  // int32 registeredDays = 14;
  if (this->registereddays() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_registereddays());
  }

  // int32 visitNumber = 15;
  if (this->visitnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_visitnumber());
  }

  // int32 avatarKey = 19;
  if (this->avatarkey() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  // int32 houseType = 20;
  if (this->housetype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_housetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.SCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.SCardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.SCardInfo)
    MergeFrom(*source);
  }
}

void SCardInfo::MergeFrom(const SCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.SCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.headpic().size() > 0) {

    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  if (from.spacename().size() > 0) {

    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  if (from.identifierid().size() > 0) {

    identifierid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifierid_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.offlinestatus().size() > 0) {

    offlinestatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.offlinestatus_);
  }
  if (from.inuid().size() > 0) {

    inuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inuid_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.followcount() != 0) {
    _internal_set_followcount(from._internal_followcount());
  }
  if (from.fanscount() != 0) {
    _internal_set_fanscount(from._internal_fanscount());
  }
  if (from.visitcount() != 0) {
    _internal_set_visitcount(from._internal_visitcount());
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.isfollow() != 0) {
    _internal_set_isfollow(from._internal_isfollow());
  }
  if (from.isin() != 0) {
    _internal_set_isin(from._internal_isin());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.registereddays() != 0) {
    _internal_set_registereddays(from._internal_registereddays());
  }
  if (from.visitnumber() != 0) {
    _internal_set_visitnumber(from._internal_visitnumber());
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
  if (from.housetype() != 0) {
    _internal_set_housetype(from._internal_housetype());
  }
}

void SCardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.SCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCardInfo::CopyFrom(const SCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.SCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCardInfo::IsInitialized() const {
  return true;
}

void SCardInfo::InternalSwap(SCardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headpic_.Swap(&other->headpic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spacename_.Swap(&other->spacename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  identifierid_.Swap(&other->identifierid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  offlinestatus_.Swap(&other->offlinestatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inuid_.Swap(&other->inuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_.Swap(&other->sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(followcount_, other->followcount_);
  swap(fanscount_, other->fanscount_);
  swap(visitcount_, other->visitcount_);
  swap(houseid_, other->houseid_);
  swap(isfollow_, other->isfollow_);
  swap(isin_, other->isin_);
  swap(seq_, other->seq_);
  swap(registereddays_, other->registereddays_);
  swap(visitnumber_, other->visitnumber_);
  swap(avatarkey_, other->avatarkey_);
  swap(housetype_, other->housetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CRename::InitAsDefaultInstance() {
}
class CRename::_Internal {
 public:
};

CRename::CRename()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.CRename)
}
CRename::CRename(const CRename& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  // @@protoc_insertion_point(copy_constructor:businessCard.CRename)
}

void CRename::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CRename_businessCard_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRename::~CRename() {
  // @@protoc_insertion_point(destructor:businessCard.CRename)
  SharedDtor();
}

void CRename::SharedDtor() {
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRename::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRename& CRename::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRename_businessCard_2eproto.base);
  return *internal_default_instance();
}


void CRename::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.CRename)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CRename::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nickName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.CRename.nickName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRename::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.CRename)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickName = 1;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.CRename.nickName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.CRename)
  return target;
}

size_t CRename::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.CRename)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickName = 1;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRename::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.CRename)
  GOOGLE_DCHECK_NE(&from, this);
  const CRename* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRename>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.CRename)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.CRename)
    MergeFrom(*source);
  }
}

void CRename::MergeFrom(const CRename& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.CRename)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
}

void CRename::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.CRename)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRename::CopyFrom(const CRename& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.CRename)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRename::IsInitialized() const {
  return true;
}

void CRename::InternalSwap(CRename* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRename::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRename::InitAsDefaultInstance() {
}
class SRename::_Internal {
 public:
};

SRename::SRename()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.SRename)
}
SRename::SRename(const SRename& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&isrenametrue_, &from.isrenametrue_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&isrenametrue_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:businessCard.SRename)
}

void SRename::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRename_businessCard_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&isrenametrue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&isrenametrue_)) + sizeof(uid_));
}

SRename::~SRename() {
  // @@protoc_insertion_point(destructor:businessCard.SRename)
  SharedDtor();
}

void SRename::SharedDtor() {
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SRename::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRename& SRename::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRename_businessCard_2eproto.base);
  return *internal_default_instance();
}


void SRename::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.SRename)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&isrenametrue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&isrenametrue_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SRename::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 isRenameTrue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isrenametrue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SRename.nickName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRename::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.SRename)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isRenameTrue = 1;
  if (this->isrenametrue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_isrenametrue(), target);
  }

  // string nickName = 2;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SRename.nickName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.SRename)
  return target;
}

size_t SRename::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.SRename)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickName = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 isRenameTrue = 1;
  if (this->isrenametrue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isrenametrue());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRename::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.SRename)
  GOOGLE_DCHECK_NE(&from, this);
  const SRename* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRename>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.SRename)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.SRename)
    MergeFrom(*source);
  }
}

void SRename::MergeFrom(const SRename& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.SRename)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.isrenametrue() != 0) {
    _internal_set_isrenametrue(from._internal_isrenametrue());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SRename::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.SRename)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRename::CopyFrom(const SRename& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.SRename)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRename::IsInitialized() const {
  return true;
}

void SRename::InternalSwap(SRename* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(isrenametrue_, other->isrenametrue_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRename::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCardTransferBtn::InitAsDefaultInstance() {
}
class SCardTransferBtn::_Internal {
 public:
};

SCardTransferBtn::SCardTransferBtn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.SCardTransferBtn)
}
SCardTransferBtn::SCardTransferBtn(const SCardTransferBtn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isshow_ = from.isshow_;
  // @@protoc_insertion_point(copy_constructor:businessCard.SCardTransferBtn)
}

void SCardTransferBtn::SharedCtor() {
  isshow_ = 0;
}

SCardTransferBtn::~SCardTransferBtn() {
  // @@protoc_insertion_point(destructor:businessCard.SCardTransferBtn)
  SharedDtor();
}

void SCardTransferBtn::SharedDtor() {
}

void SCardTransferBtn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCardTransferBtn& SCardTransferBtn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCardTransferBtn_businessCard_2eproto.base);
  return *internal_default_instance();
}


void SCardTransferBtn::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.SCardTransferBtn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isshow_ = 0;
  _internal_metadata_.Clear();
}

const char* SCardTransferBtn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 isShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCardTransferBtn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.SCardTransferBtn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isShow = 1;
  if (this->isshow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_isshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.SCardTransferBtn)
  return target;
}

size_t SCardTransferBtn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.SCardTransferBtn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 isShow = 1;
  if (this->isshow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isshow());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCardTransferBtn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.SCardTransferBtn)
  GOOGLE_DCHECK_NE(&from, this);
  const SCardTransferBtn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCardTransferBtn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.SCardTransferBtn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.SCardTransferBtn)
    MergeFrom(*source);
  }
}

void SCardTransferBtn::MergeFrom(const SCardTransferBtn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.SCardTransferBtn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isshow() != 0) {
    _internal_set_isshow(from._internal_isshow());
  }
}

void SCardTransferBtn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.SCardTransferBtn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCardTransferBtn::CopyFrom(const SCardTransferBtn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.SCardTransferBtn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCardTransferBtn::IsInitialized() const {
  return true;
}

void SCardTransferBtn::InternalSwap(SCardTransferBtn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isshow_, other->isshow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCardTransferBtn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCardTransfer::InitAsDefaultInstance() {
}
class SCardTransfer::_Internal {
 public:
};

SCardTransfer::SCardTransfer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.SCardTransfer)
}
SCardTransfer::SCardTransfer(const SCardTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:businessCard.SCardTransfer)
}

void SCardTransfer::SharedCtor() {
  status_ = 0;
}

SCardTransfer::~SCardTransfer() {
  // @@protoc_insertion_point(destructor:businessCard.SCardTransfer)
  SharedDtor();
}

void SCardTransfer::SharedDtor() {
}

void SCardTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCardTransfer& SCardTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCardTransfer_businessCard_2eproto.base);
  return *internal_default_instance();
}


void SCardTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.SCardTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SCardTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCardTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.SCardTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.SCardTransfer)
  return target;
}

size_t SCardTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.SCardTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCardTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.SCardTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const SCardTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCardTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.SCardTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.SCardTransfer)
    MergeFrom(*source);
  }
}

void SCardTransfer::MergeFrom(const SCardTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.SCardTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SCardTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.SCardTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCardTransfer::CopyFrom(const SCardTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.SCardTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCardTransfer::IsInitialized() const {
  return true;
}

void SCardTransfer::InternalSwap(SCardTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCardTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CBusinessCardSave::InitAsDefaultInstance() {
}
class CBusinessCardSave::_Internal {
 public:
};

CBusinessCardSave::CBusinessCardSave()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.CBusinessCardSave)
}
CBusinessCardSave::CBusinessCardSave(const CBusinessCardSave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orgname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orgname().empty()) {
    orgname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orgname_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  nameofparticipants_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nameofparticipants().empty()) {
    nameofparticipants_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nameofparticipants_);
  }
  // @@protoc_insertion_point(copy_constructor:businessCard.CBusinessCardSave)
}

void CBusinessCardSave::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CBusinessCardSave_businessCard_2eproto.base);
  orgname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nameofparticipants_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CBusinessCardSave::~CBusinessCardSave() {
  // @@protoc_insertion_point(destructor:businessCard.CBusinessCardSave)
  SharedDtor();
}

void CBusinessCardSave::SharedDtor() {
  orgname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nameofparticipants_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBusinessCardSave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBusinessCardSave& CBusinessCardSave::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CBusinessCardSave_businessCard_2eproto.base);
  return *internal_default_instance();
}


void CBusinessCardSave::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.CBusinessCardSave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orgname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nameofparticipants_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CBusinessCardSave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orgName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orgname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.CBusinessCardSave.orgName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.CBusinessCardSave.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.CBusinessCardSave.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nameOfParticipants = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nameofparticipants();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.CBusinessCardSave.nameOfParticipants"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBusinessCardSave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.CBusinessCardSave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orgName = 1;
  if (this->orgname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orgname().data(), static_cast<int>(this->_internal_orgname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.CBusinessCardSave.orgName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orgname(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.CBusinessCardSave.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string email = 3;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.CBusinessCardSave.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // string nameOfParticipants = 4;
  if (this->nameofparticipants().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nameofparticipants().data(), static_cast<int>(this->_internal_nameofparticipants().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.CBusinessCardSave.nameOfParticipants");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nameofparticipants(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.CBusinessCardSave)
  return target;
}

size_t CBusinessCardSave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.CBusinessCardSave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orgName = 1;
  if (this->orgname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orgname());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string email = 3;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string nameOfParticipants = 4;
  if (this->nameofparticipants().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nameofparticipants());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBusinessCardSave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.CBusinessCardSave)
  GOOGLE_DCHECK_NE(&from, this);
  const CBusinessCardSave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBusinessCardSave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.CBusinessCardSave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.CBusinessCardSave)
    MergeFrom(*source);
  }
}

void CBusinessCardSave::MergeFrom(const CBusinessCardSave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.CBusinessCardSave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orgname().size() > 0) {

    orgname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orgname_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.nameofparticipants().size() > 0) {

    nameofparticipants_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nameofparticipants_);
  }
}

void CBusinessCardSave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.CBusinessCardSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBusinessCardSave::CopyFrom(const CBusinessCardSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.CBusinessCardSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBusinessCardSave::IsInitialized() const {
  return true;
}

void CBusinessCardSave::InternalSwap(CBusinessCardSave* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orgname_.Swap(&other->orgname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nameofparticipants_.Swap(&other->nameofparticipants_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CBusinessCardSave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBusinessCardSave::InitAsDefaultInstance() {
  ::businessCard::_SBusinessCardSave_default_instance_._instance.get_mutable()->info_ = const_cast< ::businessCard::BBusinessCardInfo*>(
      ::businessCard::BBusinessCardInfo::internal_default_instance());
}
class SBusinessCardSave::_Internal {
 public:
  static const ::businessCard::BBusinessCardInfo& info(const SBusinessCardSave* msg);
};

const ::businessCard::BBusinessCardInfo&
SBusinessCardSave::_Internal::info(const SBusinessCardSave* msg) {
  return *msg->info_;
}
SBusinessCardSave::SBusinessCardSave()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.SBusinessCardSave)
}
SBusinessCardSave::SBusinessCardSave(const SBusinessCardSave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from._internal_has_info()) {
    info_ = new ::businessCard::BBusinessCardInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:businessCard.SBusinessCardSave)
}

void SBusinessCardSave::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBusinessCardSave_businessCard_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&info_)) + sizeof(state_));
}

SBusinessCardSave::~SBusinessCardSave() {
  // @@protoc_insertion_point(destructor:businessCard.SBusinessCardSave)
  SharedDtor();
}

void SBusinessCardSave::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void SBusinessCardSave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBusinessCardSave& SBusinessCardSave::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBusinessCardSave_businessCard_2eproto.base);
  return *internal_default_instance();
}


void SBusinessCardSave::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.SBusinessCardSave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SBusinessCardSave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.SBusinessCardSave.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .businessCard.BBusinessCardInfo info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBusinessCardSave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.SBusinessCardSave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.SBusinessCardSave.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // .businessCard.BBusinessCardInfo info = 3;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.SBusinessCardSave)
  return target;
}

size_t SBusinessCardSave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.SBusinessCardSave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .businessCard.BBusinessCardInfo info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBusinessCardSave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.SBusinessCardSave)
  GOOGLE_DCHECK_NE(&from, this);
  const SBusinessCardSave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBusinessCardSave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.SBusinessCardSave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.SBusinessCardSave)
    MergeFrom(*source);
  }
}

void SBusinessCardSave::MergeFrom(const SBusinessCardSave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.SBusinessCardSave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_info()) {
    _internal_mutable_info()->::businessCard::BBusinessCardInfo::MergeFrom(from._internal_info());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SBusinessCardSave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.SBusinessCardSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBusinessCardSave::CopyFrom(const SBusinessCardSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.SBusinessCardSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBusinessCardSave::IsInitialized() const {
  return true;
}

void SBusinessCardSave::InternalSwap(SBusinessCardSave* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_, other->info_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBusinessCardSave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BBusinessCardInfo::InitAsDefaultInstance() {
}
class BBusinessCardInfo::_Internal {
 public:
};

BBusinessCardInfo::BBusinessCardInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.BBusinessCardInfo)
}
BBusinessCardInfo::BBusinessCardInfo(const BBusinessCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orgname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orgname().empty()) {
    orgname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orgname_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  nameofparticipants_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nameofparticipants().empty()) {
    nameofparticipants_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nameofparticipants_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:businessCard.BBusinessCardInfo)
}

void BBusinessCardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BBusinessCardInfo_businessCard_2eproto.base);
  orgname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nameofparticipants_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
}

BBusinessCardInfo::~BBusinessCardInfo() {
  // @@protoc_insertion_point(destructor:businessCard.BBusinessCardInfo)
  SharedDtor();
}

void BBusinessCardInfo::SharedDtor() {
  orgname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nameofparticipants_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BBusinessCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBusinessCardInfo& BBusinessCardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BBusinessCardInfo_businessCard_2eproto.base);
  return *internal_default_instance();
}


void BBusinessCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.BBusinessCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orgname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nameofparticipants_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* BBusinessCardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orgName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_orgname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.BBusinessCardInfo.orgName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.BBusinessCardInfo.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.BBusinessCardInfo.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nameOfParticipants = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nameofparticipants();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "businessCard.BBusinessCardInfo.nameOfParticipants"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBusinessCardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.BBusinessCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string orgName = 2;
  if (this->orgname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orgname().data(), static_cast<int>(this->_internal_orgname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.BBusinessCardInfo.orgName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_orgname(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.BBusinessCardInfo.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string email = 4;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.BBusinessCardInfo.email");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_email(), target);
  }

  // string nameOfParticipants = 5;
  if (this->nameofparticipants().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nameofparticipants().data(), static_cast<int>(this->_internal_nameofparticipants().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "businessCard.BBusinessCardInfo.nameOfParticipants");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nameofparticipants(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.BBusinessCardInfo)
  return target;
}

size_t BBusinessCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.BBusinessCardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orgName = 2;
  if (this->orgname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orgname());
  }

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string email = 4;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string nameOfParticipants = 5;
  if (this->nameofparticipants().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nameofparticipants());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBusinessCardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.BBusinessCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BBusinessCardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBusinessCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.BBusinessCardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.BBusinessCardInfo)
    MergeFrom(*source);
  }
}

void BBusinessCardInfo::MergeFrom(const BBusinessCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.BBusinessCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orgname().size() > 0) {

    orgname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orgname_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.nameofparticipants().size() > 0) {

    nameofparticipants_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nameofparticipants_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void BBusinessCardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.BBusinessCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBusinessCardInfo::CopyFrom(const BBusinessCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.BBusinessCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBusinessCardInfo::IsInitialized() const {
  return true;
}

void BBusinessCardInfo::InternalSwap(BBusinessCardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orgname_.Swap(&other->orgname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nameofparticipants_.Swap(&other->nameofparticipants_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBusinessCardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CBusinessCardList::InitAsDefaultInstance() {
}
class CBusinessCardList::_Internal {
 public:
};

CBusinessCardList::CBusinessCardList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.CBusinessCardList)
}
CBusinessCardList::CBusinessCardList(const CBusinessCardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:businessCard.CBusinessCardList)
}

void CBusinessCardList::SharedCtor() {
}

CBusinessCardList::~CBusinessCardList() {
  // @@protoc_insertion_point(destructor:businessCard.CBusinessCardList)
  SharedDtor();
}

void CBusinessCardList::SharedDtor() {
}

void CBusinessCardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBusinessCardList& CBusinessCardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CBusinessCardList_businessCard_2eproto.base);
  return *internal_default_instance();
}


void CBusinessCardList::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.CBusinessCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  _internal_metadata_.Clear();
}

const char* CBusinessCardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBusinessCardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.CBusinessCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    int byte_size = _uids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.CBusinessCardList)
  return target;
}

size_t CBusinessCardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.CBusinessCardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBusinessCardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.CBusinessCardList)
  GOOGLE_DCHECK_NE(&from, this);
  const CBusinessCardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBusinessCardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.CBusinessCardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.CBusinessCardList)
    MergeFrom(*source);
  }
}

void CBusinessCardList::MergeFrom(const CBusinessCardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.CBusinessCardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
}

void CBusinessCardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.CBusinessCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBusinessCardList::CopyFrom(const CBusinessCardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.CBusinessCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBusinessCardList::IsInitialized() const {
  return true;
}

void CBusinessCardList::InternalSwap(CBusinessCardList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uids_.InternalSwap(&other->uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBusinessCardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBusinessCardList::InitAsDefaultInstance() {
}
class SBusinessCardList::_Internal {
 public:
};

SBusinessCardList::SBusinessCardList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:businessCard.SBusinessCardList)
}
SBusinessCardList::SBusinessCardList(const SBusinessCardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:businessCard.SBusinessCardList)
}

void SBusinessCardList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBusinessCardList_businessCard_2eproto.base);
}

SBusinessCardList::~SBusinessCardList() {
  // @@protoc_insertion_point(destructor:businessCard.SBusinessCardList)
  SharedDtor();
}

void SBusinessCardList::SharedDtor() {
}

void SBusinessCardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBusinessCardList& SBusinessCardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBusinessCardList_businessCard_2eproto.base);
  return *internal_default_instance();
}


void SBusinessCardList::Clear() {
// @@protoc_insertion_point(message_clear_start:businessCard.SBusinessCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SBusinessCardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .businessCard.BBusinessCardInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBusinessCardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:businessCard.SBusinessCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .businessCard.BBusinessCardInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:businessCard.SBusinessCardList)
  return target;
}

size_t SBusinessCardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:businessCard.SBusinessCardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .businessCard.BBusinessCardInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBusinessCardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:businessCard.SBusinessCardList)
  GOOGLE_DCHECK_NE(&from, this);
  const SBusinessCardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBusinessCardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:businessCard.SBusinessCardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:businessCard.SBusinessCardList)
    MergeFrom(*source);
  }
}

void SBusinessCardList::MergeFrom(const SBusinessCardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:businessCard.SBusinessCardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SBusinessCardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:businessCard.SBusinessCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBusinessCardList::CopyFrom(const SBusinessCardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:businessCard.SBusinessCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBusinessCardList::IsInitialized() const {
  return true;
}

void SBusinessCardList::InternalSwap(SBusinessCardList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBusinessCardList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace businessCard
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::businessCard::CCardInfo* Arena::CreateMaybeMessage< ::businessCard::CCardInfo >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::CCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::SCardInfo* Arena::CreateMaybeMessage< ::businessCard::SCardInfo >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::SCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::CRename* Arena::CreateMaybeMessage< ::businessCard::CRename >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::CRename >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::SRename* Arena::CreateMaybeMessage< ::businessCard::SRename >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::SRename >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::SCardTransferBtn* Arena::CreateMaybeMessage< ::businessCard::SCardTransferBtn >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::SCardTransferBtn >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::SCardTransfer* Arena::CreateMaybeMessage< ::businessCard::SCardTransfer >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::SCardTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::CBusinessCardSave* Arena::CreateMaybeMessage< ::businessCard::CBusinessCardSave >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::CBusinessCardSave >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::SBusinessCardSave* Arena::CreateMaybeMessage< ::businessCard::SBusinessCardSave >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::SBusinessCardSave >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::BBusinessCardInfo* Arena::CreateMaybeMessage< ::businessCard::BBusinessCardInfo >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::BBusinessCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::CBusinessCardList* Arena::CreateMaybeMessage< ::businessCard::CBusinessCardList >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::CBusinessCardList >(arena);
}
template<> PROTOBUF_NOINLINE ::businessCard::SBusinessCardList* Arena::CreateMaybeMessage< ::businessCard::SBusinessCardList >(Arena* arena) {
  return Arena::CreateInternal< ::businessCard::SBusinessCardList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
