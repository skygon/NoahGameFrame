// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skeleton.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skeleton_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skeleton_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skeleton_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skeleton_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skeleton_2eproto;
namespace skeleton {
class CSkeleton;
class CSkeletonDefaultTypeInternal;
extern CSkeletonDefaultTypeInternal _CSkeleton_default_instance_;
class FaceBlendshapInfo;
class FaceBlendshapInfoDefaultTypeInternal;
extern FaceBlendshapInfoDefaultTypeInternal _FaceBlendshapInfo_default_instance_;
class SSkeleton;
class SSkeletonDefaultTypeInternal;
extern SSkeletonDefaultTypeInternal _SSkeleton_default_instance_;
class SingleBoneInfo;
class SingleBoneInfoDefaultTypeInternal;
extern SingleBoneInfoDefaultTypeInternal _SingleBoneInfo_default_instance_;
}  // namespace skeleton
PROTOBUF_NAMESPACE_OPEN
template<> ::skeleton::CSkeleton* Arena::CreateMaybeMessage<::skeleton::CSkeleton>(Arena*);
template<> ::skeleton::FaceBlendshapInfo* Arena::CreateMaybeMessage<::skeleton::FaceBlendshapInfo>(Arena*);
template<> ::skeleton::SSkeleton* Arena::CreateMaybeMessage<::skeleton::SSkeleton>(Arena*);
template<> ::skeleton::SingleBoneInfo* Arena::CreateMaybeMessage<::skeleton::SingleBoneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skeleton {

// ===================================================================

class SingleBoneInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skeleton.SingleBoneInfo) */ {
 public:
  SingleBoneInfo();
  virtual ~SingleBoneInfo();

  SingleBoneInfo(const SingleBoneInfo& from);
  SingleBoneInfo(SingleBoneInfo&& from) noexcept
    : SingleBoneInfo() {
    *this = ::std::move(from);
  }

  inline SingleBoneInfo& operator=(const SingleBoneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleBoneInfo& operator=(SingleBoneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleBoneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleBoneInfo* internal_default_instance() {
    return reinterpret_cast<const SingleBoneInfo*>(
               &_SingleBoneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SingleBoneInfo& a, SingleBoneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleBoneInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleBoneInfo* New() const final {
    return CreateMaybeMessage<SingleBoneInfo>(nullptr);
  }

  SingleBoneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleBoneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleBoneInfo& from);
  void MergeFrom(const SingleBoneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleBoneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skeleton.SingleBoneInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skeleton_2eproto);
    return ::descriptor_table_skeleton_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBIDFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // int32 bID = 1;
  void clear_bid();
  ::PROTOBUF_NAMESPACE_ID::int32 bid() const;
  void set_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid() const;
  void _internal_set_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:skeleton.SingleBoneInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skeleton_2eproto;
};
// -------------------------------------------------------------------

class FaceBlendshapInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skeleton.FaceBlendshapInfo) */ {
 public:
  FaceBlendshapInfo();
  virtual ~FaceBlendshapInfo();

  FaceBlendshapInfo(const FaceBlendshapInfo& from);
  FaceBlendshapInfo(FaceBlendshapInfo&& from) noexcept
    : FaceBlendshapInfo() {
    *this = ::std::move(from);
  }

  inline FaceBlendshapInfo& operator=(const FaceBlendshapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceBlendshapInfo& operator=(FaceBlendshapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceBlendshapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceBlendshapInfo* internal_default_instance() {
    return reinterpret_cast<const FaceBlendshapInfo*>(
               &_FaceBlendshapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FaceBlendshapInfo& a, FaceBlendshapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceBlendshapInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceBlendshapInfo* New() const final {
    return CreateMaybeMessage<FaceBlendshapInfo>(nullptr);
  }

  FaceBlendshapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceBlendshapInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceBlendshapInfo& from);
  void MergeFrom(const FaceBlendshapInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceBlendshapInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skeleton.FaceBlendshapInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skeleton_2eproto);
    return ::descriptor_table_skeleton_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBIDFieldNumber = 1,
    kVFieldNumber = 2,
  };
  // int32 bID = 1;
  void clear_bid();
  ::PROTOBUF_NAMESPACE_ID::int32 bid() const;
  void set_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid() const;
  void _internal_set_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float v = 2;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // @@protoc_insertion_point(class_scope:skeleton.FaceBlendshapInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_;
  float v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skeleton_2eproto;
};
// -------------------------------------------------------------------

class CSkeleton :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skeleton.CSkeleton) */ {
 public:
  CSkeleton();
  virtual ~CSkeleton();

  CSkeleton(const CSkeleton& from);
  CSkeleton(CSkeleton&& from) noexcept
    : CSkeleton() {
    *this = ::std::move(from);
  }

  inline CSkeleton& operator=(const CSkeleton& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSkeleton& operator=(CSkeleton&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSkeleton& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSkeleton* internal_default_instance() {
    return reinterpret_cast<const CSkeleton*>(
               &_CSkeleton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSkeleton& a, CSkeleton& b) {
    a.Swap(&b);
  }
  inline void Swap(CSkeleton* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSkeleton* New() const final {
    return CreateMaybeMessage<CSkeleton>(nullptr);
  }

  CSkeleton* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSkeleton>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSkeleton& from);
  void MergeFrom(const CSkeleton& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSkeleton* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skeleton.CSkeleton";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skeleton_2eproto);
    return ::descriptor_table_skeleton_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkeletonPosListFieldNumber = 2,
    kSkeletonRotListFieldNumber = 3,
    kFaceBlendshapInfoFieldNumber = 4,
    kServerTimeFieldNumber = 1,
  };
  // repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
  int skeletonposlist_size() const;
  private:
  int _internal_skeletonposlist_size() const;
  public:
  void clear_skeletonposlist();
  ::skeleton::SingleBoneInfo* mutable_skeletonposlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >*
      mutable_skeletonposlist();
  private:
  const ::skeleton::SingleBoneInfo& _internal_skeletonposlist(int index) const;
  ::skeleton::SingleBoneInfo* _internal_add_skeletonposlist();
  public:
  const ::skeleton::SingleBoneInfo& skeletonposlist(int index) const;
  ::skeleton::SingleBoneInfo* add_skeletonposlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >&
      skeletonposlist() const;

  // repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
  int skeletonrotlist_size() const;
  private:
  int _internal_skeletonrotlist_size() const;
  public:
  void clear_skeletonrotlist();
  ::skeleton::SingleBoneInfo* mutable_skeletonrotlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >*
      mutable_skeletonrotlist();
  private:
  const ::skeleton::SingleBoneInfo& _internal_skeletonrotlist(int index) const;
  ::skeleton::SingleBoneInfo* _internal_add_skeletonrotlist();
  public:
  const ::skeleton::SingleBoneInfo& skeletonrotlist(int index) const;
  ::skeleton::SingleBoneInfo* add_skeletonrotlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >&
      skeletonrotlist() const;

  // repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
  int faceblendshapinfo_size() const;
  private:
  int _internal_faceblendshapinfo_size() const;
  public:
  void clear_faceblendshapinfo();
  ::skeleton::FaceBlendshapInfo* mutable_faceblendshapinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo >*
      mutable_faceblendshapinfo();
  private:
  const ::skeleton::FaceBlendshapInfo& _internal_faceblendshapinfo(int index) const;
  ::skeleton::FaceBlendshapInfo* _internal_add_faceblendshapinfo();
  public:
  const ::skeleton::FaceBlendshapInfo& faceblendshapinfo(int index) const;
  ::skeleton::FaceBlendshapInfo* add_faceblendshapinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo >&
      faceblendshapinfo() const;

  // int64 serverTime = 1;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:skeleton.CSkeleton)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo > skeletonposlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo > skeletonrotlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo > faceblendshapinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skeleton_2eproto;
};
// -------------------------------------------------------------------

class SSkeleton :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skeleton.SSkeleton) */ {
 public:
  SSkeleton();
  virtual ~SSkeleton();

  SSkeleton(const SSkeleton& from);
  SSkeleton(SSkeleton&& from) noexcept
    : SSkeleton() {
    *this = ::std::move(from);
  }

  inline SSkeleton& operator=(const SSkeleton& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSkeleton& operator=(SSkeleton&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSkeleton& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSkeleton* internal_default_instance() {
    return reinterpret_cast<const SSkeleton*>(
               &_SSkeleton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSkeleton& a, SSkeleton& b) {
    a.Swap(&b);
  }
  inline void Swap(SSkeleton* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSkeleton* New() const final {
    return CreateMaybeMessage<SSkeleton>(nullptr);
  }

  SSkeleton* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSkeleton>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSkeleton& from);
  void MergeFrom(const SSkeleton& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSkeleton* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skeleton.SSkeleton";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skeleton_2eproto);
    return ::descriptor_table_skeleton_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkeletonPosListFieldNumber = 2,
    kSkeletonRotListFieldNumber = 3,
    kFaceBlendshapInfoFieldNumber = 4,
    kServerTimeFieldNumber = 1,
  };
  // repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
  int skeletonposlist_size() const;
  private:
  int _internal_skeletonposlist_size() const;
  public:
  void clear_skeletonposlist();
  ::skeleton::SingleBoneInfo* mutable_skeletonposlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >*
      mutable_skeletonposlist();
  private:
  const ::skeleton::SingleBoneInfo& _internal_skeletonposlist(int index) const;
  ::skeleton::SingleBoneInfo* _internal_add_skeletonposlist();
  public:
  const ::skeleton::SingleBoneInfo& skeletonposlist(int index) const;
  ::skeleton::SingleBoneInfo* add_skeletonposlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >&
      skeletonposlist() const;

  // repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
  int skeletonrotlist_size() const;
  private:
  int _internal_skeletonrotlist_size() const;
  public:
  void clear_skeletonrotlist();
  ::skeleton::SingleBoneInfo* mutable_skeletonrotlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >*
      mutable_skeletonrotlist();
  private:
  const ::skeleton::SingleBoneInfo& _internal_skeletonrotlist(int index) const;
  ::skeleton::SingleBoneInfo* _internal_add_skeletonrotlist();
  public:
  const ::skeleton::SingleBoneInfo& skeletonrotlist(int index) const;
  ::skeleton::SingleBoneInfo* add_skeletonrotlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >&
      skeletonrotlist() const;

  // repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
  int faceblendshapinfo_size() const;
  private:
  int _internal_faceblendshapinfo_size() const;
  public:
  void clear_faceblendshapinfo();
  ::skeleton::FaceBlendshapInfo* mutable_faceblendshapinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo >*
      mutable_faceblendshapinfo();
  private:
  const ::skeleton::FaceBlendshapInfo& _internal_faceblendshapinfo(int index) const;
  ::skeleton::FaceBlendshapInfo* _internal_add_faceblendshapinfo();
  public:
  const ::skeleton::FaceBlendshapInfo& faceblendshapinfo(int index) const;
  ::skeleton::FaceBlendshapInfo* add_faceblendshapinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo >&
      faceblendshapinfo() const;

  // int64 serverTime = 1;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:skeleton.SSkeleton)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo > skeletonposlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo > skeletonrotlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo > faceblendshapinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skeleton_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleBoneInfo

// int32 bID = 1;
inline void SingleBoneInfo::clear_bid() {
  bid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleBoneInfo::_internal_bid() const {
  return bid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleBoneInfo::bid() const {
  // @@protoc_insertion_point(field_get:skeleton.SingleBoneInfo.bID)
  return _internal_bid();
}
inline void SingleBoneInfo::_internal_set_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bid_ = value;
}
inline void SingleBoneInfo::set_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:skeleton.SingleBoneInfo.bID)
}

// float x = 2;
inline void SingleBoneInfo::clear_x() {
  x_ = 0;
}
inline float SingleBoneInfo::_internal_x() const {
  return x_;
}
inline float SingleBoneInfo::x() const {
  // @@protoc_insertion_point(field_get:skeleton.SingleBoneInfo.x)
  return _internal_x();
}
inline void SingleBoneInfo::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SingleBoneInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:skeleton.SingleBoneInfo.x)
}

// float y = 3;
inline void SingleBoneInfo::clear_y() {
  y_ = 0;
}
inline float SingleBoneInfo::_internal_y() const {
  return y_;
}
inline float SingleBoneInfo::y() const {
  // @@protoc_insertion_point(field_get:skeleton.SingleBoneInfo.y)
  return _internal_y();
}
inline void SingleBoneInfo::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SingleBoneInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:skeleton.SingleBoneInfo.y)
}

// float z = 4;
inline void SingleBoneInfo::clear_z() {
  z_ = 0;
}
inline float SingleBoneInfo::_internal_z() const {
  return z_;
}
inline float SingleBoneInfo::z() const {
  // @@protoc_insertion_point(field_get:skeleton.SingleBoneInfo.z)
  return _internal_z();
}
inline void SingleBoneInfo::_internal_set_z(float value) {
  
  z_ = value;
}
inline void SingleBoneInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:skeleton.SingleBoneInfo.z)
}

// -------------------------------------------------------------------

// FaceBlendshapInfo

// int32 bID = 1;
inline void FaceBlendshapInfo::clear_bid() {
  bid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceBlendshapInfo::_internal_bid() const {
  return bid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceBlendshapInfo::bid() const {
  // @@protoc_insertion_point(field_get:skeleton.FaceBlendshapInfo.bID)
  return _internal_bid();
}
inline void FaceBlendshapInfo::_internal_set_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bid_ = value;
}
inline void FaceBlendshapInfo::set_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:skeleton.FaceBlendshapInfo.bID)
}

// float v = 2;
inline void FaceBlendshapInfo::clear_v() {
  v_ = 0;
}
inline float FaceBlendshapInfo::_internal_v() const {
  return v_;
}
inline float FaceBlendshapInfo::v() const {
  // @@protoc_insertion_point(field_get:skeleton.FaceBlendshapInfo.v)
  return _internal_v();
}
inline void FaceBlendshapInfo::_internal_set_v(float value) {
  
  v_ = value;
}
inline void FaceBlendshapInfo::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:skeleton.FaceBlendshapInfo.v)
}

// -------------------------------------------------------------------

// CSkeleton

// int64 serverTime = 1;
inline void CSkeleton::clear_servertime() {
  servertime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CSkeleton::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CSkeleton::servertime() const {
  // @@protoc_insertion_point(field_get:skeleton.CSkeleton.serverTime)
  return _internal_servertime();
}
inline void CSkeleton::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servertime_ = value;
}
inline void CSkeleton::set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:skeleton.CSkeleton.serverTime)
}

// repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
inline int CSkeleton::_internal_skeletonposlist_size() const {
  return skeletonposlist_.size();
}
inline int CSkeleton::skeletonposlist_size() const {
  return _internal_skeletonposlist_size();
}
inline void CSkeleton::clear_skeletonposlist() {
  skeletonposlist_.Clear();
}
inline ::skeleton::SingleBoneInfo* CSkeleton::mutable_skeletonposlist(int index) {
  // @@protoc_insertion_point(field_mutable:skeleton.CSkeleton.skeletonPosList)
  return skeletonposlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >*
CSkeleton::mutable_skeletonposlist() {
  // @@protoc_insertion_point(field_mutable_list:skeleton.CSkeleton.skeletonPosList)
  return &skeletonposlist_;
}
inline const ::skeleton::SingleBoneInfo& CSkeleton::_internal_skeletonposlist(int index) const {
  return skeletonposlist_.Get(index);
}
inline const ::skeleton::SingleBoneInfo& CSkeleton::skeletonposlist(int index) const {
  // @@protoc_insertion_point(field_get:skeleton.CSkeleton.skeletonPosList)
  return _internal_skeletonposlist(index);
}
inline ::skeleton::SingleBoneInfo* CSkeleton::_internal_add_skeletonposlist() {
  return skeletonposlist_.Add();
}
inline ::skeleton::SingleBoneInfo* CSkeleton::add_skeletonposlist() {
  // @@protoc_insertion_point(field_add:skeleton.CSkeleton.skeletonPosList)
  return _internal_add_skeletonposlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >&
CSkeleton::skeletonposlist() const {
  // @@protoc_insertion_point(field_list:skeleton.CSkeleton.skeletonPosList)
  return skeletonposlist_;
}

// repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
inline int CSkeleton::_internal_skeletonrotlist_size() const {
  return skeletonrotlist_.size();
}
inline int CSkeleton::skeletonrotlist_size() const {
  return _internal_skeletonrotlist_size();
}
inline void CSkeleton::clear_skeletonrotlist() {
  skeletonrotlist_.Clear();
}
inline ::skeleton::SingleBoneInfo* CSkeleton::mutable_skeletonrotlist(int index) {
  // @@protoc_insertion_point(field_mutable:skeleton.CSkeleton.skeletonRotList)
  return skeletonrotlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >*
CSkeleton::mutable_skeletonrotlist() {
  // @@protoc_insertion_point(field_mutable_list:skeleton.CSkeleton.skeletonRotList)
  return &skeletonrotlist_;
}
inline const ::skeleton::SingleBoneInfo& CSkeleton::_internal_skeletonrotlist(int index) const {
  return skeletonrotlist_.Get(index);
}
inline const ::skeleton::SingleBoneInfo& CSkeleton::skeletonrotlist(int index) const {
  // @@protoc_insertion_point(field_get:skeleton.CSkeleton.skeletonRotList)
  return _internal_skeletonrotlist(index);
}
inline ::skeleton::SingleBoneInfo* CSkeleton::_internal_add_skeletonrotlist() {
  return skeletonrotlist_.Add();
}
inline ::skeleton::SingleBoneInfo* CSkeleton::add_skeletonrotlist() {
  // @@protoc_insertion_point(field_add:skeleton.CSkeleton.skeletonRotList)
  return _internal_add_skeletonrotlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >&
CSkeleton::skeletonrotlist() const {
  // @@protoc_insertion_point(field_list:skeleton.CSkeleton.skeletonRotList)
  return skeletonrotlist_;
}

// repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
inline int CSkeleton::_internal_faceblendshapinfo_size() const {
  return faceblendshapinfo_.size();
}
inline int CSkeleton::faceblendshapinfo_size() const {
  return _internal_faceblendshapinfo_size();
}
inline void CSkeleton::clear_faceblendshapinfo() {
  faceblendshapinfo_.Clear();
}
inline ::skeleton::FaceBlendshapInfo* CSkeleton::mutable_faceblendshapinfo(int index) {
  // @@protoc_insertion_point(field_mutable:skeleton.CSkeleton.faceBlendshapInfo)
  return faceblendshapinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo >*
CSkeleton::mutable_faceblendshapinfo() {
  // @@protoc_insertion_point(field_mutable_list:skeleton.CSkeleton.faceBlendshapInfo)
  return &faceblendshapinfo_;
}
inline const ::skeleton::FaceBlendshapInfo& CSkeleton::_internal_faceblendshapinfo(int index) const {
  return faceblendshapinfo_.Get(index);
}
inline const ::skeleton::FaceBlendshapInfo& CSkeleton::faceblendshapinfo(int index) const {
  // @@protoc_insertion_point(field_get:skeleton.CSkeleton.faceBlendshapInfo)
  return _internal_faceblendshapinfo(index);
}
inline ::skeleton::FaceBlendshapInfo* CSkeleton::_internal_add_faceblendshapinfo() {
  return faceblendshapinfo_.Add();
}
inline ::skeleton::FaceBlendshapInfo* CSkeleton::add_faceblendshapinfo() {
  // @@protoc_insertion_point(field_add:skeleton.CSkeleton.faceBlendshapInfo)
  return _internal_add_faceblendshapinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo >&
CSkeleton::faceblendshapinfo() const {
  // @@protoc_insertion_point(field_list:skeleton.CSkeleton.faceBlendshapInfo)
  return faceblendshapinfo_;
}

// -------------------------------------------------------------------

// SSkeleton

// int64 serverTime = 1;
inline void SSkeleton::clear_servertime() {
  servertime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SSkeleton::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SSkeleton::servertime() const {
  // @@protoc_insertion_point(field_get:skeleton.SSkeleton.serverTime)
  return _internal_servertime();
}
inline void SSkeleton::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servertime_ = value;
}
inline void SSkeleton::set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:skeleton.SSkeleton.serverTime)
}

// repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
inline int SSkeleton::_internal_skeletonposlist_size() const {
  return skeletonposlist_.size();
}
inline int SSkeleton::skeletonposlist_size() const {
  return _internal_skeletonposlist_size();
}
inline void SSkeleton::clear_skeletonposlist() {
  skeletonposlist_.Clear();
}
inline ::skeleton::SingleBoneInfo* SSkeleton::mutable_skeletonposlist(int index) {
  // @@protoc_insertion_point(field_mutable:skeleton.SSkeleton.skeletonPosList)
  return skeletonposlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >*
SSkeleton::mutable_skeletonposlist() {
  // @@protoc_insertion_point(field_mutable_list:skeleton.SSkeleton.skeletonPosList)
  return &skeletonposlist_;
}
inline const ::skeleton::SingleBoneInfo& SSkeleton::_internal_skeletonposlist(int index) const {
  return skeletonposlist_.Get(index);
}
inline const ::skeleton::SingleBoneInfo& SSkeleton::skeletonposlist(int index) const {
  // @@protoc_insertion_point(field_get:skeleton.SSkeleton.skeletonPosList)
  return _internal_skeletonposlist(index);
}
inline ::skeleton::SingleBoneInfo* SSkeleton::_internal_add_skeletonposlist() {
  return skeletonposlist_.Add();
}
inline ::skeleton::SingleBoneInfo* SSkeleton::add_skeletonposlist() {
  // @@protoc_insertion_point(field_add:skeleton.SSkeleton.skeletonPosList)
  return _internal_add_skeletonposlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >&
SSkeleton::skeletonposlist() const {
  // @@protoc_insertion_point(field_list:skeleton.SSkeleton.skeletonPosList)
  return skeletonposlist_;
}

// repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
inline int SSkeleton::_internal_skeletonrotlist_size() const {
  return skeletonrotlist_.size();
}
inline int SSkeleton::skeletonrotlist_size() const {
  return _internal_skeletonrotlist_size();
}
inline void SSkeleton::clear_skeletonrotlist() {
  skeletonrotlist_.Clear();
}
inline ::skeleton::SingleBoneInfo* SSkeleton::mutable_skeletonrotlist(int index) {
  // @@protoc_insertion_point(field_mutable:skeleton.SSkeleton.skeletonRotList)
  return skeletonrotlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >*
SSkeleton::mutable_skeletonrotlist() {
  // @@protoc_insertion_point(field_mutable_list:skeleton.SSkeleton.skeletonRotList)
  return &skeletonrotlist_;
}
inline const ::skeleton::SingleBoneInfo& SSkeleton::_internal_skeletonrotlist(int index) const {
  return skeletonrotlist_.Get(index);
}
inline const ::skeleton::SingleBoneInfo& SSkeleton::skeletonrotlist(int index) const {
  // @@protoc_insertion_point(field_get:skeleton.SSkeleton.skeletonRotList)
  return _internal_skeletonrotlist(index);
}
inline ::skeleton::SingleBoneInfo* SSkeleton::_internal_add_skeletonrotlist() {
  return skeletonrotlist_.Add();
}
inline ::skeleton::SingleBoneInfo* SSkeleton::add_skeletonrotlist() {
  // @@protoc_insertion_point(field_add:skeleton.SSkeleton.skeletonRotList)
  return _internal_add_skeletonrotlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::SingleBoneInfo >&
SSkeleton::skeletonrotlist() const {
  // @@protoc_insertion_point(field_list:skeleton.SSkeleton.skeletonRotList)
  return skeletonrotlist_;
}

// repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
inline int SSkeleton::_internal_faceblendshapinfo_size() const {
  return faceblendshapinfo_.size();
}
inline int SSkeleton::faceblendshapinfo_size() const {
  return _internal_faceblendshapinfo_size();
}
inline void SSkeleton::clear_faceblendshapinfo() {
  faceblendshapinfo_.Clear();
}
inline ::skeleton::FaceBlendshapInfo* SSkeleton::mutable_faceblendshapinfo(int index) {
  // @@protoc_insertion_point(field_mutable:skeleton.SSkeleton.faceBlendshapInfo)
  return faceblendshapinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo >*
SSkeleton::mutable_faceblendshapinfo() {
  // @@protoc_insertion_point(field_mutable_list:skeleton.SSkeleton.faceBlendshapInfo)
  return &faceblendshapinfo_;
}
inline const ::skeleton::FaceBlendshapInfo& SSkeleton::_internal_faceblendshapinfo(int index) const {
  return faceblendshapinfo_.Get(index);
}
inline const ::skeleton::FaceBlendshapInfo& SSkeleton::faceblendshapinfo(int index) const {
  // @@protoc_insertion_point(field_get:skeleton.SSkeleton.faceBlendshapInfo)
  return _internal_faceblendshapinfo(index);
}
inline ::skeleton::FaceBlendshapInfo* SSkeleton::_internal_add_faceblendshapinfo() {
  return faceblendshapinfo_.Add();
}
inline ::skeleton::FaceBlendshapInfo* SSkeleton::add_faceblendshapinfo() {
  // @@protoc_insertion_point(field_add:skeleton.SSkeleton.faceBlendshapInfo)
  return _internal_add_faceblendshapinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::skeleton::FaceBlendshapInfo >&
SSkeleton::faceblendshapinfo() const {
  // @@protoc_insertion_point(field_list:skeleton.SSkeleton.faceBlendshapInfo)
  return faceblendshapinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace skeleton

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skeleton_2eproto
