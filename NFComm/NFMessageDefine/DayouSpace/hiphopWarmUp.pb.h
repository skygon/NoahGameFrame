// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hiphopWarmUp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hiphopWarmUp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hiphopWarmUp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hiphopWarmUp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hiphopWarmUp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hiphopWarmUp_2eproto;
namespace hiphop {
class BPoster;
class BPosterDefaultTypeInternal;
extern BPosterDefaultTypeInternal _BPoster_default_instance_;
class CHiphopGetStarToken;
class CHiphopGetStarTokenDefaultTypeInternal;
extern CHiphopGetStarTokenDefaultTypeInternal _CHiphopGetStarToken_default_instance_;
class CHiphopListStarToken;
class CHiphopListStarTokenDefaultTypeInternal;
extern CHiphopListStarTokenDefaultTypeInternal _CHiphopListStarToken_default_instance_;
class CHiphopUseStarToken;
class CHiphopUseStarTokenDefaultTypeInternal;
extern CHiphopUseStarTokenDefaultTypeInternal _CHiphopUseStarToken_default_instance_;
class CHiphopWarmUp;
class CHiphopWarmUpDefaultTypeInternal;
extern CHiphopWarmUpDefaultTypeInternal _CHiphopWarmUp_default_instance_;
class SHiphopGetStarToken;
class SHiphopGetStarTokenDefaultTypeInternal;
extern SHiphopGetStarTokenDefaultTypeInternal _SHiphopGetStarToken_default_instance_;
class SHiphopListStarToken;
class SHiphopListStarTokenDefaultTypeInternal;
extern SHiphopListStarTokenDefaultTypeInternal _SHiphopListStarToken_default_instance_;
class SHiphopUseStarToken;
class SHiphopUseStarTokenDefaultTypeInternal;
extern SHiphopUseStarTokenDefaultTypeInternal _SHiphopUseStarToken_default_instance_;
class SHiphopWarmUp;
class SHiphopWarmUpDefaultTypeInternal;
extern SHiphopWarmUpDefaultTypeInternal _SHiphopWarmUp_default_instance_;
}  // namespace hiphop
PROTOBUF_NAMESPACE_OPEN
template<> ::hiphop::BPoster* Arena::CreateMaybeMessage<::hiphop::BPoster>(Arena*);
template<> ::hiphop::CHiphopGetStarToken* Arena::CreateMaybeMessage<::hiphop::CHiphopGetStarToken>(Arena*);
template<> ::hiphop::CHiphopListStarToken* Arena::CreateMaybeMessage<::hiphop::CHiphopListStarToken>(Arena*);
template<> ::hiphop::CHiphopUseStarToken* Arena::CreateMaybeMessage<::hiphop::CHiphopUseStarToken>(Arena*);
template<> ::hiphop::CHiphopWarmUp* Arena::CreateMaybeMessage<::hiphop::CHiphopWarmUp>(Arena*);
template<> ::hiphop::SHiphopGetStarToken* Arena::CreateMaybeMessage<::hiphop::SHiphopGetStarToken>(Arena*);
template<> ::hiphop::SHiphopListStarToken* Arena::CreateMaybeMessage<::hiphop::SHiphopListStarToken>(Arena*);
template<> ::hiphop::SHiphopUseStarToken* Arena::CreateMaybeMessage<::hiphop::SHiphopUseStarToken>(Arena*);
template<> ::hiphop::SHiphopWarmUp* Arena::CreateMaybeMessage<::hiphop::SHiphopWarmUp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hiphop {

// ===================================================================

class CHiphopWarmUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.CHiphopWarmUp) */ {
 public:
  CHiphopWarmUp();
  virtual ~CHiphopWarmUp();

  CHiphopWarmUp(const CHiphopWarmUp& from);
  CHiphopWarmUp(CHiphopWarmUp&& from) noexcept
    : CHiphopWarmUp() {
    *this = ::std::move(from);
  }

  inline CHiphopWarmUp& operator=(const CHiphopWarmUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHiphopWarmUp& operator=(CHiphopWarmUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHiphopWarmUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHiphopWarmUp* internal_default_instance() {
    return reinterpret_cast<const CHiphopWarmUp*>(
               &_CHiphopWarmUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CHiphopWarmUp& a, CHiphopWarmUp& b) {
    a.Swap(&b);
  }
  inline void Swap(CHiphopWarmUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHiphopWarmUp* New() const final {
    return CreateMaybeMessage<CHiphopWarmUp>(nullptr);
  }

  CHiphopWarmUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHiphopWarmUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHiphopWarmUp& from);
  void MergeFrom(const CHiphopWarmUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHiphopWarmUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.CHiphopWarmUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopWarmUp_2eproto);
    return ::descriptor_table_hiphopWarmUp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hiphop.CHiphopWarmUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopWarmUp_2eproto;
};
// -------------------------------------------------------------------

class BPoster :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.BPoster) */ {
 public:
  BPoster();
  virtual ~BPoster();

  BPoster(const BPoster& from);
  BPoster(BPoster&& from) noexcept
    : BPoster() {
    *this = ::std::move(from);
  }

  inline BPoster& operator=(const BPoster& from) {
    CopyFrom(from);
    return *this;
  }
  inline BPoster& operator=(BPoster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BPoster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BPoster* internal_default_instance() {
    return reinterpret_cast<const BPoster*>(
               &_BPoster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BPoster& a, BPoster& b) {
    a.Swap(&b);
  }
  inline void Swap(BPoster* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BPoster* New() const final {
    return CreateMaybeMessage<BPoster>(nullptr);
  }

  BPoster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BPoster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BPoster& from);
  void MergeFrom(const BPoster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BPoster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.BPoster";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopWarmUp_2eproto);
    return ::descriptor_table_hiphopWarmUp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicFieldNumber = 2,
    kGoodsIdFieldNumber = 1,
  };
  // string pic = 2;
  void clear_pic();
  const std::string& pic() const;
  void set_pic(const std::string& value);
  void set_pic(std::string&& value);
  void set_pic(const char* value);
  void set_pic(const char* value, size_t size);
  std::string* mutable_pic();
  std::string* release_pic();
  void set_allocated_pic(std::string* pic);
  private:
  const std::string& _internal_pic() const;
  void _internal_set_pic(const std::string& value);
  std::string* _internal_mutable_pic();
  public:

  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.BPoster)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopWarmUp_2eproto;
};
// -------------------------------------------------------------------

class SHiphopWarmUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopWarmUp) */ {
 public:
  SHiphopWarmUp();
  virtual ~SHiphopWarmUp();

  SHiphopWarmUp(const SHiphopWarmUp& from);
  SHiphopWarmUp(SHiphopWarmUp&& from) noexcept
    : SHiphopWarmUp() {
    *this = ::std::move(from);
  }

  inline SHiphopWarmUp& operator=(const SHiphopWarmUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopWarmUp& operator=(SHiphopWarmUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopWarmUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopWarmUp* internal_default_instance() {
    return reinterpret_cast<const SHiphopWarmUp*>(
               &_SHiphopWarmUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SHiphopWarmUp& a, SHiphopWarmUp& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopWarmUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopWarmUp* New() const final {
    return CreateMaybeMessage<SHiphopWarmUp>(nullptr);
  }

  SHiphopWarmUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopWarmUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopWarmUp& from);
  void MergeFrom(const SHiphopWarmUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopWarmUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopWarmUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopWarmUp_2eproto);
    return ::descriptor_table_hiphopWarmUp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosterListFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kIsFirstFieldNumber = 3,
    kCurrGoodsIdFieldNumber = 4,
  };
  // repeated .hiphop.BPoster posterList = 1;
  int posterlist_size() const;
  private:
  int _internal_posterlist_size() const;
  public:
  void clear_posterlist();
  ::hiphop::BPoster* mutable_posterlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BPoster >*
      mutable_posterlist();
  private:
  const ::hiphop::BPoster& _internal_posterlist(int index) const;
  ::hiphop::BPoster* _internal_add_posterlist();
  public:
  const ::hiphop::BPoster& posterlist(int index) const;
  ::hiphop::BPoster* add_posterlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BPoster >&
      posterlist() const;

  // int64 startTime = 2;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isFirst = 3;
  void clear_isfirst();
  bool isfirst() const;
  void set_isfirst(bool value);
  private:
  bool _internal_isfirst() const;
  void _internal_set_isfirst(bool value);
  public:

  // int32 currGoodsId = 4;
  void clear_currgoodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 currgoodsid() const;
  void set_currgoodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currgoodsid() const;
  void _internal_set_currgoodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopWarmUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BPoster > posterlist_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  bool isfirst_;
  ::PROTOBUF_NAMESPACE_ID::int32 currgoodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopWarmUp_2eproto;
};
// -------------------------------------------------------------------

class CHiphopListStarToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.CHiphopListStarToken) */ {
 public:
  CHiphopListStarToken();
  virtual ~CHiphopListStarToken();

  CHiphopListStarToken(const CHiphopListStarToken& from);
  CHiphopListStarToken(CHiphopListStarToken&& from) noexcept
    : CHiphopListStarToken() {
    *this = ::std::move(from);
  }

  inline CHiphopListStarToken& operator=(const CHiphopListStarToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHiphopListStarToken& operator=(CHiphopListStarToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHiphopListStarToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHiphopListStarToken* internal_default_instance() {
    return reinterpret_cast<const CHiphopListStarToken*>(
               &_CHiphopListStarToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CHiphopListStarToken& a, CHiphopListStarToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CHiphopListStarToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHiphopListStarToken* New() const final {
    return CreateMaybeMessage<CHiphopListStarToken>(nullptr);
  }

  CHiphopListStarToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHiphopListStarToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHiphopListStarToken& from);
  void MergeFrom(const CHiphopListStarToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHiphopListStarToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.CHiphopListStarToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopWarmUp_2eproto);
    return ::descriptor_table_hiphopWarmUp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hiphop.CHiphopListStarToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopWarmUp_2eproto;
};
// -------------------------------------------------------------------

class SHiphopListStarToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopListStarToken) */ {
 public:
  SHiphopListStarToken();
  virtual ~SHiphopListStarToken();

  SHiphopListStarToken(const SHiphopListStarToken& from);
  SHiphopListStarToken(SHiphopListStarToken&& from) noexcept
    : SHiphopListStarToken() {
    *this = ::std::move(from);
  }

  inline SHiphopListStarToken& operator=(const SHiphopListStarToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopListStarToken& operator=(SHiphopListStarToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopListStarToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopListStarToken* internal_default_instance() {
    return reinterpret_cast<const SHiphopListStarToken*>(
               &_SHiphopListStarToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SHiphopListStarToken& a, SHiphopListStarToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopListStarToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopListStarToken* New() const final {
    return CreateMaybeMessage<SHiphopListStarToken>(nullptr);
  }

  SHiphopListStarToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopListStarToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopListStarToken& from);
  void MergeFrom(const SHiphopListStarToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopListStarToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopListStarToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopWarmUp_2eproto);
    return ::descriptor_table_hiphopWarmUp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnedGoodsIdFieldNumber = 1,
  };
  // repeated int32 ownedGoodsId = 1;
  int ownedgoodsid_size() const;
  private:
  int _internal_ownedgoodsid_size() const;
  public:
  void clear_ownedgoodsid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ownedgoodsid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ownedgoodsid() const;
  void _internal_add_ownedgoodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ownedgoodsid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ownedgoodsid(int index) const;
  void set_ownedgoodsid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ownedgoodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ownedgoodsid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ownedgoodsid();

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopListStarToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ownedgoodsid_;
  mutable std::atomic<int> _ownedgoodsid_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopWarmUp_2eproto;
};
// -------------------------------------------------------------------

class CHiphopGetStarToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.CHiphopGetStarToken) */ {
 public:
  CHiphopGetStarToken();
  virtual ~CHiphopGetStarToken();

  CHiphopGetStarToken(const CHiphopGetStarToken& from);
  CHiphopGetStarToken(CHiphopGetStarToken&& from) noexcept
    : CHiphopGetStarToken() {
    *this = ::std::move(from);
  }

  inline CHiphopGetStarToken& operator=(const CHiphopGetStarToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHiphopGetStarToken& operator=(CHiphopGetStarToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHiphopGetStarToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHiphopGetStarToken* internal_default_instance() {
    return reinterpret_cast<const CHiphopGetStarToken*>(
               &_CHiphopGetStarToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CHiphopGetStarToken& a, CHiphopGetStarToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CHiphopGetStarToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHiphopGetStarToken* New() const final {
    return CreateMaybeMessage<CHiphopGetStarToken>(nullptr);
  }

  CHiphopGetStarToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHiphopGetStarToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHiphopGetStarToken& from);
  void MergeFrom(const CHiphopGetStarToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHiphopGetStarToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.CHiphopGetStarToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopWarmUp_2eproto);
    return ::descriptor_table_hiphopWarmUp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.CHiphopGetStarToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopWarmUp_2eproto;
};
// -------------------------------------------------------------------

class SHiphopGetStarToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopGetStarToken) */ {
 public:
  SHiphopGetStarToken();
  virtual ~SHiphopGetStarToken();

  SHiphopGetStarToken(const SHiphopGetStarToken& from);
  SHiphopGetStarToken(SHiphopGetStarToken&& from) noexcept
    : SHiphopGetStarToken() {
    *this = ::std::move(from);
  }

  inline SHiphopGetStarToken& operator=(const SHiphopGetStarToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopGetStarToken& operator=(SHiphopGetStarToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopGetStarToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopGetStarToken* internal_default_instance() {
    return reinterpret_cast<const SHiphopGetStarToken*>(
               &_SHiphopGetStarToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SHiphopGetStarToken& a, SHiphopGetStarToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopGetStarToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopGetStarToken* New() const final {
    return CreateMaybeMessage<SHiphopGetStarToken>(nullptr);
  }

  SHiphopGetStarToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopGetStarToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopGetStarToken& from);
  void MergeFrom(const SHiphopGetStarToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopGetStarToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopGetStarToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopWarmUp_2eproto);
    return ::descriptor_table_hiphopWarmUp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
    kResFieldNumber = 2,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 res = 2;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopGetStarToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopWarmUp_2eproto;
};
// -------------------------------------------------------------------

class CHiphopUseStarToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.CHiphopUseStarToken) */ {
 public:
  CHiphopUseStarToken();
  virtual ~CHiphopUseStarToken();

  CHiphopUseStarToken(const CHiphopUseStarToken& from);
  CHiphopUseStarToken(CHiphopUseStarToken&& from) noexcept
    : CHiphopUseStarToken() {
    *this = ::std::move(from);
  }

  inline CHiphopUseStarToken& operator=(const CHiphopUseStarToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHiphopUseStarToken& operator=(CHiphopUseStarToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHiphopUseStarToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHiphopUseStarToken* internal_default_instance() {
    return reinterpret_cast<const CHiphopUseStarToken*>(
               &_CHiphopUseStarToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CHiphopUseStarToken& a, CHiphopUseStarToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CHiphopUseStarToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHiphopUseStarToken* New() const final {
    return CreateMaybeMessage<CHiphopUseStarToken>(nullptr);
  }

  CHiphopUseStarToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHiphopUseStarToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHiphopUseStarToken& from);
  void MergeFrom(const CHiphopUseStarToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHiphopUseStarToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.CHiphopUseStarToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopWarmUp_2eproto);
    return ::descriptor_table_hiphopWarmUp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.CHiphopUseStarToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopWarmUp_2eproto;
};
// -------------------------------------------------------------------

class SHiphopUseStarToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopUseStarToken) */ {
 public:
  SHiphopUseStarToken();
  virtual ~SHiphopUseStarToken();

  SHiphopUseStarToken(const SHiphopUseStarToken& from);
  SHiphopUseStarToken(SHiphopUseStarToken&& from) noexcept
    : SHiphopUseStarToken() {
    *this = ::std::move(from);
  }

  inline SHiphopUseStarToken& operator=(const SHiphopUseStarToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopUseStarToken& operator=(SHiphopUseStarToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopUseStarToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopUseStarToken* internal_default_instance() {
    return reinterpret_cast<const SHiphopUseStarToken*>(
               &_SHiphopUseStarToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SHiphopUseStarToken& a, SHiphopUseStarToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopUseStarToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopUseStarToken* New() const final {
    return CreateMaybeMessage<SHiphopUseStarToken>(nullptr);
  }

  SHiphopUseStarToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopUseStarToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopUseStarToken& from);
  void MergeFrom(const SHiphopUseStarToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopUseStarToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopUseStarToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopWarmUp_2eproto);
    return ::descriptor_table_hiphopWarmUp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
    kResFieldNumber = 2,
    kUidFieldNumber = 3,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 res = 2;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopUseStarToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopWarmUp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CHiphopWarmUp

// -------------------------------------------------------------------

// BPoster

// int32 goodsId = 1;
inline void BPoster::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BPoster::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BPoster::goodsid() const {
  // @@protoc_insertion_point(field_get:hiphop.BPoster.goodsId)
  return _internal_goodsid();
}
inline void BPoster::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void BPoster::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:hiphop.BPoster.goodsId)
}

// string pic = 2;
inline void BPoster::clear_pic() {
  pic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BPoster::pic() const {
  // @@protoc_insertion_point(field_get:hiphop.BPoster.pic)
  return _internal_pic();
}
inline void BPoster::set_pic(const std::string& value) {
  _internal_set_pic(value);
  // @@protoc_insertion_point(field_set:hiphop.BPoster.pic)
}
inline std::string* BPoster::mutable_pic() {
  // @@protoc_insertion_point(field_mutable:hiphop.BPoster.pic)
  return _internal_mutable_pic();
}
inline const std::string& BPoster::_internal_pic() const {
  return pic_.GetNoArena();
}
inline void BPoster::_internal_set_pic(const std::string& value) {
  
  pic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BPoster::set_pic(std::string&& value) {
  
  pic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hiphop.BPoster.pic)
}
inline void BPoster::set_pic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hiphop.BPoster.pic)
}
inline void BPoster::set_pic(const char* value, size_t size) {
  
  pic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hiphop.BPoster.pic)
}
inline std::string* BPoster::_internal_mutable_pic() {
  
  return pic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BPoster::release_pic() {
  // @@protoc_insertion_point(field_release:hiphop.BPoster.pic)
  
  return pic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BPoster::set_allocated_pic(std::string* pic) {
  if (pic != nullptr) {
    
  } else {
    
  }
  pic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pic);
  // @@protoc_insertion_point(field_set_allocated:hiphop.BPoster.pic)
}

// -------------------------------------------------------------------

// SHiphopWarmUp

// repeated .hiphop.BPoster posterList = 1;
inline int SHiphopWarmUp::_internal_posterlist_size() const {
  return posterlist_.size();
}
inline int SHiphopWarmUp::posterlist_size() const {
  return _internal_posterlist_size();
}
inline void SHiphopWarmUp::clear_posterlist() {
  posterlist_.Clear();
}
inline ::hiphop::BPoster* SHiphopWarmUp::mutable_posterlist(int index) {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopWarmUp.posterList)
  return posterlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BPoster >*
SHiphopWarmUp::mutable_posterlist() {
  // @@protoc_insertion_point(field_mutable_list:hiphop.SHiphopWarmUp.posterList)
  return &posterlist_;
}
inline const ::hiphop::BPoster& SHiphopWarmUp::_internal_posterlist(int index) const {
  return posterlist_.Get(index);
}
inline const ::hiphop::BPoster& SHiphopWarmUp::posterlist(int index) const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopWarmUp.posterList)
  return _internal_posterlist(index);
}
inline ::hiphop::BPoster* SHiphopWarmUp::_internal_add_posterlist() {
  return posterlist_.Add();
}
inline ::hiphop::BPoster* SHiphopWarmUp::add_posterlist() {
  // @@protoc_insertion_point(field_add:hiphop.SHiphopWarmUp.posterList)
  return _internal_add_posterlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BPoster >&
SHiphopWarmUp::posterlist() const {
  // @@protoc_insertion_point(field_list:hiphop.SHiphopWarmUp.posterList)
  return posterlist_;
}

// int64 startTime = 2;
inline void SHiphopWarmUp::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SHiphopWarmUp::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SHiphopWarmUp::starttime() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopWarmUp.startTime)
  return _internal_starttime();
}
inline void SHiphopWarmUp::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void SHiphopWarmUp::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopWarmUp.startTime)
}

// bool isFirst = 3;
inline void SHiphopWarmUp::clear_isfirst() {
  isfirst_ = false;
}
inline bool SHiphopWarmUp::_internal_isfirst() const {
  return isfirst_;
}
inline bool SHiphopWarmUp::isfirst() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopWarmUp.isFirst)
  return _internal_isfirst();
}
inline void SHiphopWarmUp::_internal_set_isfirst(bool value) {
  
  isfirst_ = value;
}
inline void SHiphopWarmUp::set_isfirst(bool value) {
  _internal_set_isfirst(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopWarmUp.isFirst)
}

// int32 currGoodsId = 4;
inline void SHiphopWarmUp::clear_currgoodsid() {
  currgoodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopWarmUp::_internal_currgoodsid() const {
  return currgoodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopWarmUp::currgoodsid() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopWarmUp.currGoodsId)
  return _internal_currgoodsid();
}
inline void SHiphopWarmUp::_internal_set_currgoodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currgoodsid_ = value;
}
inline void SHiphopWarmUp::set_currgoodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currgoodsid(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopWarmUp.currGoodsId)
}

// -------------------------------------------------------------------

// CHiphopListStarToken

// -------------------------------------------------------------------

// SHiphopListStarToken

// repeated int32 ownedGoodsId = 1;
inline int SHiphopListStarToken::_internal_ownedgoodsid_size() const {
  return ownedgoodsid_.size();
}
inline int SHiphopListStarToken::ownedgoodsid_size() const {
  return _internal_ownedgoodsid_size();
}
inline void SHiphopListStarToken::clear_ownedgoodsid() {
  ownedgoodsid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopListStarToken::_internal_ownedgoodsid(int index) const {
  return ownedgoodsid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopListStarToken::ownedgoodsid(int index) const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopListStarToken.ownedGoodsId)
  return _internal_ownedgoodsid(index);
}
inline void SHiphopListStarToken::set_ownedgoodsid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ownedgoodsid_.Set(index, value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopListStarToken.ownedGoodsId)
}
inline void SHiphopListStarToken::_internal_add_ownedgoodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ownedgoodsid_.Add(value);
}
inline void SHiphopListStarToken::add_ownedgoodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ownedgoodsid(value);
  // @@protoc_insertion_point(field_add:hiphop.SHiphopListStarToken.ownedGoodsId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SHiphopListStarToken::_internal_ownedgoodsid() const {
  return ownedgoodsid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SHiphopListStarToken::ownedgoodsid() const {
  // @@protoc_insertion_point(field_list:hiphop.SHiphopListStarToken.ownedGoodsId)
  return _internal_ownedgoodsid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SHiphopListStarToken::_internal_mutable_ownedgoodsid() {
  return &ownedgoodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SHiphopListStarToken::mutable_ownedgoodsid() {
  // @@protoc_insertion_point(field_mutable_list:hiphop.SHiphopListStarToken.ownedGoodsId)
  return _internal_mutable_ownedgoodsid();
}

// -------------------------------------------------------------------

// CHiphopGetStarToken

// int32 goodsId = 1;
inline void CHiphopGetStarToken::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopGetStarToken::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopGetStarToken::goodsid() const {
  // @@protoc_insertion_point(field_get:hiphop.CHiphopGetStarToken.goodsId)
  return _internal_goodsid();
}
inline void CHiphopGetStarToken::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CHiphopGetStarToken::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:hiphop.CHiphopGetStarToken.goodsId)
}

// -------------------------------------------------------------------

// SHiphopGetStarToken

// int32 goodsId = 1;
inline void SHiphopGetStarToken::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopGetStarToken::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopGetStarToken::goodsid() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopGetStarToken.goodsId)
  return _internal_goodsid();
}
inline void SHiphopGetStarToken::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void SHiphopGetStarToken::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopGetStarToken.goodsId)
}

// int32 res = 2;
inline void SHiphopGetStarToken::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopGetStarToken::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopGetStarToken::res() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopGetStarToken.res)
  return _internal_res();
}
inline void SHiphopGetStarToken::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void SHiphopGetStarToken::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopGetStarToken.res)
}

// -------------------------------------------------------------------

// CHiphopUseStarToken

// int32 goodsId = 1;
inline void CHiphopUseStarToken::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopUseStarToken::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopUseStarToken::goodsid() const {
  // @@protoc_insertion_point(field_get:hiphop.CHiphopUseStarToken.goodsId)
  return _internal_goodsid();
}
inline void CHiphopUseStarToken::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CHiphopUseStarToken::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:hiphop.CHiphopUseStarToken.goodsId)
}

// -------------------------------------------------------------------

// SHiphopUseStarToken

// int32 goodsId = 1;
inline void SHiphopUseStarToken::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopUseStarToken::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopUseStarToken::goodsid() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopUseStarToken.goodsId)
  return _internal_goodsid();
}
inline void SHiphopUseStarToken::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void SHiphopUseStarToken::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopUseStarToken.goodsId)
}

// int32 res = 2;
inline void SHiphopUseStarToken::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopUseStarToken::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopUseStarToken::res() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopUseStarToken.res)
  return _internal_res();
}
inline void SHiphopUseStarToken::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void SHiphopUseStarToken::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopUseStarToken.res)
}

// int32 uid = 3;
inline void SHiphopUseStarToken::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopUseStarToken::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopUseStarToken::uid() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopUseStarToken.uid)
  return _internal_uid();
}
inline void SHiphopUseStarToken::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SHiphopUseStarToken::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopUseStarToken.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hiphop

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hiphopWarmUp_2eproto
