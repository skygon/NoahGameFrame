// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pairs.proto

#include "pairs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pairs {
class CRequestPairsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRequestPairs> _instance;
} _CRequestPairs_default_instance_;
class SRequestPairsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRequestPairs> _instance;
} _SRequestPairs_default_instance_;
class SResultPairsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SResultPairs> _instance;
} _SResultPairs_default_instance_;
}  // namespace pairs
static void InitDefaultsscc_info_CRequestPairs_pairs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pairs::_CRequestPairs_default_instance_;
    new (ptr) ::pairs::CRequestPairs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pairs::CRequestPairs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRequestPairs_pairs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRequestPairs_pairs_2eproto}, {}};

static void InitDefaultsscc_info_SRequestPairs_pairs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pairs::_SRequestPairs_default_instance_;
    new (ptr) ::pairs::SRequestPairs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pairs::SRequestPairs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRequestPairs_pairs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRequestPairs_pairs_2eproto}, {}};

static void InitDefaultsscc_info_SResultPairs_pairs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pairs::_SResultPairs_default_instance_;
    new (ptr) ::pairs::SResultPairs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pairs::SResultPairs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SResultPairs_pairs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SResultPairs_pairs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pairs_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pairs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pairs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pairs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pairs::CRequestPairs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pairs::CRequestPairs, uidlist_),
  PROTOBUF_FIELD_OFFSET(::pairs::CRequestPairs, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pairs::SRequestPairs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pairs::SRequestPairs, uid_),
  PROTOBUF_FIELD_OFFSET(::pairs::SRequestPairs, type_),
  PROTOBUF_FIELD_OFFSET(::pairs::SRequestPairs, nick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pairs::SResultPairs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pairs::SResultPairs, uidlist_),
  PROTOBUF_FIELD_OFFSET(::pairs::SResultPairs, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pairs::CRequestPairs)},
  { 7, -1, sizeof(::pairs::SRequestPairs)},
  { 15, -1, sizeof(::pairs::SResultPairs)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pairs::_CRequestPairs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pairs::_SRequestPairs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pairs::_SResultPairs_default_instance_),
};

const char descriptor_table_protodef_pairs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013pairs.proto\022\005pairs\".\n\rCRequestPairs\022\017\n"
  "\007uidList\030\001 \003(\005\022\014\n\004type\030\002 \001(\005\"8\n\rSRequest"
  "Pairs\022\013\n\003uid\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\014\n\004nick"
  "\030\003 \001(\t\"-\n\014SResultPairs\022\017\n\007uidList\030\001 \003(\005\022"
  "\014\n\004type\030\002 \001(\005B!\n\030com.dayou.space.protobu"
  "fB\005Pairsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pairs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pairs_2eproto_sccs[3] = {
  &scc_info_CRequestPairs_pairs_2eproto.base,
  &scc_info_SRequestPairs_pairs_2eproto.base,
  &scc_info_SResultPairs_pairs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pairs_2eproto_once;
static bool descriptor_table_pairs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pairs_2eproto = {
  &descriptor_table_pairs_2eproto_initialized, descriptor_table_protodef_pairs_2eproto, "pairs.proto", 216,
  &descriptor_table_pairs_2eproto_once, descriptor_table_pairs_2eproto_sccs, descriptor_table_pairs_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_pairs_2eproto::offsets,
  file_level_metadata_pairs_2eproto, 3, file_level_enum_descriptors_pairs_2eproto, file_level_service_descriptors_pairs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pairs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pairs_2eproto), true);
namespace pairs {

// ===================================================================

void CRequestPairs::InitAsDefaultInstance() {
}
class CRequestPairs::_Internal {
 public:
};

CRequestPairs::CRequestPairs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pairs.CRequestPairs)
}
CRequestPairs::CRequestPairs(const CRequestPairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pairs.CRequestPairs)
}

void CRequestPairs::SharedCtor() {
  type_ = 0;
}

CRequestPairs::~CRequestPairs() {
  // @@protoc_insertion_point(destructor:pairs.CRequestPairs)
  SharedDtor();
}

void CRequestPairs::SharedDtor() {
}

void CRequestPairs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRequestPairs& CRequestPairs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRequestPairs_pairs_2eproto.base);
  return *internal_default_instance();
}


void CRequestPairs::Clear() {
// @@protoc_insertion_point(message_clear_start:pairs.CRequestPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* CRequestPairs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 uidList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRequestPairs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pairs.CRequestPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uidList = 1;
  {
    int byte_size = _uidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uidlist(), byte_size, target);
    }
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pairs.CRequestPairs)
  return target;
}

size_t CRequestPairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pairs.CRequestPairs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uidList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRequestPairs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pairs.CRequestPairs)
  GOOGLE_DCHECK_NE(&from, this);
  const CRequestPairs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRequestPairs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pairs.CRequestPairs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pairs.CRequestPairs)
    MergeFrom(*source);
  }
}

void CRequestPairs::MergeFrom(const CRequestPairs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pairs.CRequestPairs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CRequestPairs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pairs.CRequestPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRequestPairs::CopyFrom(const CRequestPairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pairs.CRequestPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRequestPairs::IsInitialized() const {
  return true;
}

void CRequestPairs::InternalSwap(CRequestPairs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uidlist_.InternalSwap(&other->uidlist_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRequestPairs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRequestPairs::InitAsDefaultInstance() {
}
class SRequestPairs::_Internal {
 public:
};

SRequestPairs::SRequestPairs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pairs.SRequestPairs)
}
SRequestPairs::SRequestPairs(const SRequestPairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pairs.SRequestPairs)
}

void SRequestPairs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRequestPairs_pairs_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(type_));
}

SRequestPairs::~SRequestPairs() {
  // @@protoc_insertion_point(destructor:pairs.SRequestPairs)
  SharedDtor();
}

void SRequestPairs::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SRequestPairs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRequestPairs& SRequestPairs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRequestPairs_pairs_2eproto.base);
  return *internal_default_instance();
}


void SRequestPairs::Clear() {
// @@protoc_insertion_point(message_clear_start:pairs.SRequestPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* SRequestPairs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pairs.SRequestPairs.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRequestPairs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pairs.SRequestPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // string nick = 3;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pairs.SRequestPairs.nick");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pairs.SRequestPairs)
  return target;
}

size_t SRequestPairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pairs.SRequestPairs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 3;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRequestPairs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pairs.SRequestPairs)
  GOOGLE_DCHECK_NE(&from, this);
  const SRequestPairs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRequestPairs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pairs.SRequestPairs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pairs.SRequestPairs)
    MergeFrom(*source);
  }
}

void SRequestPairs::MergeFrom(const SRequestPairs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pairs.SRequestPairs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SRequestPairs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pairs.SRequestPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRequestPairs::CopyFrom(const SRequestPairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pairs.SRequestPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRequestPairs::IsInitialized() const {
  return true;
}

void SRequestPairs::InternalSwap(SRequestPairs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRequestPairs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SResultPairs::InitAsDefaultInstance() {
}
class SResultPairs::_Internal {
 public:
};

SResultPairs::SResultPairs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pairs.SResultPairs)
}
SResultPairs::SResultPairs(const SResultPairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pairs.SResultPairs)
}

void SResultPairs::SharedCtor() {
  type_ = 0;
}

SResultPairs::~SResultPairs() {
  // @@protoc_insertion_point(destructor:pairs.SResultPairs)
  SharedDtor();
}

void SResultPairs::SharedDtor() {
}

void SResultPairs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SResultPairs& SResultPairs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SResultPairs_pairs_2eproto.base);
  return *internal_default_instance();
}


void SResultPairs::Clear() {
// @@protoc_insertion_point(message_clear_start:pairs.SResultPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* SResultPairs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 uidList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SResultPairs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pairs.SResultPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uidList = 1;
  {
    int byte_size = _uidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uidlist(), byte_size, target);
    }
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pairs.SResultPairs)
  return target;
}

size_t SResultPairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pairs.SResultPairs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uidList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SResultPairs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pairs.SResultPairs)
  GOOGLE_DCHECK_NE(&from, this);
  const SResultPairs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SResultPairs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pairs.SResultPairs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pairs.SResultPairs)
    MergeFrom(*source);
  }
}

void SResultPairs::MergeFrom(const SResultPairs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pairs.SResultPairs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SResultPairs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pairs.SResultPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SResultPairs::CopyFrom(const SResultPairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pairs.SResultPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SResultPairs::IsInitialized() const {
  return true;
}

void SResultPairs::InternalSwap(SResultPairs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uidlist_.InternalSwap(&other->uidlist_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SResultPairs::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pairs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pairs::CRequestPairs* Arena::CreateMaybeMessage< ::pairs::CRequestPairs >(Arena* arena) {
  return Arena::CreateInternal< ::pairs::CRequestPairs >(arena);
}
template<> PROTOBUF_NOINLINE ::pairs::SRequestPairs* Arena::CreateMaybeMessage< ::pairs::SRequestPairs >(Arena* arena) {
  return Arena::CreateInternal< ::pairs::SRequestPairs >(arena);
}
template<> PROTOBUF_NOINLINE ::pairs::SResultPairs* Arena::CreateMaybeMessage< ::pairs::SResultPairs >(Arena* arena) {
  return Arena::CreateInternal< ::pairs::SResultPairs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
