// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameTick.proto

#include "gameTick.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gameTick_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoatInfo_gameTick_2eproto;
namespace gameTick {
class SStartLineUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SStartLineUp> _instance;
} _SStartLineUp_default_instance_;
class STickStartGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STickStartGame> _instance;
} _STickStartGame_default_instance_;
class BoatInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoatInfo> _instance;
} _BoatInfo_default_instance_;
class STickOfficialStartGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STickOfficialStartGame> _instance;
} _STickOfficialStartGame_default_instance_;
class STickGameOverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STickGameOver> _instance;
} _STickGameOver_default_instance_;
}  // namespace gameTick
static void InitDefaultsscc_info_BoatInfo_gameTick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_BoatInfo_default_instance_;
    new (ptr) ::gameTick::BoatInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::BoatInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoatInfo_gameTick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoatInfo_gameTick_2eproto}, {}};

static void InitDefaultsscc_info_SStartLineUp_gameTick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_SStartLineUp_default_instance_;
    new (ptr) ::gameTick::SStartLineUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::SStartLineUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SStartLineUp_gameTick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SStartLineUp_gameTick_2eproto}, {}};

static void InitDefaultsscc_info_STickGameOver_gameTick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_STickGameOver_default_instance_;
    new (ptr) ::gameTick::STickGameOver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::STickGameOver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STickGameOver_gameTick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STickGameOver_gameTick_2eproto}, {}};

static void InitDefaultsscc_info_STickOfficialStartGame_gameTick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_STickOfficialStartGame_default_instance_;
    new (ptr) ::gameTick::STickOfficialStartGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::STickOfficialStartGame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STickOfficialStartGame_gameTick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STickOfficialStartGame_gameTick_2eproto}, {}};

static void InitDefaultsscc_info_STickStartGame_gameTick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_STickStartGame_default_instance_;
    new (ptr) ::gameTick::STickStartGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::STickStartGame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_STickStartGame_gameTick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_STickStartGame_gameTick_2eproto}, {
      &scc_info_BoatInfo_gameTick_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gameTick_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gameTick_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gameTick_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gameTick_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::SStartLineUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::SStartLineUp, gameid_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SStartLineUp, gamestartstamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::STickStartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::STickStartGame, gameid_),
  PROTOBUF_FIELD_OFFSET(::gameTick::STickStartGame, gamestartstamp_),
  PROTOBUF_FIELD_OFFSET(::gameTick::STickStartGame, officialstarttime_),
  PROTOBUF_FIELD_OFFSET(::gameTick::STickStartGame, boatinfo_),
  PROTOBUF_FIELD_OFFSET(::gameTick::STickStartGame, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::BoatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::BoatInfo, boatid_),
  PROTOBUF_FIELD_OFFSET(::gameTick::BoatInfo, leftuid_),
  PROTOBUF_FIELD_OFFSET(::gameTick::BoatInfo, rightuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::STickOfficialStartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::STickOfficialStartGame, gameid_),
  PROTOBUF_FIELD_OFFSET(::gameTick::STickOfficialStartGame, gameoverstamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::STickGameOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::STickGameOver, gameid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gameTick::SStartLineUp)},
  { 7, -1, sizeof(::gameTick::STickStartGame)},
  { 17, -1, sizeof(::gameTick::BoatInfo)},
  { 25, -1, sizeof(::gameTick::STickOfficialStartGame)},
  { 32, -1, sizeof(::gameTick::STickGameOver)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_SStartLineUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_STickStartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_BoatInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_STickOfficialStartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_STickGameOver_default_instance_),
};

const char descriptor_table_protodef_gameTick_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016gameTick.proto\022\010gameTick\"6\n\014SStartLine"
  "Up\022\016\n\006gameId\030\001 \001(\005\022\026\n\016gameStartStamp\030\002 \001"
  "(\005\"\211\001\n\016STickStartGame\022\016\n\006gameId\030\001 \001(\005\022\026\n"
  "\016gameStartStamp\030\002 \001(\005\022\031\n\021OfficialStartTi"
  "me\030\003 \001(\005\022$\n\010boatInfo\030\004 \003(\0132\022.gameTick.Bo"
  "atInfo\022\016\n\006status\030\005 \001(\005\"=\n\010BoatInfo\022\016\n\006bo"
  "atId\030\001 \001(\005\022\017\n\007leftUid\030\002 \001(\005\022\020\n\010rightUid\030"
  "\003 \001(\005\"\?\n\026STickOfficialStartGame\022\016\n\006gameI"
  "d\030\001 \001(\005\022\025\n\rgameOverStamp\030\002 \001(\005\"\037\n\rSTickG"
  "ameOver\022\016\n\006gameId\030\001 \001(\005B$\n\030com.dayou.spa"
  "ce.protobufB\010GameTickb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gameTick_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gameTick_2eproto_sccs[5] = {
  &scc_info_BoatInfo_gameTick_2eproto.base,
  &scc_info_SStartLineUp_gameTick_2eproto.base,
  &scc_info_STickGameOver_gameTick_2eproto.base,
  &scc_info_STickOfficialStartGame_gameTick_2eproto.base,
  &scc_info_STickStartGame_gameTick_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gameTick_2eproto_once;
static bool descriptor_table_gameTick_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameTick_2eproto = {
  &descriptor_table_gameTick_2eproto_initialized, descriptor_table_protodef_gameTick_2eproto, "gameTick.proto", 429,
  &descriptor_table_gameTick_2eproto_once, descriptor_table_gameTick_2eproto_sccs, descriptor_table_gameTick_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_gameTick_2eproto::offsets,
  file_level_metadata_gameTick_2eproto, 5, file_level_enum_descriptors_gameTick_2eproto, file_level_service_descriptors_gameTick_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gameTick_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gameTick_2eproto), true);
namespace gameTick {

// ===================================================================

void SStartLineUp::InitAsDefaultInstance() {
}
class SStartLineUp::_Internal {
 public:
};

SStartLineUp::SStartLineUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.SStartLineUp)
}
SStartLineUp::SStartLineUp(const SStartLineUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamestartstamp_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(gamestartstamp_));
  // @@protoc_insertion_point(copy_constructor:gameTick.SStartLineUp)
}

void SStartLineUp::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamestartstamp_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(gamestartstamp_));
}

SStartLineUp::~SStartLineUp() {
  // @@protoc_insertion_point(destructor:gameTick.SStartLineUp)
  SharedDtor();
}

void SStartLineUp::SharedDtor() {
}

void SStartLineUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SStartLineUp& SStartLineUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SStartLineUp_gameTick_2eproto.base);
  return *internal_default_instance();
}


void SStartLineUp::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.SStartLineUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamestartstamp_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(gamestartstamp_));
  _internal_metadata_.Clear();
}

const char* SStartLineUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gameStartStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gamestartstamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SStartLineUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.SStartLineUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  // int32 gameStartStamp = 2;
  if (this->gamestartstamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gamestartstamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.SStartLineUp)
  return target;
}

size_t SStartLineUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.SStartLineUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  // int32 gameStartStamp = 2;
  if (this->gamestartstamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamestartstamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SStartLineUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.SStartLineUp)
  GOOGLE_DCHECK_NE(&from, this);
  const SStartLineUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SStartLineUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.SStartLineUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.SStartLineUp)
    MergeFrom(*source);
  }
}

void SStartLineUp::MergeFrom(const SStartLineUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.SStartLineUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  if (from.gamestartstamp() != 0) {
    _internal_set_gamestartstamp(from._internal_gamestartstamp());
  }
}

void SStartLineUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.SStartLineUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SStartLineUp::CopyFrom(const SStartLineUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.SStartLineUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SStartLineUp::IsInitialized() const {
  return true;
}

void SStartLineUp::InternalSwap(SStartLineUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gameid_, other->gameid_);
  swap(gamestartstamp_, other->gamestartstamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SStartLineUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STickStartGame::InitAsDefaultInstance() {
}
class STickStartGame::_Internal {
 public:
};

STickStartGame::STickStartGame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.STickStartGame)
}
STickStartGame::STickStartGame(const STickStartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      boatinfo_(from.boatinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:gameTick.STickStartGame)
}

void STickStartGame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_STickStartGame_gameTick_2eproto.base);
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(status_));
}

STickStartGame::~STickStartGame() {
  // @@protoc_insertion_point(destructor:gameTick.STickStartGame)
  SharedDtor();
}

void STickStartGame::SharedDtor() {
}

void STickStartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STickStartGame& STickStartGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STickStartGame_gameTick_2eproto.base);
  return *internal_default_instance();
}


void STickStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.STickStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boatinfo_.Clear();
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* STickStartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gameStartStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gamestartstamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OfficialStartTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          officialstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gameTick.BoatInfo boatInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boatinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STickStartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.STickStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  // int32 gameStartStamp = 2;
  if (this->gamestartstamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gamestartstamp(), target);
  }

  // int32 OfficialStartTime = 3;
  if (this->officialstarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_officialstarttime(), target);
  }

  // repeated .gameTick.BoatInfo boatInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boatinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_boatinfo(i), target, stream);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.STickStartGame)
  return target;
}

size_t STickStartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.STickStartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gameTick.BoatInfo boatInfo = 4;
  total_size += 1UL * this->_internal_boatinfo_size();
  for (const auto& msg : this->boatinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  // int32 gameStartStamp = 2;
  if (this->gamestartstamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamestartstamp());
  }

  // int32 OfficialStartTime = 3;
  if (this->officialstarttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_officialstarttime());
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STickStartGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.STickStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const STickStartGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STickStartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.STickStartGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.STickStartGame)
    MergeFrom(*source);
  }
}

void STickStartGame::MergeFrom(const STickStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.STickStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boatinfo_.MergeFrom(from.boatinfo_);
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  if (from.gamestartstamp() != 0) {
    _internal_set_gamestartstamp(from._internal_gamestartstamp());
  }
  if (from.officialstarttime() != 0) {
    _internal_set_officialstarttime(from._internal_officialstarttime());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void STickStartGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.STickStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STickStartGame::CopyFrom(const STickStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.STickStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STickStartGame::IsInitialized() const {
  return true;
}

void STickStartGame::InternalSwap(STickStartGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  boatinfo_.InternalSwap(&other->boatinfo_);
  swap(gameid_, other->gameid_);
  swap(gamestartstamp_, other->gamestartstamp_);
  swap(officialstarttime_, other->officialstarttime_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STickStartGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoatInfo::InitAsDefaultInstance() {
}
class BoatInfo::_Internal {
 public:
};

BoatInfo::BoatInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.BoatInfo)
}
BoatInfo::BoatInfo(const BoatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&boatid_, &from.boatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightuid_) -
    reinterpret_cast<char*>(&boatid_)) + sizeof(rightuid_));
  // @@protoc_insertion_point(copy_constructor:gameTick.BoatInfo)
}

void BoatInfo::SharedCtor() {
  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightuid_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(rightuid_));
}

BoatInfo::~BoatInfo() {
  // @@protoc_insertion_point(destructor:gameTick.BoatInfo)
  SharedDtor();
}

void BoatInfo::SharedDtor() {
}

void BoatInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoatInfo& BoatInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoatInfo_gameTick_2eproto.base);
  return *internal_default_instance();
}


void BoatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.BoatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightuid_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(rightuid_));
  _internal_metadata_.Clear();
}

const char* BoatInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boatId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 leftUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leftuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rightUid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rightuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoatInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.BoatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boatid(), target);
  }

  // int32 leftUid = 2;
  if (this->leftuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leftuid(), target);
  }

  // int32 rightUid = 3;
  if (this->rightuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rightuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.BoatInfo)
  return target;
}

size_t BoatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.BoatInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boatid());
  }

  // int32 leftUid = 2;
  if (this->leftuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leftuid());
  }

  // int32 rightUid = 3;
  if (this->rightuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rightuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoatInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.BoatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BoatInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoatInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.BoatInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.BoatInfo)
    MergeFrom(*source);
  }
}

void BoatInfo::MergeFrom(const BoatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.BoatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boatid() != 0) {
    _internal_set_boatid(from._internal_boatid());
  }
  if (from.leftuid() != 0) {
    _internal_set_leftuid(from._internal_leftuid());
  }
  if (from.rightuid() != 0) {
    _internal_set_rightuid(from._internal_rightuid());
  }
}

void BoatInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.BoatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoatInfo::CopyFrom(const BoatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.BoatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoatInfo::IsInitialized() const {
  return true;
}

void BoatInfo::InternalSwap(BoatInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(boatid_, other->boatid_);
  swap(leftuid_, other->leftuid_);
  swap(rightuid_, other->rightuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoatInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STickOfficialStartGame::InitAsDefaultInstance() {
}
class STickOfficialStartGame::_Internal {
 public:
};

STickOfficialStartGame::STickOfficialStartGame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.STickOfficialStartGame)
}
STickOfficialStartGame::STickOfficialStartGame(const STickOfficialStartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameoverstamp_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(gameoverstamp_));
  // @@protoc_insertion_point(copy_constructor:gameTick.STickOfficialStartGame)
}

void STickOfficialStartGame::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameoverstamp_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(gameoverstamp_));
}

STickOfficialStartGame::~STickOfficialStartGame() {
  // @@protoc_insertion_point(destructor:gameTick.STickOfficialStartGame)
  SharedDtor();
}

void STickOfficialStartGame::SharedDtor() {
}

void STickOfficialStartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STickOfficialStartGame& STickOfficialStartGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STickOfficialStartGame_gameTick_2eproto.base);
  return *internal_default_instance();
}


void STickOfficialStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.STickOfficialStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameoverstamp_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(gameoverstamp_));
  _internal_metadata_.Clear();
}

const char* STickOfficialStartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gameOverStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gameoverstamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STickOfficialStartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.STickOfficialStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  // int32 gameOverStamp = 2;
  if (this->gameoverstamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gameoverstamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.STickOfficialStartGame)
  return target;
}

size_t STickOfficialStartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.STickOfficialStartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  // int32 gameOverStamp = 2;
  if (this->gameoverstamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameoverstamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STickOfficialStartGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.STickOfficialStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const STickOfficialStartGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STickOfficialStartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.STickOfficialStartGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.STickOfficialStartGame)
    MergeFrom(*source);
  }
}

void STickOfficialStartGame::MergeFrom(const STickOfficialStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.STickOfficialStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  if (from.gameoverstamp() != 0) {
    _internal_set_gameoverstamp(from._internal_gameoverstamp());
  }
}

void STickOfficialStartGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.STickOfficialStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STickOfficialStartGame::CopyFrom(const STickOfficialStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.STickOfficialStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STickOfficialStartGame::IsInitialized() const {
  return true;
}

void STickOfficialStartGame::InternalSwap(STickOfficialStartGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gameid_, other->gameid_);
  swap(gameoverstamp_, other->gameoverstamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STickOfficialStartGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STickGameOver::InitAsDefaultInstance() {
}
class STickGameOver::_Internal {
 public:
};

STickGameOver::STickGameOver()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.STickGameOver)
}
STickGameOver::STickGameOver(const STickGameOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:gameTick.STickGameOver)
}

void STickGameOver::SharedCtor() {
  gameid_ = 0;
}

STickGameOver::~STickGameOver() {
  // @@protoc_insertion_point(destructor:gameTick.STickGameOver)
  SharedDtor();
}

void STickGameOver::SharedDtor() {
}

void STickGameOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STickGameOver& STickGameOver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STickGameOver_gameTick_2eproto.base);
  return *internal_default_instance();
}


void STickGameOver::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.STickGameOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = 0;
  _internal_metadata_.Clear();
}

const char* STickGameOver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STickGameOver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.STickGameOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.STickGameOver)
  return target;
}

size_t STickGameOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.STickGameOver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STickGameOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.STickGameOver)
  GOOGLE_DCHECK_NE(&from, this);
  const STickGameOver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STickGameOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.STickGameOver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.STickGameOver)
    MergeFrom(*source);
  }
}

void STickGameOver::MergeFrom(const STickGameOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.STickGameOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void STickGameOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.STickGameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STickGameOver::CopyFrom(const STickGameOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.STickGameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STickGameOver::IsInitialized() const {
  return true;
}

void STickGameOver::InternalSwap(STickGameOver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STickGameOver::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gameTick
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gameTick::SStartLineUp* Arena::CreateMaybeMessage< ::gameTick::SStartLineUp >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::SStartLineUp >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::STickStartGame* Arena::CreateMaybeMessage< ::gameTick::STickStartGame >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::STickStartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::BoatInfo* Arena::CreateMaybeMessage< ::gameTick::BoatInfo >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::BoatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::STickOfficialStartGame* Arena::CreateMaybeMessage< ::gameTick::STickOfficialStartGame >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::STickOfficialStartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::STickGameOver* Arena::CreateMaybeMessage< ::gameTick::STickGameOver >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::STickGameOver >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
