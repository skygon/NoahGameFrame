// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#include "vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vehicle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BVehicleInfo_vehicle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVector3_vector_2eproto;
namespace propSync {
class CCreateVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCreateVehicle> _instance;
} _CCreateVehicle_default_instance_;
class SCreateVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCreateVehicle> _instance;
} _SCreateVehicle_default_instance_;
class COperateVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<COperateVehicle> _instance;
} _COperateVehicle_default_instance_;
class CRideVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRideVehicle> _instance;
} _CRideVehicle_default_instance_;
class SRideVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRideVehicle> _instance;
} _SRideVehicle_default_instance_;
class CResetVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CResetVehicle> _instance;
} _CResetVehicle_default_instance_;
class SResetVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SResetVehicle> _instance;
} _SResetVehicle_default_instance_;
class CDestroyVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDestroyVehicle> _instance;
} _CDestroyVehicle_default_instance_;
class SDestroyVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDestroyVehicle> _instance;
} _SDestroyVehicle_default_instance_;
class CAllVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAllVehicle> _instance;
} _CAllVehicle_default_instance_;
class SAllVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAllVehicle> _instance;
} _SAllVehicle_default_instance_;
class BVehicleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BVehicleInfo> _instance;
} _BVehicleInfo_default_instance_;
class SVehiclePosSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SVehiclePosSync> _instance;
} _SVehiclePosSync_default_instance_;
}  // namespace propSync
static void InitDefaultsscc_info_BVehicleInfo_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_BVehicleInfo_default_instance_;
    new (ptr) ::propSync::BVehicleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::BVehicleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BVehicleInfo_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BVehicleInfo_vehicle_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_CAllVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_CAllVehicle_default_instance_;
    new (ptr) ::propSync::CAllVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::CAllVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAllVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAllVehicle_vehicle_2eproto}, {}};

static void InitDefaultsscc_info_CCreateVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_CCreateVehicle_default_instance_;
    new (ptr) ::propSync::CCreateVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::CCreateVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CCreateVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CCreateVehicle_vehicle_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_CDestroyVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_CDestroyVehicle_default_instance_;
    new (ptr) ::propSync::CDestroyVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::CDestroyVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CDestroyVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CDestroyVehicle_vehicle_2eproto}, {}};

static void InitDefaultsscc_info_COperateVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_COperateVehicle_default_instance_;
    new (ptr) ::propSync::COperateVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::COperateVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_COperateVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_COperateVehicle_vehicle_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_CResetVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_CResetVehicle_default_instance_;
    new (ptr) ::propSync::CResetVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::CResetVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CResetVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CResetVehicle_vehicle_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_CRideVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_CRideVehicle_default_instance_;
    new (ptr) ::propSync::CRideVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::CRideVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRideVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRideVehicle_vehicle_2eproto}, {}};

static void InitDefaultsscc_info_SAllVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_SAllVehicle_default_instance_;
    new (ptr) ::propSync::SAllVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::SAllVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SAllVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SAllVehicle_vehicle_2eproto}, {
      &scc_info_BVehicleInfo_vehicle_2eproto.base,}};

static void InitDefaultsscc_info_SCreateVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_SCreateVehicle_default_instance_;
    new (ptr) ::propSync::SCreateVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::SCreateVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCreateVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCreateVehicle_vehicle_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_SDestroyVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_SDestroyVehicle_default_instance_;
    new (ptr) ::propSync::SDestroyVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::SDestroyVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDestroyVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SDestroyVehicle_vehicle_2eproto}, {}};

static void InitDefaultsscc_info_SResetVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_SResetVehicle_default_instance_;
    new (ptr) ::propSync::SResetVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::SResetVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SResetVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SResetVehicle_vehicle_2eproto}, {}};

static void InitDefaultsscc_info_SRideVehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_SRideVehicle_default_instance_;
    new (ptr) ::propSync::SRideVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::SRideVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRideVehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRideVehicle_vehicle_2eproto}, {}};

static void InitDefaultsscc_info_SVehiclePosSync_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::propSync::_SVehiclePosSync_default_instance_;
    new (ptr) ::propSync::SVehiclePosSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::propSync::SVehiclePosSync::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SVehiclePosSync_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SVehiclePosSync_vehicle_2eproto}, {
      &scc_info_BVehicleInfo_vehicle_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vehicle_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::CCreateVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::CCreateVehicle, vehicletype_),
  PROTOBUF_FIELD_OFFSET(::propSync::CCreateVehicle, position_),
  PROTOBUF_FIELD_OFFSET(::propSync::CCreateVehicle, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::SCreateVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::SCreateVehicle, vid_),
  PROTOBUF_FIELD_OFFSET(::propSync::SCreateVehicle, vehicletype_),
  PROTOBUF_FIELD_OFFSET(::propSync::SCreateVehicle, position_),
  PROTOBUF_FIELD_OFFSET(::propSync::SCreateVehicle, orientation_),
  PROTOBUF_FIELD_OFFSET(::propSync::SCreateVehicle, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::COperateVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::COperateVehicle, vid_),
  PROTOBUF_FIELD_OFFSET(::propSync::COperateVehicle, position_),
  PROTOBUF_FIELD_OFFSET(::propSync::COperateVehicle, orientation_),
  PROTOBUF_FIELD_OFFSET(::propSync::COperateVehicle, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::CRideVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::CRideVehicle, vid_),
  PROTOBUF_FIELD_OFFSET(::propSync::CRideVehicle, act_),
  PROTOBUF_FIELD_OFFSET(::propSync::CRideVehicle, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::SRideVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::SRideVehicle, uid_),
  PROTOBUF_FIELD_OFFSET(::propSync::SRideVehicle, vid_),
  PROTOBUF_FIELD_OFFSET(::propSync::SRideVehicle, act_),
  PROTOBUF_FIELD_OFFSET(::propSync::SRideVehicle, index_),
  PROTOBUF_FIELD_OFFSET(::propSync::SRideVehicle, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::CResetVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::CResetVehicle, vid_),
  PROTOBUF_FIELD_OFFSET(::propSync::CResetVehicle, position_),
  PROTOBUF_FIELD_OFFSET(::propSync::CResetVehicle, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::SResetVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::SResetVehicle, vid_),
  PROTOBUF_FIELD_OFFSET(::propSync::SResetVehicle, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::CDestroyVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::CDestroyVehicle, vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::SDestroyVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::SDestroyVehicle, vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::CAllVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::SAllVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::SAllVehicle, vehiclelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::BVehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::BVehicleInfo, vid_),
  PROTOBUF_FIELD_OFFSET(::propSync::BVehicleInfo, vehicletype_),
  PROTOBUF_FIELD_OFFSET(::propSync::BVehicleInfo, position_),
  PROTOBUF_FIELD_OFFSET(::propSync::BVehicleInfo, orientation_),
  PROTOBUF_FIELD_OFFSET(::propSync::BVehicleInfo, owner_),
  PROTOBUF_FIELD_OFFSET(::propSync::BVehicleInfo, uidlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::propSync::SVehiclePosSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::propSync::SVehiclePosSync, vehiclelist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::propSync::CCreateVehicle)},
  { 8, -1, sizeof(::propSync::SCreateVehicle)},
  { 18, -1, sizeof(::propSync::COperateVehicle)},
  { 27, -1, sizeof(::propSync::CRideVehicle)},
  { 35, -1, sizeof(::propSync::SRideVehicle)},
  { 45, -1, sizeof(::propSync::CResetVehicle)},
  { 53, -1, sizeof(::propSync::SResetVehicle)},
  { 60, -1, sizeof(::propSync::CDestroyVehicle)},
  { 66, -1, sizeof(::propSync::SDestroyVehicle)},
  { 72, -1, sizeof(::propSync::CAllVehicle)},
  { 77, -1, sizeof(::propSync::SAllVehicle)},
  { 83, -1, sizeof(::propSync::BVehicleInfo)},
  { 94, -1, sizeof(::propSync::SVehiclePosSync)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_CCreateVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_SCreateVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_COperateVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_CRideVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_SRideVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_CResetVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_SResetVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_CDestroyVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_SDestroyVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_CAllVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_SAllVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_BVehicleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::propSync::_SVehiclePosSync_default_instance_),
};

const char descriptor_table_protodef_vehicle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rvehicle.proto\022\010propSync\032\014vector.proto\""
  "p\n\016CCreateVehicle\022\023\n\013vehicleType\030\001 \001(\005\022\""
  "\n\010position\030\002 \001(\0132\020.vector.PVector3\022%\n\013or"
  "ientation\030\003 \001(\0132\020.vector.PVector3\"\214\001\n\016SC"
  "reateVehicle\022\013\n\003vid\030\001 \001(\005\022\023\n\013vehicleType"
  "\030\002 \001(\005\022\"\n\010position\030\003 \001(\0132\020.vector.PVecto"
  "r3\022%\n\013orientation\030\004 \001(\0132\020.vector.PVector"
  "3\022\r\n\005owner\030\005 \001(\005\"v\n\017COperateVehicle\022\013\n\003v"
  "id\030\001 \001(\005\022\"\n\010position\030\002 \001(\0132\020.vector.PVec"
  "tor3\022%\n\013orientation\030\003 \001(\0132\020.vector.PVect"
  "or3\022\013\n\003uid\030\004 \001(\005\"J\n\014CRideVehicle\022\013\n\003vid\030"
  "\001 \001(\005\022\036\n\003act\030\002 \001(\0162\021.propSync.RideAct\022\r\n"
  "\005index\030\003 \001(\005\"w\n\014SRideVehicle\022\013\n\003uid\030\001 \001("
  "\005\022\013\n\003vid\030\002 \001(\005\022\036\n\003act\030\003 \001(\0162\021.propSync.R"
  "ideAct\022\r\n\005index\030\004 \001(\005\022\036\n\003res\030\005 \001(\0162\021.pro"
  "pSync.RideRes\"g\n\rCResetVehicle\022\013\n\003vid\030\001 "
  "\001(\005\022\"\n\010position\030\002 \001(\0132\020.vector.PVector3\022"
  "%\n\013orientation\030\003 \001(\0132\020.vector.PVector3\")"
  "\n\rSResetVehicle\022\013\n\003vid\030\001 \001(\005\022\013\n\003res\030\002 \001("
  "\005\"\036\n\017CDestroyVehicle\022\013\n\003vid\030\001 \001(\005\"\036\n\017SDe"
  "stroyVehicle\022\013\n\003vid\030\001 \001(\005\"\r\n\013CAllVehicle"
  "\":\n\013SAllVehicle\022+\n\013vehicleList\030\001 \003(\0132\026.p"
  "ropSync.BVehicleInfo\"\233\001\n\014BVehicleInfo\022\013\n"
  "\003vid\030\001 \001(\005\022\023\n\013vehicleType\030\002 \001(\005\022\"\n\010posit"
  "ion\030\003 \001(\0132\020.vector.PVector3\022%\n\013orientati"
  "on\030\004 \001(\0132\020.vector.PVector3\022\r\n\005owner\030\005 \001("
  "\005\022\017\n\007uidList\030\006 \003(\005\">\n\017SVehiclePosSync\022+\n"
  "\013vehicleList\030\001 \003(\0132\026.propSync.BVehicleIn"
  "fo*F\n\007RideAct\022\024\n\020RIDE_ACT_UNKNOWN\020\000\022\021\n\rR"
  "IDE_ACT_RIDE\020\001\022\022\n\016RIDE_ACT_LEAVE\020\002*G\n\007Ri"
  "deRes\022\021\n\rRIDE_RES_FAIL\020\000\022\024\n\020RIDE_RES_SUC"
  "CESS\020\001\022\023\n\017RIDE_RES_RIDING\020\002B#\n\030com.dayou"
  ".space.protobufB\007Vehicleb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_2eproto_sccs[13] = {
  &scc_info_BVehicleInfo_vehicle_2eproto.base,
  &scc_info_CAllVehicle_vehicle_2eproto.base,
  &scc_info_CCreateVehicle_vehicle_2eproto.base,
  &scc_info_CDestroyVehicle_vehicle_2eproto.base,
  &scc_info_COperateVehicle_vehicle_2eproto.base,
  &scc_info_CResetVehicle_vehicle_2eproto.base,
  &scc_info_CRideVehicle_vehicle_2eproto.base,
  &scc_info_SAllVehicle_vehicle_2eproto.base,
  &scc_info_SCreateVehicle_vehicle_2eproto.base,
  &scc_info_SDestroyVehicle_vehicle_2eproto.base,
  &scc_info_SResetVehicle_vehicle_2eproto.base,
  &scc_info_SRideVehicle_vehicle_2eproto.base,
  &scc_info_SVehiclePosSync_vehicle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_2eproto_once;
static bool descriptor_table_vehicle_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_2eproto = {
  &descriptor_table_vehicle_2eproto_initialized, descriptor_table_protodef_vehicle_2eproto, "vehicle.proto", 1312,
  &descriptor_table_vehicle_2eproto_once, descriptor_table_vehicle_2eproto_sccs, descriptor_table_vehicle_2eproto_deps, 13, 1,
  schemas, file_default_instances, TableStruct_vehicle_2eproto::offsets,
  file_level_metadata_vehicle_2eproto, 13, file_level_enum_descriptors_vehicle_2eproto, file_level_service_descriptors_vehicle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_2eproto), true);
namespace propSync {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RideAct_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_2eproto);
  return file_level_enum_descriptors_vehicle_2eproto[0];
}
bool RideAct_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RideRes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_2eproto);
  return file_level_enum_descriptors_vehicle_2eproto[1];
}
bool RideRes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CCreateVehicle::InitAsDefaultInstance() {
  ::propSync::_CCreateVehicle_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::propSync::_CCreateVehicle_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class CCreateVehicle::_Internal {
 public:
  static const ::vector::PVector3& position(const CCreateVehicle* msg);
  static const ::vector::PVector3& orientation(const CCreateVehicle* msg);
};

const ::vector::PVector3&
CCreateVehicle::_Internal::position(const CCreateVehicle* msg) {
  return *msg->position_;
}
const ::vector::PVector3&
CCreateVehicle::_Internal::orientation(const CCreateVehicle* msg) {
  return *msg->orientation_;
}
void CCreateVehicle::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void CCreateVehicle::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
CCreateVehicle::CCreateVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.CCreateVehicle)
}
CCreateVehicle::CCreateVehicle(const CCreateVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::vector::PVector3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  vehicletype_ = from.vehicletype_;
  // @@protoc_insertion_point(copy_constructor:propSync.CCreateVehicle)
}

void CCreateVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CCreateVehicle_vehicle_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicletype_) -
      reinterpret_cast<char*>(&position_)) + sizeof(vehicletype_));
}

CCreateVehicle::~CCreateVehicle() {
  // @@protoc_insertion_point(destructor:propSync.CCreateVehicle)
  SharedDtor();
}

void CCreateVehicle::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void CCreateVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCreateVehicle& CCreateVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCreateVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void CCreateVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.CCreateVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  vehicletype_ = 0;
  _internal_metadata_.Clear();
}

const char* CCreateVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vehicleType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vehicletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCreateVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.CCreateVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vehicleType = 1;
  if (this->vehicletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicletype(), target);
  }

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .vector.PVector3 orientation = 3;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.CCreateVehicle)
  return target;
}

size_t CCreateVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.CCreateVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .vector.PVector3 orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // int32 vehicleType = 1;
  if (this->vehicletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicletype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCreateVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.CCreateVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const CCreateVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCreateVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.CCreateVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.CCreateVehicle)
    MergeFrom(*source);
  }
}

void CCreateVehicle::MergeFrom(const CCreateVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.CCreateVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::vector::PVector3::MergeFrom(from._internal_orientation());
  }
  if (from.vehicletype() != 0) {
    _internal_set_vehicletype(from._internal_vehicletype());
  }
}

void CCreateVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.CCreateVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCreateVehicle::CopyFrom(const CCreateVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.CCreateVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCreateVehicle::IsInitialized() const {
  return true;
}

void CCreateVehicle::InternalSwap(CCreateVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(vehicletype_, other->vehicletype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCreateVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCreateVehicle::InitAsDefaultInstance() {
  ::propSync::_SCreateVehicle_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::propSync::_SCreateVehicle_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class SCreateVehicle::_Internal {
 public:
  static const ::vector::PVector3& position(const SCreateVehicle* msg);
  static const ::vector::PVector3& orientation(const SCreateVehicle* msg);
};

const ::vector::PVector3&
SCreateVehicle::_Internal::position(const SCreateVehicle* msg) {
  return *msg->position_;
}
const ::vector::PVector3&
SCreateVehicle::_Internal::orientation(const SCreateVehicle* msg) {
  return *msg->orientation_;
}
void SCreateVehicle::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void SCreateVehicle::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
SCreateVehicle::SCreateVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.SCreateVehicle)
}
SCreateVehicle::SCreateVehicle(const SCreateVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::vector::PVector3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&vid_, &from.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(owner_));
  // @@protoc_insertion_point(copy_constructor:propSync.SCreateVehicle)
}

void SCreateVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCreateVehicle_vehicle_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_) -
      reinterpret_cast<char*>(&position_)) + sizeof(owner_));
}

SCreateVehicle::~SCreateVehicle() {
  // @@protoc_insertion_point(destructor:propSync.SCreateVehicle)
  SharedDtor();
}

void SCreateVehicle::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void SCreateVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCreateVehicle& SCreateVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCreateVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void SCreateVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.SCreateVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(owner_));
  _internal_metadata_.Clear();
}

const char* SCreateVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicleType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vehicletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCreateVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.SCreateVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  // int32 vehicleType = 2;
  if (this->vehicletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vehicletype(), target);
  }

  // .vector.PVector3 position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // .vector.PVector3 orientation = 4;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::orientation(this), target, stream);
  }

  // int32 owner = 5;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.SCreateVehicle)
  return target;
}

size_t SCreateVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.SCreateVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vector.PVector3 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .vector.PVector3 orientation = 4;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // int32 vid = 1;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  // int32 vehicleType = 2;
  if (this->vehicletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicletype());
  }

  // int32 owner = 5;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCreateVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.SCreateVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const SCreateVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCreateVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.SCreateVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.SCreateVehicle)
    MergeFrom(*source);
  }
}

void SCreateVehicle::MergeFrom(const SCreateVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.SCreateVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::vector::PVector3::MergeFrom(from._internal_orientation());
  }
  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from.vehicletype() != 0) {
    _internal_set_vehicletype(from._internal_vehicletype());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
}

void SCreateVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.SCreateVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCreateVehicle::CopyFrom(const SCreateVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.SCreateVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCreateVehicle::IsInitialized() const {
  return true;
}

void SCreateVehicle::InternalSwap(SCreateVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(vid_, other->vid_);
  swap(vehicletype_, other->vehicletype_);
  swap(owner_, other->owner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCreateVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void COperateVehicle::InitAsDefaultInstance() {
  ::propSync::_COperateVehicle_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::propSync::_COperateVehicle_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class COperateVehicle::_Internal {
 public:
  static const ::vector::PVector3& position(const COperateVehicle* msg);
  static const ::vector::PVector3& orientation(const COperateVehicle* msg);
};

const ::vector::PVector3&
COperateVehicle::_Internal::position(const COperateVehicle* msg) {
  return *msg->position_;
}
const ::vector::PVector3&
COperateVehicle::_Internal::orientation(const COperateVehicle* msg) {
  return *msg->orientation_;
}
void COperateVehicle::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void COperateVehicle::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
COperateVehicle::COperateVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.COperateVehicle)
}
COperateVehicle::COperateVehicle(const COperateVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::vector::PVector3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&vid_, &from.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:propSync.COperateVehicle)
}

void COperateVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_COperateVehicle_vehicle_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(uid_));
}

COperateVehicle::~COperateVehicle() {
  // @@protoc_insertion_point(destructor:propSync.COperateVehicle)
  SharedDtor();
}

void COperateVehicle::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void COperateVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COperateVehicle& COperateVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_COperateVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void COperateVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.COperateVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* COperateVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* COperateVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.COperateVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .vector.PVector3 orientation = 3;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.COperateVehicle)
  return target;
}

size_t COperateVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.COperateVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .vector.PVector3 orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // int32 vid = 1;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COperateVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.COperateVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const COperateVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<COperateVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.COperateVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.COperateVehicle)
    MergeFrom(*source);
  }
}

void COperateVehicle::MergeFrom(const COperateVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.COperateVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::vector::PVector3::MergeFrom(from._internal_orientation());
  }
  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void COperateVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.COperateVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COperateVehicle::CopyFrom(const COperateVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.COperateVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COperateVehicle::IsInitialized() const {
  return true;
}

void COperateVehicle::InternalSwap(COperateVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(vid_, other->vid_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata COperateVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CRideVehicle::InitAsDefaultInstance() {
}
class CRideVehicle::_Internal {
 public:
};

CRideVehicle::CRideVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.CRideVehicle)
}
CRideVehicle::CRideVehicle(const CRideVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vid_, &from.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:propSync.CRideVehicle)
}

void CRideVehicle::SharedCtor() {
  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(index_));
}

CRideVehicle::~CRideVehicle() {
  // @@protoc_insertion_point(destructor:propSync.CRideVehicle)
  SharedDtor();
}

void CRideVehicle::SharedDtor() {
}

void CRideVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRideVehicle& CRideVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRideVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void CRideVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.CRideVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

const char* CRideVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .propSync.RideAct act = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_act(static_cast<::propSync::RideAct>(val));
        } else goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRideVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.CRideVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  // .propSync.RideAct act = 2;
  if (this->act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_act(), target);
  }

  // int32 index = 3;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.CRideVehicle)
  return target;
}

size_t CRideVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.CRideVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  // .propSync.RideAct act = 2;
  if (this->act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_act());
  }

  // int32 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRideVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.CRideVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const CRideVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRideVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.CRideVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.CRideVehicle)
    MergeFrom(*source);
  }
}

void CRideVehicle::MergeFrom(const CRideVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.CRideVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from.act() != 0) {
    _internal_set_act(from._internal_act());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void CRideVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.CRideVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRideVehicle::CopyFrom(const CRideVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.CRideVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRideVehicle::IsInitialized() const {
  return true;
}

void CRideVehicle::InternalSwap(CRideVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vid_, other->vid_);
  swap(act_, other->act_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRideVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRideVehicle::InitAsDefaultInstance() {
}
class SRideVehicle::_Internal {
 public:
};

SRideVehicle::SRideVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.SRideVehicle)
}
SRideVehicle::SRideVehicle(const SRideVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(res_));
  // @@protoc_insertion_point(copy_constructor:propSync.SRideVehicle)
}

void SRideVehicle::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(res_));
}

SRideVehicle::~SRideVehicle() {
  // @@protoc_insertion_point(destructor:propSync.SRideVehicle)
  SharedDtor();
}

void SRideVehicle::SharedDtor() {
}

void SRideVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRideVehicle& SRideVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRideVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void SRideVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.SRideVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(res_));
  _internal_metadata_.Clear();
}

const char* SRideVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .propSync.RideAct act = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_act(static_cast<::propSync::RideAct>(val));
        } else goto handle_unusual;
        continue;
      // int32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .propSync.RideRes res = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::propSync::RideRes>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRideVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.SRideVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 vid = 2;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vid(), target);
  }

  // .propSync.RideAct act = 3;
  if (this->act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_act(), target);
  }

  // int32 index = 4;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_index(), target);
  }

  // .propSync.RideRes res = 5;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.SRideVehicle)
  return target;
}

size_t SRideVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.SRideVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 vid = 2;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  // .propSync.RideAct act = 3;
  if (this->act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_act());
  }

  // int32 index = 4;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // .propSync.RideRes res = 5;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRideVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.SRideVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const SRideVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRideVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.SRideVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.SRideVehicle)
    MergeFrom(*source);
  }
}

void SRideVehicle::MergeFrom(const SRideVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.SRideVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from.act() != 0) {
    _internal_set_act(from._internal_act());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void SRideVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.SRideVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRideVehicle::CopyFrom(const SRideVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.SRideVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRideVehicle::IsInitialized() const {
  return true;
}

void SRideVehicle::InternalSwap(SRideVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(vid_, other->vid_);
  swap(act_, other->act_);
  swap(index_, other->index_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRideVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CResetVehicle::InitAsDefaultInstance() {
  ::propSync::_CResetVehicle_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::propSync::_CResetVehicle_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class CResetVehicle::_Internal {
 public:
  static const ::vector::PVector3& position(const CResetVehicle* msg);
  static const ::vector::PVector3& orientation(const CResetVehicle* msg);
};

const ::vector::PVector3&
CResetVehicle::_Internal::position(const CResetVehicle* msg) {
  return *msg->position_;
}
const ::vector::PVector3&
CResetVehicle::_Internal::orientation(const CResetVehicle* msg) {
  return *msg->orientation_;
}
void CResetVehicle::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void CResetVehicle::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
CResetVehicle::CResetVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.CResetVehicle)
}
CResetVehicle::CResetVehicle(const CResetVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::vector::PVector3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  vid_ = from.vid_;
  // @@protoc_insertion_point(copy_constructor:propSync.CResetVehicle)
}

void CResetVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CResetVehicle_vehicle_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(vid_));
}

CResetVehicle::~CResetVehicle() {
  // @@protoc_insertion_point(destructor:propSync.CResetVehicle)
  SharedDtor();
}

void CResetVehicle::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void CResetVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CResetVehicle& CResetVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CResetVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void CResetVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.CResetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  vid_ = 0;
  _internal_metadata_.Clear();
}

const char* CResetVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CResetVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.CResetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .vector.PVector3 orientation = 3;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.CResetVehicle)
  return target;
}

size_t CResetVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.CResetVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .vector.PVector3 orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // int32 vid = 1;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CResetVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.CResetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const CResetVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CResetVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.CResetVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.CResetVehicle)
    MergeFrom(*source);
  }
}

void CResetVehicle::MergeFrom(const CResetVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.CResetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::vector::PVector3::MergeFrom(from._internal_orientation());
  }
  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
}

void CResetVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.CResetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CResetVehicle::CopyFrom(const CResetVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.CResetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CResetVehicle::IsInitialized() const {
  return true;
}

void CResetVehicle::InternalSwap(CResetVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(vid_, other->vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CResetVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SResetVehicle::InitAsDefaultInstance() {
}
class SResetVehicle::_Internal {
 public:
};

SResetVehicle::SResetVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.SResetVehicle)
}
SResetVehicle::SResetVehicle(const SResetVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vid_, &from.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(res_));
  // @@protoc_insertion_point(copy_constructor:propSync.SResetVehicle)
}

void SResetVehicle::SharedCtor() {
  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(res_));
}

SResetVehicle::~SResetVehicle() {
  // @@protoc_insertion_point(destructor:propSync.SResetVehicle)
  SharedDtor();
}

void SResetVehicle::SharedDtor() {
}

void SResetVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SResetVehicle& SResetVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SResetVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void SResetVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.SResetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(res_));
  _internal_metadata_.Clear();
}

const char* SResetVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SResetVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.SResetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  // int32 res = 2;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.SResetVehicle)
  return target;
}

size_t SResetVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.SResetVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  // int32 res = 2;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SResetVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.SResetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const SResetVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SResetVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.SResetVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.SResetVehicle)
    MergeFrom(*source);
  }
}

void SResetVehicle::MergeFrom(const SResetVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.SResetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void SResetVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.SResetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SResetVehicle::CopyFrom(const SResetVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.SResetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SResetVehicle::IsInitialized() const {
  return true;
}

void SResetVehicle::InternalSwap(SResetVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vid_, other->vid_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SResetVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDestroyVehicle::InitAsDefaultInstance() {
}
class CDestroyVehicle::_Internal {
 public:
};

CDestroyVehicle::CDestroyVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.CDestroyVehicle)
}
CDestroyVehicle::CDestroyVehicle(const CDestroyVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vid_ = from.vid_;
  // @@protoc_insertion_point(copy_constructor:propSync.CDestroyVehicle)
}

void CDestroyVehicle::SharedCtor() {
  vid_ = 0;
}

CDestroyVehicle::~CDestroyVehicle() {
  // @@protoc_insertion_point(destructor:propSync.CDestroyVehicle)
  SharedDtor();
}

void CDestroyVehicle::SharedDtor() {
}

void CDestroyVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDestroyVehicle& CDestroyVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDestroyVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void CDestroyVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.CDestroyVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vid_ = 0;
  _internal_metadata_.Clear();
}

const char* CDestroyVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDestroyVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.CDestroyVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.CDestroyVehicle)
  return target;
}

size_t CDestroyVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.CDestroyVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDestroyVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.CDestroyVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const CDestroyVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDestroyVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.CDestroyVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.CDestroyVehicle)
    MergeFrom(*source);
  }
}

void CDestroyVehicle::MergeFrom(const CDestroyVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.CDestroyVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
}

void CDestroyVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.CDestroyVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDestroyVehicle::CopyFrom(const CDestroyVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.CDestroyVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDestroyVehicle::IsInitialized() const {
  return true;
}

void CDestroyVehicle::InternalSwap(CDestroyVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vid_, other->vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDestroyVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SDestroyVehicle::InitAsDefaultInstance() {
}
class SDestroyVehicle::_Internal {
 public:
};

SDestroyVehicle::SDestroyVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.SDestroyVehicle)
}
SDestroyVehicle::SDestroyVehicle(const SDestroyVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vid_ = from.vid_;
  // @@protoc_insertion_point(copy_constructor:propSync.SDestroyVehicle)
}

void SDestroyVehicle::SharedCtor() {
  vid_ = 0;
}

SDestroyVehicle::~SDestroyVehicle() {
  // @@protoc_insertion_point(destructor:propSync.SDestroyVehicle)
  SharedDtor();
}

void SDestroyVehicle::SharedDtor() {
}

void SDestroyVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDestroyVehicle& SDestroyVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDestroyVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void SDestroyVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.SDestroyVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vid_ = 0;
  _internal_metadata_.Clear();
}

const char* SDestroyVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDestroyVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.SDestroyVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.SDestroyVehicle)
  return target;
}

size_t SDestroyVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.SDestroyVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDestroyVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.SDestroyVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const SDestroyVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDestroyVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.SDestroyVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.SDestroyVehicle)
    MergeFrom(*source);
  }
}

void SDestroyVehicle::MergeFrom(const SDestroyVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.SDestroyVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
}

void SDestroyVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.SDestroyVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDestroyVehicle::CopyFrom(const SDestroyVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.SDestroyVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDestroyVehicle::IsInitialized() const {
  return true;
}

void SDestroyVehicle::InternalSwap(SDestroyVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vid_, other->vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDestroyVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAllVehicle::InitAsDefaultInstance() {
}
class CAllVehicle::_Internal {
 public:
};

CAllVehicle::CAllVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.CAllVehicle)
}
CAllVehicle::CAllVehicle(const CAllVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:propSync.CAllVehicle)
}

void CAllVehicle::SharedCtor() {
}

CAllVehicle::~CAllVehicle() {
  // @@protoc_insertion_point(destructor:propSync.CAllVehicle)
  SharedDtor();
}

void CAllVehicle::SharedDtor() {
}

void CAllVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAllVehicle& CAllVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAllVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void CAllVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.CAllVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CAllVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAllVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.CAllVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.CAllVehicle)
  return target;
}

size_t CAllVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.CAllVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAllVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.CAllVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const CAllVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAllVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.CAllVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.CAllVehicle)
    MergeFrom(*source);
  }
}

void CAllVehicle::MergeFrom(const CAllVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.CAllVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAllVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.CAllVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAllVehicle::CopyFrom(const CAllVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.CAllVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAllVehicle::IsInitialized() const {
  return true;
}

void CAllVehicle::InternalSwap(CAllVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAllVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAllVehicle::InitAsDefaultInstance() {
}
class SAllVehicle::_Internal {
 public:
};

SAllVehicle::SAllVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.SAllVehicle)
}
SAllVehicle::SAllVehicle(const SAllVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vehiclelist_(from.vehiclelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:propSync.SAllVehicle)
}

void SAllVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SAllVehicle_vehicle_2eproto.base);
}

SAllVehicle::~SAllVehicle() {
  // @@protoc_insertion_point(destructor:propSync.SAllVehicle)
  SharedDtor();
}

void SAllVehicle::SharedDtor() {
}

void SAllVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAllVehicle& SAllVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAllVehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void SAllVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.SAllVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehiclelist_.Clear();
  _internal_metadata_.Clear();
}

const char* SAllVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .propSync.BVehicleInfo vehicleList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehiclelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAllVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.SAllVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .propSync.BVehicleInfo vehicleList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehiclelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vehiclelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.SAllVehicle)
  return target;
}

size_t SAllVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.SAllVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .propSync.BVehicleInfo vehicleList = 1;
  total_size += 1UL * this->_internal_vehiclelist_size();
  for (const auto& msg : this->vehiclelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAllVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.SAllVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const SAllVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAllVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.SAllVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.SAllVehicle)
    MergeFrom(*source);
  }
}

void SAllVehicle::MergeFrom(const SAllVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.SAllVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehiclelist_.MergeFrom(from.vehiclelist_);
}

void SAllVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.SAllVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAllVehicle::CopyFrom(const SAllVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.SAllVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAllVehicle::IsInitialized() const {
  return true;
}

void SAllVehicle::InternalSwap(SAllVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vehiclelist_.InternalSwap(&other->vehiclelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAllVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BVehicleInfo::InitAsDefaultInstance() {
  ::propSync::_BVehicleInfo_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::propSync::_BVehicleInfo_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class BVehicleInfo::_Internal {
 public:
  static const ::vector::PVector3& position(const BVehicleInfo* msg);
  static const ::vector::PVector3& orientation(const BVehicleInfo* msg);
};

const ::vector::PVector3&
BVehicleInfo::_Internal::position(const BVehicleInfo* msg) {
  return *msg->position_;
}
const ::vector::PVector3&
BVehicleInfo::_Internal::orientation(const BVehicleInfo* msg) {
  return *msg->orientation_;
}
void BVehicleInfo::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void BVehicleInfo::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
BVehicleInfo::BVehicleInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.BVehicleInfo)
}
BVehicleInfo::BVehicleInfo(const BVehicleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::vector::PVector3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&vid_, &from.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(owner_));
  // @@protoc_insertion_point(copy_constructor:propSync.BVehicleInfo)
}

void BVehicleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BVehicleInfo_vehicle_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_) -
      reinterpret_cast<char*>(&position_)) + sizeof(owner_));
}

BVehicleInfo::~BVehicleInfo() {
  // @@protoc_insertion_point(destructor:propSync.BVehicleInfo)
  SharedDtor();
}

void BVehicleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void BVehicleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BVehicleInfo& BVehicleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BVehicleInfo_vehicle_2eproto.base);
  return *internal_default_instance();
}


void BVehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.BVehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(owner_));
  _internal_metadata_.Clear();
}

const char* BVehicleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicleType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vehicletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 uidList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BVehicleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.BVehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  // int32 vehicleType = 2;
  if (this->vehicletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vehicletype(), target);
  }

  // .vector.PVector3 position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // .vector.PVector3 orientation = 4;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::orientation(this), target, stream);
  }

  // int32 owner = 5;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_owner(), target);
  }

  // repeated int32 uidList = 6;
  {
    int byte_size = _uidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_uidlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.BVehicleInfo)
  return target;
}

size_t BVehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.BVehicleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uidList = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .vector.PVector3 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .vector.PVector3 orientation = 4;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // int32 vid = 1;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  // int32 vehicleType = 2;
  if (this->vehicletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicletype());
  }

  // int32 owner = 5;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BVehicleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.BVehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BVehicleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BVehicleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.BVehicleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.BVehicleInfo)
    MergeFrom(*source);
  }
}

void BVehicleInfo::MergeFrom(const BVehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.BVehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::vector::PVector3::MergeFrom(from._internal_orientation());
  }
  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from.vehicletype() != 0) {
    _internal_set_vehicletype(from._internal_vehicletype());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
}

void BVehicleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.BVehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BVehicleInfo::CopyFrom(const BVehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.BVehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BVehicleInfo::IsInitialized() const {
  return true;
}

void BVehicleInfo::InternalSwap(BVehicleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uidlist_.InternalSwap(&other->uidlist_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(vid_, other->vid_);
  swap(vehicletype_, other->vehicletype_);
  swap(owner_, other->owner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BVehicleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SVehiclePosSync::InitAsDefaultInstance() {
}
class SVehiclePosSync::_Internal {
 public:
};

SVehiclePosSync::SVehiclePosSync()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:propSync.SVehiclePosSync)
}
SVehiclePosSync::SVehiclePosSync(const SVehiclePosSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vehiclelist_(from.vehiclelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:propSync.SVehiclePosSync)
}

void SVehiclePosSync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SVehiclePosSync_vehicle_2eproto.base);
}

SVehiclePosSync::~SVehiclePosSync() {
  // @@protoc_insertion_point(destructor:propSync.SVehiclePosSync)
  SharedDtor();
}

void SVehiclePosSync::SharedDtor() {
}

void SVehiclePosSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SVehiclePosSync& SVehiclePosSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SVehiclePosSync_vehicle_2eproto.base);
  return *internal_default_instance();
}


void SVehiclePosSync::Clear() {
// @@protoc_insertion_point(message_clear_start:propSync.SVehiclePosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehiclelist_.Clear();
  _internal_metadata_.Clear();
}

const char* SVehiclePosSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .propSync.BVehicleInfo vehicleList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehiclelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SVehiclePosSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:propSync.SVehiclePosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .propSync.BVehicleInfo vehicleList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehiclelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vehiclelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:propSync.SVehiclePosSync)
  return target;
}

size_t SVehiclePosSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:propSync.SVehiclePosSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .propSync.BVehicleInfo vehicleList = 1;
  total_size += 1UL * this->_internal_vehiclelist_size();
  for (const auto& msg : this->vehiclelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SVehiclePosSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:propSync.SVehiclePosSync)
  GOOGLE_DCHECK_NE(&from, this);
  const SVehiclePosSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SVehiclePosSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:propSync.SVehiclePosSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:propSync.SVehiclePosSync)
    MergeFrom(*source);
  }
}

void SVehiclePosSync::MergeFrom(const SVehiclePosSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:propSync.SVehiclePosSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehiclelist_.MergeFrom(from.vehiclelist_);
}

void SVehiclePosSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:propSync.SVehiclePosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SVehiclePosSync::CopyFrom(const SVehiclePosSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:propSync.SVehiclePosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVehiclePosSync::IsInitialized() const {
  return true;
}

void SVehiclePosSync::InternalSwap(SVehiclePosSync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vehiclelist_.InternalSwap(&other->vehiclelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SVehiclePosSync::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace propSync
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::propSync::CCreateVehicle* Arena::CreateMaybeMessage< ::propSync::CCreateVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::CCreateVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::SCreateVehicle* Arena::CreateMaybeMessage< ::propSync::SCreateVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::SCreateVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::COperateVehicle* Arena::CreateMaybeMessage< ::propSync::COperateVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::COperateVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::CRideVehicle* Arena::CreateMaybeMessage< ::propSync::CRideVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::CRideVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::SRideVehicle* Arena::CreateMaybeMessage< ::propSync::SRideVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::SRideVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::CResetVehicle* Arena::CreateMaybeMessage< ::propSync::CResetVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::CResetVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::SResetVehicle* Arena::CreateMaybeMessage< ::propSync::SResetVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::SResetVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::CDestroyVehicle* Arena::CreateMaybeMessage< ::propSync::CDestroyVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::CDestroyVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::SDestroyVehicle* Arena::CreateMaybeMessage< ::propSync::SDestroyVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::SDestroyVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::CAllVehicle* Arena::CreateMaybeMessage< ::propSync::CAllVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::CAllVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::SAllVehicle* Arena::CreateMaybeMessage< ::propSync::SAllVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::SAllVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::BVehicleInfo* Arena::CreateMaybeMessage< ::propSync::BVehicleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::BVehicleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::propSync::SVehiclePosSync* Arena::CreateMaybeMessage< ::propSync::SVehiclePosSync >(Arena* arena) {
  return Arena::CreateInternal< ::propSync::SVehiclePosSync >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
