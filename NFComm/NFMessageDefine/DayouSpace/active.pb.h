// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: active.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_active_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_active_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "countdown.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_active_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_active_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_active_2eproto;
namespace active {
class CActive;
class CActiveDefaultTypeInternal;
extern CActiveDefaultTypeInternal _CActive_default_instance_;
class SActive;
class SActiveDefaultTypeInternal;
extern SActiveDefaultTypeInternal _SActive_default_instance_;
class activeMsg;
class activeMsgDefaultTypeInternal;
extern activeMsgDefaultTypeInternal _activeMsg_default_instance_;
}  // namespace active
PROTOBUF_NAMESPACE_OPEN
template<> ::active::CActive* Arena::CreateMaybeMessage<::active::CActive>(Arena*);
template<> ::active::SActive* Arena::CreateMaybeMessage<::active::SActive>(Arena*);
template<> ::active::activeMsg* Arena::CreateMaybeMessage<::active::activeMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace active {

// ===================================================================

class activeMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:active.activeMsg) */ {
 public:
  activeMsg();
  virtual ~activeMsg();

  activeMsg(const activeMsg& from);
  activeMsg(activeMsg&& from) noexcept
    : activeMsg() {
    *this = ::std::move(from);
  }

  inline activeMsg& operator=(const activeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline activeMsg& operator=(activeMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const activeMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const activeMsg* internal_default_instance() {
    return reinterpret_cast<const activeMsg*>(
               &_activeMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(activeMsg& a, activeMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(activeMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline activeMsg* New() const final {
    return CreateMaybeMessage<activeMsg>(nullptr);
  }

  activeMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<activeMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const activeMsg& from);
  void MergeFrom(const activeMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(activeMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "active.activeMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_active_2eproto);
    return ::descriptor_table_active_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountdownFieldNumber = 2,
    kActiveIDFieldNumber = 1,
  };
  // .countdown.SCountdown countdown = 2;
  bool has_countdown() const;
  private:
  bool _internal_has_countdown() const;
  public:
  void clear_countdown();
  const ::countdown::SCountdown& countdown() const;
  ::countdown::SCountdown* release_countdown();
  ::countdown::SCountdown* mutable_countdown();
  void set_allocated_countdown(::countdown::SCountdown* countdown);
  private:
  const ::countdown::SCountdown& _internal_countdown() const;
  ::countdown::SCountdown* _internal_mutable_countdown();
  public:

  // int32 activeID = 1;
  void clear_activeid();
  ::PROTOBUF_NAMESPACE_ID::int32 activeid() const;
  void set_activeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activeid() const;
  void _internal_set_activeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:active.activeMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::countdown::SCountdown* countdown_;
  ::PROTOBUF_NAMESPACE_ID::int32 activeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_active_2eproto;
};
// -------------------------------------------------------------------

class CActive :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:active.CActive) */ {
 public:
  CActive();
  virtual ~CActive();

  CActive(const CActive& from);
  CActive(CActive&& from) noexcept
    : CActive() {
    *this = ::std::move(from);
  }

  inline CActive& operator=(const CActive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CActive& operator=(CActive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CActive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CActive* internal_default_instance() {
    return reinterpret_cast<const CActive*>(
               &_CActive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CActive& a, CActive& b) {
    a.Swap(&b);
  }
  inline void Swap(CActive* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CActive* New() const final {
    return CreateMaybeMessage<CActive>(nullptr);
  }

  CActive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CActive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CActive& from);
  void MergeFrom(const CActive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CActive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "active.CActive";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_active_2eproto);
    return ::descriptor_table_active_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:active.CActive)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_active_2eproto;
};
// -------------------------------------------------------------------

class SActive :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:active.SActive) */ {
 public:
  SActive();
  virtual ~SActive();

  SActive(const SActive& from);
  SActive(SActive&& from) noexcept
    : SActive() {
    *this = ::std::move(from);
  }

  inline SActive& operator=(const SActive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SActive& operator=(SActive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SActive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SActive* internal_default_instance() {
    return reinterpret_cast<const SActive*>(
               &_SActive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SActive& a, SActive& b) {
    a.Swap(&b);
  }
  inline void Swap(SActive* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SActive* New() const final {
    return CreateMaybeMessage<SActive>(nullptr);
  }

  SActive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SActive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SActive& from);
  void MergeFrom(const SActive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SActive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "active.SActive";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_active_2eproto);
    return ::descriptor_table_active_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveMsgListFieldNumber = 1,
    kServerTimeFieldNumber = 2,
  };
  // repeated .active.activeMsg activeMsgList = 1;
  int activemsglist_size() const;
  private:
  int _internal_activemsglist_size() const;
  public:
  void clear_activemsglist();
  ::active::activeMsg* mutable_activemsglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::active::activeMsg >*
      mutable_activemsglist();
  private:
  const ::active::activeMsg& _internal_activemsglist(int index) const;
  ::active::activeMsg* _internal_add_activemsglist();
  public:
  const ::active::activeMsg& activemsglist(int index) const;
  ::active::activeMsg* add_activemsglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::active::activeMsg >&
      activemsglist() const;

  // int64 serverTime = 2;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:active.SActive)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::active::activeMsg > activemsglist_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_active_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// activeMsg

// int32 activeID = 1;
inline void activeMsg::clear_activeid() {
  activeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activeMsg::_internal_activeid() const {
  return activeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activeMsg::activeid() const {
  // @@protoc_insertion_point(field_get:active.activeMsg.activeID)
  return _internal_activeid();
}
inline void activeMsg::_internal_set_activeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activeid_ = value;
}
inline void activeMsg::set_activeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activeid(value);
  // @@protoc_insertion_point(field_set:active.activeMsg.activeID)
}

// .countdown.SCountdown countdown = 2;
inline bool activeMsg::_internal_has_countdown() const {
  return this != internal_default_instance() && countdown_ != nullptr;
}
inline bool activeMsg::has_countdown() const {
  return _internal_has_countdown();
}
inline const ::countdown::SCountdown& activeMsg::_internal_countdown() const {
  const ::countdown::SCountdown* p = countdown_;
  return p != nullptr ? *p : *reinterpret_cast<const ::countdown::SCountdown*>(
      &::countdown::_SCountdown_default_instance_);
}
inline const ::countdown::SCountdown& activeMsg::countdown() const {
  // @@protoc_insertion_point(field_get:active.activeMsg.countdown)
  return _internal_countdown();
}
inline ::countdown::SCountdown* activeMsg::release_countdown() {
  // @@protoc_insertion_point(field_release:active.activeMsg.countdown)
  
  ::countdown::SCountdown* temp = countdown_;
  countdown_ = nullptr;
  return temp;
}
inline ::countdown::SCountdown* activeMsg::_internal_mutable_countdown() {
  
  if (countdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::countdown::SCountdown>(GetArenaNoVirtual());
    countdown_ = p;
  }
  return countdown_;
}
inline ::countdown::SCountdown* activeMsg::mutable_countdown() {
  // @@protoc_insertion_point(field_mutable:active.activeMsg.countdown)
  return _internal_mutable_countdown();
}
inline void activeMsg::set_allocated_countdown(::countdown::SCountdown* countdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(countdown_);
  }
  if (countdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      countdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, countdown, submessage_arena);
    }
    
  } else {
    
  }
  countdown_ = countdown;
  // @@protoc_insertion_point(field_set_allocated:active.activeMsg.countdown)
}

// -------------------------------------------------------------------

// CActive

// int32 uid = 1;
inline void CActive::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CActive::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CActive::uid() const {
  // @@protoc_insertion_point(field_get:active.CActive.uid)
  return _internal_uid();
}
inline void CActive::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CActive::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:active.CActive.uid)
}

// -------------------------------------------------------------------

// SActive

// repeated .active.activeMsg activeMsgList = 1;
inline int SActive::_internal_activemsglist_size() const {
  return activemsglist_.size();
}
inline int SActive::activemsglist_size() const {
  return _internal_activemsglist_size();
}
inline void SActive::clear_activemsglist() {
  activemsglist_.Clear();
}
inline ::active::activeMsg* SActive::mutable_activemsglist(int index) {
  // @@protoc_insertion_point(field_mutable:active.SActive.activeMsgList)
  return activemsglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::active::activeMsg >*
SActive::mutable_activemsglist() {
  // @@protoc_insertion_point(field_mutable_list:active.SActive.activeMsgList)
  return &activemsglist_;
}
inline const ::active::activeMsg& SActive::_internal_activemsglist(int index) const {
  return activemsglist_.Get(index);
}
inline const ::active::activeMsg& SActive::activemsglist(int index) const {
  // @@protoc_insertion_point(field_get:active.SActive.activeMsgList)
  return _internal_activemsglist(index);
}
inline ::active::activeMsg* SActive::_internal_add_activemsglist() {
  return activemsglist_.Add();
}
inline ::active::activeMsg* SActive::add_activemsglist() {
  // @@protoc_insertion_point(field_add:active.SActive.activeMsgList)
  return _internal_add_activemsglist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::active::activeMsg >&
SActive::activemsglist() const {
  // @@protoc_insertion_point(field_list:active.SActive.activeMsgList)
  return activemsglist_;
}

// int64 serverTime = 2;
inline void SActive::clear_servertime() {
  servertime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SActive::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SActive::servertime() const {
  // @@protoc_insertion_point(field_get:active.SActive.serverTime)
  return _internal_servertime();
}
inline void SActive::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servertime_ = value;
}
inline void SActive::set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:active.SActive.serverTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace active

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_active_2eproto
