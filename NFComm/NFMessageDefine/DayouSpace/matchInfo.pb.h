// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_matchInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_matchInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "award.pb.h"
#include "countdown.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_matchInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_matchInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_matchInfo_2eproto;
namespace matchInfo {
class CMatchEnd;
class CMatchEndDefaultTypeInternal;
extern CMatchEndDefaultTypeInternal _CMatchEnd_default_instance_;
class CMatchStart;
class CMatchStartDefaultTypeInternal;
extern CMatchStartDefaultTypeInternal _CMatchStart_default_instance_;
class SMatchEnd;
class SMatchEndDefaultTypeInternal;
extern SMatchEndDefaultTypeInternal _SMatchEnd_default_instance_;
class SMatchStart;
class SMatchStartDefaultTypeInternal;
extern SMatchStartDefaultTypeInternal _SMatchStart_default_instance_;
class SMatchStartAndEndNotice;
class SMatchStartAndEndNoticeDefaultTypeInternal;
extern SMatchStartAndEndNoticeDefaultTypeInternal _SMatchStartAndEndNotice_default_instance_;
}  // namespace matchInfo
PROTOBUF_NAMESPACE_OPEN
template<> ::matchInfo::CMatchEnd* Arena::CreateMaybeMessage<::matchInfo::CMatchEnd>(Arena*);
template<> ::matchInfo::CMatchStart* Arena::CreateMaybeMessage<::matchInfo::CMatchStart>(Arena*);
template<> ::matchInfo::SMatchEnd* Arena::CreateMaybeMessage<::matchInfo::SMatchEnd>(Arena*);
template<> ::matchInfo::SMatchStart* Arena::CreateMaybeMessage<::matchInfo::SMatchStart>(Arena*);
template<> ::matchInfo::SMatchStartAndEndNotice* Arena::CreateMaybeMessage<::matchInfo::SMatchStartAndEndNotice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace matchInfo {

// ===================================================================

class SMatchStartAndEndNotice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matchInfo.SMatchStartAndEndNotice) */ {
 public:
  SMatchStartAndEndNotice();
  virtual ~SMatchStartAndEndNotice();

  SMatchStartAndEndNotice(const SMatchStartAndEndNotice& from);
  SMatchStartAndEndNotice(SMatchStartAndEndNotice&& from) noexcept
    : SMatchStartAndEndNotice() {
    *this = ::std::move(from);
  }

  inline SMatchStartAndEndNotice& operator=(const SMatchStartAndEndNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMatchStartAndEndNotice& operator=(SMatchStartAndEndNotice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMatchStartAndEndNotice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMatchStartAndEndNotice* internal_default_instance() {
    return reinterpret_cast<const SMatchStartAndEndNotice*>(
               &_SMatchStartAndEndNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SMatchStartAndEndNotice& a, SMatchStartAndEndNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(SMatchStartAndEndNotice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMatchStartAndEndNotice* New() const final {
    return CreateMaybeMessage<SMatchStartAndEndNotice>(nullptr);
  }

  SMatchStartAndEndNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMatchStartAndEndNotice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMatchStartAndEndNotice& from);
  void MergeFrom(const SMatchStartAndEndNotice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMatchStartAndEndNotice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matchInfo.SMatchStartAndEndNotice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_matchInfo_2eproto);
    return ::descriptor_table_matchInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountdownFieldNumber = 1,
  };
  // .countdown.SCountdown countdown = 1;
  bool has_countdown() const;
  private:
  bool _internal_has_countdown() const;
  public:
  void clear_countdown();
  const ::countdown::SCountdown& countdown() const;
  ::countdown::SCountdown* release_countdown();
  ::countdown::SCountdown* mutable_countdown();
  void set_allocated_countdown(::countdown::SCountdown* countdown);
  private:
  const ::countdown::SCountdown& _internal_countdown() const;
  ::countdown::SCountdown* _internal_mutable_countdown();
  public:

  // @@protoc_insertion_point(class_scope:matchInfo.SMatchStartAndEndNotice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::countdown::SCountdown* countdown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_matchInfo_2eproto;
};
// -------------------------------------------------------------------

class CMatchStart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matchInfo.CMatchStart) */ {
 public:
  CMatchStart();
  virtual ~CMatchStart();

  CMatchStart(const CMatchStart& from);
  CMatchStart(CMatchStart&& from) noexcept
    : CMatchStart() {
    *this = ::std::move(from);
  }

  inline CMatchStart& operator=(const CMatchStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMatchStart& operator=(CMatchStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMatchStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchStart* internal_default_instance() {
    return reinterpret_cast<const CMatchStart*>(
               &_CMatchStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMatchStart& a, CMatchStart& b) {
    a.Swap(&b);
  }
  inline void Swap(CMatchStart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMatchStart* New() const final {
    return CreateMaybeMessage<CMatchStart>(nullptr);
  }

  CMatchStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMatchStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMatchStart& from);
  void MergeFrom(const CMatchStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matchInfo.CMatchStart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_matchInfo_2eproto);
    return ::descriptor_table_matchInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:matchInfo.CMatchStart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_matchInfo_2eproto;
};
// -------------------------------------------------------------------

class SMatchStart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matchInfo.SMatchStart) */ {
 public:
  SMatchStart();
  virtual ~SMatchStart();

  SMatchStart(const SMatchStart& from);
  SMatchStart(SMatchStart&& from) noexcept
    : SMatchStart() {
    *this = ::std::move(from);
  }

  inline SMatchStart& operator=(const SMatchStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMatchStart& operator=(SMatchStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMatchStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMatchStart* internal_default_instance() {
    return reinterpret_cast<const SMatchStart*>(
               &_SMatchStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SMatchStart& a, SMatchStart& b) {
    a.Swap(&b);
  }
  inline void Swap(SMatchStart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMatchStart* New() const final {
    return CreateMaybeMessage<SMatchStart>(nullptr);
  }

  SMatchStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMatchStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMatchStart& from);
  void MergeFrom(const SMatchStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMatchStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matchInfo.SMatchStart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_matchInfo_2eproto);
    return ::descriptor_table_matchInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentTimeFieldNumber = 2,
    kActiveEndTimeFieldNumber = 3,
    kFlagFieldNumber = 1,
  };
  // int64 currentTime = 2;
  void clear_currenttime();
  ::PROTOBUF_NAMESPACE_ID::int64 currenttime() const;
  void set_currenttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_currenttime() const;
  void _internal_set_currenttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 activeEndTime = 3;
  void clear_activeendtime();
  ::PROTOBUF_NAMESPACE_ID::int64 activeendtime() const;
  void set_activeendtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_activeendtime() const;
  void _internal_set_activeendtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:matchInfo.SMatchStart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 currenttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 activeendtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_matchInfo_2eproto;
};
// -------------------------------------------------------------------

class CMatchEnd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matchInfo.CMatchEnd) */ {
 public:
  CMatchEnd();
  virtual ~CMatchEnd();

  CMatchEnd(const CMatchEnd& from);
  CMatchEnd(CMatchEnd&& from) noexcept
    : CMatchEnd() {
    *this = ::std::move(from);
  }

  inline CMatchEnd& operator=(const CMatchEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMatchEnd& operator=(CMatchEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMatchEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchEnd* internal_default_instance() {
    return reinterpret_cast<const CMatchEnd*>(
               &_CMatchEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMatchEnd& a, CMatchEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CMatchEnd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMatchEnd* New() const final {
    return CreateMaybeMessage<CMatchEnd>(nullptr);
  }

  CMatchEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMatchEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMatchEnd& from);
  void MergeFrom(const CMatchEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matchInfo.CMatchEnd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_matchInfo_2eproto);
    return ::descriptor_table_matchInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:matchInfo.CMatchEnd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_matchInfo_2eproto;
};
// -------------------------------------------------------------------

class SMatchEnd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matchInfo.SMatchEnd) */ {
 public:
  SMatchEnd();
  virtual ~SMatchEnd();

  SMatchEnd(const SMatchEnd& from);
  SMatchEnd(SMatchEnd&& from) noexcept
    : SMatchEnd() {
    *this = ::std::move(from);
  }

  inline SMatchEnd& operator=(const SMatchEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMatchEnd& operator=(SMatchEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMatchEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMatchEnd* internal_default_instance() {
    return reinterpret_cast<const SMatchEnd*>(
               &_SMatchEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SMatchEnd& a, SMatchEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SMatchEnd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMatchEnd* New() const final {
    return CreateMaybeMessage<SMatchEnd>(nullptr);
  }

  SMatchEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMatchEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMatchEnd& from);
  void MergeFrom(const SMatchEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMatchEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matchInfo.SMatchEnd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_matchInfo_2eproto);
    return ::descriptor_table_matchInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardFieldNumber = 2,
    kFlagFieldNumber = 1,
  };
  // repeated .award.BAward award = 2;
  int award_size() const;
  private:
  int _internal_award_size() const;
  public:
  void clear_award();
  ::award::BAward* mutable_award(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::award::BAward >*
      mutable_award();
  private:
  const ::award::BAward& _internal_award(int index) const;
  ::award::BAward* _internal_add_award();
  public:
  const ::award::BAward& award(int index) const;
  ::award::BAward* add_award();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::award::BAward >&
      award() const;

  // int32 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:matchInfo.SMatchEnd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::award::BAward > award_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_matchInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SMatchStartAndEndNotice

// .countdown.SCountdown countdown = 1;
inline bool SMatchStartAndEndNotice::_internal_has_countdown() const {
  return this != internal_default_instance() && countdown_ != nullptr;
}
inline bool SMatchStartAndEndNotice::has_countdown() const {
  return _internal_has_countdown();
}
inline const ::countdown::SCountdown& SMatchStartAndEndNotice::_internal_countdown() const {
  const ::countdown::SCountdown* p = countdown_;
  return p != nullptr ? *p : *reinterpret_cast<const ::countdown::SCountdown*>(
      &::countdown::_SCountdown_default_instance_);
}
inline const ::countdown::SCountdown& SMatchStartAndEndNotice::countdown() const {
  // @@protoc_insertion_point(field_get:matchInfo.SMatchStartAndEndNotice.countdown)
  return _internal_countdown();
}
inline ::countdown::SCountdown* SMatchStartAndEndNotice::release_countdown() {
  // @@protoc_insertion_point(field_release:matchInfo.SMatchStartAndEndNotice.countdown)
  
  ::countdown::SCountdown* temp = countdown_;
  countdown_ = nullptr;
  return temp;
}
inline ::countdown::SCountdown* SMatchStartAndEndNotice::_internal_mutable_countdown() {
  
  if (countdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::countdown::SCountdown>(GetArenaNoVirtual());
    countdown_ = p;
  }
  return countdown_;
}
inline ::countdown::SCountdown* SMatchStartAndEndNotice::mutable_countdown() {
  // @@protoc_insertion_point(field_mutable:matchInfo.SMatchStartAndEndNotice.countdown)
  return _internal_mutable_countdown();
}
inline void SMatchStartAndEndNotice::set_allocated_countdown(::countdown::SCountdown* countdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(countdown_);
  }
  if (countdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      countdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, countdown, submessage_arena);
    }
    
  } else {
    
  }
  countdown_ = countdown;
  // @@protoc_insertion_point(field_set_allocated:matchInfo.SMatchStartAndEndNotice.countdown)
}

// -------------------------------------------------------------------

// CMatchStart

// int32 uid = 1;
inline void CMatchStart::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMatchStart::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMatchStart::uid() const {
  // @@protoc_insertion_point(field_get:matchInfo.CMatchStart.uid)
  return _internal_uid();
}
inline void CMatchStart::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CMatchStart::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:matchInfo.CMatchStart.uid)
}

// -------------------------------------------------------------------

// SMatchStart

// int32 flag = 1;
inline void SMatchStart::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMatchStart::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMatchStart::flag() const {
  // @@protoc_insertion_point(field_get:matchInfo.SMatchStart.flag)
  return _internal_flag();
}
inline void SMatchStart::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void SMatchStart::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:matchInfo.SMatchStart.flag)
}

// int64 currentTime = 2;
inline void SMatchStart::clear_currenttime() {
  currenttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMatchStart::_internal_currenttime() const {
  return currenttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMatchStart::currenttime() const {
  // @@protoc_insertion_point(field_get:matchInfo.SMatchStart.currentTime)
  return _internal_currenttime();
}
inline void SMatchStart::_internal_set_currenttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  currenttime_ = value;
}
inline void SMatchStart::set_currenttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_currenttime(value);
  // @@protoc_insertion_point(field_set:matchInfo.SMatchStart.currentTime)
}

// int64 activeEndTime = 3;
inline void SMatchStart::clear_activeendtime() {
  activeendtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMatchStart::_internal_activeendtime() const {
  return activeendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SMatchStart::activeendtime() const {
  // @@protoc_insertion_point(field_get:matchInfo.SMatchStart.activeEndTime)
  return _internal_activeendtime();
}
inline void SMatchStart::_internal_set_activeendtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  activeendtime_ = value;
}
inline void SMatchStart::set_activeendtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_activeendtime(value);
  // @@protoc_insertion_point(field_set:matchInfo.SMatchStart.activeEndTime)
}

// -------------------------------------------------------------------

// CMatchEnd

// int32 uid = 1;
inline void CMatchEnd::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMatchEnd::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMatchEnd::uid() const {
  // @@protoc_insertion_point(field_get:matchInfo.CMatchEnd.uid)
  return _internal_uid();
}
inline void CMatchEnd::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CMatchEnd::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:matchInfo.CMatchEnd.uid)
}

// -------------------------------------------------------------------

// SMatchEnd

// int32 flag = 1;
inline void SMatchEnd::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMatchEnd::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMatchEnd::flag() const {
  // @@protoc_insertion_point(field_get:matchInfo.SMatchEnd.flag)
  return _internal_flag();
}
inline void SMatchEnd::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void SMatchEnd::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:matchInfo.SMatchEnd.flag)
}

// repeated .award.BAward award = 2;
inline int SMatchEnd::_internal_award_size() const {
  return award_.size();
}
inline int SMatchEnd::award_size() const {
  return _internal_award_size();
}
inline ::award::BAward* SMatchEnd::mutable_award(int index) {
  // @@protoc_insertion_point(field_mutable:matchInfo.SMatchEnd.award)
  return award_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::award::BAward >*
SMatchEnd::mutable_award() {
  // @@protoc_insertion_point(field_mutable_list:matchInfo.SMatchEnd.award)
  return &award_;
}
inline const ::award::BAward& SMatchEnd::_internal_award(int index) const {
  return award_.Get(index);
}
inline const ::award::BAward& SMatchEnd::award(int index) const {
  // @@protoc_insertion_point(field_get:matchInfo.SMatchEnd.award)
  return _internal_award(index);
}
inline ::award::BAward* SMatchEnd::_internal_add_award() {
  return award_.Add();
}
inline ::award::BAward* SMatchEnd::add_award() {
  // @@protoc_insertion_point(field_add:matchInfo.SMatchEnd.award)
  return _internal_add_award();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::award::BAward >&
SMatchEnd::award() const {
  // @@protoc_insertion_point(field_list:matchInfo.SMatchEnd.award)
  return award_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace matchInfo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_matchInfo_2eproto
