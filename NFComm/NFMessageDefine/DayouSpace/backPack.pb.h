// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backPack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backPack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backPack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backPack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backPack_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backPack_2eproto;
namespace backPack {
class CSingleProp;
class CSinglePropDefaultTypeInternal;
extern CSinglePropDefaultTypeInternal _CSingleProp_default_instance_;
class SNftChipList;
class SNftChipListDefaultTypeInternal;
extern SNftChipListDefaultTypeInternal _SNftChipList_default_instance_;
class SPropList;
class SPropListDefaultTypeInternal;
extern SPropListDefaultTypeInternal _SPropList_default_instance_;
class SSingleProp;
class SSinglePropDefaultTypeInternal;
extern SSinglePropDefaultTypeInternal _SSingleProp_default_instance_;
class pieceMsg;
class pieceMsgDefaultTypeInternal;
extern pieceMsgDefaultTypeInternal _pieceMsg_default_instance_;
class propMsg;
class propMsgDefaultTypeInternal;
extern propMsgDefaultTypeInternal _propMsg_default_instance_;
}  // namespace backPack
PROTOBUF_NAMESPACE_OPEN
template<> ::backPack::CSingleProp* Arena::CreateMaybeMessage<::backPack::CSingleProp>(Arena*);
template<> ::backPack::SNftChipList* Arena::CreateMaybeMessage<::backPack::SNftChipList>(Arena*);
template<> ::backPack::SPropList* Arena::CreateMaybeMessage<::backPack::SPropList>(Arena*);
template<> ::backPack::SSingleProp* Arena::CreateMaybeMessage<::backPack::SSingleProp>(Arena*);
template<> ::backPack::pieceMsg* Arena::CreateMaybeMessage<::backPack::pieceMsg>(Arena*);
template<> ::backPack::propMsg* Arena::CreateMaybeMessage<::backPack::propMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace backPack {

// ===================================================================

class pieceMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backPack.pieceMsg) */ {
 public:
  pieceMsg();
  virtual ~pieceMsg();

  pieceMsg(const pieceMsg& from);
  pieceMsg(pieceMsg&& from) noexcept
    : pieceMsg() {
    *this = ::std::move(from);
  }

  inline pieceMsg& operator=(const pieceMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline pieceMsg& operator=(pieceMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pieceMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pieceMsg* internal_default_instance() {
    return reinterpret_cast<const pieceMsg*>(
               &_pieceMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pieceMsg& a, pieceMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(pieceMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pieceMsg* New() const final {
    return CreateMaybeMessage<pieceMsg>(nullptr);
  }

  pieceMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pieceMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pieceMsg& from);
  void MergeFrom(const pieceMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pieceMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backPack.pieceMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backPack_2eproto);
    return ::descriptor_table_backPack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kPieceIdFieldNumber = 1,
    kNumFieldNumber = 4,
    kGoodsIdFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // int32 piece_id = 1;
  void clear_piece_id();
  ::PROTOBUF_NAMESPACE_ID::int32 piece_id() const;
  void set_piece_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_piece_id() const;
  void _internal_set_piece_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 4;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 5;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:backPack.pieceMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::int32 piece_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backPack_2eproto;
};
// -------------------------------------------------------------------

class propMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backPack.propMsg) */ {
 public:
  propMsg();
  virtual ~propMsg();

  propMsg(const propMsg& from);
  propMsg(propMsg&& from) noexcept
    : propMsg() {
    *this = ::std::move(from);
  }

  inline propMsg& operator=(const propMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline propMsg& operator=(propMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const propMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const propMsg* internal_default_instance() {
    return reinterpret_cast<const propMsg*>(
               &_propMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(propMsg& a, propMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(propMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline propMsg* New() const final {
    return CreateMaybeMessage<propMsg>(nullptr);
  }

  propMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<propMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const propMsg& from);
  void MergeFrom(const propMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(propMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backPack.propMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backPack_2eproto);
    return ::descriptor_table_backPack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropNameFieldNumber = 3,
    kCountFieldNumber = 1,
    kPropTypeFieldNumber = 2,
    kGoodsIdFieldNumber = 4,
  };
  // string prop_name = 3;
  void clear_prop_name();
  const std::string& prop_name() const;
  void set_prop_name(const std::string& value);
  void set_prop_name(std::string&& value);
  void set_prop_name(const char* value);
  void set_prop_name(const char* value, size_t size);
  std::string* mutable_prop_name();
  std::string* release_prop_name();
  void set_allocated_prop_name(std::string* prop_name);
  private:
  const std::string& _internal_prop_name() const;
  void _internal_set_prop_name(const std::string& value);
  std::string* _internal_mutable_prop_name();
  public:

  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop_type = 2;
  void clear_prop_type();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_type() const;
  void set_prop_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_type() const;
  void _internal_set_prop_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goods_id = 4;
  void clear_goods_id();
  ::PROTOBUF_NAMESPACE_ID::int32 goods_id() const;
  void set_goods_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goods_id() const;
  void _internal_set_goods_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:backPack.propMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prop_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 goods_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backPack_2eproto;
};
// -------------------------------------------------------------------

class SNftChipList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backPack.SNftChipList) */ {
 public:
  SNftChipList();
  virtual ~SNftChipList();

  SNftChipList(const SNftChipList& from);
  SNftChipList(SNftChipList&& from) noexcept
    : SNftChipList() {
    *this = ::std::move(from);
  }

  inline SNftChipList& operator=(const SNftChipList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNftChipList& operator=(SNftChipList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNftChipList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNftChipList* internal_default_instance() {
    return reinterpret_cast<const SNftChipList*>(
               &_SNftChipList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SNftChipList& a, SNftChipList& b) {
    a.Swap(&b);
  }
  inline void Swap(SNftChipList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNftChipList* New() const final {
    return CreateMaybeMessage<SNftChipList>(nullptr);
  }

  SNftChipList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNftChipList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNftChipList& from);
  void MergeFrom(const SNftChipList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNftChipList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backPack.SNftChipList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backPack_2eproto);
    return ::descriptor_table_backPack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNftChipListFieldNumber = 1,
  };
  // repeated .backPack.pieceMsg nftChipList = 1;
  int nftchiplist_size() const;
  private:
  int _internal_nftchiplist_size() const;
  public:
  void clear_nftchiplist();
  ::backPack::pieceMsg* mutable_nftchiplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::pieceMsg >*
      mutable_nftchiplist();
  private:
  const ::backPack::pieceMsg& _internal_nftchiplist(int index) const;
  ::backPack::pieceMsg* _internal_add_nftchiplist();
  public:
  const ::backPack::pieceMsg& nftchiplist(int index) const;
  ::backPack::pieceMsg* add_nftchiplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::pieceMsg >&
      nftchiplist() const;

  // @@protoc_insertion_point(class_scope:backPack.SNftChipList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::pieceMsg > nftchiplist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backPack_2eproto;
};
// -------------------------------------------------------------------

class SPropList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backPack.SPropList) */ {
 public:
  SPropList();
  virtual ~SPropList();

  SPropList(const SPropList& from);
  SPropList(SPropList&& from) noexcept
    : SPropList() {
    *this = ::std::move(from);
  }

  inline SPropList& operator=(const SPropList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPropList& operator=(SPropList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPropList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPropList* internal_default_instance() {
    return reinterpret_cast<const SPropList*>(
               &_SPropList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SPropList& a, SPropList& b) {
    a.Swap(&b);
  }
  inline void Swap(SPropList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPropList* New() const final {
    return CreateMaybeMessage<SPropList>(nullptr);
  }

  SPropList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPropList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPropList& from);
  void MergeFrom(const SPropList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPropList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backPack.SPropList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backPack_2eproto);
    return ::descriptor_table_backPack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropListFieldNumber = 1,
  };
  // repeated .backPack.propMsg propList = 1;
  int proplist_size() const;
  private:
  int _internal_proplist_size() const;
  public:
  void clear_proplist();
  ::backPack::propMsg* mutable_proplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::propMsg >*
      mutable_proplist();
  private:
  const ::backPack::propMsg& _internal_proplist(int index) const;
  ::backPack::propMsg* _internal_add_proplist();
  public:
  const ::backPack::propMsg& proplist(int index) const;
  ::backPack::propMsg* add_proplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::propMsg >&
      proplist() const;

  // @@protoc_insertion_point(class_scope:backPack.SPropList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::propMsg > proplist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backPack_2eproto;
};
// -------------------------------------------------------------------

class CSingleProp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backPack.CSingleProp) */ {
 public:
  CSingleProp();
  virtual ~CSingleProp();

  CSingleProp(const CSingleProp& from);
  CSingleProp(CSingleProp&& from) noexcept
    : CSingleProp() {
    *this = ::std::move(from);
  }

  inline CSingleProp& operator=(const CSingleProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSingleProp& operator=(CSingleProp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSingleProp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSingleProp* internal_default_instance() {
    return reinterpret_cast<const CSingleProp*>(
               &_CSingleProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSingleProp& a, CSingleProp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSingleProp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSingleProp* New() const final {
    return CreateMaybeMessage<CSingleProp>(nullptr);
  }

  CSingleProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSingleProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSingleProp& from);
  void MergeFrom(const CSingleProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSingleProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backPack.CSingleProp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backPack_2eproto);
    return ::descriptor_table_backPack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:backPack.CSingleProp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backPack_2eproto;
};
// -------------------------------------------------------------------

class SSingleProp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backPack.SSingleProp) */ {
 public:
  SSingleProp();
  virtual ~SSingleProp();

  SSingleProp(const SSingleProp& from);
  SSingleProp(SSingleProp&& from) noexcept
    : SSingleProp() {
    *this = ::std::move(from);
  }

  inline SSingleProp& operator=(const SSingleProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSingleProp& operator=(SSingleProp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSingleProp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSingleProp* internal_default_instance() {
    return reinterpret_cast<const SSingleProp*>(
               &_SSingleProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SSingleProp& a, SSingleProp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSingleProp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSingleProp* New() const final {
    return CreateMaybeMessage<SSingleProp>(nullptr);
  }

  SSingleProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSingleProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSingleProp& from);
  void MergeFrom(const SSingleProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSingleProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backPack.SSingleProp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backPack_2eproto);
    return ::descriptor_table_backPack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropFieldNumber = 1,
  };
  // .backPack.propMsg prop = 1;
  bool has_prop() const;
  private:
  bool _internal_has_prop() const;
  public:
  void clear_prop();
  const ::backPack::propMsg& prop() const;
  ::backPack::propMsg* release_prop();
  ::backPack::propMsg* mutable_prop();
  void set_allocated_prop(::backPack::propMsg* prop);
  private:
  const ::backPack::propMsg& _internal_prop() const;
  ::backPack::propMsg* _internal_mutable_prop();
  public:

  // @@protoc_insertion_point(class_scope:backPack.SSingleProp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::backPack::propMsg* prop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backPack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pieceMsg

// int32 piece_id = 1;
inline void pieceMsg::clear_piece_id() {
  piece_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pieceMsg::_internal_piece_id() const {
  return piece_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pieceMsg::piece_id() const {
  // @@protoc_insertion_point(field_get:backPack.pieceMsg.piece_id)
  return _internal_piece_id();
}
inline void pieceMsg::_internal_set_piece_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  piece_id_ = value;
}
inline void pieceMsg::set_piece_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_piece_id(value);
  // @@protoc_insertion_point(field_set:backPack.pieceMsg.piece_id)
}

// string name = 2;
inline void pieceMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& pieceMsg::name() const {
  // @@protoc_insertion_point(field_get:backPack.pieceMsg.name)
  return _internal_name();
}
inline void pieceMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:backPack.pieceMsg.name)
}
inline std::string* pieceMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:backPack.pieceMsg.name)
  return _internal_mutable_name();
}
inline const std::string& pieceMsg::_internal_name() const {
  return name_.GetNoArena();
}
inline void pieceMsg::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void pieceMsg::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:backPack.pieceMsg.name)
}
inline void pieceMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backPack.pieceMsg.name)
}
inline void pieceMsg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backPack.pieceMsg.name)
}
inline std::string* pieceMsg::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* pieceMsg::release_name() {
  // @@protoc_insertion_point(field_release:backPack.pieceMsg.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void pieceMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:backPack.pieceMsg.name)
}

// string image = 3;
inline void pieceMsg::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& pieceMsg::image() const {
  // @@protoc_insertion_point(field_get:backPack.pieceMsg.image)
  return _internal_image();
}
inline void pieceMsg::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:backPack.pieceMsg.image)
}
inline std::string* pieceMsg::mutable_image() {
  // @@protoc_insertion_point(field_mutable:backPack.pieceMsg.image)
  return _internal_mutable_image();
}
inline const std::string& pieceMsg::_internal_image() const {
  return image_.GetNoArena();
}
inline void pieceMsg::_internal_set_image(const std::string& value) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void pieceMsg::set_image(std::string&& value) {
  
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:backPack.pieceMsg.image)
}
inline void pieceMsg::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backPack.pieceMsg.image)
}
inline void pieceMsg::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backPack.pieceMsg.image)
}
inline std::string* pieceMsg::_internal_mutable_image() {
  
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* pieceMsg::release_image() {
  // @@protoc_insertion_point(field_release:backPack.pieceMsg.image)
  
  return image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void pieceMsg::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:backPack.pieceMsg.image)
}

// int32 num = 4;
inline void pieceMsg::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pieceMsg::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pieceMsg::num() const {
  // @@protoc_insertion_point(field_get:backPack.pieceMsg.num)
  return _internal_num();
}
inline void pieceMsg::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void pieceMsg::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:backPack.pieceMsg.num)
}

// int32 goodsId = 5;
inline void pieceMsg::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pieceMsg::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pieceMsg::goodsid() const {
  // @@protoc_insertion_point(field_get:backPack.pieceMsg.goodsId)
  return _internal_goodsid();
}
inline void pieceMsg::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void pieceMsg::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:backPack.pieceMsg.goodsId)
}

// -------------------------------------------------------------------

// propMsg

// int32 count = 1;
inline void propMsg::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 propMsg::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 propMsg::count() const {
  // @@protoc_insertion_point(field_get:backPack.propMsg.count)
  return _internal_count();
}
inline void propMsg::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void propMsg::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:backPack.propMsg.count)
}

// int32 prop_type = 2;
inline void propMsg::clear_prop_type() {
  prop_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 propMsg::_internal_prop_type() const {
  return prop_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 propMsg::prop_type() const {
  // @@protoc_insertion_point(field_get:backPack.propMsg.prop_type)
  return _internal_prop_type();
}
inline void propMsg::_internal_set_prop_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_type_ = value;
}
inline void propMsg::set_prop_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_type(value);
  // @@protoc_insertion_point(field_set:backPack.propMsg.prop_type)
}

// string prop_name = 3;
inline void propMsg::clear_prop_name() {
  prop_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& propMsg::prop_name() const {
  // @@protoc_insertion_point(field_get:backPack.propMsg.prop_name)
  return _internal_prop_name();
}
inline void propMsg::set_prop_name(const std::string& value) {
  _internal_set_prop_name(value);
  // @@protoc_insertion_point(field_set:backPack.propMsg.prop_name)
}
inline std::string* propMsg::mutable_prop_name() {
  // @@protoc_insertion_point(field_mutable:backPack.propMsg.prop_name)
  return _internal_mutable_prop_name();
}
inline const std::string& propMsg::_internal_prop_name() const {
  return prop_name_.GetNoArena();
}
inline void propMsg::_internal_set_prop_name(const std::string& value) {
  
  prop_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void propMsg::set_prop_name(std::string&& value) {
  
  prop_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:backPack.propMsg.prop_name)
}
inline void propMsg::set_prop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prop_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backPack.propMsg.prop_name)
}
inline void propMsg::set_prop_name(const char* value, size_t size) {
  
  prop_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backPack.propMsg.prop_name)
}
inline std::string* propMsg::_internal_mutable_prop_name() {
  
  return prop_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* propMsg::release_prop_name() {
  // @@protoc_insertion_point(field_release:backPack.propMsg.prop_name)
  
  return prop_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void propMsg::set_allocated_prop_name(std::string* prop_name) {
  if (prop_name != nullptr) {
    
  } else {
    
  }
  prop_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prop_name);
  // @@protoc_insertion_point(field_set_allocated:backPack.propMsg.prop_name)
}

// int32 goods_id = 4;
inline void propMsg::clear_goods_id() {
  goods_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 propMsg::_internal_goods_id() const {
  return goods_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 propMsg::goods_id() const {
  // @@protoc_insertion_point(field_get:backPack.propMsg.goods_id)
  return _internal_goods_id();
}
inline void propMsg::_internal_set_goods_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goods_id_ = value;
}
inline void propMsg::set_goods_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goods_id(value);
  // @@protoc_insertion_point(field_set:backPack.propMsg.goods_id)
}

// -------------------------------------------------------------------

// SNftChipList

// repeated .backPack.pieceMsg nftChipList = 1;
inline int SNftChipList::_internal_nftchiplist_size() const {
  return nftchiplist_.size();
}
inline int SNftChipList::nftchiplist_size() const {
  return _internal_nftchiplist_size();
}
inline void SNftChipList::clear_nftchiplist() {
  nftchiplist_.Clear();
}
inline ::backPack::pieceMsg* SNftChipList::mutable_nftchiplist(int index) {
  // @@protoc_insertion_point(field_mutable:backPack.SNftChipList.nftChipList)
  return nftchiplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::pieceMsg >*
SNftChipList::mutable_nftchiplist() {
  // @@protoc_insertion_point(field_mutable_list:backPack.SNftChipList.nftChipList)
  return &nftchiplist_;
}
inline const ::backPack::pieceMsg& SNftChipList::_internal_nftchiplist(int index) const {
  return nftchiplist_.Get(index);
}
inline const ::backPack::pieceMsg& SNftChipList::nftchiplist(int index) const {
  // @@protoc_insertion_point(field_get:backPack.SNftChipList.nftChipList)
  return _internal_nftchiplist(index);
}
inline ::backPack::pieceMsg* SNftChipList::_internal_add_nftchiplist() {
  return nftchiplist_.Add();
}
inline ::backPack::pieceMsg* SNftChipList::add_nftchiplist() {
  // @@protoc_insertion_point(field_add:backPack.SNftChipList.nftChipList)
  return _internal_add_nftchiplist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::pieceMsg >&
SNftChipList::nftchiplist() const {
  // @@protoc_insertion_point(field_list:backPack.SNftChipList.nftChipList)
  return nftchiplist_;
}

// -------------------------------------------------------------------

// SPropList

// repeated .backPack.propMsg propList = 1;
inline int SPropList::_internal_proplist_size() const {
  return proplist_.size();
}
inline int SPropList::proplist_size() const {
  return _internal_proplist_size();
}
inline void SPropList::clear_proplist() {
  proplist_.Clear();
}
inline ::backPack::propMsg* SPropList::mutable_proplist(int index) {
  // @@protoc_insertion_point(field_mutable:backPack.SPropList.propList)
  return proplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::propMsg >*
SPropList::mutable_proplist() {
  // @@protoc_insertion_point(field_mutable_list:backPack.SPropList.propList)
  return &proplist_;
}
inline const ::backPack::propMsg& SPropList::_internal_proplist(int index) const {
  return proplist_.Get(index);
}
inline const ::backPack::propMsg& SPropList::proplist(int index) const {
  // @@protoc_insertion_point(field_get:backPack.SPropList.propList)
  return _internal_proplist(index);
}
inline ::backPack::propMsg* SPropList::_internal_add_proplist() {
  return proplist_.Add();
}
inline ::backPack::propMsg* SPropList::add_proplist() {
  // @@protoc_insertion_point(field_add:backPack.SPropList.propList)
  return _internal_add_proplist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backPack::propMsg >&
SPropList::proplist() const {
  // @@protoc_insertion_point(field_list:backPack.SPropList.propList)
  return proplist_;
}

// -------------------------------------------------------------------

// CSingleProp

// int32 goodsId = 1;
inline void CSingleProp::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSingleProp::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSingleProp::goodsid() const {
  // @@protoc_insertion_point(field_get:backPack.CSingleProp.goodsId)
  return _internal_goodsid();
}
inline void CSingleProp::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CSingleProp::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:backPack.CSingleProp.goodsId)
}

// -------------------------------------------------------------------

// SSingleProp

// .backPack.propMsg prop = 1;
inline bool SSingleProp::_internal_has_prop() const {
  return this != internal_default_instance() && prop_ != nullptr;
}
inline bool SSingleProp::has_prop() const {
  return _internal_has_prop();
}
inline void SSingleProp::clear_prop() {
  if (GetArenaNoVirtual() == nullptr && prop_ != nullptr) {
    delete prop_;
  }
  prop_ = nullptr;
}
inline const ::backPack::propMsg& SSingleProp::_internal_prop() const {
  const ::backPack::propMsg* p = prop_;
  return p != nullptr ? *p : *reinterpret_cast<const ::backPack::propMsg*>(
      &::backPack::_propMsg_default_instance_);
}
inline const ::backPack::propMsg& SSingleProp::prop() const {
  // @@protoc_insertion_point(field_get:backPack.SSingleProp.prop)
  return _internal_prop();
}
inline ::backPack::propMsg* SSingleProp::release_prop() {
  // @@protoc_insertion_point(field_release:backPack.SSingleProp.prop)
  
  ::backPack::propMsg* temp = prop_;
  prop_ = nullptr;
  return temp;
}
inline ::backPack::propMsg* SSingleProp::_internal_mutable_prop() {
  
  if (prop_ == nullptr) {
    auto* p = CreateMaybeMessage<::backPack::propMsg>(GetArenaNoVirtual());
    prop_ = p;
  }
  return prop_;
}
inline ::backPack::propMsg* SSingleProp::mutable_prop() {
  // @@protoc_insertion_point(field_mutable:backPack.SSingleProp.prop)
  return _internal_mutable_prop();
}
inline void SSingleProp::set_allocated_prop(::backPack::propMsg* prop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prop_;
  }
  if (prop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prop, submessage_arena);
    }
    
  } else {
    
  }
  prop_ = prop;
  // @@protoc_insertion_point(field_set_allocated:backPack.SSingleProp.prop)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace backPack

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backPack_2eproto
