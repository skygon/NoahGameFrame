// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: setSpace.proto

#include "setSpace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_setSpace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BaseLayPosition_setSpace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_setSpace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PayGoodsInfo_setSpace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_setSpace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhotoWall_setSpace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVector3_vector_2eproto;
namespace pb {
class PhotoWallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhotoWall> _instance;
} _PhotoWall_default_instance_;
class BaseLayPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseLayPosition> _instance;
} _BaseLayPosition_default_instance_;
class PayGoodsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PayGoodsInfo> _instance;
} _PayGoodsInfo_default_instance_;
class CGetSpaceBackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetSpaceBack> _instance;
} _CGetSpaceBack_default_instance_;
class SGetSpaceBackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetSpaceBack> _instance;
} _SGetSpaceBack_default_instance_;
class CGetLayPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetLayPosition> _instance;
} _CGetLayPosition_default_instance_;
class SGetLayPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetLayPosition> _instance;
} _SGetLayPosition_default_instance_;
class CSetLayPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSetLayPosition> _instance;
} _CSetLayPosition_default_instance_;
class SSetLayPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSetLayPosition> _instance;
} _SSetLayPosition_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_BaseLayPosition_setSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BaseLayPosition_default_instance_;
    new (ptr) ::pb::BaseLayPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BaseLayPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BaseLayPosition_setSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BaseLayPosition_setSpace_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,
      &scc_info_PhotoWall_setSpace_2eproto.base,}};

static void InitDefaultsscc_info_CGetLayPosition_setSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CGetLayPosition_default_instance_;
    new (ptr) ::pb::CGetLayPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CGetLayPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetLayPosition_setSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetLayPosition_setSpace_2eproto}, {}};

static void InitDefaultsscc_info_CGetSpaceBack_setSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CGetSpaceBack_default_instance_;
    new (ptr) ::pb::CGetSpaceBack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CGetSpaceBack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetSpaceBack_setSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetSpaceBack_setSpace_2eproto}, {}};

static void InitDefaultsscc_info_CSetLayPosition_setSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CSetLayPosition_default_instance_;
    new (ptr) ::pb::CSetLayPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CSetLayPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSetLayPosition_setSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSetLayPosition_setSpace_2eproto}, {
      &scc_info_BaseLayPosition_setSpace_2eproto.base,}};

static void InitDefaultsscc_info_PayGoodsInfo_setSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PayGoodsInfo_default_instance_;
    new (ptr) ::pb::PayGoodsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PayGoodsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PayGoodsInfo_setSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PayGoodsInfo_setSpace_2eproto}, {}};

static void InitDefaultsscc_info_PhotoWall_setSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PhotoWall_default_instance_;
    new (ptr) ::pb::PhotoWall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PhotoWall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhotoWall_setSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhotoWall_setSpace_2eproto}, {}};

static void InitDefaultsscc_info_SGetLayPosition_setSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SGetLayPosition_default_instance_;
    new (ptr) ::pb::SGetLayPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SGetLayPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SGetLayPosition_setSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SGetLayPosition_setSpace_2eproto}, {
      &scc_info_BaseLayPosition_setSpace_2eproto.base,}};

static void InitDefaultsscc_info_SGetSpaceBack_setSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SGetSpaceBack_default_instance_;
    new (ptr) ::pb::SGetSpaceBack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SGetSpaceBack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGetSpaceBack_setSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGetSpaceBack_setSpace_2eproto}, {}};

static void InitDefaultsscc_info_SSetLayPosition_setSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SSetLayPosition_default_instance_;
    new (ptr) ::pb::SSetLayPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SSetLayPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSetLayPosition_setSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSetLayPosition_setSpace_2eproto}, {
      &scc_info_PayGoodsInfo_setSpace_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_setSpace_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_setSpace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_setSpace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_setSpace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PhotoWall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PhotoWall, spacelayid_),
  PROTOBUF_FIELD_OFFSET(::pb::PhotoWall, thingbackid_),
  PROTOBUF_FIELD_OFFSET(::pb::PhotoWall, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, id_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, thingid_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, sceneid_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, goodsid_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, laypositiontype_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, position_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, orientate_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, resource_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, cover_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, name_),
  PROTOBUF_FIELD_OFFSET(::pb::BaseLayPosition, photowall_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PayGoodsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PayGoodsInfo, shoppingid_),
  PROTOBUF_FIELD_OFFSET(::pb::PayGoodsInfo, shoppingnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CGetSpaceBack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CGetSpaceBack, houseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, name_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, cover_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, resource_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, uid_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, nickname_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, avatar_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, relation_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, androidurl_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, iosurl_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, windowsurl_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, onlinetime_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, type_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, createuid_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, checkstatus_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, serialnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, configurl_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, serverluaurl_),
  PROTOBUF_FIELD_OFFSET(::pb::SGetSpaceBack, clientluaurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CGetLayPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CGetLayPosition, houseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SGetLayPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SGetLayPosition, layposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CSetLayPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CSetLayPosition, houseid_),
  PROTOBUF_FIELD_OFFSET(::pb::CSetLayPosition, layposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SSetLayPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SSetLayPosition, paygoodsinfo_),
  PROTOBUF_FIELD_OFFSET(::pb::SSetLayPosition, setresult_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::PhotoWall)},
  { 8, -1, sizeof(::pb::BaseLayPosition)},
  { 24, -1, sizeof(::pb::PayGoodsInfo)},
  { 31, -1, sizeof(::pb::CGetSpaceBack)},
  { 37, -1, sizeof(::pb::SGetSpaceBack)},
  { 60, -1, sizeof(::pb::CGetLayPosition)},
  { 66, -1, sizeof(::pb::SGetLayPosition)},
  { 72, -1, sizeof(::pb::CSetLayPosition)},
  { 79, -1, sizeof(::pb::SSetLayPosition)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PhotoWall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BaseLayPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PayGoodsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CGetSpaceBack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SGetSpaceBack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CGetLayPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SGetLayPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CSetLayPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SSetLayPosition_default_instance_),
};

const char descriptor_table_protodef_setSpace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016setSpace.proto\022\002pb\032\014vector.proto\"A\n\tPh"
  "otoWall\022\022\n\nspaceLayId\030\001 \001(\005\022\023\n\013thingBack"
  "Id\030\002 \001(\005\022\013\n\003url\030\003 \003(\t\"\203\002\n\017BaseLayPositio"
  "n\022\n\n\002id\030\001 \001(\005\022\017\n\007thingId\030\002 \001(\005\022\017\n\007sceneI"
  "d\030\003 \001(\005\022\017\n\007goodsId\030\004 \001(\005\022\027\n\017layPositionT"
  "ype\030\005 \001(\005\022\"\n\010position\030\006 \001(\0132\020.vector.PVe"
  "ctor3\022#\n\torientate\030\007 \001(\0132\020.vector.PVecto"
  "r3\022\020\n\010resource\030\010 \001(\t\022\r\n\005cover\030\t \001(\t\022\014\n\004n"
  "ame\030\n \001(\t\022 \n\tphotoWall\030\013 \001(\0132\r.pb.PhotoW"
  "all\"7\n\014PayGoodsInfo\022\022\n\nshoppingId\030\001 \001(\005\022"
  "\023\n\013shoppingNum\030\004 \001(\005\" \n\rCGetSpaceBack\022\017\n"
  "\007houseId\030\001 \001(\005\"\326\002\n\rSGetSpaceBack\022\014\n\004name"
  "\030\001 \001(\t\022\r\n\005cover\030\002 \001(\t\022\020\n\010resource\030\003 \001(\t\022"
  "\013\n\003uid\030\004 \001(\005\022\020\n\010nickName\030\005 \001(\t\022\016\n\006avatar"
  "\030\006 \001(\t\022\020\n\010relation\030\007 \001(\005\022\022\n\nandroidUrl\030\010"
  " \001(\t\022\016\n\006iosUrl\030\t \001(\t\022\022\n\nwindowsUrl\030\n \001(\t"
  "\022\022\n\nonlineTime\030\013 \001(\005\022\014\n\004type\030\014 \001(\005\022\021\n\tcr"
  "eateUid\030\r \001(\005\022\023\n\013checkStatus\030\016 \001(\005\022\024\n\014Se"
  "rialNumber\030\017 \001(\005\022\021\n\tconfigUrl\030\020 \001(\t\022\024\n\014S"
  "erverLuaUrl\030\021 \001(\t\022\024\n\014ClientLuaUrl\030\022 \001(\t\""
  "\"\n\017CGetLayPosition\022\017\n\007houseId\030\001 \001(\005\";\n\017S"
  "GetLayPosition\022(\n\013layPosition\030\001 \003(\0132\023.pb"
  ".BaseLayPosition\"L\n\017CSetLayPosition\022\017\n\007h"
  "ouseId\030\001 \001(\005\022(\n\013LayPosition\030\002 \003(\0132\023.pb.B"
  "aseLayPosition\"L\n\017SSetLayPosition\022&\n\014pay"
  "GoodsInfo\030\001 \003(\0132\020.pb.PayGoodsInfo\022\021\n\tset"
  "Result\030\002 \001(\010B(\n\030com.dayou.space.protobuf"
  "B\010SetSpaceZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_setSpace_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_setSpace_2eproto_sccs[9] = {
  &scc_info_BaseLayPosition_setSpace_2eproto.base,
  &scc_info_CGetLayPosition_setSpace_2eproto.base,
  &scc_info_CGetSpaceBack_setSpace_2eproto.base,
  &scc_info_CSetLayPosition_setSpace_2eproto.base,
  &scc_info_PayGoodsInfo_setSpace_2eproto.base,
  &scc_info_PhotoWall_setSpace_2eproto.base,
  &scc_info_SGetLayPosition_setSpace_2eproto.base,
  &scc_info_SGetSpaceBack_setSpace_2eproto.base,
  &scc_info_SSetLayPosition_setSpace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_setSpace_2eproto_once;
static bool descriptor_table_setSpace_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_setSpace_2eproto = {
  &descriptor_table_setSpace_2eproto_initialized, descriptor_table_protodef_setSpace_2eproto, "setSpace.proto", 1102,
  &descriptor_table_setSpace_2eproto_once, descriptor_table_setSpace_2eproto_sccs, descriptor_table_setSpace_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_setSpace_2eproto::offsets,
  file_level_metadata_setSpace_2eproto, 9, file_level_enum_descriptors_setSpace_2eproto, file_level_service_descriptors_setSpace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_setSpace_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_setSpace_2eproto), true);
namespace pb {

// ===================================================================

void PhotoWall::InitAsDefaultInstance() {
}
class PhotoWall::_Internal {
 public:
};

PhotoWall::PhotoWall()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PhotoWall)
}
PhotoWall::PhotoWall(const PhotoWall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      url_(from.url_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spacelayid_, &from.spacelayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&thingbackid_) -
    reinterpret_cast<char*>(&spacelayid_)) + sizeof(thingbackid_));
  // @@protoc_insertion_point(copy_constructor:pb.PhotoWall)
}

void PhotoWall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhotoWall_setSpace_2eproto.base);
  ::memset(&spacelayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thingbackid_) -
      reinterpret_cast<char*>(&spacelayid_)) + sizeof(thingbackid_));
}

PhotoWall::~PhotoWall() {
  // @@protoc_insertion_point(destructor:pb.PhotoWall)
  SharedDtor();
}

void PhotoWall::SharedDtor() {
}

void PhotoWall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhotoWall& PhotoWall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhotoWall_setSpace_2eproto.base);
  return *internal_default_instance();
}


void PhotoWall::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PhotoWall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.Clear();
  ::memset(&spacelayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thingbackid_) -
      reinterpret_cast<char*>(&spacelayid_)) + sizeof(thingbackid_));
  _internal_metadata_.Clear();
}

const char* PhotoWall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 spaceLayId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spacelayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 thingBackId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          thingbackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_url();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PhotoWall.url"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhotoWall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PhotoWall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spaceLayId = 1;
  if (this->spacelayid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_spacelayid(), target);
  }

  // int32 thingBackId = 2;
  if (this->thingbackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_thingbackid(), target);
  }

  // repeated string url = 3;
  for (int i = 0, n = this->_internal_url_size(); i < n; i++) {
    const auto& s = this->_internal_url(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PhotoWall.url");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PhotoWall)
  return target;
}

size_t PhotoWall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PhotoWall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string url = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(url_.size());
  for (int i = 0, n = url_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      url_.Get(i));
  }

  // int32 spaceLayId = 1;
  if (this->spacelayid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacelayid());
  }

  // int32 thingBackId = 2;
  if (this->thingbackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_thingbackid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhotoWall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PhotoWall)
  GOOGLE_DCHECK_NE(&from, this);
  const PhotoWall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhotoWall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PhotoWall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PhotoWall)
    MergeFrom(*source);
  }
}

void PhotoWall::MergeFrom(const PhotoWall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PhotoWall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_.MergeFrom(from.url_);
  if (from.spacelayid() != 0) {
    _internal_set_spacelayid(from._internal_spacelayid());
  }
  if (from.thingbackid() != 0) {
    _internal_set_thingbackid(from._internal_thingbackid());
  }
}

void PhotoWall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PhotoWall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoWall::CopyFrom(const PhotoWall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PhotoWall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoWall::IsInitialized() const {
  return true;
}

void PhotoWall::InternalSwap(PhotoWall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.InternalSwap(&other->url_);
  swap(spacelayid_, other->spacelayid_);
  swap(thingbackid_, other->thingbackid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhotoWall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseLayPosition::InitAsDefaultInstance() {
  ::pb::_BaseLayPosition_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::pb::_BaseLayPosition_default_instance_._instance.get_mutable()->orientate_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::pb::_BaseLayPosition_default_instance_._instance.get_mutable()->photowall_ = const_cast< ::pb::PhotoWall*>(
      ::pb::PhotoWall::internal_default_instance());
}
class BaseLayPosition::_Internal {
 public:
  static const ::vector::PVector3& position(const BaseLayPosition* msg);
  static const ::vector::PVector3& orientate(const BaseLayPosition* msg);
  static const ::pb::PhotoWall& photowall(const BaseLayPosition* msg);
};

const ::vector::PVector3&
BaseLayPosition::_Internal::position(const BaseLayPosition* msg) {
  return *msg->position_;
}
const ::vector::PVector3&
BaseLayPosition::_Internal::orientate(const BaseLayPosition* msg) {
  return *msg->orientate_;
}
const ::pb::PhotoWall&
BaseLayPosition::_Internal::photowall(const BaseLayPosition* msg) {
  return *msg->photowall_;
}
void BaseLayPosition::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void BaseLayPosition::clear_orientate() {
  if (GetArenaNoVirtual() == nullptr && orientate_ != nullptr) {
    delete orientate_;
  }
  orientate_ = nullptr;
}
BaseLayPosition::BaseLayPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BaseLayPosition)
}
BaseLayPosition::BaseLayPosition(const BaseLayPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientate()) {
    orientate_ = new ::vector::PVector3(*from.orientate_);
  } else {
    orientate_ = nullptr;
  }
  if (from._internal_has_photowall()) {
    photowall_ = new ::pb::PhotoWall(*from.photowall_);
  } else {
    photowall_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&laypositiontype_) -
    reinterpret_cast<char*>(&id_)) + sizeof(laypositiontype_));
  // @@protoc_insertion_point(copy_constructor:pb.BaseLayPosition)
}

void BaseLayPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseLayPosition_setSpace_2eproto.base);
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laypositiontype_) -
      reinterpret_cast<char*>(&position_)) + sizeof(laypositiontype_));
}

BaseLayPosition::~BaseLayPosition() {
  // @@protoc_insertion_point(destructor:pb.BaseLayPosition)
  SharedDtor();
}

void BaseLayPosition::SharedDtor() {
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientate_;
  if (this != internal_default_instance()) delete photowall_;
}

void BaseLayPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseLayPosition& BaseLayPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseLayPosition_setSpace_2eproto.base);
  return *internal_default_instance();
}


void BaseLayPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BaseLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientate_ != nullptr) {
    delete orientate_;
  }
  orientate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && photowall_ != nullptr) {
    delete photowall_;
  }
  photowall_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laypositiontype_) -
      reinterpret_cast<char*>(&id_)) + sizeof(laypositiontype_));
  _internal_metadata_.Clear();
}

const char* BaseLayPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 thingId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          thingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sceneId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 layPositionType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          laypositiontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 orientate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BaseLayPosition.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BaseLayPosition.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BaseLayPosition.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.PhotoWall photoWall = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_photowall(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseLayPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BaseLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 thingId = 2;
  if (this->thingid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_thingid(), target);
  }

  // int32 sceneId = 3;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sceneid(), target);
  }

  // int32 goodsId = 4;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_goodsid(), target);
  }

  // int32 layPositionType = 5;
  if (this->laypositiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_laypositiontype(), target);
  }

  // .vector.PVector3 position = 6;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  // .vector.PVector3 orientate = 7;
  if (this->has_orientate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::orientate(this), target, stream);
  }

  // string resource = 8;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BaseLayPosition.resource");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_resource(), target);
  }

  // string cover = 9;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BaseLayPosition.cover");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_cover(), target);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BaseLayPosition.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // .pb.PhotoWall photoWall = 11;
  if (this->has_photowall()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::photowall(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BaseLayPosition)
  return target;
}

size_t BaseLayPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BaseLayPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource = 8;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string cover = 9;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vector.PVector3 position = 6;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .vector.PVector3 orientate = 7;
  if (this->has_orientate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientate_);
  }

  // .pb.PhotoWall photoWall = 11;
  if (this->has_photowall()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *photowall_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 thingId = 2;
  if (this->thingid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_thingid());
  }

  // int32 sceneId = 3;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sceneid());
  }

  // int32 goodsId = 4;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 layPositionType = 5;
  if (this->laypositiontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_laypositiontype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseLayPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BaseLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseLayPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseLayPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BaseLayPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BaseLayPosition)
    MergeFrom(*source);
  }
}

void BaseLayPosition::MergeFrom(const BaseLayPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BaseLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource().size() > 0) {

    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.has_orientate()) {
    _internal_mutable_orientate()->::vector::PVector3::MergeFrom(from._internal_orientate());
  }
  if (from.has_photowall()) {
    _internal_mutable_photowall()->::pb::PhotoWall::MergeFrom(from._internal_photowall());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.thingid() != 0) {
    _internal_set_thingid(from._internal_thingid());
  }
  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.laypositiontype() != 0) {
    _internal_set_laypositiontype(from._internal_laypositiontype());
  }
}

void BaseLayPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BaseLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseLayPosition::CopyFrom(const BaseLayPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BaseLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseLayPosition::IsInitialized() const {
  return true;
}

void BaseLayPosition::InternalSwap(BaseLayPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(orientate_, other->orientate_);
  swap(photowall_, other->photowall_);
  swap(id_, other->id_);
  swap(thingid_, other->thingid_);
  swap(sceneid_, other->sceneid_);
  swap(goodsid_, other->goodsid_);
  swap(laypositiontype_, other->laypositiontype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseLayPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PayGoodsInfo::InitAsDefaultInstance() {
}
class PayGoodsInfo::_Internal {
 public:
};

PayGoodsInfo::PayGoodsInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PayGoodsInfo)
}
PayGoodsInfo::PayGoodsInfo(const PayGoodsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shoppingid_, &from.shoppingid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shoppingnum_) -
    reinterpret_cast<char*>(&shoppingid_)) + sizeof(shoppingnum_));
  // @@protoc_insertion_point(copy_constructor:pb.PayGoodsInfo)
}

void PayGoodsInfo::SharedCtor() {
  ::memset(&shoppingid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoppingnum_) -
      reinterpret_cast<char*>(&shoppingid_)) + sizeof(shoppingnum_));
}

PayGoodsInfo::~PayGoodsInfo() {
  // @@protoc_insertion_point(destructor:pb.PayGoodsInfo)
  SharedDtor();
}

void PayGoodsInfo::SharedDtor() {
}

void PayGoodsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PayGoodsInfo& PayGoodsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PayGoodsInfo_setSpace_2eproto.base);
  return *internal_default_instance();
}


void PayGoodsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PayGoodsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shoppingid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoppingnum_) -
      reinterpret_cast<char*>(&shoppingid_)) + sizeof(shoppingnum_));
  _internal_metadata_.Clear();
}

const char* PayGoodsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 shoppingId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shoppingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shoppingNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          shoppingnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PayGoodsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PayGoodsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shoppingId = 1;
  if (this->shoppingid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shoppingid(), target);
  }

  // int32 shoppingNum = 4;
  if (this->shoppingnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_shoppingnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PayGoodsInfo)
  return target;
}

size_t PayGoodsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PayGoodsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shoppingId = 1;
  if (this->shoppingid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shoppingid());
  }

  // int32 shoppingNum = 4;
  if (this->shoppingnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shoppingnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayGoodsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PayGoodsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PayGoodsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PayGoodsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PayGoodsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PayGoodsInfo)
    MergeFrom(*source);
  }
}

void PayGoodsInfo::MergeFrom(const PayGoodsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PayGoodsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shoppingid() != 0) {
    _internal_set_shoppingid(from._internal_shoppingid());
  }
  if (from.shoppingnum() != 0) {
    _internal_set_shoppingnum(from._internal_shoppingnum());
  }
}

void PayGoodsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PayGoodsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayGoodsInfo::CopyFrom(const PayGoodsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PayGoodsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayGoodsInfo::IsInitialized() const {
  return true;
}

void PayGoodsInfo::InternalSwap(PayGoodsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shoppingid_, other->shoppingid_);
  swap(shoppingnum_, other->shoppingnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PayGoodsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGetSpaceBack::InitAsDefaultInstance() {
}
class CGetSpaceBack::_Internal {
 public:
};

CGetSpaceBack::CGetSpaceBack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CGetSpaceBack)
}
CGetSpaceBack::CGetSpaceBack(const CGetSpaceBack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  houseid_ = from.houseid_;
  // @@protoc_insertion_point(copy_constructor:pb.CGetSpaceBack)
}

void CGetSpaceBack::SharedCtor() {
  houseid_ = 0;
}

CGetSpaceBack::~CGetSpaceBack() {
  // @@protoc_insertion_point(destructor:pb.CGetSpaceBack)
  SharedDtor();
}

void CGetSpaceBack::SharedDtor() {
}

void CGetSpaceBack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetSpaceBack& CGetSpaceBack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetSpaceBack_setSpace_2eproto.base);
  return *internal_default_instance();
}


void CGetSpaceBack::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CGetSpaceBack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  houseid_ = 0;
  _internal_metadata_.Clear();
}

const char* CGetSpaceBack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetSpaceBack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CGetSpaceBack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CGetSpaceBack)
  return target;
}

size_t CGetSpaceBack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CGetSpaceBack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetSpaceBack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CGetSpaceBack)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetSpaceBack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetSpaceBack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CGetSpaceBack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CGetSpaceBack)
    MergeFrom(*source);
  }
}

void CGetSpaceBack::MergeFrom(const CGetSpaceBack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CGetSpaceBack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void CGetSpaceBack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CGetSpaceBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetSpaceBack::CopyFrom(const CGetSpaceBack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CGetSpaceBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetSpaceBack::IsInitialized() const {
  return true;
}

void CGetSpaceBack::InternalSwap(CGetSpaceBack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetSpaceBack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetSpaceBack::InitAsDefaultInstance() {
}
class SGetSpaceBack::_Internal {
 public:
};

SGetSpaceBack::SGetSpaceBack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SGetSpaceBack)
}
SGetSpaceBack::SGetSpaceBack(const SGetSpaceBack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  androidurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_androidurl().empty()) {
    androidurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.androidurl_);
  }
  iosurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iosurl().empty()) {
    iosurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iosurl_);
  }
  windowsurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_windowsurl().empty()) {
    windowsurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.windowsurl_);
  }
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_configurl().empty()) {
    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverluaurl().empty()) {
    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientluaurl().empty()) {
    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serialnumber_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(serialnumber_));
  // @@protoc_insertion_point(copy_constructor:pb.SGetSpaceBack)
}

void SGetSpaceBack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGetSpaceBack_setSpace_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iosurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  windowsurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serialnumber_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(serialnumber_));
}

SGetSpaceBack::~SGetSpaceBack() {
  // @@protoc_insertion_point(destructor:pb.SGetSpaceBack)
  SharedDtor();
}

void SGetSpaceBack::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iosurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  windowsurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGetSpaceBack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetSpaceBack& SGetSpaceBack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetSpaceBack_setSpace_2eproto.base);
  return *internal_default_instance();
}


void SGetSpaceBack::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SGetSpaceBack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  androidurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iosurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  windowsurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serialnumber_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(serialnumber_));
  _internal_metadata_.Clear();
}

const char* SGetSpaceBack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.nickName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 relation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          relation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string androidUrl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_androidurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.androidUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iosUrl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_iosurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.iosUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string windowsUrl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_windowsurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.windowsUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onlineTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          onlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 createUid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          createuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 checkStatus = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          checkstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SerialNumber = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          serialnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string configUrl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_configurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.configUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerLuaUrl = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_serverluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.ServerLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ClientLuaUrl = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_clientluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SGetSpaceBack.ClientLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetSpaceBack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SGetSpaceBack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string cover = 2;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.cover");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cover(), target);
  }

  // string resource = 3;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.resource");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resource(), target);
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_uid(), target);
  }

  // string nickName = 5;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.nickName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nickname(), target);
  }

  // string avatar = 6;
  if (this->avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.avatar");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_avatar(), target);
  }

  // int32 relation = 7;
  if (this->relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_relation(), target);
  }

  // string androidUrl = 8;
  if (this->androidurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_androidurl().data(), static_cast<int>(this->_internal_androidurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.androidUrl");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_androidurl(), target);
  }

  // string iosUrl = 9;
  if (this->iosurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iosurl().data(), static_cast<int>(this->_internal_iosurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.iosUrl");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_iosurl(), target);
  }

  // string windowsUrl = 10;
  if (this->windowsurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_windowsurl().data(), static_cast<int>(this->_internal_windowsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.windowsUrl");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_windowsurl(), target);
  }

  // int32 onlineTime = 11;
  if (this->onlinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_onlinetime(), target);
  }

  // int32 type = 12;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_type(), target);
  }

  // int32 createUid = 13;
  if (this->createuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_createuid(), target);
  }

  // int32 checkStatus = 14;
  if (this->checkstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_checkstatus(), target);
  }

  // int32 SerialNumber = 15;
  if (this->serialnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_serialnumber(), target);
  }

  // string configUrl = 16;
  if (this->configurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configurl().data(), static_cast<int>(this->_internal_configurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.configUrl");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_configurl(), target);
  }

  // string ServerLuaUrl = 17;
  if (this->serverluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverluaurl().data(), static_cast<int>(this->_internal_serverluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.ServerLuaUrl");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_serverluaurl(), target);
  }

  // string ClientLuaUrl = 18;
  if (this->clientluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientluaurl().data(), static_cast<int>(this->_internal_clientluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SGetSpaceBack.ClientLuaUrl");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_clientluaurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SGetSpaceBack)
  return target;
}

size_t SGetSpaceBack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SGetSpaceBack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cover = 2;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // string resource = 3;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string nickName = 5;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string avatar = 6;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string androidUrl = 8;
  if (this->androidurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_androidurl());
  }

  // string iosUrl = 9;
  if (this->iosurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iosurl());
  }

  // string windowsUrl = 10;
  if (this->windowsurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_windowsurl());
  }

  // string configUrl = 16;
  if (this->configurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configurl());
  }

  // string ServerLuaUrl = 17;
  if (this->serverluaurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverluaurl());
  }

  // string ClientLuaUrl = 18;
  if (this->clientluaurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientluaurl());
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 relation = 7;
  if (this->relation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_relation());
  }

  // int32 onlineTime = 11;
  if (this->onlinetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onlinetime());
  }

  // int32 type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 createUid = 13;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_createuid());
  }

  // int32 checkStatus = 14;
  if (this->checkstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_checkstatus());
  }

  // int32 SerialNumber = 15;
  if (this->serialnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serialnumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetSpaceBack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SGetSpaceBack)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetSpaceBack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetSpaceBack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SGetSpaceBack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SGetSpaceBack)
    MergeFrom(*source);
  }
}

void SGetSpaceBack::MergeFrom(const SGetSpaceBack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SGetSpaceBack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.resource().size() > 0) {

    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  if (from.androidurl().size() > 0) {

    androidurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.androidurl_);
  }
  if (from.iosurl().size() > 0) {

    iosurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iosurl_);
  }
  if (from.windowsurl().size() > 0) {

    windowsurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.windowsurl_);
  }
  if (from.configurl().size() > 0) {

    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  if (from.serverluaurl().size() > 0) {

    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  if (from.clientluaurl().size() > 0) {

    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.relation() != 0) {
    _internal_set_relation(from._internal_relation());
  }
  if (from.onlinetime() != 0) {
    _internal_set_onlinetime(from._internal_onlinetime());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.createuid() != 0) {
    _internal_set_createuid(from._internal_createuid());
  }
  if (from.checkstatus() != 0) {
    _internal_set_checkstatus(from._internal_checkstatus());
  }
  if (from.serialnumber() != 0) {
    _internal_set_serialnumber(from._internal_serialnumber());
  }
}

void SGetSpaceBack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SGetSpaceBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetSpaceBack::CopyFrom(const SGetSpaceBack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SGetSpaceBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetSpaceBack::IsInitialized() const {
  return true;
}

void SGetSpaceBack::InternalSwap(SGetSpaceBack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  androidurl_.Swap(&other->androidurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iosurl_.Swap(&other->iosurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  windowsurl_.Swap(&other->windowsurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  configurl_.Swap(&other->configurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverluaurl_.Swap(&other->serverluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientluaurl_.Swap(&other->clientluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(relation_, other->relation_);
  swap(onlinetime_, other->onlinetime_);
  swap(type_, other->type_);
  swap(createuid_, other->createuid_);
  swap(checkstatus_, other->checkstatus_);
  swap(serialnumber_, other->serialnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetSpaceBack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGetLayPosition::InitAsDefaultInstance() {
}
class CGetLayPosition::_Internal {
 public:
};

CGetLayPosition::CGetLayPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CGetLayPosition)
}
CGetLayPosition::CGetLayPosition(const CGetLayPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  houseid_ = from.houseid_;
  // @@protoc_insertion_point(copy_constructor:pb.CGetLayPosition)
}

void CGetLayPosition::SharedCtor() {
  houseid_ = 0;
}

CGetLayPosition::~CGetLayPosition() {
  // @@protoc_insertion_point(destructor:pb.CGetLayPosition)
  SharedDtor();
}

void CGetLayPosition::SharedDtor() {
}

void CGetLayPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetLayPosition& CGetLayPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetLayPosition_setSpace_2eproto.base);
  return *internal_default_instance();
}


void CGetLayPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CGetLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  houseid_ = 0;
  _internal_metadata_.Clear();
}

const char* CGetLayPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetLayPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CGetLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CGetLayPosition)
  return target;
}

size_t CGetLayPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CGetLayPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetLayPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CGetLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetLayPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetLayPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CGetLayPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CGetLayPosition)
    MergeFrom(*source);
  }
}

void CGetLayPosition::MergeFrom(const CGetLayPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CGetLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void CGetLayPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CGetLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetLayPosition::CopyFrom(const CGetLayPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CGetLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetLayPosition::IsInitialized() const {
  return true;
}

void CGetLayPosition::InternalSwap(CGetLayPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetLayPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetLayPosition::InitAsDefaultInstance() {
}
class SGetLayPosition::_Internal {
 public:
};

SGetLayPosition::SGetLayPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SGetLayPosition)
}
SGetLayPosition::SGetLayPosition(const SGetLayPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      layposition_(from.layposition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.SGetLayPosition)
}

void SGetLayPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGetLayPosition_setSpace_2eproto.base);
}

SGetLayPosition::~SGetLayPosition() {
  // @@protoc_insertion_point(destructor:pb.SGetLayPosition)
  SharedDtor();
}

void SGetLayPosition::SharedDtor() {
}

void SGetLayPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetLayPosition& SGetLayPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetLayPosition_setSpace_2eproto.base);
  return *internal_default_instance();
}


void SGetLayPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SGetLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layposition_.Clear();
  _internal_metadata_.Clear();
}

const char* SGetLayPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.BaseLayPosition layPosition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layposition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetLayPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SGetLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.BaseLayPosition layPosition = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layposition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_layposition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SGetLayPosition)
  return target;
}

size_t SGetLayPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SGetLayPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BaseLayPosition layPosition = 1;
  total_size += 1UL * this->_internal_layposition_size();
  for (const auto& msg : this->layposition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetLayPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SGetLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetLayPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetLayPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SGetLayPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SGetLayPosition)
    MergeFrom(*source);
  }
}

void SGetLayPosition::MergeFrom(const SGetLayPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SGetLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layposition_.MergeFrom(from.layposition_);
}

void SGetLayPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SGetLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetLayPosition::CopyFrom(const SGetLayPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SGetLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetLayPosition::IsInitialized() const {
  return true;
}

void SGetLayPosition::InternalSwap(SGetLayPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  layposition_.InternalSwap(&other->layposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetLayPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSetLayPosition::InitAsDefaultInstance() {
}
class CSetLayPosition::_Internal {
 public:
};

CSetLayPosition::CSetLayPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CSetLayPosition)
}
CSetLayPosition::CSetLayPosition(const CSetLayPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      layposition_(from.layposition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  houseid_ = from.houseid_;
  // @@protoc_insertion_point(copy_constructor:pb.CSetLayPosition)
}

void CSetLayPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSetLayPosition_setSpace_2eproto.base);
  houseid_ = 0;
}

CSetLayPosition::~CSetLayPosition() {
  // @@protoc_insertion_point(destructor:pb.CSetLayPosition)
  SharedDtor();
}

void CSetLayPosition::SharedDtor() {
}

void CSetLayPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSetLayPosition& CSetLayPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSetLayPosition_setSpace_2eproto.base);
  return *internal_default_instance();
}


void CSetLayPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CSetLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layposition_.Clear();
  houseid_ = 0;
  _internal_metadata_.Clear();
}

const char* CSetLayPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.BaseLayPosition LayPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layposition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSetLayPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CSetLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // repeated .pb.BaseLayPosition LayPosition = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layposition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_layposition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CSetLayPosition)
  return target;
}

size_t CSetLayPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CSetLayPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BaseLayPosition LayPosition = 2;
  total_size += 1UL * this->_internal_layposition_size();
  for (const auto& msg : this->layposition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSetLayPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CSetLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CSetLayPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSetLayPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CSetLayPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CSetLayPosition)
    MergeFrom(*source);
  }
}

void CSetLayPosition::MergeFrom(const CSetLayPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CSetLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layposition_.MergeFrom(from.layposition_);
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void CSetLayPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CSetLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSetLayPosition::CopyFrom(const CSetLayPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CSetLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSetLayPosition::IsInitialized() const {
  return true;
}

void CSetLayPosition::InternalSwap(CSetLayPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  layposition_.InternalSwap(&other->layposition_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSetLayPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSetLayPosition::InitAsDefaultInstance() {
}
class SSetLayPosition::_Internal {
 public:
};

SSetLayPosition::SSetLayPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SSetLayPosition)
}
SSetLayPosition::SSetLayPosition(const SSetLayPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      paygoodsinfo_(from.paygoodsinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  setresult_ = from.setresult_;
  // @@protoc_insertion_point(copy_constructor:pb.SSetLayPosition)
}

void SSetLayPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSetLayPosition_setSpace_2eproto.base);
  setresult_ = false;
}

SSetLayPosition::~SSetLayPosition() {
  // @@protoc_insertion_point(destructor:pb.SSetLayPosition)
  SharedDtor();
}

void SSetLayPosition::SharedDtor() {
}

void SSetLayPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSetLayPosition& SSetLayPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSetLayPosition_setSpace_2eproto.base);
  return *internal_default_instance();
}


void SSetLayPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SSetLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paygoodsinfo_.Clear();
  setresult_ = false;
  _internal_metadata_.Clear();
}

const char* SSetLayPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.PayGoodsInfo payGoodsInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paygoodsinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool setResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          setresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSetLayPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SSetLayPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.PayGoodsInfo payGoodsInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paygoodsinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_paygoodsinfo(i), target, stream);
  }

  // bool setResult = 2;
  if (this->setresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_setresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SSetLayPosition)
  return target;
}

size_t SSetLayPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SSetLayPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.PayGoodsInfo payGoodsInfo = 1;
  total_size += 1UL * this->_internal_paygoodsinfo_size();
  for (const auto& msg : this->paygoodsinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool setResult = 2;
  if (this->setresult() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSetLayPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SSetLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SSetLayPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSetLayPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SSetLayPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SSetLayPosition)
    MergeFrom(*source);
  }
}

void SSetLayPosition::MergeFrom(const SSetLayPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SSetLayPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paygoodsinfo_.MergeFrom(from.paygoodsinfo_);
  if (from.setresult() != 0) {
    _internal_set_setresult(from._internal_setresult());
  }
}

void SSetLayPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SSetLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSetLayPosition::CopyFrom(const SSetLayPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SSetLayPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSetLayPosition::IsInitialized() const {
  return true;
}

void SSetLayPosition::InternalSwap(SSetLayPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paygoodsinfo_.InternalSwap(&other->paygoodsinfo_);
  swap(setresult_, other->setresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSetLayPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::PhotoWall* Arena::CreateMaybeMessage< ::pb::PhotoWall >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PhotoWall >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BaseLayPosition* Arena::CreateMaybeMessage< ::pb::BaseLayPosition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BaseLayPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PayGoodsInfo* Arena::CreateMaybeMessage< ::pb::PayGoodsInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PayGoodsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CGetSpaceBack* Arena::CreateMaybeMessage< ::pb::CGetSpaceBack >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CGetSpaceBack >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SGetSpaceBack* Arena::CreateMaybeMessage< ::pb::SGetSpaceBack >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SGetSpaceBack >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CGetLayPosition* Arena::CreateMaybeMessage< ::pb::CGetLayPosition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CGetLayPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SGetLayPosition* Arena::CreateMaybeMessage< ::pb::SGetLayPosition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SGetLayPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CSetLayPosition* Arena::CreateMaybeMessage< ::pb::CSetLayPosition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CSetLayPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SSetLayPosition* Arena::CreateMaybeMessage< ::pb::SSetLayPosition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SSetLayPosition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
