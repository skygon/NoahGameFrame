// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: award.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_award_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_award_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_award_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_award_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_award_2eproto;
namespace award {
class BAward;
class BAwardDefaultTypeInternal;
extern BAwardDefaultTypeInternal _BAward_default_instance_;
}  // namespace award
PROTOBUF_NAMESPACE_OPEN
template<> ::award::BAward* Arena::CreateMaybeMessage<::award::BAward>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace award {

// ===================================================================

class BAward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:award.BAward) */ {
 public:
  BAward();
  virtual ~BAward();

  BAward(const BAward& from);
  BAward(BAward&& from) noexcept
    : BAward() {
    *this = ::std::move(from);
  }

  inline BAward& operator=(const BAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline BAward& operator=(BAward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BAward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BAward* internal_default_instance() {
    return reinterpret_cast<const BAward*>(
               &_BAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BAward& a, BAward& b) {
    a.Swap(&b);
  }
  inline void Swap(BAward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BAward* New() const final {
    return CreateMaybeMessage<BAward>(nullptr);
  }

  BAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BAward& from);
  void MergeFrom(const BAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "award.BAward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_award_2eproto);
    return ::descriptor_table_award_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardNameFieldNumber = 2,
    kAwardURLFieldNumber = 3,
    kAwardDescribeFieldNumber = 5,
    kAwardIDFieldNumber = 1,
    kAwardTypeFieldNumber = 4,
    kGoodsIdFieldNumber = 6,
  };
  // string awardName = 2;
  void clear_awardname();
  const std::string& awardname() const;
  void set_awardname(const std::string& value);
  void set_awardname(std::string&& value);
  void set_awardname(const char* value);
  void set_awardname(const char* value, size_t size);
  std::string* mutable_awardname();
  std::string* release_awardname();
  void set_allocated_awardname(std::string* awardname);
  private:
  const std::string& _internal_awardname() const;
  void _internal_set_awardname(const std::string& value);
  std::string* _internal_mutable_awardname();
  public:

  // string awardURL = 3;
  void clear_awardurl();
  const std::string& awardurl() const;
  void set_awardurl(const std::string& value);
  void set_awardurl(std::string&& value);
  void set_awardurl(const char* value);
  void set_awardurl(const char* value, size_t size);
  std::string* mutable_awardurl();
  std::string* release_awardurl();
  void set_allocated_awardurl(std::string* awardurl);
  private:
  const std::string& _internal_awardurl() const;
  void _internal_set_awardurl(const std::string& value);
  std::string* _internal_mutable_awardurl();
  public:

  // string awardDescribe = 5;
  void clear_awarddescribe();
  const std::string& awarddescribe() const;
  void set_awarddescribe(const std::string& value);
  void set_awarddescribe(std::string&& value);
  void set_awarddescribe(const char* value);
  void set_awarddescribe(const char* value, size_t size);
  std::string* mutable_awarddescribe();
  std::string* release_awarddescribe();
  void set_allocated_awarddescribe(std::string* awarddescribe);
  private:
  const std::string& _internal_awarddescribe() const;
  void _internal_set_awarddescribe(const std::string& value);
  std::string* _internal_mutable_awarddescribe();
  public:

  // int32 awardID = 1;
  void clear_awardid();
  ::PROTOBUF_NAMESPACE_ID::int32 awardid() const;
  void set_awardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_awardid() const;
  void _internal_set_awardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 awardType = 4;
  void clear_awardtype();
  ::PROTOBUF_NAMESPACE_ID::int32 awardtype() const;
  void set_awardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_awardtype() const;
  void _internal_set_awardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 6;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:award.BAward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awardname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awardurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awarddescribe_;
  ::PROTOBUF_NAMESPACE_ID::int32 awardid_;
  ::PROTOBUF_NAMESPACE_ID::int32 awardtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_award_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BAward

// int32 awardID = 1;
inline void BAward::clear_awardid() {
  awardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAward::_internal_awardid() const {
  return awardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAward::awardid() const {
  // @@protoc_insertion_point(field_get:award.BAward.awardID)
  return _internal_awardid();
}
inline void BAward::_internal_set_awardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  awardid_ = value;
}
inline void BAward::set_awardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_awardid(value);
  // @@protoc_insertion_point(field_set:award.BAward.awardID)
}

// string awardName = 2;
inline void BAward::clear_awardname() {
  awardname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BAward::awardname() const {
  // @@protoc_insertion_point(field_get:award.BAward.awardName)
  return _internal_awardname();
}
inline void BAward::set_awardname(const std::string& value) {
  _internal_set_awardname(value);
  // @@protoc_insertion_point(field_set:award.BAward.awardName)
}
inline std::string* BAward::mutable_awardname() {
  // @@protoc_insertion_point(field_mutable:award.BAward.awardName)
  return _internal_mutable_awardname();
}
inline const std::string& BAward::_internal_awardname() const {
  return awardname_.GetNoArena();
}
inline void BAward::_internal_set_awardname(const std::string& value) {
  
  awardname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BAward::set_awardname(std::string&& value) {
  
  awardname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:award.BAward.awardName)
}
inline void BAward::set_awardname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  awardname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:award.BAward.awardName)
}
inline void BAward::set_awardname(const char* value, size_t size) {
  
  awardname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:award.BAward.awardName)
}
inline std::string* BAward::_internal_mutable_awardname() {
  
  return awardname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BAward::release_awardname() {
  // @@protoc_insertion_point(field_release:award.BAward.awardName)
  
  return awardname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BAward::set_allocated_awardname(std::string* awardname) {
  if (awardname != nullptr) {
    
  } else {
    
  }
  awardname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awardname);
  // @@protoc_insertion_point(field_set_allocated:award.BAward.awardName)
}

// string awardURL = 3;
inline void BAward::clear_awardurl() {
  awardurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BAward::awardurl() const {
  // @@protoc_insertion_point(field_get:award.BAward.awardURL)
  return _internal_awardurl();
}
inline void BAward::set_awardurl(const std::string& value) {
  _internal_set_awardurl(value);
  // @@protoc_insertion_point(field_set:award.BAward.awardURL)
}
inline std::string* BAward::mutable_awardurl() {
  // @@protoc_insertion_point(field_mutable:award.BAward.awardURL)
  return _internal_mutable_awardurl();
}
inline const std::string& BAward::_internal_awardurl() const {
  return awardurl_.GetNoArena();
}
inline void BAward::_internal_set_awardurl(const std::string& value) {
  
  awardurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BAward::set_awardurl(std::string&& value) {
  
  awardurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:award.BAward.awardURL)
}
inline void BAward::set_awardurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  awardurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:award.BAward.awardURL)
}
inline void BAward::set_awardurl(const char* value, size_t size) {
  
  awardurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:award.BAward.awardURL)
}
inline std::string* BAward::_internal_mutable_awardurl() {
  
  return awardurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BAward::release_awardurl() {
  // @@protoc_insertion_point(field_release:award.BAward.awardURL)
  
  return awardurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BAward::set_allocated_awardurl(std::string* awardurl) {
  if (awardurl != nullptr) {
    
  } else {
    
  }
  awardurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awardurl);
  // @@protoc_insertion_point(field_set_allocated:award.BAward.awardURL)
}

// int32 awardType = 4;
inline void BAward::clear_awardtype() {
  awardtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAward::_internal_awardtype() const {
  return awardtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAward::awardtype() const {
  // @@protoc_insertion_point(field_get:award.BAward.awardType)
  return _internal_awardtype();
}
inline void BAward::_internal_set_awardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  awardtype_ = value;
}
inline void BAward::set_awardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_awardtype(value);
  // @@protoc_insertion_point(field_set:award.BAward.awardType)
}

// string awardDescribe = 5;
inline void BAward::clear_awarddescribe() {
  awarddescribe_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BAward::awarddescribe() const {
  // @@protoc_insertion_point(field_get:award.BAward.awardDescribe)
  return _internal_awarddescribe();
}
inline void BAward::set_awarddescribe(const std::string& value) {
  _internal_set_awarddescribe(value);
  // @@protoc_insertion_point(field_set:award.BAward.awardDescribe)
}
inline std::string* BAward::mutable_awarddescribe() {
  // @@protoc_insertion_point(field_mutable:award.BAward.awardDescribe)
  return _internal_mutable_awarddescribe();
}
inline const std::string& BAward::_internal_awarddescribe() const {
  return awarddescribe_.GetNoArena();
}
inline void BAward::_internal_set_awarddescribe(const std::string& value) {
  
  awarddescribe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BAward::set_awarddescribe(std::string&& value) {
  
  awarddescribe_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:award.BAward.awardDescribe)
}
inline void BAward::set_awarddescribe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  awarddescribe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:award.BAward.awardDescribe)
}
inline void BAward::set_awarddescribe(const char* value, size_t size) {
  
  awarddescribe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:award.BAward.awardDescribe)
}
inline std::string* BAward::_internal_mutable_awarddescribe() {
  
  return awarddescribe_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BAward::release_awarddescribe() {
  // @@protoc_insertion_point(field_release:award.BAward.awardDescribe)
  
  return awarddescribe_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BAward::set_allocated_awarddescribe(std::string* awarddescribe) {
  if (awarddescribe != nullptr) {
    
  } else {
    
  }
  awarddescribe_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awarddescribe);
  // @@protoc_insertion_point(field_set_allocated:award.BAward.awardDescribe)
}

// int32 goodsId = 6;
inline void BAward::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAward::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAward::goodsid() const {
  // @@protoc_insertion_point(field_get:award.BAward.goodsId)
  return _internal_goodsid();
}
inline void BAward::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void BAward::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:award.BAward.goodsId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace award

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_award_2eproto
