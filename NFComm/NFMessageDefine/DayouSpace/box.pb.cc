// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: box.proto

#include "box.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace box {
class boxMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<boxMsg> _instance;
} _boxMsg_default_instance_;
class SNftBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNftBox> _instance;
} _SNftBox_default_instance_;
}  // namespace box
static void InitDefaultsscc_info_SNftBox_box_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::box::_SNftBox_default_instance_;
    new (ptr) ::box::SNftBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box::SNftBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNftBox_box_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNftBox_box_2eproto}, {}};

static void InitDefaultsscc_info_boxMsg_box_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::box::_boxMsg_default_instance_;
    new (ptr) ::box::boxMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box::boxMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_boxMsg_box_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_boxMsg_box_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_box_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_box_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_box_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_box_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::box::boxMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::box::boxMsg, boxid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::box::SNftBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::box::SNftBox, status_),
  PROTOBUF_FIELD_OFFSET(::box::SNftBox, tips_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::box::boxMsg)},
  { 6, -1, sizeof(::box::SNftBox)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::box::_boxMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::box::_SNftBox_default_instance_),
};

const char descriptor_table_protodef_box_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tbox.proto\022\003box\"\027\n\006boxMsg\022\r\n\005boxId\030\001 \001("
  "\005\"\'\n\007SNftBox\022\016\n\006status\030\001 \001(\005\022\014\n\004tips\030\002 \001"
  "(\tB\037\n\030com.dayou.space.protobufB\003Boxb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_box_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_box_2eproto_sccs[2] = {
  &scc_info_SNftBox_box_2eproto.base,
  &scc_info_boxMsg_box_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_box_2eproto_once;
static bool descriptor_table_box_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_box_2eproto = {
  &descriptor_table_box_2eproto_initialized, descriptor_table_protodef_box_2eproto, "box.proto", 123,
  &descriptor_table_box_2eproto_once, descriptor_table_box_2eproto_sccs, descriptor_table_box_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_box_2eproto::offsets,
  file_level_metadata_box_2eproto, 2, file_level_enum_descriptors_box_2eproto, file_level_service_descriptors_box_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_box_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_box_2eproto), true);
namespace box {

// ===================================================================

void boxMsg::InitAsDefaultInstance() {
}
class boxMsg::_Internal {
 public:
};

boxMsg::boxMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:box.boxMsg)
}
boxMsg::boxMsg(const boxMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  boxid_ = from.boxid_;
  // @@protoc_insertion_point(copy_constructor:box.boxMsg)
}

void boxMsg::SharedCtor() {
  boxid_ = 0;
}

boxMsg::~boxMsg() {
  // @@protoc_insertion_point(destructor:box.boxMsg)
  SharedDtor();
}

void boxMsg::SharedDtor() {
}

void boxMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const boxMsg& boxMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_boxMsg_box_2eproto.base);
  return *internal_default_instance();
}


void boxMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:box.boxMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boxid_ = 0;
  _internal_metadata_.Clear();
}

const char* boxMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boxId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* boxMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:box.boxMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boxId = 1;
  if (this->boxid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boxid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box.boxMsg)
  return target;
}

size_t boxMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box.boxMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 boxId = 1;
  if (this->boxid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boxid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void boxMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box.boxMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const boxMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<boxMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box.boxMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box.boxMsg)
    MergeFrom(*source);
  }
}

void boxMsg::MergeFrom(const boxMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box.boxMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boxid() != 0) {
    _internal_set_boxid(from._internal_boxid());
  }
}

void boxMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box.boxMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boxMsg::CopyFrom(const boxMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box.boxMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boxMsg::IsInitialized() const {
  return true;
}

void boxMsg::InternalSwap(boxMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(boxid_, other->boxid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata boxMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNftBox::InitAsDefaultInstance() {
}
class SNftBox::_Internal {
 public:
};

SNftBox::SNftBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:box.SNftBox)
}
SNftBox::SNftBox(const SNftBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tips().empty()) {
    tips_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tips_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:box.SNftBox)
}

void SNftBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNftBox_box_2eproto.base);
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

SNftBox::~SNftBox() {
  // @@protoc_insertion_point(destructor:box.SNftBox)
  SharedDtor();
}

void SNftBox::SharedDtor() {
  tips_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SNftBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNftBox& SNftBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNftBox_box_2eproto.base);
  return *internal_default_instance();
}


void SNftBox::Clear() {
// @@protoc_insertion_point(message_clear_start:box.SNftBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SNftBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tips();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "box.SNftBox.tips"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNftBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:box.SNftBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string tips = 2;
  if (this->tips().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tips().data(), static_cast<int>(this->_internal_tips().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "box.SNftBox.tips");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tips(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box.SNftBox)
  return target;
}

size_t SNftBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box.SNftBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tips = 2;
  if (this->tips().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tips());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNftBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box.SNftBox)
  GOOGLE_DCHECK_NE(&from, this);
  const SNftBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNftBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box.SNftBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box.SNftBox)
    MergeFrom(*source);
  }
}

void SNftBox::MergeFrom(const SNftBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box.SNftBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tips().size() > 0) {

    tips_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tips_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SNftBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box.SNftBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNftBox::CopyFrom(const SNftBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box.SNftBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNftBox::IsInitialized() const {
  return true;
}

void SNftBox::InternalSwap(SNftBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tips_.Swap(&other->tips_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNftBox::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace box
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::box::boxMsg* Arena::CreateMaybeMessage< ::box::boxMsg >(Arena* arena) {
  return Arena::CreateInternal< ::box::boxMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::box::SNftBox* Arena::CreateMaybeMessage< ::box::SNftBox >(Arena* arena) {
  return Arena::CreateInternal< ::box::SNftBox >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
