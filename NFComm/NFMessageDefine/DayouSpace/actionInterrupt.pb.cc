// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actionInterrupt.proto

#include "actionInterrupt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace actionInterrupt {
class CActionInterruptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CActionInterrupt> _instance;
} _CActionInterrupt_default_instance_;
class SActionInterruptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SActionInterrupt> _instance;
} _SActionInterrupt_default_instance_;
}  // namespace actionInterrupt
static void InitDefaultsscc_info_CActionInterrupt_actionInterrupt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actionInterrupt::_CActionInterrupt_default_instance_;
    new (ptr) ::actionInterrupt::CActionInterrupt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actionInterrupt::CActionInterrupt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CActionInterrupt_actionInterrupt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CActionInterrupt_actionInterrupt_2eproto}, {}};

static void InitDefaultsscc_info_SActionInterrupt_actionInterrupt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actionInterrupt::_SActionInterrupt_default_instance_;
    new (ptr) ::actionInterrupt::SActionInterrupt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actionInterrupt::SActionInterrupt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SActionInterrupt_actionInterrupt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SActionInterrupt_actionInterrupt_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_actionInterrupt_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_actionInterrupt_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_actionInterrupt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_actionInterrupt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actionInterrupt::CActionInterrupt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actionInterrupt::CActionInterrupt, actionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actionInterrupt::SActionInterrupt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actionInterrupt::SActionInterrupt, actionid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::actionInterrupt::CActionInterrupt)},
  { 6, -1, sizeof(::actionInterrupt::SActionInterrupt)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actionInterrupt::_CActionInterrupt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actionInterrupt::_SActionInterrupt_default_instance_),
};

const char descriptor_table_protodef_actionInterrupt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025actionInterrupt.proto\022\017actionInterrupt"
  "\032\014vector.proto\"$\n\020CActionInterrupt\022\020\n\010ac"
  "tionId\030\001 \001(\005\"$\n\020SActionInterrupt\022\020\n\010acti"
  "onId\030\001 \001(\005B+\n\030com.dayou.space.protobufB\017"
  "ActionInterruptb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_actionInterrupt_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_actionInterrupt_2eproto_sccs[2] = {
  &scc_info_CActionInterrupt_actionInterrupt_2eproto.base,
  &scc_info_SActionInterrupt_actionInterrupt_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_actionInterrupt_2eproto_once;
static bool descriptor_table_actionInterrupt_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_actionInterrupt_2eproto = {
  &descriptor_table_actionInterrupt_2eproto_initialized, descriptor_table_protodef_actionInterrupt_2eproto, "actionInterrupt.proto", 183,
  &descriptor_table_actionInterrupt_2eproto_once, descriptor_table_actionInterrupt_2eproto_sccs, descriptor_table_actionInterrupt_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_actionInterrupt_2eproto::offsets,
  file_level_metadata_actionInterrupt_2eproto, 2, file_level_enum_descriptors_actionInterrupt_2eproto, file_level_service_descriptors_actionInterrupt_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_actionInterrupt_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_actionInterrupt_2eproto), true);
namespace actionInterrupt {

// ===================================================================

void CActionInterrupt::InitAsDefaultInstance() {
}
class CActionInterrupt::_Internal {
 public:
};

CActionInterrupt::CActionInterrupt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:actionInterrupt.CActionInterrupt)
}
CActionInterrupt::CActionInterrupt(const CActionInterrupt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actionid_ = from.actionid_;
  // @@protoc_insertion_point(copy_constructor:actionInterrupt.CActionInterrupt)
}

void CActionInterrupt::SharedCtor() {
  actionid_ = 0;
}

CActionInterrupt::~CActionInterrupt() {
  // @@protoc_insertion_point(destructor:actionInterrupt.CActionInterrupt)
  SharedDtor();
}

void CActionInterrupt::SharedDtor() {
}

void CActionInterrupt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CActionInterrupt& CActionInterrupt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CActionInterrupt_actionInterrupt_2eproto.base);
  return *internal_default_instance();
}


void CActionInterrupt::Clear() {
// @@protoc_insertion_point(message_clear_start:actionInterrupt.CActionInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_ = 0;
  _internal_metadata_.Clear();
}

const char* CActionInterrupt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 actionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CActionInterrupt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actionInterrupt.CActionInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 actionId = 1;
  if (this->actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actionInterrupt.CActionInterrupt)
  return target;
}

size_t CActionInterrupt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actionInterrupt.CActionInterrupt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 actionId = 1;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CActionInterrupt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actionInterrupt.CActionInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  const CActionInterrupt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CActionInterrupt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actionInterrupt.CActionInterrupt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actionInterrupt.CActionInterrupt)
    MergeFrom(*source);
  }
}

void CActionInterrupt::MergeFrom(const CActionInterrupt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actionInterrupt.CActionInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
}

void CActionInterrupt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actionInterrupt.CActionInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CActionInterrupt::CopyFrom(const CActionInterrupt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actionInterrupt.CActionInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CActionInterrupt::IsInitialized() const {
  return true;
}

void CActionInterrupt::InternalSwap(CActionInterrupt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actionid_, other->actionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CActionInterrupt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SActionInterrupt::InitAsDefaultInstance() {
}
class SActionInterrupt::_Internal {
 public:
};

SActionInterrupt::SActionInterrupt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:actionInterrupt.SActionInterrupt)
}
SActionInterrupt::SActionInterrupt(const SActionInterrupt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actionid_ = from.actionid_;
  // @@protoc_insertion_point(copy_constructor:actionInterrupt.SActionInterrupt)
}

void SActionInterrupt::SharedCtor() {
  actionid_ = 0;
}

SActionInterrupt::~SActionInterrupt() {
  // @@protoc_insertion_point(destructor:actionInterrupt.SActionInterrupt)
  SharedDtor();
}

void SActionInterrupt::SharedDtor() {
}

void SActionInterrupt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SActionInterrupt& SActionInterrupt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SActionInterrupt_actionInterrupt_2eproto.base);
  return *internal_default_instance();
}


void SActionInterrupt::Clear() {
// @@protoc_insertion_point(message_clear_start:actionInterrupt.SActionInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_ = 0;
  _internal_metadata_.Clear();
}

const char* SActionInterrupt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 actionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SActionInterrupt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actionInterrupt.SActionInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 actionId = 1;
  if (this->actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actionInterrupt.SActionInterrupt)
  return target;
}

size_t SActionInterrupt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actionInterrupt.SActionInterrupt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 actionId = 1;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SActionInterrupt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actionInterrupt.SActionInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  const SActionInterrupt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SActionInterrupt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actionInterrupt.SActionInterrupt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actionInterrupt.SActionInterrupt)
    MergeFrom(*source);
  }
}

void SActionInterrupt::MergeFrom(const SActionInterrupt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actionInterrupt.SActionInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
}

void SActionInterrupt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actionInterrupt.SActionInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SActionInterrupt::CopyFrom(const SActionInterrupt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actionInterrupt.SActionInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SActionInterrupt::IsInitialized() const {
  return true;
}

void SActionInterrupt::InternalSwap(SActionInterrupt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actionid_, other->actionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SActionInterrupt::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace actionInterrupt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::actionInterrupt::CActionInterrupt* Arena::CreateMaybeMessage< ::actionInterrupt::CActionInterrupt >(Arena* arena) {
  return Arena::CreateInternal< ::actionInterrupt::CActionInterrupt >(arena);
}
template<> PROTOBUF_NOINLINE ::actionInterrupt::SActionInterrupt* Arena::CreateMaybeMessage< ::actionInterrupt::SActionInterrupt >(Arena* arena) {
  return Arena::CreateInternal< ::actionInterrupt::SActionInterrupt >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
