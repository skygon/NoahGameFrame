// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spacePublished.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spacePublished_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spacePublished_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spacePublished_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spacePublished_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spacePublished_2eproto;
namespace spacePublished {
class CSpacePublishedList;
class CSpacePublishedListDefaultTypeInternal;
extern CSpacePublishedListDefaultTypeInternal _CSpacePublishedList_default_instance_;
class SSpacePublishedList;
class SSpacePublishedListDefaultTypeInternal;
extern SSpacePublishedListDefaultTypeInternal _SSpacePublishedList_default_instance_;
class SpacePublished;
class SpacePublishedDefaultTypeInternal;
extern SpacePublishedDefaultTypeInternal _SpacePublished_default_instance_;
}  // namespace spacePublished
PROTOBUF_NAMESPACE_OPEN
template<> ::spacePublished::CSpacePublishedList* Arena::CreateMaybeMessage<::spacePublished::CSpacePublishedList>(Arena*);
template<> ::spacePublished::SSpacePublishedList* Arena::CreateMaybeMessage<::spacePublished::SSpacePublishedList>(Arena*);
template<> ::spacePublished::SpacePublished* Arena::CreateMaybeMessage<::spacePublished::SpacePublished>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spacePublished {

// ===================================================================

class CSpacePublishedList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spacePublished.CSpacePublishedList) */ {
 public:
  CSpacePublishedList();
  virtual ~CSpacePublishedList();

  CSpacePublishedList(const CSpacePublishedList& from);
  CSpacePublishedList(CSpacePublishedList&& from) noexcept
    : CSpacePublishedList() {
    *this = ::std::move(from);
  }

  inline CSpacePublishedList& operator=(const CSpacePublishedList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpacePublishedList& operator=(CSpacePublishedList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpacePublishedList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpacePublishedList* internal_default_instance() {
    return reinterpret_cast<const CSpacePublishedList*>(
               &_CSpacePublishedList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSpacePublishedList& a, CSpacePublishedList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpacePublishedList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpacePublishedList* New() const final {
    return CreateMaybeMessage<CSpacePublishedList>(nullptr);
  }

  CSpacePublishedList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpacePublishedList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpacePublishedList& from);
  void MergeFrom(const CSpacePublishedList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpacePublishedList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spacePublished.CSpacePublishedList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spacePublished_2eproto);
    return ::descriptor_table_spacePublished_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurPageFieldNumber = 1,
    kPageLimitFieldNumber = 2,
  };
  // int32 curPage = 1;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 2;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spacePublished.CSpacePublishedList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spacePublished_2eproto;
};
// -------------------------------------------------------------------

class SSpacePublishedList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spacePublished.SSpacePublishedList) */ {
 public:
  SSpacePublishedList();
  virtual ~SSpacePublishedList();

  SSpacePublishedList(const SSpacePublishedList& from);
  SSpacePublishedList(SSpacePublishedList&& from) noexcept
    : SSpacePublishedList() {
    *this = ::std::move(from);
  }

  inline SSpacePublishedList& operator=(const SSpacePublishedList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpacePublishedList& operator=(SSpacePublishedList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpacePublishedList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpacePublishedList* internal_default_instance() {
    return reinterpret_cast<const SSpacePublishedList*>(
               &_SSpacePublishedList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSpacePublishedList& a, SSpacePublishedList& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpacePublishedList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpacePublishedList* New() const final {
    return CreateMaybeMessage<SSpacePublishedList>(nullptr);
  }

  SSpacePublishedList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpacePublishedList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpacePublishedList& from);
  void MergeFrom(const SSpacePublishedList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpacePublishedList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spacePublished.SSpacePublishedList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spacePublished_2eproto);
    return ::descriptor_table_spacePublished_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kSpaceNumFieldNumber = 4,
    kPublishedSpaceNumFieldNumber = 5,
  };
  // repeated .spacePublished.SpacePublished list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::spacePublished::SpacePublished* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacePublished::SpacePublished >*
      mutable_list();
  private:
  const ::spacePublished::SpacePublished& _internal_list(int index) const;
  ::spacePublished::SpacePublished* _internal_add_list();
  public:
  const ::spacePublished::SpacePublished& list(int index) const;
  ::spacePublished::SpacePublished* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacePublished::SpacePublished >&
      list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceNum = 4;
  void clear_spacenum();
  ::PROTOBUF_NAMESPACE_ID::int32 spacenum() const;
  void set_spacenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacenum() const;
  void _internal_set_spacenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 publishedSpaceNum = 5;
  void clear_publishedspacenum();
  ::PROTOBUF_NAMESPACE_ID::int32 publishedspacenum() const;
  void set_publishedspacenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_publishedspacenum() const;
  void _internal_set_publishedspacenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spacePublished.SSpacePublishedList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacePublished::SpacePublished > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 publishedspacenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spacePublished_2eproto;
};
// -------------------------------------------------------------------

class SpacePublished :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spacePublished.SpacePublished) */ {
 public:
  SpacePublished();
  virtual ~SpacePublished();

  SpacePublished(const SpacePublished& from);
  SpacePublished(SpacePublished&& from) noexcept
    : SpacePublished() {
    *this = ::std::move(from);
  }

  inline SpacePublished& operator=(const SpacePublished& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpacePublished& operator=(SpacePublished&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpacePublished& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpacePublished* internal_default_instance() {
    return reinterpret_cast<const SpacePublished*>(
               &_SpacePublished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpacePublished& a, SpacePublished& b) {
    a.Swap(&b);
  }
  inline void Swap(SpacePublished* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpacePublished* New() const final {
    return CreateMaybeMessage<SpacePublished>(nullptr);
  }

  SpacePublished* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpacePublished>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpacePublished& from);
  void MergeFrom(const SpacePublished& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpacePublished* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spacePublished.SpacePublished";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spacePublished_2eproto);
    return ::descriptor_table_spacePublished_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kCoverFieldNumber = 4,
    kDescFieldNumber = 5,
    kCreatedAtFieldNumber = 8,
    kUpdateAtFieldNumber = 9,
    kHouseIdFieldNumber = 1,
    kHouseTypeFieldNumber = 2,
    kSpaceTypeFieldNumber = 6,
    kCurrentOnlineFieldNumber = 7,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cover = 4;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string desc = 5;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string createdAt = 8;
  void clear_createdat();
  const std::string& createdat() const;
  void set_createdat(const std::string& value);
  void set_createdat(std::string&& value);
  void set_createdat(const char* value);
  void set_createdat(const char* value, size_t size);
  std::string* mutable_createdat();
  std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // string updateAt = 9;
  void clear_updateat();
  const std::string& updateat() const;
  void set_updateat(const std::string& value);
  void set_updateat(std::string&& value);
  void set_updateat(const char* value);
  void set_updateat(const char* value, size_t size);
  std::string* mutable_updateat();
  std::string* release_updateat();
  void set_allocated_updateat(std::string* updateat);
  private:
  const std::string& _internal_updateat() const;
  void _internal_set_updateat(const std::string& value);
  std::string* _internal_mutable_updateat();
  public:

  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 2;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceType = 6;
  void clear_spacetype();
  ::PROTOBUF_NAMESPACE_ID::int32 spacetype() const;
  void set_spacetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacetype() const;
  void _internal_set_spacetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 currentOnline = 7;
  void clear_currentonline();
  ::PROTOBUF_NAMESPACE_ID::int32 currentonline() const;
  void set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentonline() const;
  void _internal_set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spacePublished.SpacePublished)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updateat_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentonline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spacePublished_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSpacePublishedList

// int32 curPage = 1;
inline void CSpacePublishedList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpacePublishedList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpacePublishedList::curpage() const {
  // @@protoc_insertion_point(field_get:spacePublished.CSpacePublishedList.curPage)
  return _internal_curpage();
}
inline void CSpacePublishedList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CSpacePublishedList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:spacePublished.CSpacePublishedList.curPage)
}

// int32 pageLimit = 2;
inline void CSpacePublishedList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpacePublishedList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpacePublishedList::pagelimit() const {
  // @@protoc_insertion_point(field_get:spacePublished.CSpacePublishedList.pageLimit)
  return _internal_pagelimit();
}
inline void CSpacePublishedList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CSpacePublishedList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:spacePublished.CSpacePublishedList.pageLimit)
}

// -------------------------------------------------------------------

// SSpacePublishedList

// repeated .spacePublished.SpacePublished list = 1;
inline int SSpacePublishedList::_internal_list_size() const {
  return list_.size();
}
inline int SSpacePublishedList::list_size() const {
  return _internal_list_size();
}
inline void SSpacePublishedList::clear_list() {
  list_.Clear();
}
inline ::spacePublished::SpacePublished* SSpacePublishedList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:spacePublished.SSpacePublishedList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacePublished::SpacePublished >*
SSpacePublishedList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:spacePublished.SSpacePublishedList.list)
  return &list_;
}
inline const ::spacePublished::SpacePublished& SSpacePublishedList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::spacePublished::SpacePublished& SSpacePublishedList::list(int index) const {
  // @@protoc_insertion_point(field_get:spacePublished.SSpacePublishedList.list)
  return _internal_list(index);
}
inline ::spacePublished::SpacePublished* SSpacePublishedList::_internal_add_list() {
  return list_.Add();
}
inline ::spacePublished::SpacePublished* SSpacePublishedList::add_list() {
  // @@protoc_insertion_point(field_add:spacePublished.SSpacePublishedList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacePublished::SpacePublished >&
SSpacePublishedList::list() const {
  // @@protoc_insertion_point(field_list:spacePublished.SSpacePublishedList.list)
  return list_;
}

// string msg = 2;
inline void SSpacePublishedList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpacePublishedList::msg() const {
  // @@protoc_insertion_point(field_get:spacePublished.SSpacePublishedList.msg)
  return _internal_msg();
}
inline void SSpacePublishedList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:spacePublished.SSpacePublishedList.msg)
}
inline std::string* SSpacePublishedList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:spacePublished.SSpacePublishedList.msg)
  return _internal_mutable_msg();
}
inline const std::string& SSpacePublishedList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SSpacePublishedList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpacePublishedList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spacePublished.SSpacePublishedList.msg)
}
inline void SSpacePublishedList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spacePublished.SSpacePublishedList.msg)
}
inline void SSpacePublishedList::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spacePublished.SSpacePublishedList.msg)
}
inline std::string* SSpacePublishedList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpacePublishedList::release_msg() {
  // @@protoc_insertion_point(field_release:spacePublished.SSpacePublishedList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpacePublishedList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:spacePublished.SSpacePublishedList.msg)
}

// int32 curPage = 3;
inline void SSpacePublishedList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpacePublishedList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpacePublishedList::curpage() const {
  // @@protoc_insertion_point(field_get:spacePublished.SSpacePublishedList.curPage)
  return _internal_curpage();
}
inline void SSpacePublishedList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SSpacePublishedList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:spacePublished.SSpacePublishedList.curPage)
}

// int32 spaceNum = 4;
inline void SSpacePublishedList::clear_spacenum() {
  spacenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpacePublishedList::_internal_spacenum() const {
  return spacenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpacePublishedList::spacenum() const {
  // @@protoc_insertion_point(field_get:spacePublished.SSpacePublishedList.spaceNum)
  return _internal_spacenum();
}
inline void SSpacePublishedList::_internal_set_spacenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacenum_ = value;
}
inline void SSpacePublishedList::set_spacenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacenum(value);
  // @@protoc_insertion_point(field_set:spacePublished.SSpacePublishedList.spaceNum)
}

// int32 publishedSpaceNum = 5;
inline void SSpacePublishedList::clear_publishedspacenum() {
  publishedspacenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpacePublishedList::_internal_publishedspacenum() const {
  return publishedspacenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpacePublishedList::publishedspacenum() const {
  // @@protoc_insertion_point(field_get:spacePublished.SSpacePublishedList.publishedSpaceNum)
  return _internal_publishedspacenum();
}
inline void SSpacePublishedList::_internal_set_publishedspacenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  publishedspacenum_ = value;
}
inline void SSpacePublishedList::set_publishedspacenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_publishedspacenum(value);
  // @@protoc_insertion_point(field_set:spacePublished.SSpacePublishedList.publishedSpaceNum)
}

// -------------------------------------------------------------------

// SpacePublished

// int32 houseId = 1;
inline void SpacePublished::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpacePublished::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpacePublished::houseid() const {
  // @@protoc_insertion_point(field_get:spacePublished.SpacePublished.houseId)
  return _internal_houseid();
}
inline void SpacePublished::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SpacePublished::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:spacePublished.SpacePublished.houseId)
}

// int32 houseType = 2;
inline void SpacePublished::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpacePublished::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpacePublished::housetype() const {
  // @@protoc_insertion_point(field_get:spacePublished.SpacePublished.houseType)
  return _internal_housetype();
}
inline void SpacePublished::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void SpacePublished::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:spacePublished.SpacePublished.houseType)
}

// string name = 3;
inline void SpacePublished::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpacePublished::name() const {
  // @@protoc_insertion_point(field_get:spacePublished.SpacePublished.name)
  return _internal_name();
}
inline void SpacePublished::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:spacePublished.SpacePublished.name)
}
inline std::string* SpacePublished::mutable_name() {
  // @@protoc_insertion_point(field_mutable:spacePublished.SpacePublished.name)
  return _internal_mutable_name();
}
inline const std::string& SpacePublished::_internal_name() const {
  return name_.GetNoArena();
}
inline void SpacePublished::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpacePublished::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spacePublished.SpacePublished.name)
}
inline void SpacePublished::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spacePublished.SpacePublished.name)
}
inline void SpacePublished::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spacePublished.SpacePublished.name)
}
inline std::string* SpacePublished::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpacePublished::release_name() {
  // @@protoc_insertion_point(field_release:spacePublished.SpacePublished.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpacePublished::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:spacePublished.SpacePublished.name)
}

// string cover = 4;
inline void SpacePublished::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpacePublished::cover() const {
  // @@protoc_insertion_point(field_get:spacePublished.SpacePublished.cover)
  return _internal_cover();
}
inline void SpacePublished::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:spacePublished.SpacePublished.cover)
}
inline std::string* SpacePublished::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:spacePublished.SpacePublished.cover)
  return _internal_mutable_cover();
}
inline const std::string& SpacePublished::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void SpacePublished::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpacePublished::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spacePublished.SpacePublished.cover)
}
inline void SpacePublished::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spacePublished.SpacePublished.cover)
}
inline void SpacePublished::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spacePublished.SpacePublished.cover)
}
inline std::string* SpacePublished::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpacePublished::release_cover() {
  // @@protoc_insertion_point(field_release:spacePublished.SpacePublished.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpacePublished::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:spacePublished.SpacePublished.cover)
}

// string desc = 5;
inline void SpacePublished::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpacePublished::desc() const {
  // @@protoc_insertion_point(field_get:spacePublished.SpacePublished.desc)
  return _internal_desc();
}
inline void SpacePublished::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:spacePublished.SpacePublished.desc)
}
inline std::string* SpacePublished::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:spacePublished.SpacePublished.desc)
  return _internal_mutable_desc();
}
inline const std::string& SpacePublished::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void SpacePublished::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpacePublished::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spacePublished.SpacePublished.desc)
}
inline void SpacePublished::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spacePublished.SpacePublished.desc)
}
inline void SpacePublished::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spacePublished.SpacePublished.desc)
}
inline std::string* SpacePublished::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpacePublished::release_desc() {
  // @@protoc_insertion_point(field_release:spacePublished.SpacePublished.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpacePublished::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:spacePublished.SpacePublished.desc)
}

// int32 spaceType = 6;
inline void SpacePublished::clear_spacetype() {
  spacetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpacePublished::_internal_spacetype() const {
  return spacetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpacePublished::spacetype() const {
  // @@protoc_insertion_point(field_get:spacePublished.SpacePublished.spaceType)
  return _internal_spacetype();
}
inline void SpacePublished::_internal_set_spacetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacetype_ = value;
}
inline void SpacePublished::set_spacetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacetype(value);
  // @@protoc_insertion_point(field_set:spacePublished.SpacePublished.spaceType)
}

// int32 currentOnline = 7;
inline void SpacePublished::clear_currentonline() {
  currentonline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpacePublished::_internal_currentonline() const {
  return currentonline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpacePublished::currentonline() const {
  // @@protoc_insertion_point(field_get:spacePublished.SpacePublished.currentOnline)
  return _internal_currentonline();
}
inline void SpacePublished::_internal_set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentonline_ = value;
}
inline void SpacePublished::set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentonline(value);
  // @@protoc_insertion_point(field_set:spacePublished.SpacePublished.currentOnline)
}

// string createdAt = 8;
inline void SpacePublished::clear_createdat() {
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpacePublished::createdat() const {
  // @@protoc_insertion_point(field_get:spacePublished.SpacePublished.createdAt)
  return _internal_createdat();
}
inline void SpacePublished::set_createdat(const std::string& value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:spacePublished.SpacePublished.createdAt)
}
inline std::string* SpacePublished::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:spacePublished.SpacePublished.createdAt)
  return _internal_mutable_createdat();
}
inline const std::string& SpacePublished::_internal_createdat() const {
  return createdat_.GetNoArena();
}
inline void SpacePublished::_internal_set_createdat(const std::string& value) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpacePublished::set_createdat(std::string&& value) {
  
  createdat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spacePublished.SpacePublished.createdAt)
}
inline void SpacePublished::set_createdat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spacePublished.SpacePublished.createdAt)
}
inline void SpacePublished::set_createdat(const char* value, size_t size) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spacePublished.SpacePublished.createdAt)
}
inline std::string* SpacePublished::_internal_mutable_createdat() {
  
  return createdat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpacePublished::release_createdat() {
  // @@protoc_insertion_point(field_release:spacePublished.SpacePublished.createdAt)
  
  return createdat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpacePublished::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat);
  // @@protoc_insertion_point(field_set_allocated:spacePublished.SpacePublished.createdAt)
}

// string updateAt = 9;
inline void SpacePublished::clear_updateat() {
  updateat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpacePublished::updateat() const {
  // @@protoc_insertion_point(field_get:spacePublished.SpacePublished.updateAt)
  return _internal_updateat();
}
inline void SpacePublished::set_updateat(const std::string& value) {
  _internal_set_updateat(value);
  // @@protoc_insertion_point(field_set:spacePublished.SpacePublished.updateAt)
}
inline std::string* SpacePublished::mutable_updateat() {
  // @@protoc_insertion_point(field_mutable:spacePublished.SpacePublished.updateAt)
  return _internal_mutable_updateat();
}
inline const std::string& SpacePublished::_internal_updateat() const {
  return updateat_.GetNoArena();
}
inline void SpacePublished::_internal_set_updateat(const std::string& value) {
  
  updateat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpacePublished::set_updateat(std::string&& value) {
  
  updateat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spacePublished.SpacePublished.updateAt)
}
inline void SpacePublished::set_updateat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updateat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spacePublished.SpacePublished.updateAt)
}
inline void SpacePublished::set_updateat(const char* value, size_t size) {
  
  updateat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spacePublished.SpacePublished.updateAt)
}
inline std::string* SpacePublished::_internal_mutable_updateat() {
  
  return updateat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpacePublished::release_updateat() {
  // @@protoc_insertion_point(field_release:spacePublished.SpacePublished.updateAt)
  
  return updateat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpacePublished::set_allocated_updateat(std::string* updateat) {
  if (updateat != nullptr) {
    
  } else {
    
  }
  updateat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updateat);
  // @@protoc_insertion_point(field_set_allocated:spacePublished.SpacePublished.updateAt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spacePublished

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spacePublished_2eproto
