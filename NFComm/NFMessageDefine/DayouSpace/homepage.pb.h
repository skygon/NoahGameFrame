// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: homepage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_homepage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_homepage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_homepage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_homepage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_homepage_2eproto;
namespace pb {
class BNewUserRewardConfig;
class BNewUserRewardConfigDefaultTypeInternal;
extern BNewUserRewardConfigDefaultTypeInternal _BNewUserRewardConfig_default_instance_;
class BNotice;
class BNoticeDefaultTypeInternal;
extern BNoticeDefaultTypeInternal _BNotice_default_instance_;
class CHomepageConfigList;
class CHomepageConfigListDefaultTypeInternal;
extern CHomepageConfigListDefaultTypeInternal _CHomepageConfigList_default_instance_;
class CHomepageNewUserEventReward;
class CHomepageNewUserEventRewardDefaultTypeInternal;
extern CHomepageNewUserEventRewardDefaultTypeInternal _CHomepageNewUserEventReward_default_instance_;
class CHomepageNewUserProgress;
class CHomepageNewUserProgressDefaultTypeInternal;
extern CHomepageNewUserProgressDefaultTypeInternal _CHomepageNewUserProgress_default_instance_;
class CNewHomepageConfigList;
class CNewHomepageConfigListDefaultTypeInternal;
extern CNewHomepageConfigListDefaultTypeInternal _CNewHomepageConfigList_default_instance_;
class CNewUserRewardFinish;
class CNewUserRewardFinishDefaultTypeInternal;
extern CNewUserRewardFinishDefaultTypeInternal _CNewUserRewardFinish_default_instance_;
class SHomepageConfig;
class SHomepageConfigDefaultTypeInternal;
extern SHomepageConfigDefaultTypeInternal _SHomepageConfig_default_instance_;
class SHomepageConfigList;
class SHomepageConfigListDefaultTypeInternal;
extern SHomepageConfigListDefaultTypeInternal _SHomepageConfigList_default_instance_;
class SHomepageNewUser;
class SHomepageNewUserDefaultTypeInternal;
extern SHomepageNewUserDefaultTypeInternal _SHomepageNewUser_default_instance_;
class SHomepageNewUserEventReward;
class SHomepageNewUserEventRewardDefaultTypeInternal;
extern SHomepageNewUserEventRewardDefaultTypeInternal _SHomepageNewUserEventReward_default_instance_;
class SHomepageNewUserProgress;
class SHomepageNewUserProgressDefaultTypeInternal;
extern SHomepageNewUserProgressDefaultTypeInternal _SHomepageNewUserProgress_default_instance_;
class SNewHomepageConfig;
class SNewHomepageConfigDefaultTypeInternal;
extern SNewHomepageConfigDefaultTypeInternal _SNewHomepageConfig_default_instance_;
class SNewHomepageConfigList;
class SNewHomepageConfigListDefaultTypeInternal;
extern SNewHomepageConfigListDefaultTypeInternal _SNewHomepageConfigList_default_instance_;
class SNewUserRewardConfig;
class SNewUserRewardConfigDefaultTypeInternal;
extern SNewUserRewardConfigDefaultTypeInternal _SNewUserRewardConfig_default_instance_;
class SNewUserRewardFinish;
class SNewUserRewardFinishDefaultTypeInternal;
extern SNewUserRewardFinishDefaultTypeInternal _SNewUserRewardFinish_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::BNewUserRewardConfig* Arena::CreateMaybeMessage<::pb::BNewUserRewardConfig>(Arena*);
template<> ::pb::BNotice* Arena::CreateMaybeMessage<::pb::BNotice>(Arena*);
template<> ::pb::CHomepageConfigList* Arena::CreateMaybeMessage<::pb::CHomepageConfigList>(Arena*);
template<> ::pb::CHomepageNewUserEventReward* Arena::CreateMaybeMessage<::pb::CHomepageNewUserEventReward>(Arena*);
template<> ::pb::CHomepageNewUserProgress* Arena::CreateMaybeMessage<::pb::CHomepageNewUserProgress>(Arena*);
template<> ::pb::CNewHomepageConfigList* Arena::CreateMaybeMessage<::pb::CNewHomepageConfigList>(Arena*);
template<> ::pb::CNewUserRewardFinish* Arena::CreateMaybeMessage<::pb::CNewUserRewardFinish>(Arena*);
template<> ::pb::SHomepageConfig* Arena::CreateMaybeMessage<::pb::SHomepageConfig>(Arena*);
template<> ::pb::SHomepageConfigList* Arena::CreateMaybeMessage<::pb::SHomepageConfigList>(Arena*);
template<> ::pb::SHomepageNewUser* Arena::CreateMaybeMessage<::pb::SHomepageNewUser>(Arena*);
template<> ::pb::SHomepageNewUserEventReward* Arena::CreateMaybeMessage<::pb::SHomepageNewUserEventReward>(Arena*);
template<> ::pb::SHomepageNewUserProgress* Arena::CreateMaybeMessage<::pb::SHomepageNewUserProgress>(Arena*);
template<> ::pb::SNewHomepageConfig* Arena::CreateMaybeMessage<::pb::SNewHomepageConfig>(Arena*);
template<> ::pb::SNewHomepageConfigList* Arena::CreateMaybeMessage<::pb::SNewHomepageConfigList>(Arena*);
template<> ::pb::SNewUserRewardConfig* Arena::CreateMaybeMessage<::pb::SNewUserRewardConfig>(Arena*);
template<> ::pb::SNewUserRewardFinish* Arena::CreateMaybeMessage<::pb::SNewUserRewardFinish>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class CHomepageConfigList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CHomepageConfigList) */ {
 public:
  CHomepageConfigList();
  virtual ~CHomepageConfigList();

  CHomepageConfigList(const CHomepageConfigList& from);
  CHomepageConfigList(CHomepageConfigList&& from) noexcept
    : CHomepageConfigList() {
    *this = ::std::move(from);
  }

  inline CHomepageConfigList& operator=(const CHomepageConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHomepageConfigList& operator=(CHomepageConfigList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHomepageConfigList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHomepageConfigList* internal_default_instance() {
    return reinterpret_cast<const CHomepageConfigList*>(
               &_CHomepageConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CHomepageConfigList& a, CHomepageConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(CHomepageConfigList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHomepageConfigList* New() const final {
    return CreateMaybeMessage<CHomepageConfigList>(nullptr);
  }

  CHomepageConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHomepageConfigList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHomepageConfigList& from);
  void MergeFrom(const CHomepageConfigList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHomepageConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CHomepageConfigList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationKeysFieldNumber = 1,
  };
  // repeated string locationKeys = 1;
  int locationkeys_size() const;
  private:
  int _internal_locationkeys_size() const;
  public:
  void clear_locationkeys();
  const std::string& locationkeys(int index) const;
  std::string* mutable_locationkeys(int index);
  void set_locationkeys(int index, const std::string& value);
  void set_locationkeys(int index, std::string&& value);
  void set_locationkeys(int index, const char* value);
  void set_locationkeys(int index, const char* value, size_t size);
  std::string* add_locationkeys();
  void add_locationkeys(const std::string& value);
  void add_locationkeys(std::string&& value);
  void add_locationkeys(const char* value);
  void add_locationkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& locationkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_locationkeys();
  private:
  const std::string& _internal_locationkeys(int index) const;
  std::string* _internal_add_locationkeys();
  public:

  // @@protoc_insertion_point(class_scope:pb.CHomepageConfigList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> locationkeys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class SHomepageConfigList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SHomepageConfigList) */ {
 public:
  SHomepageConfigList();
  virtual ~SHomepageConfigList();

  SHomepageConfigList(const SHomepageConfigList& from);
  SHomepageConfigList(SHomepageConfigList&& from) noexcept
    : SHomepageConfigList() {
    *this = ::std::move(from);
  }

  inline SHomepageConfigList& operator=(const SHomepageConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHomepageConfigList& operator=(SHomepageConfigList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHomepageConfigList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHomepageConfigList* internal_default_instance() {
    return reinterpret_cast<const SHomepageConfigList*>(
               &_SHomepageConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SHomepageConfigList& a, SHomepageConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(SHomepageConfigList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHomepageConfigList* New() const final {
    return CreateMaybeMessage<SHomepageConfigList>(nullptr);
  }

  SHomepageConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHomepageConfigList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHomepageConfigList& from);
  void MergeFrom(const SHomepageConfigList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHomepageConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SHomepageConfigList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 1,
  };
  // repeated .pb.SHomepageConfig configList = 1;
  int configlist_size() const;
  private:
  int _internal_configlist_size() const;
  public:
  void clear_configlist();
  ::pb::SHomepageConfig* mutable_configlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SHomepageConfig >*
      mutable_configlist();
  private:
  const ::pb::SHomepageConfig& _internal_configlist(int index) const;
  ::pb::SHomepageConfig* _internal_add_configlist();
  public:
  const ::pb::SHomepageConfig& configlist(int index) const;
  ::pb::SHomepageConfig* add_configlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SHomepageConfig >&
      configlist() const;

  // @@protoc_insertion_point(class_scope:pb.SHomepageConfigList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SHomepageConfig > configlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class SHomepageConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SHomepageConfig) */ {
 public:
  SHomepageConfig();
  virtual ~SHomepageConfig();

  SHomepageConfig(const SHomepageConfig& from);
  SHomepageConfig(SHomepageConfig&& from) noexcept
    : SHomepageConfig() {
    *this = ::std::move(from);
  }

  inline SHomepageConfig& operator=(const SHomepageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHomepageConfig& operator=(SHomepageConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHomepageConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHomepageConfig* internal_default_instance() {
    return reinterpret_cast<const SHomepageConfig*>(
               &_SHomepageConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SHomepageConfig& a, SHomepageConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SHomepageConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHomepageConfig* New() const final {
    return CreateMaybeMessage<SHomepageConfig>(nullptr);
  }

  SHomepageConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHomepageConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHomepageConfig& from);
  void MergeFrom(const SHomepageConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHomepageConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SHomepageConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoticeListFieldNumber = 13,
    kTitleFieldNumber = 2,
    kMediaFieldNumber = 4,
    kPerformerFieldNumber = 6,
    kLinkFieldNumber = 8,
    kLocationKeyFieldNumber = 15,
    kLocationFieldNumber = 1,
    kWeightFieldNumber = 3,
    kMediaTypeFieldNumber = 5,
    kLinkTypeFieldNumber = 7,
    kValidStartTimeFieldNumber = 9,
    kValidEndTimeFieldNumber = 10,
    kStatusFieldNumber = 12,
    kHouseTypeFieldNumber = 14,
  };
  // repeated .pb.BNotice noticeList = 13;
  int noticelist_size() const;
  private:
  int _internal_noticelist_size() const;
  public:
  void clear_noticelist();
  ::pb::BNotice* mutable_noticelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNotice >*
      mutable_noticelist();
  private:
  const ::pb::BNotice& _internal_noticelist(int index) const;
  ::pb::BNotice* _internal_add_noticelist();
  public:
  const ::pb::BNotice& noticelist(int index) const;
  ::pb::BNotice* add_noticelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNotice >&
      noticelist() const;

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string media = 4;
  void clear_media();
  const std::string& media() const;
  void set_media(const std::string& value);
  void set_media(std::string&& value);
  void set_media(const char* value);
  void set_media(const char* value, size_t size);
  std::string* mutable_media();
  std::string* release_media();
  void set_allocated_media(std::string* media);
  private:
  const std::string& _internal_media() const;
  void _internal_set_media(const std::string& value);
  std::string* _internal_mutable_media();
  public:

  // string performer = 6;
  void clear_performer();
  const std::string& performer() const;
  void set_performer(const std::string& value);
  void set_performer(std::string&& value);
  void set_performer(const char* value);
  void set_performer(const char* value, size_t size);
  std::string* mutable_performer();
  std::string* release_performer();
  void set_allocated_performer(std::string* performer);
  private:
  const std::string& _internal_performer() const;
  void _internal_set_performer(const std::string& value);
  std::string* _internal_mutable_performer();
  public:

  // string link = 8;
  void clear_link();
  const std::string& link() const;
  void set_link(const std::string& value);
  void set_link(std::string&& value);
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  std::string* mutable_link();
  std::string* release_link();
  void set_allocated_link(std::string* link);
  private:
  const std::string& _internal_link() const;
  void _internal_set_link(const std::string& value);
  std::string* _internal_mutable_link();
  public:

  // string locationKey = 15;
  void clear_locationkey();
  const std::string& locationkey() const;
  void set_locationkey(const std::string& value);
  void set_locationkey(std::string&& value);
  void set_locationkey(const char* value);
  void set_locationkey(const char* value, size_t size);
  std::string* mutable_locationkey();
  std::string* release_locationkey();
  void set_allocated_locationkey(std::string* locationkey);
  private:
  const std::string& _internal_locationkey() const;
  void _internal_set_locationkey(const std::string& value);
  std::string* _internal_mutable_locationkey();
  public:

  // int32 location = 1;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 weight = 3;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mediaType = 5;
  void clear_mediatype();
  ::PROTOBUF_NAMESPACE_ID::int32 mediatype() const;
  void set_mediatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mediatype() const;
  void _internal_set_mediatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 linkType = 7;
  void clear_linktype();
  ::PROTOBUF_NAMESPACE_ID::int32 linktype() const;
  void set_linktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_linktype() const;
  void _internal_set_linktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 validStartTime = 9;
  void clear_validstarttime();
  ::PROTOBUF_NAMESPACE_ID::int32 validstarttime() const;
  void set_validstarttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_validstarttime() const;
  void _internal_set_validstarttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 validEndTime = 10;
  void clear_validendtime();
  ::PROTOBUF_NAMESPACE_ID::int32 validendtime() const;
  void set_validendtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_validendtime() const;
  void _internal_set_validendtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 12;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 14;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SHomepageConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNotice > noticelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr performer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locationkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 mediatype_;
  ::PROTOBUF_NAMESPACE_ID::int32 linktype_;
  ::PROTOBUF_NAMESPACE_ID::int32 validstarttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 validendtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class CNewHomepageConfigList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CNewHomepageConfigList) */ {
 public:
  CNewHomepageConfigList();
  virtual ~CNewHomepageConfigList();

  CNewHomepageConfigList(const CNewHomepageConfigList& from);
  CNewHomepageConfigList(CNewHomepageConfigList&& from) noexcept
    : CNewHomepageConfigList() {
    *this = ::std::move(from);
  }

  inline CNewHomepageConfigList& operator=(const CNewHomepageConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNewHomepageConfigList& operator=(CNewHomepageConfigList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNewHomepageConfigList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CNewHomepageConfigList* internal_default_instance() {
    return reinterpret_cast<const CNewHomepageConfigList*>(
               &_CNewHomepageConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CNewHomepageConfigList& a, CNewHomepageConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(CNewHomepageConfigList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNewHomepageConfigList* New() const final {
    return CreateMaybeMessage<CNewHomepageConfigList>(nullptr);
  }

  CNewHomepageConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNewHomepageConfigList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNewHomepageConfigList& from);
  void MergeFrom(const CNewHomepageConfigList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNewHomepageConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CNewHomepageConfigList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationKeysFieldNumber = 1,
  };
  // repeated string locationKeys = 1;
  int locationkeys_size() const;
  private:
  int _internal_locationkeys_size() const;
  public:
  void clear_locationkeys();
  const std::string& locationkeys(int index) const;
  std::string* mutable_locationkeys(int index);
  void set_locationkeys(int index, const std::string& value);
  void set_locationkeys(int index, std::string&& value);
  void set_locationkeys(int index, const char* value);
  void set_locationkeys(int index, const char* value, size_t size);
  std::string* add_locationkeys();
  void add_locationkeys(const std::string& value);
  void add_locationkeys(std::string&& value);
  void add_locationkeys(const char* value);
  void add_locationkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& locationkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_locationkeys();
  private:
  const std::string& _internal_locationkeys(int index) const;
  std::string* _internal_add_locationkeys();
  public:

  // @@protoc_insertion_point(class_scope:pb.CNewHomepageConfigList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> locationkeys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class SNewHomepageConfigList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SNewHomepageConfigList) */ {
 public:
  SNewHomepageConfigList();
  virtual ~SNewHomepageConfigList();

  SNewHomepageConfigList(const SNewHomepageConfigList& from);
  SNewHomepageConfigList(SNewHomepageConfigList&& from) noexcept
    : SNewHomepageConfigList() {
    *this = ::std::move(from);
  }

  inline SNewHomepageConfigList& operator=(const SNewHomepageConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNewHomepageConfigList& operator=(SNewHomepageConfigList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNewHomepageConfigList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNewHomepageConfigList* internal_default_instance() {
    return reinterpret_cast<const SNewHomepageConfigList*>(
               &_SNewHomepageConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SNewHomepageConfigList& a, SNewHomepageConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(SNewHomepageConfigList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNewHomepageConfigList* New() const final {
    return CreateMaybeMessage<SNewHomepageConfigList>(nullptr);
  }

  SNewHomepageConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNewHomepageConfigList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNewHomepageConfigList& from);
  void MergeFrom(const SNewHomepageConfigList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNewHomepageConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SNewHomepageConfigList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 1,
  };
  // repeated .pb.SNewHomepageConfig configList = 1;
  int configlist_size() const;
  private:
  int _internal_configlist_size() const;
  public:
  void clear_configlist();
  ::pb::SNewHomepageConfig* mutable_configlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SNewHomepageConfig >*
      mutable_configlist();
  private:
  const ::pb::SNewHomepageConfig& _internal_configlist(int index) const;
  ::pb::SNewHomepageConfig* _internal_add_configlist();
  public:
  const ::pb::SNewHomepageConfig& configlist(int index) const;
  ::pb::SNewHomepageConfig* add_configlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SNewHomepageConfig >&
      configlist() const;

  // @@protoc_insertion_point(class_scope:pb.SNewHomepageConfigList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SNewHomepageConfig > configlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class SNewHomepageConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SNewHomepageConfig) */ {
 public:
  SNewHomepageConfig();
  virtual ~SNewHomepageConfig();

  SNewHomepageConfig(const SNewHomepageConfig& from);
  SNewHomepageConfig(SNewHomepageConfig&& from) noexcept
    : SNewHomepageConfig() {
    *this = ::std::move(from);
  }

  inline SNewHomepageConfig& operator=(const SNewHomepageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNewHomepageConfig& operator=(SNewHomepageConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNewHomepageConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNewHomepageConfig* internal_default_instance() {
    return reinterpret_cast<const SNewHomepageConfig*>(
               &_SNewHomepageConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SNewHomepageConfig& a, SNewHomepageConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SNewHomepageConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNewHomepageConfig* New() const final {
    return CreateMaybeMessage<SNewHomepageConfig>(nullptr);
  }

  SNewHomepageConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNewHomepageConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNewHomepageConfig& from);
  void MergeFrom(const SNewHomepageConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNewHomepageConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SNewHomepageConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kConfigValueFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string configValue = 2;
  void clear_configvalue();
  const std::string& configvalue() const;
  void set_configvalue(const std::string& value);
  void set_configvalue(std::string&& value);
  void set_configvalue(const char* value);
  void set_configvalue(const char* value, size_t size);
  std::string* mutable_configvalue();
  std::string* release_configvalue();
  void set_allocated_configvalue(std::string* configvalue);
  private:
  const std::string& _internal_configvalue() const;
  void _internal_set_configvalue(const std::string& value);
  std::string* _internal_mutable_configvalue();
  public:

  // int32 weight = 3;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SNewHomepageConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class BNotice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BNotice) */ {
 public:
  BNotice();
  virtual ~BNotice();

  BNotice(const BNotice& from);
  BNotice(BNotice&& from) noexcept
    : BNotice() {
    *this = ::std::move(from);
  }

  inline BNotice& operator=(const BNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline BNotice& operator=(BNotice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BNotice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BNotice* internal_default_instance() {
    return reinterpret_cast<const BNotice*>(
               &_BNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BNotice& a, BNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(BNotice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BNotice* New() const final {
    return CreateMaybeMessage<BNotice>(nullptr);
  }

  BNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BNotice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BNotice& from);
  void MergeFrom(const BNotice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BNotice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BNotice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kSpeedFieldNumber = 2,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 speed = 2;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BNotice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class SHomepageNewUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SHomepageNewUser) */ {
 public:
  SHomepageNewUser();
  virtual ~SHomepageNewUser();

  SHomepageNewUser(const SHomepageNewUser& from);
  SHomepageNewUser(SHomepageNewUser&& from) noexcept
    : SHomepageNewUser() {
    *this = ::std::move(from);
  }

  inline SHomepageNewUser& operator=(const SHomepageNewUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHomepageNewUser& operator=(SHomepageNewUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHomepageNewUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHomepageNewUser* internal_default_instance() {
    return reinterpret_cast<const SHomepageNewUser*>(
               &_SHomepageNewUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SHomepageNewUser& a, SHomepageNewUser& b) {
    a.Swap(&b);
  }
  inline void Swap(SHomepageNewUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHomepageNewUser* New() const final {
    return CreateMaybeMessage<SHomepageNewUser>(nullptr);
  }

  SHomepageNewUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHomepageNewUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHomepageNewUser& from);
  void MergeFrom(const SHomepageNewUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHomepageNewUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SHomepageNewUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionOneImageFieldNumber = 4,
    kPositionOneFieldNumber = 1,
    kPositionTwoFieldNumber = 2,
    kPositionThreeFieldNumber = 3,
    kEventOneScopeFieldNumber = 5,
    kEventOneIdFieldNumber = 6,
    kEventTwoScopeFieldNumber = 7,
    kEventTwoIdFieldNumber = 8,
    kUserProgressFieldNumber = 9,
    kEventOneRewardStateFieldNumber = 10,
  };
  // string positionOneImage = 4;
  void clear_positiononeimage();
  const std::string& positiononeimage() const;
  void set_positiononeimage(const std::string& value);
  void set_positiononeimage(std::string&& value);
  void set_positiononeimage(const char* value);
  void set_positiononeimage(const char* value, size_t size);
  std::string* mutable_positiononeimage();
  std::string* release_positiononeimage();
  void set_allocated_positiononeimage(std::string* positiononeimage);
  private:
  const std::string& _internal_positiononeimage() const;
  void _internal_set_positiononeimage(const std::string& value);
  std::string* _internal_mutable_positiononeimage();
  public:

  // .vector.PVector3 positionOne = 1;
  bool has_positionone() const;
  private:
  bool _internal_has_positionone() const;
  public:
  void clear_positionone();
  const ::vector::PVector3& positionone() const;
  ::vector::PVector3* release_positionone();
  ::vector::PVector3* mutable_positionone();
  void set_allocated_positionone(::vector::PVector3* positionone);
  private:
  const ::vector::PVector3& _internal_positionone() const;
  ::vector::PVector3* _internal_mutable_positionone();
  public:

  // .vector.PVector3 positionTwo = 2;
  bool has_positiontwo() const;
  private:
  bool _internal_has_positiontwo() const;
  public:
  void clear_positiontwo();
  const ::vector::PVector3& positiontwo() const;
  ::vector::PVector3* release_positiontwo();
  ::vector::PVector3* mutable_positiontwo();
  void set_allocated_positiontwo(::vector::PVector3* positiontwo);
  private:
  const ::vector::PVector3& _internal_positiontwo() const;
  ::vector::PVector3* _internal_mutable_positiontwo();
  public:

  // .vector.PVector3 positionThree = 3;
  bool has_positionthree() const;
  private:
  bool _internal_has_positionthree() const;
  public:
  void clear_positionthree();
  const ::vector::PVector3& positionthree() const;
  ::vector::PVector3* release_positionthree();
  ::vector::PVector3* mutable_positionthree();
  void set_allocated_positionthree(::vector::PVector3* positionthree);
  private:
  const ::vector::PVector3& _internal_positionthree() const;
  ::vector::PVector3* _internal_mutable_positionthree();
  public:

  // int32 eventOneScope = 5;
  void clear_eventonescope();
  ::PROTOBUF_NAMESPACE_ID::int32 eventonescope() const;
  void set_eventonescope(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventonescope() const;
  void _internal_set_eventonescope(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 eventOneId = 6;
  void clear_eventoneid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventoneid() const;
  void set_eventoneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventoneid() const;
  void _internal_set_eventoneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 eventTwoScope = 7;
  void clear_eventtwoscope();
  ::PROTOBUF_NAMESPACE_ID::int32 eventtwoscope() const;
  void set_eventtwoscope(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventtwoscope() const;
  void _internal_set_eventtwoscope(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 eventTwoId = 8;
  void clear_eventtwoid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventtwoid() const;
  void set_eventtwoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventtwoid() const;
  void _internal_set_eventtwoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 userProgress = 9;
  void clear_userprogress();
  ::PROTOBUF_NAMESPACE_ID::int32 userprogress() const;
  void set_userprogress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userprogress() const;
  void _internal_set_userprogress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 eventOneRewardState = 10;
  void clear_eventonerewardstate();
  ::PROTOBUF_NAMESPACE_ID::int32 eventonerewardstate() const;
  void set_eventonerewardstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventonerewardstate() const;
  void _internal_set_eventonerewardstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SHomepageNewUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positiononeimage_;
  ::vector::PVector3* positionone_;
  ::vector::PVector3* positiontwo_;
  ::vector::PVector3* positionthree_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventonescope_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventoneid_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventtwoscope_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventtwoid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userprogress_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventonerewardstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class CHomepageNewUserProgress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CHomepageNewUserProgress) */ {
 public:
  CHomepageNewUserProgress();
  virtual ~CHomepageNewUserProgress();

  CHomepageNewUserProgress(const CHomepageNewUserProgress& from);
  CHomepageNewUserProgress(CHomepageNewUserProgress&& from) noexcept
    : CHomepageNewUserProgress() {
    *this = ::std::move(from);
  }

  inline CHomepageNewUserProgress& operator=(const CHomepageNewUserProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHomepageNewUserProgress& operator=(CHomepageNewUserProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHomepageNewUserProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHomepageNewUserProgress* internal_default_instance() {
    return reinterpret_cast<const CHomepageNewUserProgress*>(
               &_CHomepageNewUserProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CHomepageNewUserProgress& a, CHomepageNewUserProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CHomepageNewUserProgress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHomepageNewUserProgress* New() const final {
    return CreateMaybeMessage<CHomepageNewUserProgress>(nullptr);
  }

  CHomepageNewUserProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHomepageNewUserProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHomepageNewUserProgress& from);
  void MergeFrom(const CHomepageNewUserProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHomepageNewUserProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CHomepageNewUserProgress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
  };
  // int32 progress = 1;
  void clear_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress() const;
  void _internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CHomepageNewUserProgress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class SHomepageNewUserProgress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SHomepageNewUserProgress) */ {
 public:
  SHomepageNewUserProgress();
  virtual ~SHomepageNewUserProgress();

  SHomepageNewUserProgress(const SHomepageNewUserProgress& from);
  SHomepageNewUserProgress(SHomepageNewUserProgress&& from) noexcept
    : SHomepageNewUserProgress() {
    *this = ::std::move(from);
  }

  inline SHomepageNewUserProgress& operator=(const SHomepageNewUserProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHomepageNewUserProgress& operator=(SHomepageNewUserProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHomepageNewUserProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHomepageNewUserProgress* internal_default_instance() {
    return reinterpret_cast<const SHomepageNewUserProgress*>(
               &_SHomepageNewUserProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SHomepageNewUserProgress& a, SHomepageNewUserProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(SHomepageNewUserProgress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHomepageNewUserProgress* New() const final {
    return CreateMaybeMessage<SHomepageNewUserProgress>(nullptr);
  }

  SHomepageNewUserProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHomepageNewUserProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHomepageNewUserProgress& from);
  void MergeFrom(const SHomepageNewUserProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHomepageNewUserProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SHomepageNewUserProgress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SHomepageNewUserProgress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class CHomepageNewUserEventReward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CHomepageNewUserEventReward) */ {
 public:
  CHomepageNewUserEventReward();
  virtual ~CHomepageNewUserEventReward();

  CHomepageNewUserEventReward(const CHomepageNewUserEventReward& from);
  CHomepageNewUserEventReward(CHomepageNewUserEventReward&& from) noexcept
    : CHomepageNewUserEventReward() {
    *this = ::std::move(from);
  }

  inline CHomepageNewUserEventReward& operator=(const CHomepageNewUserEventReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHomepageNewUserEventReward& operator=(CHomepageNewUserEventReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHomepageNewUserEventReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHomepageNewUserEventReward* internal_default_instance() {
    return reinterpret_cast<const CHomepageNewUserEventReward*>(
               &_CHomepageNewUserEventReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CHomepageNewUserEventReward& a, CHomepageNewUserEventReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CHomepageNewUserEventReward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHomepageNewUserEventReward* New() const final {
    return CreateMaybeMessage<CHomepageNewUserEventReward>(nullptr);
  }

  CHomepageNewUserEventReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHomepageNewUserEventReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHomepageNewUserEventReward& from);
  void MergeFrom(const CHomepageNewUserEventReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHomepageNewUserEventReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CHomepageNewUserEventReward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
  };
  // int32 eventId = 1;
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CHomepageNewUserEventReward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class SHomepageNewUserEventReward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SHomepageNewUserEventReward) */ {
 public:
  SHomepageNewUserEventReward();
  virtual ~SHomepageNewUserEventReward();

  SHomepageNewUserEventReward(const SHomepageNewUserEventReward& from);
  SHomepageNewUserEventReward(SHomepageNewUserEventReward&& from) noexcept
    : SHomepageNewUserEventReward() {
    *this = ::std::move(from);
  }

  inline SHomepageNewUserEventReward& operator=(const SHomepageNewUserEventReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHomepageNewUserEventReward& operator=(SHomepageNewUserEventReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHomepageNewUserEventReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHomepageNewUserEventReward* internal_default_instance() {
    return reinterpret_cast<const SHomepageNewUserEventReward*>(
               &_SHomepageNewUserEventReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SHomepageNewUserEventReward& a, SHomepageNewUserEventReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SHomepageNewUserEventReward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHomepageNewUserEventReward* New() const final {
    return CreateMaybeMessage<SHomepageNewUserEventReward>(nullptr);
  }

  SHomepageNewUserEventReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHomepageNewUserEventReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHomepageNewUserEventReward& from);
  void MergeFrom(const SHomepageNewUserEventReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHomepageNewUserEventReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SHomepageNewUserEventReward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SHomepageNewUserEventReward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class SNewUserRewardConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SNewUserRewardConfig) */ {
 public:
  SNewUserRewardConfig();
  virtual ~SNewUserRewardConfig();

  SNewUserRewardConfig(const SNewUserRewardConfig& from);
  SNewUserRewardConfig(SNewUserRewardConfig&& from) noexcept
    : SNewUserRewardConfig() {
    *this = ::std::move(from);
  }

  inline SNewUserRewardConfig& operator=(const SNewUserRewardConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNewUserRewardConfig& operator=(SNewUserRewardConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNewUserRewardConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNewUserRewardConfig* internal_default_instance() {
    return reinterpret_cast<const SNewUserRewardConfig*>(
               &_SNewUserRewardConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SNewUserRewardConfig& a, SNewUserRewardConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SNewUserRewardConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNewUserRewardConfig* New() const final {
    return CreateMaybeMessage<SNewUserRewardConfig>(nullptr);
  }

  SNewUserRewardConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNewUserRewardConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNewUserRewardConfig& from);
  void MergeFrom(const SNewUserRewardConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNewUserRewardConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SNewUserRewardConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 1,
  };
  // repeated .pb.BNewUserRewardConfig configList = 1;
  int configlist_size() const;
  private:
  int _internal_configlist_size() const;
  public:
  void clear_configlist();
  ::pb::BNewUserRewardConfig* mutable_configlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNewUserRewardConfig >*
      mutable_configlist();
  private:
  const ::pb::BNewUserRewardConfig& _internal_configlist(int index) const;
  ::pb::BNewUserRewardConfig* _internal_add_configlist();
  public:
  const ::pb::BNewUserRewardConfig& configlist(int index) const;
  ::pb::BNewUserRewardConfig* add_configlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNewUserRewardConfig >&
      configlist() const;

  // @@protoc_insertion_point(class_scope:pb.SNewUserRewardConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNewUserRewardConfig > configlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class BNewUserRewardConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BNewUserRewardConfig) */ {
 public:
  BNewUserRewardConfig();
  virtual ~BNewUserRewardConfig();

  BNewUserRewardConfig(const BNewUserRewardConfig& from);
  BNewUserRewardConfig(BNewUserRewardConfig&& from) noexcept
    : BNewUserRewardConfig() {
    *this = ::std::move(from);
  }

  inline BNewUserRewardConfig& operator=(const BNewUserRewardConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BNewUserRewardConfig& operator=(BNewUserRewardConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BNewUserRewardConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BNewUserRewardConfig* internal_default_instance() {
    return reinterpret_cast<const BNewUserRewardConfig*>(
               &_BNewUserRewardConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BNewUserRewardConfig& a, BNewUserRewardConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BNewUserRewardConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BNewUserRewardConfig* New() const final {
    return CreateMaybeMessage<BNewUserRewardConfig>(nullptr);
  }

  BNewUserRewardConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BNewUserRewardConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BNewUserRewardConfig& from);
  void MergeFrom(const BNewUserRewardConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BNewUserRewardConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BNewUserRewardConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BNewUserRewardConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class CNewUserRewardFinish :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CNewUserRewardFinish) */ {
 public:
  CNewUserRewardFinish();
  virtual ~CNewUserRewardFinish();

  CNewUserRewardFinish(const CNewUserRewardFinish& from);
  CNewUserRewardFinish(CNewUserRewardFinish&& from) noexcept
    : CNewUserRewardFinish() {
    *this = ::std::move(from);
  }

  inline CNewUserRewardFinish& operator=(const CNewUserRewardFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNewUserRewardFinish& operator=(CNewUserRewardFinish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNewUserRewardFinish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CNewUserRewardFinish* internal_default_instance() {
    return reinterpret_cast<const CNewUserRewardFinish*>(
               &_CNewUserRewardFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CNewUserRewardFinish& a, CNewUserRewardFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(CNewUserRewardFinish* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNewUserRewardFinish* New() const final {
    return CreateMaybeMessage<CNewUserRewardFinish>(nullptr);
  }

  CNewUserRewardFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNewUserRewardFinish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNewUserRewardFinish& from);
  void MergeFrom(const CNewUserRewardFinish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNewUserRewardFinish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CNewUserRewardFinish";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProfitUidFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 profitUid = 2;
  void clear_profituid();
  ::PROTOBUF_NAMESPACE_ID::int32 profituid() const;
  void set_profituid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_profituid() const;
  void _internal_set_profituid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CNewUserRewardFinish)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 profituid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// -------------------------------------------------------------------

class SNewUserRewardFinish :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SNewUserRewardFinish) */ {
 public:
  SNewUserRewardFinish();
  virtual ~SNewUserRewardFinish();

  SNewUserRewardFinish(const SNewUserRewardFinish& from);
  SNewUserRewardFinish(SNewUserRewardFinish&& from) noexcept
    : SNewUserRewardFinish() {
    *this = ::std::move(from);
  }

  inline SNewUserRewardFinish& operator=(const SNewUserRewardFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNewUserRewardFinish& operator=(SNewUserRewardFinish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNewUserRewardFinish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNewUserRewardFinish* internal_default_instance() {
    return reinterpret_cast<const SNewUserRewardFinish*>(
               &_SNewUserRewardFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SNewUserRewardFinish& a, SNewUserRewardFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(SNewUserRewardFinish* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNewUserRewardFinish* New() const final {
    return CreateMaybeMessage<SNewUserRewardFinish>(nullptr);
  }

  SNewUserRewardFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNewUserRewardFinish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNewUserRewardFinish& from);
  void MergeFrom(const SNewUserRewardFinish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNewUserRewardFinish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SNewUserRewardFinish";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_homepage_2eproto);
    return ::descriptor_table_homepage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kIdFieldNumber = 2,
    kProfitUidFieldNumber = 3,
    kReportUidFieldNumber = 4,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 profitUid = 3;
  void clear_profituid();
  ::PROTOBUF_NAMESPACE_ID::int32 profituid() const;
  void set_profituid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_profituid() const;
  void _internal_set_profituid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reportUid = 4;
  void clear_reportuid();
  ::PROTOBUF_NAMESPACE_ID::int32 reportuid() const;
  void set_reportuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reportuid() const;
  void _internal_set_reportuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SNewUserRewardFinish)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 profituid_;
  ::PROTOBUF_NAMESPACE_ID::int32 reportuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_homepage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CHomepageConfigList

// repeated string locationKeys = 1;
inline int CHomepageConfigList::_internal_locationkeys_size() const {
  return locationkeys_.size();
}
inline int CHomepageConfigList::locationkeys_size() const {
  return _internal_locationkeys_size();
}
inline void CHomepageConfigList::clear_locationkeys() {
  locationkeys_.Clear();
}
inline std::string* CHomepageConfigList::add_locationkeys() {
  // @@protoc_insertion_point(field_add_mutable:pb.CHomepageConfigList.locationKeys)
  return _internal_add_locationkeys();
}
inline const std::string& CHomepageConfigList::_internal_locationkeys(int index) const {
  return locationkeys_.Get(index);
}
inline const std::string& CHomepageConfigList::locationkeys(int index) const {
  // @@protoc_insertion_point(field_get:pb.CHomepageConfigList.locationKeys)
  return _internal_locationkeys(index);
}
inline std::string* CHomepageConfigList::mutable_locationkeys(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CHomepageConfigList.locationKeys)
  return locationkeys_.Mutable(index);
}
inline void CHomepageConfigList::set_locationkeys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.CHomepageConfigList.locationKeys)
  locationkeys_.Mutable(index)->assign(value);
}
inline void CHomepageConfigList::set_locationkeys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.CHomepageConfigList.locationKeys)
  locationkeys_.Mutable(index)->assign(std::move(value));
}
inline void CHomepageConfigList::set_locationkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locationkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.CHomepageConfigList.locationKeys)
}
inline void CHomepageConfigList::set_locationkeys(int index, const char* value, size_t size) {
  locationkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.CHomepageConfigList.locationKeys)
}
inline std::string* CHomepageConfigList::_internal_add_locationkeys() {
  return locationkeys_.Add();
}
inline void CHomepageConfigList::add_locationkeys(const std::string& value) {
  locationkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.CHomepageConfigList.locationKeys)
}
inline void CHomepageConfigList::add_locationkeys(std::string&& value) {
  locationkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.CHomepageConfigList.locationKeys)
}
inline void CHomepageConfigList::add_locationkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locationkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.CHomepageConfigList.locationKeys)
}
inline void CHomepageConfigList::add_locationkeys(const char* value, size_t size) {
  locationkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.CHomepageConfigList.locationKeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CHomepageConfigList::locationkeys() const {
  // @@protoc_insertion_point(field_list:pb.CHomepageConfigList.locationKeys)
  return locationkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CHomepageConfigList::mutable_locationkeys() {
  // @@protoc_insertion_point(field_mutable_list:pb.CHomepageConfigList.locationKeys)
  return &locationkeys_;
}

// -------------------------------------------------------------------

// SHomepageConfigList

// repeated .pb.SHomepageConfig configList = 1;
inline int SHomepageConfigList::_internal_configlist_size() const {
  return configlist_.size();
}
inline int SHomepageConfigList::configlist_size() const {
  return _internal_configlist_size();
}
inline void SHomepageConfigList::clear_configlist() {
  configlist_.Clear();
}
inline ::pb::SHomepageConfig* SHomepageConfigList::mutable_configlist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageConfigList.configList)
  return configlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SHomepageConfig >*
SHomepageConfigList::mutable_configlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.SHomepageConfigList.configList)
  return &configlist_;
}
inline const ::pb::SHomepageConfig& SHomepageConfigList::_internal_configlist(int index) const {
  return configlist_.Get(index);
}
inline const ::pb::SHomepageConfig& SHomepageConfigList::configlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfigList.configList)
  return _internal_configlist(index);
}
inline ::pb::SHomepageConfig* SHomepageConfigList::_internal_add_configlist() {
  return configlist_.Add();
}
inline ::pb::SHomepageConfig* SHomepageConfigList::add_configlist() {
  // @@protoc_insertion_point(field_add:pb.SHomepageConfigList.configList)
  return _internal_add_configlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SHomepageConfig >&
SHomepageConfigList::configlist() const {
  // @@protoc_insertion_point(field_list:pb.SHomepageConfigList.configList)
  return configlist_;
}

// -------------------------------------------------------------------

// SHomepageConfig

// int32 location = 1;
inline void SHomepageConfig::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::location() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.location)
  return _internal_location();
}
inline void SHomepageConfig::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void SHomepageConfig::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.location)
}

// string title = 2;
inline void SHomepageConfig::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHomepageConfig::title() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.title)
  return _internal_title();
}
inline void SHomepageConfig::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.title)
}
inline std::string* SHomepageConfig::mutable_title() {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageConfig.title)
  return _internal_mutable_title();
}
inline const std::string& SHomepageConfig::_internal_title() const {
  return title_.GetNoArena();
}
inline void SHomepageConfig::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHomepageConfig::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SHomepageConfig.title)
}
inline void SHomepageConfig::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SHomepageConfig.title)
}
inline void SHomepageConfig::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SHomepageConfig.title)
}
inline std::string* SHomepageConfig::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHomepageConfig::release_title() {
  // @@protoc_insertion_point(field_release:pb.SHomepageConfig.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHomepageConfig::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pb.SHomepageConfig.title)
}

// int32 weight = 3;
inline void SHomepageConfig::clear_weight() {
  weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::weight() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.weight)
  return _internal_weight();
}
inline void SHomepageConfig::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weight_ = value;
}
inline void SHomepageConfig::set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.weight)
}

// string media = 4;
inline void SHomepageConfig::clear_media() {
  media_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHomepageConfig::media() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.media)
  return _internal_media();
}
inline void SHomepageConfig::set_media(const std::string& value) {
  _internal_set_media(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.media)
}
inline std::string* SHomepageConfig::mutable_media() {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageConfig.media)
  return _internal_mutable_media();
}
inline const std::string& SHomepageConfig::_internal_media() const {
  return media_.GetNoArena();
}
inline void SHomepageConfig::_internal_set_media(const std::string& value) {
  
  media_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHomepageConfig::set_media(std::string&& value) {
  
  media_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SHomepageConfig.media)
}
inline void SHomepageConfig::set_media(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SHomepageConfig.media)
}
inline void SHomepageConfig::set_media(const char* value, size_t size) {
  
  media_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SHomepageConfig.media)
}
inline std::string* SHomepageConfig::_internal_mutable_media() {
  
  return media_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHomepageConfig::release_media() {
  // @@protoc_insertion_point(field_release:pb.SHomepageConfig.media)
  
  return media_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHomepageConfig::set_allocated_media(std::string* media) {
  if (media != nullptr) {
    
  } else {
    
  }
  media_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media);
  // @@protoc_insertion_point(field_set_allocated:pb.SHomepageConfig.media)
}

// int32 mediaType = 5;
inline void SHomepageConfig::clear_mediatype() {
  mediatype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::_internal_mediatype() const {
  return mediatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::mediatype() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.mediaType)
  return _internal_mediatype();
}
inline void SHomepageConfig::_internal_set_mediatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mediatype_ = value;
}
inline void SHomepageConfig::set_mediatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mediatype(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.mediaType)
}

// string performer = 6;
inline void SHomepageConfig::clear_performer() {
  performer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHomepageConfig::performer() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.performer)
  return _internal_performer();
}
inline void SHomepageConfig::set_performer(const std::string& value) {
  _internal_set_performer(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.performer)
}
inline std::string* SHomepageConfig::mutable_performer() {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageConfig.performer)
  return _internal_mutable_performer();
}
inline const std::string& SHomepageConfig::_internal_performer() const {
  return performer_.GetNoArena();
}
inline void SHomepageConfig::_internal_set_performer(const std::string& value) {
  
  performer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHomepageConfig::set_performer(std::string&& value) {
  
  performer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SHomepageConfig.performer)
}
inline void SHomepageConfig::set_performer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  performer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SHomepageConfig.performer)
}
inline void SHomepageConfig::set_performer(const char* value, size_t size) {
  
  performer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SHomepageConfig.performer)
}
inline std::string* SHomepageConfig::_internal_mutable_performer() {
  
  return performer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHomepageConfig::release_performer() {
  // @@protoc_insertion_point(field_release:pb.SHomepageConfig.performer)
  
  return performer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHomepageConfig::set_allocated_performer(std::string* performer) {
  if (performer != nullptr) {
    
  } else {
    
  }
  performer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), performer);
  // @@protoc_insertion_point(field_set_allocated:pb.SHomepageConfig.performer)
}

// int32 linkType = 7;
inline void SHomepageConfig::clear_linktype() {
  linktype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::_internal_linktype() const {
  return linktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::linktype() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.linkType)
  return _internal_linktype();
}
inline void SHomepageConfig::_internal_set_linktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  linktype_ = value;
}
inline void SHomepageConfig::set_linktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_linktype(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.linkType)
}

// string link = 8;
inline void SHomepageConfig::clear_link() {
  link_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHomepageConfig::link() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.link)
  return _internal_link();
}
inline void SHomepageConfig::set_link(const std::string& value) {
  _internal_set_link(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.link)
}
inline std::string* SHomepageConfig::mutable_link() {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageConfig.link)
  return _internal_mutable_link();
}
inline const std::string& SHomepageConfig::_internal_link() const {
  return link_.GetNoArena();
}
inline void SHomepageConfig::_internal_set_link(const std::string& value) {
  
  link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHomepageConfig::set_link(std::string&& value) {
  
  link_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SHomepageConfig.link)
}
inline void SHomepageConfig::set_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SHomepageConfig.link)
}
inline void SHomepageConfig::set_link(const char* value, size_t size) {
  
  link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SHomepageConfig.link)
}
inline std::string* SHomepageConfig::_internal_mutable_link() {
  
  return link_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHomepageConfig::release_link() {
  // @@protoc_insertion_point(field_release:pb.SHomepageConfig.link)
  
  return link_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHomepageConfig::set_allocated_link(std::string* link) {
  if (link != nullptr) {
    
  } else {
    
  }
  link_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:pb.SHomepageConfig.link)
}

// int32 validStartTime = 9;
inline void SHomepageConfig::clear_validstarttime() {
  validstarttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::_internal_validstarttime() const {
  return validstarttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::validstarttime() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.validStartTime)
  return _internal_validstarttime();
}
inline void SHomepageConfig::_internal_set_validstarttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  validstarttime_ = value;
}
inline void SHomepageConfig::set_validstarttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_validstarttime(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.validStartTime)
}

// int32 validEndTime = 10;
inline void SHomepageConfig::clear_validendtime() {
  validendtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::_internal_validendtime() const {
  return validendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::validendtime() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.validEndTime)
  return _internal_validendtime();
}
inline void SHomepageConfig::_internal_set_validendtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  validendtime_ = value;
}
inline void SHomepageConfig::set_validendtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_validendtime(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.validEndTime)
}

// int32 status = 12;
inline void SHomepageConfig::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::status() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.status)
  return _internal_status();
}
inline void SHomepageConfig::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SHomepageConfig::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.status)
}

// repeated .pb.BNotice noticeList = 13;
inline int SHomepageConfig::_internal_noticelist_size() const {
  return noticelist_.size();
}
inline int SHomepageConfig::noticelist_size() const {
  return _internal_noticelist_size();
}
inline void SHomepageConfig::clear_noticelist() {
  noticelist_.Clear();
}
inline ::pb::BNotice* SHomepageConfig::mutable_noticelist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageConfig.noticeList)
  return noticelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNotice >*
SHomepageConfig::mutable_noticelist() {
  // @@protoc_insertion_point(field_mutable_list:pb.SHomepageConfig.noticeList)
  return &noticelist_;
}
inline const ::pb::BNotice& SHomepageConfig::_internal_noticelist(int index) const {
  return noticelist_.Get(index);
}
inline const ::pb::BNotice& SHomepageConfig::noticelist(int index) const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.noticeList)
  return _internal_noticelist(index);
}
inline ::pb::BNotice* SHomepageConfig::_internal_add_noticelist() {
  return noticelist_.Add();
}
inline ::pb::BNotice* SHomepageConfig::add_noticelist() {
  // @@protoc_insertion_point(field_add:pb.SHomepageConfig.noticeList)
  return _internal_add_noticelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNotice >&
SHomepageConfig::noticelist() const {
  // @@protoc_insertion_point(field_list:pb.SHomepageConfig.noticeList)
  return noticelist_;
}

// int32 houseType = 14;
inline void SHomepageConfig::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageConfig::housetype() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.houseType)
  return _internal_housetype();
}
inline void SHomepageConfig::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void SHomepageConfig::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.houseType)
}

// string locationKey = 15;
inline void SHomepageConfig::clear_locationkey() {
  locationkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHomepageConfig::locationkey() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageConfig.locationKey)
  return _internal_locationkey();
}
inline void SHomepageConfig::set_locationkey(const std::string& value) {
  _internal_set_locationkey(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageConfig.locationKey)
}
inline std::string* SHomepageConfig::mutable_locationkey() {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageConfig.locationKey)
  return _internal_mutable_locationkey();
}
inline const std::string& SHomepageConfig::_internal_locationkey() const {
  return locationkey_.GetNoArena();
}
inline void SHomepageConfig::_internal_set_locationkey(const std::string& value) {
  
  locationkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHomepageConfig::set_locationkey(std::string&& value) {
  
  locationkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SHomepageConfig.locationKey)
}
inline void SHomepageConfig::set_locationkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locationkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SHomepageConfig.locationKey)
}
inline void SHomepageConfig::set_locationkey(const char* value, size_t size) {
  
  locationkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SHomepageConfig.locationKey)
}
inline std::string* SHomepageConfig::_internal_mutable_locationkey() {
  
  return locationkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHomepageConfig::release_locationkey() {
  // @@protoc_insertion_point(field_release:pb.SHomepageConfig.locationKey)
  
  return locationkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHomepageConfig::set_allocated_locationkey(std::string* locationkey) {
  if (locationkey != nullptr) {
    
  } else {
    
  }
  locationkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locationkey);
  // @@protoc_insertion_point(field_set_allocated:pb.SHomepageConfig.locationKey)
}

// -------------------------------------------------------------------

// CNewHomepageConfigList

// repeated string locationKeys = 1;
inline int CNewHomepageConfigList::_internal_locationkeys_size() const {
  return locationkeys_.size();
}
inline int CNewHomepageConfigList::locationkeys_size() const {
  return _internal_locationkeys_size();
}
inline void CNewHomepageConfigList::clear_locationkeys() {
  locationkeys_.Clear();
}
inline std::string* CNewHomepageConfigList::add_locationkeys() {
  // @@protoc_insertion_point(field_add_mutable:pb.CNewHomepageConfigList.locationKeys)
  return _internal_add_locationkeys();
}
inline const std::string& CNewHomepageConfigList::_internal_locationkeys(int index) const {
  return locationkeys_.Get(index);
}
inline const std::string& CNewHomepageConfigList::locationkeys(int index) const {
  // @@protoc_insertion_point(field_get:pb.CNewHomepageConfigList.locationKeys)
  return _internal_locationkeys(index);
}
inline std::string* CNewHomepageConfigList::mutable_locationkeys(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CNewHomepageConfigList.locationKeys)
  return locationkeys_.Mutable(index);
}
inline void CNewHomepageConfigList::set_locationkeys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.CNewHomepageConfigList.locationKeys)
  locationkeys_.Mutable(index)->assign(value);
}
inline void CNewHomepageConfigList::set_locationkeys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.CNewHomepageConfigList.locationKeys)
  locationkeys_.Mutable(index)->assign(std::move(value));
}
inline void CNewHomepageConfigList::set_locationkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locationkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.CNewHomepageConfigList.locationKeys)
}
inline void CNewHomepageConfigList::set_locationkeys(int index, const char* value, size_t size) {
  locationkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.CNewHomepageConfigList.locationKeys)
}
inline std::string* CNewHomepageConfigList::_internal_add_locationkeys() {
  return locationkeys_.Add();
}
inline void CNewHomepageConfigList::add_locationkeys(const std::string& value) {
  locationkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.CNewHomepageConfigList.locationKeys)
}
inline void CNewHomepageConfigList::add_locationkeys(std::string&& value) {
  locationkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.CNewHomepageConfigList.locationKeys)
}
inline void CNewHomepageConfigList::add_locationkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locationkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.CNewHomepageConfigList.locationKeys)
}
inline void CNewHomepageConfigList::add_locationkeys(const char* value, size_t size) {
  locationkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.CNewHomepageConfigList.locationKeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CNewHomepageConfigList::locationkeys() const {
  // @@protoc_insertion_point(field_list:pb.CNewHomepageConfigList.locationKeys)
  return locationkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CNewHomepageConfigList::mutable_locationkeys() {
  // @@protoc_insertion_point(field_mutable_list:pb.CNewHomepageConfigList.locationKeys)
  return &locationkeys_;
}

// -------------------------------------------------------------------

// SNewHomepageConfigList

// repeated .pb.SNewHomepageConfig configList = 1;
inline int SNewHomepageConfigList::_internal_configlist_size() const {
  return configlist_.size();
}
inline int SNewHomepageConfigList::configlist_size() const {
  return _internal_configlist_size();
}
inline void SNewHomepageConfigList::clear_configlist() {
  configlist_.Clear();
}
inline ::pb::SNewHomepageConfig* SNewHomepageConfigList::mutable_configlist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SNewHomepageConfigList.configList)
  return configlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SNewHomepageConfig >*
SNewHomepageConfigList::mutable_configlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.SNewHomepageConfigList.configList)
  return &configlist_;
}
inline const ::pb::SNewHomepageConfig& SNewHomepageConfigList::_internal_configlist(int index) const {
  return configlist_.Get(index);
}
inline const ::pb::SNewHomepageConfig& SNewHomepageConfigList::configlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.SNewHomepageConfigList.configList)
  return _internal_configlist(index);
}
inline ::pb::SNewHomepageConfig* SNewHomepageConfigList::_internal_add_configlist() {
  return configlist_.Add();
}
inline ::pb::SNewHomepageConfig* SNewHomepageConfigList::add_configlist() {
  // @@protoc_insertion_point(field_add:pb.SNewHomepageConfigList.configList)
  return _internal_add_configlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SNewHomepageConfig >&
SNewHomepageConfigList::configlist() const {
  // @@protoc_insertion_point(field_list:pb.SNewHomepageConfigList.configList)
  return configlist_;
}

// -------------------------------------------------------------------

// SNewHomepageConfig

// string key = 1;
inline void SNewHomepageConfig::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNewHomepageConfig::key() const {
  // @@protoc_insertion_point(field_get:pb.SNewHomepageConfig.key)
  return _internal_key();
}
inline void SNewHomepageConfig::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:pb.SNewHomepageConfig.key)
}
inline std::string* SNewHomepageConfig::mutable_key() {
  // @@protoc_insertion_point(field_mutable:pb.SNewHomepageConfig.key)
  return _internal_mutable_key();
}
inline const std::string& SNewHomepageConfig::_internal_key() const {
  return key_.GetNoArena();
}
inline void SNewHomepageConfig::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNewHomepageConfig::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SNewHomepageConfig.key)
}
inline void SNewHomepageConfig::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SNewHomepageConfig.key)
}
inline void SNewHomepageConfig::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SNewHomepageConfig.key)
}
inline std::string* SNewHomepageConfig::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNewHomepageConfig::release_key() {
  // @@protoc_insertion_point(field_release:pb.SNewHomepageConfig.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNewHomepageConfig::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.SNewHomepageConfig.key)
}

// string configValue = 2;
inline void SNewHomepageConfig::clear_configvalue() {
  configvalue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNewHomepageConfig::configvalue() const {
  // @@protoc_insertion_point(field_get:pb.SNewHomepageConfig.configValue)
  return _internal_configvalue();
}
inline void SNewHomepageConfig::set_configvalue(const std::string& value) {
  _internal_set_configvalue(value);
  // @@protoc_insertion_point(field_set:pb.SNewHomepageConfig.configValue)
}
inline std::string* SNewHomepageConfig::mutable_configvalue() {
  // @@protoc_insertion_point(field_mutable:pb.SNewHomepageConfig.configValue)
  return _internal_mutable_configvalue();
}
inline const std::string& SNewHomepageConfig::_internal_configvalue() const {
  return configvalue_.GetNoArena();
}
inline void SNewHomepageConfig::_internal_set_configvalue(const std::string& value) {
  
  configvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNewHomepageConfig::set_configvalue(std::string&& value) {
  
  configvalue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SNewHomepageConfig.configValue)
}
inline void SNewHomepageConfig::set_configvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SNewHomepageConfig.configValue)
}
inline void SNewHomepageConfig::set_configvalue(const char* value, size_t size) {
  
  configvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SNewHomepageConfig.configValue)
}
inline std::string* SNewHomepageConfig::_internal_mutable_configvalue() {
  
  return configvalue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNewHomepageConfig::release_configvalue() {
  // @@protoc_insertion_point(field_release:pb.SNewHomepageConfig.configValue)
  
  return configvalue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNewHomepageConfig::set_allocated_configvalue(std::string* configvalue) {
  if (configvalue != nullptr) {
    
  } else {
    
  }
  configvalue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configvalue);
  // @@protoc_insertion_point(field_set_allocated:pb.SNewHomepageConfig.configValue)
}

// int32 weight = 3;
inline void SNewHomepageConfig::clear_weight() {
  weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewHomepageConfig::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewHomepageConfig::weight() const {
  // @@protoc_insertion_point(field_get:pb.SNewHomepageConfig.weight)
  return _internal_weight();
}
inline void SNewHomepageConfig::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weight_ = value;
}
inline void SNewHomepageConfig::set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:pb.SNewHomepageConfig.weight)
}

// -------------------------------------------------------------------

// BNotice

// string content = 1;
inline void BNotice::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BNotice::content() const {
  // @@protoc_insertion_point(field_get:pb.BNotice.content)
  return _internal_content();
}
inline void BNotice::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:pb.BNotice.content)
}
inline std::string* BNotice::mutable_content() {
  // @@protoc_insertion_point(field_mutable:pb.BNotice.content)
  return _internal_mutable_content();
}
inline const std::string& BNotice::_internal_content() const {
  return content_.GetNoArena();
}
inline void BNotice::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BNotice::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BNotice.content)
}
inline void BNotice::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BNotice.content)
}
inline void BNotice::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BNotice.content)
}
inline std::string* BNotice::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BNotice::release_content() {
  // @@protoc_insertion_point(field_release:pb.BNotice.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BNotice::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pb.BNotice.content)
}

// int32 speed = 2;
inline void BNotice::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BNotice::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BNotice::speed() const {
  // @@protoc_insertion_point(field_get:pb.BNotice.speed)
  return _internal_speed();
}
inline void BNotice::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void BNotice::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:pb.BNotice.speed)
}

// -------------------------------------------------------------------

// SHomepageNewUser

// .vector.PVector3 positionOne = 1;
inline bool SHomepageNewUser::_internal_has_positionone() const {
  return this != internal_default_instance() && positionone_ != nullptr;
}
inline bool SHomepageNewUser::has_positionone() const {
  return _internal_has_positionone();
}
inline const ::vector::PVector3& SHomepageNewUser::_internal_positionone() const {
  const ::vector::PVector3* p = positionone_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& SHomepageNewUser::positionone() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.positionOne)
  return _internal_positionone();
}
inline ::vector::PVector3* SHomepageNewUser::release_positionone() {
  // @@protoc_insertion_point(field_release:pb.SHomepageNewUser.positionOne)
  
  ::vector::PVector3* temp = positionone_;
  positionone_ = nullptr;
  return temp;
}
inline ::vector::PVector3* SHomepageNewUser::_internal_mutable_positionone() {
  
  if (positionone_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    positionone_ = p;
  }
  return positionone_;
}
inline ::vector::PVector3* SHomepageNewUser::mutable_positionone() {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageNewUser.positionOne)
  return _internal_mutable_positionone();
}
inline void SHomepageNewUser::set_allocated_positionone(::vector::PVector3* positionone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positionone_);
  }
  if (positionone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      positionone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positionone, submessage_arena);
    }
    
  } else {
    
  }
  positionone_ = positionone;
  // @@protoc_insertion_point(field_set_allocated:pb.SHomepageNewUser.positionOne)
}

// .vector.PVector3 positionTwo = 2;
inline bool SHomepageNewUser::_internal_has_positiontwo() const {
  return this != internal_default_instance() && positiontwo_ != nullptr;
}
inline bool SHomepageNewUser::has_positiontwo() const {
  return _internal_has_positiontwo();
}
inline const ::vector::PVector3& SHomepageNewUser::_internal_positiontwo() const {
  const ::vector::PVector3* p = positiontwo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& SHomepageNewUser::positiontwo() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.positionTwo)
  return _internal_positiontwo();
}
inline ::vector::PVector3* SHomepageNewUser::release_positiontwo() {
  // @@protoc_insertion_point(field_release:pb.SHomepageNewUser.positionTwo)
  
  ::vector::PVector3* temp = positiontwo_;
  positiontwo_ = nullptr;
  return temp;
}
inline ::vector::PVector3* SHomepageNewUser::_internal_mutable_positiontwo() {
  
  if (positiontwo_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    positiontwo_ = p;
  }
  return positiontwo_;
}
inline ::vector::PVector3* SHomepageNewUser::mutable_positiontwo() {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageNewUser.positionTwo)
  return _internal_mutable_positiontwo();
}
inline void SHomepageNewUser::set_allocated_positiontwo(::vector::PVector3* positiontwo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiontwo_);
  }
  if (positiontwo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      positiontwo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positiontwo, submessage_arena);
    }
    
  } else {
    
  }
  positiontwo_ = positiontwo;
  // @@protoc_insertion_point(field_set_allocated:pb.SHomepageNewUser.positionTwo)
}

// .vector.PVector3 positionThree = 3;
inline bool SHomepageNewUser::_internal_has_positionthree() const {
  return this != internal_default_instance() && positionthree_ != nullptr;
}
inline bool SHomepageNewUser::has_positionthree() const {
  return _internal_has_positionthree();
}
inline const ::vector::PVector3& SHomepageNewUser::_internal_positionthree() const {
  const ::vector::PVector3* p = positionthree_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& SHomepageNewUser::positionthree() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.positionThree)
  return _internal_positionthree();
}
inline ::vector::PVector3* SHomepageNewUser::release_positionthree() {
  // @@protoc_insertion_point(field_release:pb.SHomepageNewUser.positionThree)
  
  ::vector::PVector3* temp = positionthree_;
  positionthree_ = nullptr;
  return temp;
}
inline ::vector::PVector3* SHomepageNewUser::_internal_mutable_positionthree() {
  
  if (positionthree_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    positionthree_ = p;
  }
  return positionthree_;
}
inline ::vector::PVector3* SHomepageNewUser::mutable_positionthree() {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageNewUser.positionThree)
  return _internal_mutable_positionthree();
}
inline void SHomepageNewUser::set_allocated_positionthree(::vector::PVector3* positionthree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positionthree_);
  }
  if (positionthree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      positionthree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positionthree, submessage_arena);
    }
    
  } else {
    
  }
  positionthree_ = positionthree;
  // @@protoc_insertion_point(field_set_allocated:pb.SHomepageNewUser.positionThree)
}

// string positionOneImage = 4;
inline void SHomepageNewUser::clear_positiononeimage() {
  positiononeimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHomepageNewUser::positiononeimage() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.positionOneImage)
  return _internal_positiononeimage();
}
inline void SHomepageNewUser::set_positiononeimage(const std::string& value) {
  _internal_set_positiononeimage(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageNewUser.positionOneImage)
}
inline std::string* SHomepageNewUser::mutable_positiononeimage() {
  // @@protoc_insertion_point(field_mutable:pb.SHomepageNewUser.positionOneImage)
  return _internal_mutable_positiononeimage();
}
inline const std::string& SHomepageNewUser::_internal_positiononeimage() const {
  return positiononeimage_.GetNoArena();
}
inline void SHomepageNewUser::_internal_set_positiononeimage(const std::string& value) {
  
  positiononeimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHomepageNewUser::set_positiononeimage(std::string&& value) {
  
  positiononeimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SHomepageNewUser.positionOneImage)
}
inline void SHomepageNewUser::set_positiononeimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  positiononeimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SHomepageNewUser.positionOneImage)
}
inline void SHomepageNewUser::set_positiononeimage(const char* value, size_t size) {
  
  positiononeimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SHomepageNewUser.positionOneImage)
}
inline std::string* SHomepageNewUser::_internal_mutable_positiononeimage() {
  
  return positiononeimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHomepageNewUser::release_positiononeimage() {
  // @@protoc_insertion_point(field_release:pb.SHomepageNewUser.positionOneImage)
  
  return positiononeimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHomepageNewUser::set_allocated_positiononeimage(std::string* positiononeimage) {
  if (positiononeimage != nullptr) {
    
  } else {
    
  }
  positiononeimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), positiononeimage);
  // @@protoc_insertion_point(field_set_allocated:pb.SHomepageNewUser.positionOneImage)
}

// int32 eventOneScope = 5;
inline void SHomepageNewUser::clear_eventonescope() {
  eventonescope_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::_internal_eventonescope() const {
  return eventonescope_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::eventonescope() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.eventOneScope)
  return _internal_eventonescope();
}
inline void SHomepageNewUser::_internal_set_eventonescope(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventonescope_ = value;
}
inline void SHomepageNewUser::set_eventonescope(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventonescope(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageNewUser.eventOneScope)
}

// int32 eventOneId = 6;
inline void SHomepageNewUser::clear_eventoneid() {
  eventoneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::_internal_eventoneid() const {
  return eventoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::eventoneid() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.eventOneId)
  return _internal_eventoneid();
}
inline void SHomepageNewUser::_internal_set_eventoneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventoneid_ = value;
}
inline void SHomepageNewUser::set_eventoneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventoneid(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageNewUser.eventOneId)
}

// int32 eventTwoScope = 7;
inline void SHomepageNewUser::clear_eventtwoscope() {
  eventtwoscope_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::_internal_eventtwoscope() const {
  return eventtwoscope_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::eventtwoscope() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.eventTwoScope)
  return _internal_eventtwoscope();
}
inline void SHomepageNewUser::_internal_set_eventtwoscope(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventtwoscope_ = value;
}
inline void SHomepageNewUser::set_eventtwoscope(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventtwoscope(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageNewUser.eventTwoScope)
}

// int32 eventTwoId = 8;
inline void SHomepageNewUser::clear_eventtwoid() {
  eventtwoid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::_internal_eventtwoid() const {
  return eventtwoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::eventtwoid() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.eventTwoId)
  return _internal_eventtwoid();
}
inline void SHomepageNewUser::_internal_set_eventtwoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventtwoid_ = value;
}
inline void SHomepageNewUser::set_eventtwoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventtwoid(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageNewUser.eventTwoId)
}

// int32 userProgress = 9;
inline void SHomepageNewUser::clear_userprogress() {
  userprogress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::_internal_userprogress() const {
  return userprogress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::userprogress() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.userProgress)
  return _internal_userprogress();
}
inline void SHomepageNewUser::_internal_set_userprogress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userprogress_ = value;
}
inline void SHomepageNewUser::set_userprogress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userprogress(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageNewUser.userProgress)
}

// int32 eventOneRewardState = 10;
inline void SHomepageNewUser::clear_eventonerewardstate() {
  eventonerewardstate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::_internal_eventonerewardstate() const {
  return eventonerewardstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUser::eventonerewardstate() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUser.eventOneRewardState)
  return _internal_eventonerewardstate();
}
inline void SHomepageNewUser::_internal_set_eventonerewardstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventonerewardstate_ = value;
}
inline void SHomepageNewUser::set_eventonerewardstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventonerewardstate(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageNewUser.eventOneRewardState)
}

// -------------------------------------------------------------------

// CHomepageNewUserProgress

// int32 progress = 1;
inline void CHomepageNewUserProgress::clear_progress() {
  progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHomepageNewUserProgress::_internal_progress() const {
  return progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHomepageNewUserProgress::progress() const {
  // @@protoc_insertion_point(field_get:pb.CHomepageNewUserProgress.progress)
  return _internal_progress();
}
inline void CHomepageNewUserProgress::_internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_ = value;
}
inline void CHomepageNewUserProgress::set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:pb.CHomepageNewUserProgress.progress)
}

// -------------------------------------------------------------------

// SHomepageNewUserProgress

// int32 state = 1;
inline void SHomepageNewUserProgress::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUserProgress::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUserProgress::state() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUserProgress.state)
  return _internal_state();
}
inline void SHomepageNewUserProgress::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SHomepageNewUserProgress::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageNewUserProgress.state)
}

// -------------------------------------------------------------------

// CHomepageNewUserEventReward

// int32 eventId = 1;
inline void CHomepageNewUserEventReward::clear_eventid() {
  eventid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHomepageNewUserEventReward::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHomepageNewUserEventReward::eventid() const {
  // @@protoc_insertion_point(field_get:pb.CHomepageNewUserEventReward.eventId)
  return _internal_eventid();
}
inline void CHomepageNewUserEventReward::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventid_ = value;
}
inline void CHomepageNewUserEventReward::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:pb.CHomepageNewUserEventReward.eventId)
}

// -------------------------------------------------------------------

// SHomepageNewUserEventReward

// int32 state = 1;
inline void SHomepageNewUserEventReward::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUserEventReward::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHomepageNewUserEventReward::state() const {
  // @@protoc_insertion_point(field_get:pb.SHomepageNewUserEventReward.state)
  return _internal_state();
}
inline void SHomepageNewUserEventReward::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SHomepageNewUserEventReward::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.SHomepageNewUserEventReward.state)
}

// -------------------------------------------------------------------

// SNewUserRewardConfig

// repeated .pb.BNewUserRewardConfig configList = 1;
inline int SNewUserRewardConfig::_internal_configlist_size() const {
  return configlist_.size();
}
inline int SNewUserRewardConfig::configlist_size() const {
  return _internal_configlist_size();
}
inline void SNewUserRewardConfig::clear_configlist() {
  configlist_.Clear();
}
inline ::pb::BNewUserRewardConfig* SNewUserRewardConfig::mutable_configlist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SNewUserRewardConfig.configList)
  return configlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNewUserRewardConfig >*
SNewUserRewardConfig::mutable_configlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.SNewUserRewardConfig.configList)
  return &configlist_;
}
inline const ::pb::BNewUserRewardConfig& SNewUserRewardConfig::_internal_configlist(int index) const {
  return configlist_.Get(index);
}
inline const ::pb::BNewUserRewardConfig& SNewUserRewardConfig::configlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.SNewUserRewardConfig.configList)
  return _internal_configlist(index);
}
inline ::pb::BNewUserRewardConfig* SNewUserRewardConfig::_internal_add_configlist() {
  return configlist_.Add();
}
inline ::pb::BNewUserRewardConfig* SNewUserRewardConfig::add_configlist() {
  // @@protoc_insertion_point(field_add:pb.SNewUserRewardConfig.configList)
  return _internal_add_configlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BNewUserRewardConfig >&
SNewUserRewardConfig::configlist() const {
  // @@protoc_insertion_point(field_list:pb.SNewUserRewardConfig.configList)
  return configlist_;
}

// -------------------------------------------------------------------

// BNewUserRewardConfig

// int32 id = 1;
inline void BNewUserRewardConfig::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BNewUserRewardConfig::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BNewUserRewardConfig::id() const {
  // @@protoc_insertion_point(field_get:pb.BNewUserRewardConfig.id)
  return _internal_id();
}
inline void BNewUserRewardConfig::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void BNewUserRewardConfig::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.BNewUserRewardConfig.id)
}

// int32 state = 2;
inline void BNewUserRewardConfig::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BNewUserRewardConfig::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BNewUserRewardConfig::state() const {
  // @@protoc_insertion_point(field_get:pb.BNewUserRewardConfig.state)
  return _internal_state();
}
inline void BNewUserRewardConfig::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void BNewUserRewardConfig::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.BNewUserRewardConfig.state)
}

// -------------------------------------------------------------------

// CNewUserRewardFinish

// int32 id = 1;
inline void CNewUserRewardFinish::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserRewardFinish::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserRewardFinish::id() const {
  // @@protoc_insertion_point(field_get:pb.CNewUserRewardFinish.id)
  return _internal_id();
}
inline void CNewUserRewardFinish::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CNewUserRewardFinish::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.CNewUserRewardFinish.id)
}

// int32 profitUid = 2;
inline void CNewUserRewardFinish::clear_profituid() {
  profituid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserRewardFinish::_internal_profituid() const {
  return profituid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserRewardFinish::profituid() const {
  // @@protoc_insertion_point(field_get:pb.CNewUserRewardFinish.profitUid)
  return _internal_profituid();
}
inline void CNewUserRewardFinish::_internal_set_profituid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  profituid_ = value;
}
inline void CNewUserRewardFinish::set_profituid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_profituid(value);
  // @@protoc_insertion_point(field_set:pb.CNewUserRewardFinish.profitUid)
}

// -------------------------------------------------------------------

// SNewUserRewardFinish

// int32 state = 1;
inline void SNewUserRewardFinish::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserRewardFinish::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserRewardFinish::state() const {
  // @@protoc_insertion_point(field_get:pb.SNewUserRewardFinish.state)
  return _internal_state();
}
inline void SNewUserRewardFinish::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SNewUserRewardFinish::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pb.SNewUserRewardFinish.state)
}

// int32 id = 2;
inline void SNewUserRewardFinish::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserRewardFinish::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserRewardFinish::id() const {
  // @@protoc_insertion_point(field_get:pb.SNewUserRewardFinish.id)
  return _internal_id();
}
inline void SNewUserRewardFinish::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SNewUserRewardFinish::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.SNewUserRewardFinish.id)
}

// int32 profitUid = 3;
inline void SNewUserRewardFinish::clear_profituid() {
  profituid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserRewardFinish::_internal_profituid() const {
  return profituid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserRewardFinish::profituid() const {
  // @@protoc_insertion_point(field_get:pb.SNewUserRewardFinish.profitUid)
  return _internal_profituid();
}
inline void SNewUserRewardFinish::_internal_set_profituid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  profituid_ = value;
}
inline void SNewUserRewardFinish::set_profituid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_profituid(value);
  // @@protoc_insertion_point(field_set:pb.SNewUserRewardFinish.profitUid)
}

// int32 reportUid = 4;
inline void SNewUserRewardFinish::clear_reportuid() {
  reportuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserRewardFinish::_internal_reportuid() const {
  return reportuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserRewardFinish::reportuid() const {
  // @@protoc_insertion_point(field_get:pb.SNewUserRewardFinish.reportUid)
  return _internal_reportuid();
}
inline void SNewUserRewardFinish::_internal_set_reportuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reportuid_ = value;
}
inline void SNewUserRewardFinish::set_reportuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reportuid(value);
  // @@protoc_insertion_point(field_set:pb.SNewUserRewardFinish.reportUid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_homepage_2eproto
