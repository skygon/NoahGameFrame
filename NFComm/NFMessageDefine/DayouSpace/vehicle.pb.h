// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_2eproto;
namespace propSync {
class BVehicleInfo;
class BVehicleInfoDefaultTypeInternal;
extern BVehicleInfoDefaultTypeInternal _BVehicleInfo_default_instance_;
class CAllVehicle;
class CAllVehicleDefaultTypeInternal;
extern CAllVehicleDefaultTypeInternal _CAllVehicle_default_instance_;
class CCreateVehicle;
class CCreateVehicleDefaultTypeInternal;
extern CCreateVehicleDefaultTypeInternal _CCreateVehicle_default_instance_;
class CDestroyVehicle;
class CDestroyVehicleDefaultTypeInternal;
extern CDestroyVehicleDefaultTypeInternal _CDestroyVehicle_default_instance_;
class COperateVehicle;
class COperateVehicleDefaultTypeInternal;
extern COperateVehicleDefaultTypeInternal _COperateVehicle_default_instance_;
class CResetVehicle;
class CResetVehicleDefaultTypeInternal;
extern CResetVehicleDefaultTypeInternal _CResetVehicle_default_instance_;
class CRideVehicle;
class CRideVehicleDefaultTypeInternal;
extern CRideVehicleDefaultTypeInternal _CRideVehicle_default_instance_;
class SAllVehicle;
class SAllVehicleDefaultTypeInternal;
extern SAllVehicleDefaultTypeInternal _SAllVehicle_default_instance_;
class SCreateVehicle;
class SCreateVehicleDefaultTypeInternal;
extern SCreateVehicleDefaultTypeInternal _SCreateVehicle_default_instance_;
class SDestroyVehicle;
class SDestroyVehicleDefaultTypeInternal;
extern SDestroyVehicleDefaultTypeInternal _SDestroyVehicle_default_instance_;
class SResetVehicle;
class SResetVehicleDefaultTypeInternal;
extern SResetVehicleDefaultTypeInternal _SResetVehicle_default_instance_;
class SRideVehicle;
class SRideVehicleDefaultTypeInternal;
extern SRideVehicleDefaultTypeInternal _SRideVehicle_default_instance_;
class SVehiclePosSync;
class SVehiclePosSyncDefaultTypeInternal;
extern SVehiclePosSyncDefaultTypeInternal _SVehiclePosSync_default_instance_;
}  // namespace propSync
PROTOBUF_NAMESPACE_OPEN
template<> ::propSync::BVehicleInfo* Arena::CreateMaybeMessage<::propSync::BVehicleInfo>(Arena*);
template<> ::propSync::CAllVehicle* Arena::CreateMaybeMessage<::propSync::CAllVehicle>(Arena*);
template<> ::propSync::CCreateVehicle* Arena::CreateMaybeMessage<::propSync::CCreateVehicle>(Arena*);
template<> ::propSync::CDestroyVehicle* Arena::CreateMaybeMessage<::propSync::CDestroyVehicle>(Arena*);
template<> ::propSync::COperateVehicle* Arena::CreateMaybeMessage<::propSync::COperateVehicle>(Arena*);
template<> ::propSync::CResetVehicle* Arena::CreateMaybeMessage<::propSync::CResetVehicle>(Arena*);
template<> ::propSync::CRideVehicle* Arena::CreateMaybeMessage<::propSync::CRideVehicle>(Arena*);
template<> ::propSync::SAllVehicle* Arena::CreateMaybeMessage<::propSync::SAllVehicle>(Arena*);
template<> ::propSync::SCreateVehicle* Arena::CreateMaybeMessage<::propSync::SCreateVehicle>(Arena*);
template<> ::propSync::SDestroyVehicle* Arena::CreateMaybeMessage<::propSync::SDestroyVehicle>(Arena*);
template<> ::propSync::SResetVehicle* Arena::CreateMaybeMessage<::propSync::SResetVehicle>(Arena*);
template<> ::propSync::SRideVehicle* Arena::CreateMaybeMessage<::propSync::SRideVehicle>(Arena*);
template<> ::propSync::SVehiclePosSync* Arena::CreateMaybeMessage<::propSync::SVehiclePosSync>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace propSync {

enum RideAct : int {
  RIDE_ACT_UNKNOWN = 0,
  RIDE_ACT_RIDE = 1,
  RIDE_ACT_LEAVE = 2,
  RideAct_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RideAct_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RideAct_IsValid(int value);
constexpr RideAct RideAct_MIN = RIDE_ACT_UNKNOWN;
constexpr RideAct RideAct_MAX = RIDE_ACT_LEAVE;
constexpr int RideAct_ARRAYSIZE = RideAct_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RideAct_descriptor();
template<typename T>
inline const std::string& RideAct_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RideAct>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RideAct_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RideAct_descriptor(), enum_t_value);
}
inline bool RideAct_Parse(
    const std::string& name, RideAct* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RideAct>(
    RideAct_descriptor(), name, value);
}
enum RideRes : int {
  RIDE_RES_FAIL = 0,
  RIDE_RES_SUCCESS = 1,
  RIDE_RES_RIDING = 2,
  RideRes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RideRes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RideRes_IsValid(int value);
constexpr RideRes RideRes_MIN = RIDE_RES_FAIL;
constexpr RideRes RideRes_MAX = RIDE_RES_RIDING;
constexpr int RideRes_ARRAYSIZE = RideRes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RideRes_descriptor();
template<typename T>
inline const std::string& RideRes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RideRes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RideRes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RideRes_descriptor(), enum_t_value);
}
inline bool RideRes_Parse(
    const std::string& name, RideRes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RideRes>(
    RideRes_descriptor(), name, value);
}
// ===================================================================

class CCreateVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.CCreateVehicle) */ {
 public:
  CCreateVehicle();
  virtual ~CCreateVehicle();

  CCreateVehicle(const CCreateVehicle& from);
  CCreateVehicle(CCreateVehicle&& from) noexcept
    : CCreateVehicle() {
    *this = ::std::move(from);
  }

  inline CCreateVehicle& operator=(const CCreateVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCreateVehicle& operator=(CCreateVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCreateVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCreateVehicle* internal_default_instance() {
    return reinterpret_cast<const CCreateVehicle*>(
               &_CCreateVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCreateVehicle& a, CCreateVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(CCreateVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCreateVehicle* New() const final {
    return CreateMaybeMessage<CCreateVehicle>(nullptr);
  }

  CCreateVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCreateVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCreateVehicle& from);
  void MergeFrom(const CCreateVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCreateVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.CCreateVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kVehicleTypeFieldNumber = 1,
  };
  // .vector.PVector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // .vector.PVector3 orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::vector::PVector3& orientation() const;
  ::vector::PVector3* release_orientation();
  ::vector::PVector3* mutable_orientation();
  void set_allocated_orientation(::vector::PVector3* orientation);
  private:
  const ::vector::PVector3& _internal_orientation() const;
  ::vector::PVector3* _internal_mutable_orientation();
  public:

  // int32 vehicleType = 1;
  void clear_vehicletype();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicletype() const;
  void set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicletype() const;
  void _internal_set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.CCreateVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vector::PVector3* position_;
  ::vector::PVector3* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicletype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class SCreateVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.SCreateVehicle) */ {
 public:
  SCreateVehicle();
  virtual ~SCreateVehicle();

  SCreateVehicle(const SCreateVehicle& from);
  SCreateVehicle(SCreateVehicle&& from) noexcept
    : SCreateVehicle() {
    *this = ::std::move(from);
  }

  inline SCreateVehicle& operator=(const SCreateVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCreateVehicle& operator=(SCreateVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCreateVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCreateVehicle* internal_default_instance() {
    return reinterpret_cast<const SCreateVehicle*>(
               &_SCreateVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCreateVehicle& a, SCreateVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(SCreateVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCreateVehicle* New() const final {
    return CreateMaybeMessage<SCreateVehicle>(nullptr);
  }

  SCreateVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCreateVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCreateVehicle& from);
  void MergeFrom(const SCreateVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCreateVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.SCreateVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kVidFieldNumber = 1,
    kVehicleTypeFieldNumber = 2,
    kOwnerFieldNumber = 5,
  };
  // .vector.PVector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // .vector.PVector3 orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::vector::PVector3& orientation() const;
  ::vector::PVector3* release_orientation();
  ::vector::PVector3* mutable_orientation();
  void set_allocated_orientation(::vector::PVector3* orientation);
  private:
  const ::vector::PVector3& _internal_orientation() const;
  ::vector::PVector3* _internal_mutable_orientation();
  public:

  // int32 vid = 1;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicleType = 2;
  void clear_vehicletype();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicletype() const;
  void set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicletype() const;
  void _internal_set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner = 5;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.SCreateVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vector::PVector3* position_;
  ::vector::PVector3* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicletype_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class COperateVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.COperateVehicle) */ {
 public:
  COperateVehicle();
  virtual ~COperateVehicle();

  COperateVehicle(const COperateVehicle& from);
  COperateVehicle(COperateVehicle&& from) noexcept
    : COperateVehicle() {
    *this = ::std::move(from);
  }

  inline COperateVehicle& operator=(const COperateVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline COperateVehicle& operator=(COperateVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const COperateVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const COperateVehicle* internal_default_instance() {
    return reinterpret_cast<const COperateVehicle*>(
               &_COperateVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(COperateVehicle& a, COperateVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(COperateVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline COperateVehicle* New() const final {
    return CreateMaybeMessage<COperateVehicle>(nullptr);
  }

  COperateVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<COperateVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const COperateVehicle& from);
  void MergeFrom(const COperateVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COperateVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.COperateVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kVidFieldNumber = 1,
    kUidFieldNumber = 4,
  };
  // .vector.PVector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // .vector.PVector3 orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::vector::PVector3& orientation() const;
  ::vector::PVector3* release_orientation();
  ::vector::PVector3* mutable_orientation();
  void set_allocated_orientation(::vector::PVector3* orientation);
  private:
  const ::vector::PVector3& _internal_orientation() const;
  ::vector::PVector3* _internal_mutable_orientation();
  public:

  // int32 vid = 1;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 4;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.COperateVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vector::PVector3* position_;
  ::vector::PVector3* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class CRideVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.CRideVehicle) */ {
 public:
  CRideVehicle();
  virtual ~CRideVehicle();

  CRideVehicle(const CRideVehicle& from);
  CRideVehicle(CRideVehicle&& from) noexcept
    : CRideVehicle() {
    *this = ::std::move(from);
  }

  inline CRideVehicle& operator=(const CRideVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRideVehicle& operator=(CRideVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRideVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CRideVehicle* internal_default_instance() {
    return reinterpret_cast<const CRideVehicle*>(
               &_CRideVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CRideVehicle& a, CRideVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(CRideVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRideVehicle* New() const final {
    return CreateMaybeMessage<CRideVehicle>(nullptr);
  }

  CRideVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRideVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRideVehicle& from);
  void MergeFrom(const CRideVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRideVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.CRideVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kActFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // int32 vid = 1;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .propSync.RideAct act = 2;
  void clear_act();
  ::propSync::RideAct act() const;
  void set_act(::propSync::RideAct value);
  private:
  ::propSync::RideAct _internal_act() const;
  void _internal_set_act(::propSync::RideAct value);
  public:

  // int32 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.CRideVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  int act_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class SRideVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.SRideVehicle) */ {
 public:
  SRideVehicle();
  virtual ~SRideVehicle();

  SRideVehicle(const SRideVehicle& from);
  SRideVehicle(SRideVehicle&& from) noexcept
    : SRideVehicle() {
    *this = ::std::move(from);
  }

  inline SRideVehicle& operator=(const SRideVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRideVehicle& operator=(SRideVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRideVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRideVehicle* internal_default_instance() {
    return reinterpret_cast<const SRideVehicle*>(
               &_SRideVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SRideVehicle& a, SRideVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(SRideVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRideVehicle* New() const final {
    return CreateMaybeMessage<SRideVehicle>(nullptr);
  }

  SRideVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRideVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRideVehicle& from);
  void MergeFrom(const SRideVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRideVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.SRideVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kVidFieldNumber = 2,
    kActFieldNumber = 3,
    kIndexFieldNumber = 4,
    kResFieldNumber = 5,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vid = 2;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .propSync.RideAct act = 3;
  void clear_act();
  ::propSync::RideAct act() const;
  void set_act(::propSync::RideAct value);
  private:
  ::propSync::RideAct _internal_act() const;
  void _internal_set_act(::propSync::RideAct value);
  public:

  // int32 index = 4;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .propSync.RideRes res = 5;
  void clear_res();
  ::propSync::RideRes res() const;
  void set_res(::propSync::RideRes value);
  private:
  ::propSync::RideRes _internal_res() const;
  void _internal_set_res(::propSync::RideRes value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.SRideVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  int act_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class CResetVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.CResetVehicle) */ {
 public:
  CResetVehicle();
  virtual ~CResetVehicle();

  CResetVehicle(const CResetVehicle& from);
  CResetVehicle(CResetVehicle&& from) noexcept
    : CResetVehicle() {
    *this = ::std::move(from);
  }

  inline CResetVehicle& operator=(const CResetVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CResetVehicle& operator=(CResetVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CResetVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CResetVehicle* internal_default_instance() {
    return reinterpret_cast<const CResetVehicle*>(
               &_CResetVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CResetVehicle& a, CResetVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(CResetVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CResetVehicle* New() const final {
    return CreateMaybeMessage<CResetVehicle>(nullptr);
  }

  CResetVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CResetVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CResetVehicle& from);
  void MergeFrom(const CResetVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CResetVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.CResetVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kVidFieldNumber = 1,
  };
  // .vector.PVector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // .vector.PVector3 orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::vector::PVector3& orientation() const;
  ::vector::PVector3* release_orientation();
  ::vector::PVector3* mutable_orientation();
  void set_allocated_orientation(::vector::PVector3* orientation);
  private:
  const ::vector::PVector3& _internal_orientation() const;
  ::vector::PVector3* _internal_mutable_orientation();
  public:

  // int32 vid = 1;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.CResetVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vector::PVector3* position_;
  ::vector::PVector3* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class SResetVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.SResetVehicle) */ {
 public:
  SResetVehicle();
  virtual ~SResetVehicle();

  SResetVehicle(const SResetVehicle& from);
  SResetVehicle(SResetVehicle&& from) noexcept
    : SResetVehicle() {
    *this = ::std::move(from);
  }

  inline SResetVehicle& operator=(const SResetVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SResetVehicle& operator=(SResetVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SResetVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SResetVehicle* internal_default_instance() {
    return reinterpret_cast<const SResetVehicle*>(
               &_SResetVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SResetVehicle& a, SResetVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(SResetVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SResetVehicle* New() const final {
    return CreateMaybeMessage<SResetVehicle>(nullptr);
  }

  SResetVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SResetVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SResetVehicle& from);
  void MergeFrom(const SResetVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SResetVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.SResetVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kResFieldNumber = 2,
  };
  // int32 vid = 1;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 res = 2;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.SResetVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class CDestroyVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.CDestroyVehicle) */ {
 public:
  CDestroyVehicle();
  virtual ~CDestroyVehicle();

  CDestroyVehicle(const CDestroyVehicle& from);
  CDestroyVehicle(CDestroyVehicle&& from) noexcept
    : CDestroyVehicle() {
    *this = ::std::move(from);
  }

  inline CDestroyVehicle& operator=(const CDestroyVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDestroyVehicle& operator=(CDestroyVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDestroyVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDestroyVehicle* internal_default_instance() {
    return reinterpret_cast<const CDestroyVehicle*>(
               &_CDestroyVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CDestroyVehicle& a, CDestroyVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(CDestroyVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDestroyVehicle* New() const final {
    return CreateMaybeMessage<CDestroyVehicle>(nullptr);
  }

  CDestroyVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDestroyVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDestroyVehicle& from);
  void MergeFrom(const CDestroyVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDestroyVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.CDestroyVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // int32 vid = 1;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.CDestroyVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class SDestroyVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.SDestroyVehicle) */ {
 public:
  SDestroyVehicle();
  virtual ~SDestroyVehicle();

  SDestroyVehicle(const SDestroyVehicle& from);
  SDestroyVehicle(SDestroyVehicle&& from) noexcept
    : SDestroyVehicle() {
    *this = ::std::move(from);
  }

  inline SDestroyVehicle& operator=(const SDestroyVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDestroyVehicle& operator=(SDestroyVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDestroyVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDestroyVehicle* internal_default_instance() {
    return reinterpret_cast<const SDestroyVehicle*>(
               &_SDestroyVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SDestroyVehicle& a, SDestroyVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(SDestroyVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDestroyVehicle* New() const final {
    return CreateMaybeMessage<SDestroyVehicle>(nullptr);
  }

  SDestroyVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDestroyVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDestroyVehicle& from);
  void MergeFrom(const SDestroyVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDestroyVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.SDestroyVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // int32 vid = 1;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.SDestroyVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class CAllVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.CAllVehicle) */ {
 public:
  CAllVehicle();
  virtual ~CAllVehicle();

  CAllVehicle(const CAllVehicle& from);
  CAllVehicle(CAllVehicle&& from) noexcept
    : CAllVehicle() {
    *this = ::std::move(from);
  }

  inline CAllVehicle& operator=(const CAllVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAllVehicle& operator=(CAllVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAllVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAllVehicle* internal_default_instance() {
    return reinterpret_cast<const CAllVehicle*>(
               &_CAllVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CAllVehicle& a, CAllVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(CAllVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAllVehicle* New() const final {
    return CreateMaybeMessage<CAllVehicle>(nullptr);
  }

  CAllVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAllVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAllVehicle& from);
  void MergeFrom(const CAllVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAllVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.CAllVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:propSync.CAllVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class SAllVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.SAllVehicle) */ {
 public:
  SAllVehicle();
  virtual ~SAllVehicle();

  SAllVehicle(const SAllVehicle& from);
  SAllVehicle(SAllVehicle&& from) noexcept
    : SAllVehicle() {
    *this = ::std::move(from);
  }

  inline SAllVehicle& operator=(const SAllVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAllVehicle& operator=(SAllVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAllVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAllVehicle* internal_default_instance() {
    return reinterpret_cast<const SAllVehicle*>(
               &_SAllVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SAllVehicle& a, SAllVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(SAllVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAllVehicle* New() const final {
    return CreateMaybeMessage<SAllVehicle>(nullptr);
  }

  SAllVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAllVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAllVehicle& from);
  void MergeFrom(const SAllVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAllVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.SAllVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleListFieldNumber = 1,
  };
  // repeated .propSync.BVehicleInfo vehicleList = 1;
  int vehiclelist_size() const;
  private:
  int _internal_vehiclelist_size() const;
  public:
  void clear_vehiclelist();
  ::propSync::BVehicleInfo* mutable_vehiclelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo >*
      mutable_vehiclelist();
  private:
  const ::propSync::BVehicleInfo& _internal_vehiclelist(int index) const;
  ::propSync::BVehicleInfo* _internal_add_vehiclelist();
  public:
  const ::propSync::BVehicleInfo& vehiclelist(int index) const;
  ::propSync::BVehicleInfo* add_vehiclelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo >&
      vehiclelist() const;

  // @@protoc_insertion_point(class_scope:propSync.SAllVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo > vehiclelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class BVehicleInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.BVehicleInfo) */ {
 public:
  BVehicleInfo();
  virtual ~BVehicleInfo();

  BVehicleInfo(const BVehicleInfo& from);
  BVehicleInfo(BVehicleInfo&& from) noexcept
    : BVehicleInfo() {
    *this = ::std::move(from);
  }

  inline BVehicleInfo& operator=(const BVehicleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BVehicleInfo& operator=(BVehicleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BVehicleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BVehicleInfo* internal_default_instance() {
    return reinterpret_cast<const BVehicleInfo*>(
               &_BVehicleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BVehicleInfo& a, BVehicleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BVehicleInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BVehicleInfo* New() const final {
    return CreateMaybeMessage<BVehicleInfo>(nullptr);
  }

  BVehicleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BVehicleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BVehicleInfo& from);
  void MergeFrom(const BVehicleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BVehicleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.BVehicleInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidListFieldNumber = 6,
    kPositionFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kVidFieldNumber = 1,
    kVehicleTypeFieldNumber = 2,
    kOwnerFieldNumber = 5,
  };
  // repeated int32 uidList = 6;
  int uidlist_size() const;
  private:
  int _internal_uidlist_size() const;
  public:
  void clear_uidlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uidlist() const;
  void _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uidlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uidlist(int index) const;
  void set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uidlist();

  // .vector.PVector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // .vector.PVector3 orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::vector::PVector3& orientation() const;
  ::vector::PVector3* release_orientation();
  ::vector::PVector3* mutable_orientation();
  void set_allocated_orientation(::vector::PVector3* orientation);
  private:
  const ::vector::PVector3& _internal_orientation() const;
  ::vector::PVector3* _internal_mutable_orientation();
  public:

  // int32 vid = 1;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicleType = 2;
  void clear_vehicletype();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicletype() const;
  void set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicletype() const;
  void _internal_set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner = 5;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:propSync.BVehicleInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uidlist_;
  mutable std::atomic<int> _uidlist_cached_byte_size_;
  ::vector::PVector3* position_;
  ::vector::PVector3* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicletype_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class SVehiclePosSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:propSync.SVehiclePosSync) */ {
 public:
  SVehiclePosSync();
  virtual ~SVehiclePosSync();

  SVehiclePosSync(const SVehiclePosSync& from);
  SVehiclePosSync(SVehiclePosSync&& from) noexcept
    : SVehiclePosSync() {
    *this = ::std::move(from);
  }

  inline SVehiclePosSync& operator=(const SVehiclePosSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline SVehiclePosSync& operator=(SVehiclePosSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SVehiclePosSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVehiclePosSync* internal_default_instance() {
    return reinterpret_cast<const SVehiclePosSync*>(
               &_SVehiclePosSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SVehiclePosSync& a, SVehiclePosSync& b) {
    a.Swap(&b);
  }
  inline void Swap(SVehiclePosSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SVehiclePosSync* New() const final {
    return CreateMaybeMessage<SVehiclePosSync>(nullptr);
  }

  SVehiclePosSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SVehiclePosSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SVehiclePosSync& from);
  void MergeFrom(const SVehiclePosSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SVehiclePosSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "propSync.SVehiclePosSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleListFieldNumber = 1,
  };
  // repeated .propSync.BVehicleInfo vehicleList = 1;
  int vehiclelist_size() const;
  private:
  int _internal_vehiclelist_size() const;
  public:
  void clear_vehiclelist();
  ::propSync::BVehicleInfo* mutable_vehiclelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo >*
      mutable_vehiclelist();
  private:
  const ::propSync::BVehicleInfo& _internal_vehiclelist(int index) const;
  ::propSync::BVehicleInfo* _internal_add_vehiclelist();
  public:
  const ::propSync::BVehicleInfo& vehiclelist(int index) const;
  ::propSync::BVehicleInfo* add_vehiclelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo >&
      vehiclelist() const;

  // @@protoc_insertion_point(class_scope:propSync.SVehiclePosSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo > vehiclelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCreateVehicle

// int32 vehicleType = 1;
inline void CCreateVehicle::clear_vehicletype() {
  vehicletype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCreateVehicle::_internal_vehicletype() const {
  return vehicletype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCreateVehicle::vehicletype() const {
  // @@protoc_insertion_point(field_get:propSync.CCreateVehicle.vehicleType)
  return _internal_vehicletype();
}
inline void CCreateVehicle::_internal_set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicletype_ = value;
}
inline void CCreateVehicle::set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicletype(value);
  // @@protoc_insertion_point(field_set:propSync.CCreateVehicle.vehicleType)
}

// .vector.PVector3 position = 2;
inline bool CCreateVehicle::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CCreateVehicle::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& CCreateVehicle::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& CCreateVehicle::position() const {
  // @@protoc_insertion_point(field_get:propSync.CCreateVehicle.position)
  return _internal_position();
}
inline ::vector::PVector3* CCreateVehicle::release_position() {
  // @@protoc_insertion_point(field_release:propSync.CCreateVehicle.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* CCreateVehicle::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* CCreateVehicle::mutable_position() {
  // @@protoc_insertion_point(field_mutable:propSync.CCreateVehicle.position)
  return _internal_mutable_position();
}
inline void CCreateVehicle::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:propSync.CCreateVehicle.position)
}

// .vector.PVector3 orientation = 3;
inline bool CCreateVehicle::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool CCreateVehicle::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::vector::PVector3& CCreateVehicle::_internal_orientation() const {
  const ::vector::PVector3* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& CCreateVehicle::orientation() const {
  // @@protoc_insertion_point(field_get:propSync.CCreateVehicle.orientation)
  return _internal_orientation();
}
inline ::vector::PVector3* CCreateVehicle::release_orientation() {
  // @@protoc_insertion_point(field_release:propSync.CCreateVehicle.orientation)
  
  ::vector::PVector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::vector::PVector3* CCreateVehicle::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::vector::PVector3* CCreateVehicle::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:propSync.CCreateVehicle.orientation)
  return _internal_mutable_orientation();
}
inline void CCreateVehicle::set_allocated_orientation(::vector::PVector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:propSync.CCreateVehicle.orientation)
}

// -------------------------------------------------------------------

// SCreateVehicle

// int32 vid = 1;
inline void SCreateVehicle::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCreateVehicle::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCreateVehicle::vid() const {
  // @@protoc_insertion_point(field_get:propSync.SCreateVehicle.vid)
  return _internal_vid();
}
inline void SCreateVehicle::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void SCreateVehicle::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:propSync.SCreateVehicle.vid)
}

// int32 vehicleType = 2;
inline void SCreateVehicle::clear_vehicletype() {
  vehicletype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCreateVehicle::_internal_vehicletype() const {
  return vehicletype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCreateVehicle::vehicletype() const {
  // @@protoc_insertion_point(field_get:propSync.SCreateVehicle.vehicleType)
  return _internal_vehicletype();
}
inline void SCreateVehicle::_internal_set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicletype_ = value;
}
inline void SCreateVehicle::set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicletype(value);
  // @@protoc_insertion_point(field_set:propSync.SCreateVehicle.vehicleType)
}

// .vector.PVector3 position = 3;
inline bool SCreateVehicle::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SCreateVehicle::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& SCreateVehicle::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& SCreateVehicle::position() const {
  // @@protoc_insertion_point(field_get:propSync.SCreateVehicle.position)
  return _internal_position();
}
inline ::vector::PVector3* SCreateVehicle::release_position() {
  // @@protoc_insertion_point(field_release:propSync.SCreateVehicle.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* SCreateVehicle::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* SCreateVehicle::mutable_position() {
  // @@protoc_insertion_point(field_mutable:propSync.SCreateVehicle.position)
  return _internal_mutable_position();
}
inline void SCreateVehicle::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:propSync.SCreateVehicle.position)
}

// .vector.PVector3 orientation = 4;
inline bool SCreateVehicle::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool SCreateVehicle::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::vector::PVector3& SCreateVehicle::_internal_orientation() const {
  const ::vector::PVector3* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& SCreateVehicle::orientation() const {
  // @@protoc_insertion_point(field_get:propSync.SCreateVehicle.orientation)
  return _internal_orientation();
}
inline ::vector::PVector3* SCreateVehicle::release_orientation() {
  // @@protoc_insertion_point(field_release:propSync.SCreateVehicle.orientation)
  
  ::vector::PVector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::vector::PVector3* SCreateVehicle::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::vector::PVector3* SCreateVehicle::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:propSync.SCreateVehicle.orientation)
  return _internal_mutable_orientation();
}
inline void SCreateVehicle::set_allocated_orientation(::vector::PVector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:propSync.SCreateVehicle.orientation)
}

// int32 owner = 5;
inline void SCreateVehicle::clear_owner() {
  owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCreateVehicle::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCreateVehicle::owner() const {
  // @@protoc_insertion_point(field_get:propSync.SCreateVehicle.owner)
  return _internal_owner();
}
inline void SCreateVehicle::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_ = value;
}
inline void SCreateVehicle::set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:propSync.SCreateVehicle.owner)
}

// -------------------------------------------------------------------

// COperateVehicle

// int32 vid = 1;
inline void COperateVehicle::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COperateVehicle::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COperateVehicle::vid() const {
  // @@protoc_insertion_point(field_get:propSync.COperateVehicle.vid)
  return _internal_vid();
}
inline void COperateVehicle::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void COperateVehicle::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:propSync.COperateVehicle.vid)
}

// .vector.PVector3 position = 2;
inline bool COperateVehicle::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool COperateVehicle::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& COperateVehicle::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& COperateVehicle::position() const {
  // @@protoc_insertion_point(field_get:propSync.COperateVehicle.position)
  return _internal_position();
}
inline ::vector::PVector3* COperateVehicle::release_position() {
  // @@protoc_insertion_point(field_release:propSync.COperateVehicle.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* COperateVehicle::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* COperateVehicle::mutable_position() {
  // @@protoc_insertion_point(field_mutable:propSync.COperateVehicle.position)
  return _internal_mutable_position();
}
inline void COperateVehicle::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:propSync.COperateVehicle.position)
}

// .vector.PVector3 orientation = 3;
inline bool COperateVehicle::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool COperateVehicle::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::vector::PVector3& COperateVehicle::_internal_orientation() const {
  const ::vector::PVector3* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& COperateVehicle::orientation() const {
  // @@protoc_insertion_point(field_get:propSync.COperateVehicle.orientation)
  return _internal_orientation();
}
inline ::vector::PVector3* COperateVehicle::release_orientation() {
  // @@protoc_insertion_point(field_release:propSync.COperateVehicle.orientation)
  
  ::vector::PVector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::vector::PVector3* COperateVehicle::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::vector::PVector3* COperateVehicle::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:propSync.COperateVehicle.orientation)
  return _internal_mutable_orientation();
}
inline void COperateVehicle::set_allocated_orientation(::vector::PVector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:propSync.COperateVehicle.orientation)
}

// int32 uid = 4;
inline void COperateVehicle::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COperateVehicle::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COperateVehicle::uid() const {
  // @@protoc_insertion_point(field_get:propSync.COperateVehicle.uid)
  return _internal_uid();
}
inline void COperateVehicle::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void COperateVehicle::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:propSync.COperateVehicle.uid)
}

// -------------------------------------------------------------------

// CRideVehicle

// int32 vid = 1;
inline void CRideVehicle::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CRideVehicle::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CRideVehicle::vid() const {
  // @@protoc_insertion_point(field_get:propSync.CRideVehicle.vid)
  return _internal_vid();
}
inline void CRideVehicle::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void CRideVehicle::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:propSync.CRideVehicle.vid)
}

// .propSync.RideAct act = 2;
inline void CRideVehicle::clear_act() {
  act_ = 0;
}
inline ::propSync::RideAct CRideVehicle::_internal_act() const {
  return static_cast< ::propSync::RideAct >(act_);
}
inline ::propSync::RideAct CRideVehicle::act() const {
  // @@protoc_insertion_point(field_get:propSync.CRideVehicle.act)
  return _internal_act();
}
inline void CRideVehicle::_internal_set_act(::propSync::RideAct value) {
  
  act_ = value;
}
inline void CRideVehicle::set_act(::propSync::RideAct value) {
  _internal_set_act(value);
  // @@protoc_insertion_point(field_set:propSync.CRideVehicle.act)
}

// int32 index = 3;
inline void CRideVehicle::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CRideVehicle::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CRideVehicle::index() const {
  // @@protoc_insertion_point(field_get:propSync.CRideVehicle.index)
  return _internal_index();
}
inline void CRideVehicle::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void CRideVehicle::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:propSync.CRideVehicle.index)
}

// -------------------------------------------------------------------

// SRideVehicle

// int32 uid = 1;
inline void SRideVehicle::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRideVehicle::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRideVehicle::uid() const {
  // @@protoc_insertion_point(field_get:propSync.SRideVehicle.uid)
  return _internal_uid();
}
inline void SRideVehicle::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SRideVehicle::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:propSync.SRideVehicle.uid)
}

// int32 vid = 2;
inline void SRideVehicle::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRideVehicle::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRideVehicle::vid() const {
  // @@protoc_insertion_point(field_get:propSync.SRideVehicle.vid)
  return _internal_vid();
}
inline void SRideVehicle::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void SRideVehicle::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:propSync.SRideVehicle.vid)
}

// .propSync.RideAct act = 3;
inline void SRideVehicle::clear_act() {
  act_ = 0;
}
inline ::propSync::RideAct SRideVehicle::_internal_act() const {
  return static_cast< ::propSync::RideAct >(act_);
}
inline ::propSync::RideAct SRideVehicle::act() const {
  // @@protoc_insertion_point(field_get:propSync.SRideVehicle.act)
  return _internal_act();
}
inline void SRideVehicle::_internal_set_act(::propSync::RideAct value) {
  
  act_ = value;
}
inline void SRideVehicle::set_act(::propSync::RideAct value) {
  _internal_set_act(value);
  // @@protoc_insertion_point(field_set:propSync.SRideVehicle.act)
}

// int32 index = 4;
inline void SRideVehicle::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRideVehicle::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRideVehicle::index() const {
  // @@protoc_insertion_point(field_get:propSync.SRideVehicle.index)
  return _internal_index();
}
inline void SRideVehicle::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void SRideVehicle::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:propSync.SRideVehicle.index)
}

// .propSync.RideRes res = 5;
inline void SRideVehicle::clear_res() {
  res_ = 0;
}
inline ::propSync::RideRes SRideVehicle::_internal_res() const {
  return static_cast< ::propSync::RideRes >(res_);
}
inline ::propSync::RideRes SRideVehicle::res() const {
  // @@protoc_insertion_point(field_get:propSync.SRideVehicle.res)
  return _internal_res();
}
inline void SRideVehicle::_internal_set_res(::propSync::RideRes value) {
  
  res_ = value;
}
inline void SRideVehicle::set_res(::propSync::RideRes value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:propSync.SRideVehicle.res)
}

// -------------------------------------------------------------------

// CResetVehicle

// int32 vid = 1;
inline void CResetVehicle::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CResetVehicle::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CResetVehicle::vid() const {
  // @@protoc_insertion_point(field_get:propSync.CResetVehicle.vid)
  return _internal_vid();
}
inline void CResetVehicle::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void CResetVehicle::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:propSync.CResetVehicle.vid)
}

// .vector.PVector3 position = 2;
inline bool CResetVehicle::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CResetVehicle::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& CResetVehicle::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& CResetVehicle::position() const {
  // @@protoc_insertion_point(field_get:propSync.CResetVehicle.position)
  return _internal_position();
}
inline ::vector::PVector3* CResetVehicle::release_position() {
  // @@protoc_insertion_point(field_release:propSync.CResetVehicle.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* CResetVehicle::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* CResetVehicle::mutable_position() {
  // @@protoc_insertion_point(field_mutable:propSync.CResetVehicle.position)
  return _internal_mutable_position();
}
inline void CResetVehicle::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:propSync.CResetVehicle.position)
}

// .vector.PVector3 orientation = 3;
inline bool CResetVehicle::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool CResetVehicle::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::vector::PVector3& CResetVehicle::_internal_orientation() const {
  const ::vector::PVector3* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& CResetVehicle::orientation() const {
  // @@protoc_insertion_point(field_get:propSync.CResetVehicle.orientation)
  return _internal_orientation();
}
inline ::vector::PVector3* CResetVehicle::release_orientation() {
  // @@protoc_insertion_point(field_release:propSync.CResetVehicle.orientation)
  
  ::vector::PVector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::vector::PVector3* CResetVehicle::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::vector::PVector3* CResetVehicle::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:propSync.CResetVehicle.orientation)
  return _internal_mutable_orientation();
}
inline void CResetVehicle::set_allocated_orientation(::vector::PVector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:propSync.CResetVehicle.orientation)
}

// -------------------------------------------------------------------

// SResetVehicle

// int32 vid = 1;
inline void SResetVehicle::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SResetVehicle::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SResetVehicle::vid() const {
  // @@protoc_insertion_point(field_get:propSync.SResetVehicle.vid)
  return _internal_vid();
}
inline void SResetVehicle::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void SResetVehicle::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:propSync.SResetVehicle.vid)
}

// int32 res = 2;
inline void SResetVehicle::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SResetVehicle::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SResetVehicle::res() const {
  // @@protoc_insertion_point(field_get:propSync.SResetVehicle.res)
  return _internal_res();
}
inline void SResetVehicle::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void SResetVehicle::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:propSync.SResetVehicle.res)
}

// -------------------------------------------------------------------

// CDestroyVehicle

// int32 vid = 1;
inline void CDestroyVehicle::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDestroyVehicle::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDestroyVehicle::vid() const {
  // @@protoc_insertion_point(field_get:propSync.CDestroyVehicle.vid)
  return _internal_vid();
}
inline void CDestroyVehicle::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void CDestroyVehicle::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:propSync.CDestroyVehicle.vid)
}

// -------------------------------------------------------------------

// SDestroyVehicle

// int32 vid = 1;
inline void SDestroyVehicle::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDestroyVehicle::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDestroyVehicle::vid() const {
  // @@protoc_insertion_point(field_get:propSync.SDestroyVehicle.vid)
  return _internal_vid();
}
inline void SDestroyVehicle::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void SDestroyVehicle::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:propSync.SDestroyVehicle.vid)
}

// -------------------------------------------------------------------

// CAllVehicle

// -------------------------------------------------------------------

// SAllVehicle

// repeated .propSync.BVehicleInfo vehicleList = 1;
inline int SAllVehicle::_internal_vehiclelist_size() const {
  return vehiclelist_.size();
}
inline int SAllVehicle::vehiclelist_size() const {
  return _internal_vehiclelist_size();
}
inline void SAllVehicle::clear_vehiclelist() {
  vehiclelist_.Clear();
}
inline ::propSync::BVehicleInfo* SAllVehicle::mutable_vehiclelist(int index) {
  // @@protoc_insertion_point(field_mutable:propSync.SAllVehicle.vehicleList)
  return vehiclelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo >*
SAllVehicle::mutable_vehiclelist() {
  // @@protoc_insertion_point(field_mutable_list:propSync.SAllVehicle.vehicleList)
  return &vehiclelist_;
}
inline const ::propSync::BVehicleInfo& SAllVehicle::_internal_vehiclelist(int index) const {
  return vehiclelist_.Get(index);
}
inline const ::propSync::BVehicleInfo& SAllVehicle::vehiclelist(int index) const {
  // @@protoc_insertion_point(field_get:propSync.SAllVehicle.vehicleList)
  return _internal_vehiclelist(index);
}
inline ::propSync::BVehicleInfo* SAllVehicle::_internal_add_vehiclelist() {
  return vehiclelist_.Add();
}
inline ::propSync::BVehicleInfo* SAllVehicle::add_vehiclelist() {
  // @@protoc_insertion_point(field_add:propSync.SAllVehicle.vehicleList)
  return _internal_add_vehiclelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo >&
SAllVehicle::vehiclelist() const {
  // @@protoc_insertion_point(field_list:propSync.SAllVehicle.vehicleList)
  return vehiclelist_;
}

// -------------------------------------------------------------------

// BVehicleInfo

// int32 vid = 1;
inline void BVehicleInfo::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVehicleInfo::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVehicleInfo::vid() const {
  // @@protoc_insertion_point(field_get:propSync.BVehicleInfo.vid)
  return _internal_vid();
}
inline void BVehicleInfo::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void BVehicleInfo::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:propSync.BVehicleInfo.vid)
}

// int32 vehicleType = 2;
inline void BVehicleInfo::clear_vehicletype() {
  vehicletype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVehicleInfo::_internal_vehicletype() const {
  return vehicletype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVehicleInfo::vehicletype() const {
  // @@protoc_insertion_point(field_get:propSync.BVehicleInfo.vehicleType)
  return _internal_vehicletype();
}
inline void BVehicleInfo::_internal_set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicletype_ = value;
}
inline void BVehicleInfo::set_vehicletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicletype(value);
  // @@protoc_insertion_point(field_set:propSync.BVehicleInfo.vehicleType)
}

// .vector.PVector3 position = 3;
inline bool BVehicleInfo::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BVehicleInfo::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& BVehicleInfo::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& BVehicleInfo::position() const {
  // @@protoc_insertion_point(field_get:propSync.BVehicleInfo.position)
  return _internal_position();
}
inline ::vector::PVector3* BVehicleInfo::release_position() {
  // @@protoc_insertion_point(field_release:propSync.BVehicleInfo.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* BVehicleInfo::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* BVehicleInfo::mutable_position() {
  // @@protoc_insertion_point(field_mutable:propSync.BVehicleInfo.position)
  return _internal_mutable_position();
}
inline void BVehicleInfo::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:propSync.BVehicleInfo.position)
}

// .vector.PVector3 orientation = 4;
inline bool BVehicleInfo::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool BVehicleInfo::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::vector::PVector3& BVehicleInfo::_internal_orientation() const {
  const ::vector::PVector3* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& BVehicleInfo::orientation() const {
  // @@protoc_insertion_point(field_get:propSync.BVehicleInfo.orientation)
  return _internal_orientation();
}
inline ::vector::PVector3* BVehicleInfo::release_orientation() {
  // @@protoc_insertion_point(field_release:propSync.BVehicleInfo.orientation)
  
  ::vector::PVector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::vector::PVector3* BVehicleInfo::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::vector::PVector3* BVehicleInfo::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:propSync.BVehicleInfo.orientation)
  return _internal_mutable_orientation();
}
inline void BVehicleInfo::set_allocated_orientation(::vector::PVector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:propSync.BVehicleInfo.orientation)
}

// int32 owner = 5;
inline void BVehicleInfo::clear_owner() {
  owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVehicleInfo::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVehicleInfo::owner() const {
  // @@protoc_insertion_point(field_get:propSync.BVehicleInfo.owner)
  return _internal_owner();
}
inline void BVehicleInfo::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_ = value;
}
inline void BVehicleInfo::set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:propSync.BVehicleInfo.owner)
}

// repeated int32 uidList = 6;
inline int BVehicleInfo::_internal_uidlist_size() const {
  return uidlist_.size();
}
inline int BVehicleInfo::uidlist_size() const {
  return _internal_uidlist_size();
}
inline void BVehicleInfo::clear_uidlist() {
  uidlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVehicleInfo::_internal_uidlist(int index) const {
  return uidlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BVehicleInfo::uidlist(int index) const {
  // @@protoc_insertion_point(field_get:propSync.BVehicleInfo.uidList)
  return _internal_uidlist(index);
}
inline void BVehicleInfo::set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:propSync.BVehicleInfo.uidList)
}
inline void BVehicleInfo::_internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Add(value);
}
inline void BVehicleInfo::add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uidlist(value);
  // @@protoc_insertion_point(field_add:propSync.BVehicleInfo.uidList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BVehicleInfo::_internal_uidlist() const {
  return uidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BVehicleInfo::uidlist() const {
  // @@protoc_insertion_point(field_list:propSync.BVehicleInfo.uidList)
  return _internal_uidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BVehicleInfo::_internal_mutable_uidlist() {
  return &uidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BVehicleInfo::mutable_uidlist() {
  // @@protoc_insertion_point(field_mutable_list:propSync.BVehicleInfo.uidList)
  return _internal_mutable_uidlist();
}

// -------------------------------------------------------------------

// SVehiclePosSync

// repeated .propSync.BVehicleInfo vehicleList = 1;
inline int SVehiclePosSync::_internal_vehiclelist_size() const {
  return vehiclelist_.size();
}
inline int SVehiclePosSync::vehiclelist_size() const {
  return _internal_vehiclelist_size();
}
inline void SVehiclePosSync::clear_vehiclelist() {
  vehiclelist_.Clear();
}
inline ::propSync::BVehicleInfo* SVehiclePosSync::mutable_vehiclelist(int index) {
  // @@protoc_insertion_point(field_mutable:propSync.SVehiclePosSync.vehicleList)
  return vehiclelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo >*
SVehiclePosSync::mutable_vehiclelist() {
  // @@protoc_insertion_point(field_mutable_list:propSync.SVehiclePosSync.vehicleList)
  return &vehiclelist_;
}
inline const ::propSync::BVehicleInfo& SVehiclePosSync::_internal_vehiclelist(int index) const {
  return vehiclelist_.Get(index);
}
inline const ::propSync::BVehicleInfo& SVehiclePosSync::vehiclelist(int index) const {
  // @@protoc_insertion_point(field_get:propSync.SVehiclePosSync.vehicleList)
  return _internal_vehiclelist(index);
}
inline ::propSync::BVehicleInfo* SVehiclePosSync::_internal_add_vehiclelist() {
  return vehiclelist_.Add();
}
inline ::propSync::BVehicleInfo* SVehiclePosSync::add_vehiclelist() {
  // @@protoc_insertion_point(field_add:propSync.SVehiclePosSync.vehicleList)
  return _internal_add_vehiclelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::propSync::BVehicleInfo >&
SVehiclePosSync::vehiclelist() const {
  // @@protoc_insertion_point(field_list:propSync.SVehiclePosSync.vehicleList)
  return vehiclelist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace propSync

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::propSync::RideAct> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::propSync::RideAct>() {
  return ::propSync::RideAct_descriptor();
}
template <> struct is_proto_enum< ::propSync::RideRes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::propSync::RideRes>() {
  return ::propSync::RideRes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
