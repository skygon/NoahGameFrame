// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: businessCard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_businessCard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_businessCard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_businessCard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_businessCard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_businessCard_2eproto;
namespace businessCard {
class BBusinessCardInfo;
class BBusinessCardInfoDefaultTypeInternal;
extern BBusinessCardInfoDefaultTypeInternal _BBusinessCardInfo_default_instance_;
class CBusinessCardList;
class CBusinessCardListDefaultTypeInternal;
extern CBusinessCardListDefaultTypeInternal _CBusinessCardList_default_instance_;
class CBusinessCardSave;
class CBusinessCardSaveDefaultTypeInternal;
extern CBusinessCardSaveDefaultTypeInternal _CBusinessCardSave_default_instance_;
class CCardInfo;
class CCardInfoDefaultTypeInternal;
extern CCardInfoDefaultTypeInternal _CCardInfo_default_instance_;
class CRename;
class CRenameDefaultTypeInternal;
extern CRenameDefaultTypeInternal _CRename_default_instance_;
class SBusinessCardList;
class SBusinessCardListDefaultTypeInternal;
extern SBusinessCardListDefaultTypeInternal _SBusinessCardList_default_instance_;
class SBusinessCardSave;
class SBusinessCardSaveDefaultTypeInternal;
extern SBusinessCardSaveDefaultTypeInternal _SBusinessCardSave_default_instance_;
class SCardInfo;
class SCardInfoDefaultTypeInternal;
extern SCardInfoDefaultTypeInternal _SCardInfo_default_instance_;
class SCardTransfer;
class SCardTransferDefaultTypeInternal;
extern SCardTransferDefaultTypeInternal _SCardTransfer_default_instance_;
class SCardTransferBtn;
class SCardTransferBtnDefaultTypeInternal;
extern SCardTransferBtnDefaultTypeInternal _SCardTransferBtn_default_instance_;
class SRename;
class SRenameDefaultTypeInternal;
extern SRenameDefaultTypeInternal _SRename_default_instance_;
}  // namespace businessCard
PROTOBUF_NAMESPACE_OPEN
template<> ::businessCard::BBusinessCardInfo* Arena::CreateMaybeMessage<::businessCard::BBusinessCardInfo>(Arena*);
template<> ::businessCard::CBusinessCardList* Arena::CreateMaybeMessage<::businessCard::CBusinessCardList>(Arena*);
template<> ::businessCard::CBusinessCardSave* Arena::CreateMaybeMessage<::businessCard::CBusinessCardSave>(Arena*);
template<> ::businessCard::CCardInfo* Arena::CreateMaybeMessage<::businessCard::CCardInfo>(Arena*);
template<> ::businessCard::CRename* Arena::CreateMaybeMessage<::businessCard::CRename>(Arena*);
template<> ::businessCard::SBusinessCardList* Arena::CreateMaybeMessage<::businessCard::SBusinessCardList>(Arena*);
template<> ::businessCard::SBusinessCardSave* Arena::CreateMaybeMessage<::businessCard::SBusinessCardSave>(Arena*);
template<> ::businessCard::SCardInfo* Arena::CreateMaybeMessage<::businessCard::SCardInfo>(Arena*);
template<> ::businessCard::SCardTransfer* Arena::CreateMaybeMessage<::businessCard::SCardTransfer>(Arena*);
template<> ::businessCard::SCardTransferBtn* Arena::CreateMaybeMessage<::businessCard::SCardTransferBtn>(Arena*);
template<> ::businessCard::SRename* Arena::CreateMaybeMessage<::businessCard::SRename>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace businessCard {

// ===================================================================

class CCardInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.CCardInfo) */ {
 public:
  CCardInfo();
  virtual ~CCardInfo();

  CCardInfo(const CCardInfo& from);
  CCardInfo(CCardInfo&& from) noexcept
    : CCardInfo() {
    *this = ::std::move(from);
  }

  inline CCardInfo& operator=(const CCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCardInfo& operator=(CCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCardInfo* internal_default_instance() {
    return reinterpret_cast<const CCardInfo*>(
               &_CCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCardInfo& a, CCardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CCardInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCardInfo* New() const final {
    return CreateMaybeMessage<CCardInfo>(nullptr);
  }

  CCardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCardInfo& from);
  void MergeFrom(const CCardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.CCardInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:businessCard.CCardInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class SCardInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.SCardInfo) */ {
 public:
  SCardInfo();
  virtual ~SCardInfo();

  SCardInfo(const SCardInfo& from);
  SCardInfo(SCardInfo&& from) noexcept
    : SCardInfo() {
    *this = ::std::move(from);
  }

  inline SCardInfo& operator=(const SCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCardInfo& operator=(SCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCardInfo* internal_default_instance() {
    return reinterpret_cast<const SCardInfo*>(
               &_SCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCardInfo& a, SCardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCardInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCardInfo* New() const final {
    return CreateMaybeMessage<SCardInfo>(nullptr);
  }

  SCardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCardInfo& from);
  void MergeFrom(const SCardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.SCardInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 5,
    kHeadPicFieldNumber = 6,
    kSpaceNameFieldNumber = 10,
    kIdentifierIdFieldNumber = 11,
    kPhoneFieldNumber = 12,
    kOfflineStatusFieldNumber = 16,
    kInUidFieldNumber = 17,
    kSignFieldNumber = 18,
    kUidFieldNumber = 1,
    kFollowCountFieldNumber = 2,
    kFansCountFieldNumber = 3,
    kVisitCountFieldNumber = 7,
    kHouseIdFieldNumber = 8,
    kIsFollowFieldNumber = 4,
    kIsInFieldNumber = 13,
    kSeqFieldNumber = 9,
    kRegisteredDaysFieldNumber = 14,
    kVisitNumberFieldNumber = 15,
    kAvatarKeyFieldNumber = 19,
    kHouseTypeFieldNumber = 20,
  };
  // string nick = 5;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string headPic = 6;
  void clear_headpic();
  const std::string& headpic() const;
  void set_headpic(const std::string& value);
  void set_headpic(std::string&& value);
  void set_headpic(const char* value);
  void set_headpic(const char* value, size_t size);
  std::string* mutable_headpic();
  std::string* release_headpic();
  void set_allocated_headpic(std::string* headpic);
  private:
  const std::string& _internal_headpic() const;
  void _internal_set_headpic(const std::string& value);
  std::string* _internal_mutable_headpic();
  public:

  // string spaceName = 10;
  void clear_spacename();
  const std::string& spacename() const;
  void set_spacename(const std::string& value);
  void set_spacename(std::string&& value);
  void set_spacename(const char* value);
  void set_spacename(const char* value, size_t size);
  std::string* mutable_spacename();
  std::string* release_spacename();
  void set_allocated_spacename(std::string* spacename);
  private:
  const std::string& _internal_spacename() const;
  void _internal_set_spacename(const std::string& value);
  std::string* _internal_mutable_spacename();
  public:

  // string identifierId = 11;
  void clear_identifierid();
  const std::string& identifierid() const;
  void set_identifierid(const std::string& value);
  void set_identifierid(std::string&& value);
  void set_identifierid(const char* value);
  void set_identifierid(const char* value, size_t size);
  std::string* mutable_identifierid();
  std::string* release_identifierid();
  void set_allocated_identifierid(std::string* identifierid);
  private:
  const std::string& _internal_identifierid() const;
  void _internal_set_identifierid(const std::string& value);
  std::string* _internal_mutable_identifierid();
  public:

  // string phone = 12;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string offlineStatus = 16;
  void clear_offlinestatus();
  const std::string& offlinestatus() const;
  void set_offlinestatus(const std::string& value);
  void set_offlinestatus(std::string&& value);
  void set_offlinestatus(const char* value);
  void set_offlinestatus(const char* value, size_t size);
  std::string* mutable_offlinestatus();
  std::string* release_offlinestatus();
  void set_allocated_offlinestatus(std::string* offlinestatus);
  private:
  const std::string& _internal_offlinestatus() const;
  void _internal_set_offlinestatus(const std::string& value);
  std::string* _internal_mutable_offlinestatus();
  public:

  // string inUid = 17;
  void clear_inuid();
  const std::string& inuid() const;
  void set_inuid(const std::string& value);
  void set_inuid(std::string&& value);
  void set_inuid(const char* value);
  void set_inuid(const char* value, size_t size);
  std::string* mutable_inuid();
  std::string* release_inuid();
  void set_allocated_inuid(std::string* inuid);
  private:
  const std::string& _internal_inuid() const;
  void _internal_set_inuid(const std::string& value);
  std::string* _internal_mutable_inuid();
  public:

  // string sign = 18;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 followCount = 2;
  void clear_followcount();
  ::PROTOBUF_NAMESPACE_ID::int32 followcount() const;
  void set_followcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_followcount() const;
  void _internal_set_followcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fansCount = 3;
  void clear_fanscount();
  ::PROTOBUF_NAMESPACE_ID::int32 fanscount() const;
  void set_fanscount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fanscount() const;
  void _internal_set_fanscount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 visitCount = 7;
  void clear_visitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 visitcount() const;
  void set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_visitcount() const;
  void _internal_set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseId = 8;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isFollow = 4;
  void clear_isfollow();
  bool isfollow() const;
  void set_isfollow(bool value);
  private:
  bool _internal_isfollow() const;
  void _internal_set_isfollow(bool value);
  public:

  // bool isIn = 13;
  void clear_isin();
  bool isin() const;
  void set_isin(bool value);
  private:
  bool _internal_isin() const;
  void _internal_set_isin(bool value);
  public:

  // int32 seq = 9;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 registeredDays = 14;
  void clear_registereddays();
  ::PROTOBUF_NAMESPACE_ID::int32 registereddays() const;
  void set_registereddays(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_registereddays() const;
  void _internal_set_registereddays(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 visitNumber = 15;
  void clear_visitnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 visitnumber() const;
  void set_visitnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_visitnumber() const;
  void _internal_set_visitnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarKey = 19;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 20;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:businessCard.SCardInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headpic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifierid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offlinestatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 followcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 fanscount_;
  ::PROTOBUF_NAMESPACE_ID::int32 visitcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  bool isfollow_;
  bool isin_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 registereddays_;
  ::PROTOBUF_NAMESPACE_ID::int32 visitnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class CRename :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.CRename) */ {
 public:
  CRename();
  virtual ~CRename();

  CRename(const CRename& from);
  CRename(CRename&& from) noexcept
    : CRename() {
    *this = ::std::move(from);
  }

  inline CRename& operator=(const CRename& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRename& operator=(CRename&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRename& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CRename* internal_default_instance() {
    return reinterpret_cast<const CRename*>(
               &_CRename_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CRename& a, CRename& b) {
    a.Swap(&b);
  }
  inline void Swap(CRename* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRename* New() const final {
    return CreateMaybeMessage<CRename>(nullptr);
  }

  CRename* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRename>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRename& from);
  void MergeFrom(const CRename& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRename* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.CRename";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 1,
  };
  // string nickName = 1;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:businessCard.CRename)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class SRename :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.SRename) */ {
 public:
  SRename();
  virtual ~SRename();

  SRename(const SRename& from);
  SRename(SRename&& from) noexcept
    : SRename() {
    *this = ::std::move(from);
  }

  inline SRename& operator=(const SRename& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRename& operator=(SRename&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRename& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRename* internal_default_instance() {
    return reinterpret_cast<const SRename*>(
               &_SRename_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SRename& a, SRename& b) {
    a.Swap(&b);
  }
  inline void Swap(SRename* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRename* New() const final {
    return CreateMaybeMessage<SRename>(nullptr);
  }

  SRename* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRename>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRename& from);
  void MergeFrom(const SRename& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRename* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.SRename";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 2,
    kIsRenameTrueFieldNumber = 1,
    kUidFieldNumber = 3,
  };
  // string nickName = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 isRenameTrue = 1;
  void clear_isrenametrue();
  ::PROTOBUF_NAMESPACE_ID::int32 isrenametrue() const;
  void set_isrenametrue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isrenametrue() const;
  void _internal_set_isrenametrue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:businessCard.SRename)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 isrenametrue_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class SCardTransferBtn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.SCardTransferBtn) */ {
 public:
  SCardTransferBtn();
  virtual ~SCardTransferBtn();

  SCardTransferBtn(const SCardTransferBtn& from);
  SCardTransferBtn(SCardTransferBtn&& from) noexcept
    : SCardTransferBtn() {
    *this = ::std::move(from);
  }

  inline SCardTransferBtn& operator=(const SCardTransferBtn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCardTransferBtn& operator=(SCardTransferBtn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCardTransferBtn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCardTransferBtn* internal_default_instance() {
    return reinterpret_cast<const SCardTransferBtn*>(
               &_SCardTransferBtn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SCardTransferBtn& a, SCardTransferBtn& b) {
    a.Swap(&b);
  }
  inline void Swap(SCardTransferBtn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCardTransferBtn* New() const final {
    return CreateMaybeMessage<SCardTransferBtn>(nullptr);
  }

  SCardTransferBtn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCardTransferBtn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCardTransferBtn& from);
  void MergeFrom(const SCardTransferBtn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCardTransferBtn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.SCardTransferBtn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsShowFieldNumber = 1,
  };
  // int32 isShow = 1;
  void clear_isshow();
  ::PROTOBUF_NAMESPACE_ID::int32 isshow() const;
  void set_isshow(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isshow() const;
  void _internal_set_isshow(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:businessCard.SCardTransferBtn)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 isshow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class SCardTransfer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.SCardTransfer) */ {
 public:
  SCardTransfer();
  virtual ~SCardTransfer();

  SCardTransfer(const SCardTransfer& from);
  SCardTransfer(SCardTransfer&& from) noexcept
    : SCardTransfer() {
    *this = ::std::move(from);
  }

  inline SCardTransfer& operator=(const SCardTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCardTransfer& operator=(SCardTransfer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCardTransfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCardTransfer* internal_default_instance() {
    return reinterpret_cast<const SCardTransfer*>(
               &_SCardTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SCardTransfer& a, SCardTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(SCardTransfer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCardTransfer* New() const final {
    return CreateMaybeMessage<SCardTransfer>(nullptr);
  }

  SCardTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCardTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCardTransfer& from);
  void MergeFrom(const SCardTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCardTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.SCardTransfer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:businessCard.SCardTransfer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class CBusinessCardSave :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.CBusinessCardSave) */ {
 public:
  CBusinessCardSave();
  virtual ~CBusinessCardSave();

  CBusinessCardSave(const CBusinessCardSave& from);
  CBusinessCardSave(CBusinessCardSave&& from) noexcept
    : CBusinessCardSave() {
    *this = ::std::move(from);
  }

  inline CBusinessCardSave& operator=(const CBusinessCardSave& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBusinessCardSave& operator=(CBusinessCardSave&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBusinessCardSave& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBusinessCardSave* internal_default_instance() {
    return reinterpret_cast<const CBusinessCardSave*>(
               &_CBusinessCardSave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CBusinessCardSave& a, CBusinessCardSave& b) {
    a.Swap(&b);
  }
  inline void Swap(CBusinessCardSave* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBusinessCardSave* New() const final {
    return CreateMaybeMessage<CBusinessCardSave>(nullptr);
  }

  CBusinessCardSave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBusinessCardSave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBusinessCardSave& from);
  void MergeFrom(const CBusinessCardSave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBusinessCardSave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.CBusinessCardSave";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgNameFieldNumber = 1,
    kTitleFieldNumber = 2,
    kEmailFieldNumber = 3,
    kNameOfParticipantsFieldNumber = 4,
  };
  // string orgName = 1;
  void clear_orgname();
  const std::string& orgname() const;
  void set_orgname(const std::string& value);
  void set_orgname(std::string&& value);
  void set_orgname(const char* value);
  void set_orgname(const char* value, size_t size);
  std::string* mutable_orgname();
  std::string* release_orgname();
  void set_allocated_orgname(std::string* orgname);
  private:
  const std::string& _internal_orgname() const;
  void _internal_set_orgname(const std::string& value);
  std::string* _internal_mutable_orgname();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string nameOfParticipants = 4;
  void clear_nameofparticipants();
  const std::string& nameofparticipants() const;
  void set_nameofparticipants(const std::string& value);
  void set_nameofparticipants(std::string&& value);
  void set_nameofparticipants(const char* value);
  void set_nameofparticipants(const char* value, size_t size);
  std::string* mutable_nameofparticipants();
  std::string* release_nameofparticipants();
  void set_allocated_nameofparticipants(std::string* nameofparticipants);
  private:
  const std::string& _internal_nameofparticipants() const;
  void _internal_set_nameofparticipants(const std::string& value);
  std::string* _internal_mutable_nameofparticipants();
  public:

  // @@protoc_insertion_point(class_scope:businessCard.CBusinessCardSave)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orgname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nameofparticipants_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class SBusinessCardSave :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.SBusinessCardSave) */ {
 public:
  SBusinessCardSave();
  virtual ~SBusinessCardSave();

  SBusinessCardSave(const SBusinessCardSave& from);
  SBusinessCardSave(SBusinessCardSave&& from) noexcept
    : SBusinessCardSave() {
    *this = ::std::move(from);
  }

  inline SBusinessCardSave& operator=(const SBusinessCardSave& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBusinessCardSave& operator=(SBusinessCardSave&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBusinessCardSave& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBusinessCardSave* internal_default_instance() {
    return reinterpret_cast<const SBusinessCardSave*>(
               &_SBusinessCardSave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SBusinessCardSave& a, SBusinessCardSave& b) {
    a.Swap(&b);
  }
  inline void Swap(SBusinessCardSave* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBusinessCardSave* New() const final {
    return CreateMaybeMessage<SBusinessCardSave>(nullptr);
  }

  SBusinessCardSave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBusinessCardSave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBusinessCardSave& from);
  void MergeFrom(const SBusinessCardSave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBusinessCardSave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.SBusinessCardSave";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kInfoFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .businessCard.BBusinessCardInfo info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::businessCard::BBusinessCardInfo& info() const;
  ::businessCard::BBusinessCardInfo* release_info();
  ::businessCard::BBusinessCardInfo* mutable_info();
  void set_allocated_info(::businessCard::BBusinessCardInfo* info);
  private:
  const ::businessCard::BBusinessCardInfo& _internal_info() const;
  ::businessCard::BBusinessCardInfo* _internal_mutable_info();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:businessCard.SBusinessCardSave)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::businessCard::BBusinessCardInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class BBusinessCardInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.BBusinessCardInfo) */ {
 public:
  BBusinessCardInfo();
  virtual ~BBusinessCardInfo();

  BBusinessCardInfo(const BBusinessCardInfo& from);
  BBusinessCardInfo(BBusinessCardInfo&& from) noexcept
    : BBusinessCardInfo() {
    *this = ::std::move(from);
  }

  inline BBusinessCardInfo& operator=(const BBusinessCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBusinessCardInfo& operator=(BBusinessCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BBusinessCardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BBusinessCardInfo* internal_default_instance() {
    return reinterpret_cast<const BBusinessCardInfo*>(
               &_BBusinessCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BBusinessCardInfo& a, BBusinessCardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BBusinessCardInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBusinessCardInfo* New() const final {
    return CreateMaybeMessage<BBusinessCardInfo>(nullptr);
  }

  BBusinessCardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBusinessCardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBusinessCardInfo& from);
  void MergeFrom(const BBusinessCardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBusinessCardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.BBusinessCardInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgNameFieldNumber = 2,
    kTitleFieldNumber = 3,
    kEmailFieldNumber = 4,
    kNameOfParticipantsFieldNumber = 5,
    kUidFieldNumber = 1,
  };
  // string orgName = 2;
  void clear_orgname();
  const std::string& orgname() const;
  void set_orgname(const std::string& value);
  void set_orgname(std::string&& value);
  void set_orgname(const char* value);
  void set_orgname(const char* value, size_t size);
  std::string* mutable_orgname();
  std::string* release_orgname();
  void set_allocated_orgname(std::string* orgname);
  private:
  const std::string& _internal_orgname() const;
  void _internal_set_orgname(const std::string& value);
  std::string* _internal_mutable_orgname();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string email = 4;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string nameOfParticipants = 5;
  void clear_nameofparticipants();
  const std::string& nameofparticipants() const;
  void set_nameofparticipants(const std::string& value);
  void set_nameofparticipants(std::string&& value);
  void set_nameofparticipants(const char* value);
  void set_nameofparticipants(const char* value, size_t size);
  std::string* mutable_nameofparticipants();
  std::string* release_nameofparticipants();
  void set_allocated_nameofparticipants(std::string* nameofparticipants);
  private:
  const std::string& _internal_nameofparticipants() const;
  void _internal_set_nameofparticipants(const std::string& value);
  std::string* _internal_mutable_nameofparticipants();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:businessCard.BBusinessCardInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orgname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nameofparticipants_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class CBusinessCardList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.CBusinessCardList) */ {
 public:
  CBusinessCardList();
  virtual ~CBusinessCardList();

  CBusinessCardList(const CBusinessCardList& from);
  CBusinessCardList(CBusinessCardList&& from) noexcept
    : CBusinessCardList() {
    *this = ::std::move(from);
  }

  inline CBusinessCardList& operator=(const CBusinessCardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBusinessCardList& operator=(CBusinessCardList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBusinessCardList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBusinessCardList* internal_default_instance() {
    return reinterpret_cast<const CBusinessCardList*>(
               &_CBusinessCardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CBusinessCardList& a, CBusinessCardList& b) {
    a.Swap(&b);
  }
  inline void Swap(CBusinessCardList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBusinessCardList* New() const final {
    return CreateMaybeMessage<CBusinessCardList>(nullptr);
  }

  CBusinessCardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBusinessCardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBusinessCardList& from);
  void MergeFrom(const CBusinessCardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBusinessCardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.CBusinessCardList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 1,
  };
  // repeated int32 uids = 1;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uids() const;
  void _internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uids(int index) const;
  void set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:businessCard.CBusinessCardList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// -------------------------------------------------------------------

class SBusinessCardList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:businessCard.SBusinessCardList) */ {
 public:
  SBusinessCardList();
  virtual ~SBusinessCardList();

  SBusinessCardList(const SBusinessCardList& from);
  SBusinessCardList(SBusinessCardList&& from) noexcept
    : SBusinessCardList() {
    *this = ::std::move(from);
  }

  inline SBusinessCardList& operator=(const SBusinessCardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBusinessCardList& operator=(SBusinessCardList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBusinessCardList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBusinessCardList* internal_default_instance() {
    return reinterpret_cast<const SBusinessCardList*>(
               &_SBusinessCardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SBusinessCardList& a, SBusinessCardList& b) {
    a.Swap(&b);
  }
  inline void Swap(SBusinessCardList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBusinessCardList* New() const final {
    return CreateMaybeMessage<SBusinessCardList>(nullptr);
  }

  SBusinessCardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBusinessCardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBusinessCardList& from);
  void MergeFrom(const SBusinessCardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBusinessCardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "businessCard.SBusinessCardList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_businessCard_2eproto);
    return ::descriptor_table_businessCard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .businessCard.BBusinessCardInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::businessCard::BBusinessCardInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::businessCard::BBusinessCardInfo >*
      mutable_list();
  private:
  const ::businessCard::BBusinessCardInfo& _internal_list(int index) const;
  ::businessCard::BBusinessCardInfo* _internal_add_list();
  public:
  const ::businessCard::BBusinessCardInfo& list(int index) const;
  ::businessCard::BBusinessCardInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::businessCard::BBusinessCardInfo >&
      list() const;

  // @@protoc_insertion_point(class_scope:businessCard.SBusinessCardList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::businessCard::BBusinessCardInfo > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_businessCard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCardInfo

// int32 uid = 1;
inline void CCardInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCardInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCardInfo::uid() const {
  // @@protoc_insertion_point(field_get:businessCard.CCardInfo.uid)
  return _internal_uid();
}
inline void CCardInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CCardInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:businessCard.CCardInfo.uid)
}

// -------------------------------------------------------------------

// SCardInfo

// int32 uid = 1;
inline void SCardInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::uid() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.uid)
  return _internal_uid();
}
inline void SCardInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SCardInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.uid)
}

// int32 followCount = 2;
inline void SCardInfo::clear_followcount() {
  followcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_followcount() const {
  return followcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::followcount() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.followCount)
  return _internal_followcount();
}
inline void SCardInfo::_internal_set_followcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  followcount_ = value;
}
inline void SCardInfo::set_followcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_followcount(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.followCount)
}

// int32 fansCount = 3;
inline void SCardInfo::clear_fanscount() {
  fanscount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_fanscount() const {
  return fanscount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::fanscount() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.fansCount)
  return _internal_fanscount();
}
inline void SCardInfo::_internal_set_fanscount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fanscount_ = value;
}
inline void SCardInfo::set_fanscount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fanscount(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.fansCount)
}

// bool isFollow = 4;
inline void SCardInfo::clear_isfollow() {
  isfollow_ = false;
}
inline bool SCardInfo::_internal_isfollow() const {
  return isfollow_;
}
inline bool SCardInfo::isfollow() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.isFollow)
  return _internal_isfollow();
}
inline void SCardInfo::_internal_set_isfollow(bool value) {
  
  isfollow_ = value;
}
inline void SCardInfo::set_isfollow(bool value) {
  _internal_set_isfollow(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.isFollow)
}

// string nick = 5;
inline void SCardInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCardInfo::nick() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.nick)
  return _internal_nick();
}
inline void SCardInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.nick)
}
inline std::string* SCardInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:businessCard.SCardInfo.nick)
  return _internal_mutable_nick();
}
inline const std::string& SCardInfo::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void SCardInfo::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCardInfo::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SCardInfo.nick)
}
inline void SCardInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SCardInfo.nick)
}
inline void SCardInfo::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SCardInfo.nick)
}
inline std::string* SCardInfo::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCardInfo::release_nick() {
  // @@protoc_insertion_point(field_release:businessCard.SCardInfo.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCardInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SCardInfo.nick)
}

// string headPic = 6;
inline void SCardInfo::clear_headpic() {
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCardInfo::headpic() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.headPic)
  return _internal_headpic();
}
inline void SCardInfo::set_headpic(const std::string& value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.headPic)
}
inline std::string* SCardInfo::mutable_headpic() {
  // @@protoc_insertion_point(field_mutable:businessCard.SCardInfo.headPic)
  return _internal_mutable_headpic();
}
inline const std::string& SCardInfo::_internal_headpic() const {
  return headpic_.GetNoArena();
}
inline void SCardInfo::_internal_set_headpic(const std::string& value) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCardInfo::set_headpic(std::string&& value) {
  
  headpic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SCardInfo.headPic)
}
inline void SCardInfo::set_headpic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SCardInfo.headPic)
}
inline void SCardInfo::set_headpic(const char* value, size_t size) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SCardInfo.headPic)
}
inline std::string* SCardInfo::_internal_mutable_headpic() {
  
  return headpic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCardInfo::release_headpic() {
  // @@protoc_insertion_point(field_release:businessCard.SCardInfo.headPic)
  
  return headpic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCardInfo::set_allocated_headpic(std::string* headpic) {
  if (headpic != nullptr) {
    
  } else {
    
  }
  headpic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headpic);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SCardInfo.headPic)
}

// int32 visitCount = 7;
inline void SCardInfo::clear_visitcount() {
  visitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_visitcount() const {
  return visitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::visitcount() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.visitCount)
  return _internal_visitcount();
}
inline void SCardInfo::_internal_set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  visitcount_ = value;
}
inline void SCardInfo::set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_visitcount(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.visitCount)
}

// int32 houseId = 8;
inline void SCardInfo::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::houseid() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.houseId)
  return _internal_houseid();
}
inline void SCardInfo::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SCardInfo::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.houseId)
}

// int32 seq = 9;
inline void SCardInfo::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::seq() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.seq)
  return _internal_seq();
}
inline void SCardInfo::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void SCardInfo::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.seq)
}

// string spaceName = 10;
inline void SCardInfo::clear_spacename() {
  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCardInfo::spacename() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.spaceName)
  return _internal_spacename();
}
inline void SCardInfo::set_spacename(const std::string& value) {
  _internal_set_spacename(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.spaceName)
}
inline std::string* SCardInfo::mutable_spacename() {
  // @@protoc_insertion_point(field_mutable:businessCard.SCardInfo.spaceName)
  return _internal_mutable_spacename();
}
inline const std::string& SCardInfo::_internal_spacename() const {
  return spacename_.GetNoArena();
}
inline void SCardInfo::_internal_set_spacename(const std::string& value) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCardInfo::set_spacename(std::string&& value) {
  
  spacename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SCardInfo.spaceName)
}
inline void SCardInfo::set_spacename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SCardInfo.spaceName)
}
inline void SCardInfo::set_spacename(const char* value, size_t size) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SCardInfo.spaceName)
}
inline std::string* SCardInfo::_internal_mutable_spacename() {
  
  return spacename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCardInfo::release_spacename() {
  // @@protoc_insertion_point(field_release:businessCard.SCardInfo.spaceName)
  
  return spacename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCardInfo::set_allocated_spacename(std::string* spacename) {
  if (spacename != nullptr) {
    
  } else {
    
  }
  spacename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacename);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SCardInfo.spaceName)
}

// string identifierId = 11;
inline void SCardInfo::clear_identifierid() {
  identifierid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCardInfo::identifierid() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.identifierId)
  return _internal_identifierid();
}
inline void SCardInfo::set_identifierid(const std::string& value) {
  _internal_set_identifierid(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.identifierId)
}
inline std::string* SCardInfo::mutable_identifierid() {
  // @@protoc_insertion_point(field_mutable:businessCard.SCardInfo.identifierId)
  return _internal_mutable_identifierid();
}
inline const std::string& SCardInfo::_internal_identifierid() const {
  return identifierid_.GetNoArena();
}
inline void SCardInfo::_internal_set_identifierid(const std::string& value) {
  
  identifierid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCardInfo::set_identifierid(std::string&& value) {
  
  identifierid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SCardInfo.identifierId)
}
inline void SCardInfo::set_identifierid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identifierid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SCardInfo.identifierId)
}
inline void SCardInfo::set_identifierid(const char* value, size_t size) {
  
  identifierid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SCardInfo.identifierId)
}
inline std::string* SCardInfo::_internal_mutable_identifierid() {
  
  return identifierid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCardInfo::release_identifierid() {
  // @@protoc_insertion_point(field_release:businessCard.SCardInfo.identifierId)
  
  return identifierid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCardInfo::set_allocated_identifierid(std::string* identifierid) {
  if (identifierid != nullptr) {
    
  } else {
    
  }
  identifierid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifierid);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SCardInfo.identifierId)
}

// string phone = 12;
inline void SCardInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCardInfo::phone() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.phone)
  return _internal_phone();
}
inline void SCardInfo::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.phone)
}
inline std::string* SCardInfo::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:businessCard.SCardInfo.phone)
  return _internal_mutable_phone();
}
inline const std::string& SCardInfo::_internal_phone() const {
  return phone_.GetNoArena();
}
inline void SCardInfo::_internal_set_phone(const std::string& value) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCardInfo::set_phone(std::string&& value) {
  
  phone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SCardInfo.phone)
}
inline void SCardInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SCardInfo.phone)
}
inline void SCardInfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SCardInfo.phone)
}
inline std::string* SCardInfo::_internal_mutable_phone() {
  
  return phone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCardInfo::release_phone() {
  // @@protoc_insertion_point(field_release:businessCard.SCardInfo.phone)
  
  return phone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCardInfo::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SCardInfo.phone)
}

// bool isIn = 13;
inline void SCardInfo::clear_isin() {
  isin_ = false;
}
inline bool SCardInfo::_internal_isin() const {
  return isin_;
}
inline bool SCardInfo::isin() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.isIn)
  return _internal_isin();
}
inline void SCardInfo::_internal_set_isin(bool value) {
  
  isin_ = value;
}
inline void SCardInfo::set_isin(bool value) {
  _internal_set_isin(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.isIn)
}

// int32 registeredDays = 14;
inline void SCardInfo::clear_registereddays() {
  registereddays_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_registereddays() const {
  return registereddays_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::registereddays() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.registeredDays)
  return _internal_registereddays();
}
inline void SCardInfo::_internal_set_registereddays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  registereddays_ = value;
}
inline void SCardInfo::set_registereddays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_registereddays(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.registeredDays)
}

// int32 visitNumber = 15;
inline void SCardInfo::clear_visitnumber() {
  visitnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_visitnumber() const {
  return visitnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::visitnumber() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.visitNumber)
  return _internal_visitnumber();
}
inline void SCardInfo::_internal_set_visitnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  visitnumber_ = value;
}
inline void SCardInfo::set_visitnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_visitnumber(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.visitNumber)
}

// string offlineStatus = 16;
inline void SCardInfo::clear_offlinestatus() {
  offlinestatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCardInfo::offlinestatus() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.offlineStatus)
  return _internal_offlinestatus();
}
inline void SCardInfo::set_offlinestatus(const std::string& value) {
  _internal_set_offlinestatus(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.offlineStatus)
}
inline std::string* SCardInfo::mutable_offlinestatus() {
  // @@protoc_insertion_point(field_mutable:businessCard.SCardInfo.offlineStatus)
  return _internal_mutable_offlinestatus();
}
inline const std::string& SCardInfo::_internal_offlinestatus() const {
  return offlinestatus_.GetNoArena();
}
inline void SCardInfo::_internal_set_offlinestatus(const std::string& value) {
  
  offlinestatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCardInfo::set_offlinestatus(std::string&& value) {
  
  offlinestatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SCardInfo.offlineStatus)
}
inline void SCardInfo::set_offlinestatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offlinestatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SCardInfo.offlineStatus)
}
inline void SCardInfo::set_offlinestatus(const char* value, size_t size) {
  
  offlinestatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SCardInfo.offlineStatus)
}
inline std::string* SCardInfo::_internal_mutable_offlinestatus() {
  
  return offlinestatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCardInfo::release_offlinestatus() {
  // @@protoc_insertion_point(field_release:businessCard.SCardInfo.offlineStatus)
  
  return offlinestatus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCardInfo::set_allocated_offlinestatus(std::string* offlinestatus) {
  if (offlinestatus != nullptr) {
    
  } else {
    
  }
  offlinestatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offlinestatus);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SCardInfo.offlineStatus)
}

// string inUid = 17;
inline void SCardInfo::clear_inuid() {
  inuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCardInfo::inuid() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.inUid)
  return _internal_inuid();
}
inline void SCardInfo::set_inuid(const std::string& value) {
  _internal_set_inuid(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.inUid)
}
inline std::string* SCardInfo::mutable_inuid() {
  // @@protoc_insertion_point(field_mutable:businessCard.SCardInfo.inUid)
  return _internal_mutable_inuid();
}
inline const std::string& SCardInfo::_internal_inuid() const {
  return inuid_.GetNoArena();
}
inline void SCardInfo::_internal_set_inuid(const std::string& value) {
  
  inuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCardInfo::set_inuid(std::string&& value) {
  
  inuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SCardInfo.inUid)
}
inline void SCardInfo::set_inuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SCardInfo.inUid)
}
inline void SCardInfo::set_inuid(const char* value, size_t size) {
  
  inuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SCardInfo.inUid)
}
inline std::string* SCardInfo::_internal_mutable_inuid() {
  
  return inuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCardInfo::release_inuid() {
  // @@protoc_insertion_point(field_release:businessCard.SCardInfo.inUid)
  
  return inuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCardInfo::set_allocated_inuid(std::string* inuid) {
  if (inuid != nullptr) {
    
  } else {
    
  }
  inuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inuid);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SCardInfo.inUid)
}

// string sign = 18;
inline void SCardInfo::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCardInfo::sign() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.sign)
  return _internal_sign();
}
inline void SCardInfo::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.sign)
}
inline std::string* SCardInfo::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:businessCard.SCardInfo.sign)
  return _internal_mutable_sign();
}
inline const std::string& SCardInfo::_internal_sign() const {
  return sign_.GetNoArena();
}
inline void SCardInfo::_internal_set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCardInfo::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SCardInfo.sign)
}
inline void SCardInfo::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SCardInfo.sign)
}
inline void SCardInfo::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SCardInfo.sign)
}
inline std::string* SCardInfo::_internal_mutable_sign() {
  
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCardInfo::release_sign() {
  // @@protoc_insertion_point(field_release:businessCard.SCardInfo.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCardInfo::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SCardInfo.sign)
}

// int32 avatarKey = 19;
inline void SCardInfo::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::avatarkey() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.avatarKey)
  return _internal_avatarkey();
}
inline void SCardInfo::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void SCardInfo::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.avatarKey)
}

// int32 houseType = 20;
inline void SCardInfo::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardInfo::housetype() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardInfo.houseType)
  return _internal_housetype();
}
inline void SCardInfo::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void SCardInfo::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardInfo.houseType)
}

// -------------------------------------------------------------------

// CRename

// string nickName = 1;
inline void CRename::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CRename::nickname() const {
  // @@protoc_insertion_point(field_get:businessCard.CRename.nickName)
  return _internal_nickname();
}
inline void CRename::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:businessCard.CRename.nickName)
}
inline std::string* CRename::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:businessCard.CRename.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& CRename::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void CRename::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CRename::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.CRename.nickName)
}
inline void CRename::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.CRename.nickName)
}
inline void CRename::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.CRename.nickName)
}
inline std::string* CRename::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CRename::release_nickname() {
  // @@protoc_insertion_point(field_release:businessCard.CRename.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CRename::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:businessCard.CRename.nickName)
}

// -------------------------------------------------------------------

// SRename

// int32 isRenameTrue = 1;
inline void SRename::clear_isrenametrue() {
  isrenametrue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRename::_internal_isrenametrue() const {
  return isrenametrue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRename::isrenametrue() const {
  // @@protoc_insertion_point(field_get:businessCard.SRename.isRenameTrue)
  return _internal_isrenametrue();
}
inline void SRename::_internal_set_isrenametrue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isrenametrue_ = value;
}
inline void SRename::set_isrenametrue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isrenametrue(value);
  // @@protoc_insertion_point(field_set:businessCard.SRename.isRenameTrue)
}

// string nickName = 2;
inline void SRename::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SRename::nickname() const {
  // @@protoc_insertion_point(field_get:businessCard.SRename.nickName)
  return _internal_nickname();
}
inline void SRename::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:businessCard.SRename.nickName)
}
inline std::string* SRename::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:businessCard.SRename.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& SRename::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void SRename::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SRename::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SRename.nickName)
}
inline void SRename::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SRename.nickName)
}
inline void SRename::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SRename.nickName)
}
inline std::string* SRename::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SRename::release_nickname() {
  // @@protoc_insertion_point(field_release:businessCard.SRename.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SRename::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SRename.nickName)
}

// int32 uid = 3;
inline void SRename::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRename::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRename::uid() const {
  // @@protoc_insertion_point(field_get:businessCard.SRename.uid)
  return _internal_uid();
}
inline void SRename::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SRename::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:businessCard.SRename.uid)
}

// -------------------------------------------------------------------

// SCardTransferBtn

// int32 isShow = 1;
inline void SCardTransferBtn::clear_isshow() {
  isshow_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardTransferBtn::_internal_isshow() const {
  return isshow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardTransferBtn::isshow() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardTransferBtn.isShow)
  return _internal_isshow();
}
inline void SCardTransferBtn::_internal_set_isshow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isshow_ = value;
}
inline void SCardTransferBtn::set_isshow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isshow(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardTransferBtn.isShow)
}

// -------------------------------------------------------------------

// SCardTransfer

// int32 status = 1;
inline void SCardTransfer::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardTransfer::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardTransfer::status() const {
  // @@protoc_insertion_point(field_get:businessCard.SCardTransfer.status)
  return _internal_status();
}
inline void SCardTransfer::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCardTransfer::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:businessCard.SCardTransfer.status)
}

// -------------------------------------------------------------------

// CBusinessCardSave

// string orgName = 1;
inline void CBusinessCardSave::clear_orgname() {
  orgname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBusinessCardSave::orgname() const {
  // @@protoc_insertion_point(field_get:businessCard.CBusinessCardSave.orgName)
  return _internal_orgname();
}
inline void CBusinessCardSave::set_orgname(const std::string& value) {
  _internal_set_orgname(value);
  // @@protoc_insertion_point(field_set:businessCard.CBusinessCardSave.orgName)
}
inline std::string* CBusinessCardSave::mutable_orgname() {
  // @@protoc_insertion_point(field_mutable:businessCard.CBusinessCardSave.orgName)
  return _internal_mutable_orgname();
}
inline const std::string& CBusinessCardSave::_internal_orgname() const {
  return orgname_.GetNoArena();
}
inline void CBusinessCardSave::_internal_set_orgname(const std::string& value) {
  
  orgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBusinessCardSave::set_orgname(std::string&& value) {
  
  orgname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.CBusinessCardSave.orgName)
}
inline void CBusinessCardSave::set_orgname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.CBusinessCardSave.orgName)
}
inline void CBusinessCardSave::set_orgname(const char* value, size_t size) {
  
  orgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.CBusinessCardSave.orgName)
}
inline std::string* CBusinessCardSave::_internal_mutable_orgname() {
  
  return orgname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBusinessCardSave::release_orgname() {
  // @@protoc_insertion_point(field_release:businessCard.CBusinessCardSave.orgName)
  
  return orgname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBusinessCardSave::set_allocated_orgname(std::string* orgname) {
  if (orgname != nullptr) {
    
  } else {
    
  }
  orgname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orgname);
  // @@protoc_insertion_point(field_set_allocated:businessCard.CBusinessCardSave.orgName)
}

// string title = 2;
inline void CBusinessCardSave::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBusinessCardSave::title() const {
  // @@protoc_insertion_point(field_get:businessCard.CBusinessCardSave.title)
  return _internal_title();
}
inline void CBusinessCardSave::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:businessCard.CBusinessCardSave.title)
}
inline std::string* CBusinessCardSave::mutable_title() {
  // @@protoc_insertion_point(field_mutable:businessCard.CBusinessCardSave.title)
  return _internal_mutable_title();
}
inline const std::string& CBusinessCardSave::_internal_title() const {
  return title_.GetNoArena();
}
inline void CBusinessCardSave::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBusinessCardSave::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.CBusinessCardSave.title)
}
inline void CBusinessCardSave::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.CBusinessCardSave.title)
}
inline void CBusinessCardSave::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.CBusinessCardSave.title)
}
inline std::string* CBusinessCardSave::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBusinessCardSave::release_title() {
  // @@protoc_insertion_point(field_release:businessCard.CBusinessCardSave.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBusinessCardSave::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:businessCard.CBusinessCardSave.title)
}

// string email = 3;
inline void CBusinessCardSave::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBusinessCardSave::email() const {
  // @@protoc_insertion_point(field_get:businessCard.CBusinessCardSave.email)
  return _internal_email();
}
inline void CBusinessCardSave::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:businessCard.CBusinessCardSave.email)
}
inline std::string* CBusinessCardSave::mutable_email() {
  // @@protoc_insertion_point(field_mutable:businessCard.CBusinessCardSave.email)
  return _internal_mutable_email();
}
inline const std::string& CBusinessCardSave::_internal_email() const {
  return email_.GetNoArena();
}
inline void CBusinessCardSave::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBusinessCardSave::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.CBusinessCardSave.email)
}
inline void CBusinessCardSave::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.CBusinessCardSave.email)
}
inline void CBusinessCardSave::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.CBusinessCardSave.email)
}
inline std::string* CBusinessCardSave::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBusinessCardSave::release_email() {
  // @@protoc_insertion_point(field_release:businessCard.CBusinessCardSave.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBusinessCardSave::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:businessCard.CBusinessCardSave.email)
}

// string nameOfParticipants = 4;
inline void CBusinessCardSave::clear_nameofparticipants() {
  nameofparticipants_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBusinessCardSave::nameofparticipants() const {
  // @@protoc_insertion_point(field_get:businessCard.CBusinessCardSave.nameOfParticipants)
  return _internal_nameofparticipants();
}
inline void CBusinessCardSave::set_nameofparticipants(const std::string& value) {
  _internal_set_nameofparticipants(value);
  // @@protoc_insertion_point(field_set:businessCard.CBusinessCardSave.nameOfParticipants)
}
inline std::string* CBusinessCardSave::mutable_nameofparticipants() {
  // @@protoc_insertion_point(field_mutable:businessCard.CBusinessCardSave.nameOfParticipants)
  return _internal_mutable_nameofparticipants();
}
inline const std::string& CBusinessCardSave::_internal_nameofparticipants() const {
  return nameofparticipants_.GetNoArena();
}
inline void CBusinessCardSave::_internal_set_nameofparticipants(const std::string& value) {
  
  nameofparticipants_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBusinessCardSave::set_nameofparticipants(std::string&& value) {
  
  nameofparticipants_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.CBusinessCardSave.nameOfParticipants)
}
inline void CBusinessCardSave::set_nameofparticipants(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nameofparticipants_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.CBusinessCardSave.nameOfParticipants)
}
inline void CBusinessCardSave::set_nameofparticipants(const char* value, size_t size) {
  
  nameofparticipants_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.CBusinessCardSave.nameOfParticipants)
}
inline std::string* CBusinessCardSave::_internal_mutable_nameofparticipants() {
  
  return nameofparticipants_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBusinessCardSave::release_nameofparticipants() {
  // @@protoc_insertion_point(field_release:businessCard.CBusinessCardSave.nameOfParticipants)
  
  return nameofparticipants_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBusinessCardSave::set_allocated_nameofparticipants(std::string* nameofparticipants) {
  if (nameofparticipants != nullptr) {
    
  } else {
    
  }
  nameofparticipants_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nameofparticipants);
  // @@protoc_insertion_point(field_set_allocated:businessCard.CBusinessCardSave.nameOfParticipants)
}

// -------------------------------------------------------------------

// SBusinessCardSave

// int32 state = 1;
inline void SBusinessCardSave::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBusinessCardSave::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBusinessCardSave::state() const {
  // @@protoc_insertion_point(field_get:businessCard.SBusinessCardSave.state)
  return _internal_state();
}
inline void SBusinessCardSave::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SBusinessCardSave::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:businessCard.SBusinessCardSave.state)
}

// string msg = 2;
inline void SBusinessCardSave::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SBusinessCardSave::msg() const {
  // @@protoc_insertion_point(field_get:businessCard.SBusinessCardSave.msg)
  return _internal_msg();
}
inline void SBusinessCardSave::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:businessCard.SBusinessCardSave.msg)
}
inline std::string* SBusinessCardSave::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:businessCard.SBusinessCardSave.msg)
  return _internal_mutable_msg();
}
inline const std::string& SBusinessCardSave::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SBusinessCardSave::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SBusinessCardSave::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.SBusinessCardSave.msg)
}
inline void SBusinessCardSave::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.SBusinessCardSave.msg)
}
inline void SBusinessCardSave::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.SBusinessCardSave.msg)
}
inline std::string* SBusinessCardSave::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SBusinessCardSave::release_msg() {
  // @@protoc_insertion_point(field_release:businessCard.SBusinessCardSave.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SBusinessCardSave::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:businessCard.SBusinessCardSave.msg)
}

// .businessCard.BBusinessCardInfo info = 3;
inline bool SBusinessCardSave::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SBusinessCardSave::has_info() const {
  return _internal_has_info();
}
inline void SBusinessCardSave::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::businessCard::BBusinessCardInfo& SBusinessCardSave::_internal_info() const {
  const ::businessCard::BBusinessCardInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::businessCard::BBusinessCardInfo*>(
      &::businessCard::_BBusinessCardInfo_default_instance_);
}
inline const ::businessCard::BBusinessCardInfo& SBusinessCardSave::info() const {
  // @@protoc_insertion_point(field_get:businessCard.SBusinessCardSave.info)
  return _internal_info();
}
inline ::businessCard::BBusinessCardInfo* SBusinessCardSave::release_info() {
  // @@protoc_insertion_point(field_release:businessCard.SBusinessCardSave.info)
  
  ::businessCard::BBusinessCardInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::businessCard::BBusinessCardInfo* SBusinessCardSave::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::businessCard::BBusinessCardInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::businessCard::BBusinessCardInfo* SBusinessCardSave::mutable_info() {
  // @@protoc_insertion_point(field_mutable:businessCard.SBusinessCardSave.info)
  return _internal_mutable_info();
}
inline void SBusinessCardSave::set_allocated_info(::businessCard::BBusinessCardInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:businessCard.SBusinessCardSave.info)
}

// -------------------------------------------------------------------

// BBusinessCardInfo

// int32 uid = 1;
inline void BBusinessCardInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBusinessCardInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBusinessCardInfo::uid() const {
  // @@protoc_insertion_point(field_get:businessCard.BBusinessCardInfo.uid)
  return _internal_uid();
}
inline void BBusinessCardInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BBusinessCardInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:businessCard.BBusinessCardInfo.uid)
}

// string orgName = 2;
inline void BBusinessCardInfo::clear_orgname() {
  orgname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BBusinessCardInfo::orgname() const {
  // @@protoc_insertion_point(field_get:businessCard.BBusinessCardInfo.orgName)
  return _internal_orgname();
}
inline void BBusinessCardInfo::set_orgname(const std::string& value) {
  _internal_set_orgname(value);
  // @@protoc_insertion_point(field_set:businessCard.BBusinessCardInfo.orgName)
}
inline std::string* BBusinessCardInfo::mutable_orgname() {
  // @@protoc_insertion_point(field_mutable:businessCard.BBusinessCardInfo.orgName)
  return _internal_mutable_orgname();
}
inline const std::string& BBusinessCardInfo::_internal_orgname() const {
  return orgname_.GetNoArena();
}
inline void BBusinessCardInfo::_internal_set_orgname(const std::string& value) {
  
  orgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BBusinessCardInfo::set_orgname(std::string&& value) {
  
  orgname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.BBusinessCardInfo.orgName)
}
inline void BBusinessCardInfo::set_orgname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.BBusinessCardInfo.orgName)
}
inline void BBusinessCardInfo::set_orgname(const char* value, size_t size) {
  
  orgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.BBusinessCardInfo.orgName)
}
inline std::string* BBusinessCardInfo::_internal_mutable_orgname() {
  
  return orgname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BBusinessCardInfo::release_orgname() {
  // @@protoc_insertion_point(field_release:businessCard.BBusinessCardInfo.orgName)
  
  return orgname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BBusinessCardInfo::set_allocated_orgname(std::string* orgname) {
  if (orgname != nullptr) {
    
  } else {
    
  }
  orgname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orgname);
  // @@protoc_insertion_point(field_set_allocated:businessCard.BBusinessCardInfo.orgName)
}

// string title = 3;
inline void BBusinessCardInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BBusinessCardInfo::title() const {
  // @@protoc_insertion_point(field_get:businessCard.BBusinessCardInfo.title)
  return _internal_title();
}
inline void BBusinessCardInfo::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:businessCard.BBusinessCardInfo.title)
}
inline std::string* BBusinessCardInfo::mutable_title() {
  // @@protoc_insertion_point(field_mutable:businessCard.BBusinessCardInfo.title)
  return _internal_mutable_title();
}
inline const std::string& BBusinessCardInfo::_internal_title() const {
  return title_.GetNoArena();
}
inline void BBusinessCardInfo::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BBusinessCardInfo::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.BBusinessCardInfo.title)
}
inline void BBusinessCardInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.BBusinessCardInfo.title)
}
inline void BBusinessCardInfo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.BBusinessCardInfo.title)
}
inline std::string* BBusinessCardInfo::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BBusinessCardInfo::release_title() {
  // @@protoc_insertion_point(field_release:businessCard.BBusinessCardInfo.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BBusinessCardInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:businessCard.BBusinessCardInfo.title)
}

// string email = 4;
inline void BBusinessCardInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BBusinessCardInfo::email() const {
  // @@protoc_insertion_point(field_get:businessCard.BBusinessCardInfo.email)
  return _internal_email();
}
inline void BBusinessCardInfo::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:businessCard.BBusinessCardInfo.email)
}
inline std::string* BBusinessCardInfo::mutable_email() {
  // @@protoc_insertion_point(field_mutable:businessCard.BBusinessCardInfo.email)
  return _internal_mutable_email();
}
inline const std::string& BBusinessCardInfo::_internal_email() const {
  return email_.GetNoArena();
}
inline void BBusinessCardInfo::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BBusinessCardInfo::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.BBusinessCardInfo.email)
}
inline void BBusinessCardInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.BBusinessCardInfo.email)
}
inline void BBusinessCardInfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.BBusinessCardInfo.email)
}
inline std::string* BBusinessCardInfo::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BBusinessCardInfo::release_email() {
  // @@protoc_insertion_point(field_release:businessCard.BBusinessCardInfo.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BBusinessCardInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:businessCard.BBusinessCardInfo.email)
}

// string nameOfParticipants = 5;
inline void BBusinessCardInfo::clear_nameofparticipants() {
  nameofparticipants_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BBusinessCardInfo::nameofparticipants() const {
  // @@protoc_insertion_point(field_get:businessCard.BBusinessCardInfo.nameOfParticipants)
  return _internal_nameofparticipants();
}
inline void BBusinessCardInfo::set_nameofparticipants(const std::string& value) {
  _internal_set_nameofparticipants(value);
  // @@protoc_insertion_point(field_set:businessCard.BBusinessCardInfo.nameOfParticipants)
}
inline std::string* BBusinessCardInfo::mutable_nameofparticipants() {
  // @@protoc_insertion_point(field_mutable:businessCard.BBusinessCardInfo.nameOfParticipants)
  return _internal_mutable_nameofparticipants();
}
inline const std::string& BBusinessCardInfo::_internal_nameofparticipants() const {
  return nameofparticipants_.GetNoArena();
}
inline void BBusinessCardInfo::_internal_set_nameofparticipants(const std::string& value) {
  
  nameofparticipants_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BBusinessCardInfo::set_nameofparticipants(std::string&& value) {
  
  nameofparticipants_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:businessCard.BBusinessCardInfo.nameOfParticipants)
}
inline void BBusinessCardInfo::set_nameofparticipants(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nameofparticipants_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:businessCard.BBusinessCardInfo.nameOfParticipants)
}
inline void BBusinessCardInfo::set_nameofparticipants(const char* value, size_t size) {
  
  nameofparticipants_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:businessCard.BBusinessCardInfo.nameOfParticipants)
}
inline std::string* BBusinessCardInfo::_internal_mutable_nameofparticipants() {
  
  return nameofparticipants_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BBusinessCardInfo::release_nameofparticipants() {
  // @@protoc_insertion_point(field_release:businessCard.BBusinessCardInfo.nameOfParticipants)
  
  return nameofparticipants_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BBusinessCardInfo::set_allocated_nameofparticipants(std::string* nameofparticipants) {
  if (nameofparticipants != nullptr) {
    
  } else {
    
  }
  nameofparticipants_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nameofparticipants);
  // @@protoc_insertion_point(field_set_allocated:businessCard.BBusinessCardInfo.nameOfParticipants)
}

// -------------------------------------------------------------------

// CBusinessCardList

// repeated int32 uids = 1;
inline int CBusinessCardList::_internal_uids_size() const {
  return uids_.size();
}
inline int CBusinessCardList::uids_size() const {
  return _internal_uids_size();
}
inline void CBusinessCardList::clear_uids() {
  uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBusinessCardList::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBusinessCardList::uids(int index) const {
  // @@protoc_insertion_point(field_get:businessCard.CBusinessCardList.uids)
  return _internal_uids(index);
}
inline void CBusinessCardList::set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:businessCard.CBusinessCardList.uids)
}
inline void CBusinessCardList::_internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Add(value);
}
inline void CBusinessCardList::add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:businessCard.CBusinessCardList.uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CBusinessCardList::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CBusinessCardList::uids() const {
  // @@protoc_insertion_point(field_list:businessCard.CBusinessCardList.uids)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CBusinessCardList::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CBusinessCardList::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:businessCard.CBusinessCardList.uids)
  return _internal_mutable_uids();
}

// -------------------------------------------------------------------

// SBusinessCardList

// repeated .businessCard.BBusinessCardInfo list = 1;
inline int SBusinessCardList::_internal_list_size() const {
  return list_.size();
}
inline int SBusinessCardList::list_size() const {
  return _internal_list_size();
}
inline void SBusinessCardList::clear_list() {
  list_.Clear();
}
inline ::businessCard::BBusinessCardInfo* SBusinessCardList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:businessCard.SBusinessCardList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::businessCard::BBusinessCardInfo >*
SBusinessCardList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:businessCard.SBusinessCardList.list)
  return &list_;
}
inline const ::businessCard::BBusinessCardInfo& SBusinessCardList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::businessCard::BBusinessCardInfo& SBusinessCardList::list(int index) const {
  // @@protoc_insertion_point(field_get:businessCard.SBusinessCardList.list)
  return _internal_list(index);
}
inline ::businessCard::BBusinessCardInfo* SBusinessCardList::_internal_add_list() {
  return list_.Add();
}
inline ::businessCard::BBusinessCardInfo* SBusinessCardList::add_list() {
  // @@protoc_insertion_point(field_add:businessCard.SBusinessCardList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::businessCard::BBusinessCardInfo >&
SBusinessCardList::list() const {
  // @@protoc_insertion_point(field_list:businessCard.SBusinessCardList.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace businessCard

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_businessCard_2eproto
