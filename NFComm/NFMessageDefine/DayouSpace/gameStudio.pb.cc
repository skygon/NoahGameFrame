// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameStudio.proto

#include "gameStudio.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gameStudio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BGameStudioInstance_gameStudio_2eproto;
namespace gameStudio {
class BGameStudioInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BGameStudioInstance> _instance;
} _BGameStudioInstance_default_instance_;
class CGameStudioInstanceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGameStudioInstanceList> _instance;
} _CGameStudioInstanceList_default_instance_;
class SGameStudioInstanceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameStudioInstanceList> _instance;
} _SGameStudioInstanceList_default_instance_;
}  // namespace gameStudio
static void InitDefaultsscc_info_BGameStudioInstance_gameStudio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameStudio::_BGameStudioInstance_default_instance_;
    new (ptr) ::gameStudio::BGameStudioInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameStudio::BGameStudioInstance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BGameStudioInstance_gameStudio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BGameStudioInstance_gameStudio_2eproto}, {}};

static void InitDefaultsscc_info_CGameStudioInstanceList_gameStudio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameStudio::_CGameStudioInstanceList_default_instance_;
    new (ptr) ::gameStudio::CGameStudioInstanceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameStudio::CGameStudioInstanceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGameStudioInstanceList_gameStudio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGameStudioInstanceList_gameStudio_2eproto}, {}};

static void InitDefaultsscc_info_SGameStudioInstanceList_gameStudio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameStudio::_SGameStudioInstanceList_default_instance_;
    new (ptr) ::gameStudio::SGameStudioInstanceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameStudio::SGameStudioInstanceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SGameStudioInstanceList_gameStudio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SGameStudioInstanceList_gameStudio_2eproto}, {
      &scc_info_BGameStudioInstance_gameStudio_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gameStudio_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gameStudio_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gameStudio_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gameStudio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameStudio::BGameStudioInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameStudio::BGameStudioInstance, gameconfig_),
  PROTOBUF_FIELD_OFFSET(::gameStudio::BGameStudioInstance, usernum_),
  PROTOBUF_FIELD_OFFSET(::gameStudio::BGameStudioInstance, maxusernum_),
  PROTOBUF_FIELD_OFFSET(::gameStudio::BGameStudioInstance, isfree_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameStudio::CGameStudioInstanceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameStudio::CGameStudioInstanceList, name_),
  PROTOBUF_FIELD_OFFSET(::gameStudio::CGameStudioInstanceList, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameStudio::SGameStudioInstanceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameStudio::SGameStudioInstanceList, lists_),
  PROTOBUF_FIELD_OFFSET(::gameStudio::SGameStudioInstanceList, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gameStudio::BGameStudioInstance)},
  { 9, -1, sizeof(::gameStudio::CGameStudioInstanceList)},
  { 16, -1, sizeof(::gameStudio::SGameStudioInstanceList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameStudio::_BGameStudioInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameStudio::_CGameStudioInstanceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameStudio::_SGameStudioInstanceList_default_instance_),
};

const char descriptor_table_protodef_gameStudio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gameStudio.proto\022\ngameStudio\"^\n\023BGameS"
  "tudioInstance\022\022\n\ngameConfig\030\001 \001(\t\022\017\n\007use"
  "rNum\030\002 \001(\005\022\022\n\nmaxUserNum\030\003 \001(\005\022\016\n\006isFree"
  "\030\004 \001(\010\"8\n\027CGameStudioInstanceList\022\014\n\004nam"
  "e\030\001 \001(\t\022\017\n\007version\030\002 \001(\005\"Y\n\027SGameStudioI"
  "nstanceList\022.\n\005lists\030\001 \003(\0132\037.gameStudio."
  "BGameStudioInstance\022\016\n\006status\030\002 \001(\005B\tZ\002."
  "/\252\002\002Pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gameStudio_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gameStudio_2eproto_sccs[3] = {
  &scc_info_BGameStudioInstance_gameStudio_2eproto.base,
  &scc_info_CGameStudioInstanceList_gameStudio_2eproto.base,
  &scc_info_SGameStudioInstanceList_gameStudio_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gameStudio_2eproto_once;
static bool descriptor_table_gameStudio_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameStudio_2eproto = {
  &descriptor_table_gameStudio_2eproto_initialized, descriptor_table_protodef_gameStudio_2eproto, "gameStudio.proto", 294,
  &descriptor_table_gameStudio_2eproto_once, descriptor_table_gameStudio_2eproto_sccs, descriptor_table_gameStudio_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_gameStudio_2eproto::offsets,
  file_level_metadata_gameStudio_2eproto, 3, file_level_enum_descriptors_gameStudio_2eproto, file_level_service_descriptors_gameStudio_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gameStudio_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gameStudio_2eproto), true);
namespace gameStudio {

// ===================================================================

void BGameStudioInstance::InitAsDefaultInstance() {
}
class BGameStudioInstance::_Internal {
 public:
};

BGameStudioInstance::BGameStudioInstance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameStudio.BGameStudioInstance)
}
BGameStudioInstance::BGameStudioInstance(const BGameStudioInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameconfig().empty()) {
    gameconfig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameconfig_);
  }
  ::memcpy(&usernum_, &from.usernum_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfree_) -
    reinterpret_cast<char*>(&usernum_)) + sizeof(isfree_));
  // @@protoc_insertion_point(copy_constructor:gameStudio.BGameStudioInstance)
}

void BGameStudioInstance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BGameStudioInstance_gameStudio_2eproto.base);
  gameconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&usernum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfree_) -
      reinterpret_cast<char*>(&usernum_)) + sizeof(isfree_));
}

BGameStudioInstance::~BGameStudioInstance() {
  // @@protoc_insertion_point(destructor:gameStudio.BGameStudioInstance)
  SharedDtor();
}

void BGameStudioInstance::SharedDtor() {
  gameconfig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BGameStudioInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BGameStudioInstance& BGameStudioInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BGameStudioInstance_gameStudio_2eproto.base);
  return *internal_default_instance();
}


void BGameStudioInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:gameStudio.BGameStudioInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameconfig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&usernum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfree_) -
      reinterpret_cast<char*>(&usernum_)) + sizeof(isfree_));
  _internal_metadata_.Clear();
}

const char* BGameStudioInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gameConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gameconfig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameStudio.BGameStudioInstance.gameConfig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 userNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          usernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxUserNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxusernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFree = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isfree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGameStudioInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameStudio.BGameStudioInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameConfig = 1;
  if (this->gameconfig().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameconfig().data(), static_cast<int>(this->_internal_gameconfig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameStudio.BGameStudioInstance.gameConfig");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameconfig(), target);
  }

  // int32 userNum = 2;
  if (this->usernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_usernum(), target);
  }

  // int32 maxUserNum = 3;
  if (this->maxusernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_maxusernum(), target);
  }

  // bool isFree = 4;
  if (this->isfree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isfree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameStudio.BGameStudioInstance)
  return target;
}

size_t BGameStudioInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameStudio.BGameStudioInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameConfig = 1;
  if (this->gameconfig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameconfig());
  }

  // int32 userNum = 2;
  if (this->usernum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usernum());
  }

  // int32 maxUserNum = 3;
  if (this->maxusernum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxusernum());
  }

  // bool isFree = 4;
  if (this->isfree() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BGameStudioInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameStudio.BGameStudioInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const BGameStudioInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BGameStudioInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameStudio.BGameStudioInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameStudio.BGameStudioInstance)
    MergeFrom(*source);
  }
}

void BGameStudioInstance::MergeFrom(const BGameStudioInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameStudio.BGameStudioInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameconfig().size() > 0) {

    gameconfig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameconfig_);
  }
  if (from.usernum() != 0) {
    _internal_set_usernum(from._internal_usernum());
  }
  if (from.maxusernum() != 0) {
    _internal_set_maxusernum(from._internal_maxusernum());
  }
  if (from.isfree() != 0) {
    _internal_set_isfree(from._internal_isfree());
  }
}

void BGameStudioInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameStudio.BGameStudioInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BGameStudioInstance::CopyFrom(const BGameStudioInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameStudio.BGameStudioInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGameStudioInstance::IsInitialized() const {
  return true;
}

void BGameStudioInstance::InternalSwap(BGameStudioInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameconfig_.Swap(&other->gameconfig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(usernum_, other->usernum_);
  swap(maxusernum_, other->maxusernum_);
  swap(isfree_, other->isfree_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BGameStudioInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGameStudioInstanceList::InitAsDefaultInstance() {
}
class CGameStudioInstanceList::_Internal {
 public:
};

CGameStudioInstanceList::CGameStudioInstanceList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameStudio.CGameStudioInstanceList)
}
CGameStudioInstanceList::CGameStudioInstanceList(const CGameStudioInstanceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:gameStudio.CGameStudioInstanceList)
}

void CGameStudioInstanceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CGameStudioInstanceList_gameStudio_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

CGameStudioInstanceList::~CGameStudioInstanceList() {
  // @@protoc_insertion_point(destructor:gameStudio.CGameStudioInstanceList)
  SharedDtor();
}

void CGameStudioInstanceList::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameStudioInstanceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameStudioInstanceList& CGameStudioInstanceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGameStudioInstanceList_gameStudio_2eproto.base);
  return *internal_default_instance();
}


void CGameStudioInstanceList::Clear() {
// @@protoc_insertion_point(message_clear_start:gameStudio.CGameStudioInstanceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  _internal_metadata_.Clear();
}

const char* CGameStudioInstanceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameStudio.CGameStudioInstanceList.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameStudioInstanceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameStudio.CGameStudioInstanceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameStudio.CGameStudioInstanceList.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameStudio.CGameStudioInstanceList)
  return target;
}

size_t CGameStudioInstanceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameStudio.CGameStudioInstanceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameStudioInstanceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameStudio.CGameStudioInstanceList)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameStudioInstanceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameStudioInstanceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameStudio.CGameStudioInstanceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameStudio.CGameStudioInstanceList)
    MergeFrom(*source);
  }
}

void CGameStudioInstanceList::MergeFrom(const CGameStudioInstanceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameStudio.CGameStudioInstanceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void CGameStudioInstanceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameStudio.CGameStudioInstanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameStudioInstanceList::CopyFrom(const CGameStudioInstanceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameStudio.CGameStudioInstanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameStudioInstanceList::IsInitialized() const {
  return true;
}

void CGameStudioInstanceList::InternalSwap(CGameStudioInstanceList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameStudioInstanceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameStudioInstanceList::InitAsDefaultInstance() {
}
class SGameStudioInstanceList::_Internal {
 public:
};

SGameStudioInstanceList::SGameStudioInstanceList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameStudio.SGameStudioInstanceList)
}
SGameStudioInstanceList::SGameStudioInstanceList(const SGameStudioInstanceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lists_(from.lists_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:gameStudio.SGameStudioInstanceList)
}

void SGameStudioInstanceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGameStudioInstanceList_gameStudio_2eproto.base);
  status_ = 0;
}

SGameStudioInstanceList::~SGameStudioInstanceList() {
  // @@protoc_insertion_point(destructor:gameStudio.SGameStudioInstanceList)
  SharedDtor();
}

void SGameStudioInstanceList::SharedDtor() {
}

void SGameStudioInstanceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameStudioInstanceList& SGameStudioInstanceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameStudioInstanceList_gameStudio_2eproto.base);
  return *internal_default_instance();
}


void SGameStudioInstanceList::Clear() {
// @@protoc_insertion_point(message_clear_start:gameStudio.SGameStudioInstanceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lists_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SGameStudioInstanceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gameStudio.BGameStudioInstance lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameStudioInstanceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameStudio.SGameStudioInstanceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gameStudio.BGameStudioInstance lists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lists(i), target, stream);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameStudio.SGameStudioInstanceList)
  return target;
}

size_t SGameStudioInstanceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameStudio.SGameStudioInstanceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gameStudio.BGameStudioInstance lists = 1;
  total_size += 1UL * this->_internal_lists_size();
  for (const auto& msg : this->lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameStudioInstanceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameStudio.SGameStudioInstanceList)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameStudioInstanceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameStudioInstanceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameStudio.SGameStudioInstanceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameStudio.SGameStudioInstanceList)
    MergeFrom(*source);
  }
}

void SGameStudioInstanceList::MergeFrom(const SGameStudioInstanceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameStudio.SGameStudioInstanceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lists_.MergeFrom(from.lists_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SGameStudioInstanceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameStudio.SGameStudioInstanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameStudioInstanceList::CopyFrom(const SGameStudioInstanceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameStudio.SGameStudioInstanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameStudioInstanceList::IsInitialized() const {
  return true;
}

void SGameStudioInstanceList::InternalSwap(SGameStudioInstanceList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lists_.InternalSwap(&other->lists_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameStudioInstanceList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gameStudio
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gameStudio::BGameStudioInstance* Arena::CreateMaybeMessage< ::gameStudio::BGameStudioInstance >(Arena* arena) {
  return Arena::CreateInternal< ::gameStudio::BGameStudioInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::gameStudio::CGameStudioInstanceList* Arena::CreateMaybeMessage< ::gameStudio::CGameStudioInstanceList >(Arena* arena) {
  return Arena::CreateInternal< ::gameStudio::CGameStudioInstanceList >(arena);
}
template<> PROTOBUF_NOINLINE ::gameStudio::SGameStudioInstanceList* Arena::CreateMaybeMessage< ::gameStudio::SGameStudioInstanceList >(Arena* arena) {
  return Arena::CreateInternal< ::gameStudio::SGameStudioInstanceList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
