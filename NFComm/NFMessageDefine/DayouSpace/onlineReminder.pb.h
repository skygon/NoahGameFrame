// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onlineReminder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onlineReminder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onlineReminder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onlineReminder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onlineReminder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onlineReminder_2eproto;
namespace reminder {
class COnlineReminder;
class COnlineReminderDefaultTypeInternal;
extern COnlineReminderDefaultTypeInternal _COnlineReminder_default_instance_;
class CReminderInfo;
class CReminderInfoDefaultTypeInternal;
extern CReminderInfoDefaultTypeInternal _CReminderInfo_default_instance_;
class SOnlineReminder;
class SOnlineReminderDefaultTypeInternal;
extern SOnlineReminderDefaultTypeInternal _SOnlineReminder_default_instance_;
class SReminderInfo;
class SReminderInfoDefaultTypeInternal;
extern SReminderInfoDefaultTypeInternal _SReminderInfo_default_instance_;
}  // namespace reminder
PROTOBUF_NAMESPACE_OPEN
template<> ::reminder::COnlineReminder* Arena::CreateMaybeMessage<::reminder::COnlineReminder>(Arena*);
template<> ::reminder::CReminderInfo* Arena::CreateMaybeMessage<::reminder::CReminderInfo>(Arena*);
template<> ::reminder::SOnlineReminder* Arena::CreateMaybeMessage<::reminder::SOnlineReminder>(Arena*);
template<> ::reminder::SReminderInfo* Arena::CreateMaybeMessage<::reminder::SReminderInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reminder {

// ===================================================================

class COnlineReminder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reminder.COnlineReminder) */ {
 public:
  COnlineReminder();
  virtual ~COnlineReminder();

  COnlineReminder(const COnlineReminder& from);
  COnlineReminder(COnlineReminder&& from) noexcept
    : COnlineReminder() {
    *this = ::std::move(from);
  }

  inline COnlineReminder& operator=(const COnlineReminder& from) {
    CopyFrom(from);
    return *this;
  }
  inline COnlineReminder& operator=(COnlineReminder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const COnlineReminder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const COnlineReminder* internal_default_instance() {
    return reinterpret_cast<const COnlineReminder*>(
               &_COnlineReminder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(COnlineReminder& a, COnlineReminder& b) {
    a.Swap(&b);
  }
  inline void Swap(COnlineReminder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline COnlineReminder* New() const final {
    return CreateMaybeMessage<COnlineReminder>(nullptr);
  }

  COnlineReminder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<COnlineReminder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const COnlineReminder& from);
  void MergeFrom(const COnlineReminder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COnlineReminder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reminder.COnlineReminder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onlineReminder_2eproto);
    return ::descriptor_table_onlineReminder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFUidFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // int32 fUid = 1;
  void clear_fuid();
  ::PROTOBUF_NAMESPACE_ID::int32 fuid() const;
  void set_fuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fuid() const;
  void _internal_set_fuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reminder.COnlineReminder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 fuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onlineReminder_2eproto;
};
// -------------------------------------------------------------------

class SOnlineReminder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reminder.SOnlineReminder) */ {
 public:
  SOnlineReminder();
  virtual ~SOnlineReminder();

  SOnlineReminder(const SOnlineReminder& from);
  SOnlineReminder(SOnlineReminder&& from) noexcept
    : SOnlineReminder() {
    *this = ::std::move(from);
  }

  inline SOnlineReminder& operator=(const SOnlineReminder& from) {
    CopyFrom(from);
    return *this;
  }
  inline SOnlineReminder& operator=(SOnlineReminder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SOnlineReminder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SOnlineReminder* internal_default_instance() {
    return reinterpret_cast<const SOnlineReminder*>(
               &_SOnlineReminder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SOnlineReminder& a, SOnlineReminder& b) {
    a.Swap(&b);
  }
  inline void Swap(SOnlineReminder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SOnlineReminder* New() const final {
    return CreateMaybeMessage<SOnlineReminder>(nullptr);
  }

  SOnlineReminder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SOnlineReminder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SOnlineReminder& from);
  void MergeFrom(const SOnlineReminder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SOnlineReminder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reminder.SOnlineReminder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onlineReminder_2eproto);
    return ::descriptor_table_onlineReminder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reminder.SOnlineReminder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onlineReminder_2eproto;
};
// -------------------------------------------------------------------

class CReminderInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reminder.CReminderInfo) */ {
 public:
  CReminderInfo();
  virtual ~CReminderInfo();

  CReminderInfo(const CReminderInfo& from);
  CReminderInfo(CReminderInfo&& from) noexcept
    : CReminderInfo() {
    *this = ::std::move(from);
  }

  inline CReminderInfo& operator=(const CReminderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CReminderInfo& operator=(CReminderInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CReminderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CReminderInfo* internal_default_instance() {
    return reinterpret_cast<const CReminderInfo*>(
               &_CReminderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CReminderInfo& a, CReminderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CReminderInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CReminderInfo* New() const final {
    return CreateMaybeMessage<CReminderInfo>(nullptr);
  }

  CReminderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CReminderInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CReminderInfo& from);
  void MergeFrom(const CReminderInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CReminderInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reminder.CReminderInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onlineReminder_2eproto);
    return ::descriptor_table_onlineReminder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFUidFieldNumber = 1,
  };
  // int32 fUid = 1;
  void clear_fuid();
  ::PROTOBUF_NAMESPACE_ID::int32 fuid() const;
  void set_fuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fuid() const;
  void _internal_set_fuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reminder.CReminderInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 fuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onlineReminder_2eproto;
};
// -------------------------------------------------------------------

class SReminderInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reminder.SReminderInfo) */ {
 public:
  SReminderInfo();
  virtual ~SReminderInfo();

  SReminderInfo(const SReminderInfo& from);
  SReminderInfo(SReminderInfo&& from) noexcept
    : SReminderInfo() {
    *this = ::std::move(from);
  }

  inline SReminderInfo& operator=(const SReminderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SReminderInfo& operator=(SReminderInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SReminderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SReminderInfo* internal_default_instance() {
    return reinterpret_cast<const SReminderInfo*>(
               &_SReminderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SReminderInfo& a, SReminderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SReminderInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SReminderInfo* New() const final {
    return CreateMaybeMessage<SReminderInfo>(nullptr);
  }

  SReminderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SReminderInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SReminderInfo& from);
  void MergeFrom(const SReminderInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SReminderInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reminder.SReminderInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onlineReminder_2eproto);
    return ::descriptor_table_onlineReminder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reminder.SReminderInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onlineReminder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// COnlineReminder

// int32 fUid = 1;
inline void COnlineReminder::clear_fuid() {
  fuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COnlineReminder::_internal_fuid() const {
  return fuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COnlineReminder::fuid() const {
  // @@protoc_insertion_point(field_get:reminder.COnlineReminder.fUid)
  return _internal_fuid();
}
inline void COnlineReminder::_internal_set_fuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fuid_ = value;
}
inline void COnlineReminder::set_fuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fuid(value);
  // @@protoc_insertion_point(field_set:reminder.COnlineReminder.fUid)
}

// int32 status = 2;
inline void COnlineReminder::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COnlineReminder::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COnlineReminder::status() const {
  // @@protoc_insertion_point(field_get:reminder.COnlineReminder.status)
  return _internal_status();
}
inline void COnlineReminder::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void COnlineReminder::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:reminder.COnlineReminder.status)
}

// -------------------------------------------------------------------

// SOnlineReminder

// int32 code = 1;
inline void SOnlineReminder::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SOnlineReminder::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SOnlineReminder::code() const {
  // @@protoc_insertion_point(field_get:reminder.SOnlineReminder.code)
  return _internal_code();
}
inline void SOnlineReminder::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SOnlineReminder::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:reminder.SOnlineReminder.code)
}

// -------------------------------------------------------------------

// CReminderInfo

// int32 fUid = 1;
inline void CReminderInfo::clear_fuid() {
  fuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CReminderInfo::_internal_fuid() const {
  return fuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CReminderInfo::fuid() const {
  // @@protoc_insertion_point(field_get:reminder.CReminderInfo.fUid)
  return _internal_fuid();
}
inline void CReminderInfo::_internal_set_fuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fuid_ = value;
}
inline void CReminderInfo::set_fuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fuid(value);
  // @@protoc_insertion_point(field_set:reminder.CReminderInfo.fUid)
}

// -------------------------------------------------------------------

// SReminderInfo

// int32 code = 1;
inline void SReminderInfo::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SReminderInfo::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SReminderInfo::code() const {
  // @@protoc_insertion_point(field_get:reminder.SReminderInfo.code)
  return _internal_code();
}
inline void SReminderInfo::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SReminderInfo::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:reminder.SReminderInfo.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reminder

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onlineReminder_2eproto
