// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concertRank.proto

#include "concertRank.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_concertRank_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rank_concertRank_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_concertRank_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelfRank_concertRank_2eproto;
namespace concert {
class CTopRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTopRank> _instance;
} _CTopRank_default_instance_;
class STopRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STopRank> _instance;
} _STopRank_default_instance_;
class RankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rank> _instance;
} _Rank_default_instance_;
class SelfRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelfRank> _instance;
} _SelfRank_default_instance_;
}  // namespace concert
static void InitDefaultsscc_info_CTopRank_concertRank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_CTopRank_default_instance_;
    new (ptr) ::concert::CTopRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::CTopRank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTopRank_concertRank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CTopRank_concertRank_2eproto}, {}};

static void InitDefaultsscc_info_Rank_concertRank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_Rank_default_instance_;
    new (ptr) ::concert::Rank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::Rank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rank_concertRank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rank_concertRank_2eproto}, {}};

static void InitDefaultsscc_info_STopRank_concertRank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_STopRank_default_instance_;
    new (ptr) ::concert::STopRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::STopRank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_STopRank_concertRank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_STopRank_concertRank_2eproto}, {
      &scc_info_Rank_concertRank_2eproto.base,
      &scc_info_SelfRank_concertRank_2eproto.base,}};

static void InitDefaultsscc_info_SelfRank_concertRank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SelfRank_default_instance_;
    new (ptr) ::concert::SelfRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SelfRank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelfRank_concertRank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelfRank_concertRank_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_concertRank_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_concertRank_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_concertRank_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_concertRank_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::CTopRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::STopRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::STopRank, likelist_),
  PROTOBUF_FIELD_OFFSET(::concert::STopRank, moneylist_),
  PROTOBUF_FIELD_OFFSET(::concert::STopRank, self_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::Rank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::Rank, rank_),
  PROTOBUF_FIELD_OFFSET(::concert::Rank, icon_),
  PROTOBUF_FIELD_OFFSET(::concert::Rank, name_),
  PROTOBUF_FIELD_OFFSET(::concert::Rank, amount_),
  PROTOBUF_FIELD_OFFSET(::concert::Rank, mesh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SelfRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::SelfRank, likerank_),
  PROTOBUF_FIELD_OFFSET(::concert::SelfRank, moneyrank_),
  PROTOBUF_FIELD_OFFSET(::concert::SelfRank, icon_),
  PROTOBUF_FIELD_OFFSET(::concert::SelfRank, name_),
  PROTOBUF_FIELD_OFFSET(::concert::SelfRank, likeamount_),
  PROTOBUF_FIELD_OFFSET(::concert::SelfRank, moneyamount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::concert::CTopRank)},
  { 5, -1, sizeof(::concert::STopRank)},
  { 13, -1, sizeof(::concert::Rank)},
  { 23, -1, sizeof(::concert::SelfRank)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_CTopRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_STopRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_Rank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SelfRank_default_instance_),
};

const char descriptor_table_protodef_concertRank_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021concertRank.proto\022\007concert\"\n\n\010CTopRank"
  "\"n\n\010STopRank\022\037\n\010likeList\030\001 \003(\0132\r.concert"
  ".Rank\022 \n\tmoneyList\030\002 \003(\0132\r.concert.Rank\022"
  "\037\n\004self\030\003 \001(\0132\021.concert.SelfRank\"N\n\004Rank"
  "\022\014\n\004rank\030\001 \001(\005\022\014\n\004icon\030\002 \001(\t\022\014\n\004name\030\003 \001"
  "(\t\022\016\n\006amount\030\004 \001(\005\022\014\n\004mesh\030\005 \001(\t\"t\n\010Self"
  "Rank\022\020\n\010likeRank\030\001 \001(\005\022\021\n\tmoneyRank\030\002 \001("
  "\005\022\014\n\004icon\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\022\n\nlikeAmo"
  "unt\030\005 \001(\005\022\023\n\013moneyAmount\030\006 \001(\005B\'\n\030com.da"
  "you.space.protobufB\013ConcertRankb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_concertRank_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_concertRank_2eproto_sccs[4] = {
  &scc_info_CTopRank_concertRank_2eproto.base,
  &scc_info_Rank_concertRank_2eproto.base,
  &scc_info_STopRank_concertRank_2eproto.base,
  &scc_info_SelfRank_concertRank_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_concertRank_2eproto_once;
static bool descriptor_table_concertRank_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_concertRank_2eproto = {
  &descriptor_table_concertRank_2eproto_initialized, descriptor_table_protodef_concertRank_2eproto, "concertRank.proto", 399,
  &descriptor_table_concertRank_2eproto_once, descriptor_table_concertRank_2eproto_sccs, descriptor_table_concertRank_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_concertRank_2eproto::offsets,
  file_level_metadata_concertRank_2eproto, 4, file_level_enum_descriptors_concertRank_2eproto, file_level_service_descriptors_concertRank_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_concertRank_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_concertRank_2eproto), true);
namespace concert {

// ===================================================================

void CTopRank::InitAsDefaultInstance() {
}
class CTopRank::_Internal {
 public:
};

CTopRank::CTopRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.CTopRank)
}
CTopRank::CTopRank(const CTopRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.CTopRank)
}

void CTopRank::SharedCtor() {
}

CTopRank::~CTopRank() {
  // @@protoc_insertion_point(destructor:concert.CTopRank)
  SharedDtor();
}

void CTopRank::SharedDtor() {
}

void CTopRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTopRank& CTopRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTopRank_concertRank_2eproto.base);
  return *internal_default_instance();
}


void CTopRank::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.CTopRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CTopRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTopRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.CTopRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.CTopRank)
  return target;
}

size_t CTopRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.CTopRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTopRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.CTopRank)
  GOOGLE_DCHECK_NE(&from, this);
  const CTopRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTopRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.CTopRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.CTopRank)
    MergeFrom(*source);
  }
}

void CTopRank::MergeFrom(const CTopRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.CTopRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTopRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.CTopRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTopRank::CopyFrom(const CTopRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.CTopRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTopRank::IsInitialized() const {
  return true;
}

void CTopRank::InternalSwap(CTopRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTopRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STopRank::InitAsDefaultInstance() {
  ::concert::_STopRank_default_instance_._instance.get_mutable()->self_ = const_cast< ::concert::SelfRank*>(
      ::concert::SelfRank::internal_default_instance());
}
class STopRank::_Internal {
 public:
  static const ::concert::SelfRank& self(const STopRank* msg);
};

const ::concert::SelfRank&
STopRank::_Internal::self(const STopRank* msg) {
  return *msg->self_;
}
STopRank::STopRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.STopRank)
}
STopRank::STopRank(const STopRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      likelist_(from.likelist_),
      moneylist_(from.moneylist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_self()) {
    self_ = new ::concert::SelfRank(*from.self_);
  } else {
    self_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:concert.STopRank)
}

void STopRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_STopRank_concertRank_2eproto.base);
  self_ = nullptr;
}

STopRank::~STopRank() {
  // @@protoc_insertion_point(destructor:concert.STopRank)
  SharedDtor();
}

void STopRank::SharedDtor() {
  if (this != internal_default_instance()) delete self_;
}

void STopRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STopRank& STopRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STopRank_concertRank_2eproto.base);
  return *internal_default_instance();
}


void STopRank::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.STopRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  likelist_.Clear();
  moneylist_.Clear();
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  _internal_metadata_.Clear();
}

const char* STopRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .concert.Rank likeList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_likelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .concert.Rank moneyList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_moneylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .concert.SelfRank self = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STopRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.STopRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .concert.Rank likeList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_likelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_likelist(i), target, stream);
  }

  // repeated .concert.Rank moneyList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_moneylist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_moneylist(i), target, stream);
  }

  // .concert.SelfRank self = 3;
  if (this->has_self()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::self(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.STopRank)
  return target;
}

size_t STopRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.STopRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .concert.Rank likeList = 1;
  total_size += 1UL * this->_internal_likelist_size();
  for (const auto& msg : this->likelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .concert.Rank moneyList = 2;
  total_size += 1UL * this->_internal_moneylist_size();
  for (const auto& msg : this->moneylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .concert.SelfRank self = 3;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STopRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.STopRank)
  GOOGLE_DCHECK_NE(&from, this);
  const STopRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STopRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.STopRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.STopRank)
    MergeFrom(*source);
  }
}

void STopRank::MergeFrom(const STopRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.STopRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  likelist_.MergeFrom(from.likelist_);
  moneylist_.MergeFrom(from.moneylist_);
  if (from.has_self()) {
    _internal_mutable_self()->::concert::SelfRank::MergeFrom(from._internal_self());
  }
}

void STopRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.STopRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STopRank::CopyFrom(const STopRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.STopRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STopRank::IsInitialized() const {
  return true;
}

void STopRank::InternalSwap(STopRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  likelist_.InternalSwap(&other->likelist_);
  moneylist_.InternalSwap(&other->moneylist_);
  swap(self_, other->self_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STopRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rank::InitAsDefaultInstance() {
}
class Rank::_Internal {
 public:
};

Rank::Rank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.Rank)
}
Rank::Rank(const Rank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  mesh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mesh().empty()) {
    mesh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mesh_);
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:concert.Rank)
}

void Rank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rank_concertRank_2eproto.base);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mesh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(amount_));
}

Rank::~Rank() {
  // @@protoc_insertion_point(destructor:concert.Rank)
  SharedDtor();
}

void Rank::SharedDtor() {
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mesh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Rank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rank& Rank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rank_concertRank_2eproto.base);
  return *internal_default_instance();
}


void Rank::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.Rank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mesh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(amount_));
  _internal_metadata_.Clear();
}

const char* Rank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "concert.Rank.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "concert.Rank.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mesh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mesh();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "concert.Rank.mesh"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.Rank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // string icon = 2;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "concert.Rank.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "concert.Rank.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 amount = 4;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_amount(), target);
  }

  // string mesh = 5;
  if (this->mesh().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mesh().data(), static_cast<int>(this->_internal_mesh().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "concert.Rank.mesh");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mesh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.Rank)
  return target;
}

size_t Rank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.Rank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string icon = 2;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mesh = 5;
  if (this->mesh().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mesh());
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // int32 amount = 4;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.Rank)
  GOOGLE_DCHECK_NE(&from, this);
  const Rank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.Rank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.Rank)
    MergeFrom(*source);
  }
}

void Rank::MergeFrom(const Rank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.Rank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.mesh().size() > 0) {

    mesh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mesh_);
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void Rank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.Rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank::CopyFrom(const Rank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.Rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank::IsInitialized() const {
  return true;
}

void Rank::InternalSwap(Rank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mesh_.Swap(&other->mesh_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rank_, other->rank_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelfRank::InitAsDefaultInstance() {
}
class SelfRank::_Internal {
 public:
};

SelfRank::SelfRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SelfRank)
}
SelfRank::SelfRank(const SelfRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&likerank_, &from.likerank_,
    static_cast<size_t>(reinterpret_cast<char*>(&moneyamount_) -
    reinterpret_cast<char*>(&likerank_)) + sizeof(moneyamount_));
  // @@protoc_insertion_point(copy_constructor:concert.SelfRank)
}

void SelfRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelfRank_concertRank_2eproto.base);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&likerank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moneyamount_) -
      reinterpret_cast<char*>(&likerank_)) + sizeof(moneyamount_));
}

SelfRank::~SelfRank() {
  // @@protoc_insertion_point(destructor:concert.SelfRank)
  SharedDtor();
}

void SelfRank::SharedDtor() {
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelfRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelfRank& SelfRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelfRank_concertRank_2eproto.base);
  return *internal_default_instance();
}


void SelfRank::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SelfRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&likerank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moneyamount_) -
      reinterpret_cast<char*>(&likerank_)) + sizeof(moneyamount_));
  _internal_metadata_.Clear();
}

const char* SelfRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 likeRank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          likerank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 moneyRank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          moneyrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "concert.SelfRank.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "concert.SelfRank.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 likeAmount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          likeamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 moneyAmount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          moneyamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelfRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SelfRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 likeRank = 1;
  if (this->likerank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_likerank(), target);
  }

  // int32 moneyRank = 2;
  if (this->moneyrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_moneyrank(), target);
  }

  // string icon = 3;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "concert.SelfRank.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "concert.SelfRank.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int32 likeAmount = 5;
  if (this->likeamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_likeamount(), target);
  }

  // int32 moneyAmount = 6;
  if (this->moneyamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_moneyamount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SelfRank)
  return target;
}

size_t SelfRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SelfRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string icon = 3;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 likeRank = 1;
  if (this->likerank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_likerank());
  }

  // int32 moneyRank = 2;
  if (this->moneyrank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moneyrank());
  }

  // int32 likeAmount = 5;
  if (this->likeamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_likeamount());
  }

  // int32 moneyAmount = 6;
  if (this->moneyamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moneyamount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelfRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SelfRank)
  GOOGLE_DCHECK_NE(&from, this);
  const SelfRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelfRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SelfRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SelfRank)
    MergeFrom(*source);
  }
}

void SelfRank::MergeFrom(const SelfRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SelfRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.likerank() != 0) {
    _internal_set_likerank(from._internal_likerank());
  }
  if (from.moneyrank() != 0) {
    _internal_set_moneyrank(from._internal_moneyrank());
  }
  if (from.likeamount() != 0) {
    _internal_set_likeamount(from._internal_likeamount());
  }
  if (from.moneyamount() != 0) {
    _internal_set_moneyamount(from._internal_moneyamount());
  }
}

void SelfRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SelfRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfRank::CopyFrom(const SelfRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SelfRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfRank::IsInitialized() const {
  return true;
}

void SelfRank::InternalSwap(SelfRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(likerank_, other->likerank_);
  swap(moneyrank_, other->moneyrank_);
  swap(likeamount_, other->likeamount_);
  swap(moneyamount_, other->moneyamount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelfRank::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace concert
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::concert::CTopRank* Arena::CreateMaybeMessage< ::concert::CTopRank >(Arena* arena) {
  return Arena::CreateInternal< ::concert::CTopRank >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::STopRank* Arena::CreateMaybeMessage< ::concert::STopRank >(Arena* arena) {
  return Arena::CreateInternal< ::concert::STopRank >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::Rank* Arena::CreateMaybeMessage< ::concert::Rank >(Arena* arena) {
  return Arena::CreateInternal< ::concert::Rank >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SelfRank* Arena::CreateMaybeMessage< ::concert::SelfRank >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SelfRank >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
