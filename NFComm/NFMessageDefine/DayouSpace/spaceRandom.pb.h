// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceRandom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceRandom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceRandom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceRandom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceRandom_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceRandom_2eproto;
namespace spaceRandom {
class CSpaceRandom;
class CSpaceRandomDefaultTypeInternal;
extern CSpaceRandomDefaultTypeInternal _CSpaceRandom_default_instance_;
class SSpaceRandom;
class SSpaceRandomDefaultTypeInternal;
extern SSpaceRandomDefaultTypeInternal _SSpaceRandom_default_instance_;
}  // namespace spaceRandom
PROTOBUF_NAMESPACE_OPEN
template<> ::spaceRandom::CSpaceRandom* Arena::CreateMaybeMessage<::spaceRandom::CSpaceRandom>(Arena*);
template<> ::spaceRandom::SSpaceRandom* Arena::CreateMaybeMessage<::spaceRandom::SSpaceRandom>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spaceRandom {

// ===================================================================

class CSpaceRandom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceRandom.CSpaceRandom) */ {
 public:
  CSpaceRandom();
  virtual ~CSpaceRandom();

  CSpaceRandom(const CSpaceRandom& from);
  CSpaceRandom(CSpaceRandom&& from) noexcept
    : CSpaceRandom() {
    *this = ::std::move(from);
  }

  inline CSpaceRandom& operator=(const CSpaceRandom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceRandom& operator=(CSpaceRandom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceRandom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceRandom* internal_default_instance() {
    return reinterpret_cast<const CSpaceRandom*>(
               &_CSpaceRandom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSpaceRandom& a, CSpaceRandom& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceRandom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceRandom* New() const final {
    return CreateMaybeMessage<CSpaceRandom>(nullptr);
  }

  CSpaceRandom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceRandom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceRandom& from);
  void MergeFrom(const CSpaceRandom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceRandom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceRandom.CSpaceRandom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceRandom_2eproto);
    return ::descriptor_table_spaceRandom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:spaceRandom.CSpaceRandom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceRandom_2eproto;
};
// -------------------------------------------------------------------

class SSpaceRandom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceRandom.SSpaceRandom) */ {
 public:
  SSpaceRandom();
  virtual ~SSpaceRandom();

  SSpaceRandom(const SSpaceRandom& from);
  SSpaceRandom(SSpaceRandom&& from) noexcept
    : SSpaceRandom() {
    *this = ::std::move(from);
  }

  inline SSpaceRandom& operator=(const SSpaceRandom& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceRandom& operator=(SSpaceRandom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceRandom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceRandom* internal_default_instance() {
    return reinterpret_cast<const SSpaceRandom*>(
               &_SSpaceRandom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSpaceRandom& a, SSpaceRandom& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceRandom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceRandom* New() const final {
    return CreateMaybeMessage<SSpaceRandom>(nullptr);
  }

  SSpaceRandom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceRandom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceRandom& from);
  void MergeFrom(const SSpaceRandom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceRandom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceRandom.SSpaceRandom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceRandom_2eproto);
    return ::descriptor_table_spaceRandom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kHouseTypeFieldNumber = 2,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 2;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceRandom.SSpaceRandom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceRandom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSpaceRandom

// -------------------------------------------------------------------

// SSpaceRandom

// int32 houseId = 1;
inline void SSpaceRandom::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceRandom::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceRandom::houseid() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SSpaceRandom.houseId)
  return _internal_houseid();
}
inline void SSpaceRandom::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SSpaceRandom::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SSpaceRandom.houseId)
}

// int32 houseType = 2;
inline void SSpaceRandom::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceRandom::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceRandom::housetype() const {
  // @@protoc_insertion_point(field_get:spaceRandom.SSpaceRandom.houseType)
  return _internal_housetype();
}
inline void SSpaceRandom::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void SSpaceRandom::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:spaceRandom.SSpaceRandom.houseType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spaceRandom

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceRandom_2eproto
