// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: delSpace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_delSpace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_delSpace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_delSpace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_delSpace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_delSpace_2eproto;
namespace delSpace {
class CDelSpace;
class CDelSpaceDefaultTypeInternal;
extern CDelSpaceDefaultTypeInternal _CDelSpace_default_instance_;
class SDelSpace;
class SDelSpaceDefaultTypeInternal;
extern SDelSpaceDefaultTypeInternal _SDelSpace_default_instance_;
}  // namespace delSpace
PROTOBUF_NAMESPACE_OPEN
template<> ::delSpace::CDelSpace* Arena::CreateMaybeMessage<::delSpace::CDelSpace>(Arena*);
template<> ::delSpace::SDelSpace* Arena::CreateMaybeMessage<::delSpace::SDelSpace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace delSpace {

// ===================================================================

class CDelSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delSpace.CDelSpace) */ {
 public:
  CDelSpace();
  virtual ~CDelSpace();

  CDelSpace(const CDelSpace& from);
  CDelSpace(CDelSpace&& from) noexcept
    : CDelSpace() {
    *this = ::std::move(from);
  }

  inline CDelSpace& operator=(const CDelSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDelSpace& operator=(CDelSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDelSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDelSpace* internal_default_instance() {
    return reinterpret_cast<const CDelSpace*>(
               &_CDelSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CDelSpace& a, CDelSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(CDelSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDelSpace* New() const final {
    return CreateMaybeMessage<CDelSpace>(nullptr);
  }

  CDelSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDelSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDelSpace& from);
  void MergeFrom(const CDelSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDelSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delSpace.CDelSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_delSpace_2eproto);
    return ::descriptor_table_delSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceIdFieldNumber = 1,
  };
  // int32 spaceId = 1;
  void clear_spaceid();
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid() const;
  void set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spaceid() const;
  void _internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:delSpace.CDelSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_delSpace_2eproto;
};
// -------------------------------------------------------------------

class SDelSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delSpace.SDelSpace) */ {
 public:
  SDelSpace();
  virtual ~SDelSpace();

  SDelSpace(const SDelSpace& from);
  SDelSpace(SDelSpace&& from) noexcept
    : SDelSpace() {
    *this = ::std::move(from);
  }

  inline SDelSpace& operator=(const SDelSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDelSpace& operator=(SDelSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDelSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDelSpace* internal_default_instance() {
    return reinterpret_cast<const SDelSpace*>(
               &_SDelSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SDelSpace& a, SDelSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(SDelSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDelSpace* New() const final {
    return CreateMaybeMessage<SDelSpace>(nullptr);
  }

  SDelSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDelSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDelSpace& from);
  void MergeFrom(const SDelSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDelSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delSpace.SDelSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_delSpace_2eproto);
    return ::descriptor_table_delSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
    kSpaceIdFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceId = 3;
  void clear_spaceid();
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid() const;
  void set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spaceid() const;
  void _internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:delSpace.SDelSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_delSpace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDelSpace

// int32 spaceId = 1;
inline void CDelSpace::clear_spaceid() {
  spaceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDelSpace::_internal_spaceid() const {
  return spaceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDelSpace::spaceid() const {
  // @@protoc_insertion_point(field_get:delSpace.CDelSpace.spaceId)
  return _internal_spaceid();
}
inline void CDelSpace::_internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spaceid_ = value;
}
inline void CDelSpace::set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spaceid(value);
  // @@protoc_insertion_point(field_set:delSpace.CDelSpace.spaceId)
}

// -------------------------------------------------------------------

// SDelSpace

// int32 code = 1;
inline void SDelSpace::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDelSpace::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDelSpace::code() const {
  // @@protoc_insertion_point(field_get:delSpace.SDelSpace.code)
  return _internal_code();
}
inline void SDelSpace::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SDelSpace::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:delSpace.SDelSpace.code)
}

// string msg = 2;
inline void SDelSpace::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SDelSpace::msg() const {
  // @@protoc_insertion_point(field_get:delSpace.SDelSpace.msg)
  return _internal_msg();
}
inline void SDelSpace::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:delSpace.SDelSpace.msg)
}
inline std::string* SDelSpace::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:delSpace.SDelSpace.msg)
  return _internal_mutable_msg();
}
inline const std::string& SDelSpace::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SDelSpace::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SDelSpace::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:delSpace.SDelSpace.msg)
}
inline void SDelSpace::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:delSpace.SDelSpace.msg)
}
inline void SDelSpace::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:delSpace.SDelSpace.msg)
}
inline std::string* SDelSpace::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SDelSpace::release_msg() {
  // @@protoc_insertion_point(field_release:delSpace.SDelSpace.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SDelSpace::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:delSpace.SDelSpace.msg)
}

// int32 spaceId = 3;
inline void SDelSpace::clear_spaceid() {
  spaceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDelSpace::_internal_spaceid() const {
  return spaceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDelSpace::spaceid() const {
  // @@protoc_insertion_point(field_get:delSpace.SDelSpace.spaceId)
  return _internal_spaceid();
}
inline void SDelSpace::_internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spaceid_ = value;
}
inline void SDelSpace::set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spaceid(value);
  // @@protoc_insertion_point(field_set:delSpace.SDelSpace.spaceId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace delSpace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_delSpace_2eproto
