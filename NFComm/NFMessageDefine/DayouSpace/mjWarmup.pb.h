// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mjWarmup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mjWarmup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mjWarmup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "userPosition.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mjWarmup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mjWarmup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mjWarmup_2eproto;
namespace mj {
class BMjAfterimage;
class BMjAfterimageDefaultTypeInternal;
extern BMjAfterimageDefaultTypeInternal _BMjAfterimage_default_instance_;
class CMjCreateLeaveMessage;
class CMjCreateLeaveMessageDefaultTypeInternal;
extern CMjCreateLeaveMessageDefaultTypeInternal _CMjCreateLeaveMessage_default_instance_;
class CMjDeleteLeaveMessage;
class CMjDeleteLeaveMessageDefaultTypeInternal;
extern CMjDeleteLeaveMessageDefaultTypeInternal _CMjDeleteLeaveMessage_default_instance_;
class CMjLeaveMessageDetail;
class CMjLeaveMessageDetailDefaultTypeInternal;
extern CMjLeaveMessageDetailDefaultTypeInternal _CMjLeaveMessageDetail_default_instance_;
class CMjLeaveMessageList;
class CMjLeaveMessageListDefaultTypeInternal;
extern CMjLeaveMessageListDefaultTypeInternal _CMjLeaveMessageList_default_instance_;
class CMjLeaveMessageTopic;
class CMjLeaveMessageTopicDefaultTypeInternal;
extern CMjLeaveMessageTopicDefaultTypeInternal _CMjLeaveMessageTopic_default_instance_;
class CMjLikeLeaveMessage;
class CMjLikeLeaveMessageDefaultTypeInternal;
extern CMjLikeLeaveMessageDefaultTypeInternal _CMjLikeLeaveMessage_default_instance_;
class CMjOfflineAfterimage;
class CMjOfflineAfterimageDefaultTypeInternal;
extern CMjOfflineAfterimageDefaultTypeInternal _CMjOfflineAfterimage_default_instance_;
class CMjShareLeaveMessage;
class CMjShareLeaveMessageDefaultTypeInternal;
extern CMjShareLeaveMessageDefaultTypeInternal _CMjShareLeaveMessage_default_instance_;
class SMjCreateLeaveMessage;
class SMjCreateLeaveMessageDefaultTypeInternal;
extern SMjCreateLeaveMessageDefaultTypeInternal _SMjCreateLeaveMessage_default_instance_;
class SMjDeleteLeaveMessage;
class SMjDeleteLeaveMessageDefaultTypeInternal;
extern SMjDeleteLeaveMessageDefaultTypeInternal _SMjDeleteLeaveMessage_default_instance_;
class SMjLeaveMessageDetail;
class SMjLeaveMessageDetailDefaultTypeInternal;
extern SMjLeaveMessageDetailDefaultTypeInternal _SMjLeaveMessageDetail_default_instance_;
class SMjLeaveMessageList;
class SMjLeaveMessageListDefaultTypeInternal;
extern SMjLeaveMessageListDefaultTypeInternal _SMjLeaveMessageList_default_instance_;
class SMjLeaveMessageTopic;
class SMjLeaveMessageTopicDefaultTypeInternal;
extern SMjLeaveMessageTopicDefaultTypeInternal _SMjLeaveMessageTopic_default_instance_;
class SMjLikeLeaveMessage;
class SMjLikeLeaveMessageDefaultTypeInternal;
extern SMjLikeLeaveMessageDefaultTypeInternal _SMjLikeLeaveMessage_default_instance_;
class SMjOfflineAfterimage;
class SMjOfflineAfterimageDefaultTypeInternal;
extern SMjOfflineAfterimageDefaultTypeInternal _SMjOfflineAfterimage_default_instance_;
class SMjShareLeaveMessage;
class SMjShareLeaveMessageDefaultTypeInternal;
extern SMjShareLeaveMessageDefaultTypeInternal _SMjShareLeaveMessage_default_instance_;
}  // namespace mj
PROTOBUF_NAMESPACE_OPEN
template<> ::mj::BMjAfterimage* Arena::CreateMaybeMessage<::mj::BMjAfterimage>(Arena*);
template<> ::mj::CMjCreateLeaveMessage* Arena::CreateMaybeMessage<::mj::CMjCreateLeaveMessage>(Arena*);
template<> ::mj::CMjDeleteLeaveMessage* Arena::CreateMaybeMessage<::mj::CMjDeleteLeaveMessage>(Arena*);
template<> ::mj::CMjLeaveMessageDetail* Arena::CreateMaybeMessage<::mj::CMjLeaveMessageDetail>(Arena*);
template<> ::mj::CMjLeaveMessageList* Arena::CreateMaybeMessage<::mj::CMjLeaveMessageList>(Arena*);
template<> ::mj::CMjLeaveMessageTopic* Arena::CreateMaybeMessage<::mj::CMjLeaveMessageTopic>(Arena*);
template<> ::mj::CMjLikeLeaveMessage* Arena::CreateMaybeMessage<::mj::CMjLikeLeaveMessage>(Arena*);
template<> ::mj::CMjOfflineAfterimage* Arena::CreateMaybeMessage<::mj::CMjOfflineAfterimage>(Arena*);
template<> ::mj::CMjShareLeaveMessage* Arena::CreateMaybeMessage<::mj::CMjShareLeaveMessage>(Arena*);
template<> ::mj::SMjCreateLeaveMessage* Arena::CreateMaybeMessage<::mj::SMjCreateLeaveMessage>(Arena*);
template<> ::mj::SMjDeleteLeaveMessage* Arena::CreateMaybeMessage<::mj::SMjDeleteLeaveMessage>(Arena*);
template<> ::mj::SMjLeaveMessageDetail* Arena::CreateMaybeMessage<::mj::SMjLeaveMessageDetail>(Arena*);
template<> ::mj::SMjLeaveMessageList* Arena::CreateMaybeMessage<::mj::SMjLeaveMessageList>(Arena*);
template<> ::mj::SMjLeaveMessageTopic* Arena::CreateMaybeMessage<::mj::SMjLeaveMessageTopic>(Arena*);
template<> ::mj::SMjLikeLeaveMessage* Arena::CreateMaybeMessage<::mj::SMjLikeLeaveMessage>(Arena*);
template<> ::mj::SMjOfflineAfterimage* Arena::CreateMaybeMessage<::mj::SMjOfflineAfterimage>(Arena*);
template<> ::mj::SMjShareLeaveMessage* Arena::CreateMaybeMessage<::mj::SMjShareLeaveMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mj {

// ===================================================================

class CMjOfflineAfterimage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjOfflineAfterimage) */ {
 public:
  CMjOfflineAfterimage();
  virtual ~CMjOfflineAfterimage();

  CMjOfflineAfterimage(const CMjOfflineAfterimage& from);
  CMjOfflineAfterimage(CMjOfflineAfterimage&& from) noexcept
    : CMjOfflineAfterimage() {
    *this = ::std::move(from);
  }

  inline CMjOfflineAfterimage& operator=(const CMjOfflineAfterimage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjOfflineAfterimage& operator=(CMjOfflineAfterimage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjOfflineAfterimage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjOfflineAfterimage* internal_default_instance() {
    return reinterpret_cast<const CMjOfflineAfterimage*>(
               &_CMjOfflineAfterimage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMjOfflineAfterimage& a, CMjOfflineAfterimage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjOfflineAfterimage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjOfflineAfterimage* New() const final {
    return CreateMaybeMessage<CMjOfflineAfterimage>(nullptr);
  }

  CMjOfflineAfterimage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjOfflineAfterimage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjOfflineAfterimage& from);
  void MergeFrom(const CMjOfflineAfterimage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjOfflineAfterimage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjOfflineAfterimage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mj.CMjOfflineAfterimage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class BMjAfterimage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.BMjAfterimage) */ {
 public:
  BMjAfterimage();
  virtual ~BMjAfterimage();

  BMjAfterimage(const BMjAfterimage& from);
  BMjAfterimage(BMjAfterimage&& from) noexcept
    : BMjAfterimage() {
    *this = ::std::move(from);
  }

  inline BMjAfterimage& operator=(const BMjAfterimage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMjAfterimage& operator=(BMjAfterimage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMjAfterimage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMjAfterimage* internal_default_instance() {
    return reinterpret_cast<const BMjAfterimage*>(
               &_BMjAfterimage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BMjAfterimage& a, BMjAfterimage& b) {
    a.Swap(&b);
  }
  inline void Swap(BMjAfterimage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMjAfterimage* New() const final {
    return CreateMaybeMessage<BMjAfterimage>(nullptr);
  }

  BMjAfterimage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMjAfterimage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMjAfterimage& from);
  void MergeFrom(const BMjAfterimage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMjAfterimage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.BMjAfterimage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 4,
    kUserIconFieldNumber = 5,
    kIpCityFieldNumber = 6,
    kTitleFieldNumber = 8,
    kCertificationFieldNumber = 9,
    kPositionFieldNumber = 1,
    kUidFieldNumber = 2,
    kAvatarKeyFieldNumber = 3,
    kGenderFieldNumber = 7,
  };
  // string nick = 4;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string userIcon = 5;
  void clear_usericon();
  const std::string& usericon() const;
  void set_usericon(const std::string& value);
  void set_usericon(std::string&& value);
  void set_usericon(const char* value);
  void set_usericon(const char* value, size_t size);
  std::string* mutable_usericon();
  std::string* release_usericon();
  void set_allocated_usericon(std::string* usericon);
  private:
  const std::string& _internal_usericon() const;
  void _internal_set_usericon(const std::string& value);
  std::string* _internal_mutable_usericon();
  public:

  // string ipCity = 6;
  void clear_ipcity();
  const std::string& ipcity() const;
  void set_ipcity(const std::string& value);
  void set_ipcity(std::string&& value);
  void set_ipcity(const char* value);
  void set_ipcity(const char* value, size_t size);
  std::string* mutable_ipcity();
  std::string* release_ipcity();
  void set_allocated_ipcity(std::string* ipcity);
  private:
  const std::string& _internal_ipcity() const;
  void _internal_set_ipcity(const std::string& value);
  std::string* _internal_mutable_ipcity();
  public:

  // string title = 8;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string certification = 9;
  void clear_certification();
  const std::string& certification() const;
  void set_certification(const std::string& value);
  void set_certification(std::string&& value);
  void set_certification(const char* value);
  void set_certification(const char* value, size_t size);
  std::string* mutable_certification();
  std::string* release_certification();
  void set_allocated_certification(std::string* certification);
  private:
  const std::string& _internal_certification() const;
  void _internal_set_certification(const std::string& value);
  std::string* _internal_mutable_certification();
  public:

  // .userPosition.UPosition position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::userPosition::UPosition& position() const;
  ::userPosition::UPosition* release_position();
  ::userPosition::UPosition* mutable_position();
  void set_allocated_position(::userPosition::UPosition* position);
  private:
  const ::userPosition::UPosition& _internal_position() const;
  ::userPosition::UPosition* _internal_mutable_position();
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarKey = 3;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gender = 7;
  void clear_gender();
  ::PROTOBUF_NAMESPACE_ID::int32 gender() const;
  void set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gender() const;
  void _internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.BMjAfterimage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usericon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipcity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certification_;
  ::userPosition::UPosition* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class SMjOfflineAfterimage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjOfflineAfterimage) */ {
 public:
  SMjOfflineAfterimage();
  virtual ~SMjOfflineAfterimage();

  SMjOfflineAfterimage(const SMjOfflineAfterimage& from);
  SMjOfflineAfterimage(SMjOfflineAfterimage&& from) noexcept
    : SMjOfflineAfterimage() {
    *this = ::std::move(from);
  }

  inline SMjOfflineAfterimage& operator=(const SMjOfflineAfterimage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjOfflineAfterimage& operator=(SMjOfflineAfterimage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjOfflineAfterimage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjOfflineAfterimage* internal_default_instance() {
    return reinterpret_cast<const SMjOfflineAfterimage*>(
               &_SMjOfflineAfterimage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SMjOfflineAfterimage& a, SMjOfflineAfterimage& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjOfflineAfterimage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjOfflineAfterimage* New() const final {
    return CreateMaybeMessage<SMjOfflineAfterimage>(nullptr);
  }

  SMjOfflineAfterimage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjOfflineAfterimage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjOfflineAfterimage& from);
  void MergeFrom(const SMjOfflineAfterimage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjOfflineAfterimage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjOfflineAfterimage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAfterimagesFieldNumber = 1,
  };
  // repeated .mj.BMjAfterimage afterimages = 1;
  int afterimages_size() const;
  private:
  int _internal_afterimages_size() const;
  public:
  void clear_afterimages();
  ::mj::BMjAfterimage* mutable_afterimages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjAfterimage >*
      mutable_afterimages();
  private:
  const ::mj::BMjAfterimage& _internal_afterimages(int index) const;
  ::mj::BMjAfterimage* _internal_add_afterimages();
  public:
  const ::mj::BMjAfterimage& afterimages(int index) const;
  ::mj::BMjAfterimage* add_afterimages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjAfterimage >&
      afterimages() const;

  // @@protoc_insertion_point(class_scope:mj.SMjOfflineAfterimage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjAfterimage > afterimages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class CMjLeaveMessageTopic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjLeaveMessageTopic) */ {
 public:
  CMjLeaveMessageTopic();
  virtual ~CMjLeaveMessageTopic();

  CMjLeaveMessageTopic(const CMjLeaveMessageTopic& from);
  CMjLeaveMessageTopic(CMjLeaveMessageTopic&& from) noexcept
    : CMjLeaveMessageTopic() {
    *this = ::std::move(from);
  }

  inline CMjLeaveMessageTopic& operator=(const CMjLeaveMessageTopic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjLeaveMessageTopic& operator=(CMjLeaveMessageTopic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjLeaveMessageTopic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjLeaveMessageTopic* internal_default_instance() {
    return reinterpret_cast<const CMjLeaveMessageTopic*>(
               &_CMjLeaveMessageTopic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMjLeaveMessageTopic& a, CMjLeaveMessageTopic& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjLeaveMessageTopic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjLeaveMessageTopic* New() const final {
    return CreateMaybeMessage<CMjLeaveMessageTopic>(nullptr);
  }

  CMjLeaveMessageTopic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjLeaveMessageTopic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjLeaveMessageTopic& from);
  void MergeFrom(const CMjLeaveMessageTopic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjLeaveMessageTopic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjLeaveMessageTopic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mj.CMjLeaveMessageTopic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class SMjLeaveMessageTopic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjLeaveMessageTopic) */ {
 public:
  SMjLeaveMessageTopic();
  virtual ~SMjLeaveMessageTopic();

  SMjLeaveMessageTopic(const SMjLeaveMessageTopic& from);
  SMjLeaveMessageTopic(SMjLeaveMessageTopic&& from) noexcept
    : SMjLeaveMessageTopic() {
    *this = ::std::move(from);
  }

  inline SMjLeaveMessageTopic& operator=(const SMjLeaveMessageTopic& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjLeaveMessageTopic& operator=(SMjLeaveMessageTopic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjLeaveMessageTopic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjLeaveMessageTopic* internal_default_instance() {
    return reinterpret_cast<const SMjLeaveMessageTopic*>(
               &_SMjLeaveMessageTopic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SMjLeaveMessageTopic& a, SMjLeaveMessageTopic& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjLeaveMessageTopic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjLeaveMessageTopic* New() const final {
    return CreateMaybeMessage<SMjLeaveMessageTopic>(nullptr);
  }

  SMjLeaveMessageTopic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjLeaveMessageTopic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjLeaveMessageTopic& from);
  void MergeFrom(const SMjLeaveMessageTopic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjLeaveMessageTopic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjLeaveMessageTopic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjLeaveMessageTopic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class CMjCreateLeaveMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjCreateLeaveMessage) */ {
 public:
  CMjCreateLeaveMessage();
  virtual ~CMjCreateLeaveMessage();

  CMjCreateLeaveMessage(const CMjCreateLeaveMessage& from);
  CMjCreateLeaveMessage(CMjCreateLeaveMessage&& from) noexcept
    : CMjCreateLeaveMessage() {
    *this = ::std::move(from);
  }

  inline CMjCreateLeaveMessage& operator=(const CMjCreateLeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjCreateLeaveMessage& operator=(CMjCreateLeaveMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjCreateLeaveMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjCreateLeaveMessage* internal_default_instance() {
    return reinterpret_cast<const CMjCreateLeaveMessage*>(
               &_CMjCreateLeaveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMjCreateLeaveMessage& a, CMjCreateLeaveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjCreateLeaveMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjCreateLeaveMessage* New() const final {
    return CreateMaybeMessage<CMjCreateLeaveMessage>(nullptr);
  }

  CMjCreateLeaveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjCreateLeaveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjCreateLeaveMessage& from);
  void MergeFrom(const CMjCreateLeaveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjCreateLeaveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjCreateLeaveMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjCreateLeaveMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class SMjCreateLeaveMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjCreateLeaveMessage) */ {
 public:
  SMjCreateLeaveMessage();
  virtual ~SMjCreateLeaveMessage();

  SMjCreateLeaveMessage(const SMjCreateLeaveMessage& from);
  SMjCreateLeaveMessage(SMjCreateLeaveMessage&& from) noexcept
    : SMjCreateLeaveMessage() {
    *this = ::std::move(from);
  }

  inline SMjCreateLeaveMessage& operator=(const SMjCreateLeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjCreateLeaveMessage& operator=(SMjCreateLeaveMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjCreateLeaveMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjCreateLeaveMessage* internal_default_instance() {
    return reinterpret_cast<const SMjCreateLeaveMessage*>(
               &_SMjCreateLeaveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SMjCreateLeaveMessage& a, SMjCreateLeaveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjCreateLeaveMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjCreateLeaveMessage* New() const final {
    return CreateMaybeMessage<SMjCreateLeaveMessage>(nullptr);
  }

  SMjCreateLeaveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjCreateLeaveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjCreateLeaveMessage& from);
  void MergeFrom(const SMjCreateLeaveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjCreateLeaveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjCreateLeaveMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjCreateLeaveMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class CMjLikeLeaveMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjLikeLeaveMessage) */ {
 public:
  CMjLikeLeaveMessage();
  virtual ~CMjLikeLeaveMessage();

  CMjLikeLeaveMessage(const CMjLikeLeaveMessage& from);
  CMjLikeLeaveMessage(CMjLikeLeaveMessage&& from) noexcept
    : CMjLikeLeaveMessage() {
    *this = ::std::move(from);
  }

  inline CMjLikeLeaveMessage& operator=(const CMjLikeLeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjLikeLeaveMessage& operator=(CMjLikeLeaveMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjLikeLeaveMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjLikeLeaveMessage* internal_default_instance() {
    return reinterpret_cast<const CMjLikeLeaveMessage*>(
               &_CMjLikeLeaveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMjLikeLeaveMessage& a, CMjLikeLeaveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjLikeLeaveMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjLikeLeaveMessage* New() const final {
    return CreateMaybeMessage<CMjLikeLeaveMessage>(nullptr);
  }

  CMjLikeLeaveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjLikeLeaveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjLikeLeaveMessage& from);
  void MergeFrom(const CMjLikeLeaveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjLikeLeaveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjLikeLeaveMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLikeFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 like = 2;
  void clear_like();
  ::PROTOBUF_NAMESPACE_ID::int32 like() const;
  void set_like(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_like() const;
  void _internal_set_like(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjLikeLeaveMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 like_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class SMjLikeLeaveMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjLikeLeaveMessage) */ {
 public:
  SMjLikeLeaveMessage();
  virtual ~SMjLikeLeaveMessage();

  SMjLikeLeaveMessage(const SMjLikeLeaveMessage& from);
  SMjLikeLeaveMessage(SMjLikeLeaveMessage&& from) noexcept
    : SMjLikeLeaveMessage() {
    *this = ::std::move(from);
  }

  inline SMjLikeLeaveMessage& operator=(const SMjLikeLeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjLikeLeaveMessage& operator=(SMjLikeLeaveMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjLikeLeaveMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjLikeLeaveMessage* internal_default_instance() {
    return reinterpret_cast<const SMjLikeLeaveMessage*>(
               &_SMjLikeLeaveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SMjLikeLeaveMessage& a, SMjLikeLeaveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjLikeLeaveMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjLikeLeaveMessage* New() const final {
    return CreateMaybeMessage<SMjLikeLeaveMessage>(nullptr);
  }

  SMjLikeLeaveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjLikeLeaveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjLikeLeaveMessage& from);
  void MergeFrom(const SMjLikeLeaveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjLikeLeaveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjLikeLeaveMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kIdFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjLikeLeaveMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class CMjDeleteLeaveMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjDeleteLeaveMessage) */ {
 public:
  CMjDeleteLeaveMessage();
  virtual ~CMjDeleteLeaveMessage();

  CMjDeleteLeaveMessage(const CMjDeleteLeaveMessage& from);
  CMjDeleteLeaveMessage(CMjDeleteLeaveMessage&& from) noexcept
    : CMjDeleteLeaveMessage() {
    *this = ::std::move(from);
  }

  inline CMjDeleteLeaveMessage& operator=(const CMjDeleteLeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjDeleteLeaveMessage& operator=(CMjDeleteLeaveMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjDeleteLeaveMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjDeleteLeaveMessage* internal_default_instance() {
    return reinterpret_cast<const CMjDeleteLeaveMessage*>(
               &_CMjDeleteLeaveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMjDeleteLeaveMessage& a, CMjDeleteLeaveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjDeleteLeaveMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjDeleteLeaveMessage* New() const final {
    return CreateMaybeMessage<CMjDeleteLeaveMessage>(nullptr);
  }

  CMjDeleteLeaveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjDeleteLeaveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjDeleteLeaveMessage& from);
  void MergeFrom(const CMjDeleteLeaveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjDeleteLeaveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjDeleteLeaveMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjDeleteLeaveMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class SMjDeleteLeaveMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjDeleteLeaveMessage) */ {
 public:
  SMjDeleteLeaveMessage();
  virtual ~SMjDeleteLeaveMessage();

  SMjDeleteLeaveMessage(const SMjDeleteLeaveMessage& from);
  SMjDeleteLeaveMessage(SMjDeleteLeaveMessage&& from) noexcept
    : SMjDeleteLeaveMessage() {
    *this = ::std::move(from);
  }

  inline SMjDeleteLeaveMessage& operator=(const SMjDeleteLeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjDeleteLeaveMessage& operator=(SMjDeleteLeaveMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjDeleteLeaveMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjDeleteLeaveMessage* internal_default_instance() {
    return reinterpret_cast<const SMjDeleteLeaveMessage*>(
               &_SMjDeleteLeaveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SMjDeleteLeaveMessage& a, SMjDeleteLeaveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjDeleteLeaveMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjDeleteLeaveMessage* New() const final {
    return CreateMaybeMessage<SMjDeleteLeaveMessage>(nullptr);
  }

  SMjDeleteLeaveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjDeleteLeaveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjDeleteLeaveMessage& from);
  void MergeFrom(const SMjDeleteLeaveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjDeleteLeaveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjDeleteLeaveMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kIdFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjDeleteLeaveMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class CMjLeaveMessageList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjLeaveMessageList) */ {
 public:
  CMjLeaveMessageList();
  virtual ~CMjLeaveMessageList();

  CMjLeaveMessageList(const CMjLeaveMessageList& from);
  CMjLeaveMessageList(CMjLeaveMessageList&& from) noexcept
    : CMjLeaveMessageList() {
    *this = ::std::move(from);
  }

  inline CMjLeaveMessageList& operator=(const CMjLeaveMessageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjLeaveMessageList& operator=(CMjLeaveMessageList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjLeaveMessageList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjLeaveMessageList* internal_default_instance() {
    return reinterpret_cast<const CMjLeaveMessageList*>(
               &_CMjLeaveMessageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMjLeaveMessageList& a, CMjLeaveMessageList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjLeaveMessageList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjLeaveMessageList* New() const final {
    return CreateMaybeMessage<CMjLeaveMessageList>(nullptr);
  }

  CMjLeaveMessageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjLeaveMessageList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjLeaveMessageList& from);
  void MergeFrom(const CMjLeaveMessageList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjLeaveMessageList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjLeaveMessageList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjLeaveMessageList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class SMjLeaveMessageList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjLeaveMessageList) */ {
 public:
  SMjLeaveMessageList();
  virtual ~SMjLeaveMessageList();

  SMjLeaveMessageList(const SMjLeaveMessageList& from);
  SMjLeaveMessageList(SMjLeaveMessageList&& from) noexcept
    : SMjLeaveMessageList() {
    *this = ::std::move(from);
  }

  inline SMjLeaveMessageList& operator=(const SMjLeaveMessageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjLeaveMessageList& operator=(SMjLeaveMessageList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjLeaveMessageList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjLeaveMessageList* internal_default_instance() {
    return reinterpret_cast<const SMjLeaveMessageList*>(
               &_SMjLeaveMessageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SMjLeaveMessageList& a, SMjLeaveMessageList& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjLeaveMessageList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjLeaveMessageList* New() const final {
    return CreateMaybeMessage<SMjLeaveMessageList>(nullptr);
  }

  SMjLeaveMessageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjLeaveMessageList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjLeaveMessageList& from);
  void MergeFrom(const SMjLeaveMessageList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjLeaveMessageList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjLeaveMessageList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdListFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated int32 msgIdList = 1;
  int msgidlist_size() const;
  private:
  int _internal_msgidlist_size() const;
  public:
  void clear_msgidlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_msgidlist() const;
  void _internal_add_msgidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_msgidlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 msgidlist(int index) const;
  void set_msgidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_msgidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      msgidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_msgidlist();

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjLeaveMessageList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > msgidlist_;
  mutable std::atomic<int> _msgidlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class CMjLeaveMessageDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjLeaveMessageDetail) */ {
 public:
  CMjLeaveMessageDetail();
  virtual ~CMjLeaveMessageDetail();

  CMjLeaveMessageDetail(const CMjLeaveMessageDetail& from);
  CMjLeaveMessageDetail(CMjLeaveMessageDetail&& from) noexcept
    : CMjLeaveMessageDetail() {
    *this = ::std::move(from);
  }

  inline CMjLeaveMessageDetail& operator=(const CMjLeaveMessageDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjLeaveMessageDetail& operator=(CMjLeaveMessageDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjLeaveMessageDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjLeaveMessageDetail* internal_default_instance() {
    return reinterpret_cast<const CMjLeaveMessageDetail*>(
               &_CMjLeaveMessageDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMjLeaveMessageDetail& a, CMjLeaveMessageDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjLeaveMessageDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjLeaveMessageDetail* New() const final {
    return CreateMaybeMessage<CMjLeaveMessageDetail>(nullptr);
  }

  CMjLeaveMessageDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjLeaveMessageDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjLeaveMessageDetail& from);
  void MergeFrom(const CMjLeaveMessageDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjLeaveMessageDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjLeaveMessageDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjLeaveMessageDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class SMjLeaveMessageDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjLeaveMessageDetail) */ {
 public:
  SMjLeaveMessageDetail();
  virtual ~SMjLeaveMessageDetail();

  SMjLeaveMessageDetail(const SMjLeaveMessageDetail& from);
  SMjLeaveMessageDetail(SMjLeaveMessageDetail&& from) noexcept
    : SMjLeaveMessageDetail() {
    *this = ::std::move(from);
  }

  inline SMjLeaveMessageDetail& operator=(const SMjLeaveMessageDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjLeaveMessageDetail& operator=(SMjLeaveMessageDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjLeaveMessageDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjLeaveMessageDetail* internal_default_instance() {
    return reinterpret_cast<const SMjLeaveMessageDetail*>(
               &_SMjLeaveMessageDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SMjLeaveMessageDetail& a, SMjLeaveMessageDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjLeaveMessageDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjLeaveMessageDetail* New() const final {
    return CreateMaybeMessage<SMjLeaveMessageDetail>(nullptr);
  }

  SMjLeaveMessageDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjLeaveMessageDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjLeaveMessageDetail& from);
  void MergeFrom(const SMjLeaveMessageDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjLeaveMessageDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjLeaveMessageDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kReplyAudioFieldNumber = 5,
    kReplyChsFieldNumber = 6,
    kReplyEngFieldNumber = 7,
    kNickFieldNumber = 10,
    kHeadPicFieldNumber = 11,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCheckStatusFieldNumber = 4,
    kLikeNumFieldNumber = 8,
    kUidFieldNumber = 9,
    kLikeStatusFieldNumber = 12,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string replyAudio = 5;
  void clear_replyaudio();
  const std::string& replyaudio() const;
  void set_replyaudio(const std::string& value);
  void set_replyaudio(std::string&& value);
  void set_replyaudio(const char* value);
  void set_replyaudio(const char* value, size_t size);
  std::string* mutable_replyaudio();
  std::string* release_replyaudio();
  void set_allocated_replyaudio(std::string* replyaudio);
  private:
  const std::string& _internal_replyaudio() const;
  void _internal_set_replyaudio(const std::string& value);
  std::string* _internal_mutable_replyaudio();
  public:

  // string replyChs = 6;
  void clear_replychs();
  const std::string& replychs() const;
  void set_replychs(const std::string& value);
  void set_replychs(std::string&& value);
  void set_replychs(const char* value);
  void set_replychs(const char* value, size_t size);
  std::string* mutable_replychs();
  std::string* release_replychs();
  void set_allocated_replychs(std::string* replychs);
  private:
  const std::string& _internal_replychs() const;
  void _internal_set_replychs(const std::string& value);
  std::string* _internal_mutable_replychs();
  public:

  // string replyEng = 7;
  void clear_replyeng();
  const std::string& replyeng() const;
  void set_replyeng(const std::string& value);
  void set_replyeng(std::string&& value);
  void set_replyeng(const char* value);
  void set_replyeng(const char* value, size_t size);
  std::string* mutable_replyeng();
  std::string* release_replyeng();
  void set_allocated_replyeng(std::string* replyeng);
  private:
  const std::string& _internal_replyeng() const;
  void _internal_set_replyeng(const std::string& value);
  std::string* _internal_mutable_replyeng();
  public:

  // string nick = 10;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string headPic = 11;
  void clear_headpic();
  const std::string& headpic() const;
  void set_headpic(const std::string& value);
  void set_headpic(std::string&& value);
  void set_headpic(const char* value);
  void set_headpic(const char* value, size_t size);
  std::string* mutable_headpic();
  std::string* release_headpic();
  void set_allocated_headpic(std::string* headpic);
  private:
  const std::string& _internal_headpic() const;
  void _internal_set_headpic(const std::string& value);
  std::string* _internal_mutable_headpic();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 checkStatus = 4;
  void clear_checkstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 checkstatus() const;
  void set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checkstatus() const;
  void _internal_set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 likeNum = 8;
  void clear_likenum();
  ::PROTOBUF_NAMESPACE_ID::int32 likenum() const;
  void set_likenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_likenum() const;
  void _internal_set_likenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 9;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool likeStatus = 12;
  void clear_likestatus();
  bool likestatus() const;
  void set_likestatus(bool value);
  private:
  bool _internal_likestatus() const;
  void _internal_set_likestatus(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjLeaveMessageDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replyaudio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replychs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replyeng_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headpic_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 likenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  bool likestatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class CMjShareLeaveMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.CMjShareLeaveMessage) */ {
 public:
  CMjShareLeaveMessage();
  virtual ~CMjShareLeaveMessage();

  CMjShareLeaveMessage(const CMjShareLeaveMessage& from);
  CMjShareLeaveMessage(CMjShareLeaveMessage&& from) noexcept
    : CMjShareLeaveMessage() {
    *this = ::std::move(from);
  }

  inline CMjShareLeaveMessage& operator=(const CMjShareLeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMjShareLeaveMessage& operator=(CMjShareLeaveMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMjShareLeaveMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMjShareLeaveMessage* internal_default_instance() {
    return reinterpret_cast<const CMjShareLeaveMessage*>(
               &_CMjShareLeaveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMjShareLeaveMessage& a, CMjShareLeaveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMjShareLeaveMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMjShareLeaveMessage* New() const final {
    return CreateMaybeMessage<CMjShareLeaveMessage>(nullptr);
  }

  CMjShareLeaveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMjShareLeaveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMjShareLeaveMessage& from);
  void MergeFrom(const CMjShareLeaveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMjShareLeaveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.CMjShareLeaveMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.CMjShareLeaveMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// -------------------------------------------------------------------

class SMjShareLeaveMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mj.SMjShareLeaveMessage) */ {
 public:
  SMjShareLeaveMessage();
  virtual ~SMjShareLeaveMessage();

  SMjShareLeaveMessage(const SMjShareLeaveMessage& from);
  SMjShareLeaveMessage(SMjShareLeaveMessage&& from) noexcept
    : SMjShareLeaveMessage() {
    *this = ::std::move(from);
  }

  inline SMjShareLeaveMessage& operator=(const SMjShareLeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMjShareLeaveMessage& operator=(SMjShareLeaveMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMjShareLeaveMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMjShareLeaveMessage* internal_default_instance() {
    return reinterpret_cast<const SMjShareLeaveMessage*>(
               &_SMjShareLeaveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SMjShareLeaveMessage& a, SMjShareLeaveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SMjShareLeaveMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMjShareLeaveMessage* New() const final {
    return CreateMaybeMessage<SMjShareLeaveMessage>(nullptr);
  }

  SMjShareLeaveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMjShareLeaveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMjShareLeaveMessage& from);
  void MergeFrom(const SMjShareLeaveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMjShareLeaveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mj.SMjShareLeaveMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mjWarmup_2eproto);
    return ::descriptor_table_mjWarmup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kUrlFieldNumber = 2,
    kContentFieldNumber = 3,
    kSpaceNameFieldNumber = 4,
    kCoverFieldNumber = 5,
    kWechatContentFieldNumber = 6,
    kShareTimeFieldNumber = 7,
    kVisitCountFieldNumber = 8,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string spaceName = 4;
  void clear_spacename();
  const std::string& spacename() const;
  void set_spacename(const std::string& value);
  void set_spacename(std::string&& value);
  void set_spacename(const char* value);
  void set_spacename(const char* value, size_t size);
  std::string* mutable_spacename();
  std::string* release_spacename();
  void set_allocated_spacename(std::string* spacename);
  private:
  const std::string& _internal_spacename() const;
  void _internal_set_spacename(const std::string& value);
  std::string* _internal_mutable_spacename();
  public:

  // string cover = 5;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string wechatContent = 6;
  void clear_wechatcontent();
  const std::string& wechatcontent() const;
  void set_wechatcontent(const std::string& value);
  void set_wechatcontent(std::string&& value);
  void set_wechatcontent(const char* value);
  void set_wechatcontent(const char* value, size_t size);
  std::string* mutable_wechatcontent();
  std::string* release_wechatcontent();
  void set_allocated_wechatcontent(std::string* wechatcontent);
  private:
  const std::string& _internal_wechatcontent() const;
  void _internal_set_wechatcontent(const std::string& value);
  std::string* _internal_mutable_wechatcontent();
  public:

  // string shareTime = 7;
  void clear_sharetime();
  const std::string& sharetime() const;
  void set_sharetime(const std::string& value);
  void set_sharetime(std::string&& value);
  void set_sharetime(const char* value);
  void set_sharetime(const char* value, size_t size);
  std::string* mutable_sharetime();
  std::string* release_sharetime();
  void set_allocated_sharetime(std::string* sharetime);
  private:
  const std::string& _internal_sharetime() const;
  void _internal_set_sharetime(const std::string& value);
  std::string* _internal_mutable_sharetime();
  public:

  // int32 visitCount = 8;
  void clear_visitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 visitcount() const;
  void set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_visitcount() const;
  void _internal_set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mj.SMjShareLeaveMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wechatcontent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sharetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 visitcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mjWarmup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMjOfflineAfterimage

// -------------------------------------------------------------------

// BMjAfterimage

// .userPosition.UPosition position = 1;
inline bool BMjAfterimage::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BMjAfterimage::has_position() const {
  return _internal_has_position();
}
inline const ::userPosition::UPosition& BMjAfterimage::_internal_position() const {
  const ::userPosition::UPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::userPosition::UPosition*>(
      &::userPosition::_UPosition_default_instance_);
}
inline const ::userPosition::UPosition& BMjAfterimage::position() const {
  // @@protoc_insertion_point(field_get:mj.BMjAfterimage.position)
  return _internal_position();
}
inline ::userPosition::UPosition* BMjAfterimage::release_position() {
  // @@protoc_insertion_point(field_release:mj.BMjAfterimage.position)
  
  ::userPosition::UPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::userPosition::UPosition* BMjAfterimage::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::userPosition::UPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::userPosition::UPosition* BMjAfterimage::mutable_position() {
  // @@protoc_insertion_point(field_mutable:mj.BMjAfterimage.position)
  return _internal_mutable_position();
}
inline void BMjAfterimage::set_allocated_position(::userPosition::UPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mj.BMjAfterimage.position)
}

// int32 uid = 2;
inline void BMjAfterimage::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjAfterimage::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjAfterimage::uid() const {
  // @@protoc_insertion_point(field_get:mj.BMjAfterimage.uid)
  return _internal_uid();
}
inline void BMjAfterimage::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BMjAfterimage::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mj.BMjAfterimage.uid)
}

// int32 avatarKey = 3;
inline void BMjAfterimage::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjAfterimage::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjAfterimage::avatarkey() const {
  // @@protoc_insertion_point(field_get:mj.BMjAfterimage.avatarKey)
  return _internal_avatarkey();
}
inline void BMjAfterimage::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void BMjAfterimage::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:mj.BMjAfterimage.avatarKey)
}

// string nick = 4;
inline void BMjAfterimage::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMjAfterimage::nick() const {
  // @@protoc_insertion_point(field_get:mj.BMjAfterimage.nick)
  return _internal_nick();
}
inline void BMjAfterimage::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:mj.BMjAfterimage.nick)
}
inline std::string* BMjAfterimage::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:mj.BMjAfterimage.nick)
  return _internal_mutable_nick();
}
inline const std::string& BMjAfterimage::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void BMjAfterimage::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMjAfterimage::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.BMjAfterimage.nick)
}
inline void BMjAfterimage::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.BMjAfterimage.nick)
}
inline void BMjAfterimage::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.BMjAfterimage.nick)
}
inline std::string* BMjAfterimage::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMjAfterimage::release_nick() {
  // @@protoc_insertion_point(field_release:mj.BMjAfterimage.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMjAfterimage::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:mj.BMjAfterimage.nick)
}

// string userIcon = 5;
inline void BMjAfterimage::clear_usericon() {
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMjAfterimage::usericon() const {
  // @@protoc_insertion_point(field_get:mj.BMjAfterimage.userIcon)
  return _internal_usericon();
}
inline void BMjAfterimage::set_usericon(const std::string& value) {
  _internal_set_usericon(value);
  // @@protoc_insertion_point(field_set:mj.BMjAfterimage.userIcon)
}
inline std::string* BMjAfterimage::mutable_usericon() {
  // @@protoc_insertion_point(field_mutable:mj.BMjAfterimage.userIcon)
  return _internal_mutable_usericon();
}
inline const std::string& BMjAfterimage::_internal_usericon() const {
  return usericon_.GetNoArena();
}
inline void BMjAfterimage::_internal_set_usericon(const std::string& value) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMjAfterimage::set_usericon(std::string&& value) {
  
  usericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.BMjAfterimage.userIcon)
}
inline void BMjAfterimage::set_usericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.BMjAfterimage.userIcon)
}
inline void BMjAfterimage::set_usericon(const char* value, size_t size) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.BMjAfterimage.userIcon)
}
inline std::string* BMjAfterimage::_internal_mutable_usericon() {
  
  return usericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMjAfterimage::release_usericon() {
  // @@protoc_insertion_point(field_release:mj.BMjAfterimage.userIcon)
  
  return usericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMjAfterimage::set_allocated_usericon(std::string* usericon) {
  if (usericon != nullptr) {
    
  } else {
    
  }
  usericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usericon);
  // @@protoc_insertion_point(field_set_allocated:mj.BMjAfterimage.userIcon)
}

// string ipCity = 6;
inline void BMjAfterimage::clear_ipcity() {
  ipcity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMjAfterimage::ipcity() const {
  // @@protoc_insertion_point(field_get:mj.BMjAfterimage.ipCity)
  return _internal_ipcity();
}
inline void BMjAfterimage::set_ipcity(const std::string& value) {
  _internal_set_ipcity(value);
  // @@protoc_insertion_point(field_set:mj.BMjAfterimage.ipCity)
}
inline std::string* BMjAfterimage::mutable_ipcity() {
  // @@protoc_insertion_point(field_mutable:mj.BMjAfterimage.ipCity)
  return _internal_mutable_ipcity();
}
inline const std::string& BMjAfterimage::_internal_ipcity() const {
  return ipcity_.GetNoArena();
}
inline void BMjAfterimage::_internal_set_ipcity(const std::string& value) {
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMjAfterimage::set_ipcity(std::string&& value) {
  
  ipcity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.BMjAfterimage.ipCity)
}
inline void BMjAfterimage::set_ipcity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.BMjAfterimage.ipCity)
}
inline void BMjAfterimage::set_ipcity(const char* value, size_t size) {
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.BMjAfterimage.ipCity)
}
inline std::string* BMjAfterimage::_internal_mutable_ipcity() {
  
  return ipcity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMjAfterimage::release_ipcity() {
  // @@protoc_insertion_point(field_release:mj.BMjAfterimage.ipCity)
  
  return ipcity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMjAfterimage::set_allocated_ipcity(std::string* ipcity) {
  if (ipcity != nullptr) {
    
  } else {
    
  }
  ipcity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipcity);
  // @@protoc_insertion_point(field_set_allocated:mj.BMjAfterimage.ipCity)
}

// int32 gender = 7;
inline void BMjAfterimage::clear_gender() {
  gender_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjAfterimage::_internal_gender() const {
  return gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMjAfterimage::gender() const {
  // @@protoc_insertion_point(field_get:mj.BMjAfterimage.gender)
  return _internal_gender();
}
inline void BMjAfterimage::_internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gender_ = value;
}
inline void BMjAfterimage::set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:mj.BMjAfterimage.gender)
}

// string title = 8;
inline void BMjAfterimage::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMjAfterimage::title() const {
  // @@protoc_insertion_point(field_get:mj.BMjAfterimage.title)
  return _internal_title();
}
inline void BMjAfterimage::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:mj.BMjAfterimage.title)
}
inline std::string* BMjAfterimage::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mj.BMjAfterimage.title)
  return _internal_mutable_title();
}
inline const std::string& BMjAfterimage::_internal_title() const {
  return title_.GetNoArena();
}
inline void BMjAfterimage::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMjAfterimage::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.BMjAfterimage.title)
}
inline void BMjAfterimage::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.BMjAfterimage.title)
}
inline void BMjAfterimage::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.BMjAfterimage.title)
}
inline std::string* BMjAfterimage::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMjAfterimage::release_title() {
  // @@protoc_insertion_point(field_release:mj.BMjAfterimage.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMjAfterimage::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:mj.BMjAfterimage.title)
}

// string certification = 9;
inline void BMjAfterimage::clear_certification() {
  certification_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMjAfterimage::certification() const {
  // @@protoc_insertion_point(field_get:mj.BMjAfterimage.certification)
  return _internal_certification();
}
inline void BMjAfterimage::set_certification(const std::string& value) {
  _internal_set_certification(value);
  // @@protoc_insertion_point(field_set:mj.BMjAfterimage.certification)
}
inline std::string* BMjAfterimage::mutable_certification() {
  // @@protoc_insertion_point(field_mutable:mj.BMjAfterimage.certification)
  return _internal_mutable_certification();
}
inline const std::string& BMjAfterimage::_internal_certification() const {
  return certification_.GetNoArena();
}
inline void BMjAfterimage::_internal_set_certification(const std::string& value) {
  
  certification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMjAfterimage::set_certification(std::string&& value) {
  
  certification_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.BMjAfterimage.certification)
}
inline void BMjAfterimage::set_certification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.BMjAfterimage.certification)
}
inline void BMjAfterimage::set_certification(const char* value, size_t size) {
  
  certification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.BMjAfterimage.certification)
}
inline std::string* BMjAfterimage::_internal_mutable_certification() {
  
  return certification_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMjAfterimage::release_certification() {
  // @@protoc_insertion_point(field_release:mj.BMjAfterimage.certification)
  
  return certification_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMjAfterimage::set_allocated_certification(std::string* certification) {
  if (certification != nullptr) {
    
  } else {
    
  }
  certification_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), certification);
  // @@protoc_insertion_point(field_set_allocated:mj.BMjAfterimage.certification)
}

// -------------------------------------------------------------------

// SMjOfflineAfterimage

// repeated .mj.BMjAfterimage afterimages = 1;
inline int SMjOfflineAfterimage::_internal_afterimages_size() const {
  return afterimages_.size();
}
inline int SMjOfflineAfterimage::afterimages_size() const {
  return _internal_afterimages_size();
}
inline void SMjOfflineAfterimage::clear_afterimages() {
  afterimages_.Clear();
}
inline ::mj::BMjAfterimage* SMjOfflineAfterimage::mutable_afterimages(int index) {
  // @@protoc_insertion_point(field_mutable:mj.SMjOfflineAfterimage.afterimages)
  return afterimages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjAfterimage >*
SMjOfflineAfterimage::mutable_afterimages() {
  // @@protoc_insertion_point(field_mutable_list:mj.SMjOfflineAfterimage.afterimages)
  return &afterimages_;
}
inline const ::mj::BMjAfterimage& SMjOfflineAfterimage::_internal_afterimages(int index) const {
  return afterimages_.Get(index);
}
inline const ::mj::BMjAfterimage& SMjOfflineAfterimage::afterimages(int index) const {
  // @@protoc_insertion_point(field_get:mj.SMjOfflineAfterimage.afterimages)
  return _internal_afterimages(index);
}
inline ::mj::BMjAfterimage* SMjOfflineAfterimage::_internal_add_afterimages() {
  return afterimages_.Add();
}
inline ::mj::BMjAfterimage* SMjOfflineAfterimage::add_afterimages() {
  // @@protoc_insertion_point(field_add:mj.SMjOfflineAfterimage.afterimages)
  return _internal_add_afterimages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mj::BMjAfterimage >&
SMjOfflineAfterimage::afterimages() const {
  // @@protoc_insertion_point(field_list:mj.SMjOfflineAfterimage.afterimages)
  return afterimages_;
}

// -------------------------------------------------------------------

// CMjLeaveMessageTopic

// -------------------------------------------------------------------

// SMjLeaveMessageTopic

// string topic = 1;
inline void SMjLeaveMessageTopic::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjLeaveMessageTopic::topic() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageTopic.topic)
  return _internal_topic();
}
inline void SMjLeaveMessageTopic::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageTopic.topic)
}
inline std::string* SMjLeaveMessageTopic::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:mj.SMjLeaveMessageTopic.topic)
  return _internal_mutable_topic();
}
inline const std::string& SMjLeaveMessageTopic::_internal_topic() const {
  return topic_.GetNoArena();
}
inline void SMjLeaveMessageTopic::_internal_set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjLeaveMessageTopic::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjLeaveMessageTopic.topic)
}
inline void SMjLeaveMessageTopic::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjLeaveMessageTopic.topic)
}
inline void SMjLeaveMessageTopic::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjLeaveMessageTopic.topic)
}
inline std::string* SMjLeaveMessageTopic::_internal_mutable_topic() {
  
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjLeaveMessageTopic::release_topic() {
  // @@protoc_insertion_point(field_release:mj.SMjLeaveMessageTopic.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjLeaveMessageTopic::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjLeaveMessageTopic.topic)
}

// -------------------------------------------------------------------

// CMjCreateLeaveMessage

// int32 type = 1;
inline void CMjCreateLeaveMessage::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjCreateLeaveMessage::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjCreateLeaveMessage::type() const {
  // @@protoc_insertion_point(field_get:mj.CMjCreateLeaveMessage.type)
  return _internal_type();
}
inline void CMjCreateLeaveMessage::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CMjCreateLeaveMessage::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mj.CMjCreateLeaveMessage.type)
}

// string content = 2;
inline void CMjCreateLeaveMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMjCreateLeaveMessage::content() const {
  // @@protoc_insertion_point(field_get:mj.CMjCreateLeaveMessage.content)
  return _internal_content();
}
inline void CMjCreateLeaveMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:mj.CMjCreateLeaveMessage.content)
}
inline std::string* CMjCreateLeaveMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:mj.CMjCreateLeaveMessage.content)
  return _internal_mutable_content();
}
inline const std::string& CMjCreateLeaveMessage::_internal_content() const {
  return content_.GetNoArena();
}
inline void CMjCreateLeaveMessage::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMjCreateLeaveMessage::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.CMjCreateLeaveMessage.content)
}
inline void CMjCreateLeaveMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.CMjCreateLeaveMessage.content)
}
inline void CMjCreateLeaveMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.CMjCreateLeaveMessage.content)
}
inline std::string* CMjCreateLeaveMessage::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMjCreateLeaveMessage::release_content() {
  // @@protoc_insertion_point(field_release:mj.CMjCreateLeaveMessage.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMjCreateLeaveMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:mj.CMjCreateLeaveMessage.content)
}

// -------------------------------------------------------------------

// SMjCreateLeaveMessage

// int32 code = 1;
inline void SMjCreateLeaveMessage::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjCreateLeaveMessage::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjCreateLeaveMessage::code() const {
  // @@protoc_insertion_point(field_get:mj.SMjCreateLeaveMessage.code)
  return _internal_code();
}
inline void SMjCreateLeaveMessage::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SMjCreateLeaveMessage::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:mj.SMjCreateLeaveMessage.code)
}

// -------------------------------------------------------------------

// CMjLikeLeaveMessage

// int32 id = 1;
inline void CMjLikeLeaveMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjLikeLeaveMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjLikeLeaveMessage::id() const {
  // @@protoc_insertion_point(field_get:mj.CMjLikeLeaveMessage.id)
  return _internal_id();
}
inline void CMjLikeLeaveMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CMjLikeLeaveMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mj.CMjLikeLeaveMessage.id)
}

// int32 like = 2;
inline void CMjLikeLeaveMessage::clear_like() {
  like_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjLikeLeaveMessage::_internal_like() const {
  return like_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjLikeLeaveMessage::like() const {
  // @@protoc_insertion_point(field_get:mj.CMjLikeLeaveMessage.like)
  return _internal_like();
}
inline void CMjLikeLeaveMessage::_internal_set_like(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  like_ = value;
}
inline void CMjLikeLeaveMessage::set_like(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_like(value);
  // @@protoc_insertion_point(field_set:mj.CMjLikeLeaveMessage.like)
}

// -------------------------------------------------------------------

// SMjLikeLeaveMessage

// int32 id = 1;
inline void SMjLikeLeaveMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLikeLeaveMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLikeLeaveMessage::id() const {
  // @@protoc_insertion_point(field_get:mj.SMjLikeLeaveMessage.id)
  return _internal_id();
}
inline void SMjLikeLeaveMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SMjLikeLeaveMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mj.SMjLikeLeaveMessage.id)
}

// int32 code = 2;
inline void SMjLikeLeaveMessage::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLikeLeaveMessage::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLikeLeaveMessage::code() const {
  // @@protoc_insertion_point(field_get:mj.SMjLikeLeaveMessage.code)
  return _internal_code();
}
inline void SMjLikeLeaveMessage::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SMjLikeLeaveMessage::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:mj.SMjLikeLeaveMessage.code)
}

// string msg = 3;
inline void SMjLikeLeaveMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjLikeLeaveMessage::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjLikeLeaveMessage.msg)
  return _internal_msg();
}
inline void SMjLikeLeaveMessage::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjLikeLeaveMessage.msg)
}
inline std::string* SMjLikeLeaveMessage::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjLikeLeaveMessage.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjLikeLeaveMessage::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjLikeLeaveMessage::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjLikeLeaveMessage::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjLikeLeaveMessage.msg)
}
inline void SMjLikeLeaveMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjLikeLeaveMessage.msg)
}
inline void SMjLikeLeaveMessage::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjLikeLeaveMessage.msg)
}
inline std::string* SMjLikeLeaveMessage::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjLikeLeaveMessage::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjLikeLeaveMessage.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjLikeLeaveMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjLikeLeaveMessage.msg)
}

// -------------------------------------------------------------------

// CMjDeleteLeaveMessage

// int32 id = 1;
inline void CMjDeleteLeaveMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDeleteLeaveMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjDeleteLeaveMessage::id() const {
  // @@protoc_insertion_point(field_get:mj.CMjDeleteLeaveMessage.id)
  return _internal_id();
}
inline void CMjDeleteLeaveMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CMjDeleteLeaveMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mj.CMjDeleteLeaveMessage.id)
}

// -------------------------------------------------------------------

// SMjDeleteLeaveMessage

// int32 id = 1;
inline void SMjDeleteLeaveMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDeleteLeaveMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDeleteLeaveMessage::id() const {
  // @@protoc_insertion_point(field_get:mj.SMjDeleteLeaveMessage.id)
  return _internal_id();
}
inline void SMjDeleteLeaveMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SMjDeleteLeaveMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mj.SMjDeleteLeaveMessage.id)
}

// int32 code = 2;
inline void SMjDeleteLeaveMessage::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDeleteLeaveMessage::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjDeleteLeaveMessage::code() const {
  // @@protoc_insertion_point(field_get:mj.SMjDeleteLeaveMessage.code)
  return _internal_code();
}
inline void SMjDeleteLeaveMessage::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SMjDeleteLeaveMessage::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:mj.SMjDeleteLeaveMessage.code)
}

// string msg = 3;
inline void SMjDeleteLeaveMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjDeleteLeaveMessage::msg() const {
  // @@protoc_insertion_point(field_get:mj.SMjDeleteLeaveMessage.msg)
  return _internal_msg();
}
inline void SMjDeleteLeaveMessage::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mj.SMjDeleteLeaveMessage.msg)
}
inline std::string* SMjDeleteLeaveMessage::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mj.SMjDeleteLeaveMessage.msg)
  return _internal_mutable_msg();
}
inline const std::string& SMjDeleteLeaveMessage::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SMjDeleteLeaveMessage::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjDeleteLeaveMessage::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjDeleteLeaveMessage.msg)
}
inline void SMjDeleteLeaveMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjDeleteLeaveMessage.msg)
}
inline void SMjDeleteLeaveMessage::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjDeleteLeaveMessage.msg)
}
inline std::string* SMjDeleteLeaveMessage::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjDeleteLeaveMessage::release_msg() {
  // @@protoc_insertion_point(field_release:mj.SMjDeleteLeaveMessage.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjDeleteLeaveMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjDeleteLeaveMessage.msg)
}

// -------------------------------------------------------------------

// CMjLeaveMessageList

// int32 type = 1;
inline void CMjLeaveMessageList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjLeaveMessageList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjLeaveMessageList::type() const {
  // @@protoc_insertion_point(field_get:mj.CMjLeaveMessageList.type)
  return _internal_type();
}
inline void CMjLeaveMessageList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CMjLeaveMessageList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mj.CMjLeaveMessageList.type)
}

// -------------------------------------------------------------------

// SMjLeaveMessageList

// repeated int32 msgIdList = 1;
inline int SMjLeaveMessageList::_internal_msgidlist_size() const {
  return msgidlist_.size();
}
inline int SMjLeaveMessageList::msgidlist_size() const {
  return _internal_msgidlist_size();
}
inline void SMjLeaveMessageList::clear_msgidlist() {
  msgidlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageList::_internal_msgidlist(int index) const {
  return msgidlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageList::msgidlist(int index) const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageList.msgIdList)
  return _internal_msgidlist(index);
}
inline void SMjLeaveMessageList::set_msgidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  msgidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageList.msgIdList)
}
inline void SMjLeaveMessageList::_internal_add_msgidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  msgidlist_.Add(value);
}
inline void SMjLeaveMessageList::add_msgidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_msgidlist(value);
  // @@protoc_insertion_point(field_add:mj.SMjLeaveMessageList.msgIdList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SMjLeaveMessageList::_internal_msgidlist() const {
  return msgidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SMjLeaveMessageList::msgidlist() const {
  // @@protoc_insertion_point(field_list:mj.SMjLeaveMessageList.msgIdList)
  return _internal_msgidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SMjLeaveMessageList::_internal_mutable_msgidlist() {
  return &msgidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SMjLeaveMessageList::mutable_msgidlist() {
  // @@protoc_insertion_point(field_mutable_list:mj.SMjLeaveMessageList.msgIdList)
  return _internal_mutable_msgidlist();
}

// int32 type = 2;
inline void SMjLeaveMessageList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageList::type() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageList.type)
  return _internal_type();
}
inline void SMjLeaveMessageList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SMjLeaveMessageList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageList.type)
}

// -------------------------------------------------------------------

// CMjLeaveMessageDetail

// int32 id = 1;
inline void CMjLeaveMessageDetail::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjLeaveMessageDetail::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjLeaveMessageDetail::id() const {
  // @@protoc_insertion_point(field_get:mj.CMjLeaveMessageDetail.id)
  return _internal_id();
}
inline void CMjLeaveMessageDetail::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CMjLeaveMessageDetail::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mj.CMjLeaveMessageDetail.id)
}

// -------------------------------------------------------------------

// SMjLeaveMessageDetail

// int32 id = 1;
inline void SMjLeaveMessageDetail::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::id() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.id)
  return _internal_id();
}
inline void SMjLeaveMessageDetail::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SMjLeaveMessageDetail::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.id)
}

// int32 type = 2;
inline void SMjLeaveMessageDetail::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::type() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.type)
  return _internal_type();
}
inline void SMjLeaveMessageDetail::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SMjLeaveMessageDetail::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.type)
}

// string content = 3;
inline void SMjLeaveMessageDetail::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjLeaveMessageDetail::content() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.content)
  return _internal_content();
}
inline void SMjLeaveMessageDetail::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.content)
}
inline std::string* SMjLeaveMessageDetail::mutable_content() {
  // @@protoc_insertion_point(field_mutable:mj.SMjLeaveMessageDetail.content)
  return _internal_mutable_content();
}
inline const std::string& SMjLeaveMessageDetail::_internal_content() const {
  return content_.GetNoArena();
}
inline void SMjLeaveMessageDetail::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjLeaveMessageDetail::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjLeaveMessageDetail.content)
}
inline void SMjLeaveMessageDetail::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjLeaveMessageDetail.content)
}
inline void SMjLeaveMessageDetail::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjLeaveMessageDetail.content)
}
inline std::string* SMjLeaveMessageDetail::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjLeaveMessageDetail::release_content() {
  // @@protoc_insertion_point(field_release:mj.SMjLeaveMessageDetail.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjLeaveMessageDetail::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjLeaveMessageDetail.content)
}

// int32 checkStatus = 4;
inline void SMjLeaveMessageDetail::clear_checkstatus() {
  checkstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::_internal_checkstatus() const {
  return checkstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::checkstatus() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.checkStatus)
  return _internal_checkstatus();
}
inline void SMjLeaveMessageDetail::_internal_set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  checkstatus_ = value;
}
inline void SMjLeaveMessageDetail::set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checkstatus(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.checkStatus)
}

// string replyAudio = 5;
inline void SMjLeaveMessageDetail::clear_replyaudio() {
  replyaudio_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjLeaveMessageDetail::replyaudio() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.replyAudio)
  return _internal_replyaudio();
}
inline void SMjLeaveMessageDetail::set_replyaudio(const std::string& value) {
  _internal_set_replyaudio(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.replyAudio)
}
inline std::string* SMjLeaveMessageDetail::mutable_replyaudio() {
  // @@protoc_insertion_point(field_mutable:mj.SMjLeaveMessageDetail.replyAudio)
  return _internal_mutable_replyaudio();
}
inline const std::string& SMjLeaveMessageDetail::_internal_replyaudio() const {
  return replyaudio_.GetNoArena();
}
inline void SMjLeaveMessageDetail::_internal_set_replyaudio(const std::string& value) {
  
  replyaudio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjLeaveMessageDetail::set_replyaudio(std::string&& value) {
  
  replyaudio_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjLeaveMessageDetail.replyAudio)
}
inline void SMjLeaveMessageDetail::set_replyaudio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  replyaudio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjLeaveMessageDetail.replyAudio)
}
inline void SMjLeaveMessageDetail::set_replyaudio(const char* value, size_t size) {
  
  replyaudio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjLeaveMessageDetail.replyAudio)
}
inline std::string* SMjLeaveMessageDetail::_internal_mutable_replyaudio() {
  
  return replyaudio_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjLeaveMessageDetail::release_replyaudio() {
  // @@protoc_insertion_point(field_release:mj.SMjLeaveMessageDetail.replyAudio)
  
  return replyaudio_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjLeaveMessageDetail::set_allocated_replyaudio(std::string* replyaudio) {
  if (replyaudio != nullptr) {
    
  } else {
    
  }
  replyaudio_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replyaudio);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjLeaveMessageDetail.replyAudio)
}

// string replyChs = 6;
inline void SMjLeaveMessageDetail::clear_replychs() {
  replychs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjLeaveMessageDetail::replychs() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.replyChs)
  return _internal_replychs();
}
inline void SMjLeaveMessageDetail::set_replychs(const std::string& value) {
  _internal_set_replychs(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.replyChs)
}
inline std::string* SMjLeaveMessageDetail::mutable_replychs() {
  // @@protoc_insertion_point(field_mutable:mj.SMjLeaveMessageDetail.replyChs)
  return _internal_mutable_replychs();
}
inline const std::string& SMjLeaveMessageDetail::_internal_replychs() const {
  return replychs_.GetNoArena();
}
inline void SMjLeaveMessageDetail::_internal_set_replychs(const std::string& value) {
  
  replychs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjLeaveMessageDetail::set_replychs(std::string&& value) {
  
  replychs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjLeaveMessageDetail.replyChs)
}
inline void SMjLeaveMessageDetail::set_replychs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  replychs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjLeaveMessageDetail.replyChs)
}
inline void SMjLeaveMessageDetail::set_replychs(const char* value, size_t size) {
  
  replychs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjLeaveMessageDetail.replyChs)
}
inline std::string* SMjLeaveMessageDetail::_internal_mutable_replychs() {
  
  return replychs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjLeaveMessageDetail::release_replychs() {
  // @@protoc_insertion_point(field_release:mj.SMjLeaveMessageDetail.replyChs)
  
  return replychs_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjLeaveMessageDetail::set_allocated_replychs(std::string* replychs) {
  if (replychs != nullptr) {
    
  } else {
    
  }
  replychs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replychs);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjLeaveMessageDetail.replyChs)
}

// string replyEng = 7;
inline void SMjLeaveMessageDetail::clear_replyeng() {
  replyeng_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjLeaveMessageDetail::replyeng() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.replyEng)
  return _internal_replyeng();
}
inline void SMjLeaveMessageDetail::set_replyeng(const std::string& value) {
  _internal_set_replyeng(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.replyEng)
}
inline std::string* SMjLeaveMessageDetail::mutable_replyeng() {
  // @@protoc_insertion_point(field_mutable:mj.SMjLeaveMessageDetail.replyEng)
  return _internal_mutable_replyeng();
}
inline const std::string& SMjLeaveMessageDetail::_internal_replyeng() const {
  return replyeng_.GetNoArena();
}
inline void SMjLeaveMessageDetail::_internal_set_replyeng(const std::string& value) {
  
  replyeng_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjLeaveMessageDetail::set_replyeng(std::string&& value) {
  
  replyeng_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjLeaveMessageDetail.replyEng)
}
inline void SMjLeaveMessageDetail::set_replyeng(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  replyeng_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjLeaveMessageDetail.replyEng)
}
inline void SMjLeaveMessageDetail::set_replyeng(const char* value, size_t size) {
  
  replyeng_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjLeaveMessageDetail.replyEng)
}
inline std::string* SMjLeaveMessageDetail::_internal_mutable_replyeng() {
  
  return replyeng_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjLeaveMessageDetail::release_replyeng() {
  // @@protoc_insertion_point(field_release:mj.SMjLeaveMessageDetail.replyEng)
  
  return replyeng_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjLeaveMessageDetail::set_allocated_replyeng(std::string* replyeng) {
  if (replyeng != nullptr) {
    
  } else {
    
  }
  replyeng_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replyeng);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjLeaveMessageDetail.replyEng)
}

// int32 likeNum = 8;
inline void SMjLeaveMessageDetail::clear_likenum() {
  likenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::_internal_likenum() const {
  return likenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::likenum() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.likeNum)
  return _internal_likenum();
}
inline void SMjLeaveMessageDetail::_internal_set_likenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  likenum_ = value;
}
inline void SMjLeaveMessageDetail::set_likenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_likenum(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.likeNum)
}

// int32 uid = 9;
inline void SMjLeaveMessageDetail::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjLeaveMessageDetail::uid() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.uid)
  return _internal_uid();
}
inline void SMjLeaveMessageDetail::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SMjLeaveMessageDetail::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.uid)
}

// string nick = 10;
inline void SMjLeaveMessageDetail::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjLeaveMessageDetail::nick() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.nick)
  return _internal_nick();
}
inline void SMjLeaveMessageDetail::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.nick)
}
inline std::string* SMjLeaveMessageDetail::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:mj.SMjLeaveMessageDetail.nick)
  return _internal_mutable_nick();
}
inline const std::string& SMjLeaveMessageDetail::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void SMjLeaveMessageDetail::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjLeaveMessageDetail::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjLeaveMessageDetail.nick)
}
inline void SMjLeaveMessageDetail::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjLeaveMessageDetail.nick)
}
inline void SMjLeaveMessageDetail::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjLeaveMessageDetail.nick)
}
inline std::string* SMjLeaveMessageDetail::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjLeaveMessageDetail::release_nick() {
  // @@protoc_insertion_point(field_release:mj.SMjLeaveMessageDetail.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjLeaveMessageDetail::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjLeaveMessageDetail.nick)
}

// string headPic = 11;
inline void SMjLeaveMessageDetail::clear_headpic() {
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjLeaveMessageDetail::headpic() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.headPic)
  return _internal_headpic();
}
inline void SMjLeaveMessageDetail::set_headpic(const std::string& value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.headPic)
}
inline std::string* SMjLeaveMessageDetail::mutable_headpic() {
  // @@protoc_insertion_point(field_mutable:mj.SMjLeaveMessageDetail.headPic)
  return _internal_mutable_headpic();
}
inline const std::string& SMjLeaveMessageDetail::_internal_headpic() const {
  return headpic_.GetNoArena();
}
inline void SMjLeaveMessageDetail::_internal_set_headpic(const std::string& value) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjLeaveMessageDetail::set_headpic(std::string&& value) {
  
  headpic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjLeaveMessageDetail.headPic)
}
inline void SMjLeaveMessageDetail::set_headpic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjLeaveMessageDetail.headPic)
}
inline void SMjLeaveMessageDetail::set_headpic(const char* value, size_t size) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjLeaveMessageDetail.headPic)
}
inline std::string* SMjLeaveMessageDetail::_internal_mutable_headpic() {
  
  return headpic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjLeaveMessageDetail::release_headpic() {
  // @@protoc_insertion_point(field_release:mj.SMjLeaveMessageDetail.headPic)
  
  return headpic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjLeaveMessageDetail::set_allocated_headpic(std::string* headpic) {
  if (headpic != nullptr) {
    
  } else {
    
  }
  headpic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headpic);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjLeaveMessageDetail.headPic)
}

// bool likeStatus = 12;
inline void SMjLeaveMessageDetail::clear_likestatus() {
  likestatus_ = false;
}
inline bool SMjLeaveMessageDetail::_internal_likestatus() const {
  return likestatus_;
}
inline bool SMjLeaveMessageDetail::likestatus() const {
  // @@protoc_insertion_point(field_get:mj.SMjLeaveMessageDetail.likeStatus)
  return _internal_likestatus();
}
inline void SMjLeaveMessageDetail::_internal_set_likestatus(bool value) {
  
  likestatus_ = value;
}
inline void SMjLeaveMessageDetail::set_likestatus(bool value) {
  _internal_set_likestatus(value);
  // @@protoc_insertion_point(field_set:mj.SMjLeaveMessageDetail.likeStatus)
}

// -------------------------------------------------------------------

// CMjShareLeaveMessage

// int32 id = 1;
inline void CMjShareLeaveMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjShareLeaveMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMjShareLeaveMessage::id() const {
  // @@protoc_insertion_point(field_get:mj.CMjShareLeaveMessage.id)
  return _internal_id();
}
inline void CMjShareLeaveMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CMjShareLeaveMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mj.CMjShareLeaveMessage.id)
}

// -------------------------------------------------------------------

// SMjShareLeaveMessage

// string title = 1;
inline void SMjShareLeaveMessage::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjShareLeaveMessage::title() const {
  // @@protoc_insertion_point(field_get:mj.SMjShareLeaveMessage.title)
  return _internal_title();
}
inline void SMjShareLeaveMessage::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:mj.SMjShareLeaveMessage.title)
}
inline std::string* SMjShareLeaveMessage::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mj.SMjShareLeaveMessage.title)
  return _internal_mutable_title();
}
inline const std::string& SMjShareLeaveMessage::_internal_title() const {
  return title_.GetNoArena();
}
inline void SMjShareLeaveMessage::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjShareLeaveMessage::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjShareLeaveMessage.title)
}
inline void SMjShareLeaveMessage::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjShareLeaveMessage.title)
}
inline void SMjShareLeaveMessage::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjShareLeaveMessage.title)
}
inline std::string* SMjShareLeaveMessage::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjShareLeaveMessage::release_title() {
  // @@protoc_insertion_point(field_release:mj.SMjShareLeaveMessage.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjShareLeaveMessage::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjShareLeaveMessage.title)
}

// string url = 2;
inline void SMjShareLeaveMessage::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjShareLeaveMessage::url() const {
  // @@protoc_insertion_point(field_get:mj.SMjShareLeaveMessage.url)
  return _internal_url();
}
inline void SMjShareLeaveMessage::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:mj.SMjShareLeaveMessage.url)
}
inline std::string* SMjShareLeaveMessage::mutable_url() {
  // @@protoc_insertion_point(field_mutable:mj.SMjShareLeaveMessage.url)
  return _internal_mutable_url();
}
inline const std::string& SMjShareLeaveMessage::_internal_url() const {
  return url_.GetNoArena();
}
inline void SMjShareLeaveMessage::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjShareLeaveMessage::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjShareLeaveMessage.url)
}
inline void SMjShareLeaveMessage::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjShareLeaveMessage.url)
}
inline void SMjShareLeaveMessage::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjShareLeaveMessage.url)
}
inline std::string* SMjShareLeaveMessage::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjShareLeaveMessage::release_url() {
  // @@protoc_insertion_point(field_release:mj.SMjShareLeaveMessage.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjShareLeaveMessage::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjShareLeaveMessage.url)
}

// string content = 3;
inline void SMjShareLeaveMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjShareLeaveMessage::content() const {
  // @@protoc_insertion_point(field_get:mj.SMjShareLeaveMessage.content)
  return _internal_content();
}
inline void SMjShareLeaveMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:mj.SMjShareLeaveMessage.content)
}
inline std::string* SMjShareLeaveMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:mj.SMjShareLeaveMessage.content)
  return _internal_mutable_content();
}
inline const std::string& SMjShareLeaveMessage::_internal_content() const {
  return content_.GetNoArena();
}
inline void SMjShareLeaveMessage::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjShareLeaveMessage::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjShareLeaveMessage.content)
}
inline void SMjShareLeaveMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjShareLeaveMessage.content)
}
inline void SMjShareLeaveMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjShareLeaveMessage.content)
}
inline std::string* SMjShareLeaveMessage::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjShareLeaveMessage::release_content() {
  // @@protoc_insertion_point(field_release:mj.SMjShareLeaveMessage.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjShareLeaveMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjShareLeaveMessage.content)
}

// string spaceName = 4;
inline void SMjShareLeaveMessage::clear_spacename() {
  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjShareLeaveMessage::spacename() const {
  // @@protoc_insertion_point(field_get:mj.SMjShareLeaveMessage.spaceName)
  return _internal_spacename();
}
inline void SMjShareLeaveMessage::set_spacename(const std::string& value) {
  _internal_set_spacename(value);
  // @@protoc_insertion_point(field_set:mj.SMjShareLeaveMessage.spaceName)
}
inline std::string* SMjShareLeaveMessage::mutable_spacename() {
  // @@protoc_insertion_point(field_mutable:mj.SMjShareLeaveMessage.spaceName)
  return _internal_mutable_spacename();
}
inline const std::string& SMjShareLeaveMessage::_internal_spacename() const {
  return spacename_.GetNoArena();
}
inline void SMjShareLeaveMessage::_internal_set_spacename(const std::string& value) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjShareLeaveMessage::set_spacename(std::string&& value) {
  
  spacename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjShareLeaveMessage.spaceName)
}
inline void SMjShareLeaveMessage::set_spacename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjShareLeaveMessage.spaceName)
}
inline void SMjShareLeaveMessage::set_spacename(const char* value, size_t size) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjShareLeaveMessage.spaceName)
}
inline std::string* SMjShareLeaveMessage::_internal_mutable_spacename() {
  
  return spacename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjShareLeaveMessage::release_spacename() {
  // @@protoc_insertion_point(field_release:mj.SMjShareLeaveMessage.spaceName)
  
  return spacename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjShareLeaveMessage::set_allocated_spacename(std::string* spacename) {
  if (spacename != nullptr) {
    
  } else {
    
  }
  spacename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacename);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjShareLeaveMessage.spaceName)
}

// string cover = 5;
inline void SMjShareLeaveMessage::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjShareLeaveMessage::cover() const {
  // @@protoc_insertion_point(field_get:mj.SMjShareLeaveMessage.cover)
  return _internal_cover();
}
inline void SMjShareLeaveMessage::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:mj.SMjShareLeaveMessage.cover)
}
inline std::string* SMjShareLeaveMessage::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:mj.SMjShareLeaveMessage.cover)
  return _internal_mutable_cover();
}
inline const std::string& SMjShareLeaveMessage::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void SMjShareLeaveMessage::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjShareLeaveMessage::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjShareLeaveMessage.cover)
}
inline void SMjShareLeaveMessage::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjShareLeaveMessage.cover)
}
inline void SMjShareLeaveMessage::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjShareLeaveMessage.cover)
}
inline std::string* SMjShareLeaveMessage::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjShareLeaveMessage::release_cover() {
  // @@protoc_insertion_point(field_release:mj.SMjShareLeaveMessage.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjShareLeaveMessage::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjShareLeaveMessage.cover)
}

// string wechatContent = 6;
inline void SMjShareLeaveMessage::clear_wechatcontent() {
  wechatcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjShareLeaveMessage::wechatcontent() const {
  // @@protoc_insertion_point(field_get:mj.SMjShareLeaveMessage.wechatContent)
  return _internal_wechatcontent();
}
inline void SMjShareLeaveMessage::set_wechatcontent(const std::string& value) {
  _internal_set_wechatcontent(value);
  // @@protoc_insertion_point(field_set:mj.SMjShareLeaveMessage.wechatContent)
}
inline std::string* SMjShareLeaveMessage::mutable_wechatcontent() {
  // @@protoc_insertion_point(field_mutable:mj.SMjShareLeaveMessage.wechatContent)
  return _internal_mutable_wechatcontent();
}
inline const std::string& SMjShareLeaveMessage::_internal_wechatcontent() const {
  return wechatcontent_.GetNoArena();
}
inline void SMjShareLeaveMessage::_internal_set_wechatcontent(const std::string& value) {
  
  wechatcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjShareLeaveMessage::set_wechatcontent(std::string&& value) {
  
  wechatcontent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjShareLeaveMessage.wechatContent)
}
inline void SMjShareLeaveMessage::set_wechatcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wechatcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjShareLeaveMessage.wechatContent)
}
inline void SMjShareLeaveMessage::set_wechatcontent(const char* value, size_t size) {
  
  wechatcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjShareLeaveMessage.wechatContent)
}
inline std::string* SMjShareLeaveMessage::_internal_mutable_wechatcontent() {
  
  return wechatcontent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjShareLeaveMessage::release_wechatcontent() {
  // @@protoc_insertion_point(field_release:mj.SMjShareLeaveMessage.wechatContent)
  
  return wechatcontent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjShareLeaveMessage::set_allocated_wechatcontent(std::string* wechatcontent) {
  if (wechatcontent != nullptr) {
    
  } else {
    
  }
  wechatcontent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wechatcontent);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjShareLeaveMessage.wechatContent)
}

// string shareTime = 7;
inline void SMjShareLeaveMessage::clear_sharetime() {
  sharetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMjShareLeaveMessage::sharetime() const {
  // @@protoc_insertion_point(field_get:mj.SMjShareLeaveMessage.shareTime)
  return _internal_sharetime();
}
inline void SMjShareLeaveMessage::set_sharetime(const std::string& value) {
  _internal_set_sharetime(value);
  // @@protoc_insertion_point(field_set:mj.SMjShareLeaveMessage.shareTime)
}
inline std::string* SMjShareLeaveMessage::mutable_sharetime() {
  // @@protoc_insertion_point(field_mutable:mj.SMjShareLeaveMessage.shareTime)
  return _internal_mutable_sharetime();
}
inline const std::string& SMjShareLeaveMessage::_internal_sharetime() const {
  return sharetime_.GetNoArena();
}
inline void SMjShareLeaveMessage::_internal_set_sharetime(const std::string& value) {
  
  sharetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMjShareLeaveMessage::set_sharetime(std::string&& value) {
  
  sharetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mj.SMjShareLeaveMessage.shareTime)
}
inline void SMjShareLeaveMessage::set_sharetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sharetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mj.SMjShareLeaveMessage.shareTime)
}
inline void SMjShareLeaveMessage::set_sharetime(const char* value, size_t size) {
  
  sharetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mj.SMjShareLeaveMessage.shareTime)
}
inline std::string* SMjShareLeaveMessage::_internal_mutable_sharetime() {
  
  return sharetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMjShareLeaveMessage::release_sharetime() {
  // @@protoc_insertion_point(field_release:mj.SMjShareLeaveMessage.shareTime)
  
  return sharetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMjShareLeaveMessage::set_allocated_sharetime(std::string* sharetime) {
  if (sharetime != nullptr) {
    
  } else {
    
  }
  sharetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sharetime);
  // @@protoc_insertion_point(field_set_allocated:mj.SMjShareLeaveMessage.shareTime)
}

// int32 visitCount = 8;
inline void SMjShareLeaveMessage::clear_visitcount() {
  visitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjShareLeaveMessage::_internal_visitcount() const {
  return visitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMjShareLeaveMessage::visitcount() const {
  // @@protoc_insertion_point(field_get:mj.SMjShareLeaveMessage.visitCount)
  return _internal_visitcount();
}
inline void SMjShareLeaveMessage::_internal_set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  visitcount_ = value;
}
inline void SMjShareLeaveMessage::set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_visitcount(value);
  // @@protoc_insertion_point(field_set:mj.SMjShareLeaveMessage.visitCount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mj

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mjWarmup_2eproto
