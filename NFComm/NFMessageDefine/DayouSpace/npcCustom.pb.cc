// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npcCustom.proto

#include "npcCustom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_npcCustom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPromptRecord_npcCustom_2eproto;
namespace gpt {
class CCopyNpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCopyNpc> _instance;
} _CCopyNpc_default_instance_;
class SCopyNpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCopyNpc> _instance;
} _SCopyNpc_default_instance_;
class CChangePromptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CChangePrompt> _instance;
} _CChangePrompt_default_instance_;
class SChangePromptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SChangePrompt> _instance;
} _SChangePrompt_default_instance_;
class CPromptHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPromptHistory> _instance;
} _CPromptHistory_default_instance_;
class SPromptHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPromptHistory> _instance;
} _SPromptHistory_default_instance_;
class BPromptRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BPromptRecord> _instance;
} _BPromptRecord_default_instance_;
class CPromptRollbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPromptRollback> _instance;
} _CPromptRollback_default_instance_;
class SPromptRollbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPromptRollback> _instance;
} _SPromptRollback_default_instance_;
class CNpcCustomChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNpcCustomChat> _instance;
} _CNpcCustomChat_default_instance_;
class SNpcCustomChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNpcCustomChat> _instance;
} _SNpcCustomChat_default_instance_;
class CNpcCustomChatStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNpcCustomChatStream> _instance;
} _CNpcCustomChatStream_default_instance_;
class SNpcCustomChatStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNpcCustomChatStream> _instance;
} _SNpcCustomChatStream_default_instance_;
}  // namespace gpt
static void InitDefaultsscc_info_BPromptRecord_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_BPromptRecord_default_instance_;
    new (ptr) ::gpt::BPromptRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::BPromptRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPromptRecord_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BPromptRecord_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_CChangePrompt_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_CChangePrompt_default_instance_;
    new (ptr) ::gpt::CChangePrompt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::CChangePrompt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CChangePrompt_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CChangePrompt_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_CCopyNpc_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_CCopyNpc_default_instance_;
    new (ptr) ::gpt::CCopyNpc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::CCopyNpc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCopyNpc_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCopyNpc_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_CNpcCustomChat_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_CNpcCustomChat_default_instance_;
    new (ptr) ::gpt::CNpcCustomChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::CNpcCustomChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNpcCustomChat_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNpcCustomChat_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_CNpcCustomChatStream_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_CNpcCustomChatStream_default_instance_;
    new (ptr) ::gpt::CNpcCustomChatStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::CNpcCustomChatStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNpcCustomChatStream_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNpcCustomChatStream_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_CPromptHistory_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_CPromptHistory_default_instance_;
    new (ptr) ::gpt::CPromptHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::CPromptHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPromptHistory_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPromptHistory_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_CPromptRollback_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_CPromptRollback_default_instance_;
    new (ptr) ::gpt::CPromptRollback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::CPromptRollback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPromptRollback_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPromptRollback_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_SChangePrompt_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_SChangePrompt_default_instance_;
    new (ptr) ::gpt::SChangePrompt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::SChangePrompt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SChangePrompt_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SChangePrompt_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_SCopyNpc_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_SCopyNpc_default_instance_;
    new (ptr) ::gpt::SCopyNpc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::SCopyNpc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCopyNpc_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCopyNpc_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_SNpcCustomChat_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_SNpcCustomChat_default_instance_;
    new (ptr) ::gpt::SNpcCustomChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::SNpcCustomChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNpcCustomChat_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNpcCustomChat_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_SNpcCustomChatStream_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_SNpcCustomChatStream_default_instance_;
    new (ptr) ::gpt::SNpcCustomChatStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::SNpcCustomChatStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNpcCustomChatStream_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNpcCustomChatStream_npcCustom_2eproto}, {}};

static void InitDefaultsscc_info_SPromptHistory_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_SPromptHistory_default_instance_;
    new (ptr) ::gpt::SPromptHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::SPromptHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SPromptHistory_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SPromptHistory_npcCustom_2eproto}, {
      &scc_info_BPromptRecord_npcCustom_2eproto.base,}};

static void InitDefaultsscc_info_SPromptRollback_npcCustom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gpt::_SPromptRollback_default_instance_;
    new (ptr) ::gpt::SPromptRollback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gpt::SPromptRollback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SPromptRollback_npcCustom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SPromptRollback_npcCustom_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_npcCustom_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_npcCustom_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_npcCustom_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_npcCustom_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::CCopyNpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::CCopyNpc, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::SCopyNpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::SCopyNpc, goodsid_),
  PROTOBUF_FIELD_OFFSET(::gpt::SCopyNpc, issuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::CChangePrompt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::CChangePrompt, type_),
  PROTOBUF_FIELD_OFFSET(::gpt::CChangePrompt, npcname_),
  PROTOBUF_FIELD_OFFSET(::gpt::CChangePrompt, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::SChangePrompt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::SChangePrompt, type_),
  PROTOBUF_FIELD_OFFSET(::gpt::SChangePrompt, issuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::CPromptHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::CPromptHistory, type_),
  PROTOBUF_FIELD_OFFSET(::gpt::CPromptHistory, npcname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::SPromptHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::SPromptHistory, currprompt_),
  PROTOBUF_FIELD_OFFSET(::gpt::SPromptHistory, history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::BPromptRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::BPromptRecord, recordid_),
  PROTOBUF_FIELD_OFFSET(::gpt::BPromptRecord, text_),
  PROTOBUF_FIELD_OFFSET(::gpt::BPromptRecord, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::CPromptRollback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::CPromptRollback, recordid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::SPromptRollback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::SPromptRollback, issuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChat, npcname_),
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChat, voicemodel_),
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChat, reqtext_),
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChat, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChat, audio_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChat, reqtext_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChat, resptext_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChat, action_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChat, type_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChat, samplingrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChatStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChatStream, npcname_),
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChatStream, voicemodel_),
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChatStream, reqtext_),
  PROTOBUF_FIELD_OFFSET(::gpt::CNpcCustomChatStream, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChatStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChatStream, audio_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChatStream, reqtext_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChatStream, resptext_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChatStream, action_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChatStream, type_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChatStream, isend_),
  PROTOBUF_FIELD_OFFSET(::gpt::SNpcCustomChatStream, samplingrate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gpt::CCopyNpc)},
  { 6, -1, sizeof(::gpt::SCopyNpc)},
  { 13, -1, sizeof(::gpt::CChangePrompt)},
  { 21, -1, sizeof(::gpt::SChangePrompt)},
  { 28, -1, sizeof(::gpt::CPromptHistory)},
  { 35, -1, sizeof(::gpt::SPromptHistory)},
  { 42, -1, sizeof(::gpt::BPromptRecord)},
  { 50, -1, sizeof(::gpt::CPromptRollback)},
  { 56, -1, sizeof(::gpt::SPromptRollback)},
  { 62, -1, sizeof(::gpt::CNpcCustomChat)},
  { 71, -1, sizeof(::gpt::SNpcCustomChat)},
  { 82, -1, sizeof(::gpt::CNpcCustomChatStream)},
  { 91, -1, sizeof(::gpt::SNpcCustomChatStream)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_CCopyNpc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_SCopyNpc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_CChangePrompt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_SChangePrompt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_CPromptHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_SPromptHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_BPromptRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_CPromptRollback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_SPromptRollback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_CNpcCustomChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_SNpcCustomChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_CNpcCustomChatStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpt::_SNpcCustomChatStream_default_instance_),
};

const char descriptor_table_protodef_npcCustom_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017npcCustom.proto\022\003gpt\"\033\n\010CCopyNpc\022\017\n\007go"
  "odsId\030\001 \001(\005\".\n\010SCopyNpc\022\017\n\007goodsId\030\001 \001(\005"
  "\022\021\n\tisSuccess\030\002 \001(\005\"<\n\rCChangePrompt\022\014\n\004"
  "type\030\001 \001(\005\022\017\n\007npcName\030\002 \001(\t\022\014\n\004text\030\003 \001("
  "\t\"0\n\rSChangePrompt\022\014\n\004type\030\001 \001(\005\022\021\n\tisSu"
  "ccess\030\002 \001(\005\"/\n\016CPromptHistory\022\014\n\004type\030\001 "
  "\001(\005\022\017\n\007npcName\030\002 \001(\t\"]\n\016SPromptHistory\022&"
  "\n\ncurrPrompt\030\001 \001(\0132\022.gpt.BPromptRecord\022#"
  "\n\007history\030\002 \003(\0132\022.gpt.BPromptRecord\"B\n\rB"
  "PromptRecord\022\020\n\010recordId\030\001 \001(\005\022\014\n\004text\030\002"
  " \001(\t\022\021\n\ttimestamp\030\003 \001(\t\"#\n\017CPromptRollba"
  "ck\022\020\n\010recordId\030\001 \001(\005\"$\n\017SPromptRollback\022"
  "\021\n\tisSuccess\030\001 \001(\005\"T\n\016CNpcCustomChat\022\017\n\007"
  "npcName\030\001 \001(\t\022\022\n\nvoiceModel\030\002 \001(\t\022\017\n\007req"
  "Text\030\003 \001(\t\022\014\n\004type\030\004 \001(\005\"v\n\016SNpcCustomCh"
  "at\022\r\n\005audio\030\001 \001(\014\022\017\n\007reqText\030\002 \001(\t\022\020\n\010re"
  "spText\030\003 \001(\t\022\016\n\006action\030\004 \001(\t\022\014\n\004type\030\005 \001"
  "(\005\022\024\n\014samplingRate\030\006 \001(\005\"Z\n\024CNpcCustomCh"
  "atStream\022\017\n\007npcName\030\001 \001(\t\022\022\n\nvoiceModel\030"
  "\002 \001(\t\022\017\n\007reqText\030\003 \001(\t\022\014\n\004type\030\004 \001(\005\"\213\001\n"
  "\024SNpcCustomChatStream\022\r\n\005audio\030\001 \001(\014\022\017\n\007"
  "reqText\030\002 \001(\t\022\020\n\010respText\030\003 \001(\t\022\016\n\006actio"
  "n\030\004 \001(\t\022\014\n\004type\030\005 \001(\005\022\r\n\005isEnd\030\006 \001(\010\022\024\n\014"
  "samplingRate\030\007 \001(\005B.\n\030com.dayou.space.pr"
  "otobufB\tNpcCustomZ\007./pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_npcCustom_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_npcCustom_2eproto_sccs[13] = {
  &scc_info_BPromptRecord_npcCustom_2eproto.base,
  &scc_info_CChangePrompt_npcCustom_2eproto.base,
  &scc_info_CCopyNpc_npcCustom_2eproto.base,
  &scc_info_CNpcCustomChat_npcCustom_2eproto.base,
  &scc_info_CNpcCustomChatStream_npcCustom_2eproto.base,
  &scc_info_CPromptHistory_npcCustom_2eproto.base,
  &scc_info_CPromptRollback_npcCustom_2eproto.base,
  &scc_info_SChangePrompt_npcCustom_2eproto.base,
  &scc_info_SCopyNpc_npcCustom_2eproto.base,
  &scc_info_SNpcCustomChat_npcCustom_2eproto.base,
  &scc_info_SNpcCustomChatStream_npcCustom_2eproto.base,
  &scc_info_SPromptHistory_npcCustom_2eproto.base,
  &scc_info_SPromptRollback_npcCustom_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_npcCustom_2eproto_once;
static bool descriptor_table_npcCustom_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_npcCustom_2eproto = {
  &descriptor_table_npcCustom_2eproto_initialized, descriptor_table_protodef_npcCustom_2eproto, "npcCustom.proto", 994,
  &descriptor_table_npcCustom_2eproto_once, descriptor_table_npcCustom_2eproto_sccs, descriptor_table_npcCustom_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_npcCustom_2eproto::offsets,
  file_level_metadata_npcCustom_2eproto, 13, file_level_enum_descriptors_npcCustom_2eproto, file_level_service_descriptors_npcCustom_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_npcCustom_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_npcCustom_2eproto), true);
namespace gpt {

// ===================================================================

void CCopyNpc::InitAsDefaultInstance() {
}
class CCopyNpc::_Internal {
 public:
};

CCopyNpc::CCopyNpc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.CCopyNpc)
}
CCopyNpc::CCopyNpc(const CCopyNpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:gpt.CCopyNpc)
}

void CCopyNpc::SharedCtor() {
  goodsid_ = 0;
}

CCopyNpc::~CCopyNpc() {
  // @@protoc_insertion_point(destructor:gpt.CCopyNpc)
  SharedDtor();
}

void CCopyNpc::SharedDtor() {
}

void CCopyNpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCopyNpc& CCopyNpc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCopyNpc_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void CCopyNpc::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.CCopyNpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* CCopyNpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCopyNpc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.CCopyNpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.CCopyNpc)
  return target;
}

size_t CCopyNpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.CCopyNpc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCopyNpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.CCopyNpc)
  GOOGLE_DCHECK_NE(&from, this);
  const CCopyNpc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCopyNpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.CCopyNpc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.CCopyNpc)
    MergeFrom(*source);
  }
}

void CCopyNpc::MergeFrom(const CCopyNpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.CCopyNpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CCopyNpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.CCopyNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCopyNpc::CopyFrom(const CCopyNpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.CCopyNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCopyNpc::IsInitialized() const {
  return true;
}

void CCopyNpc::InternalSwap(CCopyNpc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCopyNpc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCopyNpc::InitAsDefaultInstance() {
}
class SCopyNpc::_Internal {
 public:
};

SCopyNpc::SCopyNpc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.SCopyNpc)
}
SCopyNpc::SCopyNpc(const SCopyNpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&goodsid_, &from.goodsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&issuccess_) -
    reinterpret_cast<char*>(&goodsid_)) + sizeof(issuccess_));
  // @@protoc_insertion_point(copy_constructor:gpt.SCopyNpc)
}

void SCopyNpc::SharedCtor() {
  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuccess_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(issuccess_));
}

SCopyNpc::~SCopyNpc() {
  // @@protoc_insertion_point(destructor:gpt.SCopyNpc)
  SharedDtor();
}

void SCopyNpc::SharedDtor() {
}

void SCopyNpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCopyNpc& SCopyNpc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCopyNpc_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void SCopyNpc::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.SCopyNpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuccess_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(issuccess_));
  _internal_metadata_.Clear();
}

const char* SCopyNpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isSuccess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCopyNpc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.SCopyNpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  // int32 isSuccess = 2;
  if (this->issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_issuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.SCopyNpc)
  return target;
}

size_t SCopyNpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.SCopyNpc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 isSuccess = 2;
  if (this->issuccess() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_issuccess());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCopyNpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.SCopyNpc)
  GOOGLE_DCHECK_NE(&from, this);
  const SCopyNpc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCopyNpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.SCopyNpc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.SCopyNpc)
    MergeFrom(*source);
  }
}

void SCopyNpc::MergeFrom(const SCopyNpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.SCopyNpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.issuccess() != 0) {
    _internal_set_issuccess(from._internal_issuccess());
  }
}

void SCopyNpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.SCopyNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCopyNpc::CopyFrom(const SCopyNpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.SCopyNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCopyNpc::IsInitialized() const {
  return true;
}

void SCopyNpc::InternalSwap(SCopyNpc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
  swap(issuccess_, other->issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCopyNpc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CChangePrompt::InitAsDefaultInstance() {
}
class CChangePrompt::_Internal {
 public:
};

CChangePrompt::CChangePrompt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.CChangePrompt)
}
CChangePrompt::CChangePrompt(const CChangePrompt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_npcname().empty()) {
    npcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npcname_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gpt.CChangePrompt)
}

void CChangePrompt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CChangePrompt_npcCustom_2eproto.base);
  npcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CChangePrompt::~CChangePrompt() {
  // @@protoc_insertion_point(destructor:gpt.CChangePrompt)
  SharedDtor();
}

void CChangePrompt::SharedDtor() {
  npcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChangePrompt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CChangePrompt& CChangePrompt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CChangePrompt_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void CChangePrompt::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.CChangePrompt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* CChangePrompt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string npcName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_npcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.CChangePrompt.npcName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.CChangePrompt.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CChangePrompt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.CChangePrompt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string npcName = 2;
  if (this->npcname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_npcname().data(), static_cast<int>(this->_internal_npcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.CChangePrompt.npcName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_npcname(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.CChangePrompt.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.CChangePrompt)
  return target;
}

size_t CChangePrompt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.CChangePrompt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string npcName = 2;
  if (this->npcname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_npcname());
  }

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChangePrompt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.CChangePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  const CChangePrompt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CChangePrompt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.CChangePrompt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.CChangePrompt)
    MergeFrom(*source);
  }
}

void CChangePrompt::MergeFrom(const CChangePrompt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.CChangePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.npcname().size() > 0) {

    npcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npcname_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CChangePrompt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.CChangePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChangePrompt::CopyFrom(const CChangePrompt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.CChangePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChangePrompt::IsInitialized() const {
  return true;
}

void CChangePrompt::InternalSwap(CChangePrompt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  npcname_.Swap(&other->npcname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChangePrompt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SChangePrompt::InitAsDefaultInstance() {
}
class SChangePrompt::_Internal {
 public:
};

SChangePrompt::SChangePrompt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.SChangePrompt)
}
SChangePrompt::SChangePrompt(const SChangePrompt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&issuccess_) -
    reinterpret_cast<char*>(&type_)) + sizeof(issuccess_));
  // @@protoc_insertion_point(copy_constructor:gpt.SChangePrompt)
}

void SChangePrompt::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuccess_) -
      reinterpret_cast<char*>(&type_)) + sizeof(issuccess_));
}

SChangePrompt::~SChangePrompt() {
  // @@protoc_insertion_point(destructor:gpt.SChangePrompt)
  SharedDtor();
}

void SChangePrompt::SharedDtor() {
}

void SChangePrompt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SChangePrompt& SChangePrompt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SChangePrompt_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void SChangePrompt::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.SChangePrompt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuccess_) -
      reinterpret_cast<char*>(&type_)) + sizeof(issuccess_));
  _internal_metadata_.Clear();
}

const char* SChangePrompt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isSuccess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChangePrompt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.SChangePrompt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 isSuccess = 2;
  if (this->issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_issuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.SChangePrompt)
  return target;
}

size_t SChangePrompt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.SChangePrompt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 isSuccess = 2;
  if (this->issuccess() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_issuccess());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SChangePrompt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.SChangePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  const SChangePrompt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SChangePrompt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.SChangePrompt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.SChangePrompt)
    MergeFrom(*source);
  }
}

void SChangePrompt::MergeFrom(const SChangePrompt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.SChangePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.issuccess() != 0) {
    _internal_set_issuccess(from._internal_issuccess());
  }
}

void SChangePrompt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.SChangePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChangePrompt::CopyFrom(const SChangePrompt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.SChangePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChangePrompt::IsInitialized() const {
  return true;
}

void SChangePrompt::InternalSwap(SChangePrompt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(issuccess_, other->issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SChangePrompt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPromptHistory::InitAsDefaultInstance() {
}
class CPromptHistory::_Internal {
 public:
};

CPromptHistory::CPromptHistory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.CPromptHistory)
}
CPromptHistory::CPromptHistory(const CPromptHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_npcname().empty()) {
    npcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npcname_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gpt.CPromptHistory)
}

void CPromptHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPromptHistory_npcCustom_2eproto.base);
  npcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CPromptHistory::~CPromptHistory() {
  // @@protoc_insertion_point(destructor:gpt.CPromptHistory)
  SharedDtor();
}

void CPromptHistory::SharedDtor() {
  npcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPromptHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPromptHistory& CPromptHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPromptHistory_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void CPromptHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.CPromptHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* CPromptHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string npcName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_npcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.CPromptHistory.npcName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPromptHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.CPromptHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string npcName = 2;
  if (this->npcname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_npcname().data(), static_cast<int>(this->_internal_npcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.CPromptHistory.npcName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_npcname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.CPromptHistory)
  return target;
}

size_t CPromptHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.CPromptHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string npcName = 2;
  if (this->npcname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_npcname());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPromptHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.CPromptHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CPromptHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPromptHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.CPromptHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.CPromptHistory)
    MergeFrom(*source);
  }
}

void CPromptHistory::MergeFrom(const CPromptHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.CPromptHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.npcname().size() > 0) {

    npcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npcname_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CPromptHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.CPromptHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPromptHistory::CopyFrom(const CPromptHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.CPromptHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPromptHistory::IsInitialized() const {
  return true;
}

void CPromptHistory::InternalSwap(CPromptHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  npcname_.Swap(&other->npcname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPromptHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPromptHistory::InitAsDefaultInstance() {
  ::gpt::_SPromptHistory_default_instance_._instance.get_mutable()->currprompt_ = const_cast< ::gpt::BPromptRecord*>(
      ::gpt::BPromptRecord::internal_default_instance());
}
class SPromptHistory::_Internal {
 public:
  static const ::gpt::BPromptRecord& currprompt(const SPromptHistory* msg);
};

const ::gpt::BPromptRecord&
SPromptHistory::_Internal::currprompt(const SPromptHistory* msg) {
  return *msg->currprompt_;
}
SPromptHistory::SPromptHistory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.SPromptHistory)
}
SPromptHistory::SPromptHistory(const SPromptHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      history_(from.history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_currprompt()) {
    currprompt_ = new ::gpt::BPromptRecord(*from.currprompt_);
  } else {
    currprompt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gpt.SPromptHistory)
}

void SPromptHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPromptHistory_npcCustom_2eproto.base);
  currprompt_ = nullptr;
}

SPromptHistory::~SPromptHistory() {
  // @@protoc_insertion_point(destructor:gpt.SPromptHistory)
  SharedDtor();
}

void SPromptHistory::SharedDtor() {
  if (this != internal_default_instance()) delete currprompt_;
}

void SPromptHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPromptHistory& SPromptHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPromptHistory_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void SPromptHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.SPromptHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  if (GetArenaNoVirtual() == nullptr && currprompt_ != nullptr) {
    delete currprompt_;
  }
  currprompt_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SPromptHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gpt.BPromptRecord currPrompt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currprompt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gpt.BPromptRecord history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPromptHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.SPromptHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gpt.BPromptRecord currPrompt = 1;
  if (this->has_currprompt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::currprompt(this), target, stream);
  }

  // repeated .gpt.BPromptRecord history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.SPromptHistory)
  return target;
}

size_t SPromptHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.SPromptHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpt.BPromptRecord history = 2;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gpt.BPromptRecord currPrompt = 1;
  if (this->has_currprompt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currprompt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPromptHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.SPromptHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const SPromptHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPromptHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.SPromptHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.SPromptHistory)
    MergeFrom(*source);
  }
}

void SPromptHistory::MergeFrom(const SPromptHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.SPromptHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  if (from.has_currprompt()) {
    _internal_mutable_currprompt()->::gpt::BPromptRecord::MergeFrom(from._internal_currprompt());
  }
}

void SPromptHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.SPromptHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPromptHistory::CopyFrom(const SPromptHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.SPromptHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPromptHistory::IsInitialized() const {
  return true;
}

void SPromptHistory::InternalSwap(SPromptHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  history_.InternalSwap(&other->history_);
  swap(currprompt_, other->currprompt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPromptHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BPromptRecord::InitAsDefaultInstance() {
}
class BPromptRecord::_Internal {
 public:
};

BPromptRecord::BPromptRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.BPromptRecord)
}
BPromptRecord::BPromptRecord(const BPromptRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  recordid_ = from.recordid_;
  // @@protoc_insertion_point(copy_constructor:gpt.BPromptRecord)
}

void BPromptRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BPromptRecord_npcCustom_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordid_ = 0;
}

BPromptRecord::~BPromptRecord() {
  // @@protoc_insertion_point(destructor:gpt.BPromptRecord)
  SharedDtor();
}

void BPromptRecord::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BPromptRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BPromptRecord& BPromptRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BPromptRecord_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void BPromptRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.BPromptRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordid_ = 0;
  _internal_metadata_.Clear();
}

const char* BPromptRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 recordId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          recordid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.BPromptRecord.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.BPromptRecord.timestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BPromptRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.BPromptRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 recordId = 1;
  if (this->recordid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_recordid(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.BPromptRecord.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.BPromptRecord.timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.BPromptRecord)
  return target;
}

size_t BPromptRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.BPromptRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // int32 recordId = 1;
  if (this->recordid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recordid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BPromptRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.BPromptRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const BPromptRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BPromptRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.BPromptRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.BPromptRecord)
    MergeFrom(*source);
  }
}

void BPromptRecord::MergeFrom(const BPromptRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.BPromptRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.recordid() != 0) {
    _internal_set_recordid(from._internal_recordid());
  }
}

void BPromptRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.BPromptRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPromptRecord::CopyFrom(const BPromptRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.BPromptRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPromptRecord::IsInitialized() const {
  return true;
}

void BPromptRecord::InternalSwap(BPromptRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(recordid_, other->recordid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BPromptRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPromptRollback::InitAsDefaultInstance() {
}
class CPromptRollback::_Internal {
 public:
};

CPromptRollback::CPromptRollback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.CPromptRollback)
}
CPromptRollback::CPromptRollback(const CPromptRollback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recordid_ = from.recordid_;
  // @@protoc_insertion_point(copy_constructor:gpt.CPromptRollback)
}

void CPromptRollback::SharedCtor() {
  recordid_ = 0;
}

CPromptRollback::~CPromptRollback() {
  // @@protoc_insertion_point(destructor:gpt.CPromptRollback)
  SharedDtor();
}

void CPromptRollback::SharedDtor() {
}

void CPromptRollback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPromptRollback& CPromptRollback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPromptRollback_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void CPromptRollback::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.CPromptRollback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recordid_ = 0;
  _internal_metadata_.Clear();
}

const char* CPromptRollback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 recordId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          recordid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPromptRollback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.CPromptRollback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 recordId = 1;
  if (this->recordid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_recordid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.CPromptRollback)
  return target;
}

size_t CPromptRollback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.CPromptRollback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 recordId = 1;
  if (this->recordid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recordid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPromptRollback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.CPromptRollback)
  GOOGLE_DCHECK_NE(&from, this);
  const CPromptRollback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPromptRollback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.CPromptRollback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.CPromptRollback)
    MergeFrom(*source);
  }
}

void CPromptRollback::MergeFrom(const CPromptRollback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.CPromptRollback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recordid() != 0) {
    _internal_set_recordid(from._internal_recordid());
  }
}

void CPromptRollback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.CPromptRollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPromptRollback::CopyFrom(const CPromptRollback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.CPromptRollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPromptRollback::IsInitialized() const {
  return true;
}

void CPromptRollback::InternalSwap(CPromptRollback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(recordid_, other->recordid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPromptRollback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPromptRollback::InitAsDefaultInstance() {
}
class SPromptRollback::_Internal {
 public:
};

SPromptRollback::SPromptRollback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.SPromptRollback)
}
SPromptRollback::SPromptRollback(const SPromptRollback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuccess_ = from.issuccess_;
  // @@protoc_insertion_point(copy_constructor:gpt.SPromptRollback)
}

void SPromptRollback::SharedCtor() {
  issuccess_ = 0;
}

SPromptRollback::~SPromptRollback() {
  // @@protoc_insertion_point(destructor:gpt.SPromptRollback)
  SharedDtor();
}

void SPromptRollback::SharedDtor() {
}

void SPromptRollback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPromptRollback& SPromptRollback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPromptRollback_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void SPromptRollback::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.SPromptRollback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  issuccess_ = 0;
  _internal_metadata_.Clear();
}

const char* SPromptRollback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPromptRollback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.SPromptRollback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isSuccess = 1;
  if (this->issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_issuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.SPromptRollback)
  return target;
}

size_t SPromptRollback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.SPromptRollback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 isSuccess = 1;
  if (this->issuccess() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_issuccess());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPromptRollback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.SPromptRollback)
  GOOGLE_DCHECK_NE(&from, this);
  const SPromptRollback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPromptRollback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.SPromptRollback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.SPromptRollback)
    MergeFrom(*source);
  }
}

void SPromptRollback::MergeFrom(const SPromptRollback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.SPromptRollback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.issuccess() != 0) {
    _internal_set_issuccess(from._internal_issuccess());
  }
}

void SPromptRollback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.SPromptRollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPromptRollback::CopyFrom(const SPromptRollback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.SPromptRollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPromptRollback::IsInitialized() const {
  return true;
}

void SPromptRollback::InternalSwap(SPromptRollback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(issuccess_, other->issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPromptRollback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CNpcCustomChat::InitAsDefaultInstance() {
}
class CNpcCustomChat::_Internal {
 public:
};

CNpcCustomChat::CNpcCustomChat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.CNpcCustomChat)
}
CNpcCustomChat::CNpcCustomChat(const CNpcCustomChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_npcname().empty()) {
    npcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npcname_);
  }
  voicemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_voicemodel().empty()) {
    voicemodel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voicemodel_);
  }
  reqtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reqtext().empty()) {
    reqtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reqtext_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gpt.CNpcCustomChat)
}

void CNpcCustomChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CNpcCustomChat_npcCustom_2eproto.base);
  npcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voicemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CNpcCustomChat::~CNpcCustomChat() {
  // @@protoc_insertion_point(destructor:gpt.CNpcCustomChat)
  SharedDtor();
}

void CNpcCustomChat::SharedDtor() {
  npcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voicemodel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CNpcCustomChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNpcCustomChat& CNpcCustomChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNpcCustomChat_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void CNpcCustomChat::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.CNpcCustomChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voicemodel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* CNpcCustomChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string npcName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_npcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.CNpcCustomChat.npcName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string voiceModel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_voicemodel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.CNpcCustomChat.voiceModel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reqText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reqtext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.CNpcCustomChat.reqText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNpcCustomChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.CNpcCustomChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string npcName = 1;
  if (this->npcname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_npcname().data(), static_cast<int>(this->_internal_npcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.CNpcCustomChat.npcName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_npcname(), target);
  }

  // string voiceModel = 2;
  if (this->voicemodel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voicemodel().data(), static_cast<int>(this->_internal_voicemodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.CNpcCustomChat.voiceModel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_voicemodel(), target);
  }

  // string reqText = 3;
  if (this->reqtext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reqtext().data(), static_cast<int>(this->_internal_reqtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.CNpcCustomChat.reqText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reqtext(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.CNpcCustomChat)
  return target;
}

size_t CNpcCustomChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.CNpcCustomChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string npcName = 1;
  if (this->npcname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_npcname());
  }

  // string voiceModel = 2;
  if (this->voicemodel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voicemodel());
  }

  // string reqText = 3;
  if (this->reqtext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reqtext());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNpcCustomChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.CNpcCustomChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CNpcCustomChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNpcCustomChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.CNpcCustomChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.CNpcCustomChat)
    MergeFrom(*source);
  }
}

void CNpcCustomChat::MergeFrom(const CNpcCustomChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.CNpcCustomChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.npcname().size() > 0) {

    npcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npcname_);
  }
  if (from.voicemodel().size() > 0) {

    voicemodel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voicemodel_);
  }
  if (from.reqtext().size() > 0) {

    reqtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reqtext_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CNpcCustomChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.CNpcCustomChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNpcCustomChat::CopyFrom(const CNpcCustomChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.CNpcCustomChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNpcCustomChat::IsInitialized() const {
  return true;
}

void CNpcCustomChat::InternalSwap(CNpcCustomChat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  npcname_.Swap(&other->npcname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  voicemodel_.Swap(&other->voicemodel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reqtext_.Swap(&other->reqtext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNpcCustomChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNpcCustomChat::InitAsDefaultInstance() {
}
class SNpcCustomChat::_Internal {
 public:
};

SNpcCustomChat::SNpcCustomChat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.SNpcCustomChat)
}
SNpcCustomChat::SNpcCustomChat(const SNpcCustomChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio().empty()) {
    audio_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
  reqtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reqtext().empty()) {
    reqtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reqtext_);
  }
  resptext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resptext().empty()) {
    resptext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resptext_);
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&samplingrate_) -
    reinterpret_cast<char*>(&type_)) + sizeof(samplingrate_));
  // @@protoc_insertion_point(copy_constructor:gpt.SNpcCustomChat)
}

void SNpcCustomChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNpcCustomChat_npcCustom_2eproto.base);
  audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resptext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samplingrate_) -
      reinterpret_cast<char*>(&type_)) + sizeof(samplingrate_));
}

SNpcCustomChat::~SNpcCustomChat() {
  // @@protoc_insertion_point(destructor:gpt.SNpcCustomChat)
  SharedDtor();
}

void SNpcCustomChat::SharedDtor() {
  audio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resptext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SNpcCustomChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNpcCustomChat& SNpcCustomChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNpcCustomChat_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void SNpcCustomChat::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.SNpcCustomChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resptext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samplingrate_) -
      reinterpret_cast<char*>(&type_)) + sizeof(samplingrate_));
  _internal_metadata_.Clear();
}

const char* SNpcCustomChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reqText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reqtext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.SNpcCustomChat.reqText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string respText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resptext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.SNpcCustomChat.respText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.SNpcCustomChat.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 samplingRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          samplingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNpcCustomChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.SNpcCustomChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio = 1;
  if (this->audio().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_audio(), target);
  }

  // string reqText = 2;
  if (this->reqtext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reqtext().data(), static_cast<int>(this->_internal_reqtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.SNpcCustomChat.reqText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reqtext(), target);
  }

  // string respText = 3;
  if (this->resptext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resptext().data(), static_cast<int>(this->_internal_resptext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.SNpcCustomChat.respText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resptext(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.SNpcCustomChat.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // int32 samplingRate = 6;
  if (this->samplingrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_samplingrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.SNpcCustomChat)
  return target;
}

size_t SNpcCustomChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.SNpcCustomChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes audio = 1;
  if (this->audio().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio());
  }

  // string reqText = 2;
  if (this->reqtext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reqtext());
  }

  // string respText = 3;
  if (this->resptext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resptext());
  }

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 samplingRate = 6;
  if (this->samplingrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_samplingrate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNpcCustomChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.SNpcCustomChat)
  GOOGLE_DCHECK_NE(&from, this);
  const SNpcCustomChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNpcCustomChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.SNpcCustomChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.SNpcCustomChat)
    MergeFrom(*source);
  }
}

void SNpcCustomChat::MergeFrom(const SNpcCustomChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.SNpcCustomChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio().size() > 0) {

    audio_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
  if (from.reqtext().size() > 0) {

    reqtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reqtext_);
  }
  if (from.resptext().size() > 0) {

    resptext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resptext_);
  }
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.samplingrate() != 0) {
    _internal_set_samplingrate(from._internal_samplingrate());
  }
}

void SNpcCustomChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.SNpcCustomChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNpcCustomChat::CopyFrom(const SNpcCustomChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.SNpcCustomChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNpcCustomChat::IsInitialized() const {
  return true;
}

void SNpcCustomChat::InternalSwap(SNpcCustomChat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  audio_.Swap(&other->audio_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reqtext_.Swap(&other->reqtext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resptext_.Swap(&other->resptext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(samplingrate_, other->samplingrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNpcCustomChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CNpcCustomChatStream::InitAsDefaultInstance() {
}
class CNpcCustomChatStream::_Internal {
 public:
};

CNpcCustomChatStream::CNpcCustomChatStream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.CNpcCustomChatStream)
}
CNpcCustomChatStream::CNpcCustomChatStream(const CNpcCustomChatStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_npcname().empty()) {
    npcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npcname_);
  }
  voicemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_voicemodel().empty()) {
    voicemodel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voicemodel_);
  }
  reqtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reqtext().empty()) {
    reqtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reqtext_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gpt.CNpcCustomChatStream)
}

void CNpcCustomChatStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CNpcCustomChatStream_npcCustom_2eproto.base);
  npcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voicemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CNpcCustomChatStream::~CNpcCustomChatStream() {
  // @@protoc_insertion_point(destructor:gpt.CNpcCustomChatStream)
  SharedDtor();
}

void CNpcCustomChatStream::SharedDtor() {
  npcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voicemodel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CNpcCustomChatStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNpcCustomChatStream& CNpcCustomChatStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNpcCustomChatStream_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void CNpcCustomChatStream::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.CNpcCustomChatStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voicemodel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* CNpcCustomChatStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string npcName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_npcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.CNpcCustomChatStream.npcName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string voiceModel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_voicemodel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.CNpcCustomChatStream.voiceModel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reqText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reqtext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.CNpcCustomChatStream.reqText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNpcCustomChatStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.CNpcCustomChatStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string npcName = 1;
  if (this->npcname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_npcname().data(), static_cast<int>(this->_internal_npcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.CNpcCustomChatStream.npcName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_npcname(), target);
  }

  // string voiceModel = 2;
  if (this->voicemodel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voicemodel().data(), static_cast<int>(this->_internal_voicemodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.CNpcCustomChatStream.voiceModel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_voicemodel(), target);
  }

  // string reqText = 3;
  if (this->reqtext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reqtext().data(), static_cast<int>(this->_internal_reqtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.CNpcCustomChatStream.reqText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reqtext(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.CNpcCustomChatStream)
  return target;
}

size_t CNpcCustomChatStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.CNpcCustomChatStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string npcName = 1;
  if (this->npcname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_npcname());
  }

  // string voiceModel = 2;
  if (this->voicemodel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voicemodel());
  }

  // string reqText = 3;
  if (this->reqtext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reqtext());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNpcCustomChatStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.CNpcCustomChatStream)
  GOOGLE_DCHECK_NE(&from, this);
  const CNpcCustomChatStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNpcCustomChatStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.CNpcCustomChatStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.CNpcCustomChatStream)
    MergeFrom(*source);
  }
}

void CNpcCustomChatStream::MergeFrom(const CNpcCustomChatStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.CNpcCustomChatStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.npcname().size() > 0) {

    npcname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npcname_);
  }
  if (from.voicemodel().size() > 0) {

    voicemodel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voicemodel_);
  }
  if (from.reqtext().size() > 0) {

    reqtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reqtext_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CNpcCustomChatStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.CNpcCustomChatStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNpcCustomChatStream::CopyFrom(const CNpcCustomChatStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.CNpcCustomChatStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNpcCustomChatStream::IsInitialized() const {
  return true;
}

void CNpcCustomChatStream::InternalSwap(CNpcCustomChatStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  npcname_.Swap(&other->npcname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  voicemodel_.Swap(&other->voicemodel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reqtext_.Swap(&other->reqtext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNpcCustomChatStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNpcCustomChatStream::InitAsDefaultInstance() {
}
class SNpcCustomChatStream::_Internal {
 public:
};

SNpcCustomChatStream::SNpcCustomChatStream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpt.SNpcCustomChatStream)
}
SNpcCustomChatStream::SNpcCustomChatStream(const SNpcCustomChatStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio().empty()) {
    audio_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
  reqtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reqtext().empty()) {
    reqtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reqtext_);
  }
  resptext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resptext().empty()) {
    resptext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resptext_);
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&samplingrate_) -
    reinterpret_cast<char*>(&type_)) + sizeof(samplingrate_));
  // @@protoc_insertion_point(copy_constructor:gpt.SNpcCustomChatStream)
}

void SNpcCustomChatStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNpcCustomChatStream_npcCustom_2eproto.base);
  audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resptext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samplingrate_) -
      reinterpret_cast<char*>(&type_)) + sizeof(samplingrate_));
}

SNpcCustomChatStream::~SNpcCustomChatStream() {
  // @@protoc_insertion_point(destructor:gpt.SNpcCustomChatStream)
  SharedDtor();
}

void SNpcCustomChatStream::SharedDtor() {
  audio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resptext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SNpcCustomChatStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNpcCustomChatStream& SNpcCustomChatStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNpcCustomChatStream_npcCustom_2eproto.base);
  return *internal_default_instance();
}


void SNpcCustomChatStream::Clear() {
// @@protoc_insertion_point(message_clear_start:gpt.SNpcCustomChatStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resptext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samplingrate_) -
      reinterpret_cast<char*>(&type_)) + sizeof(samplingrate_));
  _internal_metadata_.Clear();
}

const char* SNpcCustomChatStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reqText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reqtext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.SNpcCustomChatStream.reqText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string respText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resptext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.SNpcCustomChatStream.respText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpt.SNpcCustomChatStream.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isEnd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 samplingRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          samplingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNpcCustomChatStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpt.SNpcCustomChatStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio = 1;
  if (this->audio().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_audio(), target);
  }

  // string reqText = 2;
  if (this->reqtext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reqtext().data(), static_cast<int>(this->_internal_reqtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.SNpcCustomChatStream.reqText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reqtext(), target);
  }

  // string respText = 3;
  if (this->resptext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resptext().data(), static_cast<int>(this->_internal_resptext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.SNpcCustomChatStream.respText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resptext(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpt.SNpcCustomChatStream.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // bool isEnd = 6;
  if (this->isend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isend(), target);
  }

  // int32 samplingRate = 7;
  if (this->samplingrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_samplingrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpt.SNpcCustomChatStream)
  return target;
}

size_t SNpcCustomChatStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpt.SNpcCustomChatStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes audio = 1;
  if (this->audio().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio());
  }

  // string reqText = 2;
  if (this->reqtext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reqtext());
  }

  // string respText = 3;
  if (this->resptext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resptext());
  }

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // bool isEnd = 6;
  if (this->isend() != 0) {
    total_size += 1 + 1;
  }

  // int32 samplingRate = 7;
  if (this->samplingrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_samplingrate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNpcCustomChatStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpt.SNpcCustomChatStream)
  GOOGLE_DCHECK_NE(&from, this);
  const SNpcCustomChatStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNpcCustomChatStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpt.SNpcCustomChatStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpt.SNpcCustomChatStream)
    MergeFrom(*source);
  }
}

void SNpcCustomChatStream::MergeFrom(const SNpcCustomChatStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpt.SNpcCustomChatStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio().size() > 0) {

    audio_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
  if (from.reqtext().size() > 0) {

    reqtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reqtext_);
  }
  if (from.resptext().size() > 0) {

    resptext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resptext_);
  }
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.isend() != 0) {
    _internal_set_isend(from._internal_isend());
  }
  if (from.samplingrate() != 0) {
    _internal_set_samplingrate(from._internal_samplingrate());
  }
}

void SNpcCustomChatStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpt.SNpcCustomChatStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNpcCustomChatStream::CopyFrom(const SNpcCustomChatStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpt.SNpcCustomChatStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNpcCustomChatStream::IsInitialized() const {
  return true;
}

void SNpcCustomChatStream::InternalSwap(SNpcCustomChatStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  audio_.Swap(&other->audio_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reqtext_.Swap(&other->reqtext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resptext_.Swap(&other->resptext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(isend_, other->isend_);
  swap(samplingrate_, other->samplingrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNpcCustomChatStream::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gpt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gpt::CCopyNpc* Arena::CreateMaybeMessage< ::gpt::CCopyNpc >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::CCopyNpc >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::SCopyNpc* Arena::CreateMaybeMessage< ::gpt::SCopyNpc >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::SCopyNpc >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::CChangePrompt* Arena::CreateMaybeMessage< ::gpt::CChangePrompt >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::CChangePrompt >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::SChangePrompt* Arena::CreateMaybeMessage< ::gpt::SChangePrompt >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::SChangePrompt >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::CPromptHistory* Arena::CreateMaybeMessage< ::gpt::CPromptHistory >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::CPromptHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::SPromptHistory* Arena::CreateMaybeMessage< ::gpt::SPromptHistory >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::SPromptHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::BPromptRecord* Arena::CreateMaybeMessage< ::gpt::BPromptRecord >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::BPromptRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::CPromptRollback* Arena::CreateMaybeMessage< ::gpt::CPromptRollback >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::CPromptRollback >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::SPromptRollback* Arena::CreateMaybeMessage< ::gpt::SPromptRollback >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::SPromptRollback >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::CNpcCustomChat* Arena::CreateMaybeMessage< ::gpt::CNpcCustomChat >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::CNpcCustomChat >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::SNpcCustomChat* Arena::CreateMaybeMessage< ::gpt::SNpcCustomChat >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::SNpcCustomChat >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::CNpcCustomChatStream* Arena::CreateMaybeMessage< ::gpt::CNpcCustomChatStream >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::CNpcCustomChatStream >(arena);
}
template<> PROTOBUF_NOINLINE ::gpt::SNpcCustomChatStream* Arena::CreateMaybeMessage< ::gpt::SNpcCustomChatStream >(Arena* arena) {
  return Arena::CreateInternal< ::gpt::SNpcCustomChatStream >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
