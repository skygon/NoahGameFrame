// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceDraft.proto

#include "spaceDraft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_spaceDraft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpaceDraft_spaceDraft_2eproto;
namespace spaceDraft {
class CGetSpaceDraftListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetSpaceDraftList> _instance;
} _CGetSpaceDraftList_default_instance_;
class SpaceDraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpaceDraft> _instance;
} _SpaceDraft_default_instance_;
class SGetSpaceDraftListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetSpaceDraftList> _instance;
} _SGetSpaceDraftList_default_instance_;
class CSpaceDraftDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSpaceDraftDetail> _instance;
} _CSpaceDraftDetail_default_instance_;
class SSpaceDraftDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceDraftDetail> _instance;
} _SSpaceDraftDetail_default_instance_;
class CSendInviteTrialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSendInviteTrial> _instance;
} _CSendInviteTrial_default_instance_;
class SSendInviteTrialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSendInviteTrial> _instance;
} _SSendInviteTrial_default_instance_;
class CCheckInviteTrialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCheckInviteTrial> _instance;
} _CCheckInviteTrial_default_instance_;
class SCheckInviteTrialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCheckInviteTrial> _instance;
} _SCheckInviteTrial_default_instance_;
class SInviteTrialEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SInviteTrialEnd> _instance;
} _SInviteTrialEnd_default_instance_;
}  // namespace spaceDraft
static void InitDefaultsscc_info_CCheckInviteTrial_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_CCheckInviteTrial_default_instance_;
    new (ptr) ::spaceDraft::CCheckInviteTrial();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::CCheckInviteTrial::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCheckInviteTrial_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCheckInviteTrial_spaceDraft_2eproto}, {}};

static void InitDefaultsscc_info_CGetSpaceDraftList_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_CGetSpaceDraftList_default_instance_;
    new (ptr) ::spaceDraft::CGetSpaceDraftList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::CGetSpaceDraftList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetSpaceDraftList_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetSpaceDraftList_spaceDraft_2eproto}, {}};

static void InitDefaultsscc_info_CSendInviteTrial_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_CSendInviteTrial_default_instance_;
    new (ptr) ::spaceDraft::CSendInviteTrial();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::CSendInviteTrial::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSendInviteTrial_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSendInviteTrial_spaceDraft_2eproto}, {}};

static void InitDefaultsscc_info_CSpaceDraftDetail_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_CSpaceDraftDetail_default_instance_;
    new (ptr) ::spaceDraft::CSpaceDraftDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::CSpaceDraftDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSpaceDraftDetail_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSpaceDraftDetail_spaceDraft_2eproto}, {}};

static void InitDefaultsscc_info_SCheckInviteTrial_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_SCheckInviteTrial_default_instance_;
    new (ptr) ::spaceDraft::SCheckInviteTrial();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::SCheckInviteTrial::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCheckInviteTrial_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCheckInviteTrial_spaceDraft_2eproto}, {}};

static void InitDefaultsscc_info_SGetSpaceDraftList_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_SGetSpaceDraftList_default_instance_;
    new (ptr) ::spaceDraft::SGetSpaceDraftList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::SGetSpaceDraftList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SGetSpaceDraftList_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SGetSpaceDraftList_spaceDraft_2eproto}, {
      &scc_info_SpaceDraft_spaceDraft_2eproto.base,}};

static void InitDefaultsscc_info_SInviteTrialEnd_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_SInviteTrialEnd_default_instance_;
    new (ptr) ::spaceDraft::SInviteTrialEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::SInviteTrialEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SInviteTrialEnd_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SInviteTrialEnd_spaceDraft_2eproto}, {}};

static void InitDefaultsscc_info_SSendInviteTrial_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_SSendInviteTrial_default_instance_;
    new (ptr) ::spaceDraft::SSendInviteTrial();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::SSendInviteTrial::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSendInviteTrial_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSendInviteTrial_spaceDraft_2eproto}, {}};

static void InitDefaultsscc_info_SSpaceDraftDetail_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_SSpaceDraftDetail_default_instance_;
    new (ptr) ::spaceDraft::SSpaceDraftDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::SSpaceDraftDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSpaceDraftDetail_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSpaceDraftDetail_spaceDraft_2eproto}, {}};

static void InitDefaultsscc_info_SpaceDraft_spaceDraft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceDraft::_SpaceDraft_default_instance_;
    new (ptr) ::spaceDraft::SpaceDraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceDraft::SpaceDraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpaceDraft_spaceDraft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpaceDraft_spaceDraft_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spaceDraft_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_spaceDraft_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spaceDraft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spaceDraft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CGetSpaceDraftList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CGetSpaceDraftList, curpage_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CGetSpaceDraftList, pagelimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, id_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, createuid_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, name_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, spaceid_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, spacebackpackid_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, cover_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, squarecover_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, configurl_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, desc_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, rule_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, iscollect_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, isrecreation_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, iscopy_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, isopen_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, serverluaurl_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, clientluaurl_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, createdat_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SpaceDraft, updateat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SGetSpaceDraftList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SGetSpaceDraftList, list_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SGetSpaceDraftList, msg_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SGetSpaceDraftList, curpage_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SGetSpaceDraftList, spacenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CSpaceDraftDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CSpaceDraftDetail, spacedraftid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, id_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, createuid_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, name_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, spaceid_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, spacebackpackid_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, cover_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, squarecover_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, configurl_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, desc_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, rule_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, resource_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, serverluaurl_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSpaceDraftDetail, clientluaurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CSendInviteTrial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CSendInviteTrial, inviteeuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSendInviteTrial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSendInviteTrial, state_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSendInviteTrial, msg_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSendInviteTrial, inviteavatar_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSendInviteTrial, inviteuid_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSendInviteTrial, invitenick_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSendInviteTrial, spacedraftid_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SSendInviteTrial, inviteeuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CCheckInviteTrial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CCheckInviteTrial, spacedraftid_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::CCheckInviteTrial, inviteuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SCheckInviteTrial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SCheckInviteTrial, state_),
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SCheckInviteTrial, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SInviteTrialEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceDraft::SInviteTrialEnd, state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::spaceDraft::CGetSpaceDraftList)},
  { 7, -1, sizeof(::spaceDraft::SpaceDraft)},
  { 30, -1, sizeof(::spaceDraft::SGetSpaceDraftList)},
  { 39, -1, sizeof(::spaceDraft::CSpaceDraftDetail)},
  { 45, -1, sizeof(::spaceDraft::SSpaceDraftDetail)},
  { 63, -1, sizeof(::spaceDraft::CSendInviteTrial)},
  { 69, -1, sizeof(::spaceDraft::SSendInviteTrial)},
  { 81, -1, sizeof(::spaceDraft::CCheckInviteTrial)},
  { 88, -1, sizeof(::spaceDraft::SCheckInviteTrial)},
  { 95, -1, sizeof(::spaceDraft::SInviteTrialEnd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_CGetSpaceDraftList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_SpaceDraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_SGetSpaceDraftList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_CSpaceDraftDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_SSpaceDraftDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_CSendInviteTrial_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_SSendInviteTrial_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_CCheckInviteTrial_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_SCheckInviteTrial_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceDraft::_SInviteTrialEnd_default_instance_),
};

const char descriptor_table_protodef_spaceDraft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020spaceDraft.proto\022\nspaceDraft\"8\n\022CGetSp"
  "aceDraftList\022\017\n\007curPage\030\001 \001(\005\022\021\n\tpageLim"
  "it\030\002 \001(\005\"\320\002\n\nSpaceDraft\022\n\n\002id\030\001 \001(\005\022\021\n\tc"
  "reateUid\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\017\n\007spaceId\030"
  "\004 \001(\005\022\027\n\017spaceBackpackId\030\005 \001(\005\022\r\n\005cover\030"
  "\006 \001(\t\022\023\n\013squareCover\030\007 \001(\t\022\021\n\tconfigUrl\030"
  "\010 \001(\t\022\014\n\004desc\030\t \001(\t\022\014\n\004rule\030\n \001(\t\022\021\n\tisC"
  "ollect\030\013 \001(\005\022\024\n\014isRecreation\030\014 \001(\005\022\016\n\006is"
  "Copy\030\r \001(\005\022\016\n\006isOpen\030\016 \001(\005\022\024\n\014ServerLuaU"
  "rl\030\017 \001(\t\022\024\n\014ClientLuaUrl\030\020 \001(\t\022\021\n\tcreate"
  "dAt\030\021 \001(\t\022\020\n\010updateAt\030\022 \001(\t\"j\n\022SGetSpace"
  "DraftList\022$\n\004list\030\001 \003(\0132\026.spaceDraft.Spa"
  "ceDraft\022\013\n\003msg\030\002 \001(\t\022\017\n\007curPage\030\003 \001(\005\022\020\n"
  "\010spaceNum\030\004 \001(\005\")\n\021CSpaceDraftDetail\022\024\n\014"
  "spaceDraftId\030\001 \001(\005\"\373\001\n\021SSpaceDraftDetail"
  "\022\n\n\002id\030\001 \001(\005\022\021\n\tcreateUid\030\002 \001(\005\022\014\n\004name\030"
  "\003 \001(\t\022\017\n\007spaceId\030\004 \001(\005\022\027\n\017spaceBackpackI"
  "d\030\005 \001(\005\022\r\n\005cover\030\006 \001(\t\022\023\n\013squareCover\030\007 "
  "\001(\t\022\021\n\tconfigUrl\030\010 \001(\t\022\014\n\004desc\030\t \001(\t\022\014\n\004"
  "rule\030\n \001(\t\022\020\n\010resource\030\013 \001(\t\022\024\n\014ServerLu"
  "aUrl\030\014 \001(\t\022\024\n\014ClientLuaUrl\030\r \001(\t\"&\n\020CSen"
  "dInviteTrial\022\022\n\ninviteeUid\030\001 \001(\005\"\225\001\n\020SSe"
  "ndInviteTrial\022\r\n\005state\030\001 \001(\005\022\013\n\003msg\030\002 \001("
  "\t\022\024\n\014inviteAvatar\030\003 \001(\t\022\021\n\tinviteUid\030\004 \001"
  "(\005\022\022\n\ninviteNick\030\005 \001(\t\022\024\n\014spaceDraftId\030\006"
  " \001(\005\022\022\n\ninviteeUid\030\007 \001(\005\"<\n\021CCheckInvite"
  "Trial\022\024\n\014spaceDraftId\030\001 \001(\005\022\021\n\tinviteUid"
  "\030\002 \001(\005\"/\n\021SCheckInviteTrial\022\r\n\005state\030\001 \001"
  "(\005\022\013\n\003msg\030\002 \001(\t\" \n\017SInviteTrialEnd\022\r\n\005st"
  "ate\030\001 \001(\005B/\n\030com.dayou.space.protobufB\017S"
  "paceDraftClassZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_spaceDraft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_spaceDraft_2eproto_sccs[10] = {
  &scc_info_CCheckInviteTrial_spaceDraft_2eproto.base,
  &scc_info_CGetSpaceDraftList_spaceDraft_2eproto.base,
  &scc_info_CSendInviteTrial_spaceDraft_2eproto.base,
  &scc_info_CSpaceDraftDetail_spaceDraft_2eproto.base,
  &scc_info_SCheckInviteTrial_spaceDraft_2eproto.base,
  &scc_info_SGetSpaceDraftList_spaceDraft_2eproto.base,
  &scc_info_SInviteTrialEnd_spaceDraft_2eproto.base,
  &scc_info_SSendInviteTrial_spaceDraft_2eproto.base,
  &scc_info_SSpaceDraftDetail_spaceDraft_2eproto.base,
  &scc_info_SpaceDraft_spaceDraft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spaceDraft_2eproto_once;
static bool descriptor_table_spaceDraft_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceDraft_2eproto = {
  &descriptor_table_spaceDraft_2eproto_initialized, descriptor_table_protodef_spaceDraft_2eproto, "spaceDraft.proto", 1226,
  &descriptor_table_spaceDraft_2eproto_once, descriptor_table_spaceDraft_2eproto_sccs, descriptor_table_spaceDraft_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_spaceDraft_2eproto::offsets,
  file_level_metadata_spaceDraft_2eproto, 10, file_level_enum_descriptors_spaceDraft_2eproto, file_level_service_descriptors_spaceDraft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spaceDraft_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_spaceDraft_2eproto), true);
namespace spaceDraft {

// ===================================================================

void CGetSpaceDraftList::InitAsDefaultInstance() {
}
class CGetSpaceDraftList::_Internal {
 public:
};

CGetSpaceDraftList::CGetSpaceDraftList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.CGetSpaceDraftList)
}
CGetSpaceDraftList::CGetSpaceDraftList(const CGetSpaceDraftList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curpage_, &from.curpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagelimit_) -
    reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
  // @@protoc_insertion_point(copy_constructor:spaceDraft.CGetSpaceDraftList)
}

void CGetSpaceDraftList::SharedCtor() {
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
}

CGetSpaceDraftList::~CGetSpaceDraftList() {
  // @@protoc_insertion_point(destructor:spaceDraft.CGetSpaceDraftList)
  SharedDtor();
}

void CGetSpaceDraftList::SharedDtor() {
}

void CGetSpaceDraftList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetSpaceDraftList& CGetSpaceDraftList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetSpaceDraftList_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void CGetSpaceDraftList::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.CGetSpaceDraftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
  _internal_metadata_.Clear();
}

const char* CGetSpaceDraftList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 curPage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetSpaceDraftList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.CGetSpaceDraftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pagelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.CGetSpaceDraftList)
  return target;
}

size_t CGetSpaceDraftList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.CGetSpaceDraftList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetSpaceDraftList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.CGetSpaceDraftList)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetSpaceDraftList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetSpaceDraftList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.CGetSpaceDraftList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.CGetSpaceDraftList)
    MergeFrom(*source);
  }
}

void CGetSpaceDraftList::MergeFrom(const CGetSpaceDraftList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.CGetSpaceDraftList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
}

void CGetSpaceDraftList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.CGetSpaceDraftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetSpaceDraftList::CopyFrom(const CGetSpaceDraftList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.CGetSpaceDraftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetSpaceDraftList::IsInitialized() const {
  return true;
}

void CGetSpaceDraftList::InternalSwap(CGetSpaceDraftList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetSpaceDraftList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpaceDraft::InitAsDefaultInstance() {
}
class SpaceDraft::_Internal {
 public:
};

SpaceDraft::SpaceDraft()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.SpaceDraft)
}
SpaceDraft::SpaceDraft(const SpaceDraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  squarecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_squarecover().empty()) {
    squarecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.squarecover_);
  }
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_configurl().empty()) {
    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rule().empty()) {
    rule_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_);
  }
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverluaurl().empty()) {
    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientluaurl().empty()) {
    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdat().empty()) {
    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  updateat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updateat().empty()) {
    updateat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.updateat_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isopen_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isopen_));
  // @@protoc_insertion_point(copy_constructor:spaceDraft.SpaceDraft)
}

void SpaceDraft::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpaceDraft_spaceDraft_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  squarecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isopen_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isopen_));
}

SpaceDraft::~SpaceDraft() {
  // @@protoc_insertion_point(destructor:spaceDraft.SpaceDraft)
  SharedDtor();
}

void SpaceDraft::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  squarecover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpaceDraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpaceDraft& SpaceDraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpaceDraft_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void SpaceDraft::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.SpaceDraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  squarecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isopen_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isopen_));
  _internal_metadata_.Clear();
}

const char* SpaceDraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 createUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          createuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          spaceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceBackpackId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          spacebackpackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string squareCover = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_squarecover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.squareCover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string configUrl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_configurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.configUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rule = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_rule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.rule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isCollect = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          iscollect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isRecreation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          isrecreation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isCopy = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          iscopy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isOpen = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          isopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerLuaUrl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_serverluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.ServerLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ClientLuaUrl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_clientluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.ClientLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdAt = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_createdat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.createdAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updateAt = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_updateat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SpaceDraft.updateAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpaceDraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.SpaceDraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 createUid = 2;
  if (this->createuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_createuid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 spaceId = 4;
  if (this->spaceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_spaceid(), target);
  }

  // int32 spaceBackpackId = 5;
  if (this->spacebackpackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_spacebackpackid(), target);
  }

  // string cover = 6;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.cover");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cover(), target);
  }

  // string squareCover = 7;
  if (this->squarecover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_squarecover().data(), static_cast<int>(this->_internal_squarecover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.squareCover");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_squarecover(), target);
  }

  // string configUrl = 8;
  if (this->configurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configurl().data(), static_cast<int>(this->_internal_configurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.configUrl");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_configurl(), target);
  }

  // string desc = 9;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.desc");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_desc(), target);
  }

  // string rule = 10;
  if (this->rule().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rule().data(), static_cast<int>(this->_internal_rule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.rule");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_rule(), target);
  }

  // int32 isCollect = 11;
  if (this->iscollect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_iscollect(), target);
  }

  // int32 isRecreation = 12;
  if (this->isrecreation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_isrecreation(), target);
  }

  // int32 isCopy = 13;
  if (this->iscopy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_iscopy(), target);
  }

  // int32 isOpen = 14;
  if (this->isopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_isopen(), target);
  }

  // string ServerLuaUrl = 15;
  if (this->serverluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverluaurl().data(), static_cast<int>(this->_internal_serverluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.ServerLuaUrl");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_serverluaurl(), target);
  }

  // string ClientLuaUrl = 16;
  if (this->clientluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientluaurl().data(), static_cast<int>(this->_internal_clientluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.ClientLuaUrl");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_clientluaurl(), target);
  }

  // string createdAt = 17;
  if (this->createdat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdat().data(), static_cast<int>(this->_internal_createdat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.createdAt");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_createdat(), target);
  }

  // string updateAt = 18;
  if (this->updateat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updateat().data(), static_cast<int>(this->_internal_updateat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SpaceDraft.updateAt");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_updateat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.SpaceDraft)
  return target;
}

size_t SpaceDraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.SpaceDraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cover = 6;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // string squareCover = 7;
  if (this->squarecover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_squarecover());
  }

  // string configUrl = 8;
  if (this->configurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configurl());
  }

  // string desc = 9;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string rule = 10;
  if (this->rule().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rule());
  }

  // string ServerLuaUrl = 15;
  if (this->serverluaurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverluaurl());
  }

  // string ClientLuaUrl = 16;
  if (this->clientluaurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientluaurl());
  }

  // string createdAt = 17;
  if (this->createdat().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdat());
  }

  // string updateAt = 18;
  if (this->updateat().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updateat());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 createUid = 2;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_createuid());
  }

  // int32 spaceId = 4;
  if (this->spaceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spaceid());
  }

  // int32 spaceBackpackId = 5;
  if (this->spacebackpackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacebackpackid());
  }

  // int32 isCollect = 11;
  if (this->iscollect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iscollect());
  }

  // int32 isRecreation = 12;
  if (this->isrecreation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isrecreation());
  }

  // int32 isCopy = 13;
  if (this->iscopy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iscopy());
  }

  // int32 isOpen = 14;
  if (this->isopen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isopen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpaceDraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.SpaceDraft)
  GOOGLE_DCHECK_NE(&from, this);
  const SpaceDraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpaceDraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.SpaceDraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.SpaceDraft)
    MergeFrom(*source);
  }
}

void SpaceDraft::MergeFrom(const SpaceDraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.SpaceDraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.squarecover().size() > 0) {

    squarecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.squarecover_);
  }
  if (from.configurl().size() > 0) {

    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.rule().size() > 0) {

    rule_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_);
  }
  if (from.serverluaurl().size() > 0) {

    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  if (from.clientluaurl().size() > 0) {

    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  if (from.createdat().size() > 0) {

    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  if (from.updateat().size() > 0) {

    updateat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.updateat_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.createuid() != 0) {
    _internal_set_createuid(from._internal_createuid());
  }
  if (from.spaceid() != 0) {
    _internal_set_spaceid(from._internal_spaceid());
  }
  if (from.spacebackpackid() != 0) {
    _internal_set_spacebackpackid(from._internal_spacebackpackid());
  }
  if (from.iscollect() != 0) {
    _internal_set_iscollect(from._internal_iscollect());
  }
  if (from.isrecreation() != 0) {
    _internal_set_isrecreation(from._internal_isrecreation());
  }
  if (from.iscopy() != 0) {
    _internal_set_iscopy(from._internal_iscopy());
  }
  if (from.isopen() != 0) {
    _internal_set_isopen(from._internal_isopen());
  }
}

void SpaceDraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.SpaceDraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpaceDraft::CopyFrom(const SpaceDraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.SpaceDraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpaceDraft::IsInitialized() const {
  return true;
}

void SpaceDraft::InternalSwap(SpaceDraft* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  squarecover_.Swap(&other->squarecover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  configurl_.Swap(&other->configurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rule_.Swap(&other->rule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverluaurl_.Swap(&other->serverluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientluaurl_.Swap(&other->clientluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdat_.Swap(&other->createdat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  updateat_.Swap(&other->updateat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(createuid_, other->createuid_);
  swap(spaceid_, other->spaceid_);
  swap(spacebackpackid_, other->spacebackpackid_);
  swap(iscollect_, other->iscollect_);
  swap(isrecreation_, other->isrecreation_);
  swap(iscopy_, other->iscopy_);
  swap(isopen_, other->isopen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpaceDraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetSpaceDraftList::InitAsDefaultInstance() {
}
class SGetSpaceDraftList::_Internal {
 public:
};

SGetSpaceDraftList::SGetSpaceDraftList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.SGetSpaceDraftList)
}
SGetSpaceDraftList::SGetSpaceDraftList(const SGetSpaceDraftList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&curpage_, &from.curpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&spacenum_) -
    reinterpret_cast<char*>(&curpage_)) + sizeof(spacenum_));
  // @@protoc_insertion_point(copy_constructor:spaceDraft.SGetSpaceDraftList)
}

void SGetSpaceDraftList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGetSpaceDraftList_spaceDraft_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacenum_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(spacenum_));
}

SGetSpaceDraftList::~SGetSpaceDraftList() {
  // @@protoc_insertion_point(destructor:spaceDraft.SGetSpaceDraftList)
  SharedDtor();
}

void SGetSpaceDraftList::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGetSpaceDraftList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetSpaceDraftList& SGetSpaceDraftList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetSpaceDraftList_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void SGetSpaceDraftList::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.SGetSpaceDraftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacenum_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(spacenum_));
  _internal_metadata_.Clear();
}

const char* SGetSpaceDraftList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .spaceDraft.SpaceDraft list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SGetSpaceDraftList.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curPage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          spacenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetSpaceDraftList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.SGetSpaceDraftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spaceDraft.SpaceDraft list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SGetSpaceDraftList.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curpage(), target);
  }

  // int32 spaceNum = 4;
  if (this->spacenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_spacenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.SGetSpaceDraftList)
  return target;
}

size_t SGetSpaceDraftList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.SGetSpaceDraftList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spaceDraft.SpaceDraft list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 spaceNum = 4;
  if (this->spacenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetSpaceDraftList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.SGetSpaceDraftList)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetSpaceDraftList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetSpaceDraftList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.SGetSpaceDraftList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.SGetSpaceDraftList)
    MergeFrom(*source);
  }
}

void SGetSpaceDraftList::MergeFrom(const SGetSpaceDraftList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.SGetSpaceDraftList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.spacenum() != 0) {
    _internal_set_spacenum(from._internal_spacenum());
  }
}

void SGetSpaceDraftList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.SGetSpaceDraftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetSpaceDraftList::CopyFrom(const SGetSpaceDraftList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.SGetSpaceDraftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetSpaceDraftList::IsInitialized() const {
  return true;
}

void SGetSpaceDraftList::InternalSwap(SGetSpaceDraftList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(curpage_, other->curpage_);
  swap(spacenum_, other->spacenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetSpaceDraftList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSpaceDraftDetail::InitAsDefaultInstance() {
}
class CSpaceDraftDetail::_Internal {
 public:
};

CSpaceDraftDetail::CSpaceDraftDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.CSpaceDraftDetail)
}
CSpaceDraftDetail::CSpaceDraftDetail(const CSpaceDraftDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacedraftid_ = from.spacedraftid_;
  // @@protoc_insertion_point(copy_constructor:spaceDraft.CSpaceDraftDetail)
}

void CSpaceDraftDetail::SharedCtor() {
  spacedraftid_ = 0;
}

CSpaceDraftDetail::~CSpaceDraftDetail() {
  // @@protoc_insertion_point(destructor:spaceDraft.CSpaceDraftDetail)
  SharedDtor();
}

void CSpaceDraftDetail::SharedDtor() {
}

void CSpaceDraftDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSpaceDraftDetail& CSpaceDraftDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSpaceDraftDetail_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void CSpaceDraftDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.CSpaceDraftDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacedraftid_ = 0;
  _internal_metadata_.Clear();
}

const char* CSpaceDraftDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 spaceDraftId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spacedraftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSpaceDraftDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.CSpaceDraftDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spaceDraftId = 1;
  if (this->spacedraftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_spacedraftid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.CSpaceDraftDetail)
  return target;
}

size_t CSpaceDraftDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.CSpaceDraftDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 spaceDraftId = 1;
  if (this->spacedraftid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacedraftid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSpaceDraftDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.CSpaceDraftDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CSpaceDraftDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSpaceDraftDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.CSpaceDraftDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.CSpaceDraftDetail)
    MergeFrom(*source);
  }
}

void CSpaceDraftDetail::MergeFrom(const CSpaceDraftDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.CSpaceDraftDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spacedraftid() != 0) {
    _internal_set_spacedraftid(from._internal_spacedraftid());
  }
}

void CSpaceDraftDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.CSpaceDraftDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSpaceDraftDetail::CopyFrom(const CSpaceDraftDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.CSpaceDraftDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSpaceDraftDetail::IsInitialized() const {
  return true;
}

void CSpaceDraftDetail::InternalSwap(CSpaceDraftDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(spacedraftid_, other->spacedraftid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSpaceDraftDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceDraftDetail::InitAsDefaultInstance() {
}
class SSpaceDraftDetail::_Internal {
 public:
};

SSpaceDraftDetail::SSpaceDraftDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.SSpaceDraftDetail)
}
SSpaceDraftDetail::SSpaceDraftDetail(const SSpaceDraftDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  squarecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_squarecover().empty()) {
    squarecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.squarecover_);
  }
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_configurl().empty()) {
    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rule().empty()) {
    rule_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_);
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverluaurl().empty()) {
    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientluaurl().empty()) {
    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&spacebackpackid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(spacebackpackid_));
  // @@protoc_insertion_point(copy_constructor:spaceDraft.SSpaceDraftDetail)
}

void SSpaceDraftDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSpaceDraftDetail_spaceDraft_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  squarecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacebackpackid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spacebackpackid_));
}

SSpaceDraftDetail::~SSpaceDraftDetail() {
  // @@protoc_insertion_point(destructor:spaceDraft.SSpaceDraftDetail)
  SharedDtor();
}

void SSpaceDraftDetail::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  squarecover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSpaceDraftDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceDraftDetail& SSpaceDraftDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceDraftDetail_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void SSpaceDraftDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.SSpaceDraftDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  squarecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacebackpackid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spacebackpackid_));
  _internal_metadata_.Clear();
}

const char* SSpaceDraftDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 createUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          createuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSpaceDraftDetail.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          spaceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceBackpackId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          spacebackpackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSpaceDraftDetail.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string squareCover = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_squarecover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSpaceDraftDetail.squareCover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string configUrl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_configurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSpaceDraftDetail.configUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSpaceDraftDetail.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rule = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_rule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSpaceDraftDetail.rule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSpaceDraftDetail.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerLuaUrl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_serverluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSpaceDraftDetail.ServerLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ClientLuaUrl = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_clientluaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSpaceDraftDetail.ClientLuaUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceDraftDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.SSpaceDraftDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 createUid = 2;
  if (this->createuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_createuid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSpaceDraftDetail.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 spaceId = 4;
  if (this->spaceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_spaceid(), target);
  }

  // int32 spaceBackpackId = 5;
  if (this->spacebackpackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_spacebackpackid(), target);
  }

  // string cover = 6;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSpaceDraftDetail.cover");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cover(), target);
  }

  // string squareCover = 7;
  if (this->squarecover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_squarecover().data(), static_cast<int>(this->_internal_squarecover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSpaceDraftDetail.squareCover");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_squarecover(), target);
  }

  // string configUrl = 8;
  if (this->configurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configurl().data(), static_cast<int>(this->_internal_configurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSpaceDraftDetail.configUrl");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_configurl(), target);
  }

  // string desc = 9;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSpaceDraftDetail.desc");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_desc(), target);
  }

  // string rule = 10;
  if (this->rule().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rule().data(), static_cast<int>(this->_internal_rule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSpaceDraftDetail.rule");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_rule(), target);
  }

  // string resource = 11;
  if (this->resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSpaceDraftDetail.resource");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_resource(), target);
  }

  // string ServerLuaUrl = 12;
  if (this->serverluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverluaurl().data(), static_cast<int>(this->_internal_serverluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSpaceDraftDetail.ServerLuaUrl");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_serverluaurl(), target);
  }

  // string ClientLuaUrl = 13;
  if (this->clientluaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientluaurl().data(), static_cast<int>(this->_internal_clientluaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSpaceDraftDetail.ClientLuaUrl");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_clientluaurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.SSpaceDraftDetail)
  return target;
}

size_t SSpaceDraftDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.SSpaceDraftDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cover = 6;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // string squareCover = 7;
  if (this->squarecover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_squarecover());
  }

  // string configUrl = 8;
  if (this->configurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configurl());
  }

  // string desc = 9;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string rule = 10;
  if (this->rule().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rule());
  }

  // string resource = 11;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string ServerLuaUrl = 12;
  if (this->serverluaurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverluaurl());
  }

  // string ClientLuaUrl = 13;
  if (this->clientluaurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientluaurl());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 createUid = 2;
  if (this->createuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_createuid());
  }

  // int32 spaceId = 4;
  if (this->spaceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spaceid());
  }

  // int32 spaceBackpackId = 5;
  if (this->spacebackpackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacebackpackid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceDraftDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.SSpaceDraftDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceDraftDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceDraftDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.SSpaceDraftDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.SSpaceDraftDetail)
    MergeFrom(*source);
  }
}

void SSpaceDraftDetail::MergeFrom(const SSpaceDraftDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.SSpaceDraftDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.squarecover().size() > 0) {

    squarecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.squarecover_);
  }
  if (from.configurl().size() > 0) {

    configurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configurl_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.rule().size() > 0) {

    rule_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_);
  }
  if (from.resource().size() > 0) {

    resource_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  if (from.serverluaurl().size() > 0) {

    serverluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serverluaurl_);
  }
  if (from.clientluaurl().size() > 0) {

    clientluaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientluaurl_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.createuid() != 0) {
    _internal_set_createuid(from._internal_createuid());
  }
  if (from.spaceid() != 0) {
    _internal_set_spaceid(from._internal_spaceid());
  }
  if (from.spacebackpackid() != 0) {
    _internal_set_spacebackpackid(from._internal_spacebackpackid());
  }
}

void SSpaceDraftDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.SSpaceDraftDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceDraftDetail::CopyFrom(const SSpaceDraftDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.SSpaceDraftDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceDraftDetail::IsInitialized() const {
  return true;
}

void SSpaceDraftDetail::InternalSwap(SSpaceDraftDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  squarecover_.Swap(&other->squarecover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  configurl_.Swap(&other->configurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rule_.Swap(&other->rule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resource_.Swap(&other->resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverluaurl_.Swap(&other->serverluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientluaurl_.Swap(&other->clientluaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(createuid_, other->createuid_);
  swap(spaceid_, other->spaceid_);
  swap(spacebackpackid_, other->spacebackpackid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceDraftDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSendInviteTrial::InitAsDefaultInstance() {
}
class CSendInviteTrial::_Internal {
 public:
};

CSendInviteTrial::CSendInviteTrial()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.CSendInviteTrial)
}
CSendInviteTrial::CSendInviteTrial(const CSendInviteTrial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inviteeuid_ = from.inviteeuid_;
  // @@protoc_insertion_point(copy_constructor:spaceDraft.CSendInviteTrial)
}

void CSendInviteTrial::SharedCtor() {
  inviteeuid_ = 0;
}

CSendInviteTrial::~CSendInviteTrial() {
  // @@protoc_insertion_point(destructor:spaceDraft.CSendInviteTrial)
  SharedDtor();
}

void CSendInviteTrial::SharedDtor() {
}

void CSendInviteTrial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSendInviteTrial& CSendInviteTrial::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSendInviteTrial_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void CSendInviteTrial::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.CSendInviteTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inviteeuid_ = 0;
  _internal_metadata_.Clear();
}

const char* CSendInviteTrial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 inviteeUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          inviteeuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSendInviteTrial::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.CSendInviteTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inviteeUid = 1;
  if (this->inviteeuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_inviteeuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.CSendInviteTrial)
  return target;
}

size_t CSendInviteTrial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.CSendInviteTrial)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 inviteeUid = 1;
  if (this->inviteeuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inviteeuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSendInviteTrial::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.CSendInviteTrial)
  GOOGLE_DCHECK_NE(&from, this);
  const CSendInviteTrial* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSendInviteTrial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.CSendInviteTrial)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.CSendInviteTrial)
    MergeFrom(*source);
  }
}

void CSendInviteTrial::MergeFrom(const CSendInviteTrial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.CSendInviteTrial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inviteeuid() != 0) {
    _internal_set_inviteeuid(from._internal_inviteeuid());
  }
}

void CSendInviteTrial::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.CSendInviteTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSendInviteTrial::CopyFrom(const CSendInviteTrial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.CSendInviteTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSendInviteTrial::IsInitialized() const {
  return true;
}

void CSendInviteTrial::InternalSwap(CSendInviteTrial* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(inviteeuid_, other->inviteeuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSendInviteTrial::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSendInviteTrial::InitAsDefaultInstance() {
}
class SSendInviteTrial::_Internal {
 public:
};

SSendInviteTrial::SSendInviteTrial()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.SSendInviteTrial)
}
SSendInviteTrial::SSendInviteTrial(const SSendInviteTrial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  inviteavatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inviteavatar().empty()) {
    inviteavatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteavatar_);
  }
  invitenick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitenick().empty()) {
    invitenick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitenick_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&inviteeuid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(inviteeuid_));
  // @@protoc_insertion_point(copy_constructor:spaceDraft.SSendInviteTrial)
}

void SSendInviteTrial::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSendInviteTrial_spaceDraft_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviteavatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitenick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inviteeuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(inviteeuid_));
}

SSendInviteTrial::~SSendInviteTrial() {
  // @@protoc_insertion_point(destructor:spaceDraft.SSendInviteTrial)
  SharedDtor();
}

void SSendInviteTrial::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviteavatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitenick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSendInviteTrial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSendInviteTrial& SSendInviteTrial::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSendInviteTrial_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void SSendInviteTrial::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.SSendInviteTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviteavatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitenick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inviteeuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(inviteeuid_));
  _internal_metadata_.Clear();
}

const char* SSendInviteTrial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSendInviteTrial.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inviteAvatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_inviteavatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSendInviteTrial.inviteAvatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inviteUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          inviteuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inviteNick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_invitenick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SSendInviteTrial.inviteNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceDraftId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          spacedraftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inviteeUid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          inviteeuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSendInviteTrial::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.SSendInviteTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSendInviteTrial.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string inviteAvatar = 3;
  if (this->inviteavatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inviteavatar().data(), static_cast<int>(this->_internal_inviteavatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSendInviteTrial.inviteAvatar");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_inviteavatar(), target);
  }

  // int32 inviteUid = 4;
  if (this->inviteuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_inviteuid(), target);
  }

  // string inviteNick = 5;
  if (this->invitenick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitenick().data(), static_cast<int>(this->_internal_invitenick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SSendInviteTrial.inviteNick");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_invitenick(), target);
  }

  // int32 spaceDraftId = 6;
  if (this->spacedraftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_spacedraftid(), target);
  }

  // int32 inviteeUid = 7;
  if (this->inviteeuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inviteeuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.SSendInviteTrial)
  return target;
}

size_t SSendInviteTrial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.SSendInviteTrial)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string inviteAvatar = 3;
  if (this->inviteavatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inviteavatar());
  }

  // string inviteNick = 5;
  if (this->invitenick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitenick());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 inviteUid = 4;
  if (this->inviteuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inviteuid());
  }

  // int32 spaceDraftId = 6;
  if (this->spacedraftid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacedraftid());
  }

  // int32 inviteeUid = 7;
  if (this->inviteeuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inviteeuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSendInviteTrial::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.SSendInviteTrial)
  GOOGLE_DCHECK_NE(&from, this);
  const SSendInviteTrial* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSendInviteTrial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.SSendInviteTrial)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.SSendInviteTrial)
    MergeFrom(*source);
  }
}

void SSendInviteTrial::MergeFrom(const SSendInviteTrial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.SSendInviteTrial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.inviteavatar().size() > 0) {

    inviteavatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteavatar_);
  }
  if (from.invitenick().size() > 0) {

    invitenick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitenick_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.inviteuid() != 0) {
    _internal_set_inviteuid(from._internal_inviteuid());
  }
  if (from.spacedraftid() != 0) {
    _internal_set_spacedraftid(from._internal_spacedraftid());
  }
  if (from.inviteeuid() != 0) {
    _internal_set_inviteeuid(from._internal_inviteeuid());
  }
}

void SSendInviteTrial::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.SSendInviteTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSendInviteTrial::CopyFrom(const SSendInviteTrial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.SSendInviteTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSendInviteTrial::IsInitialized() const {
  return true;
}

void SSendInviteTrial::InternalSwap(SSendInviteTrial* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inviteavatar_.Swap(&other->inviteavatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invitenick_.Swap(&other->invitenick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(inviteuid_, other->inviteuid_);
  swap(spacedraftid_, other->spacedraftid_);
  swap(inviteeuid_, other->inviteeuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSendInviteTrial::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCheckInviteTrial::InitAsDefaultInstance() {
}
class CCheckInviteTrial::_Internal {
 public:
};

CCheckInviteTrial::CCheckInviteTrial()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.CCheckInviteTrial)
}
CCheckInviteTrial::CCheckInviteTrial(const CCheckInviteTrial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spacedraftid_, &from.spacedraftid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inviteuid_) -
    reinterpret_cast<char*>(&spacedraftid_)) + sizeof(inviteuid_));
  // @@protoc_insertion_point(copy_constructor:spaceDraft.CCheckInviteTrial)
}

void CCheckInviteTrial::SharedCtor() {
  ::memset(&spacedraftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inviteuid_) -
      reinterpret_cast<char*>(&spacedraftid_)) + sizeof(inviteuid_));
}

CCheckInviteTrial::~CCheckInviteTrial() {
  // @@protoc_insertion_point(destructor:spaceDraft.CCheckInviteTrial)
  SharedDtor();
}

void CCheckInviteTrial::SharedDtor() {
}

void CCheckInviteTrial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCheckInviteTrial& CCheckInviteTrial::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCheckInviteTrial_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void CCheckInviteTrial::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.CCheckInviteTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&spacedraftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inviteuid_) -
      reinterpret_cast<char*>(&spacedraftid_)) + sizeof(inviteuid_));
  _internal_metadata_.Clear();
}

const char* CCheckInviteTrial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 spaceDraftId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spacedraftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inviteUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inviteuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCheckInviteTrial::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.CCheckInviteTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spaceDraftId = 1;
  if (this->spacedraftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_spacedraftid(), target);
  }

  // int32 inviteUid = 2;
  if (this->inviteuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_inviteuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.CCheckInviteTrial)
  return target;
}

size_t CCheckInviteTrial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.CCheckInviteTrial)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 spaceDraftId = 1;
  if (this->spacedraftid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacedraftid());
  }

  // int32 inviteUid = 2;
  if (this->inviteuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inviteuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCheckInviteTrial::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.CCheckInviteTrial)
  GOOGLE_DCHECK_NE(&from, this);
  const CCheckInviteTrial* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCheckInviteTrial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.CCheckInviteTrial)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.CCheckInviteTrial)
    MergeFrom(*source);
  }
}

void CCheckInviteTrial::MergeFrom(const CCheckInviteTrial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.CCheckInviteTrial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spacedraftid() != 0) {
    _internal_set_spacedraftid(from._internal_spacedraftid());
  }
  if (from.inviteuid() != 0) {
    _internal_set_inviteuid(from._internal_inviteuid());
  }
}

void CCheckInviteTrial::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.CCheckInviteTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCheckInviteTrial::CopyFrom(const CCheckInviteTrial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.CCheckInviteTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCheckInviteTrial::IsInitialized() const {
  return true;
}

void CCheckInviteTrial::InternalSwap(CCheckInviteTrial* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(spacedraftid_, other->spacedraftid_);
  swap(inviteuid_, other->inviteuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCheckInviteTrial::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCheckInviteTrial::InitAsDefaultInstance() {
}
class SCheckInviteTrial::_Internal {
 public:
};

SCheckInviteTrial::SCheckInviteTrial()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.SCheckInviteTrial)
}
SCheckInviteTrial::SCheckInviteTrial(const SCheckInviteTrial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:spaceDraft.SCheckInviteTrial)
}

void SCheckInviteTrial::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCheckInviteTrial_spaceDraft_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SCheckInviteTrial::~SCheckInviteTrial() {
  // @@protoc_insertion_point(destructor:spaceDraft.SCheckInviteTrial)
  SharedDtor();
}

void SCheckInviteTrial::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCheckInviteTrial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCheckInviteTrial& SCheckInviteTrial::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCheckInviteTrial_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void SCheckInviteTrial::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.SCheckInviteTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SCheckInviteTrial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceDraft.SCheckInviteTrial.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCheckInviteTrial::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.SCheckInviteTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceDraft.SCheckInviteTrial.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.SCheckInviteTrial)
  return target;
}

size_t SCheckInviteTrial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.SCheckInviteTrial)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCheckInviteTrial::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.SCheckInviteTrial)
  GOOGLE_DCHECK_NE(&from, this);
  const SCheckInviteTrial* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCheckInviteTrial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.SCheckInviteTrial)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.SCheckInviteTrial)
    MergeFrom(*source);
  }
}

void SCheckInviteTrial::MergeFrom(const SCheckInviteTrial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.SCheckInviteTrial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SCheckInviteTrial::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.SCheckInviteTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCheckInviteTrial::CopyFrom(const SCheckInviteTrial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.SCheckInviteTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCheckInviteTrial::IsInitialized() const {
  return true;
}

void SCheckInviteTrial::InternalSwap(SCheckInviteTrial* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCheckInviteTrial::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SInviteTrialEnd::InitAsDefaultInstance() {
}
class SInviteTrialEnd::_Internal {
 public:
};

SInviteTrialEnd::SInviteTrialEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceDraft.SInviteTrialEnd)
}
SInviteTrialEnd::SInviteTrialEnd(const SInviteTrialEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:spaceDraft.SInviteTrialEnd)
}

void SInviteTrialEnd::SharedCtor() {
  state_ = 0;
}

SInviteTrialEnd::~SInviteTrialEnd() {
  // @@protoc_insertion_point(destructor:spaceDraft.SInviteTrialEnd)
  SharedDtor();
}

void SInviteTrialEnd::SharedDtor() {
}

void SInviteTrialEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SInviteTrialEnd& SInviteTrialEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SInviteTrialEnd_spaceDraft_2eproto.base);
  return *internal_default_instance();
}


void SInviteTrialEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceDraft.SInviteTrialEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SInviteTrialEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SInviteTrialEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceDraft.SInviteTrialEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceDraft.SInviteTrialEnd)
  return target;
}

size_t SInviteTrialEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceDraft.SInviteTrialEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SInviteTrialEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceDraft.SInviteTrialEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SInviteTrialEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SInviteTrialEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceDraft.SInviteTrialEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceDraft.SInviteTrialEnd)
    MergeFrom(*source);
  }
}

void SInviteTrialEnd::MergeFrom(const SInviteTrialEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceDraft.SInviteTrialEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SInviteTrialEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceDraft.SInviteTrialEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInviteTrialEnd::CopyFrom(const SInviteTrialEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceDraft.SInviteTrialEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInviteTrialEnd::IsInitialized() const {
  return true;
}

void SInviteTrialEnd::InternalSwap(SInviteTrialEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SInviteTrialEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spaceDraft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::spaceDraft::CGetSpaceDraftList* Arena::CreateMaybeMessage< ::spaceDraft::CGetSpaceDraftList >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::CGetSpaceDraftList >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceDraft::SpaceDraft* Arena::CreateMaybeMessage< ::spaceDraft::SpaceDraft >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::SpaceDraft >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceDraft::SGetSpaceDraftList* Arena::CreateMaybeMessage< ::spaceDraft::SGetSpaceDraftList >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::SGetSpaceDraftList >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceDraft::CSpaceDraftDetail* Arena::CreateMaybeMessage< ::spaceDraft::CSpaceDraftDetail >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::CSpaceDraftDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceDraft::SSpaceDraftDetail* Arena::CreateMaybeMessage< ::spaceDraft::SSpaceDraftDetail >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::SSpaceDraftDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceDraft::CSendInviteTrial* Arena::CreateMaybeMessage< ::spaceDraft::CSendInviteTrial >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::CSendInviteTrial >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceDraft::SSendInviteTrial* Arena::CreateMaybeMessage< ::spaceDraft::SSendInviteTrial >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::SSendInviteTrial >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceDraft::CCheckInviteTrial* Arena::CreateMaybeMessage< ::spaceDraft::CCheckInviteTrial >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::CCheckInviteTrial >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceDraft::SCheckInviteTrial* Arena::CreateMaybeMessage< ::spaceDraft::SCheckInviteTrial >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::SCheckInviteTrial >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceDraft::SInviteTrialEnd* Arena::CreateMaybeMessage< ::spaceDraft::SInviteTrialEnd >(Arena* arena) {
  return Arena::CreateInternal< ::spaceDraft::SInviteTrialEnd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
