// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BChatListInfo_chat_2eproto;
namespace chat {
class CChatListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CChatList> _instance;
} _CChatList_default_instance_;
class SChatListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SChatList> _instance;
} _SChatList_default_instance_;
class BChatListInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BChatListInfo> _instance;
} _BChatListInfo_default_instance_;
class CChatDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CChatDetail> _instance;
} _CChatDetail_default_instance_;
class SChatDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SChatDetail> _instance;
} _SChatDetail_default_instance_;
class CChatSendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CChatSend> _instance;
} _CChatSend_default_instance_;
class SChatSendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SChatSend> _instance;
} _SChatSend_default_instance_;
}  // namespace chat
static void InitDefaultsscc_info_BChatListInfo_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_BChatListInfo_default_instance_;
    new (ptr) ::chat::BChatListInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::BChatListInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BChatListInfo_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BChatListInfo_chat_2eproto}, {}};

static void InitDefaultsscc_info_CChatDetail_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_CChatDetail_default_instance_;
    new (ptr) ::chat::CChatDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::CChatDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CChatDetail_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CChatDetail_chat_2eproto}, {}};

static void InitDefaultsscc_info_CChatList_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_CChatList_default_instance_;
    new (ptr) ::chat::CChatList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::CChatList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CChatList_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CChatList_chat_2eproto}, {}};

static void InitDefaultsscc_info_CChatSend_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_CChatSend_default_instance_;
    new (ptr) ::chat::CChatSend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::CChatSend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CChatSend_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CChatSend_chat_2eproto}, {}};

static void InitDefaultsscc_info_SChatDetail_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_SChatDetail_default_instance_;
    new (ptr) ::chat::SChatDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::SChatDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SChatDetail_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SChatDetail_chat_2eproto}, {
      &scc_info_BChatListInfo_chat_2eproto.base,}};

static void InitDefaultsscc_info_SChatList_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_SChatList_default_instance_;
    new (ptr) ::chat::SChatList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::SChatList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SChatList_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SChatList_chat_2eproto}, {
      &scc_info_BChatListInfo_chat_2eproto.base,}};

static void InitDefaultsscc_info_SChatSend_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_SChatSend_default_instance_;
    new (ptr) ::chat::SChatSend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::SChatSend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SChatSend_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SChatSend_chat_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chat_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat::CChatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::CChatList, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat::SChatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::SChatList, type_),
  PROTOBUF_FIELD_OFFSET(::chat::SChatList, infolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat::BChatListInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::BChatListInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::chat::BChatListInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::chat::BChatListInfo, headpic_),
  PROTOBUF_FIELD_OFFSET(::chat::BChatListInfo, imaccount_),
  PROTOBUF_FIELD_OFFSET(::chat::BChatListInfo, followstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat::CChatDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::CChatDetail, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat::SChatDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::SChatDetail, info_),
  PROTOBUF_FIELD_OFFSET(::chat::SChatDetail, houseid_),
  PROTOBUF_FIELD_OFFSET(::chat::SChatDetail, spacename_),
  PROTOBUF_FIELD_OFFSET(::chat::SChatDetail, seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat::CChatSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::CChatSend, touid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat::SChatSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::SChatSend, followstatus_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chat::CChatList)},
  { 6, -1, sizeof(::chat::SChatList)},
  { 13, -1, sizeof(::chat::BChatListInfo)},
  { 23, -1, sizeof(::chat::CChatDetail)},
  { 29, -1, sizeof(::chat::SChatDetail)},
  { 38, -1, sizeof(::chat::CChatSend)},
  { 44, -1, sizeof(::chat::SChatSend)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_CChatList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_SChatList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_BChatListInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_CChatDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_SChatDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_CChatSend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_SChatSend_default_instance_),
};

const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nchat.proto\022\004chat\"\031\n\tCChatList\022\014\n\004type\030"
  "\001 \001(\005\"@\n\tSChatList\022\014\n\004type\030\001 \001(\005\022%\n\010info"
  "List\030\002 \003(\0132\023.chat.BChatListInfo\"d\n\rBChat"
  "ListInfo\022\013\n\003uid\030\001 \001(\005\022\014\n\004nick\030\002 \001(\t\022\017\n\007h"
  "eadPic\030\003 \001(\t\022\021\n\timAccount\030\004 \001(\t\022\024\n\014follo"
  "wStatus\030\005 \001(\005\"\032\n\013CChatDetail\022\013\n\003uid\030\001 \001("
  "\005\"a\n\013SChatDetail\022!\n\004info\030\001 \001(\0132\023.chat.BC"
  "hatListInfo\022\017\n\007houseId\030\002 \001(\005\022\021\n\tspaceNam"
  "e\030\003 \001(\t\022\013\n\003seq\030\004 \001(\005\"\032\n\tCChatSend\022\r\n\005toU"
  "id\030\001 \001(\005\"!\n\tSChatSend\022\024\n\014followStatus\030\001 "
  "\001(\005B)\n\030com.dayou.space.protobufB\004ChatZ\007."
  "/pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2eproto_sccs[7] = {
  &scc_info_BChatListInfo_chat_2eproto.base,
  &scc_info_CChatDetail_chat_2eproto.base,
  &scc_info_CChatList_chat_2eproto.base,
  &scc_info_CChatSend_chat_2eproto.base,
  &scc_info_SChatDetail_chat_2eproto.base,
  &scc_info_SChatList_chat_2eproto.base,
  &scc_info_SChatSend_chat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2eproto_once;
static bool descriptor_table_chat_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto = {
  &descriptor_table_chat_2eproto_initialized, descriptor_table_protodef_chat_2eproto, "chat.proto", 454,
  &descriptor_table_chat_2eproto_once, descriptor_table_chat_2eproto_sccs, descriptor_table_chat_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_chat_2eproto::offsets,
  file_level_metadata_chat_2eproto, 7, file_level_enum_descriptors_chat_2eproto, file_level_service_descriptors_chat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2eproto), true);
namespace chat {

// ===================================================================

void CChatList::InitAsDefaultInstance() {
}
class CChatList::_Internal {
 public:
};

CChatList::CChatList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.CChatList)
}
CChatList::CChatList(const CChatList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:chat.CChatList)
}

void CChatList::SharedCtor() {
  type_ = 0;
}

CChatList::~CChatList() {
  // @@protoc_insertion_point(destructor:chat.CChatList)
  SharedDtor();
}

void CChatList::SharedDtor() {
}

void CChatList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CChatList& CChatList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CChatList_chat_2eproto.base);
  return *internal_default_instance();
}


void CChatList::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.CChatList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* CChatList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CChatList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.CChatList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.CChatList)
  return target;
}

size_t CChatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.CChatList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.CChatList)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CChatList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.CChatList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.CChatList)
    MergeFrom(*source);
  }
}

void CChatList::MergeFrom(const CChatList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.CChatList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CChatList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.CChatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatList::CopyFrom(const CChatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.CChatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatList::IsInitialized() const {
  return true;
}

void CChatList::InternalSwap(CChatList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SChatList::InitAsDefaultInstance() {
}
class SChatList::_Internal {
 public:
};

SChatList::SChatList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.SChatList)
}
SChatList::SChatList(const SChatList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infolist_(from.infolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:chat.SChatList)
}

void SChatList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SChatList_chat_2eproto.base);
  type_ = 0;
}

SChatList::~SChatList() {
  // @@protoc_insertion_point(destructor:chat.SChatList)
  SharedDtor();
}

void SChatList::SharedDtor() {
}

void SChatList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SChatList& SChatList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SChatList_chat_2eproto.base);
  return *internal_default_instance();
}


void SChatList::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.SChatList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infolist_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* SChatList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .chat.BChatListInfo infoList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChatList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.SChatList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .chat.BChatListInfo infoList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.SChatList)
  return target;
}

size_t SChatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.SChatList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chat.BChatListInfo infoList = 2;
  total_size += 1UL * this->_internal_infolist_size();
  for (const auto& msg : this->infolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SChatList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.SChatList)
  GOOGLE_DCHECK_NE(&from, this);
  const SChatList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SChatList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.SChatList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.SChatList)
    MergeFrom(*source);
  }
}

void SChatList::MergeFrom(const SChatList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.SChatList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infolist_.MergeFrom(from.infolist_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SChatList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.SChatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChatList::CopyFrom(const SChatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.SChatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChatList::IsInitialized() const {
  return true;
}

void SChatList::InternalSwap(SChatList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infolist_.InternalSwap(&other->infolist_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SChatList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BChatListInfo::InitAsDefaultInstance() {
}
class BChatListInfo::_Internal {
 public:
};

BChatListInfo::BChatListInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.BChatListInfo)
}
BChatListInfo::BChatListInfo(const BChatListInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headpic().empty()) {
    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  imaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imaccount().empty()) {
    imaccount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imaccount_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&followstatus_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
  // @@protoc_insertion_point(copy_constructor:chat.BChatListInfo)
}

void BChatListInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BChatListInfo_chat_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&followstatus_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
}

BChatListInfo::~BChatListInfo() {
  // @@protoc_insertion_point(destructor:chat.BChatListInfo)
  SharedDtor();
}

void BChatListInfo::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imaccount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BChatListInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BChatListInfo& BChatListInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BChatListInfo_chat_2eproto.base);
  return *internal_default_instance();
}


void BChatListInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.BChatListInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imaccount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&followstatus_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
  _internal_metadata_.Clear();
}

const char* BChatListInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.BChatListInfo.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headPic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_headpic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.BChatListInfo.headPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imAccount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_imaccount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.BChatListInfo.imAccount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 followStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          followstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BChatListInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.BChatListInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat.BChatListInfo.nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick(), target);
  }

  // string headPic = 3;
  if (this->headpic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headpic().data(), static_cast<int>(this->_internal_headpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat.BChatListInfo.headPic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_headpic(), target);
  }

  // string imAccount = 4;
  if (this->imaccount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imaccount().data(), static_cast<int>(this->_internal_imaccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat.BChatListInfo.imAccount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_imaccount(), target);
  }

  // int32 followStatus = 5;
  if (this->followstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_followstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.BChatListInfo)
  return target;
}

size_t BChatListInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.BChatListInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string headPic = 3;
  if (this->headpic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headpic());
  }

  // string imAccount = 4;
  if (this->imaccount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imaccount());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 followStatus = 5;
  if (this->followstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_followstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BChatListInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.BChatListInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BChatListInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BChatListInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.BChatListInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.BChatListInfo)
    MergeFrom(*source);
  }
}

void BChatListInfo::MergeFrom(const BChatListInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.BChatListInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.headpic().size() > 0) {

    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  if (from.imaccount().size() > 0) {

    imaccount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imaccount_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.followstatus() != 0) {
    _internal_set_followstatus(from._internal_followstatus());
  }
}

void BChatListInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.BChatListInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BChatListInfo::CopyFrom(const BChatListInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.BChatListInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BChatListInfo::IsInitialized() const {
  return true;
}

void BChatListInfo::InternalSwap(BChatListInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headpic_.Swap(&other->headpic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  imaccount_.Swap(&other->imaccount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(followstatus_, other->followstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BChatListInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CChatDetail::InitAsDefaultInstance() {
}
class CChatDetail::_Internal {
 public:
};

CChatDetail::CChatDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.CChatDetail)
}
CChatDetail::CChatDetail(const CChatDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:chat.CChatDetail)
}

void CChatDetail::SharedCtor() {
  uid_ = 0;
}

CChatDetail::~CChatDetail() {
  // @@protoc_insertion_point(destructor:chat.CChatDetail)
  SharedDtor();
}

void CChatDetail::SharedDtor() {
}

void CChatDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CChatDetail& CChatDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CChatDetail_chat_2eproto.base);
  return *internal_default_instance();
}


void CChatDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.CChatDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CChatDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CChatDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.CChatDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.CChatDetail)
  return target;
}

size_t CChatDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.CChatDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.CChatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CChatDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.CChatDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.CChatDetail)
    MergeFrom(*source);
  }
}

void CChatDetail::MergeFrom(const CChatDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.CChatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CChatDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.CChatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatDetail::CopyFrom(const CChatDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.CChatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatDetail::IsInitialized() const {
  return true;
}

void CChatDetail::InternalSwap(CChatDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SChatDetail::InitAsDefaultInstance() {
  ::chat::_SChatDetail_default_instance_._instance.get_mutable()->info_ = const_cast< ::chat::BChatListInfo*>(
      ::chat::BChatListInfo::internal_default_instance());
}
class SChatDetail::_Internal {
 public:
  static const ::chat::BChatListInfo& info(const SChatDetail* msg);
};

const ::chat::BChatListInfo&
SChatDetail::_Internal::info(const SChatDetail* msg) {
  return *msg->info_;
}
SChatDetail::SChatDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.SChatDetail)
}
SChatDetail::SChatDetail(const SChatDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacename().empty()) {
    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  if (from._internal_has_info()) {
    info_ = new ::chat::BChatListInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:chat.SChatDetail)
}

void SChatDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SChatDetail_chat_2eproto.base);
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&info_)) + sizeof(seq_));
}

SChatDetail::~SChatDetail() {
  // @@protoc_insertion_point(destructor:chat.SChatDetail)
  SharedDtor();
}

void SChatDetail::SharedDtor() {
  spacename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void SChatDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SChatDetail& SChatDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SChatDetail_chat_2eproto.base);
  return *internal_default_instance();
}


void SChatDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.SChatDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

const char* SChatDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .chat.BChatListInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_spacename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.SChatDetail.spaceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChatDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.SChatDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chat.BChatListInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // int32 houseId = 2;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_houseid(), target);
  }

  // string spaceName = 3;
  if (this->spacename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacename().data(), static_cast<int>(this->_internal_spacename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat.SChatDetail.spaceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_spacename(), target);
  }

  // int32 seq = 4;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.SChatDetail)
  return target;
}

size_t SChatDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.SChatDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spaceName = 3;
  if (this->spacename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacename());
  }

  // .chat.BChatListInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 houseId = 2;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 seq = 4;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SChatDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.SChatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SChatDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SChatDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.SChatDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.SChatDetail)
    MergeFrom(*source);
  }
}

void SChatDetail::MergeFrom(const SChatDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.SChatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spacename().size() > 0) {

    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  if (from.has_info()) {
    _internal_mutable_info()->::chat::BChatListInfo::MergeFrom(from._internal_info());
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void SChatDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.SChatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChatDetail::CopyFrom(const SChatDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.SChatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChatDetail::IsInitialized() const {
  return true;
}

void SChatDetail::InternalSwap(SChatDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  spacename_.Swap(&other->spacename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_, other->info_);
  swap(houseid_, other->houseid_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SChatDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CChatSend::InitAsDefaultInstance() {
}
class CChatSend::_Internal {
 public:
};

CChatSend::CChatSend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.CChatSend)
}
CChatSend::CChatSend(const CChatSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  touid_ = from.touid_;
  // @@protoc_insertion_point(copy_constructor:chat.CChatSend)
}

void CChatSend::SharedCtor() {
  touid_ = 0;
}

CChatSend::~CChatSend() {
  // @@protoc_insertion_point(destructor:chat.CChatSend)
  SharedDtor();
}

void CChatSend::SharedDtor() {
}

void CChatSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CChatSend& CChatSend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CChatSend_chat_2eproto.base);
  return *internal_default_instance();
}


void CChatSend::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.CChatSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  touid_ = 0;
  _internal_metadata_.Clear();
}

const char* CChatSend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 toUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          touid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CChatSend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.CChatSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 toUid = 1;
  if (this->touid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_touid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.CChatSend)
  return target;
}

size_t CChatSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.CChatSend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 toUid = 1;
  if (this->touid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_touid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CChatSend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.CChatSend)
  GOOGLE_DCHECK_NE(&from, this);
  const CChatSend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CChatSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.CChatSend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.CChatSend)
    MergeFrom(*source);
  }
}

void CChatSend::MergeFrom(const CChatSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.CChatSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.touid() != 0) {
    _internal_set_touid(from._internal_touid());
  }
}

void CChatSend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.CChatSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatSend::CopyFrom(const CChatSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.CChatSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatSend::IsInitialized() const {
  return true;
}

void CChatSend::InternalSwap(CChatSend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(touid_, other->touid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatSend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SChatSend::InitAsDefaultInstance() {
}
class SChatSend::_Internal {
 public:
};

SChatSend::SChatSend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.SChatSend)
}
SChatSend::SChatSend(const SChatSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  followstatus_ = from.followstatus_;
  // @@protoc_insertion_point(copy_constructor:chat.SChatSend)
}

void SChatSend::SharedCtor() {
  followstatus_ = 0;
}

SChatSend::~SChatSend() {
  // @@protoc_insertion_point(destructor:chat.SChatSend)
  SharedDtor();
}

void SChatSend::SharedDtor() {
}

void SChatSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SChatSend& SChatSend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SChatSend_chat_2eproto.base);
  return *internal_default_instance();
}


void SChatSend::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.SChatSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  followstatus_ = 0;
  _internal_metadata_.Clear();
}

const char* SChatSend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 followStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          followstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChatSend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.SChatSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 followStatus = 1;
  if (this->followstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_followstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.SChatSend)
  return target;
}

size_t SChatSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.SChatSend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 followStatus = 1;
  if (this->followstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_followstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SChatSend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.SChatSend)
  GOOGLE_DCHECK_NE(&from, this);
  const SChatSend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SChatSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.SChatSend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.SChatSend)
    MergeFrom(*source);
  }
}

void SChatSend::MergeFrom(const SChatSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.SChatSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.followstatus() != 0) {
    _internal_set_followstatus(from._internal_followstatus());
  }
}

void SChatSend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.SChatSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChatSend::CopyFrom(const SChatSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.SChatSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChatSend::IsInitialized() const {
  return true;
}

void SChatSend::InternalSwap(SChatSend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(followstatus_, other->followstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SChatSend::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chat::CChatList* Arena::CreateMaybeMessage< ::chat::CChatList >(Arena* arena) {
  return Arena::CreateInternal< ::chat::CChatList >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::SChatList* Arena::CreateMaybeMessage< ::chat::SChatList >(Arena* arena) {
  return Arena::CreateInternal< ::chat::SChatList >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::BChatListInfo* Arena::CreateMaybeMessage< ::chat::BChatListInfo >(Arena* arena) {
  return Arena::CreateInternal< ::chat::BChatListInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::CChatDetail* Arena::CreateMaybeMessage< ::chat::CChatDetail >(Arena* arena) {
  return Arena::CreateInternal< ::chat::CChatDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::SChatDetail* Arena::CreateMaybeMessage< ::chat::SChatDetail >(Arena* arena) {
  return Arena::CreateInternal< ::chat::SChatDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::CChatSend* Arena::CreateMaybeMessage< ::chat::CChatSend >(Arena* arena) {
  return Arena::CreateInternal< ::chat::CChatSend >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::SChatSend* Arena::CreateMaybeMessage< ::chat::SChatSend >(Arena* arena) {
  return Arena::CreateInternal< ::chat::SChatSend >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
