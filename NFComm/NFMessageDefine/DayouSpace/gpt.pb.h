// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gpt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gpt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gpt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gpt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gpt_2eproto;
namespace gpt {
class CGptChat;
class CGptChatDefaultTypeInternal;
extern CGptChatDefaultTypeInternal _CGptChat_default_instance_;
class SGptChat;
class SGptChatDefaultTypeInternal;
extern SGptChatDefaultTypeInternal _SGptChat_default_instance_;
}  // namespace gpt
PROTOBUF_NAMESPACE_OPEN
template<> ::gpt::CGptChat* Arena::CreateMaybeMessage<::gpt::CGptChat>(Arena*);
template<> ::gpt::SGptChat* Arena::CreateMaybeMessage<::gpt::SGptChat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gpt {

// ===================================================================

class CGptChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.CGptChat) */ {
 public:
  CGptChat();
  virtual ~CGptChat();

  CGptChat(const CGptChat& from);
  CGptChat(CGptChat&& from) noexcept
    : CGptChat() {
    *this = ::std::move(from);
  }

  inline CGptChat& operator=(const CGptChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGptChat& operator=(CGptChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGptChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGptChat* internal_default_instance() {
    return reinterpret_cast<const CGptChat*>(
               &_CGptChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGptChat& a, CGptChat& b) {
    a.Swap(&b);
  }
  inline void Swap(CGptChat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGptChat* New() const final {
    return CreateMaybeMessage<CGptChat>(nullptr);
  }

  CGptChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGptChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGptChat& from);
  void MergeFrom(const CGptChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGptChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.CGptChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpt_2eproto);
    return ::descriptor_table_gpt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGptModelFieldNumber = 1,
    kTextFieldNumber = 2,
    kVoiceModelFieldNumber = 3,
    kChatTypeFieldNumber = 4,
  };
  // string gptModel = 1;
  void clear_gptmodel();
  const std::string& gptmodel() const;
  void set_gptmodel(const std::string& value);
  void set_gptmodel(std::string&& value);
  void set_gptmodel(const char* value);
  void set_gptmodel(const char* value, size_t size);
  std::string* mutable_gptmodel();
  std::string* release_gptmodel();
  void set_allocated_gptmodel(std::string* gptmodel);
  private:
  const std::string& _internal_gptmodel() const;
  void _internal_set_gptmodel(const std::string& value);
  std::string* _internal_mutable_gptmodel();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string voiceModel = 3;
  void clear_voicemodel();
  const std::string& voicemodel() const;
  void set_voicemodel(const std::string& value);
  void set_voicemodel(std::string&& value);
  void set_voicemodel(const char* value);
  void set_voicemodel(const char* value, size_t size);
  std::string* mutable_voicemodel();
  std::string* release_voicemodel();
  void set_allocated_voicemodel(std::string* voicemodel);
  private:
  const std::string& _internal_voicemodel() const;
  void _internal_set_voicemodel(const std::string& value);
  std::string* _internal_mutable_voicemodel();
  public:

  // int32 chatType = 4;
  void clear_chattype();
  ::PROTOBUF_NAMESPACE_ID::int32 chattype() const;
  void set_chattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chattype() const;
  void _internal_set_chattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.CGptChat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gptmodel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voicemodel_;
  ::PROTOBUF_NAMESPACE_ID::int32 chattype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpt_2eproto;
};
// -------------------------------------------------------------------

class SGptChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.SGptChat) */ {
 public:
  SGptChat();
  virtual ~SGptChat();

  SGptChat(const SGptChat& from);
  SGptChat(SGptChat&& from) noexcept
    : SGptChat() {
    *this = ::std::move(from);
  }

  inline SGptChat& operator=(const SGptChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGptChat& operator=(SGptChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGptChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGptChat* internal_default_instance() {
    return reinterpret_cast<const SGptChat*>(
               &_SGptChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SGptChat& a, SGptChat& b) {
    a.Swap(&b);
  }
  inline void Swap(SGptChat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGptChat* New() const final {
    return CreateMaybeMessage<SGptChat>(nullptr);
  }

  SGptChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGptChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGptChat& from);
  void MergeFrom(const SGptChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGptChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.SGptChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpt_2eproto);
    return ::descriptor_table_gpt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kReqTextFieldNumber = 2,
    kRespTextFieldNumber = 3,
  };
  // bytes audio = 1;
  void clear_audio();
  const std::string& audio() const;
  void set_audio(const std::string& value);
  void set_audio(std::string&& value);
  void set_audio(const char* value);
  void set_audio(const void* value, size_t size);
  std::string* mutable_audio();
  std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // string reqText = 2;
  void clear_reqtext();
  const std::string& reqtext() const;
  void set_reqtext(const std::string& value);
  void set_reqtext(std::string&& value);
  void set_reqtext(const char* value);
  void set_reqtext(const char* value, size_t size);
  std::string* mutable_reqtext();
  std::string* release_reqtext();
  void set_allocated_reqtext(std::string* reqtext);
  private:
  const std::string& _internal_reqtext() const;
  void _internal_set_reqtext(const std::string& value);
  std::string* _internal_mutable_reqtext();
  public:

  // string respText = 3;
  void clear_resptext();
  const std::string& resptext() const;
  void set_resptext(const std::string& value);
  void set_resptext(std::string&& value);
  void set_resptext(const char* value);
  void set_resptext(const char* value, size_t size);
  std::string* mutable_resptext();
  std::string* release_resptext();
  void set_allocated_resptext(std::string* resptext);
  private:
  const std::string& _internal_resptext() const;
  void _internal_set_resptext(const std::string& value);
  std::string* _internal_mutable_resptext();
  public:

  // @@protoc_insertion_point(class_scope:gpt.SGptChat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqtext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resptext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGptChat

// string gptModel = 1;
inline void CGptChat::clear_gptmodel() {
  gptmodel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CGptChat::gptmodel() const {
  // @@protoc_insertion_point(field_get:gpt.CGptChat.gptModel)
  return _internal_gptmodel();
}
inline void CGptChat::set_gptmodel(const std::string& value) {
  _internal_set_gptmodel(value);
  // @@protoc_insertion_point(field_set:gpt.CGptChat.gptModel)
}
inline std::string* CGptChat::mutable_gptmodel() {
  // @@protoc_insertion_point(field_mutable:gpt.CGptChat.gptModel)
  return _internal_mutable_gptmodel();
}
inline const std::string& CGptChat::_internal_gptmodel() const {
  return gptmodel_.GetNoArena();
}
inline void CGptChat::_internal_set_gptmodel(const std::string& value) {
  
  gptmodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CGptChat::set_gptmodel(std::string&& value) {
  
  gptmodel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CGptChat.gptModel)
}
inline void CGptChat::set_gptmodel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gptmodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CGptChat.gptModel)
}
inline void CGptChat::set_gptmodel(const char* value, size_t size) {
  
  gptmodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CGptChat.gptModel)
}
inline std::string* CGptChat::_internal_mutable_gptmodel() {
  
  return gptmodel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CGptChat::release_gptmodel() {
  // @@protoc_insertion_point(field_release:gpt.CGptChat.gptModel)
  
  return gptmodel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CGptChat::set_allocated_gptmodel(std::string* gptmodel) {
  if (gptmodel != nullptr) {
    
  } else {
    
  }
  gptmodel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gptmodel);
  // @@protoc_insertion_point(field_set_allocated:gpt.CGptChat.gptModel)
}

// string text = 2;
inline void CGptChat::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CGptChat::text() const {
  // @@protoc_insertion_point(field_get:gpt.CGptChat.text)
  return _internal_text();
}
inline void CGptChat::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:gpt.CGptChat.text)
}
inline std::string* CGptChat::mutable_text() {
  // @@protoc_insertion_point(field_mutable:gpt.CGptChat.text)
  return _internal_mutable_text();
}
inline const std::string& CGptChat::_internal_text() const {
  return text_.GetNoArena();
}
inline void CGptChat::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CGptChat::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CGptChat.text)
}
inline void CGptChat::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CGptChat.text)
}
inline void CGptChat::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CGptChat.text)
}
inline std::string* CGptChat::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CGptChat::release_text() {
  // @@protoc_insertion_point(field_release:gpt.CGptChat.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CGptChat::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gpt.CGptChat.text)
}

// string voiceModel = 3;
inline void CGptChat::clear_voicemodel() {
  voicemodel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CGptChat::voicemodel() const {
  // @@protoc_insertion_point(field_get:gpt.CGptChat.voiceModel)
  return _internal_voicemodel();
}
inline void CGptChat::set_voicemodel(const std::string& value) {
  _internal_set_voicemodel(value);
  // @@protoc_insertion_point(field_set:gpt.CGptChat.voiceModel)
}
inline std::string* CGptChat::mutable_voicemodel() {
  // @@protoc_insertion_point(field_mutable:gpt.CGptChat.voiceModel)
  return _internal_mutable_voicemodel();
}
inline const std::string& CGptChat::_internal_voicemodel() const {
  return voicemodel_.GetNoArena();
}
inline void CGptChat::_internal_set_voicemodel(const std::string& value) {
  
  voicemodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CGptChat::set_voicemodel(std::string&& value) {
  
  voicemodel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CGptChat.voiceModel)
}
inline void CGptChat::set_voicemodel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voicemodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CGptChat.voiceModel)
}
inline void CGptChat::set_voicemodel(const char* value, size_t size) {
  
  voicemodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CGptChat.voiceModel)
}
inline std::string* CGptChat::_internal_mutable_voicemodel() {
  
  return voicemodel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CGptChat::release_voicemodel() {
  // @@protoc_insertion_point(field_release:gpt.CGptChat.voiceModel)
  
  return voicemodel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CGptChat::set_allocated_voicemodel(std::string* voicemodel) {
  if (voicemodel != nullptr) {
    
  } else {
    
  }
  voicemodel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voicemodel);
  // @@protoc_insertion_point(field_set_allocated:gpt.CGptChat.voiceModel)
}

// int32 chatType = 4;
inline void CGptChat::clear_chattype() {
  chattype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGptChat::_internal_chattype() const {
  return chattype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGptChat::chattype() const {
  // @@protoc_insertion_point(field_get:gpt.CGptChat.chatType)
  return _internal_chattype();
}
inline void CGptChat::_internal_set_chattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chattype_ = value;
}
inline void CGptChat::set_chattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chattype(value);
  // @@protoc_insertion_point(field_set:gpt.CGptChat.chatType)
}

// -------------------------------------------------------------------

// SGptChat

// bytes audio = 1;
inline void SGptChat::clear_audio() {
  audio_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGptChat::audio() const {
  // @@protoc_insertion_point(field_get:gpt.SGptChat.audio)
  return _internal_audio();
}
inline void SGptChat::set_audio(const std::string& value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:gpt.SGptChat.audio)
}
inline std::string* SGptChat::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:gpt.SGptChat.audio)
  return _internal_mutable_audio();
}
inline const std::string& SGptChat::_internal_audio() const {
  return audio_.GetNoArena();
}
inline void SGptChat::_internal_set_audio(const std::string& value) {
  
  audio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGptChat::set_audio(std::string&& value) {
  
  audio_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SGptChat.audio)
}
inline void SGptChat::set_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SGptChat.audio)
}
inline void SGptChat::set_audio(const void* value, size_t size) {
  
  audio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SGptChat.audio)
}
inline std::string* SGptChat::_internal_mutable_audio() {
  
  return audio_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGptChat::release_audio() {
  // @@protoc_insertion_point(field_release:gpt.SGptChat.audio)
  
  return audio_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGptChat::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:gpt.SGptChat.audio)
}

// string reqText = 2;
inline void SGptChat::clear_reqtext() {
  reqtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGptChat::reqtext() const {
  // @@protoc_insertion_point(field_get:gpt.SGptChat.reqText)
  return _internal_reqtext();
}
inline void SGptChat::set_reqtext(const std::string& value) {
  _internal_set_reqtext(value);
  // @@protoc_insertion_point(field_set:gpt.SGptChat.reqText)
}
inline std::string* SGptChat::mutable_reqtext() {
  // @@protoc_insertion_point(field_mutable:gpt.SGptChat.reqText)
  return _internal_mutable_reqtext();
}
inline const std::string& SGptChat::_internal_reqtext() const {
  return reqtext_.GetNoArena();
}
inline void SGptChat::_internal_set_reqtext(const std::string& value) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGptChat::set_reqtext(std::string&& value) {
  
  reqtext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SGptChat.reqText)
}
inline void SGptChat::set_reqtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SGptChat.reqText)
}
inline void SGptChat::set_reqtext(const char* value, size_t size) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SGptChat.reqText)
}
inline std::string* SGptChat::_internal_mutable_reqtext() {
  
  return reqtext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGptChat::release_reqtext() {
  // @@protoc_insertion_point(field_release:gpt.SGptChat.reqText)
  
  return reqtext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGptChat::set_allocated_reqtext(std::string* reqtext) {
  if (reqtext != nullptr) {
    
  } else {
    
  }
  reqtext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reqtext);
  // @@protoc_insertion_point(field_set_allocated:gpt.SGptChat.reqText)
}

// string respText = 3;
inline void SGptChat::clear_resptext() {
  resptext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGptChat::resptext() const {
  // @@protoc_insertion_point(field_get:gpt.SGptChat.respText)
  return _internal_resptext();
}
inline void SGptChat::set_resptext(const std::string& value) {
  _internal_set_resptext(value);
  // @@protoc_insertion_point(field_set:gpt.SGptChat.respText)
}
inline std::string* SGptChat::mutable_resptext() {
  // @@protoc_insertion_point(field_mutable:gpt.SGptChat.respText)
  return _internal_mutable_resptext();
}
inline const std::string& SGptChat::_internal_resptext() const {
  return resptext_.GetNoArena();
}
inline void SGptChat::_internal_set_resptext(const std::string& value) {
  
  resptext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGptChat::set_resptext(std::string&& value) {
  
  resptext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SGptChat.respText)
}
inline void SGptChat::set_resptext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resptext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SGptChat.respText)
}
inline void SGptChat::set_resptext(const char* value, size_t size) {
  
  resptext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SGptChat.respText)
}
inline std::string* SGptChat::_internal_mutable_resptext() {
  
  return resptext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGptChat::release_resptext() {
  // @@protoc_insertion_point(field_release:gpt.SGptChat.respText)
  
  return resptext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGptChat::set_allocated_resptext(std::string* resptext) {
  if (resptext != nullptr) {
    
  } else {
    
  }
  resptext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resptext);
  // @@protoc_insertion_point(field_set_allocated:gpt.SGptChat.respText)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpt

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gpt_2eproto
