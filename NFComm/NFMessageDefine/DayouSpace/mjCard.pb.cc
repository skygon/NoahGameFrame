// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mjCard.proto

#include "mjCard.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mjCard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjCardDecompose_mjCard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mjCard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjDrawCard_mjCard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mjCard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjTaskProcess_mjCard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mjCard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjUserCardCollection_mjCard_2eproto;
namespace mj {
class CMjDrawCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjDrawCard> _instance;
} _CMjDrawCard_default_instance_;
class SMjDrawCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjDrawCard> _instance;
} _SMjDrawCard_default_instance_;
class BMjDrawCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMjDrawCard> _instance;
} _BMjDrawCard_default_instance_;
class CMjUserCardCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjUserCardCollection> _instance;
} _CMjUserCardCollection_default_instance_;
class SMjUserCardCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjUserCardCollection> _instance;
} _SMjUserCardCollection_default_instance_;
class BMjUserCardCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMjUserCardCollection> _instance;
} _BMjUserCardCollection_default_instance_;
class CMjGetCardRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjGetCardReward> _instance;
} _CMjGetCardReward_default_instance_;
class SMjGetCardRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjGetCardReward> _instance;
} _SMjGetCardReward_default_instance_;
class CMjCardSynthesisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjCardSynthesis> _instance;
} _CMjCardSynthesis_default_instance_;
class SMjCardSynthesisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjCardSynthesis> _instance;
} _SMjCardSynthesis_default_instance_;
class CMjCardDecomposeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjCardDecompose> _instance;
} _CMjCardDecompose_default_instance_;
class BMjCardDecomposeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMjCardDecompose> _instance;
} _BMjCardDecompose_default_instance_;
class SMjCardDecomposeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjCardDecompose> _instance;
} _SMjCardDecompose_default_instance_;
class CMjTaskProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjTaskProcess> _instance;
} _CMjTaskProcess_default_instance_;
class SMjTaskProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjTaskProcess> _instance;
} _SMjTaskProcess_default_instance_;
class BMjTaskProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMjTaskProcess> _instance;
} _BMjTaskProcess_default_instance_;
class CMjGetTaskRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjGetTaskReward> _instance;
} _CMjGetTaskReward_default_instance_;
class SMjGetTaskRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjGetTaskReward> _instance;
} _SMjGetTaskReward_default_instance_;
}  // namespace mj
static void InitDefaultsscc_info_BMjCardDecompose_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_BMjCardDecompose_default_instance_;
    new (ptr) ::mj::BMjCardDecompose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::BMjCardDecompose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjCardDecompose_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMjCardDecompose_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_BMjDrawCard_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_BMjDrawCard_default_instance_;
    new (ptr) ::mj::BMjDrawCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::BMjDrawCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjDrawCard_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMjDrawCard_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_BMjTaskProcess_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_BMjTaskProcess_default_instance_;
    new (ptr) ::mj::BMjTaskProcess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::BMjTaskProcess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjTaskProcess_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMjTaskProcess_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_BMjUserCardCollection_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_BMjUserCardCollection_default_instance_;
    new (ptr) ::mj::BMjUserCardCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::BMjUserCardCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjUserCardCollection_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMjUserCardCollection_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_CMjCardDecompose_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjCardDecompose_default_instance_;
    new (ptr) ::mj::CMjCardDecompose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjCardDecompose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMjCardDecompose_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMjCardDecompose_mjCard_2eproto}, {
      &scc_info_BMjCardDecompose_mjCard_2eproto.base,}};

static void InitDefaultsscc_info_CMjCardSynthesis_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjCardSynthesis_default_instance_;
    new (ptr) ::mj::CMjCardSynthesis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjCardSynthesis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjCardSynthesis_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjCardSynthesis_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_CMjDrawCard_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjDrawCard_default_instance_;
    new (ptr) ::mj::CMjDrawCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjDrawCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjDrawCard_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjDrawCard_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_CMjGetCardReward_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjGetCardReward_default_instance_;
    new (ptr) ::mj::CMjGetCardReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjGetCardReward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjGetCardReward_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjGetCardReward_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_CMjGetTaskReward_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjGetTaskReward_default_instance_;
    new (ptr) ::mj::CMjGetTaskReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjGetTaskReward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjGetTaskReward_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjGetTaskReward_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_CMjTaskProcess_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjTaskProcess_default_instance_;
    new (ptr) ::mj::CMjTaskProcess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjTaskProcess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjTaskProcess_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjTaskProcess_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_CMjUserCardCollection_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjUserCardCollection_default_instance_;
    new (ptr) ::mj::CMjUserCardCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjUserCardCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjUserCardCollection_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjUserCardCollection_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_SMjCardDecompose_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjCardDecompose_default_instance_;
    new (ptr) ::mj::SMjCardDecompose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjCardDecompose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMjCardDecompose_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMjCardDecompose_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_SMjCardSynthesis_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjCardSynthesis_default_instance_;
    new (ptr) ::mj::SMjCardSynthesis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjCardSynthesis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMjCardSynthesis_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMjCardSynthesis_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_SMjDrawCard_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjDrawCard_default_instance_;
    new (ptr) ::mj::SMjDrawCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjDrawCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMjDrawCard_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMjDrawCard_mjCard_2eproto}, {
      &scc_info_BMjDrawCard_mjCard_2eproto.base,}};

static void InitDefaultsscc_info_SMjGetCardReward_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjGetCardReward_default_instance_;
    new (ptr) ::mj::SMjGetCardReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjGetCardReward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMjGetCardReward_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMjGetCardReward_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_SMjGetTaskReward_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjGetTaskReward_default_instance_;
    new (ptr) ::mj::SMjGetTaskReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjGetTaskReward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMjGetTaskReward_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMjGetTaskReward_mjCard_2eproto}, {}};

static void InitDefaultsscc_info_SMjTaskProcess_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjTaskProcess_default_instance_;
    new (ptr) ::mj::SMjTaskProcess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjTaskProcess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMjTaskProcess_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMjTaskProcess_mjCard_2eproto}, {
      &scc_info_BMjTaskProcess_mjCard_2eproto.base,}};

static void InitDefaultsscc_info_SMjUserCardCollection_mjCard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjUserCardCollection_default_instance_;
    new (ptr) ::mj::SMjUserCardCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjUserCardCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMjUserCardCollection_mjCard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMjUserCardCollection_mjCard_2eproto}, {
      &scc_info_BMjUserCardCollection_mjCard_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mjCard_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mjCard_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mjCard_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mjCard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjDrawCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::CMjDrawCard, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDrawCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDrawCard, state_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDrawCard, msg_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDrawCard, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::BMjDrawCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::BMjDrawCard, cardid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjUserCardCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::CMjUserCardCollection, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserCardCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserCardCollection, state_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserCardCollection, msg_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserCardCollection, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::BMjUserCardCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::BMjUserCardCollection, cardid_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjUserCardCollection, num_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjUserCardCollection, rewardstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjGetCardReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::CMjGetCardReward, cardid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetCardReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetCardReward, state_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetCardReward, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjCardSynthesis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::CMjCardSynthesis, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjCardSynthesis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjCardSynthesis, state_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjCardSynthesis, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjCardDecompose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::CMjCardDecompose, cards_),
  PROTOBUF_FIELD_OFFSET(::mj::CMjCardDecompose, check_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::BMjCardDecompose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::BMjCardDecompose, cardid_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjCardDecompose, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjCardDecompose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjCardDecompose, state_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjCardDecompose, msg_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjCardDecompose, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjTaskProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjTaskProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjTaskProcess, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::BMjTaskProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::BMjTaskProcess, taskid_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjTaskProcess, process_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjTaskProcess, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjGetTaskReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::CMjGetTaskReward, taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetTaskReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetTaskReward, state_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetTaskReward, msg_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetTaskReward, taskid_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetTaskReward, rewardtype_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetTaskReward, yuanlinum_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjGetTaskReward, cardid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mj::CMjDrawCard)},
  { 6, -1, sizeof(::mj::SMjDrawCard)},
  { 14, -1, sizeof(::mj::BMjDrawCard)},
  { 20, -1, sizeof(::mj::CMjUserCardCollection)},
  { 26, -1, sizeof(::mj::SMjUserCardCollection)},
  { 34, -1, sizeof(::mj::BMjUserCardCollection)},
  { 42, -1, sizeof(::mj::CMjGetCardReward)},
  { 48, -1, sizeof(::mj::SMjGetCardReward)},
  { 55, -1, sizeof(::mj::CMjCardSynthesis)},
  { 61, -1, sizeof(::mj::SMjCardSynthesis)},
  { 68, -1, sizeof(::mj::CMjCardDecompose)},
  { 75, -1, sizeof(::mj::BMjCardDecompose)},
  { 82, -1, sizeof(::mj::SMjCardDecompose)},
  { 90, -1, sizeof(::mj::CMjTaskProcess)},
  { 95, -1, sizeof(::mj::SMjTaskProcess)},
  { 101, -1, sizeof(::mj::BMjTaskProcess)},
  { 109, -1, sizeof(::mj::CMjGetTaskReward)},
  { 115, -1, sizeof(::mj::SMjGetTaskReward)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjDrawCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjDrawCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_BMjDrawCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjUserCardCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjUserCardCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_BMjUserCardCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjGetCardReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjGetCardReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjCardSynthesis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjCardSynthesis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjCardDecompose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_BMjCardDecompose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjCardDecompose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjTaskProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjTaskProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_BMjTaskProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjGetTaskReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjGetTaskReward_default_instance_),
};

const char descriptor_table_protodef_mjCard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014mjCard.proto\022\002mj\"\032\n\013CMjDrawCard\022\013\n\003num"
  "\030\001 \001(\005\"H\n\013SMjDrawCard\022\r\n\005state\030\001 \001(\005\022\013\n\003"
  "msg\030\002 \001(\t\022\035\n\004list\030\003 \003(\0132\017.mj.BMjDrawCard"
  "\"\035\n\013BMjDrawCard\022\016\n\006cardId\030\001 \001(\005\"(\n\025CMjUs"
  "erCardCollection\022\017\n\007goodsId\030\001 \001(\005\"\\\n\025SMj"
  "UserCardCollection\022\r\n\005state\030\001 \001(\005\022\013\n\003msg"
  "\030\002 \001(\t\022\'\n\004list\030\003 \003(\0132\031.mj.BMjUserCardCol"
  "lection\"J\n\025BMjUserCardCollection\022\016\n\006card"
  "Id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\022\024\n\014rewardStatus\030\003 "
  "\001(\005\"\"\n\020CMjGetCardReward\022\016\n\006cardId\030\001 \001(\005\""
  ".\n\020SMjGetCardReward\022\r\n\005state\030\001 \001(\005\022\013\n\003ms"
  "g\030\002 \001(\t\"#\n\020CMjCardSynthesis\022\017\n\007goodsId\030\001"
  " \001(\005\".\n\020SMjCardSynthesis\022\r\n\005state\030\001 \001(\005\022"
  "\013\n\003msg\030\002 \001(\t\"F\n\020CMjCardDecompose\022#\n\005card"
  "s\030\001 \003(\0132\024.mj.BMjCardDecompose\022\r\n\005check\030\002"
  " \001(\005\"/\n\020BMjCardDecompose\022\016\n\006cardId\030\001 \001(\005"
  "\022\013\n\003num\030\002 \001(\005\";\n\020SMjCardDecompose\022\r\n\005sta"
  "te\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\013\n\003num\030\003 \001(\005\"\020\n\016CM"
  "jTaskProcess\"2\n\016SMjTaskProcess\022 \n\004list\030\003"
  " \003(\0132\022.mj.BMjTaskProcess\"A\n\016BMjTaskProce"
  "ss\022\016\n\006taskId\030\001 \001(\005\022\017\n\007process\030\002 \001(\005\022\016\n\006s"
  "tatus\030\003 \001(\005\"\"\n\020CMjGetTaskReward\022\016\n\006taskI"
  "d\030\001 \001(\005\"u\n\020SMjGetTaskReward\022\r\n\005state\030\001 \001"
  "(\005\022\013\n\003msg\030\002 \001(\t\022\016\n\006taskId\030\003 \001(\005\022\022\n\nrewar"
  "dType\030\004 \001(\005\022\021\n\tYuanLiNum\030\005 \001(\005\022\016\n\006CardId"
  "\030\006 \001(\005*h\n\nMjCardType\022\017\n\013CardTypePic\020\000\022\022\n"
  "\016CardTypeAction\020\001\022\021\n\rCardTypeTitle\020\002\022\021\n\r"
  "CardTypeVideo\020\003\022\017\n\013CardTypeNPC\020\004*.\n\013MjCa"
  "rdState\022\010\n\004None\020\000\022\013\n\007Success\020\001\022\010\n\004Fail\020\002"
  "*<\n\014MjTaskStatus\022\017\n\013UnCompleted\020\000\022\r\n\tCom"
  "pleted\020\001\022\014\n\010Received\020\002*>\n\020MjTaskRewardTy"
  "pe\022\013\n\007Nothing\020\000\022\n\n\006YuanLi\020\001\022\021\n\rYuanLiAnd"
  "Card\020\002B\tZ\007./pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mjCard_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mjCard_2eproto_sccs[18] = {
  &scc_info_BMjCardDecompose_mjCard_2eproto.base,
  &scc_info_BMjDrawCard_mjCard_2eproto.base,
  &scc_info_BMjTaskProcess_mjCard_2eproto.base,
  &scc_info_BMjUserCardCollection_mjCard_2eproto.base,
  &scc_info_CMjCardDecompose_mjCard_2eproto.base,
  &scc_info_CMjCardSynthesis_mjCard_2eproto.base,
  &scc_info_CMjDrawCard_mjCard_2eproto.base,
  &scc_info_CMjGetCardReward_mjCard_2eproto.base,
  &scc_info_CMjGetTaskReward_mjCard_2eproto.base,
  &scc_info_CMjTaskProcess_mjCard_2eproto.base,
  &scc_info_CMjUserCardCollection_mjCard_2eproto.base,
  &scc_info_SMjCardDecompose_mjCard_2eproto.base,
  &scc_info_SMjCardSynthesis_mjCard_2eproto.base,
  &scc_info_SMjDrawCard_mjCard_2eproto.base,
  &scc_info_SMjGetCardReward_mjCard_2eproto.base,
  &scc_info_SMjGetTaskReward_mjCard_2eproto.base,
  &scc_info_SMjTaskProcess_mjCard_2eproto.base,
  &scc_info_SMjUserCardCollection_mjCard_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mjCard_2eproto_once;
static bool descriptor_table_mjCard_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mjCard_2eproto = {
  &descriptor_table_mjCard_2eproto_initialized, descriptor_table_protodef_mjCard_2eproto, "mjCard.proto", 1305,
  &descriptor_table_mjCard_2eproto_once, descriptor_table_mjCard_2eproto_sccs, descriptor_table_mjCard_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_mjCard_2eproto::offsets,
  file_level_metadata_mjCard_2eproto, 18, file_level_enum_descriptors_mjCard_2eproto, file_level_service_descriptors_mjCard_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mjCard_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mjCard_2eproto), true);
namespace mj {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MjCardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mjCard_2eproto);
  return file_level_enum_descriptors_mjCard_2eproto[0];
}
bool MjCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MjCardState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mjCard_2eproto);
  return file_level_enum_descriptors_mjCard_2eproto[1];
}
bool MjCardState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MjTaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mjCard_2eproto);
  return file_level_enum_descriptors_mjCard_2eproto[2];
}
bool MjTaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MjTaskRewardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mjCard_2eproto);
  return file_level_enum_descriptors_mjCard_2eproto[3];
}
bool MjTaskRewardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMjDrawCard::InitAsDefaultInstance() {
}
class CMjDrawCard::_Internal {
 public:
};

CMjDrawCard::CMjDrawCard()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjDrawCard)
}
CMjDrawCard::CMjDrawCard(const CMjDrawCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:mj.CMjDrawCard)
}

void CMjDrawCard::SharedCtor() {
  num_ = 0;
}

CMjDrawCard::~CMjDrawCard() {
  // @@protoc_insertion_point(destructor:mj.CMjDrawCard)
  SharedDtor();
}

void CMjDrawCard::SharedDtor() {
}

void CMjDrawCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjDrawCard& CMjDrawCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjDrawCard_mjCard_2eproto.base);
  return *internal_default_instance();
}


void CMjDrawCard::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_ = 0;
  _internal_metadata_.Clear();
}

const char* CMjDrawCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjDrawCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjDrawCard)
  return target;
}

size_t CMjDrawCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjDrawCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjDrawCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjDrawCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjDrawCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjDrawCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjDrawCard)
    MergeFrom(*source);
  }
}

void CMjDrawCard::MergeFrom(const CMjDrawCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void CMjDrawCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjDrawCard::CopyFrom(const CMjDrawCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjDrawCard::IsInitialized() const {
  return true;
}

void CMjDrawCard::InternalSwap(CMjDrawCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjDrawCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjDrawCard::InitAsDefaultInstance() {
}
class SMjDrawCard::_Internal {
 public:
};

SMjDrawCard::SMjDrawCard()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjDrawCard)
}
SMjDrawCard::SMjDrawCard(const SMjDrawCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:mj.SMjDrawCard)
}

void SMjDrawCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjDrawCard_mjCard_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SMjDrawCard::~SMjDrawCard() {
  // @@protoc_insertion_point(destructor:mj.SMjDrawCard)
  SharedDtor();
}

void SMjDrawCard::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjDrawCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjDrawCard& SMjDrawCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjDrawCard_mjCard_2eproto.base);
  return *internal_default_instance();
}


void SMjDrawCard::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SMjDrawCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjDrawCard.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mj.BMjDrawCard list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjDrawCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjDrawCard.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // repeated .mj.BMjDrawCard list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjDrawCard)
  return target;
}

size_t SMjDrawCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjDrawCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mj.BMjDrawCard list = 3;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjDrawCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjDrawCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjDrawCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjDrawCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjDrawCard)
    MergeFrom(*source);
  }
}

void SMjDrawCard::MergeFrom(const SMjDrawCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SMjDrawCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjDrawCard::CopyFrom(const SMjDrawCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjDrawCard::IsInitialized() const {
  return true;
}

void SMjDrawCard::InternalSwap(SMjDrawCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjDrawCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMjDrawCard::InitAsDefaultInstance() {
}
class BMjDrawCard::_Internal {
 public:
};

BMjDrawCard::BMjDrawCard()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.BMjDrawCard)
}
BMjDrawCard::BMjDrawCard(const BMjDrawCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cardid_ = from.cardid_;
  // @@protoc_insertion_point(copy_constructor:mj.BMjDrawCard)
}

void BMjDrawCard::SharedCtor() {
  cardid_ = 0;
}

BMjDrawCard::~BMjDrawCard() {
  // @@protoc_insertion_point(destructor:mj.BMjDrawCard)
  SharedDtor();
}

void BMjDrawCard::SharedDtor() {
}

void BMjDrawCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMjDrawCard& BMjDrawCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMjDrawCard_mjCard_2eproto.base);
  return *internal_default_instance();
}


void BMjDrawCard::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.BMjDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardid_ = 0;
  _internal_metadata_.Clear();
}

const char* BMjDrawCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMjDrawCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.BMjDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cardid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.BMjDrawCard)
  return target;
}

size_t BMjDrawCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.BMjDrawCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMjDrawCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.BMjDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  const BMjDrawCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMjDrawCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.BMjDrawCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.BMjDrawCard)
    MergeFrom(*source);
  }
}

void BMjDrawCard::MergeFrom(const BMjDrawCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.BMjDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cardid() != 0) {
    _internal_set_cardid(from._internal_cardid());
  }
}

void BMjDrawCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.BMjDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMjDrawCard::CopyFrom(const BMjDrawCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.BMjDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMjDrawCard::IsInitialized() const {
  return true;
}

void BMjDrawCard::InternalSwap(BMjDrawCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cardid_, other->cardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMjDrawCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjUserCardCollection::InitAsDefaultInstance() {
}
class CMjUserCardCollection::_Internal {
 public:
};

CMjUserCardCollection::CMjUserCardCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjUserCardCollection)
}
CMjUserCardCollection::CMjUserCardCollection(const CMjUserCardCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:mj.CMjUserCardCollection)
}

void CMjUserCardCollection::SharedCtor() {
  goodsid_ = 0;
}

CMjUserCardCollection::~CMjUserCardCollection() {
  // @@protoc_insertion_point(destructor:mj.CMjUserCardCollection)
  SharedDtor();
}

void CMjUserCardCollection::SharedDtor() {
}

void CMjUserCardCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjUserCardCollection& CMjUserCardCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjUserCardCollection_mjCard_2eproto.base);
  return *internal_default_instance();
}


void CMjUserCardCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjUserCardCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* CMjUserCardCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjUserCardCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjUserCardCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjUserCardCollection)
  return target;
}

size_t CMjUserCardCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjUserCardCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjUserCardCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjUserCardCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjUserCardCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjUserCardCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjUserCardCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjUserCardCollection)
    MergeFrom(*source);
  }
}

void CMjUserCardCollection::MergeFrom(const CMjUserCardCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjUserCardCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CMjUserCardCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjUserCardCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjUserCardCollection::CopyFrom(const CMjUserCardCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjUserCardCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjUserCardCollection::IsInitialized() const {
  return true;
}

void CMjUserCardCollection::InternalSwap(CMjUserCardCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjUserCardCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjUserCardCollection::InitAsDefaultInstance() {
}
class SMjUserCardCollection::_Internal {
 public:
};

SMjUserCardCollection::SMjUserCardCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjUserCardCollection)
}
SMjUserCardCollection::SMjUserCardCollection(const SMjUserCardCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:mj.SMjUserCardCollection)
}

void SMjUserCardCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjUserCardCollection_mjCard_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SMjUserCardCollection::~SMjUserCardCollection() {
  // @@protoc_insertion_point(destructor:mj.SMjUserCardCollection)
  SharedDtor();
}

void SMjUserCardCollection::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjUserCardCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjUserCardCollection& SMjUserCardCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjUserCardCollection_mjCard_2eproto.base);
  return *internal_default_instance();
}


void SMjUserCardCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjUserCardCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SMjUserCardCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjUserCardCollection.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mj.BMjUserCardCollection list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjUserCardCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjUserCardCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjUserCardCollection.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // repeated .mj.BMjUserCardCollection list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjUserCardCollection)
  return target;
}

size_t SMjUserCardCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjUserCardCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mj.BMjUserCardCollection list = 3;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjUserCardCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjUserCardCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjUserCardCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjUserCardCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjUserCardCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjUserCardCollection)
    MergeFrom(*source);
  }
}

void SMjUserCardCollection::MergeFrom(const SMjUserCardCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjUserCardCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SMjUserCardCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjUserCardCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjUserCardCollection::CopyFrom(const SMjUserCardCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjUserCardCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjUserCardCollection::IsInitialized() const {
  return true;
}

void SMjUserCardCollection::InternalSwap(SMjUserCardCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjUserCardCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMjUserCardCollection::InitAsDefaultInstance() {
}
class BMjUserCardCollection::_Internal {
 public:
};

BMjUserCardCollection::BMjUserCardCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.BMjUserCardCollection)
}
BMjUserCardCollection::BMjUserCardCollection(const BMjUserCardCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cardid_, &from.cardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rewardstatus_) -
    reinterpret_cast<char*>(&cardid_)) + sizeof(rewardstatus_));
  // @@protoc_insertion_point(copy_constructor:mj.BMjUserCardCollection)
}

void BMjUserCardCollection::SharedCtor() {
  ::memset(&cardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rewardstatus_) -
      reinterpret_cast<char*>(&cardid_)) + sizeof(rewardstatus_));
}

BMjUserCardCollection::~BMjUserCardCollection() {
  // @@protoc_insertion_point(destructor:mj.BMjUserCardCollection)
  SharedDtor();
}

void BMjUserCardCollection::SharedDtor() {
}

void BMjUserCardCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMjUserCardCollection& BMjUserCardCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMjUserCardCollection_mjCard_2eproto.base);
  return *internal_default_instance();
}


void BMjUserCardCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.BMjUserCardCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rewardstatus_) -
      reinterpret_cast<char*>(&cardid_)) + sizeof(rewardstatus_));
  _internal_metadata_.Clear();
}

const char* BMjUserCardCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rewardStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rewardstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMjUserCardCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.BMjUserCardCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cardid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // int32 rewardStatus = 3;
  if (this->rewardstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rewardstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.BMjUserCardCollection)
  return target;
}

size_t BMjUserCardCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.BMjUserCardCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 rewardStatus = 3;
  if (this->rewardstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rewardstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMjUserCardCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.BMjUserCardCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const BMjUserCardCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMjUserCardCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.BMjUserCardCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.BMjUserCardCollection)
    MergeFrom(*source);
  }
}

void BMjUserCardCollection::MergeFrom(const BMjUserCardCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.BMjUserCardCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cardid() != 0) {
    _internal_set_cardid(from._internal_cardid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.rewardstatus() != 0) {
    _internal_set_rewardstatus(from._internal_rewardstatus());
  }
}

void BMjUserCardCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.BMjUserCardCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMjUserCardCollection::CopyFrom(const BMjUserCardCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.BMjUserCardCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMjUserCardCollection::IsInitialized() const {
  return true;
}

void BMjUserCardCollection::InternalSwap(BMjUserCardCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cardid_, other->cardid_);
  swap(num_, other->num_);
  swap(rewardstatus_, other->rewardstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMjUserCardCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjGetCardReward::InitAsDefaultInstance() {
}
class CMjGetCardReward::_Internal {
 public:
};

CMjGetCardReward::CMjGetCardReward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjGetCardReward)
}
CMjGetCardReward::CMjGetCardReward(const CMjGetCardReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cardid_ = from.cardid_;
  // @@protoc_insertion_point(copy_constructor:mj.CMjGetCardReward)
}

void CMjGetCardReward::SharedCtor() {
  cardid_ = 0;
}

CMjGetCardReward::~CMjGetCardReward() {
  // @@protoc_insertion_point(destructor:mj.CMjGetCardReward)
  SharedDtor();
}

void CMjGetCardReward::SharedDtor() {
}

void CMjGetCardReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjGetCardReward& CMjGetCardReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjGetCardReward_mjCard_2eproto.base);
  return *internal_default_instance();
}


void CMjGetCardReward::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjGetCardReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardid_ = 0;
  _internal_metadata_.Clear();
}

const char* CMjGetCardReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjGetCardReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjGetCardReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cardid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjGetCardReward)
  return target;
}

size_t CMjGetCardReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjGetCardReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjGetCardReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjGetCardReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjGetCardReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjGetCardReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjGetCardReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjGetCardReward)
    MergeFrom(*source);
  }
}

void CMjGetCardReward::MergeFrom(const CMjGetCardReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjGetCardReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cardid() != 0) {
    _internal_set_cardid(from._internal_cardid());
  }
}

void CMjGetCardReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjGetCardReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjGetCardReward::CopyFrom(const CMjGetCardReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjGetCardReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjGetCardReward::IsInitialized() const {
  return true;
}

void CMjGetCardReward::InternalSwap(CMjGetCardReward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cardid_, other->cardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjGetCardReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjGetCardReward::InitAsDefaultInstance() {
}
class SMjGetCardReward::_Internal {
 public:
};

SMjGetCardReward::SMjGetCardReward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjGetCardReward)
}
SMjGetCardReward::SMjGetCardReward(const SMjGetCardReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:mj.SMjGetCardReward)
}

void SMjGetCardReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjGetCardReward_mjCard_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SMjGetCardReward::~SMjGetCardReward() {
  // @@protoc_insertion_point(destructor:mj.SMjGetCardReward)
  SharedDtor();
}

void SMjGetCardReward::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjGetCardReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjGetCardReward& SMjGetCardReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjGetCardReward_mjCard_2eproto.base);
  return *internal_default_instance();
}


void SMjGetCardReward::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjGetCardReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SMjGetCardReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjGetCardReward.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjGetCardReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjGetCardReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjGetCardReward.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjGetCardReward)
  return target;
}

size_t SMjGetCardReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjGetCardReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjGetCardReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjGetCardReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjGetCardReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjGetCardReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjGetCardReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjGetCardReward)
    MergeFrom(*source);
  }
}

void SMjGetCardReward::MergeFrom(const SMjGetCardReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjGetCardReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SMjGetCardReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjGetCardReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjGetCardReward::CopyFrom(const SMjGetCardReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjGetCardReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjGetCardReward::IsInitialized() const {
  return true;
}

void SMjGetCardReward::InternalSwap(SMjGetCardReward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjGetCardReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjCardSynthesis::InitAsDefaultInstance() {
}
class CMjCardSynthesis::_Internal {
 public:
};

CMjCardSynthesis::CMjCardSynthesis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjCardSynthesis)
}
CMjCardSynthesis::CMjCardSynthesis(const CMjCardSynthesis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:mj.CMjCardSynthesis)
}

void CMjCardSynthesis::SharedCtor() {
  goodsid_ = 0;
}

CMjCardSynthesis::~CMjCardSynthesis() {
  // @@protoc_insertion_point(destructor:mj.CMjCardSynthesis)
  SharedDtor();
}

void CMjCardSynthesis::SharedDtor() {
}

void CMjCardSynthesis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjCardSynthesis& CMjCardSynthesis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjCardSynthesis_mjCard_2eproto.base);
  return *internal_default_instance();
}


void CMjCardSynthesis::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjCardSynthesis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* CMjCardSynthesis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjCardSynthesis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjCardSynthesis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjCardSynthesis)
  return target;
}

size_t CMjCardSynthesis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjCardSynthesis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjCardSynthesis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjCardSynthesis)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjCardSynthesis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjCardSynthesis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjCardSynthesis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjCardSynthesis)
    MergeFrom(*source);
  }
}

void CMjCardSynthesis::MergeFrom(const CMjCardSynthesis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjCardSynthesis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CMjCardSynthesis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjCardSynthesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjCardSynthesis::CopyFrom(const CMjCardSynthesis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjCardSynthesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjCardSynthesis::IsInitialized() const {
  return true;
}

void CMjCardSynthesis::InternalSwap(CMjCardSynthesis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjCardSynthesis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjCardSynthesis::InitAsDefaultInstance() {
}
class SMjCardSynthesis::_Internal {
 public:
};

SMjCardSynthesis::SMjCardSynthesis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjCardSynthesis)
}
SMjCardSynthesis::SMjCardSynthesis(const SMjCardSynthesis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:mj.SMjCardSynthesis)
}

void SMjCardSynthesis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjCardSynthesis_mjCard_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SMjCardSynthesis::~SMjCardSynthesis() {
  // @@protoc_insertion_point(destructor:mj.SMjCardSynthesis)
  SharedDtor();
}

void SMjCardSynthesis::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjCardSynthesis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjCardSynthesis& SMjCardSynthesis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjCardSynthesis_mjCard_2eproto.base);
  return *internal_default_instance();
}


void SMjCardSynthesis::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjCardSynthesis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SMjCardSynthesis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjCardSynthesis.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjCardSynthesis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjCardSynthesis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjCardSynthesis.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjCardSynthesis)
  return target;
}

size_t SMjCardSynthesis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjCardSynthesis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjCardSynthesis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjCardSynthesis)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjCardSynthesis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjCardSynthesis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjCardSynthesis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjCardSynthesis)
    MergeFrom(*source);
  }
}

void SMjCardSynthesis::MergeFrom(const SMjCardSynthesis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjCardSynthesis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SMjCardSynthesis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjCardSynthesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjCardSynthesis::CopyFrom(const SMjCardSynthesis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjCardSynthesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjCardSynthesis::IsInitialized() const {
  return true;
}

void SMjCardSynthesis::InternalSwap(SMjCardSynthesis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjCardSynthesis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjCardDecompose::InitAsDefaultInstance() {
}
class CMjCardDecompose::_Internal {
 public:
};

CMjCardDecompose::CMjCardDecompose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjCardDecompose)
}
CMjCardDecompose::CMjCardDecompose(const CMjCardDecompose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  check_ = from.check_;
  // @@protoc_insertion_point(copy_constructor:mj.CMjCardDecompose)
}

void CMjCardDecompose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMjCardDecompose_mjCard_2eproto.base);
  check_ = 0;
}

CMjCardDecompose::~CMjCardDecompose() {
  // @@protoc_insertion_point(destructor:mj.CMjCardDecompose)
  SharedDtor();
}

void CMjCardDecompose::SharedDtor() {
}

void CMjCardDecompose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjCardDecompose& CMjCardDecompose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjCardDecompose_mjCard_2eproto.base);
  return *internal_default_instance();
}


void CMjCardDecompose::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjCardDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  check_ = 0;
  _internal_metadata_.Clear();
}

const char* CMjCardDecompose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mj.BMjCardDecompose cards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 check = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjCardDecompose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjCardDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mj.BMjCardDecompose cards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cards(i), target, stream);
  }

  // int32 check = 2;
  if (this->check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjCardDecompose)
  return target;
}

size_t CMjCardDecompose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjCardDecompose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mj.BMjCardDecompose cards = 1;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 check = 2;
  if (this->check() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_check());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjCardDecompose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjCardDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjCardDecompose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjCardDecompose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjCardDecompose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjCardDecompose)
    MergeFrom(*source);
  }
}

void CMjCardDecompose::MergeFrom(const CMjCardDecompose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjCardDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.check() != 0) {
    _internal_set_check(from._internal_check());
  }
}

void CMjCardDecompose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjCardDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjCardDecompose::CopyFrom(const CMjCardDecompose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjCardDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjCardDecompose::IsInitialized() const {
  return true;
}

void CMjCardDecompose::InternalSwap(CMjCardDecompose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
  swap(check_, other->check_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjCardDecompose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMjCardDecompose::InitAsDefaultInstance() {
}
class BMjCardDecompose::_Internal {
 public:
};

BMjCardDecompose::BMjCardDecompose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.BMjCardDecompose)
}
BMjCardDecompose::BMjCardDecompose(const BMjCardDecompose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cardid_, &from.cardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&cardid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:mj.BMjCardDecompose)
}

void BMjCardDecompose::SharedCtor() {
  ::memset(&cardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&cardid_)) + sizeof(num_));
}

BMjCardDecompose::~BMjCardDecompose() {
  // @@protoc_insertion_point(destructor:mj.BMjCardDecompose)
  SharedDtor();
}

void BMjCardDecompose::SharedDtor() {
}

void BMjCardDecompose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMjCardDecompose& BMjCardDecompose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMjCardDecompose_mjCard_2eproto.base);
  return *internal_default_instance();
}


void BMjCardDecompose::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.BMjCardDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&cardid_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

const char* BMjCardDecompose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMjCardDecompose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.BMjCardDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cardid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.BMjCardDecompose)
  return target;
}

size_t BMjCardDecompose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.BMjCardDecompose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cardId = 1;
  if (this->cardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMjCardDecompose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.BMjCardDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  const BMjCardDecompose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMjCardDecompose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.BMjCardDecompose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.BMjCardDecompose)
    MergeFrom(*source);
  }
}

void BMjCardDecompose::MergeFrom(const BMjCardDecompose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.BMjCardDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cardid() != 0) {
    _internal_set_cardid(from._internal_cardid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void BMjCardDecompose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.BMjCardDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMjCardDecompose::CopyFrom(const BMjCardDecompose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.BMjCardDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMjCardDecompose::IsInitialized() const {
  return true;
}

void BMjCardDecompose::InternalSwap(BMjCardDecompose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cardid_, other->cardid_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMjCardDecompose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjCardDecompose::InitAsDefaultInstance() {
}
class SMjCardDecompose::_Internal {
 public:
};

SMjCardDecompose::SMjCardDecompose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjCardDecompose)
}
SMjCardDecompose::SMjCardDecompose(const SMjCardDecompose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&state_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:mj.SMjCardDecompose)
}

void SMjCardDecompose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjCardDecompose_mjCard_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&state_)) + sizeof(num_));
}

SMjCardDecompose::~SMjCardDecompose() {
  // @@protoc_insertion_point(destructor:mj.SMjCardDecompose)
  SharedDtor();
}

void SMjCardDecompose::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjCardDecompose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjCardDecompose& SMjCardDecompose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjCardDecompose_mjCard_2eproto.base);
  return *internal_default_instance();
}


void SMjCardDecompose::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjCardDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&state_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

const char* SMjCardDecompose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjCardDecompose.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjCardDecompose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjCardDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjCardDecompose.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjCardDecompose)
  return target;
}

size_t SMjCardDecompose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjCardDecompose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjCardDecompose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjCardDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjCardDecompose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjCardDecompose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjCardDecompose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjCardDecompose)
    MergeFrom(*source);
  }
}

void SMjCardDecompose::MergeFrom(const SMjCardDecompose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjCardDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void SMjCardDecompose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjCardDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjCardDecompose::CopyFrom(const SMjCardDecompose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjCardDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjCardDecompose::IsInitialized() const {
  return true;
}

void SMjCardDecompose::InternalSwap(SMjCardDecompose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjCardDecompose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjTaskProcess::InitAsDefaultInstance() {
}
class CMjTaskProcess::_Internal {
 public:
};

CMjTaskProcess::CMjTaskProcess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjTaskProcess)
}
CMjTaskProcess::CMjTaskProcess(const CMjTaskProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mj.CMjTaskProcess)
}

void CMjTaskProcess::SharedCtor() {
}

CMjTaskProcess::~CMjTaskProcess() {
  // @@protoc_insertion_point(destructor:mj.CMjTaskProcess)
  SharedDtor();
}

void CMjTaskProcess::SharedDtor() {
}

void CMjTaskProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjTaskProcess& CMjTaskProcess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjTaskProcess_mjCard_2eproto.base);
  return *internal_default_instance();
}


void CMjTaskProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjTaskProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMjTaskProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjTaskProcess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjTaskProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjTaskProcess)
  return target;
}

size_t CMjTaskProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjTaskProcess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjTaskProcess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjTaskProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjTaskProcess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjTaskProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjTaskProcess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjTaskProcess)
    MergeFrom(*source);
  }
}

void CMjTaskProcess::MergeFrom(const CMjTaskProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjTaskProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMjTaskProcess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjTaskProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjTaskProcess::CopyFrom(const CMjTaskProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjTaskProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjTaskProcess::IsInitialized() const {
  return true;
}

void CMjTaskProcess::InternalSwap(CMjTaskProcess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjTaskProcess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjTaskProcess::InitAsDefaultInstance() {
}
class SMjTaskProcess::_Internal {
 public:
};

SMjTaskProcess::SMjTaskProcess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjTaskProcess)
}
SMjTaskProcess::SMjTaskProcess(const SMjTaskProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mj.SMjTaskProcess)
}

void SMjTaskProcess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjTaskProcess_mjCard_2eproto.base);
}

SMjTaskProcess::~SMjTaskProcess() {
  // @@protoc_insertion_point(destructor:mj.SMjTaskProcess)
  SharedDtor();
}

void SMjTaskProcess::SharedDtor() {
}

void SMjTaskProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjTaskProcess& SMjTaskProcess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjTaskProcess_mjCard_2eproto.base);
  return *internal_default_instance();
}


void SMjTaskProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjTaskProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SMjTaskProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mj.BMjTaskProcess list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjTaskProcess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjTaskProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mj.BMjTaskProcess list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjTaskProcess)
  return target;
}

size_t SMjTaskProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjTaskProcess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mj.BMjTaskProcess list = 3;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjTaskProcess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjTaskProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjTaskProcess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjTaskProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjTaskProcess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjTaskProcess)
    MergeFrom(*source);
  }
}

void SMjTaskProcess::MergeFrom(const SMjTaskProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjTaskProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SMjTaskProcess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjTaskProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjTaskProcess::CopyFrom(const SMjTaskProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjTaskProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjTaskProcess::IsInitialized() const {
  return true;
}

void SMjTaskProcess::InternalSwap(SMjTaskProcess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjTaskProcess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMjTaskProcess::InitAsDefaultInstance() {
}
class BMjTaskProcess::_Internal {
 public:
};

BMjTaskProcess::BMjTaskProcess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.BMjTaskProcess)
}
BMjTaskProcess::BMjTaskProcess(const BMjTaskProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mj.BMjTaskProcess)
}

void BMjTaskProcess::SharedCtor() {
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
}

BMjTaskProcess::~BMjTaskProcess() {
  // @@protoc_insertion_point(destructor:mj.BMjTaskProcess)
  SharedDtor();
}

void BMjTaskProcess::SharedDtor() {
}

void BMjTaskProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMjTaskProcess& BMjTaskProcess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMjTaskProcess_mjCard_2eproto.base);
  return *internal_default_instance();
}


void BMjTaskProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.BMjTaskProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* BMjTaskProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 process = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMjTaskProcess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.BMjTaskProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // int32 process = 2;
  if (this->process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_process(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.BMjTaskProcess)
  return target;
}

size_t BMjTaskProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.BMjTaskProcess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // int32 process = 2;
  if (this->process() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_process());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMjTaskProcess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.BMjTaskProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const BMjTaskProcess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMjTaskProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.BMjTaskProcess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.BMjTaskProcess)
    MergeFrom(*source);
  }
}

void BMjTaskProcess::MergeFrom(const BMjTaskProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.BMjTaskProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.process() != 0) {
    _internal_set_process(from._internal_process());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void BMjTaskProcess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.BMjTaskProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMjTaskProcess::CopyFrom(const BMjTaskProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.BMjTaskProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMjTaskProcess::IsInitialized() const {
  return true;
}

void BMjTaskProcess::InternalSwap(BMjTaskProcess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(taskid_, other->taskid_);
  swap(process_, other->process_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMjTaskProcess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjGetTaskReward::InitAsDefaultInstance() {
}
class CMjGetTaskReward::_Internal {
 public:
};

CMjGetTaskReward::CMjGetTaskReward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjGetTaskReward)
}
CMjGetTaskReward::CMjGetTaskReward(const CMjGetTaskReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_ = from.taskid_;
  // @@protoc_insertion_point(copy_constructor:mj.CMjGetTaskReward)
}

void CMjGetTaskReward::SharedCtor() {
  taskid_ = 0;
}

CMjGetTaskReward::~CMjGetTaskReward() {
  // @@protoc_insertion_point(destructor:mj.CMjGetTaskReward)
  SharedDtor();
}

void CMjGetTaskReward::SharedDtor() {
}

void CMjGetTaskReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjGetTaskReward& CMjGetTaskReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjGetTaskReward_mjCard_2eproto.base);
  return *internal_default_instance();
}


void CMjGetTaskReward::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjGetTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_ = 0;
  _internal_metadata_.Clear();
}

const char* CMjGetTaskReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjGetTaskReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjGetTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjGetTaskReward)
  return target;
}

size_t CMjGetTaskReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjGetTaskReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjGetTaskReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjGetTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjGetTaskReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjGetTaskReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjGetTaskReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjGetTaskReward)
    MergeFrom(*source);
  }
}

void CMjGetTaskReward::MergeFrom(const CMjGetTaskReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjGetTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void CMjGetTaskReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjGetTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjGetTaskReward::CopyFrom(const CMjGetTaskReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjGetTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjGetTaskReward::IsInitialized() const {
  return true;
}

void CMjGetTaskReward::InternalSwap(CMjGetTaskReward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjGetTaskReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjGetTaskReward::InitAsDefaultInstance() {
}
class SMjGetTaskReward::_Internal {
 public:
};

SMjGetTaskReward::SMjGetTaskReward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjGetTaskReward)
}
SMjGetTaskReward::SMjGetTaskReward(const SMjGetTaskReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&cardid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(cardid_));
  // @@protoc_insertion_point(copy_constructor:mj.SMjGetTaskReward)
}

void SMjGetTaskReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjGetTaskReward_mjCard_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(cardid_));
}

SMjGetTaskReward::~SMjGetTaskReward() {
  // @@protoc_insertion_point(destructor:mj.SMjGetTaskReward)
  SharedDtor();
}

void SMjGetTaskReward::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjGetTaskReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjGetTaskReward& SMjGetTaskReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjGetTaskReward_mjCard_2eproto.base);
  return *internal_default_instance();
}


void SMjGetTaskReward::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjGetTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(cardid_));
  _internal_metadata_.Clear();
}

const char* SMjGetTaskReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjGetTaskReward.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rewardType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rewardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 YuanLiNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          yuanlinum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CardId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjGetTaskReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjGetTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjGetTaskReward.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_taskid(), target);
  }

  // int32 rewardType = 4;
  if (this->rewardtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rewardtype(), target);
  }

  // int32 YuanLiNum = 5;
  if (this->yuanlinum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_yuanlinum(), target);
  }

  // int32 CardId = 6;
  if (this->cardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cardid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjGetTaskReward)
  return target;
}

size_t SMjGetTaskReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjGetTaskReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // int32 rewardType = 4;
  if (this->rewardtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rewardtype());
  }

  // int32 YuanLiNum = 5;
  if (this->yuanlinum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yuanlinum());
  }

  // int32 CardId = 6;
  if (this->cardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjGetTaskReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjGetTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjGetTaskReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjGetTaskReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjGetTaskReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjGetTaskReward)
    MergeFrom(*source);
  }
}

void SMjGetTaskReward::MergeFrom(const SMjGetTaskReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjGetTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.rewardtype() != 0) {
    _internal_set_rewardtype(from._internal_rewardtype());
  }
  if (from.yuanlinum() != 0) {
    _internal_set_yuanlinum(from._internal_yuanlinum());
  }
  if (from.cardid() != 0) {
    _internal_set_cardid(from._internal_cardid());
  }
}

void SMjGetTaskReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjGetTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjGetTaskReward::CopyFrom(const SMjGetTaskReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjGetTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjGetTaskReward::IsInitialized() const {
  return true;
}

void SMjGetTaskReward::InternalSwap(SMjGetTaskReward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(taskid_, other->taskid_);
  swap(rewardtype_, other->rewardtype_);
  swap(yuanlinum_, other->yuanlinum_);
  swap(cardid_, other->cardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjGetTaskReward::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mj
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mj::CMjDrawCard* Arena::CreateMaybeMessage< ::mj::CMjDrawCard >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjDrawCard >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjDrawCard* Arena::CreateMaybeMessage< ::mj::SMjDrawCard >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjDrawCard >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::BMjDrawCard* Arena::CreateMaybeMessage< ::mj::BMjDrawCard >(Arena* arena) {
  return Arena::CreateInternal< ::mj::BMjDrawCard >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjUserCardCollection* Arena::CreateMaybeMessage< ::mj::CMjUserCardCollection >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjUserCardCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjUserCardCollection* Arena::CreateMaybeMessage< ::mj::SMjUserCardCollection >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjUserCardCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::BMjUserCardCollection* Arena::CreateMaybeMessage< ::mj::BMjUserCardCollection >(Arena* arena) {
  return Arena::CreateInternal< ::mj::BMjUserCardCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjGetCardReward* Arena::CreateMaybeMessage< ::mj::CMjGetCardReward >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjGetCardReward >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjGetCardReward* Arena::CreateMaybeMessage< ::mj::SMjGetCardReward >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjGetCardReward >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjCardSynthesis* Arena::CreateMaybeMessage< ::mj::CMjCardSynthesis >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjCardSynthesis >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjCardSynthesis* Arena::CreateMaybeMessage< ::mj::SMjCardSynthesis >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjCardSynthesis >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjCardDecompose* Arena::CreateMaybeMessage< ::mj::CMjCardDecompose >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjCardDecompose >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::BMjCardDecompose* Arena::CreateMaybeMessage< ::mj::BMjCardDecompose >(Arena* arena) {
  return Arena::CreateInternal< ::mj::BMjCardDecompose >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjCardDecompose* Arena::CreateMaybeMessage< ::mj::SMjCardDecompose >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjCardDecompose >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjTaskProcess* Arena::CreateMaybeMessage< ::mj::CMjTaskProcess >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjTaskProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjTaskProcess* Arena::CreateMaybeMessage< ::mj::SMjTaskProcess >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjTaskProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::BMjTaskProcess* Arena::CreateMaybeMessage< ::mj::BMjTaskProcess >(Arena* arena) {
  return Arena::CreateInternal< ::mj::BMjTaskProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjGetTaskReward* Arena::CreateMaybeMessage< ::mj::CMjGetTaskReward >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjGetTaskReward >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjGetTaskReward* Arena::CreateMaybeMessage< ::mj::SMjGetTaskReward >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjGetTaskReward >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
