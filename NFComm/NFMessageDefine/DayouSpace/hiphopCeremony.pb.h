// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hiphopCeremony.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hiphopCeremony_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hiphopCeremony_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hiphopCeremony_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hiphopCeremony_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hiphopCeremony_2eproto;
namespace hiphop {
class BHiphopNote;
class BHiphopNoteDefaultTypeInternal;
extern BHiphopNoteDefaultTypeInternal _BHiphopNote_default_instance_;
class BHiphopStarBakAudio;
class BHiphopStarBakAudioDefaultTypeInternal;
extern BHiphopStarBakAudioDefaultTypeInternal _BHiphopStarBakAudio_default_instance_;
class BHiphopSwitch;
class BHiphopSwitchDefaultTypeInternal;
extern BHiphopSwitchDefaultTypeInternal _BHiphopSwitch_default_instance_;
class CHiphopAwardPrediction;
class CHiphopAwardPredictionDefaultTypeInternal;
extern CHiphopAwardPredictionDefaultTypeInternal _CHiphopAwardPrediction_default_instance_;
class CHiphopCeremonyState;
class CHiphopCeremonyStateDefaultTypeInternal;
extern CHiphopCeremonyStateDefaultTypeInternal _CHiphopCeremonyState_default_instance_;
class CHiphopNoteList;
class CHiphopNoteListDefaultTypeInternal;
extern CHiphopNoteListDefaultTypeInternal _CHiphopNoteList_default_instance_;
class CHiphopNotePickup;
class CHiphopNotePickupDefaultTypeInternal;
extern CHiphopNotePickupDefaultTypeInternal _CHiphopNotePickup_default_instance_;
class CHiphopWarmupState;
class CHiphopWarmupStateDefaultTypeInternal;
extern CHiphopWarmupStateDefaultTypeInternal _CHiphopWarmupState_default_instance_;
class SHiphopAwardPrediction;
class SHiphopAwardPredictionDefaultTypeInternal;
extern SHiphopAwardPredictionDefaultTypeInternal _SHiphopAwardPrediction_default_instance_;
class SHiphopCeremonyProcess;
class SHiphopCeremonyProcessDefaultTypeInternal;
extern SHiphopCeremonyProcessDefaultTypeInternal _SHiphopCeremonyProcess_default_instance_;
class SHiphopCeremonyState;
class SHiphopCeremonyStateDefaultTypeInternal;
extern SHiphopCeremonyStateDefaultTypeInternal _SHiphopCeremonyState_default_instance_;
class SHiphopNoteList;
class SHiphopNoteListDefaultTypeInternal;
extern SHiphopNoteListDefaultTypeInternal _SHiphopNoteList_default_instance_;
class SHiphopNotePickup;
class SHiphopNotePickupDefaultTypeInternal;
extern SHiphopNotePickupDefaultTypeInternal _SHiphopNotePickup_default_instance_;
class SHiphopPhotoRain;
class SHiphopPhotoRainDefaultTypeInternal;
extern SHiphopPhotoRainDefaultTypeInternal _SHiphopPhotoRain_default_instance_;
class SHiphopStarSwitch;
class SHiphopStarSwitchDefaultTypeInternal;
extern SHiphopStarSwitchDefaultTypeInternal _SHiphopStarSwitch_default_instance_;
class SHiphopSwitch;
class SHiphopSwitchDefaultTypeInternal;
extern SHiphopSwitchDefaultTypeInternal _SHiphopSwitch_default_instance_;
class SHiphopWarmupState;
class SHiphopWarmupStateDefaultTypeInternal;
extern SHiphopWarmupStateDefaultTypeInternal _SHiphopWarmupState_default_instance_;
}  // namespace hiphop
PROTOBUF_NAMESPACE_OPEN
template<> ::hiphop::BHiphopNote* Arena::CreateMaybeMessage<::hiphop::BHiphopNote>(Arena*);
template<> ::hiphop::BHiphopStarBakAudio* Arena::CreateMaybeMessage<::hiphop::BHiphopStarBakAudio>(Arena*);
template<> ::hiphop::BHiphopSwitch* Arena::CreateMaybeMessage<::hiphop::BHiphopSwitch>(Arena*);
template<> ::hiphop::CHiphopAwardPrediction* Arena::CreateMaybeMessage<::hiphop::CHiphopAwardPrediction>(Arena*);
template<> ::hiphop::CHiphopCeremonyState* Arena::CreateMaybeMessage<::hiphop::CHiphopCeremonyState>(Arena*);
template<> ::hiphop::CHiphopNoteList* Arena::CreateMaybeMessage<::hiphop::CHiphopNoteList>(Arena*);
template<> ::hiphop::CHiphopNotePickup* Arena::CreateMaybeMessage<::hiphop::CHiphopNotePickup>(Arena*);
template<> ::hiphop::CHiphopWarmupState* Arena::CreateMaybeMessage<::hiphop::CHiphopWarmupState>(Arena*);
template<> ::hiphop::SHiphopAwardPrediction* Arena::CreateMaybeMessage<::hiphop::SHiphopAwardPrediction>(Arena*);
template<> ::hiphop::SHiphopCeremonyProcess* Arena::CreateMaybeMessage<::hiphop::SHiphopCeremonyProcess>(Arena*);
template<> ::hiphop::SHiphopCeremonyState* Arena::CreateMaybeMessage<::hiphop::SHiphopCeremonyState>(Arena*);
template<> ::hiphop::SHiphopNoteList* Arena::CreateMaybeMessage<::hiphop::SHiphopNoteList>(Arena*);
template<> ::hiphop::SHiphopNotePickup* Arena::CreateMaybeMessage<::hiphop::SHiphopNotePickup>(Arena*);
template<> ::hiphop::SHiphopPhotoRain* Arena::CreateMaybeMessage<::hiphop::SHiphopPhotoRain>(Arena*);
template<> ::hiphop::SHiphopStarSwitch* Arena::CreateMaybeMessage<::hiphop::SHiphopStarSwitch>(Arena*);
template<> ::hiphop::SHiphopSwitch* Arena::CreateMaybeMessage<::hiphop::SHiphopSwitch>(Arena*);
template<> ::hiphop::SHiphopWarmupState* Arena::CreateMaybeMessage<::hiphop::SHiphopWarmupState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hiphop {

enum HiphopSwitch : int {
  Unknown = 0,
  WarmupVideo = 1,
  PortalOpen = 2,
  PhotoUI = 3,
  GiftUI = 4,
  RedCarpet = 5,
  HiphopSwitch_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HiphopSwitch_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HiphopSwitch_IsValid(int value);
constexpr HiphopSwitch HiphopSwitch_MIN = Unknown;
constexpr HiphopSwitch HiphopSwitch_MAX = RedCarpet;
constexpr int HiphopSwitch_ARRAYSIZE = HiphopSwitch_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HiphopSwitch_descriptor();
template<typename T>
inline const std::string& HiphopSwitch_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HiphopSwitch>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HiphopSwitch_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HiphopSwitch_descriptor(), enum_t_value);
}
inline bool HiphopSwitch_Parse(
    const std::string& name, HiphopSwitch* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HiphopSwitch>(
    HiphopSwitch_descriptor(), name, value);
}
enum HiphopProcess : int {
  Reset = 0,
  BeginVideo = 4,
  OpeningRemarks = 5,
  SongRefireStart = 6,
  BestRapMVVCR = 7,
  BestRapMVRes = 8,
  BestLyricsVCR = 9,
  BestLyricsRes = 10,
  BestComposeVCR = 11,
  BestComposeRes = 12,
  BestRapVCR = 13,
  BestRapRes = 14,
  BestRapAlbumVCR = 15,
  BestRapAlbumRes = 16,
  BestArtistAgencyVCR = 17,
  BestArtistAgencyRes = 18,
  BestMusicProducerVCR = 19,
  BestMusicProducerRes = 20,
  BestLyricistVCR = 21,
  BestLyricistRes = 22,
  SongMontageStart = 23,
  SongMontageEnd = 24,
  MostPopularRapRecordLabelVCR = 25,
  MostPopularRapRecordLabelRes = 26,
  MostPopularCollaborativeSingleVCR = 27,
  MostPopularCollaborativeSingleRes = 28,
  MostPopularNewcomerVCR = 29,
  MostPopularNewcomerRes = 30,
  MostPopularSingleVCR = 31,
  MostPopularSingleRes = 32,
  MostPopularMaleSingerVCR = 33,
  MostPopularMaleSingerRes = 34,
  MostPopularFemaleSingerVCR = 35,
  MostPopularFemaleSingerRes = 36,
  SongBurnMeDownStart = 37,
  SongBurnMeDownEnd = 38,
  AnnualPioneerArtistVCR = 39,
  AnnualCommendArtistVCR = 40,
  AnnualNewArtistVCR = 41,
  AnnualBreakArtistVCR = 42,
  AnnualVarietyRapStageVCR = 43,
  AnnualMediaFavoriteArtistVCR = 44,
  AnnualCharismaArtistVCR = 45,
  AnnualModelArtistVCR = 46,
  SongTenToesDownStart = 47,
  SongTenToesDownEnd = 48,
  AnnualAlmightyArtistVCR = 49,
  AnnualInfluentialArtistVCR = 50,
  AnnualValuableArtistVCR = 51,
  AnnualTopArtistVCR = 52,
  AnnualRapSingleVCR = 53,
  AnnualRapAlbumVCR = 54,
  AnnualRapArtistVCR = 55,
  Firework = 58,
  CeremonyEnd = 56,
  MJConcertTrailer = 57,
  HiphopProcess_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HiphopProcess_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HiphopProcess_IsValid(int value);
constexpr HiphopProcess HiphopProcess_MIN = Reset;
constexpr HiphopProcess HiphopProcess_MAX = Firework;
constexpr int HiphopProcess_ARRAYSIZE = HiphopProcess_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HiphopProcess_descriptor();
template<typename T>
inline const std::string& HiphopProcess_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HiphopProcess>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HiphopProcess_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HiphopProcess_descriptor(), enum_t_value);
}
inline bool HiphopProcess_Parse(
    const std::string& name, HiphopProcess* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HiphopProcess>(
    HiphopProcess_descriptor(), name, value);
}
enum HiphopStar : int {
  HiphopStar_None = 0,
  HiphopStar_Pharaoh = 1,
  HiphopStar_XuZhenZhen = 2,
  HiphopStar_DoughBoy = 3,
  HiphopStar_YangBuLaDe = 4,
  HiphopStar_Hanji = 5,
  HiphopStar_YuZheHao = 6,
  HiphopStar_LiChenXi = 7,
  HiphopStar_Doggie = 8,
  HiphopStar_DengDianGuo = 9,
  HiphopStar_ZhangZiHao = 10,
  HiphopStar_LilHowcy = 11,
  HiphopStar_XiaoJingLing = 12,
  HiphopStar_LuoYan = 13,
  HiphopStar_KASS = 14,
  HiphopStar_CDE = 15,
  HiphopStar_PACT = 16,
  HiphopStar_Vinida = 17,
  HiphopStar_GoodMorning = 18,
  HiphopStar_VaVa = 19,
  HiphopStar_AIR = 20,
  HiphopStar_GAI = 21,
  HiphopStar_ShengYu = 22,
  HiphopStar_LiuCong = 23,
  HiphopStar_YangHeSu = 24,
  HiphopStar_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HiphopStar_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HiphopStar_IsValid(int value);
constexpr HiphopStar HiphopStar_MIN = HiphopStar_None;
constexpr HiphopStar HiphopStar_MAX = HiphopStar_YangHeSu;
constexpr int HiphopStar_ARRAYSIZE = HiphopStar_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HiphopStar_descriptor();
template<typename T>
inline const std::string& HiphopStar_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HiphopStar>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HiphopStar_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HiphopStar_descriptor(), enum_t_value);
}
inline bool HiphopStar_Parse(
    const std::string& name, HiphopStar* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HiphopStar>(
    HiphopStar_descriptor(), name, value);
}
// ===================================================================

class CHiphopAwardPrediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.CHiphopAwardPrediction) */ {
 public:
  CHiphopAwardPrediction();
  virtual ~CHiphopAwardPrediction();

  CHiphopAwardPrediction(const CHiphopAwardPrediction& from);
  CHiphopAwardPrediction(CHiphopAwardPrediction&& from) noexcept
    : CHiphopAwardPrediction() {
    *this = ::std::move(from);
  }

  inline CHiphopAwardPrediction& operator=(const CHiphopAwardPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHiphopAwardPrediction& operator=(CHiphopAwardPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHiphopAwardPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHiphopAwardPrediction* internal_default_instance() {
    return reinterpret_cast<const CHiphopAwardPrediction*>(
               &_CHiphopAwardPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CHiphopAwardPrediction& a, CHiphopAwardPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(CHiphopAwardPrediction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHiphopAwardPrediction* New() const final {
    return CreateMaybeMessage<CHiphopAwardPrediction>(nullptr);
  }

  CHiphopAwardPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHiphopAwardPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHiphopAwardPrediction& from);
  void MergeFrom(const CHiphopAwardPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHiphopAwardPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.CHiphopAwardPrediction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // int32 awardId = 1;
  void clear_awardid();
  ::PROTOBUF_NAMESPACE_ID::int32 awardid() const;
  void set_awardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_awardid() const;
  void _internal_set_awardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.CHiphopAwardPrediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 awardid_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class SHiphopAwardPrediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopAwardPrediction) */ {
 public:
  SHiphopAwardPrediction();
  virtual ~SHiphopAwardPrediction();

  SHiphopAwardPrediction(const SHiphopAwardPrediction& from);
  SHiphopAwardPrediction(SHiphopAwardPrediction&& from) noexcept
    : SHiphopAwardPrediction() {
    *this = ::std::move(from);
  }

  inline SHiphopAwardPrediction& operator=(const SHiphopAwardPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopAwardPrediction& operator=(SHiphopAwardPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopAwardPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopAwardPrediction* internal_default_instance() {
    return reinterpret_cast<const SHiphopAwardPrediction*>(
               &_SHiphopAwardPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SHiphopAwardPrediction& a, SHiphopAwardPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopAwardPrediction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopAwardPrediction* New() const final {
    return CreateMaybeMessage<SHiphopAwardPrediction>(nullptr);
  }

  SHiphopAwardPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopAwardPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopAwardPrediction& from);
  void MergeFrom(const SHiphopAwardPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopAwardPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopAwardPrediction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsNameFieldNumber = 1,
    kGoodsPicFieldNumber = 2,
    kGoodsDescFieldNumber = 3,
  };
  // string goodsName = 1;
  void clear_goodsname();
  const std::string& goodsname() const;
  void set_goodsname(const std::string& value);
  void set_goodsname(std::string&& value);
  void set_goodsname(const char* value);
  void set_goodsname(const char* value, size_t size);
  std::string* mutable_goodsname();
  std::string* release_goodsname();
  void set_allocated_goodsname(std::string* goodsname);
  private:
  const std::string& _internal_goodsname() const;
  void _internal_set_goodsname(const std::string& value);
  std::string* _internal_mutable_goodsname();
  public:

  // string goodsPic = 2;
  void clear_goodspic();
  const std::string& goodspic() const;
  void set_goodspic(const std::string& value);
  void set_goodspic(std::string&& value);
  void set_goodspic(const char* value);
  void set_goodspic(const char* value, size_t size);
  std::string* mutable_goodspic();
  std::string* release_goodspic();
  void set_allocated_goodspic(std::string* goodspic);
  private:
  const std::string& _internal_goodspic() const;
  void _internal_set_goodspic(const std::string& value);
  std::string* _internal_mutable_goodspic();
  public:

  // string goodsDesc = 3;
  void clear_goodsdesc();
  const std::string& goodsdesc() const;
  void set_goodsdesc(const std::string& value);
  void set_goodsdesc(std::string&& value);
  void set_goodsdesc(const char* value);
  void set_goodsdesc(const char* value, size_t size);
  std::string* mutable_goodsdesc();
  std::string* release_goodsdesc();
  void set_allocated_goodsdesc(std::string* goodsdesc);
  private:
  const std::string& _internal_goodsdesc() const;
  void _internal_set_goodsdesc(const std::string& value);
  std::string* _internal_mutable_goodsdesc();
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopAwardPrediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goodsname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goodspic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goodsdesc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class CHiphopNoteList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.CHiphopNoteList) */ {
 public:
  CHiphopNoteList();
  virtual ~CHiphopNoteList();

  CHiphopNoteList(const CHiphopNoteList& from);
  CHiphopNoteList(CHiphopNoteList&& from) noexcept
    : CHiphopNoteList() {
    *this = ::std::move(from);
  }

  inline CHiphopNoteList& operator=(const CHiphopNoteList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHiphopNoteList& operator=(CHiphopNoteList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHiphopNoteList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHiphopNoteList* internal_default_instance() {
    return reinterpret_cast<const CHiphopNoteList*>(
               &_CHiphopNoteList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CHiphopNoteList& a, CHiphopNoteList& b) {
    a.Swap(&b);
  }
  inline void Swap(CHiphopNoteList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHiphopNoteList* New() const final {
    return CreateMaybeMessage<CHiphopNoteList>(nullptr);
  }

  CHiphopNoteList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHiphopNoteList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHiphopNoteList& from);
  void MergeFrom(const CHiphopNoteList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHiphopNoteList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.CHiphopNoteList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hiphop.CHiphopNoteList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class BHiphopNote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.BHiphopNote) */ {
 public:
  BHiphopNote();
  virtual ~BHiphopNote();

  BHiphopNote(const BHiphopNote& from);
  BHiphopNote(BHiphopNote&& from) noexcept
    : BHiphopNote() {
    *this = ::std::move(from);
  }

  inline BHiphopNote& operator=(const BHiphopNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline BHiphopNote& operator=(BHiphopNote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BHiphopNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BHiphopNote* internal_default_instance() {
    return reinterpret_cast<const BHiphopNote*>(
               &_BHiphopNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BHiphopNote& a, BHiphopNote& b) {
    a.Swap(&b);
  }
  inline void Swap(BHiphopNote* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BHiphopNote* New() const final {
    return CreateMaybeMessage<BHiphopNote>(nullptr);
  }

  BHiphopNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BHiphopNote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BHiphopNote& from);
  void MergeFrom(const BHiphopNote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BHiphopNote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.BHiphopNote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // .vector.PVector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // .vector.PVector3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::vector::PVector3& rotation() const;
  ::vector::PVector3* release_rotation();
  ::vector::PVector3* mutable_rotation();
  void set_allocated_rotation(::vector::PVector3* rotation);
  private:
  const ::vector::PVector3& _internal_rotation() const;
  ::vector::PVector3* _internal_mutable_rotation();
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.BHiphopNote)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vector::PVector3* position_;
  ::vector::PVector3* rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class SHiphopNoteList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopNoteList) */ {
 public:
  SHiphopNoteList();
  virtual ~SHiphopNoteList();

  SHiphopNoteList(const SHiphopNoteList& from);
  SHiphopNoteList(SHiphopNoteList&& from) noexcept
    : SHiphopNoteList() {
    *this = ::std::move(from);
  }

  inline SHiphopNoteList& operator=(const SHiphopNoteList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopNoteList& operator=(SHiphopNoteList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopNoteList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopNoteList* internal_default_instance() {
    return reinterpret_cast<const SHiphopNoteList*>(
               &_SHiphopNoteList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SHiphopNoteList& a, SHiphopNoteList& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopNoteList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopNoteList* New() const final {
    return CreateMaybeMessage<SHiphopNoteList>(nullptr);
  }

  SHiphopNoteList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopNoteList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopNoteList& from);
  void MergeFrom(const SHiphopNoteList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopNoteList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopNoteList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotesFieldNumber = 1,
  };
  // repeated .hiphop.BHiphopNote notes = 1;
  int notes_size() const;
  private:
  int _internal_notes_size() const;
  public:
  void clear_notes();
  ::hiphop::BHiphopNote* mutable_notes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopNote >*
      mutable_notes();
  private:
  const ::hiphop::BHiphopNote& _internal_notes(int index) const;
  ::hiphop::BHiphopNote* _internal_add_notes();
  public:
  const ::hiphop::BHiphopNote& notes(int index) const;
  ::hiphop::BHiphopNote* add_notes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopNote >&
      notes() const;

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopNoteList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopNote > notes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class CHiphopNotePickup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.CHiphopNotePickup) */ {
 public:
  CHiphopNotePickup();
  virtual ~CHiphopNotePickup();

  CHiphopNotePickup(const CHiphopNotePickup& from);
  CHiphopNotePickup(CHiphopNotePickup&& from) noexcept
    : CHiphopNotePickup() {
    *this = ::std::move(from);
  }

  inline CHiphopNotePickup& operator=(const CHiphopNotePickup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHiphopNotePickup& operator=(CHiphopNotePickup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHiphopNotePickup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHiphopNotePickup* internal_default_instance() {
    return reinterpret_cast<const CHiphopNotePickup*>(
               &_CHiphopNotePickup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CHiphopNotePickup& a, CHiphopNotePickup& b) {
    a.Swap(&b);
  }
  inline void Swap(CHiphopNotePickup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHiphopNotePickup* New() const final {
    return CreateMaybeMessage<CHiphopNotePickup>(nullptr);
  }

  CHiphopNotePickup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHiphopNotePickup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHiphopNotePickup& from);
  void MergeFrom(const CHiphopNotePickup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHiphopNotePickup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.CHiphopNotePickup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.CHiphopNotePickup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class SHiphopNotePickup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopNotePickup) */ {
 public:
  SHiphopNotePickup();
  virtual ~SHiphopNotePickup();

  SHiphopNotePickup(const SHiphopNotePickup& from);
  SHiphopNotePickup(SHiphopNotePickup&& from) noexcept
    : SHiphopNotePickup() {
    *this = ::std::move(from);
  }

  inline SHiphopNotePickup& operator=(const SHiphopNotePickup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopNotePickup& operator=(SHiphopNotePickup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopNotePickup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopNotePickup* internal_default_instance() {
    return reinterpret_cast<const SHiphopNotePickup*>(
               &_SHiphopNotePickup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SHiphopNotePickup& a, SHiphopNotePickup& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopNotePickup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopNotePickup* New() const final {
    return CreateMaybeMessage<SHiphopNotePickup>(nullptr);
  }

  SHiphopNotePickup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopNotePickup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopNotePickup& from);
  void MergeFrom(const SHiphopNotePickup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopNotePickup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopNotePickup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
    kIndexFieldNumber = 2,
    kUidFieldNumber = 3,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopNotePickup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class BHiphopSwitch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.BHiphopSwitch) */ {
 public:
  BHiphopSwitch();
  virtual ~BHiphopSwitch();

  BHiphopSwitch(const BHiphopSwitch& from);
  BHiphopSwitch(BHiphopSwitch&& from) noexcept
    : BHiphopSwitch() {
    *this = ::std::move(from);
  }

  inline BHiphopSwitch& operator=(const BHiphopSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline BHiphopSwitch& operator=(BHiphopSwitch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BHiphopSwitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BHiphopSwitch* internal_default_instance() {
    return reinterpret_cast<const BHiphopSwitch*>(
               &_BHiphopSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BHiphopSwitch& a, BHiphopSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(BHiphopSwitch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BHiphopSwitch* New() const final {
    return CreateMaybeMessage<BHiphopSwitch>(nullptr);
  }

  BHiphopSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BHiphopSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BHiphopSwitch& from);
  void MergeFrom(const BHiphopSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BHiphopSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.BHiphopSwitch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrFieldNumber = 1,
    kOnFieldNumber = 2,
  };
  // .hiphop.HiphopSwitch curr = 1;
  void clear_curr();
  ::hiphop::HiphopSwitch curr() const;
  void set_curr(::hiphop::HiphopSwitch value);
  private:
  ::hiphop::HiphopSwitch _internal_curr() const;
  void _internal_set_curr(::hiphop::HiphopSwitch value);
  public:

  // bool on = 2;
  void clear_on();
  bool on() const;
  void set_on(bool value);
  private:
  bool _internal_on() const;
  void _internal_set_on(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.BHiphopSwitch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int curr_;
  bool on_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class SHiphopSwitch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopSwitch) */ {
 public:
  SHiphopSwitch();
  virtual ~SHiphopSwitch();

  SHiphopSwitch(const SHiphopSwitch& from);
  SHiphopSwitch(SHiphopSwitch&& from) noexcept
    : SHiphopSwitch() {
    *this = ::std::move(from);
  }

  inline SHiphopSwitch& operator=(const SHiphopSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopSwitch& operator=(SHiphopSwitch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopSwitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopSwitch* internal_default_instance() {
    return reinterpret_cast<const SHiphopSwitch*>(
               &_SHiphopSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SHiphopSwitch& a, SHiphopSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopSwitch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopSwitch* New() const final {
    return CreateMaybeMessage<SHiphopSwitch>(nullptr);
  }

  SHiphopSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopSwitch& from);
  void MergeFrom(const SHiphopSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopSwitch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBSwitchFieldNumber = 1,
  };
  // .hiphop.BHiphopSwitch bSwitch = 1;
  bool has_bswitch() const;
  private:
  bool _internal_has_bswitch() const;
  public:
  void clear_bswitch();
  const ::hiphop::BHiphopSwitch& bswitch() const;
  ::hiphop::BHiphopSwitch* release_bswitch();
  ::hiphop::BHiphopSwitch* mutable_bswitch();
  void set_allocated_bswitch(::hiphop::BHiphopSwitch* bswitch);
  private:
  const ::hiphop::BHiphopSwitch& _internal_bswitch() const;
  ::hiphop::BHiphopSwitch* _internal_mutable_bswitch();
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopSwitch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::hiphop::BHiphopSwitch* bswitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class CHiphopWarmupState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.CHiphopWarmupState) */ {
 public:
  CHiphopWarmupState();
  virtual ~CHiphopWarmupState();

  CHiphopWarmupState(const CHiphopWarmupState& from);
  CHiphopWarmupState(CHiphopWarmupState&& from) noexcept
    : CHiphopWarmupState() {
    *this = ::std::move(from);
  }

  inline CHiphopWarmupState& operator=(const CHiphopWarmupState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHiphopWarmupState& operator=(CHiphopWarmupState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHiphopWarmupState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHiphopWarmupState* internal_default_instance() {
    return reinterpret_cast<const CHiphopWarmupState*>(
               &_CHiphopWarmupState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CHiphopWarmupState& a, CHiphopWarmupState& b) {
    a.Swap(&b);
  }
  inline void Swap(CHiphopWarmupState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHiphopWarmupState* New() const final {
    return CreateMaybeMessage<CHiphopWarmupState>(nullptr);
  }

  CHiphopWarmupState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHiphopWarmupState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHiphopWarmupState& from);
  void MergeFrom(const CHiphopWarmupState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHiphopWarmupState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.CHiphopWarmupState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hiphop.CHiphopWarmupState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class SHiphopWarmupState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopWarmupState) */ {
 public:
  SHiphopWarmupState();
  virtual ~SHiphopWarmupState();

  SHiphopWarmupState(const SHiphopWarmupState& from);
  SHiphopWarmupState(SHiphopWarmupState&& from) noexcept
    : SHiphopWarmupState() {
    *this = ::std::move(from);
  }

  inline SHiphopWarmupState& operator=(const SHiphopWarmupState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopWarmupState& operator=(SHiphopWarmupState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopWarmupState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopWarmupState* internal_default_instance() {
    return reinterpret_cast<const SHiphopWarmupState*>(
               &_SHiphopWarmupState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SHiphopWarmupState& a, SHiphopWarmupState& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopWarmupState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopWarmupState* New() const final {
    return CreateMaybeMessage<SHiphopWarmupState>(nullptr);
  }

  SHiphopWarmupState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopWarmupState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopWarmupState& from);
  void MergeFrom(const SHiphopWarmupState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopWarmupState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopWarmupState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchListFieldNumber = 1,
  };
  // repeated .hiphop.BHiphopSwitch switchList = 1;
  int switchlist_size() const;
  private:
  int _internal_switchlist_size() const;
  public:
  void clear_switchlist();
  ::hiphop::BHiphopSwitch* mutable_switchlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch >*
      mutable_switchlist();
  private:
  const ::hiphop::BHiphopSwitch& _internal_switchlist(int index) const;
  ::hiphop::BHiphopSwitch* _internal_add_switchlist();
  public:
  const ::hiphop::BHiphopSwitch& switchlist(int index) const;
  ::hiphop::BHiphopSwitch* add_switchlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch >&
      switchlist() const;

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopWarmupState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch > switchlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class SHiphopCeremonyProcess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopCeremonyProcess) */ {
 public:
  SHiphopCeremonyProcess();
  virtual ~SHiphopCeremonyProcess();

  SHiphopCeremonyProcess(const SHiphopCeremonyProcess& from);
  SHiphopCeremonyProcess(SHiphopCeremonyProcess&& from) noexcept
    : SHiphopCeremonyProcess() {
    *this = ::std::move(from);
  }

  inline SHiphopCeremonyProcess& operator=(const SHiphopCeremonyProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopCeremonyProcess& operator=(SHiphopCeremonyProcess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopCeremonyProcess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopCeremonyProcess* internal_default_instance() {
    return reinterpret_cast<const SHiphopCeremonyProcess*>(
               &_SHiphopCeremonyProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SHiphopCeremonyProcess& a, SHiphopCeremonyProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopCeremonyProcess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopCeremonyProcess* New() const final {
    return CreateMaybeMessage<SHiphopCeremonyProcess>(nullptr);
  }

  SHiphopCeremonyProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopCeremonyProcess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopCeremonyProcess& from);
  void MergeFrom(const SHiphopCeremonyProcess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopCeremonyProcess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopCeremonyProcess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // .hiphop.HiphopProcess curr = 1;
  void clear_curr();
  ::hiphop::HiphopProcess curr() const;
  void set_curr(::hiphop::HiphopProcess value);
  private:
  ::hiphop::HiphopProcess _internal_curr() const;
  void _internal_set_curr(::hiphop::HiphopProcess value);
  public:

  // int32 startTime = 2;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopCeremonyProcess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int curr_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class SHiphopStarSwitch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopStarSwitch) */ {
 public:
  SHiphopStarSwitch();
  virtual ~SHiphopStarSwitch();

  SHiphopStarSwitch(const SHiphopStarSwitch& from);
  SHiphopStarSwitch(SHiphopStarSwitch&& from) noexcept
    : SHiphopStarSwitch() {
    *this = ::std::move(from);
  }

  inline SHiphopStarSwitch& operator=(const SHiphopStarSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopStarSwitch& operator=(SHiphopStarSwitch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopStarSwitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopStarSwitch* internal_default_instance() {
    return reinterpret_cast<const SHiphopStarSwitch*>(
               &_SHiphopStarSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SHiphopStarSwitch& a, SHiphopStarSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopStarSwitch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopStarSwitch* New() const final {
    return CreateMaybeMessage<SHiphopStarSwitch>(nullptr);
  }

  SHiphopStarSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopStarSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopStarSwitch& from);
  void MergeFrom(const SHiphopStarSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopStarSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopStarSwitch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarFieldNumber = 1,
    kTypeFieldNumber = 2,
    kOnFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // .hiphop.HiphopStar star = 1;
  void clear_star();
  ::hiphop::HiphopStar star() const;
  void set_star(::hiphop::HiphopStar value);
  private:
  ::hiphop::HiphopStar _internal_star() const;
  void _internal_set_star(::hiphop::HiphopStar value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool on = 3;
  void clear_on();
  bool on() const;
  void set_on(bool value);
  private:
  bool _internal_on() const;
  void _internal_set_on(bool value);
  public:

  // int32 index = 4;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopStarSwitch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int star_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  bool on_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class CHiphopCeremonyState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.CHiphopCeremonyState) */ {
 public:
  CHiphopCeremonyState();
  virtual ~CHiphopCeremonyState();

  CHiphopCeremonyState(const CHiphopCeremonyState& from);
  CHiphopCeremonyState(CHiphopCeremonyState&& from) noexcept
    : CHiphopCeremonyState() {
    *this = ::std::move(from);
  }

  inline CHiphopCeremonyState& operator=(const CHiphopCeremonyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHiphopCeremonyState& operator=(CHiphopCeremonyState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHiphopCeremonyState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHiphopCeremonyState* internal_default_instance() {
    return reinterpret_cast<const CHiphopCeremonyState*>(
               &_CHiphopCeremonyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CHiphopCeremonyState& a, CHiphopCeremonyState& b) {
    a.Swap(&b);
  }
  inline void Swap(CHiphopCeremonyState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHiphopCeremonyState* New() const final {
    return CreateMaybeMessage<CHiphopCeremonyState>(nullptr);
  }

  CHiphopCeremonyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHiphopCeremonyState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHiphopCeremonyState& from);
  void MergeFrom(const CHiphopCeremonyState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHiphopCeremonyState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.CHiphopCeremonyState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hiphop.CHiphopCeremonyState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class BHiphopStarBakAudio :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.BHiphopStarBakAudio) */ {
 public:
  BHiphopStarBakAudio();
  virtual ~BHiphopStarBakAudio();

  BHiphopStarBakAudio(const BHiphopStarBakAudio& from);
  BHiphopStarBakAudio(BHiphopStarBakAudio&& from) noexcept
    : BHiphopStarBakAudio() {
    *this = ::std::move(from);
  }

  inline BHiphopStarBakAudio& operator=(const BHiphopStarBakAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline BHiphopStarBakAudio& operator=(BHiphopStarBakAudio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BHiphopStarBakAudio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BHiphopStarBakAudio* internal_default_instance() {
    return reinterpret_cast<const BHiphopStarBakAudio*>(
               &_BHiphopStarBakAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BHiphopStarBakAudio& a, BHiphopStarBakAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(BHiphopStarBakAudio* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BHiphopStarBakAudio* New() const final {
    return CreateMaybeMessage<BHiphopStarBakAudio>(nullptr);
  }

  BHiphopStarBakAudio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BHiphopStarBakAudio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BHiphopStarBakAudio& from);
  void MergeFrom(const BHiphopStarBakAudio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BHiphopStarBakAudio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.BHiphopStarBakAudio";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarFieldNumber = 1,
    kIndexFieldNumber = 2,
    kStartTimeFieldNumber = 3,
  };
  // .hiphop.HiphopStar star = 1;
  void clear_star();
  ::hiphop::HiphopStar star() const;
  void set_star(::hiphop::HiphopStar value);
  private:
  ::hiphop::HiphopStar _internal_star() const;
  void _internal_set_star(::hiphop::HiphopStar value);
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 startTime = 3;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.BHiphopStarBakAudio)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int star_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class SHiphopCeremonyState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopCeremonyState) */ {
 public:
  SHiphopCeremonyState();
  virtual ~SHiphopCeremonyState();

  SHiphopCeremonyState(const SHiphopCeremonyState& from);
  SHiphopCeremonyState(SHiphopCeremonyState&& from) noexcept
    : SHiphopCeremonyState() {
    *this = ::std::move(from);
  }

  inline SHiphopCeremonyState& operator=(const SHiphopCeremonyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopCeremonyState& operator=(SHiphopCeremonyState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopCeremonyState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopCeremonyState* internal_default_instance() {
    return reinterpret_cast<const SHiphopCeremonyState*>(
               &_SHiphopCeremonyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SHiphopCeremonyState& a, SHiphopCeremonyState& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopCeremonyState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopCeremonyState* New() const final {
    return CreateMaybeMessage<SHiphopCeremonyState>(nullptr);
  }

  SHiphopCeremonyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopCeremonyState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopCeremonyState& from);
  void MergeFrom(const SHiphopCeremonyState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopCeremonyState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopCeremonyState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchListFieldNumber = 1,
    kVoiceOnStarsFieldNumber = 4,
    kStageOnStarsFieldNumber = 5,
    kHasAwardStarsFieldNumber = 6,
    kStarAudioFieldNumber = 7,
    kCurrFieldNumber = 2,
    kStartTimeFieldNumber = 3,
  };
  // repeated .hiphop.BHiphopSwitch switchList = 1;
  int switchlist_size() const;
  private:
  int _internal_switchlist_size() const;
  public:
  void clear_switchlist();
  ::hiphop::BHiphopSwitch* mutable_switchlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch >*
      mutable_switchlist();
  private:
  const ::hiphop::BHiphopSwitch& _internal_switchlist(int index) const;
  ::hiphop::BHiphopSwitch* _internal_add_switchlist();
  public:
  const ::hiphop::BHiphopSwitch& switchlist(int index) const;
  ::hiphop::BHiphopSwitch* add_switchlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch >&
      switchlist() const;

  // repeated .hiphop.HiphopStar voiceOnStars = 4;
  int voiceonstars_size() const;
  private:
  int _internal_voiceonstars_size() const;
  public:
  void clear_voiceonstars();
  private:
  ::hiphop::HiphopStar _internal_voiceonstars(int index) const;
  void _internal_add_voiceonstars(::hiphop::HiphopStar value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_voiceonstars();
  public:
  ::hiphop::HiphopStar voiceonstars(int index) const;
  void set_voiceonstars(int index, ::hiphop::HiphopStar value);
  void add_voiceonstars(::hiphop::HiphopStar value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& voiceonstars() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_voiceonstars();

  // repeated .hiphop.HiphopStar stageOnStars = 5;
  int stageonstars_size() const;
  private:
  int _internal_stageonstars_size() const;
  public:
  void clear_stageonstars();
  private:
  ::hiphop::HiphopStar _internal_stageonstars(int index) const;
  void _internal_add_stageonstars(::hiphop::HiphopStar value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_stageonstars();
  public:
  ::hiphop::HiphopStar stageonstars(int index) const;
  void set_stageonstars(int index, ::hiphop::HiphopStar value);
  void add_stageonstars(::hiphop::HiphopStar value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& stageonstars() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_stageonstars();

  // repeated .hiphop.HiphopStar hasAwardStars = 6;
  int hasawardstars_size() const;
  private:
  int _internal_hasawardstars_size() const;
  public:
  void clear_hasawardstars();
  private:
  ::hiphop::HiphopStar _internal_hasawardstars(int index) const;
  void _internal_add_hasawardstars(::hiphop::HiphopStar value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_hasawardstars();
  public:
  ::hiphop::HiphopStar hasawardstars(int index) const;
  void set_hasawardstars(int index, ::hiphop::HiphopStar value);
  void add_hasawardstars(::hiphop::HiphopStar value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& hasawardstars() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_hasawardstars();

  // .hiphop.BHiphopStarBakAudio starAudio = 7;
  bool has_staraudio() const;
  private:
  bool _internal_has_staraudio() const;
  public:
  void clear_staraudio();
  const ::hiphop::BHiphopStarBakAudio& staraudio() const;
  ::hiphop::BHiphopStarBakAudio* release_staraudio();
  ::hiphop::BHiphopStarBakAudio* mutable_staraudio();
  void set_allocated_staraudio(::hiphop::BHiphopStarBakAudio* staraudio);
  private:
  const ::hiphop::BHiphopStarBakAudio& _internal_staraudio() const;
  ::hiphop::BHiphopStarBakAudio* _internal_mutable_staraudio();
  public:

  // .hiphop.HiphopProcess curr = 2;
  void clear_curr();
  ::hiphop::HiphopProcess curr() const;
  void set_curr(::hiphop::HiphopProcess value);
  private:
  ::hiphop::HiphopProcess _internal_curr() const;
  void _internal_set_curr(::hiphop::HiphopProcess value);
  public:

  // int32 startTime = 3;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopCeremonyState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch > switchlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> voiceonstars_;
  mutable std::atomic<int> _voiceonstars_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> stageonstars_;
  mutable std::atomic<int> _stageonstars_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> hasawardstars_;
  mutable std::atomic<int> _hasawardstars_cached_byte_size_;
  ::hiphop::BHiphopStarBakAudio* staraudio_;
  int curr_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// -------------------------------------------------------------------

class SHiphopPhotoRain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hiphop.SHiphopPhotoRain) */ {
 public:
  SHiphopPhotoRain();
  virtual ~SHiphopPhotoRain();

  SHiphopPhotoRain(const SHiphopPhotoRain& from);
  SHiphopPhotoRain(SHiphopPhotoRain&& from) noexcept
    : SHiphopPhotoRain() {
    *this = ::std::move(from);
  }

  inline SHiphopPhotoRain& operator=(const SHiphopPhotoRain& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHiphopPhotoRain& operator=(SHiphopPhotoRain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHiphopPhotoRain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHiphopPhotoRain* internal_default_instance() {
    return reinterpret_cast<const SHiphopPhotoRain*>(
               &_SHiphopPhotoRain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SHiphopPhotoRain& a, SHiphopPhotoRain& b) {
    a.Swap(&b);
  }
  inline void Swap(SHiphopPhotoRain* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHiphopPhotoRain* New() const final {
    return CreateMaybeMessage<SHiphopPhotoRain>(nullptr);
  }

  SHiphopPhotoRain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHiphopPhotoRain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHiphopPhotoRain& from);
  void MergeFrom(const SHiphopPhotoRain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHiphopPhotoRain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hiphop.SHiphopPhotoRain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hiphopCeremony_2eproto);
    return ::descriptor_table_hiphopCeremony_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsNameFieldNumber = 3,
    kGoodsPicFieldNumber = 4,
    kGoodsIdFieldNumber = 1,
    kGoodsTypeFieldNumber = 2,
  };
  // string goodsName = 3;
  void clear_goodsname();
  const std::string& goodsname() const;
  void set_goodsname(const std::string& value);
  void set_goodsname(std::string&& value);
  void set_goodsname(const char* value);
  void set_goodsname(const char* value, size_t size);
  std::string* mutable_goodsname();
  std::string* release_goodsname();
  void set_allocated_goodsname(std::string* goodsname);
  private:
  const std::string& _internal_goodsname() const;
  void _internal_set_goodsname(const std::string& value);
  std::string* _internal_mutable_goodsname();
  public:

  // string goodsPic = 4;
  void clear_goodspic();
  const std::string& goodspic() const;
  void set_goodspic(const std::string& value);
  void set_goodspic(std::string&& value);
  void set_goodspic(const char* value);
  void set_goodspic(const char* value, size_t size);
  std::string* mutable_goodspic();
  std::string* release_goodspic();
  void set_allocated_goodspic(std::string* goodspic);
  private:
  const std::string& _internal_goodspic() const;
  void _internal_set_goodspic(const std::string& value);
  std::string* _internal_mutable_goodspic();
  public:

  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsType = 2;
  void clear_goodstype();
  ::PROTOBUF_NAMESPACE_ID::int32 goodstype() const;
  void set_goodstype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodstype() const;
  void _internal_set_goodstype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hiphop.SHiphopPhotoRain)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goodsname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goodspic_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodstype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hiphopCeremony_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CHiphopAwardPrediction

// int32 awardId = 1;
inline void CHiphopAwardPrediction::clear_awardid() {
  awardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopAwardPrediction::_internal_awardid() const {
  return awardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopAwardPrediction::awardid() const {
  // @@protoc_insertion_point(field_get:hiphop.CHiphopAwardPrediction.awardId)
  return _internal_awardid();
}
inline void CHiphopAwardPrediction::_internal_set_awardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  awardid_ = value;
}
inline void CHiphopAwardPrediction::set_awardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_awardid(value);
  // @@protoc_insertion_point(field_set:hiphop.CHiphopAwardPrediction.awardId)
}

// int32 index = 2;
inline void CHiphopAwardPrediction::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopAwardPrediction::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopAwardPrediction::index() const {
  // @@protoc_insertion_point(field_get:hiphop.CHiphopAwardPrediction.index)
  return _internal_index();
}
inline void CHiphopAwardPrediction::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void CHiphopAwardPrediction::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:hiphop.CHiphopAwardPrediction.index)
}

// -------------------------------------------------------------------

// SHiphopAwardPrediction

// string goodsName = 1;
inline void SHiphopAwardPrediction::clear_goodsname() {
  goodsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHiphopAwardPrediction::goodsname() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopAwardPrediction.goodsName)
  return _internal_goodsname();
}
inline void SHiphopAwardPrediction::set_goodsname(const std::string& value) {
  _internal_set_goodsname(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopAwardPrediction.goodsName)
}
inline std::string* SHiphopAwardPrediction::mutable_goodsname() {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopAwardPrediction.goodsName)
  return _internal_mutable_goodsname();
}
inline const std::string& SHiphopAwardPrediction::_internal_goodsname() const {
  return goodsname_.GetNoArena();
}
inline void SHiphopAwardPrediction::_internal_set_goodsname(const std::string& value) {
  
  goodsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHiphopAwardPrediction::set_goodsname(std::string&& value) {
  
  goodsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hiphop.SHiphopAwardPrediction.goodsName)
}
inline void SHiphopAwardPrediction::set_goodsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  goodsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hiphop.SHiphopAwardPrediction.goodsName)
}
inline void SHiphopAwardPrediction::set_goodsname(const char* value, size_t size) {
  
  goodsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hiphop.SHiphopAwardPrediction.goodsName)
}
inline std::string* SHiphopAwardPrediction::_internal_mutable_goodsname() {
  
  return goodsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHiphopAwardPrediction::release_goodsname() {
  // @@protoc_insertion_point(field_release:hiphop.SHiphopAwardPrediction.goodsName)
  
  return goodsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHiphopAwardPrediction::set_allocated_goodsname(std::string* goodsname) {
  if (goodsname != nullptr) {
    
  } else {
    
  }
  goodsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goodsname);
  // @@protoc_insertion_point(field_set_allocated:hiphop.SHiphopAwardPrediction.goodsName)
}

// string goodsPic = 2;
inline void SHiphopAwardPrediction::clear_goodspic() {
  goodspic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHiphopAwardPrediction::goodspic() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopAwardPrediction.goodsPic)
  return _internal_goodspic();
}
inline void SHiphopAwardPrediction::set_goodspic(const std::string& value) {
  _internal_set_goodspic(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopAwardPrediction.goodsPic)
}
inline std::string* SHiphopAwardPrediction::mutable_goodspic() {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopAwardPrediction.goodsPic)
  return _internal_mutable_goodspic();
}
inline const std::string& SHiphopAwardPrediction::_internal_goodspic() const {
  return goodspic_.GetNoArena();
}
inline void SHiphopAwardPrediction::_internal_set_goodspic(const std::string& value) {
  
  goodspic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHiphopAwardPrediction::set_goodspic(std::string&& value) {
  
  goodspic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hiphop.SHiphopAwardPrediction.goodsPic)
}
inline void SHiphopAwardPrediction::set_goodspic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  goodspic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hiphop.SHiphopAwardPrediction.goodsPic)
}
inline void SHiphopAwardPrediction::set_goodspic(const char* value, size_t size) {
  
  goodspic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hiphop.SHiphopAwardPrediction.goodsPic)
}
inline std::string* SHiphopAwardPrediction::_internal_mutable_goodspic() {
  
  return goodspic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHiphopAwardPrediction::release_goodspic() {
  // @@protoc_insertion_point(field_release:hiphop.SHiphopAwardPrediction.goodsPic)
  
  return goodspic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHiphopAwardPrediction::set_allocated_goodspic(std::string* goodspic) {
  if (goodspic != nullptr) {
    
  } else {
    
  }
  goodspic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goodspic);
  // @@protoc_insertion_point(field_set_allocated:hiphop.SHiphopAwardPrediction.goodsPic)
}

// string goodsDesc = 3;
inline void SHiphopAwardPrediction::clear_goodsdesc() {
  goodsdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHiphopAwardPrediction::goodsdesc() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopAwardPrediction.goodsDesc)
  return _internal_goodsdesc();
}
inline void SHiphopAwardPrediction::set_goodsdesc(const std::string& value) {
  _internal_set_goodsdesc(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopAwardPrediction.goodsDesc)
}
inline std::string* SHiphopAwardPrediction::mutable_goodsdesc() {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopAwardPrediction.goodsDesc)
  return _internal_mutable_goodsdesc();
}
inline const std::string& SHiphopAwardPrediction::_internal_goodsdesc() const {
  return goodsdesc_.GetNoArena();
}
inline void SHiphopAwardPrediction::_internal_set_goodsdesc(const std::string& value) {
  
  goodsdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHiphopAwardPrediction::set_goodsdesc(std::string&& value) {
  
  goodsdesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hiphop.SHiphopAwardPrediction.goodsDesc)
}
inline void SHiphopAwardPrediction::set_goodsdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  goodsdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hiphop.SHiphopAwardPrediction.goodsDesc)
}
inline void SHiphopAwardPrediction::set_goodsdesc(const char* value, size_t size) {
  
  goodsdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hiphop.SHiphopAwardPrediction.goodsDesc)
}
inline std::string* SHiphopAwardPrediction::_internal_mutable_goodsdesc() {
  
  return goodsdesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHiphopAwardPrediction::release_goodsdesc() {
  // @@protoc_insertion_point(field_release:hiphop.SHiphopAwardPrediction.goodsDesc)
  
  return goodsdesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHiphopAwardPrediction::set_allocated_goodsdesc(std::string* goodsdesc) {
  if (goodsdesc != nullptr) {
    
  } else {
    
  }
  goodsdesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goodsdesc);
  // @@protoc_insertion_point(field_set_allocated:hiphop.SHiphopAwardPrediction.goodsDesc)
}

// -------------------------------------------------------------------

// CHiphopNoteList

// -------------------------------------------------------------------

// BHiphopNote

// int32 index = 1;
inline void BHiphopNote::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BHiphopNote::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BHiphopNote::index() const {
  // @@protoc_insertion_point(field_get:hiphop.BHiphopNote.index)
  return _internal_index();
}
inline void BHiphopNote::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void BHiphopNote::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:hiphop.BHiphopNote.index)
}

// .vector.PVector3 position = 2;
inline bool BHiphopNote::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BHiphopNote::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& BHiphopNote::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& BHiphopNote::position() const {
  // @@protoc_insertion_point(field_get:hiphop.BHiphopNote.position)
  return _internal_position();
}
inline ::vector::PVector3* BHiphopNote::release_position() {
  // @@protoc_insertion_point(field_release:hiphop.BHiphopNote.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* BHiphopNote::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* BHiphopNote::mutable_position() {
  // @@protoc_insertion_point(field_mutable:hiphop.BHiphopNote.position)
  return _internal_mutable_position();
}
inline void BHiphopNote::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:hiphop.BHiphopNote.position)
}

// .vector.PVector3 rotation = 3;
inline bool BHiphopNote::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool BHiphopNote::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::vector::PVector3& BHiphopNote::_internal_rotation() const {
  const ::vector::PVector3* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& BHiphopNote::rotation() const {
  // @@protoc_insertion_point(field_get:hiphop.BHiphopNote.rotation)
  return _internal_rotation();
}
inline ::vector::PVector3* BHiphopNote::release_rotation() {
  // @@protoc_insertion_point(field_release:hiphop.BHiphopNote.rotation)
  
  ::vector::PVector3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::vector::PVector3* BHiphopNote::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  return rotation_;
}
inline ::vector::PVector3* BHiphopNote::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:hiphop.BHiphopNote.rotation)
  return _internal_mutable_rotation();
}
inline void BHiphopNote::set_allocated_rotation(::vector::PVector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:hiphop.BHiphopNote.rotation)
}

// -------------------------------------------------------------------

// SHiphopNoteList

// repeated .hiphop.BHiphopNote notes = 1;
inline int SHiphopNoteList::_internal_notes_size() const {
  return notes_.size();
}
inline int SHiphopNoteList::notes_size() const {
  return _internal_notes_size();
}
inline void SHiphopNoteList::clear_notes() {
  notes_.Clear();
}
inline ::hiphop::BHiphopNote* SHiphopNoteList::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopNoteList.notes)
  return notes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopNote >*
SHiphopNoteList::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:hiphop.SHiphopNoteList.notes)
  return &notes_;
}
inline const ::hiphop::BHiphopNote& SHiphopNoteList::_internal_notes(int index) const {
  return notes_.Get(index);
}
inline const ::hiphop::BHiphopNote& SHiphopNoteList::notes(int index) const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopNoteList.notes)
  return _internal_notes(index);
}
inline ::hiphop::BHiphopNote* SHiphopNoteList::_internal_add_notes() {
  return notes_.Add();
}
inline ::hiphop::BHiphopNote* SHiphopNoteList::add_notes() {
  // @@protoc_insertion_point(field_add:hiphop.SHiphopNoteList.notes)
  return _internal_add_notes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopNote >&
SHiphopNoteList::notes() const {
  // @@protoc_insertion_point(field_list:hiphop.SHiphopNoteList.notes)
  return notes_;
}

// -------------------------------------------------------------------

// CHiphopNotePickup

// int32 index = 1;
inline void CHiphopNotePickup::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopNotePickup::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHiphopNotePickup::index() const {
  // @@protoc_insertion_point(field_get:hiphop.CHiphopNotePickup.index)
  return _internal_index();
}
inline void CHiphopNotePickup::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void CHiphopNotePickup::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:hiphop.CHiphopNotePickup.index)
}

// -------------------------------------------------------------------

// SHiphopNotePickup

// int32 res = 1;
inline void SHiphopNotePickup::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopNotePickup::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopNotePickup::res() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopNotePickup.res)
  return _internal_res();
}
inline void SHiphopNotePickup::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void SHiphopNotePickup::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopNotePickup.res)
}

// int32 index = 2;
inline void SHiphopNotePickup::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopNotePickup::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopNotePickup::index() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopNotePickup.index)
  return _internal_index();
}
inline void SHiphopNotePickup::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void SHiphopNotePickup::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopNotePickup.index)
}

// int32 uid = 3;
inline void SHiphopNotePickup::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopNotePickup::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopNotePickup::uid() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopNotePickup.uid)
  return _internal_uid();
}
inline void SHiphopNotePickup::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SHiphopNotePickup::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopNotePickup.uid)
}

// -------------------------------------------------------------------

// BHiphopSwitch

// .hiphop.HiphopSwitch curr = 1;
inline void BHiphopSwitch::clear_curr() {
  curr_ = 0;
}
inline ::hiphop::HiphopSwitch BHiphopSwitch::_internal_curr() const {
  return static_cast< ::hiphop::HiphopSwitch >(curr_);
}
inline ::hiphop::HiphopSwitch BHiphopSwitch::curr() const {
  // @@protoc_insertion_point(field_get:hiphop.BHiphopSwitch.curr)
  return _internal_curr();
}
inline void BHiphopSwitch::_internal_set_curr(::hiphop::HiphopSwitch value) {
  
  curr_ = value;
}
inline void BHiphopSwitch::set_curr(::hiphop::HiphopSwitch value) {
  _internal_set_curr(value);
  // @@protoc_insertion_point(field_set:hiphop.BHiphopSwitch.curr)
}

// bool on = 2;
inline void BHiphopSwitch::clear_on() {
  on_ = false;
}
inline bool BHiphopSwitch::_internal_on() const {
  return on_;
}
inline bool BHiphopSwitch::on() const {
  // @@protoc_insertion_point(field_get:hiphop.BHiphopSwitch.on)
  return _internal_on();
}
inline void BHiphopSwitch::_internal_set_on(bool value) {
  
  on_ = value;
}
inline void BHiphopSwitch::set_on(bool value) {
  _internal_set_on(value);
  // @@protoc_insertion_point(field_set:hiphop.BHiphopSwitch.on)
}

// -------------------------------------------------------------------

// SHiphopSwitch

// .hiphop.BHiphopSwitch bSwitch = 1;
inline bool SHiphopSwitch::_internal_has_bswitch() const {
  return this != internal_default_instance() && bswitch_ != nullptr;
}
inline bool SHiphopSwitch::has_bswitch() const {
  return _internal_has_bswitch();
}
inline void SHiphopSwitch::clear_bswitch() {
  if (GetArenaNoVirtual() == nullptr && bswitch_ != nullptr) {
    delete bswitch_;
  }
  bswitch_ = nullptr;
}
inline const ::hiphop::BHiphopSwitch& SHiphopSwitch::_internal_bswitch() const {
  const ::hiphop::BHiphopSwitch* p = bswitch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hiphop::BHiphopSwitch*>(
      &::hiphop::_BHiphopSwitch_default_instance_);
}
inline const ::hiphop::BHiphopSwitch& SHiphopSwitch::bswitch() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopSwitch.bSwitch)
  return _internal_bswitch();
}
inline ::hiphop::BHiphopSwitch* SHiphopSwitch::release_bswitch() {
  // @@protoc_insertion_point(field_release:hiphop.SHiphopSwitch.bSwitch)
  
  ::hiphop::BHiphopSwitch* temp = bswitch_;
  bswitch_ = nullptr;
  return temp;
}
inline ::hiphop::BHiphopSwitch* SHiphopSwitch::_internal_mutable_bswitch() {
  
  if (bswitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::hiphop::BHiphopSwitch>(GetArenaNoVirtual());
    bswitch_ = p;
  }
  return bswitch_;
}
inline ::hiphop::BHiphopSwitch* SHiphopSwitch::mutable_bswitch() {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopSwitch.bSwitch)
  return _internal_mutable_bswitch();
}
inline void SHiphopSwitch::set_allocated_bswitch(::hiphop::BHiphopSwitch* bswitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bswitch_;
  }
  if (bswitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bswitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bswitch, submessage_arena);
    }
    
  } else {
    
  }
  bswitch_ = bswitch;
  // @@protoc_insertion_point(field_set_allocated:hiphop.SHiphopSwitch.bSwitch)
}

// -------------------------------------------------------------------

// CHiphopWarmupState

// -------------------------------------------------------------------

// SHiphopWarmupState

// repeated .hiphop.BHiphopSwitch switchList = 1;
inline int SHiphopWarmupState::_internal_switchlist_size() const {
  return switchlist_.size();
}
inline int SHiphopWarmupState::switchlist_size() const {
  return _internal_switchlist_size();
}
inline void SHiphopWarmupState::clear_switchlist() {
  switchlist_.Clear();
}
inline ::hiphop::BHiphopSwitch* SHiphopWarmupState::mutable_switchlist(int index) {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopWarmupState.switchList)
  return switchlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch >*
SHiphopWarmupState::mutable_switchlist() {
  // @@protoc_insertion_point(field_mutable_list:hiphop.SHiphopWarmupState.switchList)
  return &switchlist_;
}
inline const ::hiphop::BHiphopSwitch& SHiphopWarmupState::_internal_switchlist(int index) const {
  return switchlist_.Get(index);
}
inline const ::hiphop::BHiphopSwitch& SHiphopWarmupState::switchlist(int index) const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopWarmupState.switchList)
  return _internal_switchlist(index);
}
inline ::hiphop::BHiphopSwitch* SHiphopWarmupState::_internal_add_switchlist() {
  return switchlist_.Add();
}
inline ::hiphop::BHiphopSwitch* SHiphopWarmupState::add_switchlist() {
  // @@protoc_insertion_point(field_add:hiphop.SHiphopWarmupState.switchList)
  return _internal_add_switchlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch >&
SHiphopWarmupState::switchlist() const {
  // @@protoc_insertion_point(field_list:hiphop.SHiphopWarmupState.switchList)
  return switchlist_;
}

// -------------------------------------------------------------------

// SHiphopCeremonyProcess

// .hiphop.HiphopProcess curr = 1;
inline void SHiphopCeremonyProcess::clear_curr() {
  curr_ = 0;
}
inline ::hiphop::HiphopProcess SHiphopCeremonyProcess::_internal_curr() const {
  return static_cast< ::hiphop::HiphopProcess >(curr_);
}
inline ::hiphop::HiphopProcess SHiphopCeremonyProcess::curr() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopCeremonyProcess.curr)
  return _internal_curr();
}
inline void SHiphopCeremonyProcess::_internal_set_curr(::hiphop::HiphopProcess value) {
  
  curr_ = value;
}
inline void SHiphopCeremonyProcess::set_curr(::hiphop::HiphopProcess value) {
  _internal_set_curr(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopCeremonyProcess.curr)
}

// int32 startTime = 2;
inline void SHiphopCeremonyProcess::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopCeremonyProcess::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopCeremonyProcess::starttime() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopCeremonyProcess.startTime)
  return _internal_starttime();
}
inline void SHiphopCeremonyProcess::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void SHiphopCeremonyProcess::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopCeremonyProcess.startTime)
}

// -------------------------------------------------------------------

// SHiphopStarSwitch

// .hiphop.HiphopStar star = 1;
inline void SHiphopStarSwitch::clear_star() {
  star_ = 0;
}
inline ::hiphop::HiphopStar SHiphopStarSwitch::_internal_star() const {
  return static_cast< ::hiphop::HiphopStar >(star_);
}
inline ::hiphop::HiphopStar SHiphopStarSwitch::star() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopStarSwitch.star)
  return _internal_star();
}
inline void SHiphopStarSwitch::_internal_set_star(::hiphop::HiphopStar value) {
  
  star_ = value;
}
inline void SHiphopStarSwitch::set_star(::hiphop::HiphopStar value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopStarSwitch.star)
}

// int32 type = 2;
inline void SHiphopStarSwitch::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopStarSwitch::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopStarSwitch::type() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopStarSwitch.type)
  return _internal_type();
}
inline void SHiphopStarSwitch::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SHiphopStarSwitch::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopStarSwitch.type)
}

// bool on = 3;
inline void SHiphopStarSwitch::clear_on() {
  on_ = false;
}
inline bool SHiphopStarSwitch::_internal_on() const {
  return on_;
}
inline bool SHiphopStarSwitch::on() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopStarSwitch.on)
  return _internal_on();
}
inline void SHiphopStarSwitch::_internal_set_on(bool value) {
  
  on_ = value;
}
inline void SHiphopStarSwitch::set_on(bool value) {
  _internal_set_on(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopStarSwitch.on)
}

// int32 index = 4;
inline void SHiphopStarSwitch::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopStarSwitch::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopStarSwitch::index() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopStarSwitch.index)
  return _internal_index();
}
inline void SHiphopStarSwitch::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void SHiphopStarSwitch::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopStarSwitch.index)
}

// -------------------------------------------------------------------

// CHiphopCeremonyState

// -------------------------------------------------------------------

// BHiphopStarBakAudio

// .hiphop.HiphopStar star = 1;
inline void BHiphopStarBakAudio::clear_star() {
  star_ = 0;
}
inline ::hiphop::HiphopStar BHiphopStarBakAudio::_internal_star() const {
  return static_cast< ::hiphop::HiphopStar >(star_);
}
inline ::hiphop::HiphopStar BHiphopStarBakAudio::star() const {
  // @@protoc_insertion_point(field_get:hiphop.BHiphopStarBakAudio.star)
  return _internal_star();
}
inline void BHiphopStarBakAudio::_internal_set_star(::hiphop::HiphopStar value) {
  
  star_ = value;
}
inline void BHiphopStarBakAudio::set_star(::hiphop::HiphopStar value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:hiphop.BHiphopStarBakAudio.star)
}

// int32 index = 2;
inline void BHiphopStarBakAudio::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BHiphopStarBakAudio::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BHiphopStarBakAudio::index() const {
  // @@protoc_insertion_point(field_get:hiphop.BHiphopStarBakAudio.index)
  return _internal_index();
}
inline void BHiphopStarBakAudio::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void BHiphopStarBakAudio::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:hiphop.BHiphopStarBakAudio.index)
}

// int32 startTime = 3;
inline void BHiphopStarBakAudio::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BHiphopStarBakAudio::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BHiphopStarBakAudio::starttime() const {
  // @@protoc_insertion_point(field_get:hiphop.BHiphopStarBakAudio.startTime)
  return _internal_starttime();
}
inline void BHiphopStarBakAudio::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void BHiphopStarBakAudio::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:hiphop.BHiphopStarBakAudio.startTime)
}

// -------------------------------------------------------------------

// SHiphopCeremonyState

// repeated .hiphop.BHiphopSwitch switchList = 1;
inline int SHiphopCeremonyState::_internal_switchlist_size() const {
  return switchlist_.size();
}
inline int SHiphopCeremonyState::switchlist_size() const {
  return _internal_switchlist_size();
}
inline void SHiphopCeremonyState::clear_switchlist() {
  switchlist_.Clear();
}
inline ::hiphop::BHiphopSwitch* SHiphopCeremonyState::mutable_switchlist(int index) {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopCeremonyState.switchList)
  return switchlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch >*
SHiphopCeremonyState::mutable_switchlist() {
  // @@protoc_insertion_point(field_mutable_list:hiphop.SHiphopCeremonyState.switchList)
  return &switchlist_;
}
inline const ::hiphop::BHiphopSwitch& SHiphopCeremonyState::_internal_switchlist(int index) const {
  return switchlist_.Get(index);
}
inline const ::hiphop::BHiphopSwitch& SHiphopCeremonyState::switchlist(int index) const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopCeremonyState.switchList)
  return _internal_switchlist(index);
}
inline ::hiphop::BHiphopSwitch* SHiphopCeremonyState::_internal_add_switchlist() {
  return switchlist_.Add();
}
inline ::hiphop::BHiphopSwitch* SHiphopCeremonyState::add_switchlist() {
  // @@protoc_insertion_point(field_add:hiphop.SHiphopCeremonyState.switchList)
  return _internal_add_switchlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hiphop::BHiphopSwitch >&
SHiphopCeremonyState::switchlist() const {
  // @@protoc_insertion_point(field_list:hiphop.SHiphopCeremonyState.switchList)
  return switchlist_;
}

// .hiphop.HiphopProcess curr = 2;
inline void SHiphopCeremonyState::clear_curr() {
  curr_ = 0;
}
inline ::hiphop::HiphopProcess SHiphopCeremonyState::_internal_curr() const {
  return static_cast< ::hiphop::HiphopProcess >(curr_);
}
inline ::hiphop::HiphopProcess SHiphopCeremonyState::curr() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopCeremonyState.curr)
  return _internal_curr();
}
inline void SHiphopCeremonyState::_internal_set_curr(::hiphop::HiphopProcess value) {
  
  curr_ = value;
}
inline void SHiphopCeremonyState::set_curr(::hiphop::HiphopProcess value) {
  _internal_set_curr(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopCeremonyState.curr)
}

// int32 startTime = 3;
inline void SHiphopCeremonyState::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopCeremonyState::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopCeremonyState::starttime() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopCeremonyState.startTime)
  return _internal_starttime();
}
inline void SHiphopCeremonyState::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void SHiphopCeremonyState::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopCeremonyState.startTime)
}

// repeated .hiphop.HiphopStar voiceOnStars = 4;
inline int SHiphopCeremonyState::_internal_voiceonstars_size() const {
  return voiceonstars_.size();
}
inline int SHiphopCeremonyState::voiceonstars_size() const {
  return _internal_voiceonstars_size();
}
inline void SHiphopCeremonyState::clear_voiceonstars() {
  voiceonstars_.Clear();
}
inline ::hiphop::HiphopStar SHiphopCeremonyState::_internal_voiceonstars(int index) const {
  return static_cast< ::hiphop::HiphopStar >(voiceonstars_.Get(index));
}
inline ::hiphop::HiphopStar SHiphopCeremonyState::voiceonstars(int index) const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopCeremonyState.voiceOnStars)
  return _internal_voiceonstars(index);
}
inline void SHiphopCeremonyState::set_voiceonstars(int index, ::hiphop::HiphopStar value) {
  voiceonstars_.Set(index, value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopCeremonyState.voiceOnStars)
}
inline void SHiphopCeremonyState::_internal_add_voiceonstars(::hiphop::HiphopStar value) {
  voiceonstars_.Add(value);
}
inline void SHiphopCeremonyState::add_voiceonstars(::hiphop::HiphopStar value) {
  // @@protoc_insertion_point(field_add:hiphop.SHiphopCeremonyState.voiceOnStars)
  _internal_add_voiceonstars(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SHiphopCeremonyState::voiceonstars() const {
  // @@protoc_insertion_point(field_list:hiphop.SHiphopCeremonyState.voiceOnStars)
  return voiceonstars_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SHiphopCeremonyState::_internal_mutable_voiceonstars() {
  return &voiceonstars_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SHiphopCeremonyState::mutable_voiceonstars() {
  // @@protoc_insertion_point(field_mutable_list:hiphop.SHiphopCeremonyState.voiceOnStars)
  return _internal_mutable_voiceonstars();
}

// repeated .hiphop.HiphopStar stageOnStars = 5;
inline int SHiphopCeremonyState::_internal_stageonstars_size() const {
  return stageonstars_.size();
}
inline int SHiphopCeremonyState::stageonstars_size() const {
  return _internal_stageonstars_size();
}
inline void SHiphopCeremonyState::clear_stageonstars() {
  stageonstars_.Clear();
}
inline ::hiphop::HiphopStar SHiphopCeremonyState::_internal_stageonstars(int index) const {
  return static_cast< ::hiphop::HiphopStar >(stageonstars_.Get(index));
}
inline ::hiphop::HiphopStar SHiphopCeremonyState::stageonstars(int index) const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopCeremonyState.stageOnStars)
  return _internal_stageonstars(index);
}
inline void SHiphopCeremonyState::set_stageonstars(int index, ::hiphop::HiphopStar value) {
  stageonstars_.Set(index, value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopCeremonyState.stageOnStars)
}
inline void SHiphopCeremonyState::_internal_add_stageonstars(::hiphop::HiphopStar value) {
  stageonstars_.Add(value);
}
inline void SHiphopCeremonyState::add_stageonstars(::hiphop::HiphopStar value) {
  // @@protoc_insertion_point(field_add:hiphop.SHiphopCeremonyState.stageOnStars)
  _internal_add_stageonstars(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SHiphopCeremonyState::stageonstars() const {
  // @@protoc_insertion_point(field_list:hiphop.SHiphopCeremonyState.stageOnStars)
  return stageonstars_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SHiphopCeremonyState::_internal_mutable_stageonstars() {
  return &stageonstars_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SHiphopCeremonyState::mutable_stageonstars() {
  // @@protoc_insertion_point(field_mutable_list:hiphop.SHiphopCeremonyState.stageOnStars)
  return _internal_mutable_stageonstars();
}

// repeated .hiphop.HiphopStar hasAwardStars = 6;
inline int SHiphopCeremonyState::_internal_hasawardstars_size() const {
  return hasawardstars_.size();
}
inline int SHiphopCeremonyState::hasawardstars_size() const {
  return _internal_hasawardstars_size();
}
inline void SHiphopCeremonyState::clear_hasawardstars() {
  hasawardstars_.Clear();
}
inline ::hiphop::HiphopStar SHiphopCeremonyState::_internal_hasawardstars(int index) const {
  return static_cast< ::hiphop::HiphopStar >(hasawardstars_.Get(index));
}
inline ::hiphop::HiphopStar SHiphopCeremonyState::hasawardstars(int index) const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopCeremonyState.hasAwardStars)
  return _internal_hasawardstars(index);
}
inline void SHiphopCeremonyState::set_hasawardstars(int index, ::hiphop::HiphopStar value) {
  hasawardstars_.Set(index, value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopCeremonyState.hasAwardStars)
}
inline void SHiphopCeremonyState::_internal_add_hasawardstars(::hiphop::HiphopStar value) {
  hasawardstars_.Add(value);
}
inline void SHiphopCeremonyState::add_hasawardstars(::hiphop::HiphopStar value) {
  // @@protoc_insertion_point(field_add:hiphop.SHiphopCeremonyState.hasAwardStars)
  _internal_add_hasawardstars(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SHiphopCeremonyState::hasawardstars() const {
  // @@protoc_insertion_point(field_list:hiphop.SHiphopCeremonyState.hasAwardStars)
  return hasawardstars_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SHiphopCeremonyState::_internal_mutable_hasawardstars() {
  return &hasawardstars_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SHiphopCeremonyState::mutable_hasawardstars() {
  // @@protoc_insertion_point(field_mutable_list:hiphop.SHiphopCeremonyState.hasAwardStars)
  return _internal_mutable_hasawardstars();
}

// .hiphop.BHiphopStarBakAudio starAudio = 7;
inline bool SHiphopCeremonyState::_internal_has_staraudio() const {
  return this != internal_default_instance() && staraudio_ != nullptr;
}
inline bool SHiphopCeremonyState::has_staraudio() const {
  return _internal_has_staraudio();
}
inline void SHiphopCeremonyState::clear_staraudio() {
  if (GetArenaNoVirtual() == nullptr && staraudio_ != nullptr) {
    delete staraudio_;
  }
  staraudio_ = nullptr;
}
inline const ::hiphop::BHiphopStarBakAudio& SHiphopCeremonyState::_internal_staraudio() const {
  const ::hiphop::BHiphopStarBakAudio* p = staraudio_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hiphop::BHiphopStarBakAudio*>(
      &::hiphop::_BHiphopStarBakAudio_default_instance_);
}
inline const ::hiphop::BHiphopStarBakAudio& SHiphopCeremonyState::staraudio() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopCeremonyState.starAudio)
  return _internal_staraudio();
}
inline ::hiphop::BHiphopStarBakAudio* SHiphopCeremonyState::release_staraudio() {
  // @@protoc_insertion_point(field_release:hiphop.SHiphopCeremonyState.starAudio)
  
  ::hiphop::BHiphopStarBakAudio* temp = staraudio_;
  staraudio_ = nullptr;
  return temp;
}
inline ::hiphop::BHiphopStarBakAudio* SHiphopCeremonyState::_internal_mutable_staraudio() {
  
  if (staraudio_ == nullptr) {
    auto* p = CreateMaybeMessage<::hiphop::BHiphopStarBakAudio>(GetArenaNoVirtual());
    staraudio_ = p;
  }
  return staraudio_;
}
inline ::hiphop::BHiphopStarBakAudio* SHiphopCeremonyState::mutable_staraudio() {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopCeremonyState.starAudio)
  return _internal_mutable_staraudio();
}
inline void SHiphopCeremonyState::set_allocated_staraudio(::hiphop::BHiphopStarBakAudio* staraudio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete staraudio_;
  }
  if (staraudio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      staraudio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staraudio, submessage_arena);
    }
    
  } else {
    
  }
  staraudio_ = staraudio;
  // @@protoc_insertion_point(field_set_allocated:hiphop.SHiphopCeremonyState.starAudio)
}

// -------------------------------------------------------------------

// SHiphopPhotoRain

// int32 goodsId = 1;
inline void SHiphopPhotoRain::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopPhotoRain::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopPhotoRain::goodsid() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopPhotoRain.goodsId)
  return _internal_goodsid();
}
inline void SHiphopPhotoRain::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void SHiphopPhotoRain::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopPhotoRain.goodsId)
}

// int32 goodsType = 2;
inline void SHiphopPhotoRain::clear_goodstype() {
  goodstype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopPhotoRain::_internal_goodstype() const {
  return goodstype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHiphopPhotoRain::goodstype() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopPhotoRain.goodsType)
  return _internal_goodstype();
}
inline void SHiphopPhotoRain::_internal_set_goodstype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodstype_ = value;
}
inline void SHiphopPhotoRain::set_goodstype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodstype(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopPhotoRain.goodsType)
}

// string goodsName = 3;
inline void SHiphopPhotoRain::clear_goodsname() {
  goodsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHiphopPhotoRain::goodsname() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopPhotoRain.goodsName)
  return _internal_goodsname();
}
inline void SHiphopPhotoRain::set_goodsname(const std::string& value) {
  _internal_set_goodsname(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopPhotoRain.goodsName)
}
inline std::string* SHiphopPhotoRain::mutable_goodsname() {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopPhotoRain.goodsName)
  return _internal_mutable_goodsname();
}
inline const std::string& SHiphopPhotoRain::_internal_goodsname() const {
  return goodsname_.GetNoArena();
}
inline void SHiphopPhotoRain::_internal_set_goodsname(const std::string& value) {
  
  goodsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHiphopPhotoRain::set_goodsname(std::string&& value) {
  
  goodsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hiphop.SHiphopPhotoRain.goodsName)
}
inline void SHiphopPhotoRain::set_goodsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  goodsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hiphop.SHiphopPhotoRain.goodsName)
}
inline void SHiphopPhotoRain::set_goodsname(const char* value, size_t size) {
  
  goodsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hiphop.SHiphopPhotoRain.goodsName)
}
inline std::string* SHiphopPhotoRain::_internal_mutable_goodsname() {
  
  return goodsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHiphopPhotoRain::release_goodsname() {
  // @@protoc_insertion_point(field_release:hiphop.SHiphopPhotoRain.goodsName)
  
  return goodsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHiphopPhotoRain::set_allocated_goodsname(std::string* goodsname) {
  if (goodsname != nullptr) {
    
  } else {
    
  }
  goodsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goodsname);
  // @@protoc_insertion_point(field_set_allocated:hiphop.SHiphopPhotoRain.goodsName)
}

// string goodsPic = 4;
inline void SHiphopPhotoRain::clear_goodspic() {
  goodspic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHiphopPhotoRain::goodspic() const {
  // @@protoc_insertion_point(field_get:hiphop.SHiphopPhotoRain.goodsPic)
  return _internal_goodspic();
}
inline void SHiphopPhotoRain::set_goodspic(const std::string& value) {
  _internal_set_goodspic(value);
  // @@protoc_insertion_point(field_set:hiphop.SHiphopPhotoRain.goodsPic)
}
inline std::string* SHiphopPhotoRain::mutable_goodspic() {
  // @@protoc_insertion_point(field_mutable:hiphop.SHiphopPhotoRain.goodsPic)
  return _internal_mutable_goodspic();
}
inline const std::string& SHiphopPhotoRain::_internal_goodspic() const {
  return goodspic_.GetNoArena();
}
inline void SHiphopPhotoRain::_internal_set_goodspic(const std::string& value) {
  
  goodspic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHiphopPhotoRain::set_goodspic(std::string&& value) {
  
  goodspic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hiphop.SHiphopPhotoRain.goodsPic)
}
inline void SHiphopPhotoRain::set_goodspic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  goodspic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hiphop.SHiphopPhotoRain.goodsPic)
}
inline void SHiphopPhotoRain::set_goodspic(const char* value, size_t size) {
  
  goodspic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hiphop.SHiphopPhotoRain.goodsPic)
}
inline std::string* SHiphopPhotoRain::_internal_mutable_goodspic() {
  
  return goodspic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHiphopPhotoRain::release_goodspic() {
  // @@protoc_insertion_point(field_release:hiphop.SHiphopPhotoRain.goodsPic)
  
  return goodspic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHiphopPhotoRain::set_allocated_goodspic(std::string* goodspic) {
  if (goodspic != nullptr) {
    
  } else {
    
  }
  goodspic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goodspic);
  // @@protoc_insertion_point(field_set_allocated:hiphop.SHiphopPhotoRain.goodsPic)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hiphop

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hiphop::HiphopSwitch> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hiphop::HiphopSwitch>() {
  return ::hiphop::HiphopSwitch_descriptor();
}
template <> struct is_proto_enum< ::hiphop::HiphopProcess> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hiphop::HiphopProcess>() {
  return ::hiphop::HiphopProcess_descriptor();
}
template <> struct is_proto_enum< ::hiphop::HiphopStar> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hiphop::HiphopStar>() {
  return ::hiphop::HiphopStar_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hiphopCeremony_2eproto
