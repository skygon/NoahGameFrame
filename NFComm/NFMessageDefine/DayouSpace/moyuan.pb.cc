// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moyuan.proto

#include "moyuan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_moyuan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanDreamComment_moyuan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_moyuan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanDreamCommentNotice_moyuan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_moyuan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanDreamInfo_moyuan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_moyuan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanTroveGoodsBackpackList_moyuan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_moyuan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanUsersAvatarList_moyuan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVector3_vector_2eproto;
namespace moyuan {
class CMoyuanUsersAvatarInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanUsersAvatarInfo> _instance;
} _CMoyuanUsersAvatarInfo_default_instance_;
class SMoyuanUsersAvatarInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanUsersAvatarInfo> _instance;
} _SMoyuanUsersAvatarInfo_default_instance_;
class CMoyuanUsersAvatarUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanUsersAvatarUpdate> _instance;
} _CMoyuanUsersAvatarUpdate_default_instance_;
class SMoyuanUsersAvatarUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanUsersAvatarUpdate> _instance;
} _SMoyuanUsersAvatarUpdate_default_instance_;
class CMoyuanUsersProgressInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanUsersProgressInfo> _instance;
} _CMoyuanUsersProgressInfo_default_instance_;
class SMoyuanUsersProgressInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanUsersProgressInfo> _instance;
} _SMoyuanUsersProgressInfo_default_instance_;
class CMoyuanUsersProgressUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanUsersProgressUpdate> _instance;
} _CMoyuanUsersProgressUpdate_default_instance_;
class SMoyuanUsersProgressUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanUsersProgressUpdate> _instance;
} _SMoyuanUsersProgressUpdate_default_instance_;
class CMoyuanUsersAvatarListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanUsersAvatarList> _instance;
} _CMoyuanUsersAvatarList_default_instance_;
class SMoyuanUsersAvatarListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanUsersAvatarList> _instance;
} _SMoyuanUsersAvatarList_default_instance_;
class BMoyuanUsersAvatarListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMoyuanUsersAvatarList> _instance;
} _BMoyuanUsersAvatarList_default_instance_;
class CMoyuanDreamAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanDreamAdd> _instance;
} _CMoyuanDreamAdd_default_instance_;
class SMoyuanDreamAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanDreamAdd> _instance;
} _SMoyuanDreamAdd_default_instance_;
class CMoyuanDreamRandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanDreamRand> _instance;
} _CMoyuanDreamRand_default_instance_;
class SMoyuanDreamRandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanDreamRand> _instance;
} _SMoyuanDreamRand_default_instance_;
class CMoyuanTroveGoodsBackpackListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanTroveGoodsBackpackList> _instance;
} _CMoyuanTroveGoodsBackpackList_default_instance_;
class SMoyuanTroveGoodsBackpackListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanTroveGoodsBackpackList> _instance;
} _SMoyuanTroveGoodsBackpackList_default_instance_;
class BMoyuanTroveGoodsBackpackListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMoyuanTroveGoodsBackpackList> _instance;
} _BMoyuanTroveGoodsBackpackList_default_instance_;
class CMoyuanTroveGoodsAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanTroveGoodsAdd> _instance;
} _CMoyuanTroveGoodsAdd_default_instance_;
class SMoyuanTroveGoodsAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanTroveGoodsAdd> _instance;
} _SMoyuanTroveGoodsAdd_default_instance_;
class CMoyuanDreamCommentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanDreamCommentList> _instance;
} _CMoyuanDreamCommentList_default_instance_;
class SMoyuanDreamCommentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanDreamCommentList> _instance;
} _SMoyuanDreamCommentList_default_instance_;
class BMoyuanDreamCommentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMoyuanDreamComment> _instance;
} _BMoyuanDreamComment_default_instance_;
class CMoyuanDreamCommentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanDreamComment> _instance;
} _CMoyuanDreamComment_default_instance_;
class SMoyuanDreamCommentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanDreamComment> _instance;
} _SMoyuanDreamComment_default_instance_;
class CMoyuanAnonymousIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanAnonymousId> _instance;
} _CMoyuanAnonymousId_default_instance_;
class SMoyuanAnonymousIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanAnonymousId> _instance;
} _SMoyuanAnonymousId_default_instance_;
class CMoyuanDreamCommentNoticeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanDreamCommentNoticeList> _instance;
} _CMoyuanDreamCommentNoticeList_default_instance_;
class SMoyuanDreamCommentNoticeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanDreamCommentNoticeList> _instance;
} _SMoyuanDreamCommentNoticeList_default_instance_;
class BMoyuanDreamCommentNoticeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMoyuanDreamCommentNotice> _instance;
} _BMoyuanDreamCommentNotice_default_instance_;
class CMoyuanMineDreamListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanMineDreamList> _instance;
} _CMoyuanMineDreamList_default_instance_;
class SMoyuanMineDreamListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanMineDreamList> _instance;
} _SMoyuanMineDreamList_default_instance_;
class BMoyuanDreamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMoyuanDreamInfo> _instance;
} _BMoyuanDreamInfo_default_instance_;
class CMoyuanDreamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoyuanDreamInfo> _instance;
} _CMoyuanDreamInfo_default_instance_;
class SMoyuanDreamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoyuanDreamInfo> _instance;
} _SMoyuanDreamInfo_default_instance_;
}  // namespace moyuan
static void InitDefaultsscc_info_BMoyuanDreamComment_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_BMoyuanDreamComment_default_instance_;
    new (ptr) ::moyuan::BMoyuanDreamComment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::BMoyuanDreamComment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanDreamComment_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMoyuanDreamComment_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_BMoyuanDreamCommentNotice_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_BMoyuanDreamCommentNotice_default_instance_;
    new (ptr) ::moyuan::BMoyuanDreamCommentNotice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::BMoyuanDreamCommentNotice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanDreamCommentNotice_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMoyuanDreamCommentNotice_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_BMoyuanDreamInfo_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_BMoyuanDreamInfo_default_instance_;
    new (ptr) ::moyuan::BMoyuanDreamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::BMoyuanDreamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanDreamInfo_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMoyuanDreamInfo_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_BMoyuanTroveGoodsBackpackList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_BMoyuanTroveGoodsBackpackList_default_instance_;
    new (ptr) ::moyuan::BMoyuanTroveGoodsBackpackList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::BMoyuanTroveGoodsBackpackList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanTroveGoodsBackpackList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMoyuanTroveGoodsBackpackList_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_BMoyuanUsersAvatarList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_BMoyuanUsersAvatarList_default_instance_;
    new (ptr) ::moyuan::BMoyuanUsersAvatarList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::BMoyuanUsersAvatarList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoyuanUsersAvatarList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMoyuanUsersAvatarList_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanAnonymousId_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanAnonymousId_default_instance_;
    new (ptr) ::moyuan::CMoyuanAnonymousId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanAnonymousId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanAnonymousId_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanAnonymousId_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanDreamAdd_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanDreamAdd_default_instance_;
    new (ptr) ::moyuan::CMoyuanDreamAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanDreamAdd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanDreamAdd_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanDreamAdd_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanDreamComment_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanDreamComment_default_instance_;
    new (ptr) ::moyuan::CMoyuanDreamComment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanDreamComment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanDreamComment_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanDreamComment_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanDreamCommentList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanDreamCommentList_default_instance_;
    new (ptr) ::moyuan::CMoyuanDreamCommentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanDreamCommentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanDreamCommentList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanDreamCommentList_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanDreamCommentNoticeList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanDreamCommentNoticeList_default_instance_;
    new (ptr) ::moyuan::CMoyuanDreamCommentNoticeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanDreamCommentNoticeList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanDreamCommentNoticeList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanDreamCommentNoticeList_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanDreamInfo_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanDreamInfo_default_instance_;
    new (ptr) ::moyuan::CMoyuanDreamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanDreamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanDreamInfo_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanDreamInfo_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanDreamRand_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanDreamRand_default_instance_;
    new (ptr) ::moyuan::CMoyuanDreamRand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanDreamRand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanDreamRand_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanDreamRand_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanMineDreamList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanMineDreamList_default_instance_;
    new (ptr) ::moyuan::CMoyuanMineDreamList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanMineDreamList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanMineDreamList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanMineDreamList_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanTroveGoodsAdd_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanTroveGoodsAdd_default_instance_;
    new (ptr) ::moyuan::CMoyuanTroveGoodsAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanTroveGoodsAdd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanTroveGoodsAdd_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanTroveGoodsAdd_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanTroveGoodsBackpackList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanTroveGoodsBackpackList_default_instance_;
    new (ptr) ::moyuan::CMoyuanTroveGoodsBackpackList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanTroveGoodsBackpackList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanTroveGoodsBackpackList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanTroveGoodsBackpackList_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanUsersAvatarInfo_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanUsersAvatarInfo_default_instance_;
    new (ptr) ::moyuan::CMoyuanUsersAvatarInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanUsersAvatarInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanUsersAvatarInfo_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanUsersAvatarInfo_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanUsersAvatarList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanUsersAvatarList_default_instance_;
    new (ptr) ::moyuan::CMoyuanUsersAvatarList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanUsersAvatarList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanUsersAvatarList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanUsersAvatarList_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanUsersAvatarUpdate_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanUsersAvatarUpdate_default_instance_;
    new (ptr) ::moyuan::CMoyuanUsersAvatarUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanUsersAvatarUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanUsersAvatarUpdate_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanUsersAvatarUpdate_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanUsersProgressInfo_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanUsersProgressInfo_default_instance_;
    new (ptr) ::moyuan::CMoyuanUsersProgressInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanUsersProgressInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoyuanUsersProgressInfo_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoyuanUsersProgressInfo_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_CMoyuanUsersProgressUpdate_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_CMoyuanUsersProgressUpdate_default_instance_;
    new (ptr) ::moyuan::CMoyuanUsersProgressUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::CMoyuanUsersProgressUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMoyuanUsersProgressUpdate_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMoyuanUsersProgressUpdate_moyuan_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_SMoyuanAnonymousId_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanAnonymousId_default_instance_;
    new (ptr) ::moyuan::SMoyuanAnonymousId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanAnonymousId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMoyuanAnonymousId_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMoyuanAnonymousId_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_SMoyuanDreamAdd_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanDreamAdd_default_instance_;
    new (ptr) ::moyuan::SMoyuanDreamAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanDreamAdd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMoyuanDreamAdd_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMoyuanDreamAdd_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_SMoyuanDreamComment_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanDreamComment_default_instance_;
    new (ptr) ::moyuan::SMoyuanDreamComment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanDreamComment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMoyuanDreamComment_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMoyuanDreamComment_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_SMoyuanDreamCommentList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanDreamCommentList_default_instance_;
    new (ptr) ::moyuan::SMoyuanDreamCommentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanDreamCommentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMoyuanDreamCommentList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMoyuanDreamCommentList_moyuan_2eproto}, {
      &scc_info_BMoyuanDreamComment_moyuan_2eproto.base,}};

static void InitDefaultsscc_info_SMoyuanDreamCommentNoticeList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanDreamCommentNoticeList_default_instance_;
    new (ptr) ::moyuan::SMoyuanDreamCommentNoticeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanDreamCommentNoticeList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMoyuanDreamCommentNoticeList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMoyuanDreamCommentNoticeList_moyuan_2eproto}, {
      &scc_info_BMoyuanDreamCommentNotice_moyuan_2eproto.base,}};

static void InitDefaultsscc_info_SMoyuanDreamInfo_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanDreamInfo_default_instance_;
    new (ptr) ::moyuan::SMoyuanDreamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanDreamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMoyuanDreamInfo_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMoyuanDreamInfo_moyuan_2eproto}, {
      &scc_info_BMoyuanDreamInfo_moyuan_2eproto.base,}};

static void InitDefaultsscc_info_SMoyuanDreamRand_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanDreamRand_default_instance_;
    new (ptr) ::moyuan::SMoyuanDreamRand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanDreamRand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMoyuanDreamRand_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMoyuanDreamRand_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_SMoyuanMineDreamList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanMineDreamList_default_instance_;
    new (ptr) ::moyuan::SMoyuanMineDreamList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanMineDreamList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMoyuanMineDreamList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMoyuanMineDreamList_moyuan_2eproto}, {
      &scc_info_BMoyuanDreamInfo_moyuan_2eproto.base,}};

static void InitDefaultsscc_info_SMoyuanTroveGoodsAdd_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanTroveGoodsAdd_default_instance_;
    new (ptr) ::moyuan::SMoyuanTroveGoodsAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanTroveGoodsAdd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMoyuanTroveGoodsAdd_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMoyuanTroveGoodsAdd_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_SMoyuanTroveGoodsBackpackList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanTroveGoodsBackpackList_default_instance_;
    new (ptr) ::moyuan::SMoyuanTroveGoodsBackpackList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanTroveGoodsBackpackList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMoyuanTroveGoodsBackpackList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMoyuanTroveGoodsBackpackList_moyuan_2eproto}, {
      &scc_info_BMoyuanTroveGoodsBackpackList_moyuan_2eproto.base,}};

static void InitDefaultsscc_info_SMoyuanUsersAvatarInfo_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanUsersAvatarInfo_default_instance_;
    new (ptr) ::moyuan::SMoyuanUsersAvatarInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanUsersAvatarInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMoyuanUsersAvatarInfo_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMoyuanUsersAvatarInfo_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_SMoyuanUsersAvatarList_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanUsersAvatarList_default_instance_;
    new (ptr) ::moyuan::SMoyuanUsersAvatarList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanUsersAvatarList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMoyuanUsersAvatarList_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMoyuanUsersAvatarList_moyuan_2eproto}, {
      &scc_info_BMoyuanUsersAvatarList_moyuan_2eproto.base,}};

static void InitDefaultsscc_info_SMoyuanUsersAvatarUpdate_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanUsersAvatarUpdate_default_instance_;
    new (ptr) ::moyuan::SMoyuanUsersAvatarUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanUsersAvatarUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMoyuanUsersAvatarUpdate_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMoyuanUsersAvatarUpdate_moyuan_2eproto}, {}};

static void InitDefaultsscc_info_SMoyuanUsersProgressInfo_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanUsersProgressInfo_default_instance_;
    new (ptr) ::moyuan::SMoyuanUsersProgressInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanUsersProgressInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMoyuanUsersProgressInfo_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMoyuanUsersProgressInfo_moyuan_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_SMoyuanUsersProgressUpdate_moyuan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moyuan::_SMoyuanUsersProgressUpdate_default_instance_;
    new (ptr) ::moyuan::SMoyuanUsersProgressUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moyuan::SMoyuanUsersProgressUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMoyuanUsersProgressUpdate_moyuan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMoyuanUsersProgressUpdate_moyuan_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_moyuan_2eproto[35];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_moyuan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_moyuan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_moyuan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersAvatarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersAvatarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersAvatarInfo, avatarkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersAvatarUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersAvatarUpdate, avatarkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersAvatarUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersAvatarUpdate, status_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersAvatarUpdate, uid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersAvatarUpdate, avatarkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersProgressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressInfo, layer_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressInfo, scene_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressInfo, npc_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressInfo, topic_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressInfo, servetimestamp_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressInfo, topictype_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressInfo, position_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressInfo, tips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersProgressUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersProgressUpdate, layer_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersProgressUpdate, scene_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersProgressUpdate, npc_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersProgressUpdate, topic_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersProgressUpdate, topictype_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersProgressUpdate, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersProgressUpdate, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersAvatarList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanUsersAvatarList, uids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersAvatarList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanUsersAvatarList, avatarlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanUsersAvatarList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanUsersAvatarList, uid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanUsersAvatarList, avatarkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamAdd, desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamAdd, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamRand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamRand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamRand, uid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamRand, desc_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamRand, dreamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanTroveGoodsBackpackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanTroveGoodsBackpackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanTroveGoodsBackpackList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanTroveGoodsBackpackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanTroveGoodsBackpackList, id_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanTroveGoodsBackpackList, type_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanTroveGoodsBackpackList, goodsid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanTroveGoodsBackpackList, bakcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanTroveGoodsAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanTroveGoodsAdd, goodsid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanTroveGoodsAdd, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanTroveGoodsAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanTroveGoodsAdd, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamCommentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamCommentList, dreamid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamCommentList, curpage_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamCommentList, pagelimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamCommentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamCommentList, list_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamCommentList, total_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamCommentList, curpage_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamCommentList, pagelimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, id_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, dreamid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, isanonymous_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, uid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, nick_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, head_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, tocommentid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, tocommentuid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, tocommentnick_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, comment_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamComment, createdat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamComment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamComment, dreamid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamComment, isanonymous_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamComment, nick_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamComment, head_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamComment, tocommentid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamComment, tocommentuid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamComment, tocommentnick_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamComment, comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamComment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamComment, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanAnonymousId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanAnonymousId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanAnonymousId, anonymousid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanAnonymousId, anonymoushead_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamCommentNoticeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamCommentNoticeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamCommentNoticeList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamCommentNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamCommentNotice, dreamid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamCommentNotice, comment_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamCommentNotice, tips_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamCommentNotice, head_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanMineDreamList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanMineDreamList, curpage_),
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanMineDreamList, pagelimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanMineDreamList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanMineDreamList, list_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanMineDreamList, total_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanMineDreamList, curpage_),
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanMineDreamList, pagelimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamInfo, desc_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamInfo, dreamid_),
  PROTOBUF_FIELD_OFFSET(::moyuan::BMoyuanDreamInfo, commentnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::CMoyuanDreamInfo, dreamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moyuan::SMoyuanDreamInfo, info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::moyuan::CMoyuanUsersAvatarInfo)},
  { 5, -1, sizeof(::moyuan::SMoyuanUsersAvatarInfo)},
  { 11, -1, sizeof(::moyuan::CMoyuanUsersAvatarUpdate)},
  { 17, -1, sizeof(::moyuan::SMoyuanUsersAvatarUpdate)},
  { 25, -1, sizeof(::moyuan::CMoyuanUsersProgressInfo)},
  { 30, -1, sizeof(::moyuan::SMoyuanUsersProgressInfo)},
  { 43, -1, sizeof(::moyuan::CMoyuanUsersProgressUpdate)},
  { 54, -1, sizeof(::moyuan::SMoyuanUsersProgressUpdate)},
  { 60, -1, sizeof(::moyuan::CMoyuanUsersAvatarList)},
  { 66, -1, sizeof(::moyuan::SMoyuanUsersAvatarList)},
  { 72, -1, sizeof(::moyuan::BMoyuanUsersAvatarList)},
  { 79, -1, sizeof(::moyuan::CMoyuanDreamAdd)},
  { 85, -1, sizeof(::moyuan::SMoyuanDreamAdd)},
  { 91, -1, sizeof(::moyuan::CMoyuanDreamRand)},
  { 96, -1, sizeof(::moyuan::SMoyuanDreamRand)},
  { 104, -1, sizeof(::moyuan::CMoyuanTroveGoodsBackpackList)},
  { 109, -1, sizeof(::moyuan::SMoyuanTroveGoodsBackpackList)},
  { 115, -1, sizeof(::moyuan::BMoyuanTroveGoodsBackpackList)},
  { 124, -1, sizeof(::moyuan::CMoyuanTroveGoodsAdd)},
  { 131, -1, sizeof(::moyuan::SMoyuanTroveGoodsAdd)},
  { 137, -1, sizeof(::moyuan::CMoyuanDreamCommentList)},
  { 145, -1, sizeof(::moyuan::SMoyuanDreamCommentList)},
  { 154, -1, sizeof(::moyuan::BMoyuanDreamComment)},
  { 170, -1, sizeof(::moyuan::CMoyuanDreamComment)},
  { 183, -1, sizeof(::moyuan::SMoyuanDreamComment)},
  { 189, -1, sizeof(::moyuan::CMoyuanAnonymousId)},
  { 194, -1, sizeof(::moyuan::SMoyuanAnonymousId)},
  { 201, -1, sizeof(::moyuan::CMoyuanDreamCommentNoticeList)},
  { 206, -1, sizeof(::moyuan::SMoyuanDreamCommentNoticeList)},
  { 212, -1, sizeof(::moyuan::BMoyuanDreamCommentNotice)},
  { 221, -1, sizeof(::moyuan::CMoyuanMineDreamList)},
  { 228, -1, sizeof(::moyuan::SMoyuanMineDreamList)},
  { 237, -1, sizeof(::moyuan::BMoyuanDreamInfo)},
  { 246, -1, sizeof(::moyuan::CMoyuanDreamInfo)},
  { 252, -1, sizeof(::moyuan::SMoyuanDreamInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanUsersAvatarInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanUsersAvatarInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanUsersAvatarUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanUsersAvatarUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanUsersProgressInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanUsersProgressInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanUsersProgressUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanUsersProgressUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanUsersAvatarList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanUsersAvatarList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_BMoyuanUsersAvatarList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanDreamAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanDreamAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanDreamRand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanDreamRand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanTroveGoodsBackpackList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanTroveGoodsBackpackList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_BMoyuanTroveGoodsBackpackList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanTroveGoodsAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanTroveGoodsAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanDreamCommentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanDreamCommentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_BMoyuanDreamComment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanDreamComment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanDreamComment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanAnonymousId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanAnonymousId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanDreamCommentNoticeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanDreamCommentNoticeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_BMoyuanDreamCommentNotice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanMineDreamList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanMineDreamList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_BMoyuanDreamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_CMoyuanDreamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moyuan::_SMoyuanDreamInfo_default_instance_),
};

const char descriptor_table_protodef_moyuan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014moyuan.proto\022\006moyuan\032\014vector.proto\"\030\n\026"
  "CMoyuanUsersAvatarInfo\"+\n\026SMoyuanUsersAv"
  "atarInfo\022\021\n\tavatarKey\030\001 \001(\005\"-\n\030CMoyuanUs"
  "ersAvatarUpdate\022\021\n\tavatarKey\030\001 \001(\005\"J\n\030SM"
  "oyuanUsersAvatarUpdate\022\016\n\006status\030\001 \001(\005\022\013"
  "\n\003uid\030\002 \001(\005\022\021\n\tavatarKey\030\003 \001(\005\"\032\n\030CMoyua"
  "nUsersProgressInfo\"\261\001\n\030SMoyuanUsersProgr"
  "essInfo\022\r\n\005layer\030\001 \001(\005\022\r\n\005scene\030\002 \001(\005\022\013\n"
  "\003npc\030\003 \003(\005\022\r\n\005topic\030\004 \001(\005\022\026\n\016serveTimest"
  "amp\030\005 \001(\005\022\021\n\ttopicType\030\006 \001(\005\022\"\n\010position"
  "\030\007 \001(\0132\020.vector.PVector3\022\014\n\004tips\030\010 \001(\t\"\215"
  "\001\n\032CMoyuanUsersProgressUpdate\022\r\n\005layer\030\001"
  " \001(\005\022\r\n\005scene\030\002 \001(\005\022\013\n\003npc\030\003 \003(\005\022\r\n\005topi"
  "c\030\004 \001(\005\022\021\n\ttopicType\030\005 \001(\005\022\"\n\010position\030\006"
  " \001(\0132\020.vector.PVector3\",\n\032SMoyuanUsersPr"
  "ogressUpdate\022\016\n\006status\030\001 \001(\005\"&\n\026CMoyuanU"
  "sersAvatarList\022\014\n\004uids\030\001 \003(\005\"L\n\026SMoyuanU"
  "sersAvatarList\0222\n\navatarList\030\001 \003(\0132\036.moy"
  "uan.BMoyuanUsersAvatarList\"8\n\026BMoyuanUse"
  "rsAvatarList\022\013\n\003uid\030\001 \001(\005\022\021\n\tavatarKey\030\002"
  " \001(\005\"\037\n\017CMoyuanDreamAdd\022\014\n\004desc\030\001 \001(\t\"!\n"
  "\017SMoyuanDreamAdd\022\016\n\006status\030\001 \001(\005\"\022\n\020CMoy"
  "uanDreamRand\">\n\020SMoyuanDreamRand\022\013\n\003uid\030"
  "\001 \001(\005\022\014\n\004desc\030\002 \001(\t\022\017\n\007dreamId\030\003 \001(\005\"\037\n\035"
  "CMoyuanTroveGoodsBackpackList\"T\n\035SMoyuan"
  "TroveGoodsBackpackList\0223\n\004list\030\001 \003(\0132%.m"
  "oyuan.BMoyuanTroveGoodsBackpackList\"\\\n\035B"
  "MoyuanTroveGoodsBackpackList\022\n\n\002id\030\001 \001(\005"
  "\022\014\n\004type\030\002 \001(\005\022\017\n\007goodsId\030\003 \001(\005\022\020\n\010bakCo"
  "unt\030\004 \001(\005\"4\n\024CMoyuanTroveGoodsAdd\022\017\n\007goo"
  "dsId\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"&\n\024SMoyuanTroveG"
  "oodsAdd\022\016\n\006status\030\001 \001(\005\"N\n\027CMoyuanDreamC"
  "ommentList\022\017\n\007dreamId\030\001 \001(\005\022\017\n\007curPage\030\002"
  " \001(\005\022\021\n\tpageLimit\030\003 \001(\005\"w\n\027SMoyuanDreamC"
  "ommentList\022)\n\004list\030\001 \003(\0132\033.moyuan.BMoyua"
  "nDreamComment\022\r\n\005total\030\002 \001(\005\022\017\n\007curPage\030"
  "\003 \001(\005\022\021\n\tpageLimit\030\004 \001(\005\"\326\001\n\023BMoyuanDrea"
  "mComment\022\n\n\002id\030\001 \001(\005\022\017\n\007dreamId\030\002 \001(\005\022\023\n"
  "\013isAnonymous\030\003 \001(\005\022\013\n\003uid\030\004 \001(\005\022\014\n\004nick\030"
  "\005 \001(\t\022\014\n\004head\030\006 \001(\t\022\023\n\013toCommentId\030\007 \001(\005"
  "\022\024\n\014toCommentUid\030\010 \001(\005\022\025\n\rtoCommentNick\030"
  "\t \001(\t\022\017\n\007comment\030\n \001(\t\022\021\n\tcreatedAt\030\013 \001("
  "\t\"\252\001\n\023CMoyuanDreamComment\022\017\n\007dreamId\030\001 \001"
  "(\005\022\023\n\013isAnonymous\030\002 \001(\005\022\014\n\004nick\030\005 \001(\t\022\014\n"
  "\004head\030\006 \001(\t\022\023\n\013toCommentId\030\007 \001(\005\022\024\n\014toCo"
  "mmentUid\030\010 \001(\005\022\025\n\rtoCommentNick\030\t \001(\t\022\017\n"
  "\007comment\030\n \001(\t\"%\n\023SMoyuanDreamComment\022\016\n"
  "\006status\030\001 \001(\005\"\024\n\022CMoyuanAnonymousId\"@\n\022S"
  "MoyuanAnonymousId\022\023\n\013anonymousId\030\001 \001(\t\022\025"
  "\n\ranonymousHead\030\002 \001(\t\"\037\n\035CMoyuanDreamCom"
  "mentNoticeList\"P\n\035SMoyuanDreamCommentNot"
  "iceList\022/\n\004list\030\001 \003(\0132!.moyuan.BMoyuanDr"
  "eamCommentNotice\"Y\n\031BMoyuanDreamCommentN"
  "otice\022\017\n\007dreamId\030\001 \001(\005\022\017\n\007comment\030\002 \001(\t\022"
  "\014\n\004tips\030\003 \001(\t\022\014\n\004Head\030\004 \001(\t\":\n\024CMoyuanMi"
  "neDreamList\022\017\n\007curPage\030\001 \001(\005\022\021\n\tpageLimi"
  "t\030\002 \001(\005\"q\n\024SMoyuanMineDreamList\022&\n\004list\030"
  "\001 \003(\0132\030.moyuan.BMoyuanDreamInfo\022\r\n\005total"
  "\030\002 \001(\005\022\017\n\007curPage\030\003 \001(\005\022\021\n\tpageLimit\030\004 \001"
  "(\005\"R\n\020BMoyuanDreamInfo\022\013\n\003uid\030\001 \001(\005\022\014\n\004d"
  "esc\030\002 \001(\t\022\017\n\007dreamId\030\003 \001(\005\022\022\n\ncommentNum"
  "\030\004 \001(\005\"#\n\020CMoyuanDreamInfo\022\017\n\007dreamId\030\001 "
  "\001(\005\":\n\020SMoyuanDreamInfo\022&\n\004info\030\001 \001(\0132\030."
  "moyuan.BMoyuanDreamInfoB\"\n\030com.dayou.spa"
  "ce.protobufB\006Moyuanb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_moyuan_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_moyuan_2eproto_sccs[35] = {
  &scc_info_BMoyuanDreamComment_moyuan_2eproto.base,
  &scc_info_BMoyuanDreamCommentNotice_moyuan_2eproto.base,
  &scc_info_BMoyuanDreamInfo_moyuan_2eproto.base,
  &scc_info_BMoyuanTroveGoodsBackpackList_moyuan_2eproto.base,
  &scc_info_BMoyuanUsersAvatarList_moyuan_2eproto.base,
  &scc_info_CMoyuanAnonymousId_moyuan_2eproto.base,
  &scc_info_CMoyuanDreamAdd_moyuan_2eproto.base,
  &scc_info_CMoyuanDreamComment_moyuan_2eproto.base,
  &scc_info_CMoyuanDreamCommentList_moyuan_2eproto.base,
  &scc_info_CMoyuanDreamCommentNoticeList_moyuan_2eproto.base,
  &scc_info_CMoyuanDreamInfo_moyuan_2eproto.base,
  &scc_info_CMoyuanDreamRand_moyuan_2eproto.base,
  &scc_info_CMoyuanMineDreamList_moyuan_2eproto.base,
  &scc_info_CMoyuanTroveGoodsAdd_moyuan_2eproto.base,
  &scc_info_CMoyuanTroveGoodsBackpackList_moyuan_2eproto.base,
  &scc_info_CMoyuanUsersAvatarInfo_moyuan_2eproto.base,
  &scc_info_CMoyuanUsersAvatarList_moyuan_2eproto.base,
  &scc_info_CMoyuanUsersAvatarUpdate_moyuan_2eproto.base,
  &scc_info_CMoyuanUsersProgressInfo_moyuan_2eproto.base,
  &scc_info_CMoyuanUsersProgressUpdate_moyuan_2eproto.base,
  &scc_info_SMoyuanAnonymousId_moyuan_2eproto.base,
  &scc_info_SMoyuanDreamAdd_moyuan_2eproto.base,
  &scc_info_SMoyuanDreamComment_moyuan_2eproto.base,
  &scc_info_SMoyuanDreamCommentList_moyuan_2eproto.base,
  &scc_info_SMoyuanDreamCommentNoticeList_moyuan_2eproto.base,
  &scc_info_SMoyuanDreamInfo_moyuan_2eproto.base,
  &scc_info_SMoyuanDreamRand_moyuan_2eproto.base,
  &scc_info_SMoyuanMineDreamList_moyuan_2eproto.base,
  &scc_info_SMoyuanTroveGoodsAdd_moyuan_2eproto.base,
  &scc_info_SMoyuanTroveGoodsBackpackList_moyuan_2eproto.base,
  &scc_info_SMoyuanUsersAvatarInfo_moyuan_2eproto.base,
  &scc_info_SMoyuanUsersAvatarList_moyuan_2eproto.base,
  &scc_info_SMoyuanUsersAvatarUpdate_moyuan_2eproto.base,
  &scc_info_SMoyuanUsersProgressInfo_moyuan_2eproto.base,
  &scc_info_SMoyuanUsersProgressUpdate_moyuan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_moyuan_2eproto_once;
static bool descriptor_table_moyuan_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_moyuan_2eproto = {
  &descriptor_table_moyuan_2eproto_initialized, descriptor_table_protodef_moyuan_2eproto, "moyuan.proto", 2587,
  &descriptor_table_moyuan_2eproto_once, descriptor_table_moyuan_2eproto_sccs, descriptor_table_moyuan_2eproto_deps, 35, 1,
  schemas, file_default_instances, TableStruct_moyuan_2eproto::offsets,
  file_level_metadata_moyuan_2eproto, 35, file_level_enum_descriptors_moyuan_2eproto, file_level_service_descriptors_moyuan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_moyuan_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_moyuan_2eproto), true);
namespace moyuan {

// ===================================================================

void CMoyuanUsersAvatarInfo::InitAsDefaultInstance() {
}
class CMoyuanUsersAvatarInfo::_Internal {
 public:
};

CMoyuanUsersAvatarInfo::CMoyuanUsersAvatarInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanUsersAvatarInfo)
}
CMoyuanUsersAvatarInfo::CMoyuanUsersAvatarInfo(const CMoyuanUsersAvatarInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanUsersAvatarInfo)
}

void CMoyuanUsersAvatarInfo::SharedCtor() {
}

CMoyuanUsersAvatarInfo::~CMoyuanUsersAvatarInfo() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanUsersAvatarInfo)
  SharedDtor();
}

void CMoyuanUsersAvatarInfo::SharedDtor() {
}

void CMoyuanUsersAvatarInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanUsersAvatarInfo& CMoyuanUsersAvatarInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanUsersAvatarInfo_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanUsersAvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanUsersAvatarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMoyuanUsersAvatarInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanUsersAvatarInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanUsersAvatarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanUsersAvatarInfo)
  return target;
}

size_t CMoyuanUsersAvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanUsersAvatarInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanUsersAvatarInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanUsersAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanUsersAvatarInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanUsersAvatarInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanUsersAvatarInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanUsersAvatarInfo)
    MergeFrom(*source);
  }
}

void CMoyuanUsersAvatarInfo::MergeFrom(const CMoyuanUsersAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanUsersAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMoyuanUsersAvatarInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanUsersAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanUsersAvatarInfo::CopyFrom(const CMoyuanUsersAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanUsersAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanUsersAvatarInfo::IsInitialized() const {
  return true;
}

void CMoyuanUsersAvatarInfo::InternalSwap(CMoyuanUsersAvatarInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanUsersAvatarInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanUsersAvatarInfo::InitAsDefaultInstance() {
}
class SMoyuanUsersAvatarInfo::_Internal {
 public:
};

SMoyuanUsersAvatarInfo::SMoyuanUsersAvatarInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanUsersAvatarInfo)
}
SMoyuanUsersAvatarInfo::SMoyuanUsersAvatarInfo(const SMoyuanUsersAvatarInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarkey_ = from.avatarkey_;
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanUsersAvatarInfo)
}

void SMoyuanUsersAvatarInfo::SharedCtor() {
  avatarkey_ = 0;
}

SMoyuanUsersAvatarInfo::~SMoyuanUsersAvatarInfo() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanUsersAvatarInfo)
  SharedDtor();
}

void SMoyuanUsersAvatarInfo::SharedDtor() {
}

void SMoyuanUsersAvatarInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanUsersAvatarInfo& SMoyuanUsersAvatarInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanUsersAvatarInfo_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanUsersAvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanUsersAvatarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarkey_ = 0;
  _internal_metadata_.Clear();
}

const char* SMoyuanUsersAvatarInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanUsersAvatarInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanUsersAvatarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanUsersAvatarInfo)
  return target;
}

size_t SMoyuanUsersAvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanUsersAvatarInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanUsersAvatarInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanUsersAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanUsersAvatarInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanUsersAvatarInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanUsersAvatarInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanUsersAvatarInfo)
    MergeFrom(*source);
  }
}

void SMoyuanUsersAvatarInfo::MergeFrom(const SMoyuanUsersAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanUsersAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
}

void SMoyuanUsersAvatarInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanUsersAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanUsersAvatarInfo::CopyFrom(const SMoyuanUsersAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanUsersAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanUsersAvatarInfo::IsInitialized() const {
  return true;
}

void SMoyuanUsersAvatarInfo::InternalSwap(SMoyuanUsersAvatarInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(avatarkey_, other->avatarkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanUsersAvatarInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanUsersAvatarUpdate::InitAsDefaultInstance() {
}
class CMoyuanUsersAvatarUpdate::_Internal {
 public:
};

CMoyuanUsersAvatarUpdate::CMoyuanUsersAvatarUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanUsersAvatarUpdate)
}
CMoyuanUsersAvatarUpdate::CMoyuanUsersAvatarUpdate(const CMoyuanUsersAvatarUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarkey_ = from.avatarkey_;
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanUsersAvatarUpdate)
}

void CMoyuanUsersAvatarUpdate::SharedCtor() {
  avatarkey_ = 0;
}

CMoyuanUsersAvatarUpdate::~CMoyuanUsersAvatarUpdate() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanUsersAvatarUpdate)
  SharedDtor();
}

void CMoyuanUsersAvatarUpdate::SharedDtor() {
}

void CMoyuanUsersAvatarUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanUsersAvatarUpdate& CMoyuanUsersAvatarUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanUsersAvatarUpdate_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanUsersAvatarUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanUsersAvatarUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarkey_ = 0;
  _internal_metadata_.Clear();
}

const char* CMoyuanUsersAvatarUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanUsersAvatarUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanUsersAvatarUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanUsersAvatarUpdate)
  return target;
}

size_t CMoyuanUsersAvatarUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanUsersAvatarUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanUsersAvatarUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanUsersAvatarUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanUsersAvatarUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanUsersAvatarUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanUsersAvatarUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanUsersAvatarUpdate)
    MergeFrom(*source);
  }
}

void CMoyuanUsersAvatarUpdate::MergeFrom(const CMoyuanUsersAvatarUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanUsersAvatarUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
}

void CMoyuanUsersAvatarUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanUsersAvatarUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanUsersAvatarUpdate::CopyFrom(const CMoyuanUsersAvatarUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanUsersAvatarUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanUsersAvatarUpdate::IsInitialized() const {
  return true;
}

void CMoyuanUsersAvatarUpdate::InternalSwap(CMoyuanUsersAvatarUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(avatarkey_, other->avatarkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanUsersAvatarUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanUsersAvatarUpdate::InitAsDefaultInstance() {
}
class SMoyuanUsersAvatarUpdate::_Internal {
 public:
};

SMoyuanUsersAvatarUpdate::SMoyuanUsersAvatarUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanUsersAvatarUpdate)
}
SMoyuanUsersAvatarUpdate::SMoyuanUsersAvatarUpdate(const SMoyuanUsersAvatarUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatarkey_) -
    reinterpret_cast<char*>(&status_)) + sizeof(avatarkey_));
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanUsersAvatarUpdate)
}

void SMoyuanUsersAvatarUpdate::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarkey_) -
      reinterpret_cast<char*>(&status_)) + sizeof(avatarkey_));
}

SMoyuanUsersAvatarUpdate::~SMoyuanUsersAvatarUpdate() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanUsersAvatarUpdate)
  SharedDtor();
}

void SMoyuanUsersAvatarUpdate::SharedDtor() {
}

void SMoyuanUsersAvatarUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanUsersAvatarUpdate& SMoyuanUsersAvatarUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanUsersAvatarUpdate_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanUsersAvatarUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanUsersAvatarUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarkey_) -
      reinterpret_cast<char*>(&status_)) + sizeof(avatarkey_));
  _internal_metadata_.Clear();
}

const char* SMoyuanUsersAvatarUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanUsersAvatarUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanUsersAvatarUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  // int32 avatarKey = 3;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_avatarkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanUsersAvatarUpdate)
  return target;
}

size_t SMoyuanUsersAvatarUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanUsersAvatarUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 avatarKey = 3;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanUsersAvatarUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanUsersAvatarUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanUsersAvatarUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanUsersAvatarUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanUsersAvatarUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanUsersAvatarUpdate)
    MergeFrom(*source);
  }
}

void SMoyuanUsersAvatarUpdate::MergeFrom(const SMoyuanUsersAvatarUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanUsersAvatarUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
}

void SMoyuanUsersAvatarUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanUsersAvatarUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanUsersAvatarUpdate::CopyFrom(const SMoyuanUsersAvatarUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanUsersAvatarUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanUsersAvatarUpdate::IsInitialized() const {
  return true;
}

void SMoyuanUsersAvatarUpdate::InternalSwap(SMoyuanUsersAvatarUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(uid_, other->uid_);
  swap(avatarkey_, other->avatarkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanUsersAvatarUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanUsersProgressInfo::InitAsDefaultInstance() {
}
class CMoyuanUsersProgressInfo::_Internal {
 public:
};

CMoyuanUsersProgressInfo::CMoyuanUsersProgressInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanUsersProgressInfo)
}
CMoyuanUsersProgressInfo::CMoyuanUsersProgressInfo(const CMoyuanUsersProgressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanUsersProgressInfo)
}

void CMoyuanUsersProgressInfo::SharedCtor() {
}

CMoyuanUsersProgressInfo::~CMoyuanUsersProgressInfo() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanUsersProgressInfo)
  SharedDtor();
}

void CMoyuanUsersProgressInfo::SharedDtor() {
}

void CMoyuanUsersProgressInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanUsersProgressInfo& CMoyuanUsersProgressInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanUsersProgressInfo_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanUsersProgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanUsersProgressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMoyuanUsersProgressInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanUsersProgressInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanUsersProgressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanUsersProgressInfo)
  return target;
}

size_t CMoyuanUsersProgressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanUsersProgressInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanUsersProgressInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanUsersProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanUsersProgressInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanUsersProgressInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanUsersProgressInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanUsersProgressInfo)
    MergeFrom(*source);
  }
}

void CMoyuanUsersProgressInfo::MergeFrom(const CMoyuanUsersProgressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanUsersProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMoyuanUsersProgressInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanUsersProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanUsersProgressInfo::CopyFrom(const CMoyuanUsersProgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanUsersProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanUsersProgressInfo::IsInitialized() const {
  return true;
}

void CMoyuanUsersProgressInfo::InternalSwap(CMoyuanUsersProgressInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanUsersProgressInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanUsersProgressInfo::InitAsDefaultInstance() {
  ::moyuan::_SMoyuanUsersProgressInfo_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class SMoyuanUsersProgressInfo::_Internal {
 public:
  static const ::vector::PVector3& position(const SMoyuanUsersProgressInfo* msg);
};

const ::vector::PVector3&
SMoyuanUsersProgressInfo::_Internal::position(const SMoyuanUsersProgressInfo* msg) {
  return *msg->position_;
}
void SMoyuanUsersProgressInfo::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
SMoyuanUsersProgressInfo::SMoyuanUsersProgressInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanUsersProgressInfo)
}
SMoyuanUsersProgressInfo::SMoyuanUsersProgressInfo(const SMoyuanUsersProgressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      npc_(from.npc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tips().empty()) {
    tips_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tips_);
  }
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&topictype_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(topictype_));
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanUsersProgressInfo)
}

void SMoyuanUsersProgressInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoyuanUsersProgressInfo_moyuan_2eproto.base);
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topictype_) -
      reinterpret_cast<char*>(&position_)) + sizeof(topictype_));
}

SMoyuanUsersProgressInfo::~SMoyuanUsersProgressInfo() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanUsersProgressInfo)
  SharedDtor();
}

void SMoyuanUsersProgressInfo::SharedDtor() {
  tips_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void SMoyuanUsersProgressInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanUsersProgressInfo& SMoyuanUsersProgressInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanUsersProgressInfo_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanUsersProgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanUsersProgressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npc_.Clear();
  tips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topictype_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(topictype_));
  _internal_metadata_.Clear();
}

const char* SMoyuanUsersProgressInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 npc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_npc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_npc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 topic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 serveTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          servetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 topicType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          topictype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tips = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_tips();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.SMoyuanUsersProgressInfo.tips"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanUsersProgressInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanUsersProgressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 layer = 1;
  if (this->layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_layer(), target);
  }

  // int32 scene = 2;
  if (this->scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene(), target);
  }

  // repeated int32 npc = 3;
  {
    int byte_size = _npc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_npc(), byte_size, target);
    }
  }

  // int32 topic = 4;
  if (this->topic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_topic(), target);
  }

  // int32 serveTimestamp = 5;
  if (this->servetimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_servetimestamp(), target);
  }

  // int32 topicType = 6;
  if (this->topictype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_topictype(), target);
  }

  // .vector.PVector3 position = 7;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::position(this), target, stream);
  }

  // string tips = 8;
  if (this->tips().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tips().data(), static_cast<int>(this->_internal_tips().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.SMoyuanUsersProgressInfo.tips");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tips(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanUsersProgressInfo)
  return target;
}

size_t SMoyuanUsersProgressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanUsersProgressInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 npc = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->npc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _npc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string tips = 8;
  if (this->tips().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tips());
  }

  // .vector.PVector3 position = 7;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 layer = 1;
  if (this->layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_layer());
  }

  // int32 scene = 2;
  if (this->scene() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene());
  }

  // int32 topic = 4;
  if (this->topic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topic());
  }

  // int32 serveTimestamp = 5;
  if (this->servetimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_servetimestamp());
  }

  // int32 topicType = 6;
  if (this->topictype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topictype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanUsersProgressInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanUsersProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanUsersProgressInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanUsersProgressInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanUsersProgressInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanUsersProgressInfo)
    MergeFrom(*source);
  }
}

void SMoyuanUsersProgressInfo::MergeFrom(const SMoyuanUsersProgressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanUsersProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  npc_.MergeFrom(from.npc_);
  if (from.tips().size() > 0) {

    tips_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tips_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  if (from.scene() != 0) {
    _internal_set_scene(from._internal_scene());
  }
  if (from.topic() != 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.servetimestamp() != 0) {
    _internal_set_servetimestamp(from._internal_servetimestamp());
  }
  if (from.topictype() != 0) {
    _internal_set_topictype(from._internal_topictype());
  }
}

void SMoyuanUsersProgressInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanUsersProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanUsersProgressInfo::CopyFrom(const SMoyuanUsersProgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanUsersProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanUsersProgressInfo::IsInitialized() const {
  return true;
}

void SMoyuanUsersProgressInfo::InternalSwap(SMoyuanUsersProgressInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  npc_.InternalSwap(&other->npc_);
  tips_.Swap(&other->tips_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(layer_, other->layer_);
  swap(scene_, other->scene_);
  swap(topic_, other->topic_);
  swap(servetimestamp_, other->servetimestamp_);
  swap(topictype_, other->topictype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanUsersProgressInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanUsersProgressUpdate::InitAsDefaultInstance() {
  ::moyuan::_CMoyuanUsersProgressUpdate_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class CMoyuanUsersProgressUpdate::_Internal {
 public:
  static const ::vector::PVector3& position(const CMoyuanUsersProgressUpdate* msg);
};

const ::vector::PVector3&
CMoyuanUsersProgressUpdate::_Internal::position(const CMoyuanUsersProgressUpdate* msg) {
  return *msg->position_;
}
void CMoyuanUsersProgressUpdate::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
CMoyuanUsersProgressUpdate::CMoyuanUsersProgressUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanUsersProgressUpdate)
}
CMoyuanUsersProgressUpdate::CMoyuanUsersProgressUpdate(const CMoyuanUsersProgressUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      npc_(from.npc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&topictype_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(topictype_));
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanUsersProgressUpdate)
}

void CMoyuanUsersProgressUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMoyuanUsersProgressUpdate_moyuan_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topictype_) -
      reinterpret_cast<char*>(&position_)) + sizeof(topictype_));
}

CMoyuanUsersProgressUpdate::~CMoyuanUsersProgressUpdate() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanUsersProgressUpdate)
  SharedDtor();
}

void CMoyuanUsersProgressUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CMoyuanUsersProgressUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanUsersProgressUpdate& CMoyuanUsersProgressUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanUsersProgressUpdate_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanUsersProgressUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanUsersProgressUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npc_.Clear();
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topictype_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(topictype_));
  _internal_metadata_.Clear();
}

const char* CMoyuanUsersProgressUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 npc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_npc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_npc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 topic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 topicType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          topictype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanUsersProgressUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanUsersProgressUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 layer = 1;
  if (this->layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_layer(), target);
  }

  // int32 scene = 2;
  if (this->scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene(), target);
  }

  // repeated int32 npc = 3;
  {
    int byte_size = _npc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_npc(), byte_size, target);
    }
  }

  // int32 topic = 4;
  if (this->topic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_topic(), target);
  }

  // int32 topicType = 5;
  if (this->topictype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_topictype(), target);
  }

  // .vector.PVector3 position = 6;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanUsersProgressUpdate)
  return target;
}

size_t CMoyuanUsersProgressUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanUsersProgressUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 npc = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->npc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _npc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .vector.PVector3 position = 6;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 layer = 1;
  if (this->layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_layer());
  }

  // int32 scene = 2;
  if (this->scene() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene());
  }

  // int32 topic = 4;
  if (this->topic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topic());
  }

  // int32 topicType = 5;
  if (this->topictype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topictype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanUsersProgressUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanUsersProgressUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanUsersProgressUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanUsersProgressUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanUsersProgressUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanUsersProgressUpdate)
    MergeFrom(*source);
  }
}

void CMoyuanUsersProgressUpdate::MergeFrom(const CMoyuanUsersProgressUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanUsersProgressUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  npc_.MergeFrom(from.npc_);
  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  if (from.scene() != 0) {
    _internal_set_scene(from._internal_scene());
  }
  if (from.topic() != 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.topictype() != 0) {
    _internal_set_topictype(from._internal_topictype());
  }
}

void CMoyuanUsersProgressUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanUsersProgressUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanUsersProgressUpdate::CopyFrom(const CMoyuanUsersProgressUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanUsersProgressUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanUsersProgressUpdate::IsInitialized() const {
  return true;
}

void CMoyuanUsersProgressUpdate::InternalSwap(CMoyuanUsersProgressUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  npc_.InternalSwap(&other->npc_);
  swap(position_, other->position_);
  swap(layer_, other->layer_);
  swap(scene_, other->scene_);
  swap(topic_, other->topic_);
  swap(topictype_, other->topictype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanUsersProgressUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanUsersProgressUpdate::InitAsDefaultInstance() {
}
class SMoyuanUsersProgressUpdate::_Internal {
 public:
};

SMoyuanUsersProgressUpdate::SMoyuanUsersProgressUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanUsersProgressUpdate)
}
SMoyuanUsersProgressUpdate::SMoyuanUsersProgressUpdate(const SMoyuanUsersProgressUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanUsersProgressUpdate)
}

void SMoyuanUsersProgressUpdate::SharedCtor() {
  status_ = 0;
}

SMoyuanUsersProgressUpdate::~SMoyuanUsersProgressUpdate() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanUsersProgressUpdate)
  SharedDtor();
}

void SMoyuanUsersProgressUpdate::SharedDtor() {
}

void SMoyuanUsersProgressUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanUsersProgressUpdate& SMoyuanUsersProgressUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanUsersProgressUpdate_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanUsersProgressUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanUsersProgressUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SMoyuanUsersProgressUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanUsersProgressUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanUsersProgressUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanUsersProgressUpdate)
  return target;
}

size_t SMoyuanUsersProgressUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanUsersProgressUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanUsersProgressUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanUsersProgressUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanUsersProgressUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanUsersProgressUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanUsersProgressUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanUsersProgressUpdate)
    MergeFrom(*source);
  }
}

void SMoyuanUsersProgressUpdate::MergeFrom(const SMoyuanUsersProgressUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanUsersProgressUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SMoyuanUsersProgressUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanUsersProgressUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanUsersProgressUpdate::CopyFrom(const SMoyuanUsersProgressUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanUsersProgressUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanUsersProgressUpdate::IsInitialized() const {
  return true;
}

void SMoyuanUsersProgressUpdate::InternalSwap(SMoyuanUsersProgressUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanUsersProgressUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanUsersAvatarList::InitAsDefaultInstance() {
}
class CMoyuanUsersAvatarList::_Internal {
 public:
};

CMoyuanUsersAvatarList::CMoyuanUsersAvatarList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanUsersAvatarList)
}
CMoyuanUsersAvatarList::CMoyuanUsersAvatarList(const CMoyuanUsersAvatarList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanUsersAvatarList)
}

void CMoyuanUsersAvatarList::SharedCtor() {
}

CMoyuanUsersAvatarList::~CMoyuanUsersAvatarList() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanUsersAvatarList)
  SharedDtor();
}

void CMoyuanUsersAvatarList::SharedDtor() {
}

void CMoyuanUsersAvatarList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanUsersAvatarList& CMoyuanUsersAvatarList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanUsersAvatarList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanUsersAvatarList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanUsersAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  _internal_metadata_.Clear();
}

const char* CMoyuanUsersAvatarList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanUsersAvatarList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanUsersAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    int byte_size = _uids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanUsersAvatarList)
  return target;
}

size_t CMoyuanUsersAvatarList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanUsersAvatarList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanUsersAvatarList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanUsersAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanUsersAvatarList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanUsersAvatarList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanUsersAvatarList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanUsersAvatarList)
    MergeFrom(*source);
  }
}

void CMoyuanUsersAvatarList::MergeFrom(const CMoyuanUsersAvatarList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanUsersAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
}

void CMoyuanUsersAvatarList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanUsersAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanUsersAvatarList::CopyFrom(const CMoyuanUsersAvatarList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanUsersAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanUsersAvatarList::IsInitialized() const {
  return true;
}

void CMoyuanUsersAvatarList::InternalSwap(CMoyuanUsersAvatarList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uids_.InternalSwap(&other->uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanUsersAvatarList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanUsersAvatarList::InitAsDefaultInstance() {
}
class SMoyuanUsersAvatarList::_Internal {
 public:
};

SMoyuanUsersAvatarList::SMoyuanUsersAvatarList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanUsersAvatarList)
}
SMoyuanUsersAvatarList::SMoyuanUsersAvatarList(const SMoyuanUsersAvatarList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      avatarlist_(from.avatarlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanUsersAvatarList)
}

void SMoyuanUsersAvatarList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoyuanUsersAvatarList_moyuan_2eproto.base);
}

SMoyuanUsersAvatarList::~SMoyuanUsersAvatarList() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanUsersAvatarList)
  SharedDtor();
}

void SMoyuanUsersAvatarList::SharedDtor() {
}

void SMoyuanUsersAvatarList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanUsersAvatarList& SMoyuanUsersAvatarList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanUsersAvatarList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanUsersAvatarList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanUsersAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SMoyuanUsersAvatarList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .moyuan.BMoyuanUsersAvatarList avatarList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_avatarlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanUsersAvatarList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanUsersAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanUsersAvatarList avatarList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_avatarlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_avatarlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanUsersAvatarList)
  return target;
}

size_t SMoyuanUsersAvatarList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanUsersAvatarList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanUsersAvatarList avatarList = 1;
  total_size += 1UL * this->_internal_avatarlist_size();
  for (const auto& msg : this->avatarlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanUsersAvatarList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanUsersAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanUsersAvatarList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanUsersAvatarList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanUsersAvatarList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanUsersAvatarList)
    MergeFrom(*source);
  }
}

void SMoyuanUsersAvatarList::MergeFrom(const SMoyuanUsersAvatarList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanUsersAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatarlist_.MergeFrom(from.avatarlist_);
}

void SMoyuanUsersAvatarList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanUsersAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanUsersAvatarList::CopyFrom(const SMoyuanUsersAvatarList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanUsersAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanUsersAvatarList::IsInitialized() const {
  return true;
}

void SMoyuanUsersAvatarList::InternalSwap(SMoyuanUsersAvatarList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avatarlist_.InternalSwap(&other->avatarlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanUsersAvatarList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMoyuanUsersAvatarList::InitAsDefaultInstance() {
}
class BMoyuanUsersAvatarList::_Internal {
 public:
};

BMoyuanUsersAvatarList::BMoyuanUsersAvatarList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.BMoyuanUsersAvatarList)
}
BMoyuanUsersAvatarList::BMoyuanUsersAvatarList(const BMoyuanUsersAvatarList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatarkey_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(avatarkey_));
  // @@protoc_insertion_point(copy_constructor:moyuan.BMoyuanUsersAvatarList)
}

void BMoyuanUsersAvatarList::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarkey_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(avatarkey_));
}

BMoyuanUsersAvatarList::~BMoyuanUsersAvatarList() {
  // @@protoc_insertion_point(destructor:moyuan.BMoyuanUsersAvatarList)
  SharedDtor();
}

void BMoyuanUsersAvatarList::SharedDtor() {
}

void BMoyuanUsersAvatarList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMoyuanUsersAvatarList& BMoyuanUsersAvatarList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMoyuanUsersAvatarList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void BMoyuanUsersAvatarList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.BMoyuanUsersAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarkey_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(avatarkey_));
  _internal_metadata_.Clear();
}

const char* BMoyuanUsersAvatarList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMoyuanUsersAvatarList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.BMoyuanUsersAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 avatarKey = 2;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_avatarkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.BMoyuanUsersAvatarList)
  return target;
}

size_t BMoyuanUsersAvatarList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.BMoyuanUsersAvatarList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 avatarKey = 2;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMoyuanUsersAvatarList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.BMoyuanUsersAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  const BMoyuanUsersAvatarList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMoyuanUsersAvatarList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.BMoyuanUsersAvatarList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.BMoyuanUsersAvatarList)
    MergeFrom(*source);
  }
}

void BMoyuanUsersAvatarList::MergeFrom(const BMoyuanUsersAvatarList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.BMoyuanUsersAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
}

void BMoyuanUsersAvatarList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.BMoyuanUsersAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMoyuanUsersAvatarList::CopyFrom(const BMoyuanUsersAvatarList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.BMoyuanUsersAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMoyuanUsersAvatarList::IsInitialized() const {
  return true;
}

void BMoyuanUsersAvatarList::InternalSwap(BMoyuanUsersAvatarList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(avatarkey_, other->avatarkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMoyuanUsersAvatarList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanDreamAdd::InitAsDefaultInstance() {
}
class CMoyuanDreamAdd::_Internal {
 public:
};

CMoyuanDreamAdd::CMoyuanDreamAdd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanDreamAdd)
}
CMoyuanDreamAdd::CMoyuanDreamAdd(const CMoyuanDreamAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanDreamAdd)
}

void CMoyuanDreamAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMoyuanDreamAdd_moyuan_2eproto.base);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMoyuanDreamAdd::~CMoyuanDreamAdd() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanDreamAdd)
  SharedDtor();
}

void CMoyuanDreamAdd::SharedDtor() {
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMoyuanDreamAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanDreamAdd& CMoyuanDreamAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanDreamAdd_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanDreamAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanDreamAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CMoyuanDreamAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.CMoyuanDreamAdd.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanDreamAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanDreamAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string desc = 1;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.CMoyuanDreamAdd.desc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanDreamAdd)
  return target;
}

size_t CMoyuanDreamAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanDreamAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string desc = 1;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanDreamAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanDreamAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanDreamAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanDreamAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanDreamAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanDreamAdd)
    MergeFrom(*source);
  }
}

void CMoyuanDreamAdd::MergeFrom(const CMoyuanDreamAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanDreamAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
}

void CMoyuanDreamAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanDreamAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanDreamAdd::CopyFrom(const CMoyuanDreamAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanDreamAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanDreamAdd::IsInitialized() const {
  return true;
}

void CMoyuanDreamAdd::InternalSwap(CMoyuanDreamAdd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanDreamAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanDreamAdd::InitAsDefaultInstance() {
}
class SMoyuanDreamAdd::_Internal {
 public:
};

SMoyuanDreamAdd::SMoyuanDreamAdd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanDreamAdd)
}
SMoyuanDreamAdd::SMoyuanDreamAdd(const SMoyuanDreamAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanDreamAdd)
}

void SMoyuanDreamAdd::SharedCtor() {
  status_ = 0;
}

SMoyuanDreamAdd::~SMoyuanDreamAdd() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanDreamAdd)
  SharedDtor();
}

void SMoyuanDreamAdd::SharedDtor() {
}

void SMoyuanDreamAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanDreamAdd& SMoyuanDreamAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanDreamAdd_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanDreamAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanDreamAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SMoyuanDreamAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanDreamAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanDreamAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanDreamAdd)
  return target;
}

size_t SMoyuanDreamAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanDreamAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanDreamAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanDreamAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanDreamAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanDreamAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanDreamAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanDreamAdd)
    MergeFrom(*source);
  }
}

void SMoyuanDreamAdd::MergeFrom(const SMoyuanDreamAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanDreamAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SMoyuanDreamAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanDreamAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanDreamAdd::CopyFrom(const SMoyuanDreamAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanDreamAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanDreamAdd::IsInitialized() const {
  return true;
}

void SMoyuanDreamAdd::InternalSwap(SMoyuanDreamAdd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanDreamAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanDreamRand::InitAsDefaultInstance() {
}
class CMoyuanDreamRand::_Internal {
 public:
};

CMoyuanDreamRand::CMoyuanDreamRand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanDreamRand)
}
CMoyuanDreamRand::CMoyuanDreamRand(const CMoyuanDreamRand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanDreamRand)
}

void CMoyuanDreamRand::SharedCtor() {
}

CMoyuanDreamRand::~CMoyuanDreamRand() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanDreamRand)
  SharedDtor();
}

void CMoyuanDreamRand::SharedDtor() {
}

void CMoyuanDreamRand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanDreamRand& CMoyuanDreamRand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanDreamRand_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanDreamRand::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanDreamRand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMoyuanDreamRand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanDreamRand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanDreamRand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanDreamRand)
  return target;
}

size_t CMoyuanDreamRand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanDreamRand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanDreamRand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanDreamRand)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanDreamRand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanDreamRand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanDreamRand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanDreamRand)
    MergeFrom(*source);
  }
}

void CMoyuanDreamRand::MergeFrom(const CMoyuanDreamRand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanDreamRand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMoyuanDreamRand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanDreamRand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanDreamRand::CopyFrom(const CMoyuanDreamRand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanDreamRand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanDreamRand::IsInitialized() const {
  return true;
}

void CMoyuanDreamRand::InternalSwap(CMoyuanDreamRand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanDreamRand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanDreamRand::InitAsDefaultInstance() {
}
class SMoyuanDreamRand::_Internal {
 public:
};

SMoyuanDreamRand::SMoyuanDreamRand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanDreamRand)
}
SMoyuanDreamRand::SMoyuanDreamRand(const SMoyuanDreamRand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dreamid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(dreamid_));
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanDreamRand)
}

void SMoyuanDreamRand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoyuanDreamRand_moyuan_2eproto.base);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dreamid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(dreamid_));
}

SMoyuanDreamRand::~SMoyuanDreamRand() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanDreamRand)
  SharedDtor();
}

void SMoyuanDreamRand::SharedDtor() {
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMoyuanDreamRand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanDreamRand& SMoyuanDreamRand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanDreamRand_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanDreamRand::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanDreamRand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dreamid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(dreamid_));
  _internal_metadata_.Clear();
}

const char* SMoyuanDreamRand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.SMoyuanDreamRand.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dreamId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanDreamRand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanDreamRand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string desc = 2;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.SMoyuanDreamRand.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // int32 dreamId = 3;
  if (this->dreamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dreamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanDreamRand)
  return target;
}

size_t SMoyuanDreamRand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanDreamRand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string desc = 2;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 dreamId = 3;
  if (this->dreamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dreamid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanDreamRand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanDreamRand)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanDreamRand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanDreamRand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanDreamRand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanDreamRand)
    MergeFrom(*source);
  }
}

void SMoyuanDreamRand::MergeFrom(const SMoyuanDreamRand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanDreamRand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.dreamid() != 0) {
    _internal_set_dreamid(from._internal_dreamid());
  }
}

void SMoyuanDreamRand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanDreamRand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanDreamRand::CopyFrom(const SMoyuanDreamRand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanDreamRand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanDreamRand::IsInitialized() const {
  return true;
}

void SMoyuanDreamRand::InternalSwap(SMoyuanDreamRand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(dreamid_, other->dreamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanDreamRand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanTroveGoodsBackpackList::InitAsDefaultInstance() {
}
class CMoyuanTroveGoodsBackpackList::_Internal {
 public:
};

CMoyuanTroveGoodsBackpackList::CMoyuanTroveGoodsBackpackList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanTroveGoodsBackpackList)
}
CMoyuanTroveGoodsBackpackList::CMoyuanTroveGoodsBackpackList(const CMoyuanTroveGoodsBackpackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanTroveGoodsBackpackList)
}

void CMoyuanTroveGoodsBackpackList::SharedCtor() {
}

CMoyuanTroveGoodsBackpackList::~CMoyuanTroveGoodsBackpackList() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanTroveGoodsBackpackList)
  SharedDtor();
}

void CMoyuanTroveGoodsBackpackList::SharedDtor() {
}

void CMoyuanTroveGoodsBackpackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanTroveGoodsBackpackList& CMoyuanTroveGoodsBackpackList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanTroveGoodsBackpackList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanTroveGoodsBackpackList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanTroveGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMoyuanTroveGoodsBackpackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanTroveGoodsBackpackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanTroveGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanTroveGoodsBackpackList)
  return target;
}

size_t CMoyuanTroveGoodsBackpackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanTroveGoodsBackpackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanTroveGoodsBackpackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanTroveGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanTroveGoodsBackpackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanTroveGoodsBackpackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanTroveGoodsBackpackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanTroveGoodsBackpackList)
    MergeFrom(*source);
  }
}

void CMoyuanTroveGoodsBackpackList::MergeFrom(const CMoyuanTroveGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanTroveGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMoyuanTroveGoodsBackpackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanTroveGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanTroveGoodsBackpackList::CopyFrom(const CMoyuanTroveGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanTroveGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanTroveGoodsBackpackList::IsInitialized() const {
  return true;
}

void CMoyuanTroveGoodsBackpackList::InternalSwap(CMoyuanTroveGoodsBackpackList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanTroveGoodsBackpackList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanTroveGoodsBackpackList::InitAsDefaultInstance() {
}
class SMoyuanTroveGoodsBackpackList::_Internal {
 public:
};

SMoyuanTroveGoodsBackpackList::SMoyuanTroveGoodsBackpackList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanTroveGoodsBackpackList)
}
SMoyuanTroveGoodsBackpackList::SMoyuanTroveGoodsBackpackList(const SMoyuanTroveGoodsBackpackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanTroveGoodsBackpackList)
}

void SMoyuanTroveGoodsBackpackList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoyuanTroveGoodsBackpackList_moyuan_2eproto.base);
}

SMoyuanTroveGoodsBackpackList::~SMoyuanTroveGoodsBackpackList() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanTroveGoodsBackpackList)
  SharedDtor();
}

void SMoyuanTroveGoodsBackpackList::SharedDtor() {
}

void SMoyuanTroveGoodsBackpackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanTroveGoodsBackpackList& SMoyuanTroveGoodsBackpackList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanTroveGoodsBackpackList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanTroveGoodsBackpackList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanTroveGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SMoyuanTroveGoodsBackpackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .moyuan.BMoyuanTroveGoodsBackpackList list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanTroveGoodsBackpackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanTroveGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanTroveGoodsBackpackList list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanTroveGoodsBackpackList)
  return target;
}

size_t SMoyuanTroveGoodsBackpackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanTroveGoodsBackpackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanTroveGoodsBackpackList list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanTroveGoodsBackpackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanTroveGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanTroveGoodsBackpackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanTroveGoodsBackpackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanTroveGoodsBackpackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanTroveGoodsBackpackList)
    MergeFrom(*source);
  }
}

void SMoyuanTroveGoodsBackpackList::MergeFrom(const SMoyuanTroveGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanTroveGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SMoyuanTroveGoodsBackpackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanTroveGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanTroveGoodsBackpackList::CopyFrom(const SMoyuanTroveGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanTroveGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanTroveGoodsBackpackList::IsInitialized() const {
  return true;
}

void SMoyuanTroveGoodsBackpackList::InternalSwap(SMoyuanTroveGoodsBackpackList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanTroveGoodsBackpackList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMoyuanTroveGoodsBackpackList::InitAsDefaultInstance() {
}
class BMoyuanTroveGoodsBackpackList::_Internal {
 public:
};

BMoyuanTroveGoodsBackpackList::BMoyuanTroveGoodsBackpackList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.BMoyuanTroveGoodsBackpackList)
}
BMoyuanTroveGoodsBackpackList::BMoyuanTroveGoodsBackpackList(const BMoyuanTroveGoodsBackpackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bakcount_) -
    reinterpret_cast<char*>(&id_)) + sizeof(bakcount_));
  // @@protoc_insertion_point(copy_constructor:moyuan.BMoyuanTroveGoodsBackpackList)
}

void BMoyuanTroveGoodsBackpackList::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bakcount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(bakcount_));
}

BMoyuanTroveGoodsBackpackList::~BMoyuanTroveGoodsBackpackList() {
  // @@protoc_insertion_point(destructor:moyuan.BMoyuanTroveGoodsBackpackList)
  SharedDtor();
}

void BMoyuanTroveGoodsBackpackList::SharedDtor() {
}

void BMoyuanTroveGoodsBackpackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMoyuanTroveGoodsBackpackList& BMoyuanTroveGoodsBackpackList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMoyuanTroveGoodsBackpackList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void BMoyuanTroveGoodsBackpackList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.BMoyuanTroveGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bakcount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(bakcount_));
  _internal_metadata_.Clear();
}

const char* BMoyuanTroveGoodsBackpackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bakCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bakcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMoyuanTroveGoodsBackpackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.BMoyuanTroveGoodsBackpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_goodsid(), target);
  }

  // int32 bakCount = 4;
  if (this->bakcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bakcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.BMoyuanTroveGoodsBackpackList)
  return target;
}

size_t BMoyuanTroveGoodsBackpackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.BMoyuanTroveGoodsBackpackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 bakCount = 4;
  if (this->bakcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bakcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMoyuanTroveGoodsBackpackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.BMoyuanTroveGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  const BMoyuanTroveGoodsBackpackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMoyuanTroveGoodsBackpackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.BMoyuanTroveGoodsBackpackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.BMoyuanTroveGoodsBackpackList)
    MergeFrom(*source);
  }
}

void BMoyuanTroveGoodsBackpackList::MergeFrom(const BMoyuanTroveGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.BMoyuanTroveGoodsBackpackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.bakcount() != 0) {
    _internal_set_bakcount(from._internal_bakcount());
  }
}

void BMoyuanTroveGoodsBackpackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.BMoyuanTroveGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMoyuanTroveGoodsBackpackList::CopyFrom(const BMoyuanTroveGoodsBackpackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.BMoyuanTroveGoodsBackpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMoyuanTroveGoodsBackpackList::IsInitialized() const {
  return true;
}

void BMoyuanTroveGoodsBackpackList::InternalSwap(BMoyuanTroveGoodsBackpackList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(goodsid_, other->goodsid_);
  swap(bakcount_, other->bakcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMoyuanTroveGoodsBackpackList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanTroveGoodsAdd::InitAsDefaultInstance() {
}
class CMoyuanTroveGoodsAdd::_Internal {
 public:
};

CMoyuanTroveGoodsAdd::CMoyuanTroveGoodsAdd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanTroveGoodsAdd)
}
CMoyuanTroveGoodsAdd::CMoyuanTroveGoodsAdd(const CMoyuanTroveGoodsAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&goodsid_, &from.goodsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&goodsid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanTroveGoodsAdd)
}

void CMoyuanTroveGoodsAdd::SharedCtor() {
  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(num_));
}

CMoyuanTroveGoodsAdd::~CMoyuanTroveGoodsAdd() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanTroveGoodsAdd)
  SharedDtor();
}

void CMoyuanTroveGoodsAdd::SharedDtor() {
}

void CMoyuanTroveGoodsAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanTroveGoodsAdd& CMoyuanTroveGoodsAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanTroveGoodsAdd_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanTroveGoodsAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanTroveGoodsAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

const char* CMoyuanTroveGoodsAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanTroveGoodsAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanTroveGoodsAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanTroveGoodsAdd)
  return target;
}

size_t CMoyuanTroveGoodsAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanTroveGoodsAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanTroveGoodsAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanTroveGoodsAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanTroveGoodsAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanTroveGoodsAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanTroveGoodsAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanTroveGoodsAdd)
    MergeFrom(*source);
  }
}

void CMoyuanTroveGoodsAdd::MergeFrom(const CMoyuanTroveGoodsAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanTroveGoodsAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void CMoyuanTroveGoodsAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanTroveGoodsAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanTroveGoodsAdd::CopyFrom(const CMoyuanTroveGoodsAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanTroveGoodsAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanTroveGoodsAdd::IsInitialized() const {
  return true;
}

void CMoyuanTroveGoodsAdd::InternalSwap(CMoyuanTroveGoodsAdd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanTroveGoodsAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanTroveGoodsAdd::InitAsDefaultInstance() {
}
class SMoyuanTroveGoodsAdd::_Internal {
 public:
};

SMoyuanTroveGoodsAdd::SMoyuanTroveGoodsAdd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanTroveGoodsAdd)
}
SMoyuanTroveGoodsAdd::SMoyuanTroveGoodsAdd(const SMoyuanTroveGoodsAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanTroveGoodsAdd)
}

void SMoyuanTroveGoodsAdd::SharedCtor() {
  status_ = 0;
}

SMoyuanTroveGoodsAdd::~SMoyuanTroveGoodsAdd() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanTroveGoodsAdd)
  SharedDtor();
}

void SMoyuanTroveGoodsAdd::SharedDtor() {
}

void SMoyuanTroveGoodsAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanTroveGoodsAdd& SMoyuanTroveGoodsAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanTroveGoodsAdd_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanTroveGoodsAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanTroveGoodsAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SMoyuanTroveGoodsAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanTroveGoodsAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanTroveGoodsAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanTroveGoodsAdd)
  return target;
}

size_t SMoyuanTroveGoodsAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanTroveGoodsAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanTroveGoodsAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanTroveGoodsAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanTroveGoodsAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanTroveGoodsAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanTroveGoodsAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanTroveGoodsAdd)
    MergeFrom(*source);
  }
}

void SMoyuanTroveGoodsAdd::MergeFrom(const SMoyuanTroveGoodsAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanTroveGoodsAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SMoyuanTroveGoodsAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanTroveGoodsAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanTroveGoodsAdd::CopyFrom(const SMoyuanTroveGoodsAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanTroveGoodsAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanTroveGoodsAdd::IsInitialized() const {
  return true;
}

void SMoyuanTroveGoodsAdd::InternalSwap(SMoyuanTroveGoodsAdd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanTroveGoodsAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanDreamCommentList::InitAsDefaultInstance() {
}
class CMoyuanDreamCommentList::_Internal {
 public:
};

CMoyuanDreamCommentList::CMoyuanDreamCommentList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanDreamCommentList)
}
CMoyuanDreamCommentList::CMoyuanDreamCommentList(const CMoyuanDreamCommentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dreamid_, &from.dreamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagelimit_) -
    reinterpret_cast<char*>(&dreamid_)) + sizeof(pagelimit_));
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanDreamCommentList)
}

void CMoyuanDreamCommentList::SharedCtor() {
  ::memset(&dreamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&dreamid_)) + sizeof(pagelimit_));
}

CMoyuanDreamCommentList::~CMoyuanDreamCommentList() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanDreamCommentList)
  SharedDtor();
}

void CMoyuanDreamCommentList::SharedDtor() {
}

void CMoyuanDreamCommentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanDreamCommentList& CMoyuanDreamCommentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanDreamCommentList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanDreamCommentList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanDreamCommentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dreamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&dreamid_)) + sizeof(pagelimit_));
  _internal_metadata_.Clear();
}

const char* CMoyuanDreamCommentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dreamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curPage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanDreamCommentList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanDreamCommentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dreamId = 1;
  if (this->dreamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dreamid(), target);
  }

  // int32 curPage = 2;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 3;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pagelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanDreamCommentList)
  return target;
}

size_t CMoyuanDreamCommentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanDreamCommentList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dreamId = 1;
  if (this->dreamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dreamid());
  }

  // int32 curPage = 2;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 3;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanDreamCommentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanDreamCommentList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanDreamCommentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanDreamCommentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanDreamCommentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanDreamCommentList)
    MergeFrom(*source);
  }
}

void CMoyuanDreamCommentList::MergeFrom(const CMoyuanDreamCommentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanDreamCommentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dreamid() != 0) {
    _internal_set_dreamid(from._internal_dreamid());
  }
  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
}

void CMoyuanDreamCommentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanDreamCommentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanDreamCommentList::CopyFrom(const CMoyuanDreamCommentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanDreamCommentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanDreamCommentList::IsInitialized() const {
  return true;
}

void CMoyuanDreamCommentList::InternalSwap(CMoyuanDreamCommentList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dreamid_, other->dreamid_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanDreamCommentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanDreamCommentList::InitAsDefaultInstance() {
}
class SMoyuanDreamCommentList::_Internal {
 public:
};

SMoyuanDreamCommentList::SMoyuanDreamCommentList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanDreamCommentList)
}
SMoyuanDreamCommentList::SMoyuanDreamCommentList(const SMoyuanDreamCommentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagelimit_) -
    reinterpret_cast<char*>(&total_)) + sizeof(pagelimit_));
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanDreamCommentList)
}

void SMoyuanDreamCommentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoyuanDreamCommentList_moyuan_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&total_)) + sizeof(pagelimit_));
}

SMoyuanDreamCommentList::~SMoyuanDreamCommentList() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanDreamCommentList)
  SharedDtor();
}

void SMoyuanDreamCommentList::SharedDtor() {
}

void SMoyuanDreamCommentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanDreamCommentList& SMoyuanDreamCommentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanDreamCommentList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanDreamCommentList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanDreamCommentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&total_)) + sizeof(pagelimit_));
  _internal_metadata_.Clear();
}

const char* SMoyuanDreamCommentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .moyuan.BMoyuanDreamComment list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curPage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanDreamCommentList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanDreamCommentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanDreamComment list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pagelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanDreamCommentList)
  return target;
}

size_t SMoyuanDreamCommentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanDreamCommentList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanDreamComment list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanDreamCommentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanDreamCommentList)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanDreamCommentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanDreamCommentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanDreamCommentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanDreamCommentList)
    MergeFrom(*source);
  }
}

void SMoyuanDreamCommentList::MergeFrom(const SMoyuanDreamCommentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanDreamCommentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
}

void SMoyuanDreamCommentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanDreamCommentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanDreamCommentList::CopyFrom(const SMoyuanDreamCommentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanDreamCommentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanDreamCommentList::IsInitialized() const {
  return true;
}

void SMoyuanDreamCommentList::InternalSwap(SMoyuanDreamCommentList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  swap(total_, other->total_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanDreamCommentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMoyuanDreamComment::InitAsDefaultInstance() {
}
class BMoyuanDreamComment::_Internal {
 public:
};

BMoyuanDreamComment::BMoyuanDreamComment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.BMoyuanDreamComment)
}
BMoyuanDreamComment::BMoyuanDreamComment(const BMoyuanDreamComment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head().empty()) {
    head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  tocommentnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tocommentnick().empty()) {
    tocommentnick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tocommentnick_);
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdat().empty()) {
    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tocommentuid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(tocommentuid_));
  // @@protoc_insertion_point(copy_constructor:moyuan.BMoyuanDreamComment)
}

void BMoyuanDreamComment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BMoyuanDreamComment_moyuan_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tocommentnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tocommentuid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(tocommentuid_));
}

BMoyuanDreamComment::~BMoyuanDreamComment() {
  // @@protoc_insertion_point(destructor:moyuan.BMoyuanDreamComment)
  SharedDtor();
}

void BMoyuanDreamComment::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tocommentnick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BMoyuanDreamComment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMoyuanDreamComment& BMoyuanDreamComment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMoyuanDreamComment_moyuan_2eproto.base);
  return *internal_default_instance();
}


void BMoyuanDreamComment::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.BMoyuanDreamComment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tocommentnick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tocommentuid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(tocommentuid_));
  _internal_metadata_.Clear();
}

const char* BMoyuanDreamComment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dreamId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isAnonymous = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isanonymous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.BMoyuanDreamComment.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string head = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_head();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.BMoyuanDreamComment.head"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 toCommentId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tocommentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 toCommentUid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tocommentuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string toCommentNick = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_tocommentnick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.BMoyuanDreamComment.toCommentNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.BMoyuanDreamComment.comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdAt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_createdat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.BMoyuanDreamComment.createdAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMoyuanDreamComment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.BMoyuanDreamComment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 dreamId = 2;
  if (this->dreamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dreamid(), target);
  }

  // int32 isAnonymous = 3;
  if (this->isanonymous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_isanonymous(), target);
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_uid(), target);
  }

  // string nick = 5;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.BMoyuanDreamComment.nick");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nick(), target);
  }

  // string head = 6;
  if (this->head().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head().data(), static_cast<int>(this->_internal_head().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.BMoyuanDreamComment.head");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_head(), target);
  }

  // int32 toCommentId = 7;
  if (this->tocommentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_tocommentid(), target);
  }

  // int32 toCommentUid = 8;
  if (this->tocommentuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_tocommentuid(), target);
  }

  // string toCommentNick = 9;
  if (this->tocommentnick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tocommentnick().data(), static_cast<int>(this->_internal_tocommentnick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.BMoyuanDreamComment.toCommentNick");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_tocommentnick(), target);
  }

  // string comment = 10;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.BMoyuanDreamComment.comment");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_comment(), target);
  }

  // string createdAt = 11;
  if (this->createdat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdat().data(), static_cast<int>(this->_internal_createdat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.BMoyuanDreamComment.createdAt");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_createdat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.BMoyuanDreamComment)
  return target;
}

size_t BMoyuanDreamComment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.BMoyuanDreamComment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 5;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string head = 6;
  if (this->head().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head());
  }

  // string toCommentNick = 9;
  if (this->tocommentnick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tocommentnick());
  }

  // string comment = 10;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // string createdAt = 11;
  if (this->createdat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdat());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 dreamId = 2;
  if (this->dreamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dreamid());
  }

  // int32 isAnonymous = 3;
  if (this->isanonymous() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isanonymous());
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 toCommentId = 7;
  if (this->tocommentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tocommentid());
  }

  // int32 toCommentUid = 8;
  if (this->tocommentuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tocommentuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMoyuanDreamComment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.BMoyuanDreamComment)
  GOOGLE_DCHECK_NE(&from, this);
  const BMoyuanDreamComment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMoyuanDreamComment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.BMoyuanDreamComment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.BMoyuanDreamComment)
    MergeFrom(*source);
  }
}

void BMoyuanDreamComment::MergeFrom(const BMoyuanDreamComment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.BMoyuanDreamComment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.head().size() > 0) {

    head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  if (from.tocommentnick().size() > 0) {

    tocommentnick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tocommentnick_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.createdat().size() > 0) {

    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.dreamid() != 0) {
    _internal_set_dreamid(from._internal_dreamid());
  }
  if (from.isanonymous() != 0) {
    _internal_set_isanonymous(from._internal_isanonymous());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.tocommentid() != 0) {
    _internal_set_tocommentid(from._internal_tocommentid());
  }
  if (from.tocommentuid() != 0) {
    _internal_set_tocommentuid(from._internal_tocommentuid());
  }
}

void BMoyuanDreamComment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.BMoyuanDreamComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMoyuanDreamComment::CopyFrom(const BMoyuanDreamComment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.BMoyuanDreamComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMoyuanDreamComment::IsInitialized() const {
  return true;
}

void BMoyuanDreamComment::InternalSwap(BMoyuanDreamComment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  head_.Swap(&other->head_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tocommentnick_.Swap(&other->tocommentnick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdat_.Swap(&other->createdat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(dreamid_, other->dreamid_);
  swap(isanonymous_, other->isanonymous_);
  swap(uid_, other->uid_);
  swap(tocommentid_, other->tocommentid_);
  swap(tocommentuid_, other->tocommentuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMoyuanDreamComment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanDreamComment::InitAsDefaultInstance() {
}
class CMoyuanDreamComment::_Internal {
 public:
};

CMoyuanDreamComment::CMoyuanDreamComment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanDreamComment)
}
CMoyuanDreamComment::CMoyuanDreamComment(const CMoyuanDreamComment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head().empty()) {
    head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  tocommentnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tocommentnick().empty()) {
    tocommentnick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tocommentnick_);
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&dreamid_, &from.dreamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tocommentuid_) -
    reinterpret_cast<char*>(&dreamid_)) + sizeof(tocommentuid_));
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanDreamComment)
}

void CMoyuanDreamComment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMoyuanDreamComment_moyuan_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tocommentnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dreamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tocommentuid_) -
      reinterpret_cast<char*>(&dreamid_)) + sizeof(tocommentuid_));
}

CMoyuanDreamComment::~CMoyuanDreamComment() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanDreamComment)
  SharedDtor();
}

void CMoyuanDreamComment::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tocommentnick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMoyuanDreamComment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanDreamComment& CMoyuanDreamComment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanDreamComment_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanDreamComment::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanDreamComment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tocommentnick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dreamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tocommentuid_) -
      reinterpret_cast<char*>(&dreamid_)) + sizeof(tocommentuid_));
  _internal_metadata_.Clear();
}

const char* CMoyuanDreamComment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dreamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isAnonymous = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isanonymous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.CMoyuanDreamComment.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string head = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_head();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.CMoyuanDreamComment.head"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 toCommentId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tocommentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 toCommentUid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tocommentuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string toCommentNick = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_tocommentnick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.CMoyuanDreamComment.toCommentNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.CMoyuanDreamComment.comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanDreamComment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanDreamComment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dreamId = 1;
  if (this->dreamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dreamid(), target);
  }

  // int32 isAnonymous = 2;
  if (this->isanonymous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_isanonymous(), target);
  }

  // string nick = 5;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.CMoyuanDreamComment.nick");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nick(), target);
  }

  // string head = 6;
  if (this->head().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head().data(), static_cast<int>(this->_internal_head().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.CMoyuanDreamComment.head");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_head(), target);
  }

  // int32 toCommentId = 7;
  if (this->tocommentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_tocommentid(), target);
  }

  // int32 toCommentUid = 8;
  if (this->tocommentuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_tocommentuid(), target);
  }

  // string toCommentNick = 9;
  if (this->tocommentnick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tocommentnick().data(), static_cast<int>(this->_internal_tocommentnick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.CMoyuanDreamComment.toCommentNick");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_tocommentnick(), target);
  }

  // string comment = 10;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.CMoyuanDreamComment.comment");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanDreamComment)
  return target;
}

size_t CMoyuanDreamComment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanDreamComment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 5;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string head = 6;
  if (this->head().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head());
  }

  // string toCommentNick = 9;
  if (this->tocommentnick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tocommentnick());
  }

  // string comment = 10;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // int32 dreamId = 1;
  if (this->dreamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dreamid());
  }

  // int32 isAnonymous = 2;
  if (this->isanonymous() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isanonymous());
  }

  // int32 toCommentId = 7;
  if (this->tocommentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tocommentid());
  }

  // int32 toCommentUid = 8;
  if (this->tocommentuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tocommentuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanDreamComment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanDreamComment)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanDreamComment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanDreamComment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanDreamComment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanDreamComment)
    MergeFrom(*source);
  }
}

void CMoyuanDreamComment::MergeFrom(const CMoyuanDreamComment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanDreamComment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.head().size() > 0) {

    head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  if (from.tocommentnick().size() > 0) {

    tocommentnick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tocommentnick_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.dreamid() != 0) {
    _internal_set_dreamid(from._internal_dreamid());
  }
  if (from.isanonymous() != 0) {
    _internal_set_isanonymous(from._internal_isanonymous());
  }
  if (from.tocommentid() != 0) {
    _internal_set_tocommentid(from._internal_tocommentid());
  }
  if (from.tocommentuid() != 0) {
    _internal_set_tocommentuid(from._internal_tocommentuid());
  }
}

void CMoyuanDreamComment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanDreamComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanDreamComment::CopyFrom(const CMoyuanDreamComment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanDreamComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanDreamComment::IsInitialized() const {
  return true;
}

void CMoyuanDreamComment::InternalSwap(CMoyuanDreamComment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  head_.Swap(&other->head_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tocommentnick_.Swap(&other->tocommentnick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dreamid_, other->dreamid_);
  swap(isanonymous_, other->isanonymous_);
  swap(tocommentid_, other->tocommentid_);
  swap(tocommentuid_, other->tocommentuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanDreamComment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanDreamComment::InitAsDefaultInstance() {
}
class SMoyuanDreamComment::_Internal {
 public:
};

SMoyuanDreamComment::SMoyuanDreamComment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanDreamComment)
}
SMoyuanDreamComment::SMoyuanDreamComment(const SMoyuanDreamComment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanDreamComment)
}

void SMoyuanDreamComment::SharedCtor() {
  status_ = 0;
}

SMoyuanDreamComment::~SMoyuanDreamComment() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanDreamComment)
  SharedDtor();
}

void SMoyuanDreamComment::SharedDtor() {
}

void SMoyuanDreamComment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanDreamComment& SMoyuanDreamComment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanDreamComment_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanDreamComment::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanDreamComment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SMoyuanDreamComment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanDreamComment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanDreamComment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanDreamComment)
  return target;
}

size_t SMoyuanDreamComment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanDreamComment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanDreamComment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanDreamComment)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanDreamComment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanDreamComment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanDreamComment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanDreamComment)
    MergeFrom(*source);
  }
}

void SMoyuanDreamComment::MergeFrom(const SMoyuanDreamComment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanDreamComment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SMoyuanDreamComment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanDreamComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanDreamComment::CopyFrom(const SMoyuanDreamComment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanDreamComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanDreamComment::IsInitialized() const {
  return true;
}

void SMoyuanDreamComment::InternalSwap(SMoyuanDreamComment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanDreamComment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanAnonymousId::InitAsDefaultInstance() {
}
class CMoyuanAnonymousId::_Internal {
 public:
};

CMoyuanAnonymousId::CMoyuanAnonymousId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanAnonymousId)
}
CMoyuanAnonymousId::CMoyuanAnonymousId(const CMoyuanAnonymousId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanAnonymousId)
}

void CMoyuanAnonymousId::SharedCtor() {
}

CMoyuanAnonymousId::~CMoyuanAnonymousId() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanAnonymousId)
  SharedDtor();
}

void CMoyuanAnonymousId::SharedDtor() {
}

void CMoyuanAnonymousId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanAnonymousId& CMoyuanAnonymousId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanAnonymousId_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanAnonymousId::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanAnonymousId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMoyuanAnonymousId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanAnonymousId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanAnonymousId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanAnonymousId)
  return target;
}

size_t CMoyuanAnonymousId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanAnonymousId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanAnonymousId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanAnonymousId)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanAnonymousId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanAnonymousId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanAnonymousId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanAnonymousId)
    MergeFrom(*source);
  }
}

void CMoyuanAnonymousId::MergeFrom(const CMoyuanAnonymousId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanAnonymousId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMoyuanAnonymousId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanAnonymousId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanAnonymousId::CopyFrom(const CMoyuanAnonymousId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanAnonymousId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanAnonymousId::IsInitialized() const {
  return true;
}

void CMoyuanAnonymousId::InternalSwap(CMoyuanAnonymousId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanAnonymousId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanAnonymousId::InitAsDefaultInstance() {
}
class SMoyuanAnonymousId::_Internal {
 public:
};

SMoyuanAnonymousId::SMoyuanAnonymousId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanAnonymousId)
}
SMoyuanAnonymousId::SMoyuanAnonymousId(const SMoyuanAnonymousId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anonymousid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_anonymousid().empty()) {
    anonymousid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anonymousid_);
  }
  anonymoushead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_anonymoushead().empty()) {
    anonymoushead_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anonymoushead_);
  }
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanAnonymousId)
}

void SMoyuanAnonymousId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoyuanAnonymousId_moyuan_2eproto.base);
  anonymousid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anonymoushead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SMoyuanAnonymousId::~SMoyuanAnonymousId() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanAnonymousId)
  SharedDtor();
}

void SMoyuanAnonymousId::SharedDtor() {
  anonymousid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anonymoushead_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMoyuanAnonymousId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanAnonymousId& SMoyuanAnonymousId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanAnonymousId_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanAnonymousId::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanAnonymousId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anonymousid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anonymoushead_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SMoyuanAnonymousId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string anonymousId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_anonymousid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.SMoyuanAnonymousId.anonymousId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string anonymousHead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_anonymoushead();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.SMoyuanAnonymousId.anonymousHead"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanAnonymousId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanAnonymousId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string anonymousId = 1;
  if (this->anonymousid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_anonymousid().data(), static_cast<int>(this->_internal_anonymousid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.SMoyuanAnonymousId.anonymousId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_anonymousid(), target);
  }

  // string anonymousHead = 2;
  if (this->anonymoushead().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_anonymoushead().data(), static_cast<int>(this->_internal_anonymoushead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.SMoyuanAnonymousId.anonymousHead");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_anonymoushead(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanAnonymousId)
  return target;
}

size_t SMoyuanAnonymousId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanAnonymousId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string anonymousId = 1;
  if (this->anonymousid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_anonymousid());
  }

  // string anonymousHead = 2;
  if (this->anonymoushead().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_anonymoushead());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanAnonymousId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanAnonymousId)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanAnonymousId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanAnonymousId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanAnonymousId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanAnonymousId)
    MergeFrom(*source);
  }
}

void SMoyuanAnonymousId::MergeFrom(const SMoyuanAnonymousId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanAnonymousId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anonymousid().size() > 0) {

    anonymousid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anonymousid_);
  }
  if (from.anonymoushead().size() > 0) {

    anonymoushead_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anonymoushead_);
  }
}

void SMoyuanAnonymousId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanAnonymousId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanAnonymousId::CopyFrom(const SMoyuanAnonymousId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanAnonymousId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanAnonymousId::IsInitialized() const {
  return true;
}

void SMoyuanAnonymousId::InternalSwap(SMoyuanAnonymousId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anonymousid_.Swap(&other->anonymousid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  anonymoushead_.Swap(&other->anonymoushead_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanAnonymousId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanDreamCommentNoticeList::InitAsDefaultInstance() {
}
class CMoyuanDreamCommentNoticeList::_Internal {
 public:
};

CMoyuanDreamCommentNoticeList::CMoyuanDreamCommentNoticeList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanDreamCommentNoticeList)
}
CMoyuanDreamCommentNoticeList::CMoyuanDreamCommentNoticeList(const CMoyuanDreamCommentNoticeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanDreamCommentNoticeList)
}

void CMoyuanDreamCommentNoticeList::SharedCtor() {
}

CMoyuanDreamCommentNoticeList::~CMoyuanDreamCommentNoticeList() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanDreamCommentNoticeList)
  SharedDtor();
}

void CMoyuanDreamCommentNoticeList::SharedDtor() {
}

void CMoyuanDreamCommentNoticeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanDreamCommentNoticeList& CMoyuanDreamCommentNoticeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanDreamCommentNoticeList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanDreamCommentNoticeList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanDreamCommentNoticeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMoyuanDreamCommentNoticeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanDreamCommentNoticeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanDreamCommentNoticeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanDreamCommentNoticeList)
  return target;
}

size_t CMoyuanDreamCommentNoticeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanDreamCommentNoticeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanDreamCommentNoticeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanDreamCommentNoticeList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanDreamCommentNoticeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanDreamCommentNoticeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanDreamCommentNoticeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanDreamCommentNoticeList)
    MergeFrom(*source);
  }
}

void CMoyuanDreamCommentNoticeList::MergeFrom(const CMoyuanDreamCommentNoticeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanDreamCommentNoticeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMoyuanDreamCommentNoticeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanDreamCommentNoticeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanDreamCommentNoticeList::CopyFrom(const CMoyuanDreamCommentNoticeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanDreamCommentNoticeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanDreamCommentNoticeList::IsInitialized() const {
  return true;
}

void CMoyuanDreamCommentNoticeList::InternalSwap(CMoyuanDreamCommentNoticeList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanDreamCommentNoticeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanDreamCommentNoticeList::InitAsDefaultInstance() {
}
class SMoyuanDreamCommentNoticeList::_Internal {
 public:
};

SMoyuanDreamCommentNoticeList::SMoyuanDreamCommentNoticeList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanDreamCommentNoticeList)
}
SMoyuanDreamCommentNoticeList::SMoyuanDreamCommentNoticeList(const SMoyuanDreamCommentNoticeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanDreamCommentNoticeList)
}

void SMoyuanDreamCommentNoticeList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoyuanDreamCommentNoticeList_moyuan_2eproto.base);
}

SMoyuanDreamCommentNoticeList::~SMoyuanDreamCommentNoticeList() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanDreamCommentNoticeList)
  SharedDtor();
}

void SMoyuanDreamCommentNoticeList::SharedDtor() {
}

void SMoyuanDreamCommentNoticeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanDreamCommentNoticeList& SMoyuanDreamCommentNoticeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanDreamCommentNoticeList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanDreamCommentNoticeList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanDreamCommentNoticeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SMoyuanDreamCommentNoticeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .moyuan.BMoyuanDreamCommentNotice list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanDreamCommentNoticeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanDreamCommentNoticeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanDreamCommentNotice list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanDreamCommentNoticeList)
  return target;
}

size_t SMoyuanDreamCommentNoticeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanDreamCommentNoticeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanDreamCommentNotice list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanDreamCommentNoticeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanDreamCommentNoticeList)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanDreamCommentNoticeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanDreamCommentNoticeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanDreamCommentNoticeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanDreamCommentNoticeList)
    MergeFrom(*source);
  }
}

void SMoyuanDreamCommentNoticeList::MergeFrom(const SMoyuanDreamCommentNoticeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanDreamCommentNoticeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SMoyuanDreamCommentNoticeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanDreamCommentNoticeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanDreamCommentNoticeList::CopyFrom(const SMoyuanDreamCommentNoticeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanDreamCommentNoticeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanDreamCommentNoticeList::IsInitialized() const {
  return true;
}

void SMoyuanDreamCommentNoticeList::InternalSwap(SMoyuanDreamCommentNoticeList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanDreamCommentNoticeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMoyuanDreamCommentNotice::InitAsDefaultInstance() {
}
class BMoyuanDreamCommentNotice::_Internal {
 public:
};

BMoyuanDreamCommentNotice::BMoyuanDreamCommentNotice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.BMoyuanDreamCommentNotice)
}
BMoyuanDreamCommentNotice::BMoyuanDreamCommentNotice(const BMoyuanDreamCommentNotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tips().empty()) {
    tips_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tips_);
  }
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head().empty()) {
    head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  dreamid_ = from.dreamid_;
  // @@protoc_insertion_point(copy_constructor:moyuan.BMoyuanDreamCommentNotice)
}

void BMoyuanDreamCommentNotice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BMoyuanDreamCommentNotice_moyuan_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dreamid_ = 0;
}

BMoyuanDreamCommentNotice::~BMoyuanDreamCommentNotice() {
  // @@protoc_insertion_point(destructor:moyuan.BMoyuanDreamCommentNotice)
  SharedDtor();
}

void BMoyuanDreamCommentNotice::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tips_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BMoyuanDreamCommentNotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMoyuanDreamCommentNotice& BMoyuanDreamCommentNotice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMoyuanDreamCommentNotice_moyuan_2eproto.base);
  return *internal_default_instance();
}


void BMoyuanDreamCommentNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.BMoyuanDreamCommentNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dreamid_ = 0;
  _internal_metadata_.Clear();
}

const char* BMoyuanDreamCommentNotice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dreamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.BMoyuanDreamCommentNotice.comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tips = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tips();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.BMoyuanDreamCommentNotice.tips"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Head = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_head();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.BMoyuanDreamCommentNotice.Head"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMoyuanDreamCommentNotice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.BMoyuanDreamCommentNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dreamId = 1;
  if (this->dreamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dreamid(), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.BMoyuanDreamCommentNotice.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // string tips = 3;
  if (this->tips().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tips().data(), static_cast<int>(this->_internal_tips().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.BMoyuanDreamCommentNotice.tips");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tips(), target);
  }

  // string Head = 4;
  if (this->head().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head().data(), static_cast<int>(this->_internal_head().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.BMoyuanDreamCommentNotice.Head");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_head(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.BMoyuanDreamCommentNotice)
  return target;
}

size_t BMoyuanDreamCommentNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.BMoyuanDreamCommentNotice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // string tips = 3;
  if (this->tips().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tips());
  }

  // string Head = 4;
  if (this->head().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head());
  }

  // int32 dreamId = 1;
  if (this->dreamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dreamid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMoyuanDreamCommentNotice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.BMoyuanDreamCommentNotice)
  GOOGLE_DCHECK_NE(&from, this);
  const BMoyuanDreamCommentNotice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMoyuanDreamCommentNotice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.BMoyuanDreamCommentNotice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.BMoyuanDreamCommentNotice)
    MergeFrom(*source);
  }
}

void BMoyuanDreamCommentNotice::MergeFrom(const BMoyuanDreamCommentNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.BMoyuanDreamCommentNotice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.tips().size() > 0) {

    tips_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tips_);
  }
  if (from.head().size() > 0) {

    head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  if (from.dreamid() != 0) {
    _internal_set_dreamid(from._internal_dreamid());
  }
}

void BMoyuanDreamCommentNotice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.BMoyuanDreamCommentNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMoyuanDreamCommentNotice::CopyFrom(const BMoyuanDreamCommentNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.BMoyuanDreamCommentNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMoyuanDreamCommentNotice::IsInitialized() const {
  return true;
}

void BMoyuanDreamCommentNotice::InternalSwap(BMoyuanDreamCommentNotice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tips_.Swap(&other->tips_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  head_.Swap(&other->head_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dreamid_, other->dreamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMoyuanDreamCommentNotice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanMineDreamList::InitAsDefaultInstance() {
}
class CMoyuanMineDreamList::_Internal {
 public:
};

CMoyuanMineDreamList::CMoyuanMineDreamList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanMineDreamList)
}
CMoyuanMineDreamList::CMoyuanMineDreamList(const CMoyuanMineDreamList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curpage_, &from.curpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagelimit_) -
    reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanMineDreamList)
}

void CMoyuanMineDreamList::SharedCtor() {
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
}

CMoyuanMineDreamList::~CMoyuanMineDreamList() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanMineDreamList)
  SharedDtor();
}

void CMoyuanMineDreamList::SharedDtor() {
}

void CMoyuanMineDreamList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanMineDreamList& CMoyuanMineDreamList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanMineDreamList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanMineDreamList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanMineDreamList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
  _internal_metadata_.Clear();
}

const char* CMoyuanMineDreamList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 curPage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanMineDreamList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanMineDreamList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pagelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanMineDreamList)
  return target;
}

size_t CMoyuanMineDreamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanMineDreamList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanMineDreamList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanMineDreamList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanMineDreamList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanMineDreamList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanMineDreamList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanMineDreamList)
    MergeFrom(*source);
  }
}

void CMoyuanMineDreamList::MergeFrom(const CMoyuanMineDreamList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanMineDreamList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
}

void CMoyuanMineDreamList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanMineDreamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanMineDreamList::CopyFrom(const CMoyuanMineDreamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanMineDreamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanMineDreamList::IsInitialized() const {
  return true;
}

void CMoyuanMineDreamList::InternalSwap(CMoyuanMineDreamList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanMineDreamList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanMineDreamList::InitAsDefaultInstance() {
}
class SMoyuanMineDreamList::_Internal {
 public:
};

SMoyuanMineDreamList::SMoyuanMineDreamList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanMineDreamList)
}
SMoyuanMineDreamList::SMoyuanMineDreamList(const SMoyuanMineDreamList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagelimit_) -
    reinterpret_cast<char*>(&total_)) + sizeof(pagelimit_));
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanMineDreamList)
}

void SMoyuanMineDreamList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoyuanMineDreamList_moyuan_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&total_)) + sizeof(pagelimit_));
}

SMoyuanMineDreamList::~SMoyuanMineDreamList() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanMineDreamList)
  SharedDtor();
}

void SMoyuanMineDreamList::SharedDtor() {
}

void SMoyuanMineDreamList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanMineDreamList& SMoyuanMineDreamList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanMineDreamList_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanMineDreamList::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanMineDreamList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&total_)) + sizeof(pagelimit_));
  _internal_metadata_.Clear();
}

const char* SMoyuanMineDreamList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .moyuan.BMoyuanDreamInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curPage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanMineDreamList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanMineDreamList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanDreamInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pagelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanMineDreamList)
  return target;
}

size_t SMoyuanMineDreamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanMineDreamList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .moyuan.BMoyuanDreamInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 4;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanMineDreamList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanMineDreamList)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanMineDreamList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanMineDreamList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanMineDreamList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanMineDreamList)
    MergeFrom(*source);
  }
}

void SMoyuanMineDreamList::MergeFrom(const SMoyuanMineDreamList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanMineDreamList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
}

void SMoyuanMineDreamList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanMineDreamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanMineDreamList::CopyFrom(const SMoyuanMineDreamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanMineDreamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanMineDreamList::IsInitialized() const {
  return true;
}

void SMoyuanMineDreamList::InternalSwap(SMoyuanMineDreamList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  swap(total_, other->total_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanMineDreamList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMoyuanDreamInfo::InitAsDefaultInstance() {
}
class BMoyuanDreamInfo::_Internal {
 public:
};

BMoyuanDreamInfo::BMoyuanDreamInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.BMoyuanDreamInfo)
}
BMoyuanDreamInfo::BMoyuanDreamInfo(const BMoyuanDreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&commentnum_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(commentnum_));
  // @@protoc_insertion_point(copy_constructor:moyuan.BMoyuanDreamInfo)
}

void BMoyuanDreamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BMoyuanDreamInfo_moyuan_2eproto.base);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commentnum_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(commentnum_));
}

BMoyuanDreamInfo::~BMoyuanDreamInfo() {
  // @@protoc_insertion_point(destructor:moyuan.BMoyuanDreamInfo)
  SharedDtor();
}

void BMoyuanDreamInfo::SharedDtor() {
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BMoyuanDreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMoyuanDreamInfo& BMoyuanDreamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMoyuanDreamInfo_moyuan_2eproto.base);
  return *internal_default_instance();
}


void BMoyuanDreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.BMoyuanDreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commentnum_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(commentnum_));
  _internal_metadata_.Clear();
}

const char* BMoyuanDreamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moyuan.BMoyuanDreamInfo.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dreamId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 commentNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          commentnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMoyuanDreamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.BMoyuanDreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string desc = 2;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moyuan.BMoyuanDreamInfo.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // int32 dreamId = 3;
  if (this->dreamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dreamid(), target);
  }

  // int32 commentNum = 4;
  if (this->commentnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_commentnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.BMoyuanDreamInfo)
  return target;
}

size_t BMoyuanDreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.BMoyuanDreamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string desc = 2;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 dreamId = 3;
  if (this->dreamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dreamid());
  }

  // int32 commentNum = 4;
  if (this->commentnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commentnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMoyuanDreamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.BMoyuanDreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BMoyuanDreamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMoyuanDreamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.BMoyuanDreamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.BMoyuanDreamInfo)
    MergeFrom(*source);
  }
}

void BMoyuanDreamInfo::MergeFrom(const BMoyuanDreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.BMoyuanDreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.dreamid() != 0) {
    _internal_set_dreamid(from._internal_dreamid());
  }
  if (from.commentnum() != 0) {
    _internal_set_commentnum(from._internal_commentnum());
  }
}

void BMoyuanDreamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.BMoyuanDreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMoyuanDreamInfo::CopyFrom(const BMoyuanDreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.BMoyuanDreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMoyuanDreamInfo::IsInitialized() const {
  return true;
}

void BMoyuanDreamInfo::InternalSwap(BMoyuanDreamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(dreamid_, other->dreamid_);
  swap(commentnum_, other->commentnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMoyuanDreamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoyuanDreamInfo::InitAsDefaultInstance() {
}
class CMoyuanDreamInfo::_Internal {
 public:
};

CMoyuanDreamInfo::CMoyuanDreamInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.CMoyuanDreamInfo)
}
CMoyuanDreamInfo::CMoyuanDreamInfo(const CMoyuanDreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dreamid_ = from.dreamid_;
  // @@protoc_insertion_point(copy_constructor:moyuan.CMoyuanDreamInfo)
}

void CMoyuanDreamInfo::SharedCtor() {
  dreamid_ = 0;
}

CMoyuanDreamInfo::~CMoyuanDreamInfo() {
  // @@protoc_insertion_point(destructor:moyuan.CMoyuanDreamInfo)
  SharedDtor();
}

void CMoyuanDreamInfo::SharedDtor() {
}

void CMoyuanDreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoyuanDreamInfo& CMoyuanDreamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoyuanDreamInfo_moyuan_2eproto.base);
  return *internal_default_instance();
}


void CMoyuanDreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.CMoyuanDreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dreamid_ = 0;
  _internal_metadata_.Clear();
}

const char* CMoyuanDreamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dreamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoyuanDreamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.CMoyuanDreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dreamId = 1;
  if (this->dreamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dreamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.CMoyuanDreamInfo)
  return target;
}

size_t CMoyuanDreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.CMoyuanDreamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dreamId = 1;
  if (this->dreamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dreamid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoyuanDreamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.CMoyuanDreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoyuanDreamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoyuanDreamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.CMoyuanDreamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.CMoyuanDreamInfo)
    MergeFrom(*source);
  }
}

void CMoyuanDreamInfo::MergeFrom(const CMoyuanDreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.CMoyuanDreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dreamid() != 0) {
    _internal_set_dreamid(from._internal_dreamid());
  }
}

void CMoyuanDreamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.CMoyuanDreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoyuanDreamInfo::CopyFrom(const CMoyuanDreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.CMoyuanDreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoyuanDreamInfo::IsInitialized() const {
  return true;
}

void CMoyuanDreamInfo::InternalSwap(CMoyuanDreamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dreamid_, other->dreamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoyuanDreamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoyuanDreamInfo::InitAsDefaultInstance() {
  ::moyuan::_SMoyuanDreamInfo_default_instance_._instance.get_mutable()->info_ = const_cast< ::moyuan::BMoyuanDreamInfo*>(
      ::moyuan::BMoyuanDreamInfo::internal_default_instance());
}
class SMoyuanDreamInfo::_Internal {
 public:
  static const ::moyuan::BMoyuanDreamInfo& info(const SMoyuanDreamInfo* msg);
};

const ::moyuan::BMoyuanDreamInfo&
SMoyuanDreamInfo::_Internal::info(const SMoyuanDreamInfo* msg) {
  return *msg->info_;
}
SMoyuanDreamInfo::SMoyuanDreamInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:moyuan.SMoyuanDreamInfo)
}
SMoyuanDreamInfo::SMoyuanDreamInfo(const SMoyuanDreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::moyuan::BMoyuanDreamInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:moyuan.SMoyuanDreamInfo)
}

void SMoyuanDreamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoyuanDreamInfo_moyuan_2eproto.base);
  info_ = nullptr;
}

SMoyuanDreamInfo::~SMoyuanDreamInfo() {
  // @@protoc_insertion_point(destructor:moyuan.SMoyuanDreamInfo)
  SharedDtor();
}

void SMoyuanDreamInfo::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void SMoyuanDreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoyuanDreamInfo& SMoyuanDreamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoyuanDreamInfo_moyuan_2eproto.base);
  return *internal_default_instance();
}


void SMoyuanDreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:moyuan.SMoyuanDreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SMoyuanDreamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .moyuan.BMoyuanDreamInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoyuanDreamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moyuan.SMoyuanDreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .moyuan.BMoyuanDreamInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moyuan.SMoyuanDreamInfo)
  return target;
}

size_t SMoyuanDreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moyuan.SMoyuanDreamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .moyuan.BMoyuanDreamInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoyuanDreamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moyuan.SMoyuanDreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoyuanDreamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoyuanDreamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moyuan.SMoyuanDreamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moyuan.SMoyuanDreamInfo)
    MergeFrom(*source);
  }
}

void SMoyuanDreamInfo::MergeFrom(const SMoyuanDreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moyuan.SMoyuanDreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::moyuan::BMoyuanDreamInfo::MergeFrom(from._internal_info());
  }
}

void SMoyuanDreamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moyuan.SMoyuanDreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoyuanDreamInfo::CopyFrom(const SMoyuanDreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moyuan.SMoyuanDreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoyuanDreamInfo::IsInitialized() const {
  return true;
}

void SMoyuanDreamInfo::InternalSwap(SMoyuanDreamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoyuanDreamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace moyuan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanUsersAvatarInfo* Arena::CreateMaybeMessage< ::moyuan::CMoyuanUsersAvatarInfo >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanUsersAvatarInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanUsersAvatarInfo* Arena::CreateMaybeMessage< ::moyuan::SMoyuanUsersAvatarInfo >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanUsersAvatarInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanUsersAvatarUpdate* Arena::CreateMaybeMessage< ::moyuan::CMoyuanUsersAvatarUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanUsersAvatarUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanUsersAvatarUpdate* Arena::CreateMaybeMessage< ::moyuan::SMoyuanUsersAvatarUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanUsersAvatarUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanUsersProgressInfo* Arena::CreateMaybeMessage< ::moyuan::CMoyuanUsersProgressInfo >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanUsersProgressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanUsersProgressInfo* Arena::CreateMaybeMessage< ::moyuan::SMoyuanUsersProgressInfo >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanUsersProgressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanUsersProgressUpdate* Arena::CreateMaybeMessage< ::moyuan::CMoyuanUsersProgressUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanUsersProgressUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanUsersProgressUpdate* Arena::CreateMaybeMessage< ::moyuan::SMoyuanUsersProgressUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanUsersProgressUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanUsersAvatarList* Arena::CreateMaybeMessage< ::moyuan::CMoyuanUsersAvatarList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanUsersAvatarList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanUsersAvatarList* Arena::CreateMaybeMessage< ::moyuan::SMoyuanUsersAvatarList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanUsersAvatarList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::BMoyuanUsersAvatarList* Arena::CreateMaybeMessage< ::moyuan::BMoyuanUsersAvatarList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::BMoyuanUsersAvatarList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanDreamAdd* Arena::CreateMaybeMessage< ::moyuan::CMoyuanDreamAdd >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanDreamAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanDreamAdd* Arena::CreateMaybeMessage< ::moyuan::SMoyuanDreamAdd >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanDreamAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanDreamRand* Arena::CreateMaybeMessage< ::moyuan::CMoyuanDreamRand >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanDreamRand >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanDreamRand* Arena::CreateMaybeMessage< ::moyuan::SMoyuanDreamRand >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanDreamRand >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanTroveGoodsBackpackList* Arena::CreateMaybeMessage< ::moyuan::CMoyuanTroveGoodsBackpackList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanTroveGoodsBackpackList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanTroveGoodsBackpackList* Arena::CreateMaybeMessage< ::moyuan::SMoyuanTroveGoodsBackpackList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanTroveGoodsBackpackList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::BMoyuanTroveGoodsBackpackList* Arena::CreateMaybeMessage< ::moyuan::BMoyuanTroveGoodsBackpackList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::BMoyuanTroveGoodsBackpackList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanTroveGoodsAdd* Arena::CreateMaybeMessage< ::moyuan::CMoyuanTroveGoodsAdd >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanTroveGoodsAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanTroveGoodsAdd* Arena::CreateMaybeMessage< ::moyuan::SMoyuanTroveGoodsAdd >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanTroveGoodsAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanDreamCommentList* Arena::CreateMaybeMessage< ::moyuan::CMoyuanDreamCommentList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanDreamCommentList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanDreamCommentList* Arena::CreateMaybeMessage< ::moyuan::SMoyuanDreamCommentList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanDreamCommentList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::BMoyuanDreamComment* Arena::CreateMaybeMessage< ::moyuan::BMoyuanDreamComment >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::BMoyuanDreamComment >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanDreamComment* Arena::CreateMaybeMessage< ::moyuan::CMoyuanDreamComment >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanDreamComment >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanDreamComment* Arena::CreateMaybeMessage< ::moyuan::SMoyuanDreamComment >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanDreamComment >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanAnonymousId* Arena::CreateMaybeMessage< ::moyuan::CMoyuanAnonymousId >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanAnonymousId >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanAnonymousId* Arena::CreateMaybeMessage< ::moyuan::SMoyuanAnonymousId >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanAnonymousId >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanDreamCommentNoticeList* Arena::CreateMaybeMessage< ::moyuan::CMoyuanDreamCommentNoticeList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanDreamCommentNoticeList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanDreamCommentNoticeList* Arena::CreateMaybeMessage< ::moyuan::SMoyuanDreamCommentNoticeList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanDreamCommentNoticeList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::BMoyuanDreamCommentNotice* Arena::CreateMaybeMessage< ::moyuan::BMoyuanDreamCommentNotice >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::BMoyuanDreamCommentNotice >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanMineDreamList* Arena::CreateMaybeMessage< ::moyuan::CMoyuanMineDreamList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanMineDreamList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanMineDreamList* Arena::CreateMaybeMessage< ::moyuan::SMoyuanMineDreamList >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanMineDreamList >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::BMoyuanDreamInfo* Arena::CreateMaybeMessage< ::moyuan::BMoyuanDreamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::BMoyuanDreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::CMoyuanDreamInfo* Arena::CreateMaybeMessage< ::moyuan::CMoyuanDreamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::CMoyuanDreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::moyuan::SMoyuanDreamInfo* Arena::CreateMaybeMessage< ::moyuan::SMoyuanDreamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::moyuan::SMoyuanDreamInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
