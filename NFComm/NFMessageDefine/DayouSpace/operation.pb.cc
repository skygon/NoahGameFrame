// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operation.proto

#include "operation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace space {
class COperationSynDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<COperationSyn> _instance;
} _COperationSyn_default_instance_;
class SOperationSynDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SOperationSyn> _instance;
} _SOperationSyn_default_instance_;
class SOperationSynBroadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SOperationSynBroad> _instance;
} _SOperationSynBroad_default_instance_;
}  // namespace space
static void InitDefaultsscc_info_COperationSyn_operation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_COperationSyn_default_instance_;
    new (ptr) ::space::COperationSyn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::COperationSyn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_COperationSyn_operation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_COperationSyn_operation_2eproto}, {}};

static void InitDefaultsscc_info_SOperationSyn_operation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SOperationSyn_default_instance_;
    new (ptr) ::space::SOperationSyn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SOperationSyn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SOperationSyn_operation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SOperationSyn_operation_2eproto}, {}};

static void InitDefaultsscc_info_SOperationSynBroad_operation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SOperationSynBroad_default_instance_;
    new (ptr) ::space::SOperationSynBroad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SOperationSynBroad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SOperationSynBroad_operation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SOperationSynBroad_operation_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_operation_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_operation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_operation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_operation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::COperationSyn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::COperationSyn, operationid_),
  PROTOBUF_FIELD_OFFSET(::space::COperationSyn, operationtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SOperationSyn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SOperationSyn, errorid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SOperationSynBroad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SOperationSynBroad, operationid_),
  PROTOBUF_FIELD_OFFSET(::space::SOperationSynBroad, operationtype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::space::COperationSyn)},
  { 7, -1, sizeof(::space::SOperationSyn)},
  { 13, -1, sizeof(::space::SOperationSynBroad)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_COperationSyn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SOperationSyn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SOperationSynBroad_default_instance_),
};

const char descriptor_table_protodef_operation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017operation.proto\022\005space\";\n\rCOperationSy"
  "n\022\023\n\013operationId\030\001 \001(\005\022\025\n\roperationType\030"
  "\002 \001(\005\" \n\rSOperationSyn\022\017\n\007errorId\030\001 \001(\005\""
  "@\n\022SOperationSynBroad\022\023\n\013operationId\030\001 \001"
  "(\005\022\025\n\roperationType\030\002 \001(\005B%\n\030com.dayou.s"
  "pace.protobufB\tOperationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_operation_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_operation_2eproto_sccs[3] = {
  &scc_info_COperationSyn_operation_2eproto.base,
  &scc_info_SOperationSyn_operation_2eproto.base,
  &scc_info_SOperationSynBroad_operation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_operation_2eproto_once;
static bool descriptor_table_operation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_operation_2eproto = {
  &descriptor_table_operation_2eproto_initialized, descriptor_table_protodef_operation_2eproto, "operation.proto", 232,
  &descriptor_table_operation_2eproto_once, descriptor_table_operation_2eproto_sccs, descriptor_table_operation_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_operation_2eproto::offsets,
  file_level_metadata_operation_2eproto, 3, file_level_enum_descriptors_operation_2eproto, file_level_service_descriptors_operation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_operation_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_operation_2eproto), true);
namespace space {

// ===================================================================

void COperationSyn::InitAsDefaultInstance() {
}
class COperationSyn::_Internal {
 public:
};

COperationSyn::COperationSyn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.COperationSyn)
}
COperationSyn::COperationSyn(const COperationSyn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&operationid_, &from.operationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&operationtype_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(operationtype_));
  // @@protoc_insertion_point(copy_constructor:space.COperationSyn)
}

void COperationSyn::SharedCtor() {
  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operationtype_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(operationtype_));
}

COperationSyn::~COperationSyn() {
  // @@protoc_insertion_point(destructor:space.COperationSyn)
  SharedDtor();
}

void COperationSyn::SharedDtor() {
}

void COperationSyn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COperationSyn& COperationSyn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_COperationSyn_operation_2eproto.base);
  return *internal_default_instance();
}


void COperationSyn::Clear() {
// @@protoc_insertion_point(message_clear_start:space.COperationSyn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operationtype_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(operationtype_));
  _internal_metadata_.Clear();
}

const char* COperationSyn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 operationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operationType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operationtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* COperationSyn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.COperationSyn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operationId = 1;
  if (this->operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_operationid(), target);
  }

  // int32 operationType = 2;
  if (this->operationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_operationtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.COperationSyn)
  return target;
}

size_t COperationSyn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.COperationSyn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 operationId = 1;
  if (this->operationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operationid());
  }

  // int32 operationType = 2;
  if (this->operationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operationtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COperationSyn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.COperationSyn)
  GOOGLE_DCHECK_NE(&from, this);
  const COperationSyn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<COperationSyn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.COperationSyn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.COperationSyn)
    MergeFrom(*source);
  }
}

void COperationSyn::MergeFrom(const COperationSyn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.COperationSyn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  if (from.operationtype() != 0) {
    _internal_set_operationtype(from._internal_operationtype());
  }
}

void COperationSyn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.COperationSyn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COperationSyn::CopyFrom(const COperationSyn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.COperationSyn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COperationSyn::IsInitialized() const {
  return true;
}

void COperationSyn::InternalSwap(COperationSyn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(operationid_, other->operationid_);
  swap(operationtype_, other->operationtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata COperationSyn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SOperationSyn::InitAsDefaultInstance() {
}
class SOperationSyn::_Internal {
 public:
};

SOperationSyn::SOperationSyn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SOperationSyn)
}
SOperationSyn::SOperationSyn(const SOperationSyn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorid_ = from.errorid_;
  // @@protoc_insertion_point(copy_constructor:space.SOperationSyn)
}

void SOperationSyn::SharedCtor() {
  errorid_ = 0;
}

SOperationSyn::~SOperationSyn() {
  // @@protoc_insertion_point(destructor:space.SOperationSyn)
  SharedDtor();
}

void SOperationSyn::SharedDtor() {
}

void SOperationSyn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SOperationSyn& SOperationSyn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SOperationSyn_operation_2eproto.base);
  return *internal_default_instance();
}


void SOperationSyn::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SOperationSyn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorid_ = 0;
  _internal_metadata_.Clear();
}

const char* SOperationSyn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errorId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SOperationSyn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SOperationSyn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorId = 1;
  if (this->errorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SOperationSyn)
  return target;
}

size_t SOperationSyn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SOperationSyn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 errorId = 1;
  if (this->errorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SOperationSyn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SOperationSyn)
  GOOGLE_DCHECK_NE(&from, this);
  const SOperationSyn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SOperationSyn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SOperationSyn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SOperationSyn)
    MergeFrom(*source);
  }
}

void SOperationSyn::MergeFrom(const SOperationSyn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SOperationSyn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errorid() != 0) {
    _internal_set_errorid(from._internal_errorid());
  }
}

void SOperationSyn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SOperationSyn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOperationSyn::CopyFrom(const SOperationSyn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SOperationSyn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOperationSyn::IsInitialized() const {
  return true;
}

void SOperationSyn::InternalSwap(SOperationSyn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(errorid_, other->errorid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SOperationSyn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SOperationSynBroad::InitAsDefaultInstance() {
}
class SOperationSynBroad::_Internal {
 public:
};

SOperationSynBroad::SOperationSynBroad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SOperationSynBroad)
}
SOperationSynBroad::SOperationSynBroad(const SOperationSynBroad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&operationid_, &from.operationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&operationtype_) -
    reinterpret_cast<char*>(&operationid_)) + sizeof(operationtype_));
  // @@protoc_insertion_point(copy_constructor:space.SOperationSynBroad)
}

void SOperationSynBroad::SharedCtor() {
  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operationtype_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(operationtype_));
}

SOperationSynBroad::~SOperationSynBroad() {
  // @@protoc_insertion_point(destructor:space.SOperationSynBroad)
  SharedDtor();
}

void SOperationSynBroad::SharedDtor() {
}

void SOperationSynBroad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SOperationSynBroad& SOperationSynBroad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SOperationSynBroad_operation_2eproto.base);
  return *internal_default_instance();
}


void SOperationSynBroad::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SOperationSynBroad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&operationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operationtype_) -
      reinterpret_cast<char*>(&operationid_)) + sizeof(operationtype_));
  _internal_metadata_.Clear();
}

const char* SOperationSynBroad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 operationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          operationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operationType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operationtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SOperationSynBroad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SOperationSynBroad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operationId = 1;
  if (this->operationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_operationid(), target);
  }

  // int32 operationType = 2;
  if (this->operationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_operationtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SOperationSynBroad)
  return target;
}

size_t SOperationSynBroad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SOperationSynBroad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 operationId = 1;
  if (this->operationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operationid());
  }

  // int32 operationType = 2;
  if (this->operationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operationtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SOperationSynBroad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SOperationSynBroad)
  GOOGLE_DCHECK_NE(&from, this);
  const SOperationSynBroad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SOperationSynBroad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SOperationSynBroad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SOperationSynBroad)
    MergeFrom(*source);
  }
}

void SOperationSynBroad::MergeFrom(const SOperationSynBroad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SOperationSynBroad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operationid() != 0) {
    _internal_set_operationid(from._internal_operationid());
  }
  if (from.operationtype() != 0) {
    _internal_set_operationtype(from._internal_operationtype());
  }
}

void SOperationSynBroad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SOperationSynBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOperationSynBroad::CopyFrom(const SOperationSynBroad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SOperationSynBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOperationSynBroad::IsInitialized() const {
  return true;
}

void SOperationSynBroad::InternalSwap(SOperationSynBroad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(operationid_, other->operationid_);
  swap(operationtype_, other->operationtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SOperationSynBroad::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace space
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::space::COperationSyn* Arena::CreateMaybeMessage< ::space::COperationSyn >(Arena* arena) {
  return Arena::CreateInternal< ::space::COperationSyn >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SOperationSyn* Arena::CreateMaybeMessage< ::space::SOperationSyn >(Arena* arena) {
  return Arena::CreateInternal< ::space::SOperationSyn >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SOperationSynBroad* Arena::CreateMaybeMessage< ::space::SOperationSynBroad >(Arena* arena) {
  return Arena::CreateInternal< ::space::SOperationSynBroad >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
