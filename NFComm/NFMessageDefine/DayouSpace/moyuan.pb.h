// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moyuan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_moyuan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_moyuan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_moyuan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_moyuan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_moyuan_2eproto;
namespace moyuan {
class BMoyuanDreamComment;
class BMoyuanDreamCommentDefaultTypeInternal;
extern BMoyuanDreamCommentDefaultTypeInternal _BMoyuanDreamComment_default_instance_;
class BMoyuanDreamCommentNotice;
class BMoyuanDreamCommentNoticeDefaultTypeInternal;
extern BMoyuanDreamCommentNoticeDefaultTypeInternal _BMoyuanDreamCommentNotice_default_instance_;
class BMoyuanDreamInfo;
class BMoyuanDreamInfoDefaultTypeInternal;
extern BMoyuanDreamInfoDefaultTypeInternal _BMoyuanDreamInfo_default_instance_;
class BMoyuanTroveGoodsBackpackList;
class BMoyuanTroveGoodsBackpackListDefaultTypeInternal;
extern BMoyuanTroveGoodsBackpackListDefaultTypeInternal _BMoyuanTroveGoodsBackpackList_default_instance_;
class BMoyuanUsersAvatarList;
class BMoyuanUsersAvatarListDefaultTypeInternal;
extern BMoyuanUsersAvatarListDefaultTypeInternal _BMoyuanUsersAvatarList_default_instance_;
class CMoyuanAnonymousId;
class CMoyuanAnonymousIdDefaultTypeInternal;
extern CMoyuanAnonymousIdDefaultTypeInternal _CMoyuanAnonymousId_default_instance_;
class CMoyuanDreamAdd;
class CMoyuanDreamAddDefaultTypeInternal;
extern CMoyuanDreamAddDefaultTypeInternal _CMoyuanDreamAdd_default_instance_;
class CMoyuanDreamComment;
class CMoyuanDreamCommentDefaultTypeInternal;
extern CMoyuanDreamCommentDefaultTypeInternal _CMoyuanDreamComment_default_instance_;
class CMoyuanDreamCommentList;
class CMoyuanDreamCommentListDefaultTypeInternal;
extern CMoyuanDreamCommentListDefaultTypeInternal _CMoyuanDreamCommentList_default_instance_;
class CMoyuanDreamCommentNoticeList;
class CMoyuanDreamCommentNoticeListDefaultTypeInternal;
extern CMoyuanDreamCommentNoticeListDefaultTypeInternal _CMoyuanDreamCommentNoticeList_default_instance_;
class CMoyuanDreamInfo;
class CMoyuanDreamInfoDefaultTypeInternal;
extern CMoyuanDreamInfoDefaultTypeInternal _CMoyuanDreamInfo_default_instance_;
class CMoyuanDreamRand;
class CMoyuanDreamRandDefaultTypeInternal;
extern CMoyuanDreamRandDefaultTypeInternal _CMoyuanDreamRand_default_instance_;
class CMoyuanMineDreamList;
class CMoyuanMineDreamListDefaultTypeInternal;
extern CMoyuanMineDreamListDefaultTypeInternal _CMoyuanMineDreamList_default_instance_;
class CMoyuanTroveGoodsAdd;
class CMoyuanTroveGoodsAddDefaultTypeInternal;
extern CMoyuanTroveGoodsAddDefaultTypeInternal _CMoyuanTroveGoodsAdd_default_instance_;
class CMoyuanTroveGoodsBackpackList;
class CMoyuanTroveGoodsBackpackListDefaultTypeInternal;
extern CMoyuanTroveGoodsBackpackListDefaultTypeInternal _CMoyuanTroveGoodsBackpackList_default_instance_;
class CMoyuanUsersAvatarInfo;
class CMoyuanUsersAvatarInfoDefaultTypeInternal;
extern CMoyuanUsersAvatarInfoDefaultTypeInternal _CMoyuanUsersAvatarInfo_default_instance_;
class CMoyuanUsersAvatarList;
class CMoyuanUsersAvatarListDefaultTypeInternal;
extern CMoyuanUsersAvatarListDefaultTypeInternal _CMoyuanUsersAvatarList_default_instance_;
class CMoyuanUsersAvatarUpdate;
class CMoyuanUsersAvatarUpdateDefaultTypeInternal;
extern CMoyuanUsersAvatarUpdateDefaultTypeInternal _CMoyuanUsersAvatarUpdate_default_instance_;
class CMoyuanUsersProgressInfo;
class CMoyuanUsersProgressInfoDefaultTypeInternal;
extern CMoyuanUsersProgressInfoDefaultTypeInternal _CMoyuanUsersProgressInfo_default_instance_;
class CMoyuanUsersProgressUpdate;
class CMoyuanUsersProgressUpdateDefaultTypeInternal;
extern CMoyuanUsersProgressUpdateDefaultTypeInternal _CMoyuanUsersProgressUpdate_default_instance_;
class SMoyuanAnonymousId;
class SMoyuanAnonymousIdDefaultTypeInternal;
extern SMoyuanAnonymousIdDefaultTypeInternal _SMoyuanAnonymousId_default_instance_;
class SMoyuanDreamAdd;
class SMoyuanDreamAddDefaultTypeInternal;
extern SMoyuanDreamAddDefaultTypeInternal _SMoyuanDreamAdd_default_instance_;
class SMoyuanDreamComment;
class SMoyuanDreamCommentDefaultTypeInternal;
extern SMoyuanDreamCommentDefaultTypeInternal _SMoyuanDreamComment_default_instance_;
class SMoyuanDreamCommentList;
class SMoyuanDreamCommentListDefaultTypeInternal;
extern SMoyuanDreamCommentListDefaultTypeInternal _SMoyuanDreamCommentList_default_instance_;
class SMoyuanDreamCommentNoticeList;
class SMoyuanDreamCommentNoticeListDefaultTypeInternal;
extern SMoyuanDreamCommentNoticeListDefaultTypeInternal _SMoyuanDreamCommentNoticeList_default_instance_;
class SMoyuanDreamInfo;
class SMoyuanDreamInfoDefaultTypeInternal;
extern SMoyuanDreamInfoDefaultTypeInternal _SMoyuanDreamInfo_default_instance_;
class SMoyuanDreamRand;
class SMoyuanDreamRandDefaultTypeInternal;
extern SMoyuanDreamRandDefaultTypeInternal _SMoyuanDreamRand_default_instance_;
class SMoyuanMineDreamList;
class SMoyuanMineDreamListDefaultTypeInternal;
extern SMoyuanMineDreamListDefaultTypeInternal _SMoyuanMineDreamList_default_instance_;
class SMoyuanTroveGoodsAdd;
class SMoyuanTroveGoodsAddDefaultTypeInternal;
extern SMoyuanTroveGoodsAddDefaultTypeInternal _SMoyuanTroveGoodsAdd_default_instance_;
class SMoyuanTroveGoodsBackpackList;
class SMoyuanTroveGoodsBackpackListDefaultTypeInternal;
extern SMoyuanTroveGoodsBackpackListDefaultTypeInternal _SMoyuanTroveGoodsBackpackList_default_instance_;
class SMoyuanUsersAvatarInfo;
class SMoyuanUsersAvatarInfoDefaultTypeInternal;
extern SMoyuanUsersAvatarInfoDefaultTypeInternal _SMoyuanUsersAvatarInfo_default_instance_;
class SMoyuanUsersAvatarList;
class SMoyuanUsersAvatarListDefaultTypeInternal;
extern SMoyuanUsersAvatarListDefaultTypeInternal _SMoyuanUsersAvatarList_default_instance_;
class SMoyuanUsersAvatarUpdate;
class SMoyuanUsersAvatarUpdateDefaultTypeInternal;
extern SMoyuanUsersAvatarUpdateDefaultTypeInternal _SMoyuanUsersAvatarUpdate_default_instance_;
class SMoyuanUsersProgressInfo;
class SMoyuanUsersProgressInfoDefaultTypeInternal;
extern SMoyuanUsersProgressInfoDefaultTypeInternal _SMoyuanUsersProgressInfo_default_instance_;
class SMoyuanUsersProgressUpdate;
class SMoyuanUsersProgressUpdateDefaultTypeInternal;
extern SMoyuanUsersProgressUpdateDefaultTypeInternal _SMoyuanUsersProgressUpdate_default_instance_;
}  // namespace moyuan
PROTOBUF_NAMESPACE_OPEN
template<> ::moyuan::BMoyuanDreamComment* Arena::CreateMaybeMessage<::moyuan::BMoyuanDreamComment>(Arena*);
template<> ::moyuan::BMoyuanDreamCommentNotice* Arena::CreateMaybeMessage<::moyuan::BMoyuanDreamCommentNotice>(Arena*);
template<> ::moyuan::BMoyuanDreamInfo* Arena::CreateMaybeMessage<::moyuan::BMoyuanDreamInfo>(Arena*);
template<> ::moyuan::BMoyuanTroveGoodsBackpackList* Arena::CreateMaybeMessage<::moyuan::BMoyuanTroveGoodsBackpackList>(Arena*);
template<> ::moyuan::BMoyuanUsersAvatarList* Arena::CreateMaybeMessage<::moyuan::BMoyuanUsersAvatarList>(Arena*);
template<> ::moyuan::CMoyuanAnonymousId* Arena::CreateMaybeMessage<::moyuan::CMoyuanAnonymousId>(Arena*);
template<> ::moyuan::CMoyuanDreamAdd* Arena::CreateMaybeMessage<::moyuan::CMoyuanDreamAdd>(Arena*);
template<> ::moyuan::CMoyuanDreamComment* Arena::CreateMaybeMessage<::moyuan::CMoyuanDreamComment>(Arena*);
template<> ::moyuan::CMoyuanDreamCommentList* Arena::CreateMaybeMessage<::moyuan::CMoyuanDreamCommentList>(Arena*);
template<> ::moyuan::CMoyuanDreamCommentNoticeList* Arena::CreateMaybeMessage<::moyuan::CMoyuanDreamCommentNoticeList>(Arena*);
template<> ::moyuan::CMoyuanDreamInfo* Arena::CreateMaybeMessage<::moyuan::CMoyuanDreamInfo>(Arena*);
template<> ::moyuan::CMoyuanDreamRand* Arena::CreateMaybeMessage<::moyuan::CMoyuanDreamRand>(Arena*);
template<> ::moyuan::CMoyuanMineDreamList* Arena::CreateMaybeMessage<::moyuan::CMoyuanMineDreamList>(Arena*);
template<> ::moyuan::CMoyuanTroveGoodsAdd* Arena::CreateMaybeMessage<::moyuan::CMoyuanTroveGoodsAdd>(Arena*);
template<> ::moyuan::CMoyuanTroveGoodsBackpackList* Arena::CreateMaybeMessage<::moyuan::CMoyuanTroveGoodsBackpackList>(Arena*);
template<> ::moyuan::CMoyuanUsersAvatarInfo* Arena::CreateMaybeMessage<::moyuan::CMoyuanUsersAvatarInfo>(Arena*);
template<> ::moyuan::CMoyuanUsersAvatarList* Arena::CreateMaybeMessage<::moyuan::CMoyuanUsersAvatarList>(Arena*);
template<> ::moyuan::CMoyuanUsersAvatarUpdate* Arena::CreateMaybeMessage<::moyuan::CMoyuanUsersAvatarUpdate>(Arena*);
template<> ::moyuan::CMoyuanUsersProgressInfo* Arena::CreateMaybeMessage<::moyuan::CMoyuanUsersProgressInfo>(Arena*);
template<> ::moyuan::CMoyuanUsersProgressUpdate* Arena::CreateMaybeMessage<::moyuan::CMoyuanUsersProgressUpdate>(Arena*);
template<> ::moyuan::SMoyuanAnonymousId* Arena::CreateMaybeMessage<::moyuan::SMoyuanAnonymousId>(Arena*);
template<> ::moyuan::SMoyuanDreamAdd* Arena::CreateMaybeMessage<::moyuan::SMoyuanDreamAdd>(Arena*);
template<> ::moyuan::SMoyuanDreamComment* Arena::CreateMaybeMessage<::moyuan::SMoyuanDreamComment>(Arena*);
template<> ::moyuan::SMoyuanDreamCommentList* Arena::CreateMaybeMessage<::moyuan::SMoyuanDreamCommentList>(Arena*);
template<> ::moyuan::SMoyuanDreamCommentNoticeList* Arena::CreateMaybeMessage<::moyuan::SMoyuanDreamCommentNoticeList>(Arena*);
template<> ::moyuan::SMoyuanDreamInfo* Arena::CreateMaybeMessage<::moyuan::SMoyuanDreamInfo>(Arena*);
template<> ::moyuan::SMoyuanDreamRand* Arena::CreateMaybeMessage<::moyuan::SMoyuanDreamRand>(Arena*);
template<> ::moyuan::SMoyuanMineDreamList* Arena::CreateMaybeMessage<::moyuan::SMoyuanMineDreamList>(Arena*);
template<> ::moyuan::SMoyuanTroveGoodsAdd* Arena::CreateMaybeMessage<::moyuan::SMoyuanTroveGoodsAdd>(Arena*);
template<> ::moyuan::SMoyuanTroveGoodsBackpackList* Arena::CreateMaybeMessage<::moyuan::SMoyuanTroveGoodsBackpackList>(Arena*);
template<> ::moyuan::SMoyuanUsersAvatarInfo* Arena::CreateMaybeMessage<::moyuan::SMoyuanUsersAvatarInfo>(Arena*);
template<> ::moyuan::SMoyuanUsersAvatarList* Arena::CreateMaybeMessage<::moyuan::SMoyuanUsersAvatarList>(Arena*);
template<> ::moyuan::SMoyuanUsersAvatarUpdate* Arena::CreateMaybeMessage<::moyuan::SMoyuanUsersAvatarUpdate>(Arena*);
template<> ::moyuan::SMoyuanUsersProgressInfo* Arena::CreateMaybeMessage<::moyuan::SMoyuanUsersProgressInfo>(Arena*);
template<> ::moyuan::SMoyuanUsersProgressUpdate* Arena::CreateMaybeMessage<::moyuan::SMoyuanUsersProgressUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace moyuan {

// ===================================================================

class CMoyuanUsersAvatarInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanUsersAvatarInfo) */ {
 public:
  CMoyuanUsersAvatarInfo();
  virtual ~CMoyuanUsersAvatarInfo();

  CMoyuanUsersAvatarInfo(const CMoyuanUsersAvatarInfo& from);
  CMoyuanUsersAvatarInfo(CMoyuanUsersAvatarInfo&& from) noexcept
    : CMoyuanUsersAvatarInfo() {
    *this = ::std::move(from);
  }

  inline CMoyuanUsersAvatarInfo& operator=(const CMoyuanUsersAvatarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanUsersAvatarInfo& operator=(CMoyuanUsersAvatarInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanUsersAvatarInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanUsersAvatarInfo* internal_default_instance() {
    return reinterpret_cast<const CMoyuanUsersAvatarInfo*>(
               &_CMoyuanUsersAvatarInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMoyuanUsersAvatarInfo& a, CMoyuanUsersAvatarInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanUsersAvatarInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanUsersAvatarInfo* New() const final {
    return CreateMaybeMessage<CMoyuanUsersAvatarInfo>(nullptr);
  }

  CMoyuanUsersAvatarInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanUsersAvatarInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanUsersAvatarInfo& from);
  void MergeFrom(const CMoyuanUsersAvatarInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanUsersAvatarInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanUsersAvatarInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanUsersAvatarInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanUsersAvatarInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanUsersAvatarInfo) */ {
 public:
  SMoyuanUsersAvatarInfo();
  virtual ~SMoyuanUsersAvatarInfo();

  SMoyuanUsersAvatarInfo(const SMoyuanUsersAvatarInfo& from);
  SMoyuanUsersAvatarInfo(SMoyuanUsersAvatarInfo&& from) noexcept
    : SMoyuanUsersAvatarInfo() {
    *this = ::std::move(from);
  }

  inline SMoyuanUsersAvatarInfo& operator=(const SMoyuanUsersAvatarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanUsersAvatarInfo& operator=(SMoyuanUsersAvatarInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanUsersAvatarInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanUsersAvatarInfo* internal_default_instance() {
    return reinterpret_cast<const SMoyuanUsersAvatarInfo*>(
               &_SMoyuanUsersAvatarInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SMoyuanUsersAvatarInfo& a, SMoyuanUsersAvatarInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanUsersAvatarInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanUsersAvatarInfo* New() const final {
    return CreateMaybeMessage<SMoyuanUsersAvatarInfo>(nullptr);
  }

  SMoyuanUsersAvatarInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanUsersAvatarInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanUsersAvatarInfo& from);
  void MergeFrom(const SMoyuanUsersAvatarInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanUsersAvatarInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanUsersAvatarInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarKeyFieldNumber = 1,
  };
  // int32 avatarKey = 1;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanUsersAvatarInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanUsersAvatarUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanUsersAvatarUpdate) */ {
 public:
  CMoyuanUsersAvatarUpdate();
  virtual ~CMoyuanUsersAvatarUpdate();

  CMoyuanUsersAvatarUpdate(const CMoyuanUsersAvatarUpdate& from);
  CMoyuanUsersAvatarUpdate(CMoyuanUsersAvatarUpdate&& from) noexcept
    : CMoyuanUsersAvatarUpdate() {
    *this = ::std::move(from);
  }

  inline CMoyuanUsersAvatarUpdate& operator=(const CMoyuanUsersAvatarUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanUsersAvatarUpdate& operator=(CMoyuanUsersAvatarUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanUsersAvatarUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanUsersAvatarUpdate* internal_default_instance() {
    return reinterpret_cast<const CMoyuanUsersAvatarUpdate*>(
               &_CMoyuanUsersAvatarUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMoyuanUsersAvatarUpdate& a, CMoyuanUsersAvatarUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanUsersAvatarUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanUsersAvatarUpdate* New() const final {
    return CreateMaybeMessage<CMoyuanUsersAvatarUpdate>(nullptr);
  }

  CMoyuanUsersAvatarUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanUsersAvatarUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanUsersAvatarUpdate& from);
  void MergeFrom(const CMoyuanUsersAvatarUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanUsersAvatarUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanUsersAvatarUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarKeyFieldNumber = 1,
  };
  // int32 avatarKey = 1;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanUsersAvatarUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanUsersAvatarUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanUsersAvatarUpdate) */ {
 public:
  SMoyuanUsersAvatarUpdate();
  virtual ~SMoyuanUsersAvatarUpdate();

  SMoyuanUsersAvatarUpdate(const SMoyuanUsersAvatarUpdate& from);
  SMoyuanUsersAvatarUpdate(SMoyuanUsersAvatarUpdate&& from) noexcept
    : SMoyuanUsersAvatarUpdate() {
    *this = ::std::move(from);
  }

  inline SMoyuanUsersAvatarUpdate& operator=(const SMoyuanUsersAvatarUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanUsersAvatarUpdate& operator=(SMoyuanUsersAvatarUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanUsersAvatarUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanUsersAvatarUpdate* internal_default_instance() {
    return reinterpret_cast<const SMoyuanUsersAvatarUpdate*>(
               &_SMoyuanUsersAvatarUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SMoyuanUsersAvatarUpdate& a, SMoyuanUsersAvatarUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanUsersAvatarUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanUsersAvatarUpdate* New() const final {
    return CreateMaybeMessage<SMoyuanUsersAvatarUpdate>(nullptr);
  }

  SMoyuanUsersAvatarUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanUsersAvatarUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanUsersAvatarUpdate& from);
  void MergeFrom(const SMoyuanUsersAvatarUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanUsersAvatarUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanUsersAvatarUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kUidFieldNumber = 2,
    kAvatarKeyFieldNumber = 3,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarKey = 3;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanUsersAvatarUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanUsersProgressInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanUsersProgressInfo) */ {
 public:
  CMoyuanUsersProgressInfo();
  virtual ~CMoyuanUsersProgressInfo();

  CMoyuanUsersProgressInfo(const CMoyuanUsersProgressInfo& from);
  CMoyuanUsersProgressInfo(CMoyuanUsersProgressInfo&& from) noexcept
    : CMoyuanUsersProgressInfo() {
    *this = ::std::move(from);
  }

  inline CMoyuanUsersProgressInfo& operator=(const CMoyuanUsersProgressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanUsersProgressInfo& operator=(CMoyuanUsersProgressInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanUsersProgressInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanUsersProgressInfo* internal_default_instance() {
    return reinterpret_cast<const CMoyuanUsersProgressInfo*>(
               &_CMoyuanUsersProgressInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMoyuanUsersProgressInfo& a, CMoyuanUsersProgressInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanUsersProgressInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanUsersProgressInfo* New() const final {
    return CreateMaybeMessage<CMoyuanUsersProgressInfo>(nullptr);
  }

  CMoyuanUsersProgressInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanUsersProgressInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanUsersProgressInfo& from);
  void MergeFrom(const CMoyuanUsersProgressInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanUsersProgressInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanUsersProgressInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanUsersProgressInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanUsersProgressInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanUsersProgressInfo) */ {
 public:
  SMoyuanUsersProgressInfo();
  virtual ~SMoyuanUsersProgressInfo();

  SMoyuanUsersProgressInfo(const SMoyuanUsersProgressInfo& from);
  SMoyuanUsersProgressInfo(SMoyuanUsersProgressInfo&& from) noexcept
    : SMoyuanUsersProgressInfo() {
    *this = ::std::move(from);
  }

  inline SMoyuanUsersProgressInfo& operator=(const SMoyuanUsersProgressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanUsersProgressInfo& operator=(SMoyuanUsersProgressInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanUsersProgressInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanUsersProgressInfo* internal_default_instance() {
    return reinterpret_cast<const SMoyuanUsersProgressInfo*>(
               &_SMoyuanUsersProgressInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SMoyuanUsersProgressInfo& a, SMoyuanUsersProgressInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanUsersProgressInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanUsersProgressInfo* New() const final {
    return CreateMaybeMessage<SMoyuanUsersProgressInfo>(nullptr);
  }

  SMoyuanUsersProgressInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanUsersProgressInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanUsersProgressInfo& from);
  void MergeFrom(const SMoyuanUsersProgressInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanUsersProgressInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanUsersProgressInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcFieldNumber = 3,
    kTipsFieldNumber = 8,
    kPositionFieldNumber = 7,
    kLayerFieldNumber = 1,
    kSceneFieldNumber = 2,
    kTopicFieldNumber = 4,
    kServeTimestampFieldNumber = 5,
    kTopicTypeFieldNumber = 6,
  };
  // repeated int32 npc = 3;
  int npc_size() const;
  private:
  int _internal_npc_size() const;
  public:
  void clear_npc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_npc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_npc() const;
  void _internal_add_npc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_npc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 npc(int index) const;
  void set_npc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_npc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      npc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_npc();

  // string tips = 8;
  void clear_tips();
  const std::string& tips() const;
  void set_tips(const std::string& value);
  void set_tips(std::string&& value);
  void set_tips(const char* value);
  void set_tips(const char* value, size_t size);
  std::string* mutable_tips();
  std::string* release_tips();
  void set_allocated_tips(std::string* tips);
  private:
  const std::string& _internal_tips() const;
  void _internal_set_tips(const std::string& value);
  std::string* _internal_mutable_tips();
  public:

  // .vector.PVector3 position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // int32 layer = 1;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer() const;
  void _internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scene = 2;
  void clear_scene();
  ::PROTOBUF_NAMESPACE_ID::int32 scene() const;
  void set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene() const;
  void _internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 topic = 4;
  void clear_topic();
  ::PROTOBUF_NAMESPACE_ID::int32 topic() const;
  void set_topic(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_topic() const;
  void _internal_set_topic(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 serveTimestamp = 5;
  void clear_servetimestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 servetimestamp() const;
  void set_servetimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servetimestamp() const;
  void _internal_set_servetimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 topicType = 6;
  void clear_topictype();
  ::PROTOBUF_NAMESPACE_ID::int32 topictype() const;
  void set_topictype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_topictype() const;
  void _internal_set_topictype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanUsersProgressInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > npc_;
  mutable std::atomic<int> _npc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tips_;
  ::vector::PVector3* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_;
  ::PROTOBUF_NAMESPACE_ID::int32 topic_;
  ::PROTOBUF_NAMESPACE_ID::int32 servetimestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 topictype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanUsersProgressUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanUsersProgressUpdate) */ {
 public:
  CMoyuanUsersProgressUpdate();
  virtual ~CMoyuanUsersProgressUpdate();

  CMoyuanUsersProgressUpdate(const CMoyuanUsersProgressUpdate& from);
  CMoyuanUsersProgressUpdate(CMoyuanUsersProgressUpdate&& from) noexcept
    : CMoyuanUsersProgressUpdate() {
    *this = ::std::move(from);
  }

  inline CMoyuanUsersProgressUpdate& operator=(const CMoyuanUsersProgressUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanUsersProgressUpdate& operator=(CMoyuanUsersProgressUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanUsersProgressUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanUsersProgressUpdate* internal_default_instance() {
    return reinterpret_cast<const CMoyuanUsersProgressUpdate*>(
               &_CMoyuanUsersProgressUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMoyuanUsersProgressUpdate& a, CMoyuanUsersProgressUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanUsersProgressUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanUsersProgressUpdate* New() const final {
    return CreateMaybeMessage<CMoyuanUsersProgressUpdate>(nullptr);
  }

  CMoyuanUsersProgressUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanUsersProgressUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanUsersProgressUpdate& from);
  void MergeFrom(const CMoyuanUsersProgressUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanUsersProgressUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanUsersProgressUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcFieldNumber = 3,
    kPositionFieldNumber = 6,
    kLayerFieldNumber = 1,
    kSceneFieldNumber = 2,
    kTopicFieldNumber = 4,
    kTopicTypeFieldNumber = 5,
  };
  // repeated int32 npc = 3;
  int npc_size() const;
  private:
  int _internal_npc_size() const;
  public:
  void clear_npc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_npc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_npc() const;
  void _internal_add_npc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_npc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 npc(int index) const;
  void set_npc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_npc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      npc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_npc();

  // .vector.PVector3 position = 6;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // int32 layer = 1;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer() const;
  void _internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scene = 2;
  void clear_scene();
  ::PROTOBUF_NAMESPACE_ID::int32 scene() const;
  void set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene() const;
  void _internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 topic = 4;
  void clear_topic();
  ::PROTOBUF_NAMESPACE_ID::int32 topic() const;
  void set_topic(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_topic() const;
  void _internal_set_topic(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 topicType = 5;
  void clear_topictype();
  ::PROTOBUF_NAMESPACE_ID::int32 topictype() const;
  void set_topictype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_topictype() const;
  void _internal_set_topictype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanUsersProgressUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > npc_;
  mutable std::atomic<int> _npc_cached_byte_size_;
  ::vector::PVector3* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_;
  ::PROTOBUF_NAMESPACE_ID::int32 topic_;
  ::PROTOBUF_NAMESPACE_ID::int32 topictype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanUsersProgressUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanUsersProgressUpdate) */ {
 public:
  SMoyuanUsersProgressUpdate();
  virtual ~SMoyuanUsersProgressUpdate();

  SMoyuanUsersProgressUpdate(const SMoyuanUsersProgressUpdate& from);
  SMoyuanUsersProgressUpdate(SMoyuanUsersProgressUpdate&& from) noexcept
    : SMoyuanUsersProgressUpdate() {
    *this = ::std::move(from);
  }

  inline SMoyuanUsersProgressUpdate& operator=(const SMoyuanUsersProgressUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanUsersProgressUpdate& operator=(SMoyuanUsersProgressUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanUsersProgressUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanUsersProgressUpdate* internal_default_instance() {
    return reinterpret_cast<const SMoyuanUsersProgressUpdate*>(
               &_SMoyuanUsersProgressUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SMoyuanUsersProgressUpdate& a, SMoyuanUsersProgressUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanUsersProgressUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanUsersProgressUpdate* New() const final {
    return CreateMaybeMessage<SMoyuanUsersProgressUpdate>(nullptr);
  }

  SMoyuanUsersProgressUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanUsersProgressUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanUsersProgressUpdate& from);
  void MergeFrom(const SMoyuanUsersProgressUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanUsersProgressUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanUsersProgressUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanUsersProgressUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanUsersAvatarList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanUsersAvatarList) */ {
 public:
  CMoyuanUsersAvatarList();
  virtual ~CMoyuanUsersAvatarList();

  CMoyuanUsersAvatarList(const CMoyuanUsersAvatarList& from);
  CMoyuanUsersAvatarList(CMoyuanUsersAvatarList&& from) noexcept
    : CMoyuanUsersAvatarList() {
    *this = ::std::move(from);
  }

  inline CMoyuanUsersAvatarList& operator=(const CMoyuanUsersAvatarList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanUsersAvatarList& operator=(CMoyuanUsersAvatarList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanUsersAvatarList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanUsersAvatarList* internal_default_instance() {
    return reinterpret_cast<const CMoyuanUsersAvatarList*>(
               &_CMoyuanUsersAvatarList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMoyuanUsersAvatarList& a, CMoyuanUsersAvatarList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanUsersAvatarList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanUsersAvatarList* New() const final {
    return CreateMaybeMessage<CMoyuanUsersAvatarList>(nullptr);
  }

  CMoyuanUsersAvatarList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanUsersAvatarList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanUsersAvatarList& from);
  void MergeFrom(const CMoyuanUsersAvatarList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanUsersAvatarList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanUsersAvatarList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 1,
  };
  // repeated int32 uids = 1;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uids() const;
  void _internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uids(int index) const;
  void set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanUsersAvatarList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanUsersAvatarList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanUsersAvatarList) */ {
 public:
  SMoyuanUsersAvatarList();
  virtual ~SMoyuanUsersAvatarList();

  SMoyuanUsersAvatarList(const SMoyuanUsersAvatarList& from);
  SMoyuanUsersAvatarList(SMoyuanUsersAvatarList&& from) noexcept
    : SMoyuanUsersAvatarList() {
    *this = ::std::move(from);
  }

  inline SMoyuanUsersAvatarList& operator=(const SMoyuanUsersAvatarList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanUsersAvatarList& operator=(SMoyuanUsersAvatarList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanUsersAvatarList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanUsersAvatarList* internal_default_instance() {
    return reinterpret_cast<const SMoyuanUsersAvatarList*>(
               &_SMoyuanUsersAvatarList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SMoyuanUsersAvatarList& a, SMoyuanUsersAvatarList& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanUsersAvatarList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanUsersAvatarList* New() const final {
    return CreateMaybeMessage<SMoyuanUsersAvatarList>(nullptr);
  }

  SMoyuanUsersAvatarList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanUsersAvatarList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanUsersAvatarList& from);
  void MergeFrom(const SMoyuanUsersAvatarList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanUsersAvatarList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanUsersAvatarList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarListFieldNumber = 1,
  };
  // repeated .moyuan.BMoyuanUsersAvatarList avatarList = 1;
  int avatarlist_size() const;
  private:
  int _internal_avatarlist_size() const;
  public:
  void clear_avatarlist();
  ::moyuan::BMoyuanUsersAvatarList* mutable_avatarlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanUsersAvatarList >*
      mutable_avatarlist();
  private:
  const ::moyuan::BMoyuanUsersAvatarList& _internal_avatarlist(int index) const;
  ::moyuan::BMoyuanUsersAvatarList* _internal_add_avatarlist();
  public:
  const ::moyuan::BMoyuanUsersAvatarList& avatarlist(int index) const;
  ::moyuan::BMoyuanUsersAvatarList* add_avatarlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanUsersAvatarList >&
      avatarlist() const;

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanUsersAvatarList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanUsersAvatarList > avatarlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class BMoyuanUsersAvatarList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.BMoyuanUsersAvatarList) */ {
 public:
  BMoyuanUsersAvatarList();
  virtual ~BMoyuanUsersAvatarList();

  BMoyuanUsersAvatarList(const BMoyuanUsersAvatarList& from);
  BMoyuanUsersAvatarList(BMoyuanUsersAvatarList&& from) noexcept
    : BMoyuanUsersAvatarList() {
    *this = ::std::move(from);
  }

  inline BMoyuanUsersAvatarList& operator=(const BMoyuanUsersAvatarList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMoyuanUsersAvatarList& operator=(BMoyuanUsersAvatarList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMoyuanUsersAvatarList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMoyuanUsersAvatarList* internal_default_instance() {
    return reinterpret_cast<const BMoyuanUsersAvatarList*>(
               &_BMoyuanUsersAvatarList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BMoyuanUsersAvatarList& a, BMoyuanUsersAvatarList& b) {
    a.Swap(&b);
  }
  inline void Swap(BMoyuanUsersAvatarList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMoyuanUsersAvatarList* New() const final {
    return CreateMaybeMessage<BMoyuanUsersAvatarList>(nullptr);
  }

  BMoyuanUsersAvatarList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMoyuanUsersAvatarList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMoyuanUsersAvatarList& from);
  void MergeFrom(const BMoyuanUsersAvatarList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMoyuanUsersAvatarList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.BMoyuanUsersAvatarList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kAvatarKeyFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarKey = 2;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.BMoyuanUsersAvatarList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanDreamAdd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanDreamAdd) */ {
 public:
  CMoyuanDreamAdd();
  virtual ~CMoyuanDreamAdd();

  CMoyuanDreamAdd(const CMoyuanDreamAdd& from);
  CMoyuanDreamAdd(CMoyuanDreamAdd&& from) noexcept
    : CMoyuanDreamAdd() {
    *this = ::std::move(from);
  }

  inline CMoyuanDreamAdd& operator=(const CMoyuanDreamAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanDreamAdd& operator=(CMoyuanDreamAdd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanDreamAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanDreamAdd* internal_default_instance() {
    return reinterpret_cast<const CMoyuanDreamAdd*>(
               &_CMoyuanDreamAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMoyuanDreamAdd& a, CMoyuanDreamAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanDreamAdd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanDreamAdd* New() const final {
    return CreateMaybeMessage<CMoyuanDreamAdd>(nullptr);
  }

  CMoyuanDreamAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanDreamAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanDreamAdd& from);
  void MergeFrom(const CMoyuanDreamAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanDreamAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanDreamAdd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 1,
  };
  // string desc = 1;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanDreamAdd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanDreamAdd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanDreamAdd) */ {
 public:
  SMoyuanDreamAdd();
  virtual ~SMoyuanDreamAdd();

  SMoyuanDreamAdd(const SMoyuanDreamAdd& from);
  SMoyuanDreamAdd(SMoyuanDreamAdd&& from) noexcept
    : SMoyuanDreamAdd() {
    *this = ::std::move(from);
  }

  inline SMoyuanDreamAdd& operator=(const SMoyuanDreamAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanDreamAdd& operator=(SMoyuanDreamAdd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanDreamAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanDreamAdd* internal_default_instance() {
    return reinterpret_cast<const SMoyuanDreamAdd*>(
               &_SMoyuanDreamAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SMoyuanDreamAdd& a, SMoyuanDreamAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanDreamAdd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanDreamAdd* New() const final {
    return CreateMaybeMessage<SMoyuanDreamAdd>(nullptr);
  }

  SMoyuanDreamAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanDreamAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanDreamAdd& from);
  void MergeFrom(const SMoyuanDreamAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanDreamAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanDreamAdd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanDreamAdd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanDreamRand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanDreamRand) */ {
 public:
  CMoyuanDreamRand();
  virtual ~CMoyuanDreamRand();

  CMoyuanDreamRand(const CMoyuanDreamRand& from);
  CMoyuanDreamRand(CMoyuanDreamRand&& from) noexcept
    : CMoyuanDreamRand() {
    *this = ::std::move(from);
  }

  inline CMoyuanDreamRand& operator=(const CMoyuanDreamRand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanDreamRand& operator=(CMoyuanDreamRand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanDreamRand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanDreamRand* internal_default_instance() {
    return reinterpret_cast<const CMoyuanDreamRand*>(
               &_CMoyuanDreamRand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMoyuanDreamRand& a, CMoyuanDreamRand& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanDreamRand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanDreamRand* New() const final {
    return CreateMaybeMessage<CMoyuanDreamRand>(nullptr);
  }

  CMoyuanDreamRand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanDreamRand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanDreamRand& from);
  void MergeFrom(const CMoyuanDreamRand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanDreamRand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanDreamRand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanDreamRand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanDreamRand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanDreamRand) */ {
 public:
  SMoyuanDreamRand();
  virtual ~SMoyuanDreamRand();

  SMoyuanDreamRand(const SMoyuanDreamRand& from);
  SMoyuanDreamRand(SMoyuanDreamRand&& from) noexcept
    : SMoyuanDreamRand() {
    *this = ::std::move(from);
  }

  inline SMoyuanDreamRand& operator=(const SMoyuanDreamRand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanDreamRand& operator=(SMoyuanDreamRand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanDreamRand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanDreamRand* internal_default_instance() {
    return reinterpret_cast<const SMoyuanDreamRand*>(
               &_SMoyuanDreamRand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SMoyuanDreamRand& a, SMoyuanDreamRand& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanDreamRand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanDreamRand* New() const final {
    return CreateMaybeMessage<SMoyuanDreamRand>(nullptr);
  }

  SMoyuanDreamRand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanDreamRand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanDreamRand& from);
  void MergeFrom(const SMoyuanDreamRand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanDreamRand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanDreamRand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 2,
    kUidFieldNumber = 1,
    kDreamIdFieldNumber = 3,
  };
  // string desc = 2;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dreamId = 3;
  void clear_dreamid();
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid() const;
  void set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dreamid() const;
  void _internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanDreamRand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanTroveGoodsBackpackList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanTroveGoodsBackpackList) */ {
 public:
  CMoyuanTroveGoodsBackpackList();
  virtual ~CMoyuanTroveGoodsBackpackList();

  CMoyuanTroveGoodsBackpackList(const CMoyuanTroveGoodsBackpackList& from);
  CMoyuanTroveGoodsBackpackList(CMoyuanTroveGoodsBackpackList&& from) noexcept
    : CMoyuanTroveGoodsBackpackList() {
    *this = ::std::move(from);
  }

  inline CMoyuanTroveGoodsBackpackList& operator=(const CMoyuanTroveGoodsBackpackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanTroveGoodsBackpackList& operator=(CMoyuanTroveGoodsBackpackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanTroveGoodsBackpackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanTroveGoodsBackpackList* internal_default_instance() {
    return reinterpret_cast<const CMoyuanTroveGoodsBackpackList*>(
               &_CMoyuanTroveGoodsBackpackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMoyuanTroveGoodsBackpackList& a, CMoyuanTroveGoodsBackpackList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanTroveGoodsBackpackList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanTroveGoodsBackpackList* New() const final {
    return CreateMaybeMessage<CMoyuanTroveGoodsBackpackList>(nullptr);
  }

  CMoyuanTroveGoodsBackpackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanTroveGoodsBackpackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanTroveGoodsBackpackList& from);
  void MergeFrom(const CMoyuanTroveGoodsBackpackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanTroveGoodsBackpackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanTroveGoodsBackpackList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanTroveGoodsBackpackList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanTroveGoodsBackpackList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanTroveGoodsBackpackList) */ {
 public:
  SMoyuanTroveGoodsBackpackList();
  virtual ~SMoyuanTroveGoodsBackpackList();

  SMoyuanTroveGoodsBackpackList(const SMoyuanTroveGoodsBackpackList& from);
  SMoyuanTroveGoodsBackpackList(SMoyuanTroveGoodsBackpackList&& from) noexcept
    : SMoyuanTroveGoodsBackpackList() {
    *this = ::std::move(from);
  }

  inline SMoyuanTroveGoodsBackpackList& operator=(const SMoyuanTroveGoodsBackpackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanTroveGoodsBackpackList& operator=(SMoyuanTroveGoodsBackpackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanTroveGoodsBackpackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanTroveGoodsBackpackList* internal_default_instance() {
    return reinterpret_cast<const SMoyuanTroveGoodsBackpackList*>(
               &_SMoyuanTroveGoodsBackpackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SMoyuanTroveGoodsBackpackList& a, SMoyuanTroveGoodsBackpackList& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanTroveGoodsBackpackList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanTroveGoodsBackpackList* New() const final {
    return CreateMaybeMessage<SMoyuanTroveGoodsBackpackList>(nullptr);
  }

  SMoyuanTroveGoodsBackpackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanTroveGoodsBackpackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanTroveGoodsBackpackList& from);
  void MergeFrom(const SMoyuanTroveGoodsBackpackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanTroveGoodsBackpackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanTroveGoodsBackpackList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .moyuan.BMoyuanTroveGoodsBackpackList list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::moyuan::BMoyuanTroveGoodsBackpackList* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanTroveGoodsBackpackList >*
      mutable_list();
  private:
  const ::moyuan::BMoyuanTroveGoodsBackpackList& _internal_list(int index) const;
  ::moyuan::BMoyuanTroveGoodsBackpackList* _internal_add_list();
  public:
  const ::moyuan::BMoyuanTroveGoodsBackpackList& list(int index) const;
  ::moyuan::BMoyuanTroveGoodsBackpackList* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanTroveGoodsBackpackList >&
      list() const;

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanTroveGoodsBackpackList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanTroveGoodsBackpackList > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class BMoyuanTroveGoodsBackpackList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.BMoyuanTroveGoodsBackpackList) */ {
 public:
  BMoyuanTroveGoodsBackpackList();
  virtual ~BMoyuanTroveGoodsBackpackList();

  BMoyuanTroveGoodsBackpackList(const BMoyuanTroveGoodsBackpackList& from);
  BMoyuanTroveGoodsBackpackList(BMoyuanTroveGoodsBackpackList&& from) noexcept
    : BMoyuanTroveGoodsBackpackList() {
    *this = ::std::move(from);
  }

  inline BMoyuanTroveGoodsBackpackList& operator=(const BMoyuanTroveGoodsBackpackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMoyuanTroveGoodsBackpackList& operator=(BMoyuanTroveGoodsBackpackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMoyuanTroveGoodsBackpackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMoyuanTroveGoodsBackpackList* internal_default_instance() {
    return reinterpret_cast<const BMoyuanTroveGoodsBackpackList*>(
               &_BMoyuanTroveGoodsBackpackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BMoyuanTroveGoodsBackpackList& a, BMoyuanTroveGoodsBackpackList& b) {
    a.Swap(&b);
  }
  inline void Swap(BMoyuanTroveGoodsBackpackList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMoyuanTroveGoodsBackpackList* New() const final {
    return CreateMaybeMessage<BMoyuanTroveGoodsBackpackList>(nullptr);
  }

  BMoyuanTroveGoodsBackpackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMoyuanTroveGoodsBackpackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMoyuanTroveGoodsBackpackList& from);
  void MergeFrom(const BMoyuanTroveGoodsBackpackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMoyuanTroveGoodsBackpackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.BMoyuanTroveGoodsBackpackList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kGoodsIdFieldNumber = 3,
    kBakCountFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 3;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bakCount = 4;
  void clear_bakcount();
  ::PROTOBUF_NAMESPACE_ID::int32 bakcount() const;
  void set_bakcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bakcount() const;
  void _internal_set_bakcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.BMoyuanTroveGoodsBackpackList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bakcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanTroveGoodsAdd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanTroveGoodsAdd) */ {
 public:
  CMoyuanTroveGoodsAdd();
  virtual ~CMoyuanTroveGoodsAdd();

  CMoyuanTroveGoodsAdd(const CMoyuanTroveGoodsAdd& from);
  CMoyuanTroveGoodsAdd(CMoyuanTroveGoodsAdd&& from) noexcept
    : CMoyuanTroveGoodsAdd() {
    *this = ::std::move(from);
  }

  inline CMoyuanTroveGoodsAdd& operator=(const CMoyuanTroveGoodsAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanTroveGoodsAdd& operator=(CMoyuanTroveGoodsAdd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanTroveGoodsAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanTroveGoodsAdd* internal_default_instance() {
    return reinterpret_cast<const CMoyuanTroveGoodsAdd*>(
               &_CMoyuanTroveGoodsAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMoyuanTroveGoodsAdd& a, CMoyuanTroveGoodsAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanTroveGoodsAdd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanTroveGoodsAdd* New() const final {
    return CreateMaybeMessage<CMoyuanTroveGoodsAdd>(nullptr);
  }

  CMoyuanTroveGoodsAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanTroveGoodsAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanTroveGoodsAdd& from);
  void MergeFrom(const CMoyuanTroveGoodsAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanTroveGoodsAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanTroveGoodsAdd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanTroveGoodsAdd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanTroveGoodsAdd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanTroveGoodsAdd) */ {
 public:
  SMoyuanTroveGoodsAdd();
  virtual ~SMoyuanTroveGoodsAdd();

  SMoyuanTroveGoodsAdd(const SMoyuanTroveGoodsAdd& from);
  SMoyuanTroveGoodsAdd(SMoyuanTroveGoodsAdd&& from) noexcept
    : SMoyuanTroveGoodsAdd() {
    *this = ::std::move(from);
  }

  inline SMoyuanTroveGoodsAdd& operator=(const SMoyuanTroveGoodsAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanTroveGoodsAdd& operator=(SMoyuanTroveGoodsAdd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanTroveGoodsAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanTroveGoodsAdd* internal_default_instance() {
    return reinterpret_cast<const SMoyuanTroveGoodsAdd*>(
               &_SMoyuanTroveGoodsAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SMoyuanTroveGoodsAdd& a, SMoyuanTroveGoodsAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanTroveGoodsAdd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanTroveGoodsAdd* New() const final {
    return CreateMaybeMessage<SMoyuanTroveGoodsAdd>(nullptr);
  }

  SMoyuanTroveGoodsAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanTroveGoodsAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanTroveGoodsAdd& from);
  void MergeFrom(const SMoyuanTroveGoodsAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanTroveGoodsAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanTroveGoodsAdd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanTroveGoodsAdd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanDreamCommentList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanDreamCommentList) */ {
 public:
  CMoyuanDreamCommentList();
  virtual ~CMoyuanDreamCommentList();

  CMoyuanDreamCommentList(const CMoyuanDreamCommentList& from);
  CMoyuanDreamCommentList(CMoyuanDreamCommentList&& from) noexcept
    : CMoyuanDreamCommentList() {
    *this = ::std::move(from);
  }

  inline CMoyuanDreamCommentList& operator=(const CMoyuanDreamCommentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanDreamCommentList& operator=(CMoyuanDreamCommentList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanDreamCommentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanDreamCommentList* internal_default_instance() {
    return reinterpret_cast<const CMoyuanDreamCommentList*>(
               &_CMoyuanDreamCommentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMoyuanDreamCommentList& a, CMoyuanDreamCommentList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanDreamCommentList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanDreamCommentList* New() const final {
    return CreateMaybeMessage<CMoyuanDreamCommentList>(nullptr);
  }

  CMoyuanDreamCommentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanDreamCommentList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanDreamCommentList& from);
  void MergeFrom(const CMoyuanDreamCommentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanDreamCommentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanDreamCommentList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDreamIdFieldNumber = 1,
    kCurPageFieldNumber = 2,
    kPageLimitFieldNumber = 3,
  };
  // int32 dreamId = 1;
  void clear_dreamid();
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid() const;
  void set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dreamid() const;
  void _internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curPage = 2;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 3;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanDreamCommentList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanDreamCommentList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanDreamCommentList) */ {
 public:
  SMoyuanDreamCommentList();
  virtual ~SMoyuanDreamCommentList();

  SMoyuanDreamCommentList(const SMoyuanDreamCommentList& from);
  SMoyuanDreamCommentList(SMoyuanDreamCommentList&& from) noexcept
    : SMoyuanDreamCommentList() {
    *this = ::std::move(from);
  }

  inline SMoyuanDreamCommentList& operator=(const SMoyuanDreamCommentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanDreamCommentList& operator=(SMoyuanDreamCommentList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanDreamCommentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanDreamCommentList* internal_default_instance() {
    return reinterpret_cast<const SMoyuanDreamCommentList*>(
               &_SMoyuanDreamCommentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SMoyuanDreamCommentList& a, SMoyuanDreamCommentList& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanDreamCommentList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanDreamCommentList* New() const final {
    return CreateMaybeMessage<SMoyuanDreamCommentList>(nullptr);
  }

  SMoyuanDreamCommentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanDreamCommentList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanDreamCommentList& from);
  void MergeFrom(const SMoyuanDreamCommentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanDreamCommentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanDreamCommentList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kTotalFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kPageLimitFieldNumber = 4,
  };
  // repeated .moyuan.BMoyuanDreamComment list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::moyuan::BMoyuanDreamComment* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamComment >*
      mutable_list();
  private:
  const ::moyuan::BMoyuanDreamComment& _internal_list(int index) const;
  ::moyuan::BMoyuanDreamComment* _internal_add_list();
  public:
  const ::moyuan::BMoyuanDreamComment& list(int index) const;
  ::moyuan::BMoyuanDreamComment* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamComment >&
      list() const;

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 4;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanDreamCommentList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamComment > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class BMoyuanDreamComment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.BMoyuanDreamComment) */ {
 public:
  BMoyuanDreamComment();
  virtual ~BMoyuanDreamComment();

  BMoyuanDreamComment(const BMoyuanDreamComment& from);
  BMoyuanDreamComment(BMoyuanDreamComment&& from) noexcept
    : BMoyuanDreamComment() {
    *this = ::std::move(from);
  }

  inline BMoyuanDreamComment& operator=(const BMoyuanDreamComment& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMoyuanDreamComment& operator=(BMoyuanDreamComment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMoyuanDreamComment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMoyuanDreamComment* internal_default_instance() {
    return reinterpret_cast<const BMoyuanDreamComment*>(
               &_BMoyuanDreamComment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BMoyuanDreamComment& a, BMoyuanDreamComment& b) {
    a.Swap(&b);
  }
  inline void Swap(BMoyuanDreamComment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMoyuanDreamComment* New() const final {
    return CreateMaybeMessage<BMoyuanDreamComment>(nullptr);
  }

  BMoyuanDreamComment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMoyuanDreamComment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMoyuanDreamComment& from);
  void MergeFrom(const BMoyuanDreamComment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMoyuanDreamComment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.BMoyuanDreamComment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 5,
    kHeadFieldNumber = 6,
    kToCommentNickFieldNumber = 9,
    kCommentFieldNumber = 10,
    kCreatedAtFieldNumber = 11,
    kIdFieldNumber = 1,
    kDreamIdFieldNumber = 2,
    kIsAnonymousFieldNumber = 3,
    kUidFieldNumber = 4,
    kToCommentIdFieldNumber = 7,
    kToCommentUidFieldNumber = 8,
  };
  // string nick = 5;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string head = 6;
  void clear_head();
  const std::string& head() const;
  void set_head(const std::string& value);
  void set_head(std::string&& value);
  void set_head(const char* value);
  void set_head(const char* value, size_t size);
  std::string* mutable_head();
  std::string* release_head();
  void set_allocated_head(std::string* head);
  private:
  const std::string& _internal_head() const;
  void _internal_set_head(const std::string& value);
  std::string* _internal_mutable_head();
  public:

  // string toCommentNick = 9;
  void clear_tocommentnick();
  const std::string& tocommentnick() const;
  void set_tocommentnick(const std::string& value);
  void set_tocommentnick(std::string&& value);
  void set_tocommentnick(const char* value);
  void set_tocommentnick(const char* value, size_t size);
  std::string* mutable_tocommentnick();
  std::string* release_tocommentnick();
  void set_allocated_tocommentnick(std::string* tocommentnick);
  private:
  const std::string& _internal_tocommentnick() const;
  void _internal_set_tocommentnick(const std::string& value);
  std::string* _internal_mutable_tocommentnick();
  public:

  // string comment = 10;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string createdAt = 11;
  void clear_createdat();
  const std::string& createdat() const;
  void set_createdat(const std::string& value);
  void set_createdat(std::string&& value);
  void set_createdat(const char* value);
  void set_createdat(const char* value, size_t size);
  std::string* mutable_createdat();
  std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dreamId = 2;
  void clear_dreamid();
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid() const;
  void set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dreamid() const;
  void _internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isAnonymous = 3;
  void clear_isanonymous();
  ::PROTOBUF_NAMESPACE_ID::int32 isanonymous() const;
  void set_isanonymous(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isanonymous() const;
  void _internal_set_isanonymous(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 4;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toCommentId = 7;
  void clear_tocommentid();
  ::PROTOBUF_NAMESPACE_ID::int32 tocommentid() const;
  void set_tocommentid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tocommentid() const;
  void _internal_set_tocommentid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toCommentUid = 8;
  void clear_tocommentuid();
  ::PROTOBUF_NAMESPACE_ID::int32 tocommentuid() const;
  void set_tocommentuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tocommentuid() const;
  void _internal_set_tocommentuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.BMoyuanDreamComment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tocommentnick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 isanonymous_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tocommentid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tocommentuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanDreamComment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanDreamComment) */ {
 public:
  CMoyuanDreamComment();
  virtual ~CMoyuanDreamComment();

  CMoyuanDreamComment(const CMoyuanDreamComment& from);
  CMoyuanDreamComment(CMoyuanDreamComment&& from) noexcept
    : CMoyuanDreamComment() {
    *this = ::std::move(from);
  }

  inline CMoyuanDreamComment& operator=(const CMoyuanDreamComment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanDreamComment& operator=(CMoyuanDreamComment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanDreamComment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanDreamComment* internal_default_instance() {
    return reinterpret_cast<const CMoyuanDreamComment*>(
               &_CMoyuanDreamComment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMoyuanDreamComment& a, CMoyuanDreamComment& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanDreamComment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanDreamComment* New() const final {
    return CreateMaybeMessage<CMoyuanDreamComment>(nullptr);
  }

  CMoyuanDreamComment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanDreamComment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanDreamComment& from);
  void MergeFrom(const CMoyuanDreamComment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanDreamComment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanDreamComment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 5,
    kHeadFieldNumber = 6,
    kToCommentNickFieldNumber = 9,
    kCommentFieldNumber = 10,
    kDreamIdFieldNumber = 1,
    kIsAnonymousFieldNumber = 2,
    kToCommentIdFieldNumber = 7,
    kToCommentUidFieldNumber = 8,
  };
  // string nick = 5;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string head = 6;
  void clear_head();
  const std::string& head() const;
  void set_head(const std::string& value);
  void set_head(std::string&& value);
  void set_head(const char* value);
  void set_head(const char* value, size_t size);
  std::string* mutable_head();
  std::string* release_head();
  void set_allocated_head(std::string* head);
  private:
  const std::string& _internal_head() const;
  void _internal_set_head(const std::string& value);
  std::string* _internal_mutable_head();
  public:

  // string toCommentNick = 9;
  void clear_tocommentnick();
  const std::string& tocommentnick() const;
  void set_tocommentnick(const std::string& value);
  void set_tocommentnick(std::string&& value);
  void set_tocommentnick(const char* value);
  void set_tocommentnick(const char* value, size_t size);
  std::string* mutable_tocommentnick();
  std::string* release_tocommentnick();
  void set_allocated_tocommentnick(std::string* tocommentnick);
  private:
  const std::string& _internal_tocommentnick() const;
  void _internal_set_tocommentnick(const std::string& value);
  std::string* _internal_mutable_tocommentnick();
  public:

  // string comment = 10;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // int32 dreamId = 1;
  void clear_dreamid();
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid() const;
  void set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dreamid() const;
  void _internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isAnonymous = 2;
  void clear_isanonymous();
  ::PROTOBUF_NAMESPACE_ID::int32 isanonymous() const;
  void set_isanonymous(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isanonymous() const;
  void _internal_set_isanonymous(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toCommentId = 7;
  void clear_tocommentid();
  ::PROTOBUF_NAMESPACE_ID::int32 tocommentid() const;
  void set_tocommentid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tocommentid() const;
  void _internal_set_tocommentid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toCommentUid = 8;
  void clear_tocommentuid();
  ::PROTOBUF_NAMESPACE_ID::int32 tocommentuid() const;
  void set_tocommentuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tocommentuid() const;
  void _internal_set_tocommentuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanDreamComment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tocommentnick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 isanonymous_;
  ::PROTOBUF_NAMESPACE_ID::int32 tocommentid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tocommentuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanDreamComment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanDreamComment) */ {
 public:
  SMoyuanDreamComment();
  virtual ~SMoyuanDreamComment();

  SMoyuanDreamComment(const SMoyuanDreamComment& from);
  SMoyuanDreamComment(SMoyuanDreamComment&& from) noexcept
    : SMoyuanDreamComment() {
    *this = ::std::move(from);
  }

  inline SMoyuanDreamComment& operator=(const SMoyuanDreamComment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanDreamComment& operator=(SMoyuanDreamComment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanDreamComment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanDreamComment* internal_default_instance() {
    return reinterpret_cast<const SMoyuanDreamComment*>(
               &_SMoyuanDreamComment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SMoyuanDreamComment& a, SMoyuanDreamComment& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanDreamComment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanDreamComment* New() const final {
    return CreateMaybeMessage<SMoyuanDreamComment>(nullptr);
  }

  SMoyuanDreamComment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanDreamComment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanDreamComment& from);
  void MergeFrom(const SMoyuanDreamComment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanDreamComment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanDreamComment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanDreamComment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanAnonymousId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanAnonymousId) */ {
 public:
  CMoyuanAnonymousId();
  virtual ~CMoyuanAnonymousId();

  CMoyuanAnonymousId(const CMoyuanAnonymousId& from);
  CMoyuanAnonymousId(CMoyuanAnonymousId&& from) noexcept
    : CMoyuanAnonymousId() {
    *this = ::std::move(from);
  }

  inline CMoyuanAnonymousId& operator=(const CMoyuanAnonymousId& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanAnonymousId& operator=(CMoyuanAnonymousId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanAnonymousId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanAnonymousId* internal_default_instance() {
    return reinterpret_cast<const CMoyuanAnonymousId*>(
               &_CMoyuanAnonymousId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMoyuanAnonymousId& a, CMoyuanAnonymousId& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanAnonymousId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanAnonymousId* New() const final {
    return CreateMaybeMessage<CMoyuanAnonymousId>(nullptr);
  }

  CMoyuanAnonymousId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanAnonymousId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanAnonymousId& from);
  void MergeFrom(const CMoyuanAnonymousId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanAnonymousId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanAnonymousId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanAnonymousId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanAnonymousId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanAnonymousId) */ {
 public:
  SMoyuanAnonymousId();
  virtual ~SMoyuanAnonymousId();

  SMoyuanAnonymousId(const SMoyuanAnonymousId& from);
  SMoyuanAnonymousId(SMoyuanAnonymousId&& from) noexcept
    : SMoyuanAnonymousId() {
    *this = ::std::move(from);
  }

  inline SMoyuanAnonymousId& operator=(const SMoyuanAnonymousId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanAnonymousId& operator=(SMoyuanAnonymousId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanAnonymousId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanAnonymousId* internal_default_instance() {
    return reinterpret_cast<const SMoyuanAnonymousId*>(
               &_SMoyuanAnonymousId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SMoyuanAnonymousId& a, SMoyuanAnonymousId& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanAnonymousId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanAnonymousId* New() const final {
    return CreateMaybeMessage<SMoyuanAnonymousId>(nullptr);
  }

  SMoyuanAnonymousId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanAnonymousId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanAnonymousId& from);
  void MergeFrom(const SMoyuanAnonymousId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanAnonymousId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanAnonymousId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnonymousIdFieldNumber = 1,
    kAnonymousHeadFieldNumber = 2,
  };
  // string anonymousId = 1;
  void clear_anonymousid();
  const std::string& anonymousid() const;
  void set_anonymousid(const std::string& value);
  void set_anonymousid(std::string&& value);
  void set_anonymousid(const char* value);
  void set_anonymousid(const char* value, size_t size);
  std::string* mutable_anonymousid();
  std::string* release_anonymousid();
  void set_allocated_anonymousid(std::string* anonymousid);
  private:
  const std::string& _internal_anonymousid() const;
  void _internal_set_anonymousid(const std::string& value);
  std::string* _internal_mutable_anonymousid();
  public:

  // string anonymousHead = 2;
  void clear_anonymoushead();
  const std::string& anonymoushead() const;
  void set_anonymoushead(const std::string& value);
  void set_anonymoushead(std::string&& value);
  void set_anonymoushead(const char* value);
  void set_anonymoushead(const char* value, size_t size);
  std::string* mutable_anonymoushead();
  std::string* release_anonymoushead();
  void set_allocated_anonymoushead(std::string* anonymoushead);
  private:
  const std::string& _internal_anonymoushead() const;
  void _internal_set_anonymoushead(const std::string& value);
  std::string* _internal_mutable_anonymoushead();
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanAnonymousId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anonymousid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anonymoushead_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanDreamCommentNoticeList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanDreamCommentNoticeList) */ {
 public:
  CMoyuanDreamCommentNoticeList();
  virtual ~CMoyuanDreamCommentNoticeList();

  CMoyuanDreamCommentNoticeList(const CMoyuanDreamCommentNoticeList& from);
  CMoyuanDreamCommentNoticeList(CMoyuanDreamCommentNoticeList&& from) noexcept
    : CMoyuanDreamCommentNoticeList() {
    *this = ::std::move(from);
  }

  inline CMoyuanDreamCommentNoticeList& operator=(const CMoyuanDreamCommentNoticeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanDreamCommentNoticeList& operator=(CMoyuanDreamCommentNoticeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanDreamCommentNoticeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanDreamCommentNoticeList* internal_default_instance() {
    return reinterpret_cast<const CMoyuanDreamCommentNoticeList*>(
               &_CMoyuanDreamCommentNoticeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMoyuanDreamCommentNoticeList& a, CMoyuanDreamCommentNoticeList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanDreamCommentNoticeList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanDreamCommentNoticeList* New() const final {
    return CreateMaybeMessage<CMoyuanDreamCommentNoticeList>(nullptr);
  }

  CMoyuanDreamCommentNoticeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanDreamCommentNoticeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanDreamCommentNoticeList& from);
  void MergeFrom(const CMoyuanDreamCommentNoticeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanDreamCommentNoticeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanDreamCommentNoticeList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanDreamCommentNoticeList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanDreamCommentNoticeList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanDreamCommentNoticeList) */ {
 public:
  SMoyuanDreamCommentNoticeList();
  virtual ~SMoyuanDreamCommentNoticeList();

  SMoyuanDreamCommentNoticeList(const SMoyuanDreamCommentNoticeList& from);
  SMoyuanDreamCommentNoticeList(SMoyuanDreamCommentNoticeList&& from) noexcept
    : SMoyuanDreamCommentNoticeList() {
    *this = ::std::move(from);
  }

  inline SMoyuanDreamCommentNoticeList& operator=(const SMoyuanDreamCommentNoticeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanDreamCommentNoticeList& operator=(SMoyuanDreamCommentNoticeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanDreamCommentNoticeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanDreamCommentNoticeList* internal_default_instance() {
    return reinterpret_cast<const SMoyuanDreamCommentNoticeList*>(
               &_SMoyuanDreamCommentNoticeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SMoyuanDreamCommentNoticeList& a, SMoyuanDreamCommentNoticeList& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanDreamCommentNoticeList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanDreamCommentNoticeList* New() const final {
    return CreateMaybeMessage<SMoyuanDreamCommentNoticeList>(nullptr);
  }

  SMoyuanDreamCommentNoticeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanDreamCommentNoticeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanDreamCommentNoticeList& from);
  void MergeFrom(const SMoyuanDreamCommentNoticeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanDreamCommentNoticeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanDreamCommentNoticeList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .moyuan.BMoyuanDreamCommentNotice list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::moyuan::BMoyuanDreamCommentNotice* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamCommentNotice >*
      mutable_list();
  private:
  const ::moyuan::BMoyuanDreamCommentNotice& _internal_list(int index) const;
  ::moyuan::BMoyuanDreamCommentNotice* _internal_add_list();
  public:
  const ::moyuan::BMoyuanDreamCommentNotice& list(int index) const;
  ::moyuan::BMoyuanDreamCommentNotice* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamCommentNotice >&
      list() const;

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanDreamCommentNoticeList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamCommentNotice > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class BMoyuanDreamCommentNotice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.BMoyuanDreamCommentNotice) */ {
 public:
  BMoyuanDreamCommentNotice();
  virtual ~BMoyuanDreamCommentNotice();

  BMoyuanDreamCommentNotice(const BMoyuanDreamCommentNotice& from);
  BMoyuanDreamCommentNotice(BMoyuanDreamCommentNotice&& from) noexcept
    : BMoyuanDreamCommentNotice() {
    *this = ::std::move(from);
  }

  inline BMoyuanDreamCommentNotice& operator=(const BMoyuanDreamCommentNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMoyuanDreamCommentNotice& operator=(BMoyuanDreamCommentNotice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMoyuanDreamCommentNotice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMoyuanDreamCommentNotice* internal_default_instance() {
    return reinterpret_cast<const BMoyuanDreamCommentNotice*>(
               &_BMoyuanDreamCommentNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BMoyuanDreamCommentNotice& a, BMoyuanDreamCommentNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(BMoyuanDreamCommentNotice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMoyuanDreamCommentNotice* New() const final {
    return CreateMaybeMessage<BMoyuanDreamCommentNotice>(nullptr);
  }

  BMoyuanDreamCommentNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMoyuanDreamCommentNotice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMoyuanDreamCommentNotice& from);
  void MergeFrom(const BMoyuanDreamCommentNotice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMoyuanDreamCommentNotice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.BMoyuanDreamCommentNotice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kTipsFieldNumber = 3,
    kHeadFieldNumber = 4,
    kDreamIdFieldNumber = 1,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string tips = 3;
  void clear_tips();
  const std::string& tips() const;
  void set_tips(const std::string& value);
  void set_tips(std::string&& value);
  void set_tips(const char* value);
  void set_tips(const char* value, size_t size);
  std::string* mutable_tips();
  std::string* release_tips();
  void set_allocated_tips(std::string* tips);
  private:
  const std::string& _internal_tips() const;
  void _internal_set_tips(const std::string& value);
  std::string* _internal_mutable_tips();
  public:

  // string Head = 4;
  void clear_head();
  const std::string& head() const;
  void set_head(const std::string& value);
  void set_head(std::string&& value);
  void set_head(const char* value);
  void set_head(const char* value, size_t size);
  std::string* mutable_head();
  std::string* release_head();
  void set_allocated_head(std::string* head);
  private:
  const std::string& _internal_head() const;
  void _internal_set_head(const std::string& value);
  std::string* _internal_mutable_head();
  public:

  // int32 dreamId = 1;
  void clear_dreamid();
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid() const;
  void set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dreamid() const;
  void _internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.BMoyuanDreamCommentNotice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanMineDreamList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanMineDreamList) */ {
 public:
  CMoyuanMineDreamList();
  virtual ~CMoyuanMineDreamList();

  CMoyuanMineDreamList(const CMoyuanMineDreamList& from);
  CMoyuanMineDreamList(CMoyuanMineDreamList&& from) noexcept
    : CMoyuanMineDreamList() {
    *this = ::std::move(from);
  }

  inline CMoyuanMineDreamList& operator=(const CMoyuanMineDreamList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanMineDreamList& operator=(CMoyuanMineDreamList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanMineDreamList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanMineDreamList* internal_default_instance() {
    return reinterpret_cast<const CMoyuanMineDreamList*>(
               &_CMoyuanMineDreamList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMoyuanMineDreamList& a, CMoyuanMineDreamList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanMineDreamList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanMineDreamList* New() const final {
    return CreateMaybeMessage<CMoyuanMineDreamList>(nullptr);
  }

  CMoyuanMineDreamList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanMineDreamList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanMineDreamList& from);
  void MergeFrom(const CMoyuanMineDreamList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanMineDreamList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanMineDreamList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurPageFieldNumber = 1,
    kPageLimitFieldNumber = 2,
  };
  // int32 curPage = 1;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 2;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanMineDreamList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanMineDreamList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanMineDreamList) */ {
 public:
  SMoyuanMineDreamList();
  virtual ~SMoyuanMineDreamList();

  SMoyuanMineDreamList(const SMoyuanMineDreamList& from);
  SMoyuanMineDreamList(SMoyuanMineDreamList&& from) noexcept
    : SMoyuanMineDreamList() {
    *this = ::std::move(from);
  }

  inline SMoyuanMineDreamList& operator=(const SMoyuanMineDreamList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanMineDreamList& operator=(SMoyuanMineDreamList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanMineDreamList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanMineDreamList* internal_default_instance() {
    return reinterpret_cast<const SMoyuanMineDreamList*>(
               &_SMoyuanMineDreamList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SMoyuanMineDreamList& a, SMoyuanMineDreamList& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanMineDreamList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanMineDreamList* New() const final {
    return CreateMaybeMessage<SMoyuanMineDreamList>(nullptr);
  }

  SMoyuanMineDreamList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanMineDreamList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanMineDreamList& from);
  void MergeFrom(const SMoyuanMineDreamList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanMineDreamList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanMineDreamList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kTotalFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kPageLimitFieldNumber = 4,
  };
  // repeated .moyuan.BMoyuanDreamInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::moyuan::BMoyuanDreamInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamInfo >*
      mutable_list();
  private:
  const ::moyuan::BMoyuanDreamInfo& _internal_list(int index) const;
  ::moyuan::BMoyuanDreamInfo* _internal_add_list();
  public:
  const ::moyuan::BMoyuanDreamInfo& list(int index) const;
  ::moyuan::BMoyuanDreamInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamInfo >&
      list() const;

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 4;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanMineDreamList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamInfo > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class BMoyuanDreamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.BMoyuanDreamInfo) */ {
 public:
  BMoyuanDreamInfo();
  virtual ~BMoyuanDreamInfo();

  BMoyuanDreamInfo(const BMoyuanDreamInfo& from);
  BMoyuanDreamInfo(BMoyuanDreamInfo&& from) noexcept
    : BMoyuanDreamInfo() {
    *this = ::std::move(from);
  }

  inline BMoyuanDreamInfo& operator=(const BMoyuanDreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMoyuanDreamInfo& operator=(BMoyuanDreamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMoyuanDreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMoyuanDreamInfo* internal_default_instance() {
    return reinterpret_cast<const BMoyuanDreamInfo*>(
               &_BMoyuanDreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(BMoyuanDreamInfo& a, BMoyuanDreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BMoyuanDreamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMoyuanDreamInfo* New() const final {
    return CreateMaybeMessage<BMoyuanDreamInfo>(nullptr);
  }

  BMoyuanDreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMoyuanDreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMoyuanDreamInfo& from);
  void MergeFrom(const BMoyuanDreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMoyuanDreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.BMoyuanDreamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 2,
    kUidFieldNumber = 1,
    kDreamIdFieldNumber = 3,
    kCommentNumFieldNumber = 4,
  };
  // string desc = 2;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dreamId = 3;
  void clear_dreamid();
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid() const;
  void set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dreamid() const;
  void _internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 commentNum = 4;
  void clear_commentnum();
  ::PROTOBUF_NAMESPACE_ID::int32 commentnum() const;
  void set_commentnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_commentnum() const;
  void _internal_set_commentnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.BMoyuanDreamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 commentnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class CMoyuanDreamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.CMoyuanDreamInfo) */ {
 public:
  CMoyuanDreamInfo();
  virtual ~CMoyuanDreamInfo();

  CMoyuanDreamInfo(const CMoyuanDreamInfo& from);
  CMoyuanDreamInfo(CMoyuanDreamInfo&& from) noexcept
    : CMoyuanDreamInfo() {
    *this = ::std::move(from);
  }

  inline CMoyuanDreamInfo& operator=(const CMoyuanDreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoyuanDreamInfo& operator=(CMoyuanDreamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoyuanDreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoyuanDreamInfo* internal_default_instance() {
    return reinterpret_cast<const CMoyuanDreamInfo*>(
               &_CMoyuanDreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMoyuanDreamInfo& a, CMoyuanDreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoyuanDreamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoyuanDreamInfo* New() const final {
    return CreateMaybeMessage<CMoyuanDreamInfo>(nullptr);
  }

  CMoyuanDreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoyuanDreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoyuanDreamInfo& from);
  void MergeFrom(const CMoyuanDreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoyuanDreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.CMoyuanDreamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDreamIdFieldNumber = 1,
  };
  // int32 dreamId = 1;
  void clear_dreamid();
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid() const;
  void set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dreamid() const;
  void _internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:moyuan.CMoyuanDreamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreamid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// -------------------------------------------------------------------

class SMoyuanDreamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moyuan.SMoyuanDreamInfo) */ {
 public:
  SMoyuanDreamInfo();
  virtual ~SMoyuanDreamInfo();

  SMoyuanDreamInfo(const SMoyuanDreamInfo& from);
  SMoyuanDreamInfo(SMoyuanDreamInfo&& from) noexcept
    : SMoyuanDreamInfo() {
    *this = ::std::move(from);
  }

  inline SMoyuanDreamInfo& operator=(const SMoyuanDreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoyuanDreamInfo& operator=(SMoyuanDreamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoyuanDreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoyuanDreamInfo* internal_default_instance() {
    return reinterpret_cast<const SMoyuanDreamInfo*>(
               &_SMoyuanDreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SMoyuanDreamInfo& a, SMoyuanDreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoyuanDreamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoyuanDreamInfo* New() const final {
    return CreateMaybeMessage<SMoyuanDreamInfo>(nullptr);
  }

  SMoyuanDreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoyuanDreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoyuanDreamInfo& from);
  void MergeFrom(const SMoyuanDreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoyuanDreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moyuan.SMoyuanDreamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moyuan_2eproto);
    return ::descriptor_table_moyuan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .moyuan.BMoyuanDreamInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::moyuan::BMoyuanDreamInfo& info() const;
  ::moyuan::BMoyuanDreamInfo* release_info();
  ::moyuan::BMoyuanDreamInfo* mutable_info();
  void set_allocated_info(::moyuan::BMoyuanDreamInfo* info);
  private:
  const ::moyuan::BMoyuanDreamInfo& _internal_info() const;
  ::moyuan::BMoyuanDreamInfo* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:moyuan.SMoyuanDreamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::moyuan::BMoyuanDreamInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moyuan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMoyuanUsersAvatarInfo

// -------------------------------------------------------------------

// SMoyuanUsersAvatarInfo

// int32 avatarKey = 1;
inline void SMoyuanUsersAvatarInfo::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersAvatarInfo::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersAvatarInfo::avatarkey() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersAvatarInfo.avatarKey)
  return _internal_avatarkey();
}
inline void SMoyuanUsersAvatarInfo::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void SMoyuanUsersAvatarInfo::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersAvatarInfo.avatarKey)
}

// -------------------------------------------------------------------

// CMoyuanUsersAvatarUpdate

// int32 avatarKey = 1;
inline void CMoyuanUsersAvatarUpdate::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersAvatarUpdate::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersAvatarUpdate::avatarkey() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanUsersAvatarUpdate.avatarKey)
  return _internal_avatarkey();
}
inline void CMoyuanUsersAvatarUpdate::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void CMoyuanUsersAvatarUpdate::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanUsersAvatarUpdate.avatarKey)
}

// -------------------------------------------------------------------

// SMoyuanUsersAvatarUpdate

// int32 status = 1;
inline void SMoyuanUsersAvatarUpdate::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersAvatarUpdate::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersAvatarUpdate::status() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersAvatarUpdate.status)
  return _internal_status();
}
inline void SMoyuanUsersAvatarUpdate::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SMoyuanUsersAvatarUpdate::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersAvatarUpdate.status)
}

// int32 uid = 2;
inline void SMoyuanUsersAvatarUpdate::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersAvatarUpdate::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersAvatarUpdate::uid() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersAvatarUpdate.uid)
  return _internal_uid();
}
inline void SMoyuanUsersAvatarUpdate::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SMoyuanUsersAvatarUpdate::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersAvatarUpdate.uid)
}

// int32 avatarKey = 3;
inline void SMoyuanUsersAvatarUpdate::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersAvatarUpdate::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersAvatarUpdate::avatarkey() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersAvatarUpdate.avatarKey)
  return _internal_avatarkey();
}
inline void SMoyuanUsersAvatarUpdate::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void SMoyuanUsersAvatarUpdate::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersAvatarUpdate.avatarKey)
}

// -------------------------------------------------------------------

// CMoyuanUsersProgressInfo

// -------------------------------------------------------------------

// SMoyuanUsersProgressInfo

// int32 layer = 1;
inline void SMoyuanUsersProgressInfo::clear_layer() {
  layer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::_internal_layer() const {
  return layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::layer() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersProgressInfo.layer)
  return _internal_layer();
}
inline void SMoyuanUsersProgressInfo::_internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_ = value;
}
inline void SMoyuanUsersProgressInfo::set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersProgressInfo.layer)
}

// int32 scene = 2;
inline void SMoyuanUsersProgressInfo::clear_scene() {
  scene_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::_internal_scene() const {
  return scene_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::scene() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersProgressInfo.scene)
  return _internal_scene();
}
inline void SMoyuanUsersProgressInfo::_internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_ = value;
}
inline void SMoyuanUsersProgressInfo::set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersProgressInfo.scene)
}

// repeated int32 npc = 3;
inline int SMoyuanUsersProgressInfo::_internal_npc_size() const {
  return npc_.size();
}
inline int SMoyuanUsersProgressInfo::npc_size() const {
  return _internal_npc_size();
}
inline void SMoyuanUsersProgressInfo::clear_npc() {
  npc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::_internal_npc(int index) const {
  return npc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::npc(int index) const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersProgressInfo.npc)
  return _internal_npc(index);
}
inline void SMoyuanUsersProgressInfo::set_npc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  npc_.Set(index, value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersProgressInfo.npc)
}
inline void SMoyuanUsersProgressInfo::_internal_add_npc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  npc_.Add(value);
}
inline void SMoyuanUsersProgressInfo::add_npc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_npc(value);
  // @@protoc_insertion_point(field_add:moyuan.SMoyuanUsersProgressInfo.npc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SMoyuanUsersProgressInfo::_internal_npc() const {
  return npc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SMoyuanUsersProgressInfo::npc() const {
  // @@protoc_insertion_point(field_list:moyuan.SMoyuanUsersProgressInfo.npc)
  return _internal_npc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SMoyuanUsersProgressInfo::_internal_mutable_npc() {
  return &npc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SMoyuanUsersProgressInfo::mutable_npc() {
  // @@protoc_insertion_point(field_mutable_list:moyuan.SMoyuanUsersProgressInfo.npc)
  return _internal_mutable_npc();
}

// int32 topic = 4;
inline void SMoyuanUsersProgressInfo::clear_topic() {
  topic_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::_internal_topic() const {
  return topic_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::topic() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersProgressInfo.topic)
  return _internal_topic();
}
inline void SMoyuanUsersProgressInfo::_internal_set_topic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  topic_ = value;
}
inline void SMoyuanUsersProgressInfo::set_topic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersProgressInfo.topic)
}

// int32 serveTimestamp = 5;
inline void SMoyuanUsersProgressInfo::clear_servetimestamp() {
  servetimestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::_internal_servetimestamp() const {
  return servetimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::servetimestamp() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersProgressInfo.serveTimestamp)
  return _internal_servetimestamp();
}
inline void SMoyuanUsersProgressInfo::_internal_set_servetimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servetimestamp_ = value;
}
inline void SMoyuanUsersProgressInfo::set_servetimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servetimestamp(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersProgressInfo.serveTimestamp)
}

// int32 topicType = 6;
inline void SMoyuanUsersProgressInfo::clear_topictype() {
  topictype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::_internal_topictype() const {
  return topictype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressInfo::topictype() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersProgressInfo.topicType)
  return _internal_topictype();
}
inline void SMoyuanUsersProgressInfo::_internal_set_topictype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  topictype_ = value;
}
inline void SMoyuanUsersProgressInfo::set_topictype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_topictype(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersProgressInfo.topicType)
}

// .vector.PVector3 position = 7;
inline bool SMoyuanUsersProgressInfo::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SMoyuanUsersProgressInfo::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& SMoyuanUsersProgressInfo::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& SMoyuanUsersProgressInfo::position() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersProgressInfo.position)
  return _internal_position();
}
inline ::vector::PVector3* SMoyuanUsersProgressInfo::release_position() {
  // @@protoc_insertion_point(field_release:moyuan.SMoyuanUsersProgressInfo.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* SMoyuanUsersProgressInfo::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* SMoyuanUsersProgressInfo::mutable_position() {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanUsersProgressInfo.position)
  return _internal_mutable_position();
}
inline void SMoyuanUsersProgressInfo::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:moyuan.SMoyuanUsersProgressInfo.position)
}

// string tips = 8;
inline void SMoyuanUsersProgressInfo::clear_tips() {
  tips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMoyuanUsersProgressInfo::tips() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersProgressInfo.tips)
  return _internal_tips();
}
inline void SMoyuanUsersProgressInfo::set_tips(const std::string& value) {
  _internal_set_tips(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersProgressInfo.tips)
}
inline std::string* SMoyuanUsersProgressInfo::mutable_tips() {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanUsersProgressInfo.tips)
  return _internal_mutable_tips();
}
inline const std::string& SMoyuanUsersProgressInfo::_internal_tips() const {
  return tips_.GetNoArena();
}
inline void SMoyuanUsersProgressInfo::_internal_set_tips(const std::string& value) {
  
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMoyuanUsersProgressInfo::set_tips(std::string&& value) {
  
  tips_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.SMoyuanUsersProgressInfo.tips)
}
inline void SMoyuanUsersProgressInfo::set_tips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.SMoyuanUsersProgressInfo.tips)
}
inline void SMoyuanUsersProgressInfo::set_tips(const char* value, size_t size) {
  
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.SMoyuanUsersProgressInfo.tips)
}
inline std::string* SMoyuanUsersProgressInfo::_internal_mutable_tips() {
  
  return tips_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMoyuanUsersProgressInfo::release_tips() {
  // @@protoc_insertion_point(field_release:moyuan.SMoyuanUsersProgressInfo.tips)
  
  return tips_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMoyuanUsersProgressInfo::set_allocated_tips(std::string* tips) {
  if (tips != nullptr) {
    
  } else {
    
  }
  tips_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tips);
  // @@protoc_insertion_point(field_set_allocated:moyuan.SMoyuanUsersProgressInfo.tips)
}

// -------------------------------------------------------------------

// CMoyuanUsersProgressUpdate

// int32 layer = 1;
inline void CMoyuanUsersProgressUpdate::clear_layer() {
  layer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::_internal_layer() const {
  return layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::layer() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanUsersProgressUpdate.layer)
  return _internal_layer();
}
inline void CMoyuanUsersProgressUpdate::_internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_ = value;
}
inline void CMoyuanUsersProgressUpdate::set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanUsersProgressUpdate.layer)
}

// int32 scene = 2;
inline void CMoyuanUsersProgressUpdate::clear_scene() {
  scene_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::_internal_scene() const {
  return scene_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::scene() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanUsersProgressUpdate.scene)
  return _internal_scene();
}
inline void CMoyuanUsersProgressUpdate::_internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_ = value;
}
inline void CMoyuanUsersProgressUpdate::set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanUsersProgressUpdate.scene)
}

// repeated int32 npc = 3;
inline int CMoyuanUsersProgressUpdate::_internal_npc_size() const {
  return npc_.size();
}
inline int CMoyuanUsersProgressUpdate::npc_size() const {
  return _internal_npc_size();
}
inline void CMoyuanUsersProgressUpdate::clear_npc() {
  npc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::_internal_npc(int index) const {
  return npc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::npc(int index) const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanUsersProgressUpdate.npc)
  return _internal_npc(index);
}
inline void CMoyuanUsersProgressUpdate::set_npc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  npc_.Set(index, value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanUsersProgressUpdate.npc)
}
inline void CMoyuanUsersProgressUpdate::_internal_add_npc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  npc_.Add(value);
}
inline void CMoyuanUsersProgressUpdate::add_npc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_npc(value);
  // @@protoc_insertion_point(field_add:moyuan.CMoyuanUsersProgressUpdate.npc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMoyuanUsersProgressUpdate::_internal_npc() const {
  return npc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMoyuanUsersProgressUpdate::npc() const {
  // @@protoc_insertion_point(field_list:moyuan.CMoyuanUsersProgressUpdate.npc)
  return _internal_npc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMoyuanUsersProgressUpdate::_internal_mutable_npc() {
  return &npc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMoyuanUsersProgressUpdate::mutable_npc() {
  // @@protoc_insertion_point(field_mutable_list:moyuan.CMoyuanUsersProgressUpdate.npc)
  return _internal_mutable_npc();
}

// int32 topic = 4;
inline void CMoyuanUsersProgressUpdate::clear_topic() {
  topic_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::_internal_topic() const {
  return topic_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::topic() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanUsersProgressUpdate.topic)
  return _internal_topic();
}
inline void CMoyuanUsersProgressUpdate::_internal_set_topic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  topic_ = value;
}
inline void CMoyuanUsersProgressUpdate::set_topic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanUsersProgressUpdate.topic)
}

// int32 topicType = 5;
inline void CMoyuanUsersProgressUpdate::clear_topictype() {
  topictype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::_internal_topictype() const {
  return topictype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersProgressUpdate::topictype() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanUsersProgressUpdate.topicType)
  return _internal_topictype();
}
inline void CMoyuanUsersProgressUpdate::_internal_set_topictype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  topictype_ = value;
}
inline void CMoyuanUsersProgressUpdate::set_topictype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_topictype(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanUsersProgressUpdate.topicType)
}

// .vector.PVector3 position = 6;
inline bool CMoyuanUsersProgressUpdate::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CMoyuanUsersProgressUpdate::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& CMoyuanUsersProgressUpdate::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& CMoyuanUsersProgressUpdate::position() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanUsersProgressUpdate.position)
  return _internal_position();
}
inline ::vector::PVector3* CMoyuanUsersProgressUpdate::release_position() {
  // @@protoc_insertion_point(field_release:moyuan.CMoyuanUsersProgressUpdate.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* CMoyuanUsersProgressUpdate::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* CMoyuanUsersProgressUpdate::mutable_position() {
  // @@protoc_insertion_point(field_mutable:moyuan.CMoyuanUsersProgressUpdate.position)
  return _internal_mutable_position();
}
inline void CMoyuanUsersProgressUpdate::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:moyuan.CMoyuanUsersProgressUpdate.position)
}

// -------------------------------------------------------------------

// SMoyuanUsersProgressUpdate

// int32 status = 1;
inline void SMoyuanUsersProgressUpdate::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressUpdate::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanUsersProgressUpdate::status() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersProgressUpdate.status)
  return _internal_status();
}
inline void SMoyuanUsersProgressUpdate::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SMoyuanUsersProgressUpdate::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanUsersProgressUpdate.status)
}

// -------------------------------------------------------------------

// CMoyuanUsersAvatarList

// repeated int32 uids = 1;
inline int CMoyuanUsersAvatarList::_internal_uids_size() const {
  return uids_.size();
}
inline int CMoyuanUsersAvatarList::uids_size() const {
  return _internal_uids_size();
}
inline void CMoyuanUsersAvatarList::clear_uids() {
  uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersAvatarList::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanUsersAvatarList::uids(int index) const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanUsersAvatarList.uids)
  return _internal_uids(index);
}
inline void CMoyuanUsersAvatarList::set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanUsersAvatarList.uids)
}
inline void CMoyuanUsersAvatarList::_internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Add(value);
}
inline void CMoyuanUsersAvatarList::add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:moyuan.CMoyuanUsersAvatarList.uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMoyuanUsersAvatarList::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMoyuanUsersAvatarList::uids() const {
  // @@protoc_insertion_point(field_list:moyuan.CMoyuanUsersAvatarList.uids)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMoyuanUsersAvatarList::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMoyuanUsersAvatarList::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:moyuan.CMoyuanUsersAvatarList.uids)
  return _internal_mutable_uids();
}

// -------------------------------------------------------------------

// SMoyuanUsersAvatarList

// repeated .moyuan.BMoyuanUsersAvatarList avatarList = 1;
inline int SMoyuanUsersAvatarList::_internal_avatarlist_size() const {
  return avatarlist_.size();
}
inline int SMoyuanUsersAvatarList::avatarlist_size() const {
  return _internal_avatarlist_size();
}
inline void SMoyuanUsersAvatarList::clear_avatarlist() {
  avatarlist_.Clear();
}
inline ::moyuan::BMoyuanUsersAvatarList* SMoyuanUsersAvatarList::mutable_avatarlist(int index) {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanUsersAvatarList.avatarList)
  return avatarlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanUsersAvatarList >*
SMoyuanUsersAvatarList::mutable_avatarlist() {
  // @@protoc_insertion_point(field_mutable_list:moyuan.SMoyuanUsersAvatarList.avatarList)
  return &avatarlist_;
}
inline const ::moyuan::BMoyuanUsersAvatarList& SMoyuanUsersAvatarList::_internal_avatarlist(int index) const {
  return avatarlist_.Get(index);
}
inline const ::moyuan::BMoyuanUsersAvatarList& SMoyuanUsersAvatarList::avatarlist(int index) const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanUsersAvatarList.avatarList)
  return _internal_avatarlist(index);
}
inline ::moyuan::BMoyuanUsersAvatarList* SMoyuanUsersAvatarList::_internal_add_avatarlist() {
  return avatarlist_.Add();
}
inline ::moyuan::BMoyuanUsersAvatarList* SMoyuanUsersAvatarList::add_avatarlist() {
  // @@protoc_insertion_point(field_add:moyuan.SMoyuanUsersAvatarList.avatarList)
  return _internal_add_avatarlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanUsersAvatarList >&
SMoyuanUsersAvatarList::avatarlist() const {
  // @@protoc_insertion_point(field_list:moyuan.SMoyuanUsersAvatarList.avatarList)
  return avatarlist_;
}

// -------------------------------------------------------------------

// BMoyuanUsersAvatarList

// int32 uid = 1;
inline void BMoyuanUsersAvatarList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanUsersAvatarList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanUsersAvatarList::uid() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanUsersAvatarList.uid)
  return _internal_uid();
}
inline void BMoyuanUsersAvatarList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BMoyuanUsersAvatarList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanUsersAvatarList.uid)
}

// int32 avatarKey = 2;
inline void BMoyuanUsersAvatarList::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanUsersAvatarList::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanUsersAvatarList::avatarkey() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanUsersAvatarList.avatarKey)
  return _internal_avatarkey();
}
inline void BMoyuanUsersAvatarList::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void BMoyuanUsersAvatarList::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanUsersAvatarList.avatarKey)
}

// -------------------------------------------------------------------

// CMoyuanDreamAdd

// string desc = 1;
inline void CMoyuanDreamAdd::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMoyuanDreamAdd::desc() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamAdd.desc)
  return _internal_desc();
}
inline void CMoyuanDreamAdd::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamAdd.desc)
}
inline std::string* CMoyuanDreamAdd::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:moyuan.CMoyuanDreamAdd.desc)
  return _internal_mutable_desc();
}
inline const std::string& CMoyuanDreamAdd::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void CMoyuanDreamAdd::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMoyuanDreamAdd::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.CMoyuanDreamAdd.desc)
}
inline void CMoyuanDreamAdd::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.CMoyuanDreamAdd.desc)
}
inline void CMoyuanDreamAdd::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.CMoyuanDreamAdd.desc)
}
inline std::string* CMoyuanDreamAdd::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMoyuanDreamAdd::release_desc() {
  // @@protoc_insertion_point(field_release:moyuan.CMoyuanDreamAdd.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMoyuanDreamAdd::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:moyuan.CMoyuanDreamAdd.desc)
}

// -------------------------------------------------------------------

// SMoyuanDreamAdd

// int32 status = 1;
inline void SMoyuanDreamAdd::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamAdd::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamAdd::status() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamAdd.status)
  return _internal_status();
}
inline void SMoyuanDreamAdd::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SMoyuanDreamAdd::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanDreamAdd.status)
}

// -------------------------------------------------------------------

// CMoyuanDreamRand

// -------------------------------------------------------------------

// SMoyuanDreamRand

// int32 uid = 1;
inline void SMoyuanDreamRand::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamRand::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamRand::uid() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamRand.uid)
  return _internal_uid();
}
inline void SMoyuanDreamRand::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SMoyuanDreamRand::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanDreamRand.uid)
}

// string desc = 2;
inline void SMoyuanDreamRand::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMoyuanDreamRand::desc() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamRand.desc)
  return _internal_desc();
}
inline void SMoyuanDreamRand::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanDreamRand.desc)
}
inline std::string* SMoyuanDreamRand::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanDreamRand.desc)
  return _internal_mutable_desc();
}
inline const std::string& SMoyuanDreamRand::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void SMoyuanDreamRand::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMoyuanDreamRand::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.SMoyuanDreamRand.desc)
}
inline void SMoyuanDreamRand::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.SMoyuanDreamRand.desc)
}
inline void SMoyuanDreamRand::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.SMoyuanDreamRand.desc)
}
inline std::string* SMoyuanDreamRand::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMoyuanDreamRand::release_desc() {
  // @@protoc_insertion_point(field_release:moyuan.SMoyuanDreamRand.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMoyuanDreamRand::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:moyuan.SMoyuanDreamRand.desc)
}

// int32 dreamId = 3;
inline void SMoyuanDreamRand::clear_dreamid() {
  dreamid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamRand::_internal_dreamid() const {
  return dreamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamRand::dreamid() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamRand.dreamId)
  return _internal_dreamid();
}
inline void SMoyuanDreamRand::_internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dreamid_ = value;
}
inline void SMoyuanDreamRand::set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dreamid(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanDreamRand.dreamId)
}

// -------------------------------------------------------------------

// CMoyuanTroveGoodsBackpackList

// -------------------------------------------------------------------

// SMoyuanTroveGoodsBackpackList

// repeated .moyuan.BMoyuanTroveGoodsBackpackList list = 1;
inline int SMoyuanTroveGoodsBackpackList::_internal_list_size() const {
  return list_.size();
}
inline int SMoyuanTroveGoodsBackpackList::list_size() const {
  return _internal_list_size();
}
inline void SMoyuanTroveGoodsBackpackList::clear_list() {
  list_.Clear();
}
inline ::moyuan::BMoyuanTroveGoodsBackpackList* SMoyuanTroveGoodsBackpackList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanTroveGoodsBackpackList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanTroveGoodsBackpackList >*
SMoyuanTroveGoodsBackpackList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:moyuan.SMoyuanTroveGoodsBackpackList.list)
  return &list_;
}
inline const ::moyuan::BMoyuanTroveGoodsBackpackList& SMoyuanTroveGoodsBackpackList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::moyuan::BMoyuanTroveGoodsBackpackList& SMoyuanTroveGoodsBackpackList::list(int index) const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanTroveGoodsBackpackList.list)
  return _internal_list(index);
}
inline ::moyuan::BMoyuanTroveGoodsBackpackList* SMoyuanTroveGoodsBackpackList::_internal_add_list() {
  return list_.Add();
}
inline ::moyuan::BMoyuanTroveGoodsBackpackList* SMoyuanTroveGoodsBackpackList::add_list() {
  // @@protoc_insertion_point(field_add:moyuan.SMoyuanTroveGoodsBackpackList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanTroveGoodsBackpackList >&
SMoyuanTroveGoodsBackpackList::list() const {
  // @@protoc_insertion_point(field_list:moyuan.SMoyuanTroveGoodsBackpackList.list)
  return list_;
}

// -------------------------------------------------------------------

// BMoyuanTroveGoodsBackpackList

// int32 id = 1;
inline void BMoyuanTroveGoodsBackpackList::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanTroveGoodsBackpackList::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanTroveGoodsBackpackList::id() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanTroveGoodsBackpackList.id)
  return _internal_id();
}
inline void BMoyuanTroveGoodsBackpackList::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void BMoyuanTroveGoodsBackpackList::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanTroveGoodsBackpackList.id)
}

// int32 type = 2;
inline void BMoyuanTroveGoodsBackpackList::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanTroveGoodsBackpackList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanTroveGoodsBackpackList::type() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanTroveGoodsBackpackList.type)
  return _internal_type();
}
inline void BMoyuanTroveGoodsBackpackList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void BMoyuanTroveGoodsBackpackList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanTroveGoodsBackpackList.type)
}

// int32 goodsId = 3;
inline void BMoyuanTroveGoodsBackpackList::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanTroveGoodsBackpackList::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanTroveGoodsBackpackList::goodsid() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanTroveGoodsBackpackList.goodsId)
  return _internal_goodsid();
}
inline void BMoyuanTroveGoodsBackpackList::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void BMoyuanTroveGoodsBackpackList::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanTroveGoodsBackpackList.goodsId)
}

// int32 bakCount = 4;
inline void BMoyuanTroveGoodsBackpackList::clear_bakcount() {
  bakcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanTroveGoodsBackpackList::_internal_bakcount() const {
  return bakcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanTroveGoodsBackpackList::bakcount() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanTroveGoodsBackpackList.bakCount)
  return _internal_bakcount();
}
inline void BMoyuanTroveGoodsBackpackList::_internal_set_bakcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bakcount_ = value;
}
inline void BMoyuanTroveGoodsBackpackList::set_bakcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bakcount(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanTroveGoodsBackpackList.bakCount)
}

// -------------------------------------------------------------------

// CMoyuanTroveGoodsAdd

// int32 goodsId = 1;
inline void CMoyuanTroveGoodsAdd::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanTroveGoodsAdd::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanTroveGoodsAdd::goodsid() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanTroveGoodsAdd.goodsId)
  return _internal_goodsid();
}
inline void CMoyuanTroveGoodsAdd::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CMoyuanTroveGoodsAdd::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanTroveGoodsAdd.goodsId)
}

// int32 num = 2;
inline void CMoyuanTroveGoodsAdd::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanTroveGoodsAdd::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanTroveGoodsAdd::num() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanTroveGoodsAdd.num)
  return _internal_num();
}
inline void CMoyuanTroveGoodsAdd::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void CMoyuanTroveGoodsAdd::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanTroveGoodsAdd.num)
}

// -------------------------------------------------------------------

// SMoyuanTroveGoodsAdd

// int32 status = 1;
inline void SMoyuanTroveGoodsAdd::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanTroveGoodsAdd::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanTroveGoodsAdd::status() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanTroveGoodsAdd.status)
  return _internal_status();
}
inline void SMoyuanTroveGoodsAdd::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SMoyuanTroveGoodsAdd::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanTroveGoodsAdd.status)
}

// -------------------------------------------------------------------

// CMoyuanDreamCommentList

// int32 dreamId = 1;
inline void CMoyuanDreamCommentList::clear_dreamid() {
  dreamid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamCommentList::_internal_dreamid() const {
  return dreamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamCommentList::dreamid() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamCommentList.dreamId)
  return _internal_dreamid();
}
inline void CMoyuanDreamCommentList::_internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dreamid_ = value;
}
inline void CMoyuanDreamCommentList::set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dreamid(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamCommentList.dreamId)
}

// int32 curPage = 2;
inline void CMoyuanDreamCommentList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamCommentList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamCommentList::curpage() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamCommentList.curPage)
  return _internal_curpage();
}
inline void CMoyuanDreamCommentList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CMoyuanDreamCommentList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamCommentList.curPage)
}

// int32 pageLimit = 3;
inline void CMoyuanDreamCommentList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamCommentList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamCommentList::pagelimit() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamCommentList.pageLimit)
  return _internal_pagelimit();
}
inline void CMoyuanDreamCommentList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CMoyuanDreamCommentList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamCommentList.pageLimit)
}

// -------------------------------------------------------------------

// SMoyuanDreamCommentList

// repeated .moyuan.BMoyuanDreamComment list = 1;
inline int SMoyuanDreamCommentList::_internal_list_size() const {
  return list_.size();
}
inline int SMoyuanDreamCommentList::list_size() const {
  return _internal_list_size();
}
inline void SMoyuanDreamCommentList::clear_list() {
  list_.Clear();
}
inline ::moyuan::BMoyuanDreamComment* SMoyuanDreamCommentList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanDreamCommentList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamComment >*
SMoyuanDreamCommentList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:moyuan.SMoyuanDreamCommentList.list)
  return &list_;
}
inline const ::moyuan::BMoyuanDreamComment& SMoyuanDreamCommentList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::moyuan::BMoyuanDreamComment& SMoyuanDreamCommentList::list(int index) const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamCommentList.list)
  return _internal_list(index);
}
inline ::moyuan::BMoyuanDreamComment* SMoyuanDreamCommentList::_internal_add_list() {
  return list_.Add();
}
inline ::moyuan::BMoyuanDreamComment* SMoyuanDreamCommentList::add_list() {
  // @@protoc_insertion_point(field_add:moyuan.SMoyuanDreamCommentList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamComment >&
SMoyuanDreamCommentList::list() const {
  // @@protoc_insertion_point(field_list:moyuan.SMoyuanDreamCommentList.list)
  return list_;
}

// int32 total = 2;
inline void SMoyuanDreamCommentList::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamCommentList::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamCommentList::total() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamCommentList.total)
  return _internal_total();
}
inline void SMoyuanDreamCommentList::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SMoyuanDreamCommentList::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanDreamCommentList.total)
}

// int32 curPage = 3;
inline void SMoyuanDreamCommentList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamCommentList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamCommentList::curpage() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamCommentList.curPage)
  return _internal_curpage();
}
inline void SMoyuanDreamCommentList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SMoyuanDreamCommentList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanDreamCommentList.curPage)
}

// int32 pageLimit = 4;
inline void SMoyuanDreamCommentList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamCommentList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamCommentList::pagelimit() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamCommentList.pageLimit)
  return _internal_pagelimit();
}
inline void SMoyuanDreamCommentList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void SMoyuanDreamCommentList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanDreamCommentList.pageLimit)
}

// -------------------------------------------------------------------

// BMoyuanDreamComment

// int32 id = 1;
inline void BMoyuanDreamComment::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::id() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.id)
  return _internal_id();
}
inline void BMoyuanDreamComment::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void BMoyuanDreamComment::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.id)
}

// int32 dreamId = 2;
inline void BMoyuanDreamComment::clear_dreamid() {
  dreamid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::_internal_dreamid() const {
  return dreamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::dreamid() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.dreamId)
  return _internal_dreamid();
}
inline void BMoyuanDreamComment::_internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dreamid_ = value;
}
inline void BMoyuanDreamComment::set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dreamid(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.dreamId)
}

// int32 isAnonymous = 3;
inline void BMoyuanDreamComment::clear_isanonymous() {
  isanonymous_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::_internal_isanonymous() const {
  return isanonymous_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::isanonymous() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.isAnonymous)
  return _internal_isanonymous();
}
inline void BMoyuanDreamComment::_internal_set_isanonymous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isanonymous_ = value;
}
inline void BMoyuanDreamComment::set_isanonymous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isanonymous(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.isAnonymous)
}

// int32 uid = 4;
inline void BMoyuanDreamComment::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::uid() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.uid)
  return _internal_uid();
}
inline void BMoyuanDreamComment::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BMoyuanDreamComment::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.uid)
}

// string nick = 5;
inline void BMoyuanDreamComment::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoyuanDreamComment::nick() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.nick)
  return _internal_nick();
}
inline void BMoyuanDreamComment::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.nick)
}
inline std::string* BMoyuanDreamComment::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:moyuan.BMoyuanDreamComment.nick)
  return _internal_mutable_nick();
}
inline const std::string& BMoyuanDreamComment::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void BMoyuanDreamComment::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoyuanDreamComment::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.BMoyuanDreamComment.nick)
}
inline void BMoyuanDreamComment::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.BMoyuanDreamComment.nick)
}
inline void BMoyuanDreamComment::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.BMoyuanDreamComment.nick)
}
inline std::string* BMoyuanDreamComment::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoyuanDreamComment::release_nick() {
  // @@protoc_insertion_point(field_release:moyuan.BMoyuanDreamComment.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoyuanDreamComment::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:moyuan.BMoyuanDreamComment.nick)
}

// string head = 6;
inline void BMoyuanDreamComment::clear_head() {
  head_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoyuanDreamComment::head() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.head)
  return _internal_head();
}
inline void BMoyuanDreamComment::set_head(const std::string& value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.head)
}
inline std::string* BMoyuanDreamComment::mutable_head() {
  // @@protoc_insertion_point(field_mutable:moyuan.BMoyuanDreamComment.head)
  return _internal_mutable_head();
}
inline const std::string& BMoyuanDreamComment::_internal_head() const {
  return head_.GetNoArena();
}
inline void BMoyuanDreamComment::_internal_set_head(const std::string& value) {
  
  head_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoyuanDreamComment::set_head(std::string&& value) {
  
  head_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.BMoyuanDreamComment.head)
}
inline void BMoyuanDreamComment::set_head(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.BMoyuanDreamComment.head)
}
inline void BMoyuanDreamComment::set_head(const char* value, size_t size) {
  
  head_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.BMoyuanDreamComment.head)
}
inline std::string* BMoyuanDreamComment::_internal_mutable_head() {
  
  return head_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoyuanDreamComment::release_head() {
  // @@protoc_insertion_point(field_release:moyuan.BMoyuanDreamComment.head)
  
  return head_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoyuanDreamComment::set_allocated_head(std::string* head) {
  if (head != nullptr) {
    
  } else {
    
  }
  head_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head);
  // @@protoc_insertion_point(field_set_allocated:moyuan.BMoyuanDreamComment.head)
}

// int32 toCommentId = 7;
inline void BMoyuanDreamComment::clear_tocommentid() {
  tocommentid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::_internal_tocommentid() const {
  return tocommentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::tocommentid() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.toCommentId)
  return _internal_tocommentid();
}
inline void BMoyuanDreamComment::_internal_set_tocommentid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tocommentid_ = value;
}
inline void BMoyuanDreamComment::set_tocommentid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tocommentid(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.toCommentId)
}

// int32 toCommentUid = 8;
inline void BMoyuanDreamComment::clear_tocommentuid() {
  tocommentuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::_internal_tocommentuid() const {
  return tocommentuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamComment::tocommentuid() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.toCommentUid)
  return _internal_tocommentuid();
}
inline void BMoyuanDreamComment::_internal_set_tocommentuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tocommentuid_ = value;
}
inline void BMoyuanDreamComment::set_tocommentuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tocommentuid(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.toCommentUid)
}

// string toCommentNick = 9;
inline void BMoyuanDreamComment::clear_tocommentnick() {
  tocommentnick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoyuanDreamComment::tocommentnick() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.toCommentNick)
  return _internal_tocommentnick();
}
inline void BMoyuanDreamComment::set_tocommentnick(const std::string& value) {
  _internal_set_tocommentnick(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.toCommentNick)
}
inline std::string* BMoyuanDreamComment::mutable_tocommentnick() {
  // @@protoc_insertion_point(field_mutable:moyuan.BMoyuanDreamComment.toCommentNick)
  return _internal_mutable_tocommentnick();
}
inline const std::string& BMoyuanDreamComment::_internal_tocommentnick() const {
  return tocommentnick_.GetNoArena();
}
inline void BMoyuanDreamComment::_internal_set_tocommentnick(const std::string& value) {
  
  tocommentnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoyuanDreamComment::set_tocommentnick(std::string&& value) {
  
  tocommentnick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.BMoyuanDreamComment.toCommentNick)
}
inline void BMoyuanDreamComment::set_tocommentnick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tocommentnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.BMoyuanDreamComment.toCommentNick)
}
inline void BMoyuanDreamComment::set_tocommentnick(const char* value, size_t size) {
  
  tocommentnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.BMoyuanDreamComment.toCommentNick)
}
inline std::string* BMoyuanDreamComment::_internal_mutable_tocommentnick() {
  
  return tocommentnick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoyuanDreamComment::release_tocommentnick() {
  // @@protoc_insertion_point(field_release:moyuan.BMoyuanDreamComment.toCommentNick)
  
  return tocommentnick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoyuanDreamComment::set_allocated_tocommentnick(std::string* tocommentnick) {
  if (tocommentnick != nullptr) {
    
  } else {
    
  }
  tocommentnick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tocommentnick);
  // @@protoc_insertion_point(field_set_allocated:moyuan.BMoyuanDreamComment.toCommentNick)
}

// string comment = 10;
inline void BMoyuanDreamComment::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoyuanDreamComment::comment() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.comment)
  return _internal_comment();
}
inline void BMoyuanDreamComment::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.comment)
}
inline std::string* BMoyuanDreamComment::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:moyuan.BMoyuanDreamComment.comment)
  return _internal_mutable_comment();
}
inline const std::string& BMoyuanDreamComment::_internal_comment() const {
  return comment_.GetNoArena();
}
inline void BMoyuanDreamComment::_internal_set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoyuanDreamComment::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.BMoyuanDreamComment.comment)
}
inline void BMoyuanDreamComment::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.BMoyuanDreamComment.comment)
}
inline void BMoyuanDreamComment::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.BMoyuanDreamComment.comment)
}
inline std::string* BMoyuanDreamComment::_internal_mutable_comment() {
  
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoyuanDreamComment::release_comment() {
  // @@protoc_insertion_point(field_release:moyuan.BMoyuanDreamComment.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoyuanDreamComment::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:moyuan.BMoyuanDreamComment.comment)
}

// string createdAt = 11;
inline void BMoyuanDreamComment::clear_createdat() {
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoyuanDreamComment::createdat() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamComment.createdAt)
  return _internal_createdat();
}
inline void BMoyuanDreamComment::set_createdat(const std::string& value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamComment.createdAt)
}
inline std::string* BMoyuanDreamComment::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:moyuan.BMoyuanDreamComment.createdAt)
  return _internal_mutable_createdat();
}
inline const std::string& BMoyuanDreamComment::_internal_createdat() const {
  return createdat_.GetNoArena();
}
inline void BMoyuanDreamComment::_internal_set_createdat(const std::string& value) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoyuanDreamComment::set_createdat(std::string&& value) {
  
  createdat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.BMoyuanDreamComment.createdAt)
}
inline void BMoyuanDreamComment::set_createdat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.BMoyuanDreamComment.createdAt)
}
inline void BMoyuanDreamComment::set_createdat(const char* value, size_t size) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.BMoyuanDreamComment.createdAt)
}
inline std::string* BMoyuanDreamComment::_internal_mutable_createdat() {
  
  return createdat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoyuanDreamComment::release_createdat() {
  // @@protoc_insertion_point(field_release:moyuan.BMoyuanDreamComment.createdAt)
  
  return createdat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoyuanDreamComment::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat);
  // @@protoc_insertion_point(field_set_allocated:moyuan.BMoyuanDreamComment.createdAt)
}

// -------------------------------------------------------------------

// CMoyuanDreamComment

// int32 dreamId = 1;
inline void CMoyuanDreamComment::clear_dreamid() {
  dreamid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamComment::_internal_dreamid() const {
  return dreamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamComment::dreamid() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamComment.dreamId)
  return _internal_dreamid();
}
inline void CMoyuanDreamComment::_internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dreamid_ = value;
}
inline void CMoyuanDreamComment::set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dreamid(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamComment.dreamId)
}

// int32 isAnonymous = 2;
inline void CMoyuanDreamComment::clear_isanonymous() {
  isanonymous_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamComment::_internal_isanonymous() const {
  return isanonymous_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamComment::isanonymous() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamComment.isAnonymous)
  return _internal_isanonymous();
}
inline void CMoyuanDreamComment::_internal_set_isanonymous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isanonymous_ = value;
}
inline void CMoyuanDreamComment::set_isanonymous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isanonymous(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamComment.isAnonymous)
}

// string nick = 5;
inline void CMoyuanDreamComment::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMoyuanDreamComment::nick() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamComment.nick)
  return _internal_nick();
}
inline void CMoyuanDreamComment::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamComment.nick)
}
inline std::string* CMoyuanDreamComment::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:moyuan.CMoyuanDreamComment.nick)
  return _internal_mutable_nick();
}
inline const std::string& CMoyuanDreamComment::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void CMoyuanDreamComment::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMoyuanDreamComment::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.CMoyuanDreamComment.nick)
}
inline void CMoyuanDreamComment::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.CMoyuanDreamComment.nick)
}
inline void CMoyuanDreamComment::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.CMoyuanDreamComment.nick)
}
inline std::string* CMoyuanDreamComment::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMoyuanDreamComment::release_nick() {
  // @@protoc_insertion_point(field_release:moyuan.CMoyuanDreamComment.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMoyuanDreamComment::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:moyuan.CMoyuanDreamComment.nick)
}

// string head = 6;
inline void CMoyuanDreamComment::clear_head() {
  head_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMoyuanDreamComment::head() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamComment.head)
  return _internal_head();
}
inline void CMoyuanDreamComment::set_head(const std::string& value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamComment.head)
}
inline std::string* CMoyuanDreamComment::mutable_head() {
  // @@protoc_insertion_point(field_mutable:moyuan.CMoyuanDreamComment.head)
  return _internal_mutable_head();
}
inline const std::string& CMoyuanDreamComment::_internal_head() const {
  return head_.GetNoArena();
}
inline void CMoyuanDreamComment::_internal_set_head(const std::string& value) {
  
  head_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMoyuanDreamComment::set_head(std::string&& value) {
  
  head_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.CMoyuanDreamComment.head)
}
inline void CMoyuanDreamComment::set_head(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.CMoyuanDreamComment.head)
}
inline void CMoyuanDreamComment::set_head(const char* value, size_t size) {
  
  head_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.CMoyuanDreamComment.head)
}
inline std::string* CMoyuanDreamComment::_internal_mutable_head() {
  
  return head_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMoyuanDreamComment::release_head() {
  // @@protoc_insertion_point(field_release:moyuan.CMoyuanDreamComment.head)
  
  return head_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMoyuanDreamComment::set_allocated_head(std::string* head) {
  if (head != nullptr) {
    
  } else {
    
  }
  head_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head);
  // @@protoc_insertion_point(field_set_allocated:moyuan.CMoyuanDreamComment.head)
}

// int32 toCommentId = 7;
inline void CMoyuanDreamComment::clear_tocommentid() {
  tocommentid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamComment::_internal_tocommentid() const {
  return tocommentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamComment::tocommentid() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamComment.toCommentId)
  return _internal_tocommentid();
}
inline void CMoyuanDreamComment::_internal_set_tocommentid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tocommentid_ = value;
}
inline void CMoyuanDreamComment::set_tocommentid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tocommentid(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamComment.toCommentId)
}

// int32 toCommentUid = 8;
inline void CMoyuanDreamComment::clear_tocommentuid() {
  tocommentuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamComment::_internal_tocommentuid() const {
  return tocommentuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamComment::tocommentuid() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamComment.toCommentUid)
  return _internal_tocommentuid();
}
inline void CMoyuanDreamComment::_internal_set_tocommentuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tocommentuid_ = value;
}
inline void CMoyuanDreamComment::set_tocommentuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tocommentuid(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamComment.toCommentUid)
}

// string toCommentNick = 9;
inline void CMoyuanDreamComment::clear_tocommentnick() {
  tocommentnick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMoyuanDreamComment::tocommentnick() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamComment.toCommentNick)
  return _internal_tocommentnick();
}
inline void CMoyuanDreamComment::set_tocommentnick(const std::string& value) {
  _internal_set_tocommentnick(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamComment.toCommentNick)
}
inline std::string* CMoyuanDreamComment::mutable_tocommentnick() {
  // @@protoc_insertion_point(field_mutable:moyuan.CMoyuanDreamComment.toCommentNick)
  return _internal_mutable_tocommentnick();
}
inline const std::string& CMoyuanDreamComment::_internal_tocommentnick() const {
  return tocommentnick_.GetNoArena();
}
inline void CMoyuanDreamComment::_internal_set_tocommentnick(const std::string& value) {
  
  tocommentnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMoyuanDreamComment::set_tocommentnick(std::string&& value) {
  
  tocommentnick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.CMoyuanDreamComment.toCommentNick)
}
inline void CMoyuanDreamComment::set_tocommentnick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tocommentnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.CMoyuanDreamComment.toCommentNick)
}
inline void CMoyuanDreamComment::set_tocommentnick(const char* value, size_t size) {
  
  tocommentnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.CMoyuanDreamComment.toCommentNick)
}
inline std::string* CMoyuanDreamComment::_internal_mutable_tocommentnick() {
  
  return tocommentnick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMoyuanDreamComment::release_tocommentnick() {
  // @@protoc_insertion_point(field_release:moyuan.CMoyuanDreamComment.toCommentNick)
  
  return tocommentnick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMoyuanDreamComment::set_allocated_tocommentnick(std::string* tocommentnick) {
  if (tocommentnick != nullptr) {
    
  } else {
    
  }
  tocommentnick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tocommentnick);
  // @@protoc_insertion_point(field_set_allocated:moyuan.CMoyuanDreamComment.toCommentNick)
}

// string comment = 10;
inline void CMoyuanDreamComment::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMoyuanDreamComment::comment() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamComment.comment)
  return _internal_comment();
}
inline void CMoyuanDreamComment::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamComment.comment)
}
inline std::string* CMoyuanDreamComment::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:moyuan.CMoyuanDreamComment.comment)
  return _internal_mutable_comment();
}
inline const std::string& CMoyuanDreamComment::_internal_comment() const {
  return comment_.GetNoArena();
}
inline void CMoyuanDreamComment::_internal_set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMoyuanDreamComment::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.CMoyuanDreamComment.comment)
}
inline void CMoyuanDreamComment::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.CMoyuanDreamComment.comment)
}
inline void CMoyuanDreamComment::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.CMoyuanDreamComment.comment)
}
inline std::string* CMoyuanDreamComment::_internal_mutable_comment() {
  
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMoyuanDreamComment::release_comment() {
  // @@protoc_insertion_point(field_release:moyuan.CMoyuanDreamComment.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMoyuanDreamComment::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:moyuan.CMoyuanDreamComment.comment)
}

// -------------------------------------------------------------------

// SMoyuanDreamComment

// int32 status = 1;
inline void SMoyuanDreamComment::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamComment::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanDreamComment::status() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamComment.status)
  return _internal_status();
}
inline void SMoyuanDreamComment::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SMoyuanDreamComment::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanDreamComment.status)
}

// -------------------------------------------------------------------

// CMoyuanAnonymousId

// -------------------------------------------------------------------

// SMoyuanAnonymousId

// string anonymousId = 1;
inline void SMoyuanAnonymousId::clear_anonymousid() {
  anonymousid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMoyuanAnonymousId::anonymousid() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanAnonymousId.anonymousId)
  return _internal_anonymousid();
}
inline void SMoyuanAnonymousId::set_anonymousid(const std::string& value) {
  _internal_set_anonymousid(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanAnonymousId.anonymousId)
}
inline std::string* SMoyuanAnonymousId::mutable_anonymousid() {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanAnonymousId.anonymousId)
  return _internal_mutable_anonymousid();
}
inline const std::string& SMoyuanAnonymousId::_internal_anonymousid() const {
  return anonymousid_.GetNoArena();
}
inline void SMoyuanAnonymousId::_internal_set_anonymousid(const std::string& value) {
  
  anonymousid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMoyuanAnonymousId::set_anonymousid(std::string&& value) {
  
  anonymousid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.SMoyuanAnonymousId.anonymousId)
}
inline void SMoyuanAnonymousId::set_anonymousid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anonymousid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.SMoyuanAnonymousId.anonymousId)
}
inline void SMoyuanAnonymousId::set_anonymousid(const char* value, size_t size) {
  
  anonymousid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.SMoyuanAnonymousId.anonymousId)
}
inline std::string* SMoyuanAnonymousId::_internal_mutable_anonymousid() {
  
  return anonymousid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMoyuanAnonymousId::release_anonymousid() {
  // @@protoc_insertion_point(field_release:moyuan.SMoyuanAnonymousId.anonymousId)
  
  return anonymousid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMoyuanAnonymousId::set_allocated_anonymousid(std::string* anonymousid) {
  if (anonymousid != nullptr) {
    
  } else {
    
  }
  anonymousid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anonymousid);
  // @@protoc_insertion_point(field_set_allocated:moyuan.SMoyuanAnonymousId.anonymousId)
}

// string anonymousHead = 2;
inline void SMoyuanAnonymousId::clear_anonymoushead() {
  anonymoushead_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMoyuanAnonymousId::anonymoushead() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanAnonymousId.anonymousHead)
  return _internal_anonymoushead();
}
inline void SMoyuanAnonymousId::set_anonymoushead(const std::string& value) {
  _internal_set_anonymoushead(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanAnonymousId.anonymousHead)
}
inline std::string* SMoyuanAnonymousId::mutable_anonymoushead() {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanAnonymousId.anonymousHead)
  return _internal_mutable_anonymoushead();
}
inline const std::string& SMoyuanAnonymousId::_internal_anonymoushead() const {
  return anonymoushead_.GetNoArena();
}
inline void SMoyuanAnonymousId::_internal_set_anonymoushead(const std::string& value) {
  
  anonymoushead_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMoyuanAnonymousId::set_anonymoushead(std::string&& value) {
  
  anonymoushead_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.SMoyuanAnonymousId.anonymousHead)
}
inline void SMoyuanAnonymousId::set_anonymoushead(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anonymoushead_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.SMoyuanAnonymousId.anonymousHead)
}
inline void SMoyuanAnonymousId::set_anonymoushead(const char* value, size_t size) {
  
  anonymoushead_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.SMoyuanAnonymousId.anonymousHead)
}
inline std::string* SMoyuanAnonymousId::_internal_mutable_anonymoushead() {
  
  return anonymoushead_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMoyuanAnonymousId::release_anonymoushead() {
  // @@protoc_insertion_point(field_release:moyuan.SMoyuanAnonymousId.anonymousHead)
  
  return anonymoushead_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMoyuanAnonymousId::set_allocated_anonymoushead(std::string* anonymoushead) {
  if (anonymoushead != nullptr) {
    
  } else {
    
  }
  anonymoushead_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anonymoushead);
  // @@protoc_insertion_point(field_set_allocated:moyuan.SMoyuanAnonymousId.anonymousHead)
}

// -------------------------------------------------------------------

// CMoyuanDreamCommentNoticeList

// -------------------------------------------------------------------

// SMoyuanDreamCommentNoticeList

// repeated .moyuan.BMoyuanDreamCommentNotice list = 1;
inline int SMoyuanDreamCommentNoticeList::_internal_list_size() const {
  return list_.size();
}
inline int SMoyuanDreamCommentNoticeList::list_size() const {
  return _internal_list_size();
}
inline void SMoyuanDreamCommentNoticeList::clear_list() {
  list_.Clear();
}
inline ::moyuan::BMoyuanDreamCommentNotice* SMoyuanDreamCommentNoticeList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanDreamCommentNoticeList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamCommentNotice >*
SMoyuanDreamCommentNoticeList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:moyuan.SMoyuanDreamCommentNoticeList.list)
  return &list_;
}
inline const ::moyuan::BMoyuanDreamCommentNotice& SMoyuanDreamCommentNoticeList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::moyuan::BMoyuanDreamCommentNotice& SMoyuanDreamCommentNoticeList::list(int index) const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamCommentNoticeList.list)
  return _internal_list(index);
}
inline ::moyuan::BMoyuanDreamCommentNotice* SMoyuanDreamCommentNoticeList::_internal_add_list() {
  return list_.Add();
}
inline ::moyuan::BMoyuanDreamCommentNotice* SMoyuanDreamCommentNoticeList::add_list() {
  // @@protoc_insertion_point(field_add:moyuan.SMoyuanDreamCommentNoticeList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamCommentNotice >&
SMoyuanDreamCommentNoticeList::list() const {
  // @@protoc_insertion_point(field_list:moyuan.SMoyuanDreamCommentNoticeList.list)
  return list_;
}

// -------------------------------------------------------------------

// BMoyuanDreamCommentNotice

// int32 dreamId = 1;
inline void BMoyuanDreamCommentNotice::clear_dreamid() {
  dreamid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamCommentNotice::_internal_dreamid() const {
  return dreamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamCommentNotice::dreamid() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamCommentNotice.dreamId)
  return _internal_dreamid();
}
inline void BMoyuanDreamCommentNotice::_internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dreamid_ = value;
}
inline void BMoyuanDreamCommentNotice::set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dreamid(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamCommentNotice.dreamId)
}

// string comment = 2;
inline void BMoyuanDreamCommentNotice::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoyuanDreamCommentNotice::comment() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamCommentNotice.comment)
  return _internal_comment();
}
inline void BMoyuanDreamCommentNotice::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamCommentNotice.comment)
}
inline std::string* BMoyuanDreamCommentNotice::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:moyuan.BMoyuanDreamCommentNotice.comment)
  return _internal_mutable_comment();
}
inline const std::string& BMoyuanDreamCommentNotice::_internal_comment() const {
  return comment_.GetNoArena();
}
inline void BMoyuanDreamCommentNotice::_internal_set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoyuanDreamCommentNotice::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.BMoyuanDreamCommentNotice.comment)
}
inline void BMoyuanDreamCommentNotice::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.BMoyuanDreamCommentNotice.comment)
}
inline void BMoyuanDreamCommentNotice::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.BMoyuanDreamCommentNotice.comment)
}
inline std::string* BMoyuanDreamCommentNotice::_internal_mutable_comment() {
  
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoyuanDreamCommentNotice::release_comment() {
  // @@protoc_insertion_point(field_release:moyuan.BMoyuanDreamCommentNotice.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoyuanDreamCommentNotice::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:moyuan.BMoyuanDreamCommentNotice.comment)
}

// string tips = 3;
inline void BMoyuanDreamCommentNotice::clear_tips() {
  tips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoyuanDreamCommentNotice::tips() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamCommentNotice.tips)
  return _internal_tips();
}
inline void BMoyuanDreamCommentNotice::set_tips(const std::string& value) {
  _internal_set_tips(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamCommentNotice.tips)
}
inline std::string* BMoyuanDreamCommentNotice::mutable_tips() {
  // @@protoc_insertion_point(field_mutable:moyuan.BMoyuanDreamCommentNotice.tips)
  return _internal_mutable_tips();
}
inline const std::string& BMoyuanDreamCommentNotice::_internal_tips() const {
  return tips_.GetNoArena();
}
inline void BMoyuanDreamCommentNotice::_internal_set_tips(const std::string& value) {
  
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoyuanDreamCommentNotice::set_tips(std::string&& value) {
  
  tips_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.BMoyuanDreamCommentNotice.tips)
}
inline void BMoyuanDreamCommentNotice::set_tips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.BMoyuanDreamCommentNotice.tips)
}
inline void BMoyuanDreamCommentNotice::set_tips(const char* value, size_t size) {
  
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.BMoyuanDreamCommentNotice.tips)
}
inline std::string* BMoyuanDreamCommentNotice::_internal_mutable_tips() {
  
  return tips_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoyuanDreamCommentNotice::release_tips() {
  // @@protoc_insertion_point(field_release:moyuan.BMoyuanDreamCommentNotice.tips)
  
  return tips_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoyuanDreamCommentNotice::set_allocated_tips(std::string* tips) {
  if (tips != nullptr) {
    
  } else {
    
  }
  tips_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tips);
  // @@protoc_insertion_point(field_set_allocated:moyuan.BMoyuanDreamCommentNotice.tips)
}

// string Head = 4;
inline void BMoyuanDreamCommentNotice::clear_head() {
  head_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoyuanDreamCommentNotice::head() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamCommentNotice.Head)
  return _internal_head();
}
inline void BMoyuanDreamCommentNotice::set_head(const std::string& value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamCommentNotice.Head)
}
inline std::string* BMoyuanDreamCommentNotice::mutable_head() {
  // @@protoc_insertion_point(field_mutable:moyuan.BMoyuanDreamCommentNotice.Head)
  return _internal_mutable_head();
}
inline const std::string& BMoyuanDreamCommentNotice::_internal_head() const {
  return head_.GetNoArena();
}
inline void BMoyuanDreamCommentNotice::_internal_set_head(const std::string& value) {
  
  head_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoyuanDreamCommentNotice::set_head(std::string&& value) {
  
  head_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.BMoyuanDreamCommentNotice.Head)
}
inline void BMoyuanDreamCommentNotice::set_head(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.BMoyuanDreamCommentNotice.Head)
}
inline void BMoyuanDreamCommentNotice::set_head(const char* value, size_t size) {
  
  head_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.BMoyuanDreamCommentNotice.Head)
}
inline std::string* BMoyuanDreamCommentNotice::_internal_mutable_head() {
  
  return head_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoyuanDreamCommentNotice::release_head() {
  // @@protoc_insertion_point(field_release:moyuan.BMoyuanDreamCommentNotice.Head)
  
  return head_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoyuanDreamCommentNotice::set_allocated_head(std::string* head) {
  if (head != nullptr) {
    
  } else {
    
  }
  head_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head);
  // @@protoc_insertion_point(field_set_allocated:moyuan.BMoyuanDreamCommentNotice.Head)
}

// -------------------------------------------------------------------

// CMoyuanMineDreamList

// int32 curPage = 1;
inline void CMoyuanMineDreamList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanMineDreamList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanMineDreamList::curpage() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanMineDreamList.curPage)
  return _internal_curpage();
}
inline void CMoyuanMineDreamList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CMoyuanMineDreamList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanMineDreamList.curPage)
}

// int32 pageLimit = 2;
inline void CMoyuanMineDreamList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanMineDreamList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanMineDreamList::pagelimit() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanMineDreamList.pageLimit)
  return _internal_pagelimit();
}
inline void CMoyuanMineDreamList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CMoyuanMineDreamList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanMineDreamList.pageLimit)
}

// -------------------------------------------------------------------

// SMoyuanMineDreamList

// repeated .moyuan.BMoyuanDreamInfo list = 1;
inline int SMoyuanMineDreamList::_internal_list_size() const {
  return list_.size();
}
inline int SMoyuanMineDreamList::list_size() const {
  return _internal_list_size();
}
inline void SMoyuanMineDreamList::clear_list() {
  list_.Clear();
}
inline ::moyuan::BMoyuanDreamInfo* SMoyuanMineDreamList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanMineDreamList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamInfo >*
SMoyuanMineDreamList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:moyuan.SMoyuanMineDreamList.list)
  return &list_;
}
inline const ::moyuan::BMoyuanDreamInfo& SMoyuanMineDreamList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::moyuan::BMoyuanDreamInfo& SMoyuanMineDreamList::list(int index) const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanMineDreamList.list)
  return _internal_list(index);
}
inline ::moyuan::BMoyuanDreamInfo* SMoyuanMineDreamList::_internal_add_list() {
  return list_.Add();
}
inline ::moyuan::BMoyuanDreamInfo* SMoyuanMineDreamList::add_list() {
  // @@protoc_insertion_point(field_add:moyuan.SMoyuanMineDreamList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::moyuan::BMoyuanDreamInfo >&
SMoyuanMineDreamList::list() const {
  // @@protoc_insertion_point(field_list:moyuan.SMoyuanMineDreamList.list)
  return list_;
}

// int32 total = 2;
inline void SMoyuanMineDreamList::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanMineDreamList::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanMineDreamList::total() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanMineDreamList.total)
  return _internal_total();
}
inline void SMoyuanMineDreamList::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SMoyuanMineDreamList::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanMineDreamList.total)
}

// int32 curPage = 3;
inline void SMoyuanMineDreamList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanMineDreamList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanMineDreamList::curpage() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanMineDreamList.curPage)
  return _internal_curpage();
}
inline void SMoyuanMineDreamList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SMoyuanMineDreamList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanMineDreamList.curPage)
}

// int32 pageLimit = 4;
inline void SMoyuanMineDreamList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanMineDreamList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoyuanMineDreamList::pagelimit() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanMineDreamList.pageLimit)
  return _internal_pagelimit();
}
inline void SMoyuanMineDreamList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void SMoyuanMineDreamList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:moyuan.SMoyuanMineDreamList.pageLimit)
}

// -------------------------------------------------------------------

// BMoyuanDreamInfo

// int32 uid = 1;
inline void BMoyuanDreamInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamInfo::uid() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamInfo.uid)
  return _internal_uid();
}
inline void BMoyuanDreamInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BMoyuanDreamInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamInfo.uid)
}

// string desc = 2;
inline void BMoyuanDreamInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoyuanDreamInfo::desc() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamInfo.desc)
  return _internal_desc();
}
inline void BMoyuanDreamInfo::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamInfo.desc)
}
inline std::string* BMoyuanDreamInfo::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:moyuan.BMoyuanDreamInfo.desc)
  return _internal_mutable_desc();
}
inline const std::string& BMoyuanDreamInfo::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void BMoyuanDreamInfo::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoyuanDreamInfo::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moyuan.BMoyuanDreamInfo.desc)
}
inline void BMoyuanDreamInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moyuan.BMoyuanDreamInfo.desc)
}
inline void BMoyuanDreamInfo::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moyuan.BMoyuanDreamInfo.desc)
}
inline std::string* BMoyuanDreamInfo::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoyuanDreamInfo::release_desc() {
  // @@protoc_insertion_point(field_release:moyuan.BMoyuanDreamInfo.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoyuanDreamInfo::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:moyuan.BMoyuanDreamInfo.desc)
}

// int32 dreamId = 3;
inline void BMoyuanDreamInfo::clear_dreamid() {
  dreamid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamInfo::_internal_dreamid() const {
  return dreamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamInfo::dreamid() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamInfo.dreamId)
  return _internal_dreamid();
}
inline void BMoyuanDreamInfo::_internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dreamid_ = value;
}
inline void BMoyuanDreamInfo::set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dreamid(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamInfo.dreamId)
}

// int32 commentNum = 4;
inline void BMoyuanDreamInfo::clear_commentnum() {
  commentnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamInfo::_internal_commentnum() const {
  return commentnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoyuanDreamInfo::commentnum() const {
  // @@protoc_insertion_point(field_get:moyuan.BMoyuanDreamInfo.commentNum)
  return _internal_commentnum();
}
inline void BMoyuanDreamInfo::_internal_set_commentnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  commentnum_ = value;
}
inline void BMoyuanDreamInfo::set_commentnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_commentnum(value);
  // @@protoc_insertion_point(field_set:moyuan.BMoyuanDreamInfo.commentNum)
}

// -------------------------------------------------------------------

// CMoyuanDreamInfo

// int32 dreamId = 1;
inline void CMoyuanDreamInfo::clear_dreamid() {
  dreamid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamInfo::_internal_dreamid() const {
  return dreamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMoyuanDreamInfo::dreamid() const {
  // @@protoc_insertion_point(field_get:moyuan.CMoyuanDreamInfo.dreamId)
  return _internal_dreamid();
}
inline void CMoyuanDreamInfo::_internal_set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dreamid_ = value;
}
inline void CMoyuanDreamInfo::set_dreamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dreamid(value);
  // @@protoc_insertion_point(field_set:moyuan.CMoyuanDreamInfo.dreamId)
}

// -------------------------------------------------------------------

// SMoyuanDreamInfo

// .moyuan.BMoyuanDreamInfo info = 1;
inline bool SMoyuanDreamInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SMoyuanDreamInfo::has_info() const {
  return _internal_has_info();
}
inline void SMoyuanDreamInfo::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::moyuan::BMoyuanDreamInfo& SMoyuanDreamInfo::_internal_info() const {
  const ::moyuan::BMoyuanDreamInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::moyuan::BMoyuanDreamInfo*>(
      &::moyuan::_BMoyuanDreamInfo_default_instance_);
}
inline const ::moyuan::BMoyuanDreamInfo& SMoyuanDreamInfo::info() const {
  // @@protoc_insertion_point(field_get:moyuan.SMoyuanDreamInfo.info)
  return _internal_info();
}
inline ::moyuan::BMoyuanDreamInfo* SMoyuanDreamInfo::release_info() {
  // @@protoc_insertion_point(field_release:moyuan.SMoyuanDreamInfo.info)
  
  ::moyuan::BMoyuanDreamInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::moyuan::BMoyuanDreamInfo* SMoyuanDreamInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::moyuan::BMoyuanDreamInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::moyuan::BMoyuanDreamInfo* SMoyuanDreamInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:moyuan.SMoyuanDreamInfo.info)
  return _internal_mutable_info();
}
inline void SMoyuanDreamInfo::set_allocated_info(::moyuan::BMoyuanDreamInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:moyuan.SMoyuanDreamInfo.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace moyuan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_moyuan_2eproto
