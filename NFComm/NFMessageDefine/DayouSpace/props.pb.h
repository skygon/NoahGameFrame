// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: props.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_props_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_props_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_props_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_props_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_props_2eproto;
namespace props {
class CConsumeProps;
class CConsumePropsDefaultTypeInternal;
extern CConsumePropsDefaultTypeInternal _CConsumeProps_default_instance_;
class CGetProps;
class CGetPropsDefaultTypeInternal;
extern CGetPropsDefaultTypeInternal _CGetProps_default_instance_;
class SConsumeProps;
class SConsumePropsDefaultTypeInternal;
extern SConsumePropsDefaultTypeInternal _SConsumeProps_default_instance_;
class SGetProps;
class SGetPropsDefaultTypeInternal;
extern SGetPropsDefaultTypeInternal _SGetProps_default_instance_;
}  // namespace props
PROTOBUF_NAMESPACE_OPEN
template<> ::props::CConsumeProps* Arena::CreateMaybeMessage<::props::CConsumeProps>(Arena*);
template<> ::props::CGetProps* Arena::CreateMaybeMessage<::props::CGetProps>(Arena*);
template<> ::props::SConsumeProps* Arena::CreateMaybeMessage<::props::SConsumeProps>(Arena*);
template<> ::props::SGetProps* Arena::CreateMaybeMessage<::props::SGetProps>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace props {

// ===================================================================

class CGetProps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:props.CGetProps) */ {
 public:
  CGetProps();
  virtual ~CGetProps();

  CGetProps(const CGetProps& from);
  CGetProps(CGetProps&& from) noexcept
    : CGetProps() {
    *this = ::std::move(from);
  }

  inline CGetProps& operator=(const CGetProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetProps& operator=(CGetProps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetProps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetProps* internal_default_instance() {
    return reinterpret_cast<const CGetProps*>(
               &_CGetProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGetProps& a, CGetProps& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetProps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetProps* New() const final {
    return CreateMaybeMessage<CGetProps>(nullptr);
  }

  CGetProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetProps& from);
  void MergeFrom(const CGetProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "props.CGetProps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_props_2eproto);
    return ::descriptor_table_props_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:props.CGetProps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_props_2eproto;
};
// -------------------------------------------------------------------

class SGetProps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:props.SGetProps) */ {
 public:
  SGetProps();
  virtual ~SGetProps();

  SGetProps(const SGetProps& from);
  SGetProps(SGetProps&& from) noexcept
    : SGetProps() {
    *this = ::std::move(from);
  }

  inline SGetProps& operator=(const SGetProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetProps& operator=(SGetProps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetProps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetProps* internal_default_instance() {
    return reinterpret_cast<const SGetProps*>(
               &_SGetProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SGetProps& a, SGetProps& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetProps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetProps* New() const final {
    return CreateMaybeMessage<SGetProps>(nullptr);
  }

  SGetProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetProps& from);
  void MergeFrom(const SGetProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "props.SGetProps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_props_2eproto);
    return ::descriptor_table_props_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsNameFieldNumber = 2,
    kPropsIDFieldNumber = 1,
    kGoodsIdFieldNumber = 3,
  };
  // string propsName = 2;
  void clear_propsname();
  const std::string& propsname() const;
  void set_propsname(const std::string& value);
  void set_propsname(std::string&& value);
  void set_propsname(const char* value);
  void set_propsname(const char* value, size_t size);
  std::string* mutable_propsname();
  std::string* release_propsname();
  void set_allocated_propsname(std::string* propsname);
  private:
  const std::string& _internal_propsname() const;
  void _internal_set_propsname(const std::string& value);
  std::string* _internal_mutable_propsname();
  public:

  // int32 propsID = 1;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 3;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:props.SGetProps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propsname_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_props_2eproto;
};
// -------------------------------------------------------------------

class CConsumeProps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:props.CConsumeProps) */ {
 public:
  CConsumeProps();
  virtual ~CConsumeProps();

  CConsumeProps(const CConsumeProps& from);
  CConsumeProps(CConsumeProps&& from) noexcept
    : CConsumeProps() {
    *this = ::std::move(from);
  }

  inline CConsumeProps& operator=(const CConsumeProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline CConsumeProps& operator=(CConsumeProps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CConsumeProps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CConsumeProps* internal_default_instance() {
    return reinterpret_cast<const CConsumeProps*>(
               &_CConsumeProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CConsumeProps& a, CConsumeProps& b) {
    a.Swap(&b);
  }
  inline void Swap(CConsumeProps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CConsumeProps* New() const final {
    return CreateMaybeMessage<CConsumeProps>(nullptr);
  }

  CConsumeProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CConsumeProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CConsumeProps& from);
  void MergeFrom(const CConsumeProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CConsumeProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "props.CConsumeProps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_props_2eproto);
    return ::descriptor_table_props_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidListFieldNumber = 3,
    kPropsNameFieldNumber = 2,
    kPropsIDFieldNumber = 1,
    kGoodsIDFieldNumber = 4,
  };
  // repeated int32 uidList = 3;
  int uidlist_size() const;
  private:
  int _internal_uidlist_size() const;
  public:
  void clear_uidlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uidlist() const;
  void _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uidlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uidlist(int index) const;
  void set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uidlist();

  // string propsName = 2;
  void clear_propsname();
  const std::string& propsname() const;
  void set_propsname(const std::string& value);
  void set_propsname(std::string&& value);
  void set_propsname(const char* value);
  void set_propsname(const char* value, size_t size);
  std::string* mutable_propsname();
  std::string* release_propsname();
  void set_allocated_propsname(std::string* propsname);
  private:
  const std::string& _internal_propsname() const;
  void _internal_set_propsname(const std::string& value);
  std::string* _internal_mutable_propsname();
  public:

  // int32 propsID = 1;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsID = 4;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:props.CConsumeProps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uidlist_;
  mutable std::atomic<int> _uidlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propsname_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_props_2eproto;
};
// -------------------------------------------------------------------

class SConsumeProps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:props.SConsumeProps) */ {
 public:
  SConsumeProps();
  virtual ~SConsumeProps();

  SConsumeProps(const SConsumeProps& from);
  SConsumeProps(SConsumeProps&& from) noexcept
    : SConsumeProps() {
    *this = ::std::move(from);
  }

  inline SConsumeProps& operator=(const SConsumeProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline SConsumeProps& operator=(SConsumeProps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SConsumeProps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SConsumeProps* internal_default_instance() {
    return reinterpret_cast<const SConsumeProps*>(
               &_SConsumeProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SConsumeProps& a, SConsumeProps& b) {
    a.Swap(&b);
  }
  inline void Swap(SConsumeProps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SConsumeProps* New() const final {
    return CreateMaybeMessage<SConsumeProps>(nullptr);
  }

  SConsumeProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SConsumeProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SConsumeProps& from);
  void MergeFrom(const SConsumeProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SConsumeProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "props.SConsumeProps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_props_2eproto);
    return ::descriptor_table_props_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidListFieldNumber = 2,
    kPropsNameFieldNumber = 4,
    kPropsIDFieldNumber = 1,
    kDurationFieldNumber = 3,
  };
  // repeated int32 uidList = 2;
  int uidlist_size() const;
  private:
  int _internal_uidlist_size() const;
  public:
  void clear_uidlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uidlist() const;
  void _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uidlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uidlist(int index) const;
  void set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uidlist();

  // string propsName = 4;
  void clear_propsname();
  const std::string& propsname() const;
  void set_propsname(const std::string& value);
  void set_propsname(std::string&& value);
  void set_propsname(const char* value);
  void set_propsname(const char* value, size_t size);
  std::string* mutable_propsname();
  std::string* release_propsname();
  void set_allocated_propsname(std::string* propsname);
  private:
  const std::string& _internal_propsname() const;
  void _internal_set_propsname(const std::string& value);
  std::string* _internal_mutable_propsname();
  public:

  // int32 propsID = 1;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 duration = 3;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:props.SConsumeProps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uidlist_;
  mutable std::atomic<int> _uidlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propsname_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_props_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGetProps

// int32 uid = 1;
inline void CGetProps::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetProps::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetProps::uid() const {
  // @@protoc_insertion_point(field_get:props.CGetProps.uid)
  return _internal_uid();
}
inline void CGetProps::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CGetProps::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:props.CGetProps.uid)
}

// -------------------------------------------------------------------

// SGetProps

// int32 propsID = 1;
inline void SGetProps::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetProps::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetProps::propsid() const {
  // @@protoc_insertion_point(field_get:props.SGetProps.propsID)
  return _internal_propsid();
}
inline void SGetProps::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void SGetProps::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:props.SGetProps.propsID)
}

// string propsName = 2;
inline void SGetProps::clear_propsname() {
  propsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetProps::propsname() const {
  // @@protoc_insertion_point(field_get:props.SGetProps.propsName)
  return _internal_propsname();
}
inline void SGetProps::set_propsname(const std::string& value) {
  _internal_set_propsname(value);
  // @@protoc_insertion_point(field_set:props.SGetProps.propsName)
}
inline std::string* SGetProps::mutable_propsname() {
  // @@protoc_insertion_point(field_mutable:props.SGetProps.propsName)
  return _internal_mutable_propsname();
}
inline const std::string& SGetProps::_internal_propsname() const {
  return propsname_.GetNoArena();
}
inline void SGetProps::_internal_set_propsname(const std::string& value) {
  
  propsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetProps::set_propsname(std::string&& value) {
  
  propsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:props.SGetProps.propsName)
}
inline void SGetProps::set_propsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  propsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:props.SGetProps.propsName)
}
inline void SGetProps::set_propsname(const char* value, size_t size) {
  
  propsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:props.SGetProps.propsName)
}
inline std::string* SGetProps::_internal_mutable_propsname() {
  
  return propsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetProps::release_propsname() {
  // @@protoc_insertion_point(field_release:props.SGetProps.propsName)
  
  return propsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetProps::set_allocated_propsname(std::string* propsname) {
  if (propsname != nullptr) {
    
  } else {
    
  }
  propsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propsname);
  // @@protoc_insertion_point(field_set_allocated:props.SGetProps.propsName)
}

// int32 goodsId = 3;
inline void SGetProps::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetProps::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetProps::goodsid() const {
  // @@protoc_insertion_point(field_get:props.SGetProps.goodsId)
  return _internal_goodsid();
}
inline void SGetProps::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void SGetProps::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:props.SGetProps.goodsId)
}

// -------------------------------------------------------------------

// CConsumeProps

// int32 propsID = 1;
inline void CConsumeProps::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CConsumeProps::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CConsumeProps::propsid() const {
  // @@protoc_insertion_point(field_get:props.CConsumeProps.propsID)
  return _internal_propsid();
}
inline void CConsumeProps::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void CConsumeProps::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:props.CConsumeProps.propsID)
}

// string propsName = 2;
inline void CConsumeProps::clear_propsname() {
  propsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CConsumeProps::propsname() const {
  // @@protoc_insertion_point(field_get:props.CConsumeProps.propsName)
  return _internal_propsname();
}
inline void CConsumeProps::set_propsname(const std::string& value) {
  _internal_set_propsname(value);
  // @@protoc_insertion_point(field_set:props.CConsumeProps.propsName)
}
inline std::string* CConsumeProps::mutable_propsname() {
  // @@protoc_insertion_point(field_mutable:props.CConsumeProps.propsName)
  return _internal_mutable_propsname();
}
inline const std::string& CConsumeProps::_internal_propsname() const {
  return propsname_.GetNoArena();
}
inline void CConsumeProps::_internal_set_propsname(const std::string& value) {
  
  propsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CConsumeProps::set_propsname(std::string&& value) {
  
  propsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:props.CConsumeProps.propsName)
}
inline void CConsumeProps::set_propsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  propsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:props.CConsumeProps.propsName)
}
inline void CConsumeProps::set_propsname(const char* value, size_t size) {
  
  propsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:props.CConsumeProps.propsName)
}
inline std::string* CConsumeProps::_internal_mutable_propsname() {
  
  return propsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CConsumeProps::release_propsname() {
  // @@protoc_insertion_point(field_release:props.CConsumeProps.propsName)
  
  return propsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CConsumeProps::set_allocated_propsname(std::string* propsname) {
  if (propsname != nullptr) {
    
  } else {
    
  }
  propsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propsname);
  // @@protoc_insertion_point(field_set_allocated:props.CConsumeProps.propsName)
}

// repeated int32 uidList = 3;
inline int CConsumeProps::_internal_uidlist_size() const {
  return uidlist_.size();
}
inline int CConsumeProps::uidlist_size() const {
  return _internal_uidlist_size();
}
inline void CConsumeProps::clear_uidlist() {
  uidlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CConsumeProps::_internal_uidlist(int index) const {
  return uidlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CConsumeProps::uidlist(int index) const {
  // @@protoc_insertion_point(field_get:props.CConsumeProps.uidList)
  return _internal_uidlist(index);
}
inline void CConsumeProps::set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:props.CConsumeProps.uidList)
}
inline void CConsumeProps::_internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Add(value);
}
inline void CConsumeProps::add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uidlist(value);
  // @@protoc_insertion_point(field_add:props.CConsumeProps.uidList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CConsumeProps::_internal_uidlist() const {
  return uidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CConsumeProps::uidlist() const {
  // @@protoc_insertion_point(field_list:props.CConsumeProps.uidList)
  return _internal_uidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CConsumeProps::_internal_mutable_uidlist() {
  return &uidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CConsumeProps::mutable_uidlist() {
  // @@protoc_insertion_point(field_mutable_list:props.CConsumeProps.uidList)
  return _internal_mutable_uidlist();
}

// int32 goodsID = 4;
inline void CConsumeProps::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CConsumeProps::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CConsumeProps::goodsid() const {
  // @@protoc_insertion_point(field_get:props.CConsumeProps.goodsID)
  return _internal_goodsid();
}
inline void CConsumeProps::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CConsumeProps::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:props.CConsumeProps.goodsID)
}

// -------------------------------------------------------------------

// SConsumeProps

// int32 propsID = 1;
inline void SConsumeProps::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SConsumeProps::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SConsumeProps::propsid() const {
  // @@protoc_insertion_point(field_get:props.SConsumeProps.propsID)
  return _internal_propsid();
}
inline void SConsumeProps::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void SConsumeProps::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:props.SConsumeProps.propsID)
}

// repeated int32 uidList = 2;
inline int SConsumeProps::_internal_uidlist_size() const {
  return uidlist_.size();
}
inline int SConsumeProps::uidlist_size() const {
  return _internal_uidlist_size();
}
inline void SConsumeProps::clear_uidlist() {
  uidlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SConsumeProps::_internal_uidlist(int index) const {
  return uidlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SConsumeProps::uidlist(int index) const {
  // @@protoc_insertion_point(field_get:props.SConsumeProps.uidList)
  return _internal_uidlist(index);
}
inline void SConsumeProps::set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:props.SConsumeProps.uidList)
}
inline void SConsumeProps::_internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Add(value);
}
inline void SConsumeProps::add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uidlist(value);
  // @@protoc_insertion_point(field_add:props.SConsumeProps.uidList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SConsumeProps::_internal_uidlist() const {
  return uidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SConsumeProps::uidlist() const {
  // @@protoc_insertion_point(field_list:props.SConsumeProps.uidList)
  return _internal_uidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SConsumeProps::_internal_mutable_uidlist() {
  return &uidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SConsumeProps::mutable_uidlist() {
  // @@protoc_insertion_point(field_mutable_list:props.SConsumeProps.uidList)
  return _internal_mutable_uidlist();
}

// int32 duration = 3;
inline void SConsumeProps::clear_duration() {
  duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SConsumeProps::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SConsumeProps::duration() const {
  // @@protoc_insertion_point(field_get:props.SConsumeProps.duration)
  return _internal_duration();
}
inline void SConsumeProps::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  duration_ = value;
}
inline void SConsumeProps::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:props.SConsumeProps.duration)
}

// string propsName = 4;
inline void SConsumeProps::clear_propsname() {
  propsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SConsumeProps::propsname() const {
  // @@protoc_insertion_point(field_get:props.SConsumeProps.propsName)
  return _internal_propsname();
}
inline void SConsumeProps::set_propsname(const std::string& value) {
  _internal_set_propsname(value);
  // @@protoc_insertion_point(field_set:props.SConsumeProps.propsName)
}
inline std::string* SConsumeProps::mutable_propsname() {
  // @@protoc_insertion_point(field_mutable:props.SConsumeProps.propsName)
  return _internal_mutable_propsname();
}
inline const std::string& SConsumeProps::_internal_propsname() const {
  return propsname_.GetNoArena();
}
inline void SConsumeProps::_internal_set_propsname(const std::string& value) {
  
  propsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SConsumeProps::set_propsname(std::string&& value) {
  
  propsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:props.SConsumeProps.propsName)
}
inline void SConsumeProps::set_propsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  propsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:props.SConsumeProps.propsName)
}
inline void SConsumeProps::set_propsname(const char* value, size_t size) {
  
  propsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:props.SConsumeProps.propsName)
}
inline std::string* SConsumeProps::_internal_mutable_propsname() {
  
  return propsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SConsumeProps::release_propsname() {
  // @@protoc_insertion_point(field_release:props.SConsumeProps.propsName)
  
  return propsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SConsumeProps::set_allocated_propsname(std::string* propsname) {
  if (propsname != nullptr) {
    
  } else {
    
  }
  propsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propsname);
  // @@protoc_insertion_point(field_set_allocated:props.SConsumeProps.propsName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace props

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_props_2eproto
