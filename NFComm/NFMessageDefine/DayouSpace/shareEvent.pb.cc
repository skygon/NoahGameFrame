// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shareEvent.proto

#include "shareEvent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace shareEvent {
class CShareEventRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CShareEventRecord> _instance;
} _CShareEventRecord_default_instance_;
class SShareEventRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SShareEventRecord> _instance;
} _SShareEventRecord_default_instance_;
class SShareEventNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SShareEventNotification> _instance;
} _SShareEventNotification_default_instance_;
class SShareFinalSpaceMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SShareFinalSpaceMessage> _instance;
} _SShareFinalSpaceMessage_default_instance_;
}  // namespace shareEvent
static void InitDefaultsscc_info_CShareEventRecord_shareEvent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shareEvent::_CShareEventRecord_default_instance_;
    new (ptr) ::shareEvent::CShareEventRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shareEvent::CShareEventRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CShareEventRecord_shareEvent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CShareEventRecord_shareEvent_2eproto}, {}};

static void InitDefaultsscc_info_SShareEventNotification_shareEvent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shareEvent::_SShareEventNotification_default_instance_;
    new (ptr) ::shareEvent::SShareEventNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shareEvent::SShareEventNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SShareEventNotification_shareEvent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SShareEventNotification_shareEvent_2eproto}, {}};

static void InitDefaultsscc_info_SShareEventRecord_shareEvent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shareEvent::_SShareEventRecord_default_instance_;
    new (ptr) ::shareEvent::SShareEventRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shareEvent::SShareEventRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SShareEventRecord_shareEvent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SShareEventRecord_shareEvent_2eproto}, {}};

static void InitDefaultsscc_info_SShareFinalSpaceMessage_shareEvent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shareEvent::_SShareFinalSpaceMessage_default_instance_;
    new (ptr) ::shareEvent::SShareFinalSpaceMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shareEvent::SShareFinalSpaceMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SShareFinalSpaceMessage_shareEvent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SShareFinalSpaceMessage_shareEvent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shareEvent_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_shareEvent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shareEvent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_shareEvent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shareEvent::CShareEventRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shareEvent::CShareEventRecord, shareuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shareEvent::SShareEventRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shareEvent::SShareEventRecord, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shareEvent::SShareEventNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shareEvent::SShareEventNotification, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shareEvent::SShareFinalSpaceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shareEvent::SShareFinalSpaceMessage, houseid_),
  PROTOBUF_FIELD_OFFSET(::shareEvent::SShareFinalSpaceMessage, housetype_),
  PROTOBUF_FIELD_OFFSET(::shareEvent::SShareFinalSpaceMessage, spacename_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::shareEvent::CShareEventRecord)},
  { 6, -1, sizeof(::shareEvent::SShareEventRecord)},
  { 12, -1, sizeof(::shareEvent::SShareEventNotification)},
  { 18, -1, sizeof(::shareEvent::SShareFinalSpaceMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shareEvent::_CShareEventRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shareEvent::_SShareEventRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shareEvent::_SShareEventNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shareEvent::_SShareFinalSpaceMessage_default_instance_),
};

const char descriptor_table_protodef_shareEvent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020shareEvent.proto\022\nshareEvent\"%\n\021CShare"
  "EventRecord\022\020\n\010shareUid\030\001 \001(\005\"#\n\021SShareE"
  "ventRecord\022\016\n\006status\030\001 \001(\005\"&\n\027SShareEven"
  "tNotification\022\013\n\003msg\030\001 \001(\t\"P\n\027SShareFina"
  "lSpaceMessage\022\017\n\007houseId\030\001 \001(\005\022\021\n\thouseT"
  "ype\030\002 \001(\005\022\021\n\tspaceName\030\003 \001(\tB&\n\030com.dayo"
  "u.space.protobufB\nShareEventb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_shareEvent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_shareEvent_2eproto_sccs[4] = {
  &scc_info_CShareEventRecord_shareEvent_2eproto.base,
  &scc_info_SShareEventNotification_shareEvent_2eproto.base,
  &scc_info_SShareEventRecord_shareEvent_2eproto.base,
  &scc_info_SShareFinalSpaceMessage_shareEvent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shareEvent_2eproto_once;
static bool descriptor_table_shareEvent_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shareEvent_2eproto = {
  &descriptor_table_shareEvent_2eproto_initialized, descriptor_table_protodef_shareEvent_2eproto, "shareEvent.proto", 276,
  &descriptor_table_shareEvent_2eproto_once, descriptor_table_shareEvent_2eproto_sccs, descriptor_table_shareEvent_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_shareEvent_2eproto::offsets,
  file_level_metadata_shareEvent_2eproto, 4, file_level_enum_descriptors_shareEvent_2eproto, file_level_service_descriptors_shareEvent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_shareEvent_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_shareEvent_2eproto), true);
namespace shareEvent {

// ===================================================================

void CShareEventRecord::InitAsDefaultInstance() {
}
class CShareEventRecord::_Internal {
 public:
};

CShareEventRecord::CShareEventRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareEvent.CShareEventRecord)
}
CShareEventRecord::CShareEventRecord(const CShareEventRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shareuid_ = from.shareuid_;
  // @@protoc_insertion_point(copy_constructor:shareEvent.CShareEventRecord)
}

void CShareEventRecord::SharedCtor() {
  shareuid_ = 0;
}

CShareEventRecord::~CShareEventRecord() {
  // @@protoc_insertion_point(destructor:shareEvent.CShareEventRecord)
  SharedDtor();
}

void CShareEventRecord::SharedDtor() {
}

void CShareEventRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CShareEventRecord& CShareEventRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CShareEventRecord_shareEvent_2eproto.base);
  return *internal_default_instance();
}


void CShareEventRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:shareEvent.CShareEventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shareuid_ = 0;
  _internal_metadata_.Clear();
}

const char* CShareEventRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 shareUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shareuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CShareEventRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareEvent.CShareEventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shareUid = 1;
  if (this->shareuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shareuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shareEvent.CShareEventRecord)
  return target;
}

size_t CShareEventRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shareEvent.CShareEventRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shareUid = 1;
  if (this->shareuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shareuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CShareEventRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareEvent.CShareEventRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CShareEventRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CShareEventRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareEvent.CShareEventRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareEvent.CShareEventRecord)
    MergeFrom(*source);
  }
}

void CShareEventRecord::MergeFrom(const CShareEventRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareEvent.CShareEventRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shareuid() != 0) {
    _internal_set_shareuid(from._internal_shareuid());
  }
}

void CShareEventRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareEvent.CShareEventRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShareEventRecord::CopyFrom(const CShareEventRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareEvent.CShareEventRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShareEventRecord::IsInitialized() const {
  return true;
}

void CShareEventRecord::InternalSwap(CShareEventRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shareuid_, other->shareuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CShareEventRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SShareEventRecord::InitAsDefaultInstance() {
}
class SShareEventRecord::_Internal {
 public:
};

SShareEventRecord::SShareEventRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareEvent.SShareEventRecord)
}
SShareEventRecord::SShareEventRecord(const SShareEventRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:shareEvent.SShareEventRecord)
}

void SShareEventRecord::SharedCtor() {
  status_ = 0;
}

SShareEventRecord::~SShareEventRecord() {
  // @@protoc_insertion_point(destructor:shareEvent.SShareEventRecord)
  SharedDtor();
}

void SShareEventRecord::SharedDtor() {
}

void SShareEventRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SShareEventRecord& SShareEventRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SShareEventRecord_shareEvent_2eproto.base);
  return *internal_default_instance();
}


void SShareEventRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:shareEvent.SShareEventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* SShareEventRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SShareEventRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareEvent.SShareEventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shareEvent.SShareEventRecord)
  return target;
}

size_t SShareEventRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shareEvent.SShareEventRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SShareEventRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareEvent.SShareEventRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SShareEventRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SShareEventRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareEvent.SShareEventRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareEvent.SShareEventRecord)
    MergeFrom(*source);
  }
}

void SShareEventRecord::MergeFrom(const SShareEventRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareEvent.SShareEventRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SShareEventRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareEvent.SShareEventRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SShareEventRecord::CopyFrom(const SShareEventRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareEvent.SShareEventRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SShareEventRecord::IsInitialized() const {
  return true;
}

void SShareEventRecord::InternalSwap(SShareEventRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SShareEventRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SShareEventNotification::InitAsDefaultInstance() {
}
class SShareEventNotification::_Internal {
 public:
};

SShareEventNotification::SShareEventNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareEvent.SShareEventNotification)
}
SShareEventNotification::SShareEventNotification(const SShareEventNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:shareEvent.SShareEventNotification)
}

void SShareEventNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SShareEventNotification_shareEvent_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SShareEventNotification::~SShareEventNotification() {
  // @@protoc_insertion_point(destructor:shareEvent.SShareEventNotification)
  SharedDtor();
}

void SShareEventNotification::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SShareEventNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SShareEventNotification& SShareEventNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SShareEventNotification_shareEvent_2eproto.base);
  return *internal_default_instance();
}


void SShareEventNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:shareEvent.SShareEventNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SShareEventNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareEvent.SShareEventNotification.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SShareEventNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareEvent.SShareEventNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareEvent.SShareEventNotification.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shareEvent.SShareEventNotification)
  return target;
}

size_t SShareEventNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shareEvent.SShareEventNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SShareEventNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareEvent.SShareEventNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SShareEventNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SShareEventNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareEvent.SShareEventNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareEvent.SShareEventNotification)
    MergeFrom(*source);
  }
}

void SShareEventNotification::MergeFrom(const SShareEventNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareEvent.SShareEventNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SShareEventNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareEvent.SShareEventNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SShareEventNotification::CopyFrom(const SShareEventNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareEvent.SShareEventNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SShareEventNotification::IsInitialized() const {
  return true;
}

void SShareEventNotification::InternalSwap(SShareEventNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SShareEventNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SShareFinalSpaceMessage::InitAsDefaultInstance() {
}
class SShareFinalSpaceMessage::_Internal {
 public:
};

SShareFinalSpaceMessage::SShareFinalSpaceMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareEvent.SShareFinalSpaceMessage)
}
SShareFinalSpaceMessage::SShareFinalSpaceMessage(const SShareFinalSpaceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacename().empty()) {
    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&housetype_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(housetype_));
  // @@protoc_insertion_point(copy_constructor:shareEvent.SShareFinalSpaceMessage)
}

void SShareFinalSpaceMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SShareFinalSpaceMessage_shareEvent_2eproto.base);
  spacename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(housetype_));
}

SShareFinalSpaceMessage::~SShareFinalSpaceMessage() {
  // @@protoc_insertion_point(destructor:shareEvent.SShareFinalSpaceMessage)
  SharedDtor();
}

void SShareFinalSpaceMessage::SharedDtor() {
  spacename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SShareFinalSpaceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SShareFinalSpaceMessage& SShareFinalSpaceMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SShareFinalSpaceMessage_shareEvent_2eproto.base);
  return *internal_default_instance();
}


void SShareFinalSpaceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:shareEvent.SShareFinalSpaceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(housetype_));
  _internal_metadata_.Clear();
}

const char* SShareFinalSpaceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          housetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spaceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_spacename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareEvent.SShareFinalSpaceMessage.spaceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SShareFinalSpaceMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareEvent.SShareFinalSpaceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 houseType = 2;
  if (this->housetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_housetype(), target);
  }

  // string spaceName = 3;
  if (this->spacename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacename().data(), static_cast<int>(this->_internal_spacename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareEvent.SShareFinalSpaceMessage.spaceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_spacename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shareEvent.SShareFinalSpaceMessage)
  return target;
}

size_t SShareFinalSpaceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shareEvent.SShareFinalSpaceMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spaceName = 3;
  if (this->spacename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacename());
  }

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 houseType = 2;
  if (this->housetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_housetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SShareFinalSpaceMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareEvent.SShareFinalSpaceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SShareFinalSpaceMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SShareFinalSpaceMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareEvent.SShareFinalSpaceMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareEvent.SShareFinalSpaceMessage)
    MergeFrom(*source);
  }
}

void SShareFinalSpaceMessage::MergeFrom(const SShareFinalSpaceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareEvent.SShareFinalSpaceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spacename().size() > 0) {

    spacename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spacename_);
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.housetype() != 0) {
    _internal_set_housetype(from._internal_housetype());
  }
}

void SShareFinalSpaceMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareEvent.SShareFinalSpaceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SShareFinalSpaceMessage::CopyFrom(const SShareFinalSpaceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareEvent.SShareFinalSpaceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SShareFinalSpaceMessage::IsInitialized() const {
  return true;
}

void SShareFinalSpaceMessage::InternalSwap(SShareFinalSpaceMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  spacename_.Swap(&other->spacename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(houseid_, other->houseid_);
  swap(housetype_, other->housetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SShareFinalSpaceMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace shareEvent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::shareEvent::CShareEventRecord* Arena::CreateMaybeMessage< ::shareEvent::CShareEventRecord >(Arena* arena) {
  return Arena::CreateInternal< ::shareEvent::CShareEventRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::shareEvent::SShareEventRecord* Arena::CreateMaybeMessage< ::shareEvent::SShareEventRecord >(Arena* arena) {
  return Arena::CreateInternal< ::shareEvent::SShareEventRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::shareEvent::SShareEventNotification* Arena::CreateMaybeMessage< ::shareEvent::SShareEventNotification >(Arena* arena) {
  return Arena::CreateInternal< ::shareEvent::SShareEventNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::shareEvent::SShareFinalSpaceMessage* Arena::CreateMaybeMessage< ::shareEvent::SShareFinalSpaceMessage >(Arena* arena) {
  return Arena::CreateInternal< ::shareEvent::SShareFinalSpaceMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
