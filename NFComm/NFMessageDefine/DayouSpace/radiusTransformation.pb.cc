// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radiusTransformation.proto

#include "radiusTransformation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace radiusTransformation {
class CRadiusTransformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRadiusTransformation> _instance;
} _CRadiusTransformation_default_instance_;
class SRadiusTransformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRadiusTransformation> _instance;
} _SRadiusTransformation_default_instance_;
}  // namespace radiusTransformation
static void InitDefaultsscc_info_CRadiusTransformation_radiusTransformation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::radiusTransformation::_CRadiusTransformation_default_instance_;
    new (ptr) ::radiusTransformation::CRadiusTransformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::radiusTransformation::CRadiusTransformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRadiusTransformation_radiusTransformation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRadiusTransformation_radiusTransformation_2eproto}, {}};

static void InitDefaultsscc_info_SRadiusTransformation_radiusTransformation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::radiusTransformation::_SRadiusTransformation_default_instance_;
    new (ptr) ::radiusTransformation::SRadiusTransformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::radiusTransformation::SRadiusTransformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRadiusTransformation_radiusTransformation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRadiusTransformation_radiusTransformation_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_radiusTransformation_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_radiusTransformation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_radiusTransformation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_radiusTransformation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radiusTransformation::CRadiusTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::radiusTransformation::CRadiusTransformation, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radiusTransformation::SRadiusTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::radiusTransformation::SRadiusTransformation, uid_),
  PROTOBUF_FIELD_OFFSET(::radiusTransformation::SRadiusTransformation, duration_),
  PROTOBUF_FIELD_OFFSET(::radiusTransformation::SRadiusTransformation, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::radiusTransformation::CRadiusTransformation)},
  { 6, -1, sizeof(::radiusTransformation::SRadiusTransformation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::radiusTransformation::_CRadiusTransformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::radiusTransformation::_SRadiusTransformation_default_instance_),
};

const char descriptor_table_protodef_radiusTransformation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032radiusTransformation.proto\022\024radiusTran"
  "sformation\"%\n\025CRadiusTransformation\022\014\n\004t"
  "ype\030\001 \001(\005\"D\n\025SRadiusTransformation\022\013\n\003ui"
  "d\030\001 \003(\005\022\020\n\010duration\030\002 \001(\005\022\014\n\004type\030\003 \001(\005B"
  "4\n\030com.dayou.space.protobufB\024RadiusTrans"
  "formationZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_radiusTransformation_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_radiusTransformation_2eproto_sccs[2] = {
  &scc_info_CRadiusTransformation_radiusTransformation_2eproto.base,
  &scc_info_SRadiusTransformation_radiusTransformation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_radiusTransformation_2eproto_once;
static bool descriptor_table_radiusTransformation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_radiusTransformation_2eproto = {
  &descriptor_table_radiusTransformation_2eproto_initialized, descriptor_table_protodef_radiusTransformation_2eproto, "radiusTransformation.proto", 221,
  &descriptor_table_radiusTransformation_2eproto_once, descriptor_table_radiusTransformation_2eproto_sccs, descriptor_table_radiusTransformation_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_radiusTransformation_2eproto::offsets,
  file_level_metadata_radiusTransformation_2eproto, 2, file_level_enum_descriptors_radiusTransformation_2eproto, file_level_service_descriptors_radiusTransformation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_radiusTransformation_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_radiusTransformation_2eproto), true);
namespace radiusTransformation {

// ===================================================================

void CRadiusTransformation::InitAsDefaultInstance() {
}
class CRadiusTransformation::_Internal {
 public:
};

CRadiusTransformation::CRadiusTransformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:radiusTransformation.CRadiusTransformation)
}
CRadiusTransformation::CRadiusTransformation(const CRadiusTransformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:radiusTransformation.CRadiusTransformation)
}

void CRadiusTransformation::SharedCtor() {
  type_ = 0;
}

CRadiusTransformation::~CRadiusTransformation() {
  // @@protoc_insertion_point(destructor:radiusTransformation.CRadiusTransformation)
  SharedDtor();
}

void CRadiusTransformation::SharedDtor() {
}

void CRadiusTransformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRadiusTransformation& CRadiusTransformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRadiusTransformation_radiusTransformation_2eproto.base);
  return *internal_default_instance();
}


void CRadiusTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:radiusTransformation.CRadiusTransformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* CRadiusTransformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRadiusTransformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radiusTransformation.CRadiusTransformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radiusTransformation.CRadiusTransformation)
  return target;
}

size_t CRadiusTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radiusTransformation.CRadiusTransformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRadiusTransformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radiusTransformation.CRadiusTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const CRadiusTransformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRadiusTransformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radiusTransformation.CRadiusTransformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radiusTransformation.CRadiusTransformation)
    MergeFrom(*source);
  }
}

void CRadiusTransformation::MergeFrom(const CRadiusTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radiusTransformation.CRadiusTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CRadiusTransformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radiusTransformation.CRadiusTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRadiusTransformation::CopyFrom(const CRadiusTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radiusTransformation.CRadiusTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRadiusTransformation::IsInitialized() const {
  return true;
}

void CRadiusTransformation::InternalSwap(CRadiusTransformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRadiusTransformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRadiusTransformation::InitAsDefaultInstance() {
}
class SRadiusTransformation::_Internal {
 public:
};

SRadiusTransformation::SRadiusTransformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:radiusTransformation.SRadiusTransformation)
}
SRadiusTransformation::SRadiusTransformation(const SRadiusTransformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:radiusTransformation.SRadiusTransformation)
}

void SRadiusTransformation::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(type_));
}

SRadiusTransformation::~SRadiusTransformation() {
  // @@protoc_insertion_point(destructor:radiusTransformation.SRadiusTransformation)
  SharedDtor();
}

void SRadiusTransformation::SharedDtor() {
}

void SRadiusTransformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRadiusTransformation& SRadiusTransformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRadiusTransformation_radiusTransformation_2eproto.base);
  return *internal_default_instance();
}


void SRadiusTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:radiusTransformation.SRadiusTransformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* SRadiusTransformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRadiusTransformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radiusTransformation.SRadiusTransformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uid = 1;
  {
    int byte_size = _uid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uid(), byte_size, target);
    }
  }

  // int32 duration = 2;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radiusTransformation.SRadiusTransformation)
  return target;
}

size_t SRadiusTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radiusTransformation.SRadiusTransformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRadiusTransformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radiusTransformation.SRadiusTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const SRadiusTransformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRadiusTransformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radiusTransformation.SRadiusTransformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radiusTransformation.SRadiusTransformation)
    MergeFrom(*source);
  }
}

void SRadiusTransformation::MergeFrom(const SRadiusTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radiusTransformation.SRadiusTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SRadiusTransformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radiusTransformation.SRadiusTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRadiusTransformation::CopyFrom(const SRadiusTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radiusTransformation.SRadiusTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRadiusTransformation::IsInitialized() const {
  return true;
}

void SRadiusTransformation::InternalSwap(SRadiusTransformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uid_.InternalSwap(&other->uid_);
  swap(duration_, other->duration_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRadiusTransformation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace radiusTransformation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::radiusTransformation::CRadiusTransformation* Arena::CreateMaybeMessage< ::radiusTransformation::CRadiusTransformation >(Arena* arena) {
  return Arena::CreateInternal< ::radiusTransformation::CRadiusTransformation >(arena);
}
template<> PROTOBUF_NOINLINE ::radiusTransformation::SRadiusTransformation* Arena::CreateMaybeMessage< ::radiusTransformation::SRadiusTransformation >(Arena* arena) {
  return Arena::CreateInternal< ::radiusTransformation::SRadiusTransformation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
