// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rewardForLottery.proto

#include "rewardForLottery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rewardForLottery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AwardRecordInfo_rewardForLottery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_treasureBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TreasureBoxRewardContent_treasureBox_2eproto;
namespace rewardForLottery {
class CObtainRewardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CObtainRewardList> _instance;
} _CObtainRewardList_default_instance_;
class SObtainRewardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SObtainRewardList> _instance;
} _SObtainRewardList_default_instance_;
class CBlindBoxLotteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CBlindBoxLottery> _instance;
} _CBlindBoxLottery_default_instance_;
class SBlindBoxLotteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBlindBoxLottery> _instance;
} _SBlindBoxLottery_default_instance_;
class CObtainAwardRecordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CObtainAwardRecords> _instance;
} _CObtainAwardRecords_default_instance_;
class SObtainAwardRecordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SObtainAwardRecords> _instance;
} _SObtainAwardRecords_default_instance_;
class CPhysicalRewardExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPhysicalRewardExchange> _instance;
} _CPhysicalRewardExchange_default_instance_;
class SPhysicalRewardExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPhysicalRewardExchange> _instance;
} _SPhysicalRewardExchange_default_instance_;
class AwardRecordInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardRecordInfo> _instance;
} _AwardRecordInfo_default_instance_;
class CLotteryBestProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLotteryBestProgress> _instance;
} _CLotteryBestProgress_default_instance_;
class SLotteryBestProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLotteryBestProgress> _instance;
} _SLotteryBestProgress_default_instance_;
}  // namespace rewardForLottery
static void InitDefaultsscc_info_AwardRecordInfo_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_AwardRecordInfo_default_instance_;
    new (ptr) ::rewardForLottery::AwardRecordInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::AwardRecordInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AwardRecordInfo_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AwardRecordInfo_rewardForLottery_2eproto}, {
      &scc_info_TreasureBoxRewardContent_treasureBox_2eproto.base,}};

static void InitDefaultsscc_info_CBlindBoxLottery_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_CBlindBoxLottery_default_instance_;
    new (ptr) ::rewardForLottery::CBlindBoxLottery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::CBlindBoxLottery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CBlindBoxLottery_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CBlindBoxLottery_rewardForLottery_2eproto}, {}};

static void InitDefaultsscc_info_CLotteryBestProgress_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_CLotteryBestProgress_default_instance_;
    new (ptr) ::rewardForLottery::CLotteryBestProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::CLotteryBestProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLotteryBestProgress_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CLotteryBestProgress_rewardForLottery_2eproto}, {}};

static void InitDefaultsscc_info_CObtainAwardRecords_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_CObtainAwardRecords_default_instance_;
    new (ptr) ::rewardForLottery::CObtainAwardRecords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::CObtainAwardRecords::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CObtainAwardRecords_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CObtainAwardRecords_rewardForLottery_2eproto}, {}};

static void InitDefaultsscc_info_CObtainRewardList_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_CObtainRewardList_default_instance_;
    new (ptr) ::rewardForLottery::CObtainRewardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::CObtainRewardList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CObtainRewardList_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CObtainRewardList_rewardForLottery_2eproto}, {}};

static void InitDefaultsscc_info_CPhysicalRewardExchange_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_CPhysicalRewardExchange_default_instance_;
    new (ptr) ::rewardForLottery::CPhysicalRewardExchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::CPhysicalRewardExchange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPhysicalRewardExchange_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPhysicalRewardExchange_rewardForLottery_2eproto}, {}};

static void InitDefaultsscc_info_SBlindBoxLottery_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_SBlindBoxLottery_default_instance_;
    new (ptr) ::rewardForLottery::SBlindBoxLottery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::SBlindBoxLottery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SBlindBoxLottery_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SBlindBoxLottery_rewardForLottery_2eproto}, {
      &scc_info_TreasureBoxRewardContent_treasureBox_2eproto.base,}};

static void InitDefaultsscc_info_SLotteryBestProgress_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_SLotteryBestProgress_default_instance_;
    new (ptr) ::rewardForLottery::SLotteryBestProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::SLotteryBestProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLotteryBestProgress_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLotteryBestProgress_rewardForLottery_2eproto}, {}};

static void InitDefaultsscc_info_SObtainAwardRecords_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_SObtainAwardRecords_default_instance_;
    new (ptr) ::rewardForLottery::SObtainAwardRecords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::SObtainAwardRecords::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SObtainAwardRecords_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SObtainAwardRecords_rewardForLottery_2eproto}, {
      &scc_info_AwardRecordInfo_rewardForLottery_2eproto.base,}};

static void InitDefaultsscc_info_SObtainRewardList_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_SObtainRewardList_default_instance_;
    new (ptr) ::rewardForLottery::SObtainRewardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::SObtainRewardList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SObtainRewardList_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SObtainRewardList_rewardForLottery_2eproto}, {
      &scc_info_TreasureBoxRewardContent_treasureBox_2eproto.base,}};

static void InitDefaultsscc_info_SPhysicalRewardExchange_rewardForLottery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForLottery::_SPhysicalRewardExchange_default_instance_;
    new (ptr) ::rewardForLottery::SPhysicalRewardExchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForLottery::SPhysicalRewardExchange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SPhysicalRewardExchange_rewardForLottery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SPhysicalRewardExchange_rewardForLottery_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rewardForLottery_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rewardForLottery_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rewardForLottery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rewardForLottery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CObtainRewardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SObtainRewardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SObtainRewardList, list_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SObtainRewardList, state_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SObtainRewardList, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CBlindBoxLottery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SBlindBoxLottery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SBlindBoxLottery, list_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SBlindBoxLottery, state_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SBlindBoxLottery, msg_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SBlindBoxLottery, lotteryuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CObtainAwardRecords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CObtainAwardRecords, curpage_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CObtainAwardRecords, pagelimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SObtainAwardRecords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SObtainAwardRecords, list_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SObtainAwardRecords, msg_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SObtainAwardRecords, curpage_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SObtainAwardRecords, totalnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CPhysicalRewardExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CPhysicalRewardExchange, goodsid_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CPhysicalRewardExchange, backpackid_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CPhysicalRewardExchange, name_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CPhysicalRewardExchange, idcard_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CPhysicalRewardExchange, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SPhysicalRewardExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SPhysicalRewardExchange, state_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SPhysicalRewardExchange, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::AwardRecordInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::AwardRecordInfo, recordinfo_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::AwardRecordInfo, usericon_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::AwardRecordInfo, username_),
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::AwardRecordInfo, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::CLotteryBestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SLotteryBestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForLottery::SLotteryBestProgress, progress_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rewardForLottery::CObtainRewardList)},
  { 5, -1, sizeof(::rewardForLottery::SObtainRewardList)},
  { 13, -1, sizeof(::rewardForLottery::CBlindBoxLottery)},
  { 18, -1, sizeof(::rewardForLottery::SBlindBoxLottery)},
  { 27, -1, sizeof(::rewardForLottery::CObtainAwardRecords)},
  { 34, -1, sizeof(::rewardForLottery::SObtainAwardRecords)},
  { 43, -1, sizeof(::rewardForLottery::CPhysicalRewardExchange)},
  { 53, -1, sizeof(::rewardForLottery::SPhysicalRewardExchange)},
  { 60, -1, sizeof(::rewardForLottery::AwardRecordInfo)},
  { 69, -1, sizeof(::rewardForLottery::CLotteryBestProgress)},
  { 74, -1, sizeof(::rewardForLottery::SLotteryBestProgress)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_CObtainRewardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_SObtainRewardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_CBlindBoxLottery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_SBlindBoxLottery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_CObtainAwardRecords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_SObtainAwardRecords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_CPhysicalRewardExchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_SPhysicalRewardExchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_AwardRecordInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_CLotteryBestProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForLottery::_SLotteryBestProgress_default_instance_),
};

const char descriptor_table_protodef_rewardForLottery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026rewardForLottery.proto\022\020rewardForLotte"
  "ry\032\021treasureBox.proto\"\023\n\021CObtainRewardLi"
  "st\"d\n\021SObtainRewardList\0223\n\004list\030\001 \003(\0132%."
  "treasureBox.TreasureBoxRewardContent\022\r\n\005"
  "state\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\"\022\n\020CBlindBoxLot"
  "tery\"w\n\020SBlindBoxLottery\0223\n\004list\030\001 \003(\0132%"
  ".treasureBox.TreasureBoxRewardContent\022\r\n"
  "\005state\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\022\022\n\nlotteryUid\030"
  "\004 \001(\005\"9\n\023CObtainAwardRecords\022\017\n\007curPage\030"
  "\001 \001(\005\022\021\n\tpageLimit\030\002 \001(\005\"v\n\023SObtainAward"
  "Records\022/\n\004list\030\001 \003(\0132!.rewardForLottery"
  ".AwardRecordInfo\022\013\n\003msg\030\002 \001(\t\022\017\n\007curPage"
  "\030\003 \001(\005\022\020\n\010TotalNum\030\004 \001(\005\"k\n\027CPhysicalRew"
  "ardExchange\022\017\n\007goodsId\030\001 \001(\005\022\022\n\nbackpack"
  "Id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\016\n\006idCard\030\004 \001(\t\022\r"
  "\n\005phone\030\005 \001(\t\"5\n\027SPhysicalRewardExchange"
  "\022\r\n\005state\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\200\001\n\017AwardRe"
  "cordInfo\0229\n\nrecordInfo\030\001 \001(\0132%.treasureB"
  "ox.TreasureBoxRewardContent\022\020\n\010userIcon\030"
  "\002 \001(\t\022\020\n\010userName\030\003 \001(\t\022\016\n\006userId\030\004 \001(\005\""
  "\026\n\024CLotteryBestProgress\"(\n\024SLotteryBestP"
  "rogress\022\020\n\010progress\030\001 \001(\005B0\n\030com.dayou.s"
  "pace.protobufB\020RewardForLotteryZ\002./b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rewardForLottery_2eproto_deps[1] = {
  &::descriptor_table_treasureBox_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rewardForLottery_2eproto_sccs[11] = {
  &scc_info_AwardRecordInfo_rewardForLottery_2eproto.base,
  &scc_info_CBlindBoxLottery_rewardForLottery_2eproto.base,
  &scc_info_CLotteryBestProgress_rewardForLottery_2eproto.base,
  &scc_info_CObtainAwardRecords_rewardForLottery_2eproto.base,
  &scc_info_CObtainRewardList_rewardForLottery_2eproto.base,
  &scc_info_CPhysicalRewardExchange_rewardForLottery_2eproto.base,
  &scc_info_SBlindBoxLottery_rewardForLottery_2eproto.base,
  &scc_info_SLotteryBestProgress_rewardForLottery_2eproto.base,
  &scc_info_SObtainAwardRecords_rewardForLottery_2eproto.base,
  &scc_info_SObtainRewardList_rewardForLottery_2eproto.base,
  &scc_info_SPhysicalRewardExchange_rewardForLottery_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rewardForLottery_2eproto_once;
static bool descriptor_table_rewardForLottery_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rewardForLottery_2eproto = {
  &descriptor_table_rewardForLottery_2eproto_initialized, descriptor_table_protodef_rewardForLottery_2eproto, "rewardForLottery.proto", 923,
  &descriptor_table_rewardForLottery_2eproto_once, descriptor_table_rewardForLottery_2eproto_sccs, descriptor_table_rewardForLottery_2eproto_deps, 11, 1,
  schemas, file_default_instances, TableStruct_rewardForLottery_2eproto::offsets,
  file_level_metadata_rewardForLottery_2eproto, 11, file_level_enum_descriptors_rewardForLottery_2eproto, file_level_service_descriptors_rewardForLottery_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rewardForLottery_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rewardForLottery_2eproto), true);
namespace rewardForLottery {

// ===================================================================

void CObtainRewardList::InitAsDefaultInstance() {
}
class CObtainRewardList::_Internal {
 public:
};

CObtainRewardList::CObtainRewardList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.CObtainRewardList)
}
CObtainRewardList::CObtainRewardList(const CObtainRewardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.CObtainRewardList)
}

void CObtainRewardList::SharedCtor() {
}

CObtainRewardList::~CObtainRewardList() {
  // @@protoc_insertion_point(destructor:rewardForLottery.CObtainRewardList)
  SharedDtor();
}

void CObtainRewardList::SharedDtor() {
}

void CObtainRewardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CObtainRewardList& CObtainRewardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CObtainRewardList_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void CObtainRewardList::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.CObtainRewardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CObtainRewardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CObtainRewardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.CObtainRewardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.CObtainRewardList)
  return target;
}

size_t CObtainRewardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.CObtainRewardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CObtainRewardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.CObtainRewardList)
  GOOGLE_DCHECK_NE(&from, this);
  const CObtainRewardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CObtainRewardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.CObtainRewardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.CObtainRewardList)
    MergeFrom(*source);
  }
}

void CObtainRewardList::MergeFrom(const CObtainRewardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.CObtainRewardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CObtainRewardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.CObtainRewardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CObtainRewardList::CopyFrom(const CObtainRewardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.CObtainRewardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CObtainRewardList::IsInitialized() const {
  return true;
}

void CObtainRewardList::InternalSwap(CObtainRewardList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CObtainRewardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SObtainRewardList::InitAsDefaultInstance() {
}
class SObtainRewardList::_Internal {
 public:
};

void SObtainRewardList::clear_list() {
  list_.Clear();
}
SObtainRewardList::SObtainRewardList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.SObtainRewardList)
}
SObtainRewardList::SObtainRewardList(const SObtainRewardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.SObtainRewardList)
}

void SObtainRewardList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SObtainRewardList_rewardForLottery_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SObtainRewardList::~SObtainRewardList() {
  // @@protoc_insertion_point(destructor:rewardForLottery.SObtainRewardList)
  SharedDtor();
}

void SObtainRewardList::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SObtainRewardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SObtainRewardList& SObtainRewardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SObtainRewardList_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void SObtainRewardList::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.SObtainRewardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SObtainRewardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .treasureBox.TreasureBoxRewardContent list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForLottery.SObtainRewardList.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SObtainRewardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.SObtainRewardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .treasureBox.TreasureBoxRewardContent list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForLottery.SObtainRewardList.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.SObtainRewardList)
  return target;
}

size_t SObtainRewardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.SObtainRewardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .treasureBox.TreasureBoxRewardContent list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SObtainRewardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.SObtainRewardList)
  GOOGLE_DCHECK_NE(&from, this);
  const SObtainRewardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SObtainRewardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.SObtainRewardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.SObtainRewardList)
    MergeFrom(*source);
  }
}

void SObtainRewardList::MergeFrom(const SObtainRewardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.SObtainRewardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SObtainRewardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.SObtainRewardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SObtainRewardList::CopyFrom(const SObtainRewardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.SObtainRewardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SObtainRewardList::IsInitialized() const {
  return true;
}

void SObtainRewardList::InternalSwap(SObtainRewardList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SObtainRewardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CBlindBoxLottery::InitAsDefaultInstance() {
}
class CBlindBoxLottery::_Internal {
 public:
};

CBlindBoxLottery::CBlindBoxLottery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.CBlindBoxLottery)
}
CBlindBoxLottery::CBlindBoxLottery(const CBlindBoxLottery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.CBlindBoxLottery)
}

void CBlindBoxLottery::SharedCtor() {
}

CBlindBoxLottery::~CBlindBoxLottery() {
  // @@protoc_insertion_point(destructor:rewardForLottery.CBlindBoxLottery)
  SharedDtor();
}

void CBlindBoxLottery::SharedDtor() {
}

void CBlindBoxLottery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBlindBoxLottery& CBlindBoxLottery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CBlindBoxLottery_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void CBlindBoxLottery::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.CBlindBoxLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CBlindBoxLottery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBlindBoxLottery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.CBlindBoxLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.CBlindBoxLottery)
  return target;
}

size_t CBlindBoxLottery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.CBlindBoxLottery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBlindBoxLottery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.CBlindBoxLottery)
  GOOGLE_DCHECK_NE(&from, this);
  const CBlindBoxLottery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBlindBoxLottery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.CBlindBoxLottery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.CBlindBoxLottery)
    MergeFrom(*source);
  }
}

void CBlindBoxLottery::MergeFrom(const CBlindBoxLottery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.CBlindBoxLottery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBlindBoxLottery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.CBlindBoxLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBlindBoxLottery::CopyFrom(const CBlindBoxLottery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.CBlindBoxLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBlindBoxLottery::IsInitialized() const {
  return true;
}

void CBlindBoxLottery::InternalSwap(CBlindBoxLottery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBlindBoxLottery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBlindBoxLottery::InitAsDefaultInstance() {
}
class SBlindBoxLottery::_Internal {
 public:
};

void SBlindBoxLottery::clear_list() {
  list_.Clear();
}
SBlindBoxLottery::SBlindBoxLottery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.SBlindBoxLottery)
}
SBlindBoxLottery::SBlindBoxLottery(const SBlindBoxLottery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&lotteryuid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(lotteryuid_));
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.SBlindBoxLottery)
}

void SBlindBoxLottery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBlindBoxLottery_rewardForLottery_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lotteryuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(lotteryuid_));
}

SBlindBoxLottery::~SBlindBoxLottery() {
  // @@protoc_insertion_point(destructor:rewardForLottery.SBlindBoxLottery)
  SharedDtor();
}

void SBlindBoxLottery::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SBlindBoxLottery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBlindBoxLottery& SBlindBoxLottery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBlindBoxLottery_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void SBlindBoxLottery::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.SBlindBoxLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lotteryuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(lotteryuid_));
  _internal_metadata_.Clear();
}

const char* SBlindBoxLottery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .treasureBox.TreasureBoxRewardContent list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForLottery.SBlindBoxLottery.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lotteryUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lotteryuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBlindBoxLottery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.SBlindBoxLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .treasureBox.TreasureBoxRewardContent list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForLottery.SBlindBoxLottery.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // int32 lotteryUid = 4;
  if (this->lotteryuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lotteryuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.SBlindBoxLottery)
  return target;
}

size_t SBlindBoxLottery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.SBlindBoxLottery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .treasureBox.TreasureBoxRewardContent list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 lotteryUid = 4;
  if (this->lotteryuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lotteryuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBlindBoxLottery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.SBlindBoxLottery)
  GOOGLE_DCHECK_NE(&from, this);
  const SBlindBoxLottery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBlindBoxLottery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.SBlindBoxLottery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.SBlindBoxLottery)
    MergeFrom(*source);
  }
}

void SBlindBoxLottery::MergeFrom(const SBlindBoxLottery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.SBlindBoxLottery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.lotteryuid() != 0) {
    _internal_set_lotteryuid(from._internal_lotteryuid());
  }
}

void SBlindBoxLottery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.SBlindBoxLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBlindBoxLottery::CopyFrom(const SBlindBoxLottery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.SBlindBoxLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBlindBoxLottery::IsInitialized() const {
  return true;
}

void SBlindBoxLottery::InternalSwap(SBlindBoxLottery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(lotteryuid_, other->lotteryuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBlindBoxLottery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CObtainAwardRecords::InitAsDefaultInstance() {
}
class CObtainAwardRecords::_Internal {
 public:
};

CObtainAwardRecords::CObtainAwardRecords()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.CObtainAwardRecords)
}
CObtainAwardRecords::CObtainAwardRecords(const CObtainAwardRecords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curpage_, &from.curpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagelimit_) -
    reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.CObtainAwardRecords)
}

void CObtainAwardRecords::SharedCtor() {
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
}

CObtainAwardRecords::~CObtainAwardRecords() {
  // @@protoc_insertion_point(destructor:rewardForLottery.CObtainAwardRecords)
  SharedDtor();
}

void CObtainAwardRecords::SharedDtor() {
}

void CObtainAwardRecords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CObtainAwardRecords& CObtainAwardRecords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CObtainAwardRecords_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void CObtainAwardRecords::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.CObtainAwardRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
  _internal_metadata_.Clear();
}

const char* CObtainAwardRecords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 curPage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CObtainAwardRecords::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.CObtainAwardRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pagelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.CObtainAwardRecords)
  return target;
}

size_t CObtainAwardRecords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.CObtainAwardRecords)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CObtainAwardRecords::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.CObtainAwardRecords)
  GOOGLE_DCHECK_NE(&from, this);
  const CObtainAwardRecords* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CObtainAwardRecords>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.CObtainAwardRecords)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.CObtainAwardRecords)
    MergeFrom(*source);
  }
}

void CObtainAwardRecords::MergeFrom(const CObtainAwardRecords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.CObtainAwardRecords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
}

void CObtainAwardRecords::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.CObtainAwardRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CObtainAwardRecords::CopyFrom(const CObtainAwardRecords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.CObtainAwardRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CObtainAwardRecords::IsInitialized() const {
  return true;
}

void CObtainAwardRecords::InternalSwap(CObtainAwardRecords* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CObtainAwardRecords::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SObtainAwardRecords::InitAsDefaultInstance() {
}
class SObtainAwardRecords::_Internal {
 public:
};

SObtainAwardRecords::SObtainAwardRecords()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.SObtainAwardRecords)
}
SObtainAwardRecords::SObtainAwardRecords(const SObtainAwardRecords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&curpage_, &from.curpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalnum_) -
    reinterpret_cast<char*>(&curpage_)) + sizeof(totalnum_));
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.SObtainAwardRecords)
}

void SObtainAwardRecords::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SObtainAwardRecords_rewardForLottery_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalnum_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(totalnum_));
}

SObtainAwardRecords::~SObtainAwardRecords() {
  // @@protoc_insertion_point(destructor:rewardForLottery.SObtainAwardRecords)
  SharedDtor();
}

void SObtainAwardRecords::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SObtainAwardRecords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SObtainAwardRecords& SObtainAwardRecords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SObtainAwardRecords_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void SObtainAwardRecords::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.SObtainAwardRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalnum_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(totalnum_));
  _internal_metadata_.Clear();
}

const char* SObtainAwardRecords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rewardForLottery.AwardRecordInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForLottery.SObtainAwardRecords.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curPage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TotalNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SObtainAwardRecords::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.SObtainAwardRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rewardForLottery.AwardRecordInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForLottery.SObtainAwardRecords.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curpage(), target);
  }

  // int32 TotalNum = 4;
  if (this->totalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_totalnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.SObtainAwardRecords)
  return target;
}

size_t SObtainAwardRecords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.SObtainAwardRecords)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rewardForLottery.AwardRecordInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 TotalNum = 4;
  if (this->totalnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SObtainAwardRecords::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.SObtainAwardRecords)
  GOOGLE_DCHECK_NE(&from, this);
  const SObtainAwardRecords* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SObtainAwardRecords>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.SObtainAwardRecords)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.SObtainAwardRecords)
    MergeFrom(*source);
  }
}

void SObtainAwardRecords::MergeFrom(const SObtainAwardRecords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.SObtainAwardRecords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.totalnum() != 0) {
    _internal_set_totalnum(from._internal_totalnum());
  }
}

void SObtainAwardRecords::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.SObtainAwardRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SObtainAwardRecords::CopyFrom(const SObtainAwardRecords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.SObtainAwardRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SObtainAwardRecords::IsInitialized() const {
  return true;
}

void SObtainAwardRecords::InternalSwap(SObtainAwardRecords* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(curpage_, other->curpage_);
  swap(totalnum_, other->totalnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SObtainAwardRecords::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPhysicalRewardExchange::InitAsDefaultInstance() {
}
class CPhysicalRewardExchange::_Internal {
 public:
};

CPhysicalRewardExchange::CPhysicalRewardExchange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.CPhysicalRewardExchange)
}
CPhysicalRewardExchange::CPhysicalRewardExchange(const CPhysicalRewardExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  idcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idcard().empty()) {
    idcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idcard_);
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  ::memcpy(&goodsid_, &from.goodsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&backpackid_) -
    reinterpret_cast<char*>(&goodsid_)) + sizeof(backpackid_));
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.CPhysicalRewardExchange)
}

void CPhysicalRewardExchange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPhysicalRewardExchange_rewardForLottery_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backpackid_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(backpackid_));
}

CPhysicalRewardExchange::~CPhysicalRewardExchange() {
  // @@protoc_insertion_point(destructor:rewardForLottery.CPhysicalRewardExchange)
  SharedDtor();
}

void CPhysicalRewardExchange::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalRewardExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPhysicalRewardExchange& CPhysicalRewardExchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPhysicalRewardExchange_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void CPhysicalRewardExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.CPhysicalRewardExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idcard_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backpackid_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(backpackid_));
  _internal_metadata_.Clear();
}

const char* CPhysicalRewardExchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backpackId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          backpackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForLottery.CPhysicalRewardExchange.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idCard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_idcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForLottery.CPhysicalRewardExchange.idCard"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForLottery.CPhysicalRewardExchange.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPhysicalRewardExchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.CPhysicalRewardExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  // int32 backpackId = 2;
  if (this->backpackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_backpackid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForLottery.CPhysicalRewardExchange.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string idCard = 4;
  if (this->idcard().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idcard().data(), static_cast<int>(this->_internal_idcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForLottery.CPhysicalRewardExchange.idCard");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_idcard(), target);
  }

  // string phone = 5;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForLottery.CPhysicalRewardExchange.phone");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.CPhysicalRewardExchange)
  return target;
}

size_t CPhysicalRewardExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.CPhysicalRewardExchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string idCard = 4;
  if (this->idcard().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idcard());
  }

  // string phone = 5;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 backpackId = 2;
  if (this->backpackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_backpackid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPhysicalRewardExchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.CPhysicalRewardExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalRewardExchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPhysicalRewardExchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.CPhysicalRewardExchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.CPhysicalRewardExchange)
    MergeFrom(*source);
  }
}

void CPhysicalRewardExchange::MergeFrom(const CPhysicalRewardExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.CPhysicalRewardExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.idcard().size() > 0) {

    idcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idcard_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.backpackid() != 0) {
    _internal_set_backpackid(from._internal_backpackid());
  }
}

void CPhysicalRewardExchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.CPhysicalRewardExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalRewardExchange::CopyFrom(const CPhysicalRewardExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.CPhysicalRewardExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalRewardExchange::IsInitialized() const {
  return true;
}

void CPhysicalRewardExchange::InternalSwap(CPhysicalRewardExchange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  idcard_.Swap(&other->idcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(goodsid_, other->goodsid_);
  swap(backpackid_, other->backpackid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPhysicalRewardExchange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPhysicalRewardExchange::InitAsDefaultInstance() {
}
class SPhysicalRewardExchange::_Internal {
 public:
};

SPhysicalRewardExchange::SPhysicalRewardExchange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.SPhysicalRewardExchange)
}
SPhysicalRewardExchange::SPhysicalRewardExchange(const SPhysicalRewardExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.SPhysicalRewardExchange)
}

void SPhysicalRewardExchange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPhysicalRewardExchange_rewardForLottery_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SPhysicalRewardExchange::~SPhysicalRewardExchange() {
  // @@protoc_insertion_point(destructor:rewardForLottery.SPhysicalRewardExchange)
  SharedDtor();
}

void SPhysicalRewardExchange::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SPhysicalRewardExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPhysicalRewardExchange& SPhysicalRewardExchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPhysicalRewardExchange_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void SPhysicalRewardExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.SPhysicalRewardExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SPhysicalRewardExchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForLottery.SPhysicalRewardExchange.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPhysicalRewardExchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.SPhysicalRewardExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForLottery.SPhysicalRewardExchange.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.SPhysicalRewardExchange)
  return target;
}

size_t SPhysicalRewardExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.SPhysicalRewardExchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPhysicalRewardExchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.SPhysicalRewardExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const SPhysicalRewardExchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPhysicalRewardExchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.SPhysicalRewardExchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.SPhysicalRewardExchange)
    MergeFrom(*source);
  }
}

void SPhysicalRewardExchange::MergeFrom(const SPhysicalRewardExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.SPhysicalRewardExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SPhysicalRewardExchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.SPhysicalRewardExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPhysicalRewardExchange::CopyFrom(const SPhysicalRewardExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.SPhysicalRewardExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPhysicalRewardExchange::IsInitialized() const {
  return true;
}

void SPhysicalRewardExchange::InternalSwap(SPhysicalRewardExchange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPhysicalRewardExchange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AwardRecordInfo::InitAsDefaultInstance() {
  ::rewardForLottery::_AwardRecordInfo_default_instance_._instance.get_mutable()->recordinfo_ = const_cast< ::treasureBox::TreasureBoxRewardContent*>(
      ::treasureBox::TreasureBoxRewardContent::internal_default_instance());
}
class AwardRecordInfo::_Internal {
 public:
  static const ::treasureBox::TreasureBoxRewardContent& recordinfo(const AwardRecordInfo* msg);
};

const ::treasureBox::TreasureBoxRewardContent&
AwardRecordInfo::_Internal::recordinfo(const AwardRecordInfo* msg) {
  return *msg->recordinfo_;
}
void AwardRecordInfo::clear_recordinfo() {
  if (GetArenaNoVirtual() == nullptr && recordinfo_ != nullptr) {
    delete recordinfo_;
  }
  recordinfo_ = nullptr;
}
AwardRecordInfo::AwardRecordInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.AwardRecordInfo)
}
AwardRecordInfo::AwardRecordInfo(const AwardRecordInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usericon().empty()) {
    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from._internal_has_recordinfo()) {
    recordinfo_ = new ::treasureBox::TreasureBoxRewardContent(*from.recordinfo_);
  } else {
    recordinfo_ = nullptr;
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.AwardRecordInfo)
}

void AwardRecordInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AwardRecordInfo_rewardForLottery_2eproto.base);
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&recordinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&recordinfo_)) + sizeof(userid_));
}

AwardRecordInfo::~AwardRecordInfo() {
  // @@protoc_insertion_point(destructor:rewardForLottery.AwardRecordInfo)
  SharedDtor();
}

void AwardRecordInfo::SharedDtor() {
  usericon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete recordinfo_;
}

void AwardRecordInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardRecordInfo& AwardRecordInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardRecordInfo_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void AwardRecordInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.AwardRecordInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && recordinfo_ != nullptr) {
    delete recordinfo_;
  }
  recordinfo_ = nullptr;
  userid_ = 0;
  _internal_metadata_.Clear();
}

const char* AwardRecordInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .treasureBox.TreasureBoxRewardContent recordInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_recordinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userIcon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_usericon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForLottery.AwardRecordInfo.userIcon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForLottery.AwardRecordInfo.userName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 userId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardRecordInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.AwardRecordInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .treasureBox.TreasureBoxRewardContent recordInfo = 1;
  if (this->has_recordinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::recordinfo(this), target, stream);
  }

  // string userIcon = 2;
  if (this->usericon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usericon().data(), static_cast<int>(this->_internal_usericon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForLottery.AwardRecordInfo.userIcon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usericon(), target);
  }

  // string userName = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForLottery.AwardRecordInfo.userName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // int32 userId = 4;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.AwardRecordInfo)
  return target;
}

size_t AwardRecordInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.AwardRecordInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userIcon = 2;
  if (this->usericon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usericon());
  }

  // string userName = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .treasureBox.TreasureBoxRewardContent recordInfo = 1;
  if (this->has_recordinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recordinfo_);
  }

  // int32 userId = 4;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardRecordInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.AwardRecordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardRecordInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardRecordInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.AwardRecordInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.AwardRecordInfo)
    MergeFrom(*source);
  }
}

void AwardRecordInfo::MergeFrom(const AwardRecordInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.AwardRecordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usericon().size() > 0) {

    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_recordinfo()) {
    _internal_mutable_recordinfo()->::treasureBox::TreasureBoxRewardContent::MergeFrom(from._internal_recordinfo());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void AwardRecordInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.AwardRecordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardRecordInfo::CopyFrom(const AwardRecordInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.AwardRecordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardRecordInfo::IsInitialized() const {
  return true;
}

void AwardRecordInfo::InternalSwap(AwardRecordInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usericon_.Swap(&other->usericon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(recordinfo_, other->recordinfo_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardRecordInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLotteryBestProgress::InitAsDefaultInstance() {
}
class CLotteryBestProgress::_Internal {
 public:
};

CLotteryBestProgress::CLotteryBestProgress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.CLotteryBestProgress)
}
CLotteryBestProgress::CLotteryBestProgress(const CLotteryBestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.CLotteryBestProgress)
}

void CLotteryBestProgress::SharedCtor() {
}

CLotteryBestProgress::~CLotteryBestProgress() {
  // @@protoc_insertion_point(destructor:rewardForLottery.CLotteryBestProgress)
  SharedDtor();
}

void CLotteryBestProgress::SharedDtor() {
}

void CLotteryBestProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLotteryBestProgress& CLotteryBestProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLotteryBestProgress_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void CLotteryBestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.CLotteryBestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CLotteryBestProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLotteryBestProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.CLotteryBestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.CLotteryBestProgress)
  return target;
}

size_t CLotteryBestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.CLotteryBestProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLotteryBestProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.CLotteryBestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CLotteryBestProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLotteryBestProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.CLotteryBestProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.CLotteryBestProgress)
    MergeFrom(*source);
  }
}

void CLotteryBestProgress::MergeFrom(const CLotteryBestProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.CLotteryBestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CLotteryBestProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.CLotteryBestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLotteryBestProgress::CopyFrom(const CLotteryBestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.CLotteryBestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLotteryBestProgress::IsInitialized() const {
  return true;
}

void CLotteryBestProgress::InternalSwap(CLotteryBestProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLotteryBestProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLotteryBestProgress::InitAsDefaultInstance() {
}
class SLotteryBestProgress::_Internal {
 public:
};

SLotteryBestProgress::SLotteryBestProgress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForLottery.SLotteryBestProgress)
}
SLotteryBestProgress::SLotteryBestProgress(const SLotteryBestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:rewardForLottery.SLotteryBestProgress)
}

void SLotteryBestProgress::SharedCtor() {
  progress_ = 0;
}

SLotteryBestProgress::~SLotteryBestProgress() {
  // @@protoc_insertion_point(destructor:rewardForLottery.SLotteryBestProgress)
  SharedDtor();
}

void SLotteryBestProgress::SharedDtor() {
}

void SLotteryBestProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLotteryBestProgress& SLotteryBestProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLotteryBestProgress_rewardForLottery_2eproto.base);
  return *internal_default_instance();
}


void SLotteryBestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForLottery.SLotteryBestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_ = 0;
  _internal_metadata_.Clear();
}

const char* SLotteryBestProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLotteryBestProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForLottery.SLotteryBestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForLottery.SLotteryBestProgress)
  return target;
}

size_t SLotteryBestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForLottery.SLotteryBestProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLotteryBestProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForLottery.SLotteryBestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const SLotteryBestProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLotteryBestProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForLottery.SLotteryBestProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForLottery.SLotteryBestProgress)
    MergeFrom(*source);
  }
}

void SLotteryBestProgress::MergeFrom(const SLotteryBestProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForLottery.SLotteryBestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
}

void SLotteryBestProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForLottery.SLotteryBestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLotteryBestProgress::CopyFrom(const SLotteryBestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForLottery.SLotteryBestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLotteryBestProgress::IsInitialized() const {
  return true;
}

void SLotteryBestProgress::InternalSwap(SLotteryBestProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLotteryBestProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rewardForLottery
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rewardForLottery::CObtainRewardList* Arena::CreateMaybeMessage< ::rewardForLottery::CObtainRewardList >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::CObtainRewardList >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::SObtainRewardList* Arena::CreateMaybeMessage< ::rewardForLottery::SObtainRewardList >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::SObtainRewardList >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::CBlindBoxLottery* Arena::CreateMaybeMessage< ::rewardForLottery::CBlindBoxLottery >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::CBlindBoxLottery >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::SBlindBoxLottery* Arena::CreateMaybeMessage< ::rewardForLottery::SBlindBoxLottery >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::SBlindBoxLottery >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::CObtainAwardRecords* Arena::CreateMaybeMessage< ::rewardForLottery::CObtainAwardRecords >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::CObtainAwardRecords >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::SObtainAwardRecords* Arena::CreateMaybeMessage< ::rewardForLottery::SObtainAwardRecords >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::SObtainAwardRecords >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::CPhysicalRewardExchange* Arena::CreateMaybeMessage< ::rewardForLottery::CPhysicalRewardExchange >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::CPhysicalRewardExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::SPhysicalRewardExchange* Arena::CreateMaybeMessage< ::rewardForLottery::SPhysicalRewardExchange >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::SPhysicalRewardExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::AwardRecordInfo* Arena::CreateMaybeMessage< ::rewardForLottery::AwardRecordInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::AwardRecordInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::CLotteryBestProgress* Arena::CreateMaybeMessage< ::rewardForLottery::CLotteryBestProgress >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::CLotteryBestProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForLottery::SLotteryBestProgress* Arena::CreateMaybeMessage< ::rewardForLottery::SLotteryBestProgress >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForLottery::SLotteryBestProgress >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
