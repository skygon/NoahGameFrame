// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heartBeat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_heartBeat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_heartBeat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_heartBeat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_heartBeat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_heartBeat_2eproto;
namespace heartBeat {
class CHeartBeat;
class CHeartBeatDefaultTypeInternal;
extern CHeartBeatDefaultTypeInternal _CHeartBeat_default_instance_;
class SHeartBeat;
class SHeartBeatDefaultTypeInternal;
extern SHeartBeatDefaultTypeInternal _SHeartBeat_default_instance_;
}  // namespace heartBeat
PROTOBUF_NAMESPACE_OPEN
template<> ::heartBeat::CHeartBeat* Arena::CreateMaybeMessage<::heartBeat::CHeartBeat>(Arena*);
template<> ::heartBeat::SHeartBeat* Arena::CreateMaybeMessage<::heartBeat::SHeartBeat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace heartBeat {

// ===================================================================

class CHeartBeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:heartBeat.CHeartBeat) */ {
 public:
  CHeartBeat();
  virtual ~CHeartBeat();

  CHeartBeat(const CHeartBeat& from);
  CHeartBeat(CHeartBeat&& from) noexcept
    : CHeartBeat() {
    *this = ::std::move(from);
  }

  inline CHeartBeat& operator=(const CHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHeartBeat& operator=(CHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHeartBeat* internal_default_instance() {
    return reinterpret_cast<const CHeartBeat*>(
               &_CHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CHeartBeat& a, CHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(CHeartBeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHeartBeat* New() const final {
    return CreateMaybeMessage<CHeartBeat>(nullptr);
  }

  CHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHeartBeat& from);
  void MergeFrom(const CHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "heartBeat.CHeartBeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_heartBeat_2eproto);
    return ::descriptor_table_heartBeat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTimeFieldNumber = 1,
  };
  // uint64 clientTime = 1;
  void clear_clienttime();
  ::PROTOBUF_NAMESPACE_ID::uint64 clienttime() const;
  void set_clienttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clienttime() const;
  void _internal_set_clienttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:heartBeat.CHeartBeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clienttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_heartBeat_2eproto;
};
// -------------------------------------------------------------------

class SHeartBeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:heartBeat.SHeartBeat) */ {
 public:
  SHeartBeat();
  virtual ~SHeartBeat();

  SHeartBeat(const SHeartBeat& from);
  SHeartBeat(SHeartBeat&& from) noexcept
    : SHeartBeat() {
    *this = ::std::move(from);
  }

  inline SHeartBeat& operator=(const SHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHeartBeat& operator=(SHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHeartBeat* internal_default_instance() {
    return reinterpret_cast<const SHeartBeat*>(
               &_SHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SHeartBeat& a, SHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(SHeartBeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHeartBeat* New() const final {
    return CreateMaybeMessage<SHeartBeat>(nullptr);
  }

  SHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHeartBeat& from);
  void MergeFrom(const SHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "heartBeat.SHeartBeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_heartBeat_2eproto);
    return ::descriptor_table_heartBeat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTimeFieldNumber = 1,
  };
  // uint64 serverTime = 1;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::uint64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:heartBeat.SHeartBeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_heartBeat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CHeartBeat

// uint64 clientTime = 1;
inline void CHeartBeat::clear_clienttime() {
  clienttime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CHeartBeat::_internal_clienttime() const {
  return clienttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CHeartBeat::clienttime() const {
  // @@protoc_insertion_point(field_get:heartBeat.CHeartBeat.clientTime)
  return _internal_clienttime();
}
inline void CHeartBeat::_internal_set_clienttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  clienttime_ = value;
}
inline void CHeartBeat::set_clienttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clienttime(value);
  // @@protoc_insertion_point(field_set:heartBeat.CHeartBeat.clientTime)
}

// -------------------------------------------------------------------

// SHeartBeat

// uint64 serverTime = 1;
inline void SHeartBeat::clear_servertime() {
  servertime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SHeartBeat::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SHeartBeat::servertime() const {
  // @@protoc_insertion_point(field_get:heartBeat.SHeartBeat.serverTime)
  return _internal_servertime();
}
inline void SHeartBeat::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  servertime_ = value;
}
inline void SHeartBeat::set_servertime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:heartBeat.SHeartBeat.serverTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace heartBeat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_heartBeat_2eproto
