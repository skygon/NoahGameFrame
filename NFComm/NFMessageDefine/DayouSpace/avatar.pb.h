// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avatar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_avatar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_avatar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_avatar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_avatar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avatar_2eproto;
namespace avatarPackage {
class AvatarPicInfo;
class AvatarPicInfoDefaultTypeInternal;
extern AvatarPicInfoDefaultTypeInternal _AvatarPicInfo_default_instance_;
class BAvatar;
class BAvatarDefaultTypeInternal;
extern BAvatarDefaultTypeInternal _BAvatar_default_instance_;
class CAvatarPicList;
class CAvatarPicListDefaultTypeInternal;
extern CAvatarPicListDefaultTypeInternal _CAvatarPicList_default_instance_;
class SAvaterPicList;
class SAvaterPicListDefaultTypeInternal;
extern SAvaterPicListDefaultTypeInternal _SAvaterPicList_default_instance_;
}  // namespace avatarPackage
PROTOBUF_NAMESPACE_OPEN
template<> ::avatarPackage::AvatarPicInfo* Arena::CreateMaybeMessage<::avatarPackage::AvatarPicInfo>(Arena*);
template<> ::avatarPackage::BAvatar* Arena::CreateMaybeMessage<::avatarPackage::BAvatar>(Arena*);
template<> ::avatarPackage::CAvatarPicList* Arena::CreateMaybeMessage<::avatarPackage::CAvatarPicList>(Arena*);
template<> ::avatarPackage::SAvaterPicList* Arena::CreateMaybeMessage<::avatarPackage::SAvaterPicList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace avatarPackage {

// ===================================================================

class BAvatar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:avatarPackage.BAvatar) */ {
 public:
  BAvatar();
  virtual ~BAvatar();

  BAvatar(const BAvatar& from);
  BAvatar(BAvatar&& from) noexcept
    : BAvatar() {
    *this = ::std::move(from);
  }

  inline BAvatar& operator=(const BAvatar& from) {
    CopyFrom(from);
    return *this;
  }
  inline BAvatar& operator=(BAvatar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BAvatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BAvatar* internal_default_instance() {
    return reinterpret_cast<const BAvatar*>(
               &_BAvatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BAvatar& a, BAvatar& b) {
    a.Swap(&b);
  }
  inline void Swap(BAvatar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BAvatar* New() const final {
    return CreateMaybeMessage<BAvatar>(nullptr);
  }

  BAvatar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BAvatar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BAvatar& from);
  void MergeFrom(const BAvatar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BAvatar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "avatarPackage.BAvatar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avatar_2eproto);
    return ::descriptor_table_avatar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarColorFieldNumber = 2,
    kIconFieldNumber = 6,
    kAvatarKeyFieldNumber = 1,
    kAvatarIdFieldNumber = 3,
    kStatusFieldNumber = 4,
    kRightsFieldNumber = 5,
    kNtfIdFieldNumber = 7,
    kTimestampFieldNumber = 8,
    kGoodsIdFieldNumber = 9,
  };
  // string avatarColor = 2;
  void clear_avatarcolor();
  const std::string& avatarcolor() const;
  void set_avatarcolor(const std::string& value);
  void set_avatarcolor(std::string&& value);
  void set_avatarcolor(const char* value);
  void set_avatarcolor(const char* value, size_t size);
  std::string* mutable_avatarcolor();
  std::string* release_avatarcolor();
  void set_allocated_avatarcolor(std::string* avatarcolor);
  private:
  const std::string& _internal_avatarcolor() const;
  void _internal_set_avatarcolor(const std::string& value);
  std::string* _internal_mutable_avatarcolor();
  public:

  // string icon = 6;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // int32 avatarKey = 1;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarId = 3;
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rights = 5;
  void clear_rights();
  ::PROTOBUF_NAMESPACE_ID::int32 rights() const;
  void set_rights(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rights() const;
  void _internal_set_rights(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ntfId = 7;
  void clear_ntfid();
  ::PROTOBUF_NAMESPACE_ID::int32 ntfid() const;
  void set_ntfid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ntfid() const;
  void _internal_set_ntfid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timestamp = 8;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 9;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:avatarPackage.BAvatar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarcolor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 rights_;
  ::PROTOBUF_NAMESPACE_ID::int32 ntfid_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avatar_2eproto;
};
// -------------------------------------------------------------------

class AvatarPicInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:avatarPackage.AvatarPicInfo) */ {
 public:
  AvatarPicInfo();
  virtual ~AvatarPicInfo();

  AvatarPicInfo(const AvatarPicInfo& from);
  AvatarPicInfo(AvatarPicInfo&& from) noexcept
    : AvatarPicInfo() {
    *this = ::std::move(from);
  }

  inline AvatarPicInfo& operator=(const AvatarPicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvatarPicInfo& operator=(AvatarPicInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AvatarPicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvatarPicInfo* internal_default_instance() {
    return reinterpret_cast<const AvatarPicInfo*>(
               &_AvatarPicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AvatarPicInfo& a, AvatarPicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AvatarPicInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AvatarPicInfo* New() const final {
    return CreateMaybeMessage<AvatarPicInfo>(nullptr);
  }

  AvatarPicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AvatarPicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AvatarPicInfo& from);
  void MergeFrom(const AvatarPicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvatarPicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "avatarPackage.AvatarPicInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avatar_2eproto);
    return ::descriptor_table_avatar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarKeyFieldNumber = 1,
    kGoodsIdFieldNumber = 2,
  };
  // int32 avatarKey = 1;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 2;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:avatarPackage.AvatarPicInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avatar_2eproto;
};
// -------------------------------------------------------------------

class CAvatarPicList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:avatarPackage.CAvatarPicList) */ {
 public:
  CAvatarPicList();
  virtual ~CAvatarPicList();

  CAvatarPicList(const CAvatarPicList& from);
  CAvatarPicList(CAvatarPicList&& from) noexcept
    : CAvatarPicList() {
    *this = ::std::move(from);
  }

  inline CAvatarPicList& operator=(const CAvatarPicList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAvatarPicList& operator=(CAvatarPicList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAvatarPicList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAvatarPicList* internal_default_instance() {
    return reinterpret_cast<const CAvatarPicList*>(
               &_CAvatarPicList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CAvatarPicList& a, CAvatarPicList& b) {
    a.Swap(&b);
  }
  inline void Swap(CAvatarPicList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAvatarPicList* New() const final {
    return CreateMaybeMessage<CAvatarPicList>(nullptr);
  }

  CAvatarPicList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAvatarPicList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAvatarPicList& from);
  void MergeFrom(const CAvatarPicList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAvatarPicList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "avatarPackage.CAvatarPicList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avatar_2eproto);
    return ::descriptor_table_avatar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:avatarPackage.CAvatarPicList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avatar_2eproto;
};
// -------------------------------------------------------------------

class SAvaterPicList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:avatarPackage.SAvaterPicList) */ {
 public:
  SAvaterPicList();
  virtual ~SAvaterPicList();

  SAvaterPicList(const SAvaterPicList& from);
  SAvaterPicList(SAvaterPicList&& from) noexcept
    : SAvaterPicList() {
    *this = ::std::move(from);
  }

  inline SAvaterPicList& operator=(const SAvaterPicList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAvaterPicList& operator=(SAvaterPicList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAvaterPicList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAvaterPicList* internal_default_instance() {
    return reinterpret_cast<const SAvaterPicList*>(
               &_SAvaterPicList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SAvaterPicList& a, SAvaterPicList& b) {
    a.Swap(&b);
  }
  inline void Swap(SAvaterPicList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAvaterPicList* New() const final {
    return CreateMaybeMessage<SAvaterPicList>(nullptr);
  }

  SAvaterPicList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAvaterPicList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAvaterPicList& from);
  void MergeFrom(const SAvaterPicList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAvaterPicList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "avatarPackage.SAvaterPicList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avatar_2eproto);
    return ::descriptor_table_avatar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
    kIsWearFieldNumber = 2,
  };
  // repeated .avatarPackage.AvatarPicInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::avatarPackage::AvatarPicInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::AvatarPicInfo >*
      mutable_infos();
  private:
  const ::avatarPackage::AvatarPicInfo& _internal_infos(int index) const;
  ::avatarPackage::AvatarPicInfo* _internal_add_infos();
  public:
  const ::avatarPackage::AvatarPicInfo& infos(int index) const;
  ::avatarPackage::AvatarPicInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::AvatarPicInfo >&
      infos() const;

  // int32 IsWear = 2;
  void clear_iswear();
  ::PROTOBUF_NAMESPACE_ID::int32 iswear() const;
  void set_iswear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iswear() const;
  void _internal_set_iswear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:avatarPackage.SAvaterPicList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::AvatarPicInfo > infos_;
  ::PROTOBUF_NAMESPACE_ID::int32 iswear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avatar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BAvatar

// int32 avatarKey = 1;
inline void BAvatar::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::avatarkey() const {
  // @@protoc_insertion_point(field_get:avatarPackage.BAvatar.avatarKey)
  return _internal_avatarkey();
}
inline void BAvatar::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void BAvatar::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:avatarPackage.BAvatar.avatarKey)
}

// string avatarColor = 2;
inline void BAvatar::clear_avatarcolor() {
  avatarcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BAvatar::avatarcolor() const {
  // @@protoc_insertion_point(field_get:avatarPackage.BAvatar.avatarColor)
  return _internal_avatarcolor();
}
inline void BAvatar::set_avatarcolor(const std::string& value) {
  _internal_set_avatarcolor(value);
  // @@protoc_insertion_point(field_set:avatarPackage.BAvatar.avatarColor)
}
inline std::string* BAvatar::mutable_avatarcolor() {
  // @@protoc_insertion_point(field_mutable:avatarPackage.BAvatar.avatarColor)
  return _internal_mutable_avatarcolor();
}
inline const std::string& BAvatar::_internal_avatarcolor() const {
  return avatarcolor_.GetNoArena();
}
inline void BAvatar::_internal_set_avatarcolor(const std::string& value) {
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BAvatar::set_avatarcolor(std::string&& value) {
  
  avatarcolor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avatarPackage.BAvatar.avatarColor)
}
inline void BAvatar::set_avatarcolor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avatarPackage.BAvatar.avatarColor)
}
inline void BAvatar::set_avatarcolor(const char* value, size_t size) {
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avatarPackage.BAvatar.avatarColor)
}
inline std::string* BAvatar::_internal_mutable_avatarcolor() {
  
  return avatarcolor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BAvatar::release_avatarcolor() {
  // @@protoc_insertion_point(field_release:avatarPackage.BAvatar.avatarColor)
  
  return avatarcolor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BAvatar::set_allocated_avatarcolor(std::string* avatarcolor) {
  if (avatarcolor != nullptr) {
    
  } else {
    
  }
  avatarcolor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatarcolor);
  // @@protoc_insertion_point(field_set_allocated:avatarPackage.BAvatar.avatarColor)
}

// int32 avatarId = 3;
inline void BAvatar::clear_avatarid() {
  avatarid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::avatarid() const {
  // @@protoc_insertion_point(field_get:avatarPackage.BAvatar.avatarId)
  return _internal_avatarid();
}
inline void BAvatar::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarid_ = value;
}
inline void BAvatar::set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:avatarPackage.BAvatar.avatarId)
}

// int32 status = 4;
inline void BAvatar::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::status() const {
  // @@protoc_insertion_point(field_get:avatarPackage.BAvatar.status)
  return _internal_status();
}
inline void BAvatar::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void BAvatar::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:avatarPackage.BAvatar.status)
}

// int32 rights = 5;
inline void BAvatar::clear_rights() {
  rights_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::_internal_rights() const {
  return rights_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::rights() const {
  // @@protoc_insertion_point(field_get:avatarPackage.BAvatar.rights)
  return _internal_rights();
}
inline void BAvatar::_internal_set_rights(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rights_ = value;
}
inline void BAvatar::set_rights(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rights(value);
  // @@protoc_insertion_point(field_set:avatarPackage.BAvatar.rights)
}

// string icon = 6;
inline void BAvatar::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BAvatar::icon() const {
  // @@protoc_insertion_point(field_get:avatarPackage.BAvatar.icon)
  return _internal_icon();
}
inline void BAvatar::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:avatarPackage.BAvatar.icon)
}
inline std::string* BAvatar::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:avatarPackage.BAvatar.icon)
  return _internal_mutable_icon();
}
inline const std::string& BAvatar::_internal_icon() const {
  return icon_.GetNoArena();
}
inline void BAvatar::_internal_set_icon(const std::string& value) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BAvatar::set_icon(std::string&& value) {
  
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:avatarPackage.BAvatar.icon)
}
inline void BAvatar::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:avatarPackage.BAvatar.icon)
}
inline void BAvatar::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:avatarPackage.BAvatar.icon)
}
inline std::string* BAvatar::_internal_mutable_icon() {
  
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BAvatar::release_icon() {
  // @@protoc_insertion_point(field_release:avatarPackage.BAvatar.icon)
  
  return icon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BAvatar::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:avatarPackage.BAvatar.icon)
}

// int32 ntfId = 7;
inline void BAvatar::clear_ntfid() {
  ntfid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::_internal_ntfid() const {
  return ntfid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::ntfid() const {
  // @@protoc_insertion_point(field_get:avatarPackage.BAvatar.ntfId)
  return _internal_ntfid();
}
inline void BAvatar::_internal_set_ntfid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ntfid_ = value;
}
inline void BAvatar::set_ntfid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ntfid(value);
  // @@protoc_insertion_point(field_set:avatarPackage.BAvatar.ntfId)
}

// int32 timestamp = 8;
inline void BAvatar::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::timestamp() const {
  // @@protoc_insertion_point(field_get:avatarPackage.BAvatar.timestamp)
  return _internal_timestamp();
}
inline void BAvatar::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void BAvatar::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:avatarPackage.BAvatar.timestamp)
}

// int32 goodsId = 9;
inline void BAvatar::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BAvatar::goodsid() const {
  // @@protoc_insertion_point(field_get:avatarPackage.BAvatar.goodsId)
  return _internal_goodsid();
}
inline void BAvatar::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void BAvatar::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:avatarPackage.BAvatar.goodsId)
}

// -------------------------------------------------------------------

// AvatarPicInfo

// int32 avatarKey = 1;
inline void AvatarPicInfo::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvatarPicInfo::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvatarPicInfo::avatarkey() const {
  // @@protoc_insertion_point(field_get:avatarPackage.AvatarPicInfo.avatarKey)
  return _internal_avatarkey();
}
inline void AvatarPicInfo::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void AvatarPicInfo::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:avatarPackage.AvatarPicInfo.avatarKey)
}

// int32 goodsId = 2;
inline void AvatarPicInfo::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvatarPicInfo::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvatarPicInfo::goodsid() const {
  // @@protoc_insertion_point(field_get:avatarPackage.AvatarPicInfo.goodsId)
  return _internal_goodsid();
}
inline void AvatarPicInfo::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void AvatarPicInfo::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:avatarPackage.AvatarPicInfo.goodsId)
}

// -------------------------------------------------------------------

// CAvatarPicList

// int32 uid = 1;
inline void CAvatarPicList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAvatarPicList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAvatarPicList::uid() const {
  // @@protoc_insertion_point(field_get:avatarPackage.CAvatarPicList.uid)
  return _internal_uid();
}
inline void CAvatarPicList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CAvatarPicList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:avatarPackage.CAvatarPicList.uid)
}

// -------------------------------------------------------------------

// SAvaterPicList

// repeated .avatarPackage.AvatarPicInfo infos = 1;
inline int SAvaterPicList::_internal_infos_size() const {
  return infos_.size();
}
inline int SAvaterPicList::infos_size() const {
  return _internal_infos_size();
}
inline void SAvaterPicList::clear_infos() {
  infos_.Clear();
}
inline ::avatarPackage::AvatarPicInfo* SAvaterPicList::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:avatarPackage.SAvaterPicList.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::AvatarPicInfo >*
SAvaterPicList::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:avatarPackage.SAvaterPicList.infos)
  return &infos_;
}
inline const ::avatarPackage::AvatarPicInfo& SAvaterPicList::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::avatarPackage::AvatarPicInfo& SAvaterPicList::infos(int index) const {
  // @@protoc_insertion_point(field_get:avatarPackage.SAvaterPicList.infos)
  return _internal_infos(index);
}
inline ::avatarPackage::AvatarPicInfo* SAvaterPicList::_internal_add_infos() {
  return infos_.Add();
}
inline ::avatarPackage::AvatarPicInfo* SAvaterPicList::add_infos() {
  // @@protoc_insertion_point(field_add:avatarPackage.SAvaterPicList.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::AvatarPicInfo >&
SAvaterPicList::infos() const {
  // @@protoc_insertion_point(field_list:avatarPackage.SAvaterPicList.infos)
  return infos_;
}

// int32 IsWear = 2;
inline void SAvaterPicList::clear_iswear() {
  iswear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAvaterPicList::_internal_iswear() const {
  return iswear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAvaterPicList::iswear() const {
  // @@protoc_insertion_point(field_get:avatarPackage.SAvaterPicList.IsWear)
  return _internal_iswear();
}
inline void SAvaterPicList::_internal_set_iswear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iswear_ = value;
}
inline void SAvaterPicList::set_iswear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iswear(value);
  // @@protoc_insertion_point(field_set:avatarPackage.SAvaterPicList.IsWear)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace avatarPackage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_avatar_2eproto
