// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skeleton.proto

#include "skeleton.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_skeleton_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceBlendshapInfo_skeleton_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skeleton_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleBoneInfo_skeleton_2eproto;
namespace skeleton {
class SingleBoneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleBoneInfo> _instance;
} _SingleBoneInfo_default_instance_;
class FaceBlendshapInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceBlendshapInfo> _instance;
} _FaceBlendshapInfo_default_instance_;
class CSkeletonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSkeleton> _instance;
} _CSkeleton_default_instance_;
class SSkeletonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSkeleton> _instance;
} _SSkeleton_default_instance_;
}  // namespace skeleton
static void InitDefaultsscc_info_CSkeleton_skeleton_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skeleton::_CSkeleton_default_instance_;
    new (ptr) ::skeleton::CSkeleton();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skeleton::CSkeleton::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CSkeleton_skeleton_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CSkeleton_skeleton_2eproto}, {
      &scc_info_SingleBoneInfo_skeleton_2eproto.base,
      &scc_info_FaceBlendshapInfo_skeleton_2eproto.base,}};

static void InitDefaultsscc_info_FaceBlendshapInfo_skeleton_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skeleton::_FaceBlendshapInfo_default_instance_;
    new (ptr) ::skeleton::FaceBlendshapInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skeleton::FaceBlendshapInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceBlendshapInfo_skeleton_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FaceBlendshapInfo_skeleton_2eproto}, {}};

static void InitDefaultsscc_info_SSkeleton_skeleton_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skeleton::_SSkeleton_default_instance_;
    new (ptr) ::skeleton::SSkeleton();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skeleton::SSkeleton::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SSkeleton_skeleton_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SSkeleton_skeleton_2eproto}, {
      &scc_info_SingleBoneInfo_skeleton_2eproto.base,
      &scc_info_FaceBlendshapInfo_skeleton_2eproto.base,}};

static void InitDefaultsscc_info_SingleBoneInfo_skeleton_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::skeleton::_SingleBoneInfo_default_instance_;
    new (ptr) ::skeleton::SingleBoneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::skeleton::SingleBoneInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleBoneInfo_skeleton_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SingleBoneInfo_skeleton_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skeleton_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skeleton_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skeleton_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skeleton_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skeleton::SingleBoneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skeleton::SingleBoneInfo, bid_),
  PROTOBUF_FIELD_OFFSET(::skeleton::SingleBoneInfo, x_),
  PROTOBUF_FIELD_OFFSET(::skeleton::SingleBoneInfo, y_),
  PROTOBUF_FIELD_OFFSET(::skeleton::SingleBoneInfo, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skeleton::FaceBlendshapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skeleton::FaceBlendshapInfo, bid_),
  PROTOBUF_FIELD_OFFSET(::skeleton::FaceBlendshapInfo, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skeleton::CSkeleton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skeleton::CSkeleton, servertime_),
  PROTOBUF_FIELD_OFFSET(::skeleton::CSkeleton, skeletonposlist_),
  PROTOBUF_FIELD_OFFSET(::skeleton::CSkeleton, skeletonrotlist_),
  PROTOBUF_FIELD_OFFSET(::skeleton::CSkeleton, faceblendshapinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skeleton::SSkeleton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skeleton::SSkeleton, servertime_),
  PROTOBUF_FIELD_OFFSET(::skeleton::SSkeleton, skeletonposlist_),
  PROTOBUF_FIELD_OFFSET(::skeleton::SSkeleton, skeletonrotlist_),
  PROTOBUF_FIELD_OFFSET(::skeleton::SSkeleton, faceblendshapinfo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::skeleton::SingleBoneInfo)},
  { 9, -1, sizeof(::skeleton::FaceBlendshapInfo)},
  { 16, -1, sizeof(::skeleton::CSkeleton)},
  { 25, -1, sizeof(::skeleton::SSkeleton)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skeleton::_SingleBoneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skeleton::_FaceBlendshapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skeleton::_CSkeleton_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skeleton::_SSkeleton_default_instance_),
};

const char descriptor_table_protodef_skeleton_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016skeleton.proto\022\010skeleton\">\n\016SingleBone"
  "Info\022\013\n\003bID\030\001 \001(\005\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022"
  "\t\n\001z\030\004 \001(\002\"+\n\021FaceBlendshapInfo\022\013\n\003bID\030\001"
  " \001(\005\022\t\n\001v\030\002 \001(\002\"\275\001\n\tCSkeleton\022\022\n\nserverT"
  "ime\030\001 \001(\003\0221\n\017skeletonPosList\030\002 \003(\0132\030.ske"
  "leton.SingleBoneInfo\0221\n\017skeletonRotList\030"
  "\003 \003(\0132\030.skeleton.SingleBoneInfo\0226\n\021faceB"
  "lendshapInfo\030\004 \003(\0132\033.skeleton.FaceBlends"
  "hapInfo\"\275\001\n\tSSkeleton\022\022\n\nserverTime\030\001 \001("
  "\003\0221\n\017skeletonPosList\030\002 \003(\0132\030.skeleton.Si"
  "ngleBoneInfo\0221\n\017skeletonRotList\030\003 \003(\0132\030."
  "skeleton.SingleBoneInfo\0226\n\021faceBlendshap"
  "Info\030\004 \003(\0132\033.skeleton.FaceBlendshapInfoB"
  "$\n\030com.dayou.space.protobufB\010Skeletonb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skeleton_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_skeleton_2eproto_sccs[4] = {
  &scc_info_CSkeleton_skeleton_2eproto.base,
  &scc_info_FaceBlendshapInfo_skeleton_2eproto.base,
  &scc_info_SSkeleton_skeleton_2eproto.base,
  &scc_info_SingleBoneInfo_skeleton_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skeleton_2eproto_once;
static bool descriptor_table_skeleton_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skeleton_2eproto = {
  &descriptor_table_skeleton_2eproto_initialized, descriptor_table_protodef_skeleton_2eproto, "skeleton.proto", 565,
  &descriptor_table_skeleton_2eproto_once, descriptor_table_skeleton_2eproto_sccs, descriptor_table_skeleton_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_skeleton_2eproto::offsets,
  file_level_metadata_skeleton_2eproto, 4, file_level_enum_descriptors_skeleton_2eproto, file_level_service_descriptors_skeleton_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_skeleton_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_skeleton_2eproto), true);
namespace skeleton {

// ===================================================================

void SingleBoneInfo::InitAsDefaultInstance() {
}
class SingleBoneInfo::_Internal {
 public:
};

SingleBoneInfo::SingleBoneInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skeleton.SingleBoneInfo)
}
SingleBoneInfo::SingleBoneInfo(const SingleBoneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bid_, &from.bid_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&bid_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skeleton.SingleBoneInfo)
}

void SingleBoneInfo::SharedCtor() {
  ::memset(&bid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&bid_)) + sizeof(z_));
}

SingleBoneInfo::~SingleBoneInfo() {
  // @@protoc_insertion_point(destructor:skeleton.SingleBoneInfo)
  SharedDtor();
}

void SingleBoneInfo::SharedDtor() {
}

void SingleBoneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleBoneInfo& SingleBoneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleBoneInfo_skeleton_2eproto.base);
  return *internal_default_instance();
}


void SingleBoneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:skeleton.SingleBoneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&bid_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* SingleBoneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleBoneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skeleton.SingleBoneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bID = 1;
  if (this->bid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bid(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skeleton.SingleBoneInfo)
  return target;
}

size_t SingleBoneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skeleton.SingleBoneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bID = 1;
  if (this->bid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleBoneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skeleton.SingleBoneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleBoneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleBoneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skeleton.SingleBoneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skeleton.SingleBoneInfo)
    MergeFrom(*source);
  }
}

void SingleBoneInfo::MergeFrom(const SingleBoneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skeleton.SingleBoneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bid() != 0) {
    _internal_set_bid(from._internal_bid());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void SingleBoneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skeleton.SingleBoneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleBoneInfo::CopyFrom(const SingleBoneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skeleton.SingleBoneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleBoneInfo::IsInitialized() const {
  return true;
}

void SingleBoneInfo::InternalSwap(SingleBoneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bid_, other->bid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleBoneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceBlendshapInfo::InitAsDefaultInstance() {
}
class FaceBlendshapInfo::_Internal {
 public:
};

FaceBlendshapInfo::FaceBlendshapInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skeleton.FaceBlendshapInfo)
}
FaceBlendshapInfo::FaceBlendshapInfo(const FaceBlendshapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bid_, &from.bid_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&bid_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:skeleton.FaceBlendshapInfo)
}

void FaceBlendshapInfo::SharedCtor() {
  ::memset(&bid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&bid_)) + sizeof(v_));
}

FaceBlendshapInfo::~FaceBlendshapInfo() {
  // @@protoc_insertion_point(destructor:skeleton.FaceBlendshapInfo)
  SharedDtor();
}

void FaceBlendshapInfo::SharedDtor() {
}

void FaceBlendshapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceBlendshapInfo& FaceBlendshapInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceBlendshapInfo_skeleton_2eproto.base);
  return *internal_default_instance();
}


void FaceBlendshapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:skeleton.FaceBlendshapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&bid_)) + sizeof(v_));
  _internal_metadata_.Clear();
}

const char* FaceBlendshapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceBlendshapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skeleton.FaceBlendshapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bID = 1;
  if (this->bid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bid(), target);
  }

  // float v = 2;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skeleton.FaceBlendshapInfo)
  return target;
}

size_t FaceBlendshapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skeleton.FaceBlendshapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bID = 1;
  if (this->bid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid());
  }

  // float v = 2;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceBlendshapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skeleton.FaceBlendshapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceBlendshapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceBlendshapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skeleton.FaceBlendshapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skeleton.FaceBlendshapInfo)
    MergeFrom(*source);
  }
}

void FaceBlendshapInfo::MergeFrom(const FaceBlendshapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skeleton.FaceBlendshapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bid() != 0) {
    _internal_set_bid(from._internal_bid());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
}

void FaceBlendshapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skeleton.FaceBlendshapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceBlendshapInfo::CopyFrom(const FaceBlendshapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skeleton.FaceBlendshapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceBlendshapInfo::IsInitialized() const {
  return true;
}

void FaceBlendshapInfo::InternalSwap(FaceBlendshapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bid_, other->bid_);
  swap(v_, other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceBlendshapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSkeleton::InitAsDefaultInstance() {
}
class CSkeleton::_Internal {
 public:
};

CSkeleton::CSkeleton()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skeleton.CSkeleton)
}
CSkeleton::CSkeleton(const CSkeleton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      skeletonposlist_(from.skeletonposlist_),
      skeletonrotlist_(from.skeletonrotlist_),
      faceblendshapinfo_(from.faceblendshapinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servertime_ = from.servertime_;
  // @@protoc_insertion_point(copy_constructor:skeleton.CSkeleton)
}

void CSkeleton::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSkeleton_skeleton_2eproto.base);
  servertime_ = PROTOBUF_LONGLONG(0);
}

CSkeleton::~CSkeleton() {
  // @@protoc_insertion_point(destructor:skeleton.CSkeleton)
  SharedDtor();
}

void CSkeleton::SharedDtor() {
}

void CSkeleton::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSkeleton& CSkeleton::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSkeleton_skeleton_2eproto.base);
  return *internal_default_instance();
}


void CSkeleton::Clear() {
// @@protoc_insertion_point(message_clear_start:skeleton.CSkeleton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skeletonposlist_.Clear();
  skeletonrotlist_.Clear();
  faceblendshapinfo_.Clear();
  servertime_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CSkeleton::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 serverTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skeletonposlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skeletonrotlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faceblendshapinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSkeleton::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skeleton.CSkeleton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serverTime = 1;
  if (this->servertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_servertime(), target);
  }

  // repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skeletonposlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_skeletonposlist(i), target, stream);
  }

  // repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skeletonrotlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_skeletonrotlist(i), target, stream);
  }

  // repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faceblendshapinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_faceblendshapinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skeleton.CSkeleton)
  return target;
}

size_t CSkeleton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skeleton.CSkeleton)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
  total_size += 1UL * this->_internal_skeletonposlist_size();
  for (const auto& msg : this->skeletonposlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
  total_size += 1UL * this->_internal_skeletonrotlist_size();
  for (const auto& msg : this->skeletonrotlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
  total_size += 1UL * this->_internal_faceblendshapinfo_size();
  for (const auto& msg : this->faceblendshapinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 serverTime = 1;
  if (this->servertime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_servertime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSkeleton::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skeleton.CSkeleton)
  GOOGLE_DCHECK_NE(&from, this);
  const CSkeleton* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSkeleton>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skeleton.CSkeleton)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skeleton.CSkeleton)
    MergeFrom(*source);
  }
}

void CSkeleton::MergeFrom(const CSkeleton& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skeleton.CSkeleton)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skeletonposlist_.MergeFrom(from.skeletonposlist_);
  skeletonrotlist_.MergeFrom(from.skeletonrotlist_);
  faceblendshapinfo_.MergeFrom(from.faceblendshapinfo_);
  if (from.servertime() != 0) {
    _internal_set_servertime(from._internal_servertime());
  }
}

void CSkeleton::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skeleton.CSkeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSkeleton::CopyFrom(const CSkeleton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skeleton.CSkeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSkeleton::IsInitialized() const {
  return true;
}

void CSkeleton::InternalSwap(CSkeleton* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  skeletonposlist_.InternalSwap(&other->skeletonposlist_);
  skeletonrotlist_.InternalSwap(&other->skeletonrotlist_);
  faceblendshapinfo_.InternalSwap(&other->faceblendshapinfo_);
  swap(servertime_, other->servertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSkeleton::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSkeleton::InitAsDefaultInstance() {
}
class SSkeleton::_Internal {
 public:
};

SSkeleton::SSkeleton()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:skeleton.SSkeleton)
}
SSkeleton::SSkeleton(const SSkeleton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      skeletonposlist_(from.skeletonposlist_),
      skeletonrotlist_(from.skeletonrotlist_),
      faceblendshapinfo_(from.faceblendshapinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servertime_ = from.servertime_;
  // @@protoc_insertion_point(copy_constructor:skeleton.SSkeleton)
}

void SSkeleton::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSkeleton_skeleton_2eproto.base);
  servertime_ = PROTOBUF_LONGLONG(0);
}

SSkeleton::~SSkeleton() {
  // @@protoc_insertion_point(destructor:skeleton.SSkeleton)
  SharedDtor();
}

void SSkeleton::SharedDtor() {
}

void SSkeleton::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSkeleton& SSkeleton::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSkeleton_skeleton_2eproto.base);
  return *internal_default_instance();
}


void SSkeleton::Clear() {
// @@protoc_insertion_point(message_clear_start:skeleton.SSkeleton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skeletonposlist_.Clear();
  skeletonrotlist_.Clear();
  faceblendshapinfo_.Clear();
  servertime_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SSkeleton::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 serverTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skeletonposlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skeletonrotlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faceblendshapinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSkeleton::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skeleton.SSkeleton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serverTime = 1;
  if (this->servertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_servertime(), target);
  }

  // repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skeletonposlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_skeletonposlist(i), target, stream);
  }

  // repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skeletonrotlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_skeletonrotlist(i), target, stream);
  }

  // repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faceblendshapinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_faceblendshapinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skeleton.SSkeleton)
  return target;
}

size_t SSkeleton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skeleton.SSkeleton)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .skeleton.SingleBoneInfo skeletonPosList = 2;
  total_size += 1UL * this->_internal_skeletonposlist_size();
  for (const auto& msg : this->skeletonposlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .skeleton.SingleBoneInfo skeletonRotList = 3;
  total_size += 1UL * this->_internal_skeletonrotlist_size();
  for (const auto& msg : this->skeletonrotlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .skeleton.FaceBlendshapInfo faceBlendshapInfo = 4;
  total_size += 1UL * this->_internal_faceblendshapinfo_size();
  for (const auto& msg : this->faceblendshapinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 serverTime = 1;
  if (this->servertime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_servertime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSkeleton::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skeleton.SSkeleton)
  GOOGLE_DCHECK_NE(&from, this);
  const SSkeleton* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSkeleton>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skeleton.SSkeleton)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skeleton.SSkeleton)
    MergeFrom(*source);
  }
}

void SSkeleton::MergeFrom(const SSkeleton& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skeleton.SSkeleton)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skeletonposlist_.MergeFrom(from.skeletonposlist_);
  skeletonrotlist_.MergeFrom(from.skeletonrotlist_);
  faceblendshapinfo_.MergeFrom(from.faceblendshapinfo_);
  if (from.servertime() != 0) {
    _internal_set_servertime(from._internal_servertime());
  }
}

void SSkeleton::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skeleton.SSkeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSkeleton::CopyFrom(const SSkeleton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skeleton.SSkeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSkeleton::IsInitialized() const {
  return true;
}

void SSkeleton::InternalSwap(SSkeleton* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  skeletonposlist_.InternalSwap(&other->skeletonposlist_);
  skeletonrotlist_.InternalSwap(&other->skeletonrotlist_);
  faceblendshapinfo_.InternalSwap(&other->faceblendshapinfo_);
  swap(servertime_, other->servertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSkeleton::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace skeleton
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skeleton::SingleBoneInfo* Arena::CreateMaybeMessage< ::skeleton::SingleBoneInfo >(Arena* arena) {
  return Arena::CreateInternal< ::skeleton::SingleBoneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::skeleton::FaceBlendshapInfo* Arena::CreateMaybeMessage< ::skeleton::FaceBlendshapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::skeleton::FaceBlendshapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::skeleton::CSkeleton* Arena::CreateMaybeMessage< ::skeleton::CSkeleton >(Arena* arena) {
  return Arena::CreateInternal< ::skeleton::CSkeleton >(arena);
}
template<> PROTOBUF_NOINLINE ::skeleton::SSkeleton* Arena::CreateMaybeMessage< ::skeleton::SSkeleton >(Arena* arena) {
  return Arena::CreateInternal< ::skeleton::SSkeleton >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
