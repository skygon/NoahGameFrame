// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shareSpace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shareSpace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shareSpace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shareSpace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shareSpace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shareSpace_2eproto;
namespace shareSpace {
class CShareCodeParse;
class CShareCodeParseDefaultTypeInternal;
extern CShareCodeParseDefaultTypeInternal _CShareCodeParse_default_instance_;
class CShareSpaceCreate;
class CShareSpaceCreateDefaultTypeInternal;
extern CShareSpaceCreateDefaultTypeInternal _CShareSpaceCreate_default_instance_;
class SShareCodeParse;
class SShareCodeParseDefaultTypeInternal;
extern SShareCodeParseDefaultTypeInternal _SShareCodeParse_default_instance_;
class SShareSpaceCreate;
class SShareSpaceCreateDefaultTypeInternal;
extern SShareSpaceCreateDefaultTypeInternal _SShareSpaceCreate_default_instance_;
}  // namespace shareSpace
PROTOBUF_NAMESPACE_OPEN
template<> ::shareSpace::CShareCodeParse* Arena::CreateMaybeMessage<::shareSpace::CShareCodeParse>(Arena*);
template<> ::shareSpace::CShareSpaceCreate* Arena::CreateMaybeMessage<::shareSpace::CShareSpaceCreate>(Arena*);
template<> ::shareSpace::SShareCodeParse* Arena::CreateMaybeMessage<::shareSpace::SShareCodeParse>(Arena*);
template<> ::shareSpace::SShareSpaceCreate* Arena::CreateMaybeMessage<::shareSpace::SShareSpaceCreate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace shareSpace {

// ===================================================================

class CShareSpaceCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shareSpace.CShareSpaceCreate) */ {
 public:
  CShareSpaceCreate();
  virtual ~CShareSpaceCreate();

  CShareSpaceCreate(const CShareSpaceCreate& from);
  CShareSpaceCreate(CShareSpaceCreate&& from) noexcept
    : CShareSpaceCreate() {
    *this = ::std::move(from);
  }

  inline CShareSpaceCreate& operator=(const CShareSpaceCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShareSpaceCreate& operator=(CShareSpaceCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CShareSpaceCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CShareSpaceCreate* internal_default_instance() {
    return reinterpret_cast<const CShareSpaceCreate*>(
               &_CShareSpaceCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CShareSpaceCreate& a, CShareSpaceCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(CShareSpaceCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CShareSpaceCreate* New() const final {
    return CreateMaybeMessage<CShareSpaceCreate>(nullptr);
  }

  CShareSpaceCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CShareSpaceCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CShareSpaceCreate& from);
  void MergeFrom(const CShareSpaceCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShareSpaceCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shareSpace.CShareSpaceCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shareSpace_2eproto);
    return ::descriptor_table_shareSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shareSpace.CShareSpaceCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shareSpace_2eproto;
};
// -------------------------------------------------------------------

class SShareSpaceCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shareSpace.SShareSpaceCreate) */ {
 public:
  SShareSpaceCreate();
  virtual ~SShareSpaceCreate();

  SShareSpaceCreate(const SShareSpaceCreate& from);
  SShareSpaceCreate(SShareSpaceCreate&& from) noexcept
    : SShareSpaceCreate() {
    *this = ::std::move(from);
  }

  inline SShareSpaceCreate& operator=(const SShareSpaceCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SShareSpaceCreate& operator=(SShareSpaceCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SShareSpaceCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SShareSpaceCreate* internal_default_instance() {
    return reinterpret_cast<const SShareSpaceCreate*>(
               &_SShareSpaceCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SShareSpaceCreate& a, SShareSpaceCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(SShareSpaceCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SShareSpaceCreate* New() const final {
    return CreateMaybeMessage<SShareSpaceCreate>(nullptr);
  }

  SShareSpaceCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SShareSpaceCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SShareSpaceCreate& from);
  void MergeFrom(const SShareSpaceCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SShareSpaceCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shareSpace.SShareSpaceCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shareSpace_2eproto);
    return ::descriptor_table_shareSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kUrlFieldNumber = 2,
    kContentFieldNumber = 3,
    kCoverFieldNumber = 4,
    kWechatContentFieldNumber = 5,
    kShareTimeFieldNumber = 6,
    kVisitCountFieldNumber = 7,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string cover = 4;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string wechatContent = 5;
  void clear_wechatcontent();
  const std::string& wechatcontent() const;
  void set_wechatcontent(const std::string& value);
  void set_wechatcontent(std::string&& value);
  void set_wechatcontent(const char* value);
  void set_wechatcontent(const char* value, size_t size);
  std::string* mutable_wechatcontent();
  std::string* release_wechatcontent();
  void set_allocated_wechatcontent(std::string* wechatcontent);
  private:
  const std::string& _internal_wechatcontent() const;
  void _internal_set_wechatcontent(const std::string& value);
  std::string* _internal_mutable_wechatcontent();
  public:

  // string shareTime = 6;
  void clear_sharetime();
  const std::string& sharetime() const;
  void set_sharetime(const std::string& value);
  void set_sharetime(std::string&& value);
  void set_sharetime(const char* value);
  void set_sharetime(const char* value, size_t size);
  std::string* mutable_sharetime();
  std::string* release_sharetime();
  void set_allocated_sharetime(std::string* sharetime);
  private:
  const std::string& _internal_sharetime() const;
  void _internal_set_sharetime(const std::string& value);
  std::string* _internal_mutable_sharetime();
  public:

  // int32 visitCount = 7;
  void clear_visitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 visitcount() const;
  void set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_visitcount() const;
  void _internal_set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shareSpace.SShareSpaceCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wechatcontent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sharetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 visitcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shareSpace_2eproto;
};
// -------------------------------------------------------------------

class CShareCodeParse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shareSpace.CShareCodeParse) */ {
 public:
  CShareCodeParse();
  virtual ~CShareCodeParse();

  CShareCodeParse(const CShareCodeParse& from);
  CShareCodeParse(CShareCodeParse&& from) noexcept
    : CShareCodeParse() {
    *this = ::std::move(from);
  }

  inline CShareCodeParse& operator=(const CShareCodeParse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShareCodeParse& operator=(CShareCodeParse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CShareCodeParse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CShareCodeParse* internal_default_instance() {
    return reinterpret_cast<const CShareCodeParse*>(
               &_CShareCodeParse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CShareCodeParse& a, CShareCodeParse& b) {
    a.Swap(&b);
  }
  inline void Swap(CShareCodeParse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CShareCodeParse* New() const final {
    return CreateMaybeMessage<CShareCodeParse>(nullptr);
  }

  CShareCodeParse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CShareCodeParse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CShareCodeParse& from);
  void MergeFrom(const CShareCodeParse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShareCodeParse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shareSpace.CShareCodeParse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shareSpace_2eproto);
    return ::descriptor_table_shareSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:shareSpace.CShareCodeParse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shareSpace_2eproto;
};
// -------------------------------------------------------------------

class SShareCodeParse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shareSpace.SShareCodeParse) */ {
 public:
  SShareCodeParse();
  virtual ~SShareCodeParse();

  SShareCodeParse(const SShareCodeParse& from);
  SShareCodeParse(SShareCodeParse&& from) noexcept
    : SShareCodeParse() {
    *this = ::std::move(from);
  }

  inline SShareCodeParse& operator=(const SShareCodeParse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SShareCodeParse& operator=(SShareCodeParse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SShareCodeParse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SShareCodeParse* internal_default_instance() {
    return reinterpret_cast<const SShareCodeParse*>(
               &_SShareCodeParse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SShareCodeParse& a, SShareCodeParse& b) {
    a.Swap(&b);
  }
  inline void Swap(SShareCodeParse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SShareCodeParse* New() const final {
    return CreateMaybeMessage<SShareCodeParse>(nullptr);
  }

  SShareCodeParse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SShareCodeParse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SShareCodeParse& from);
  void MergeFrom(const SShareCodeParse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SShareCodeParse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shareSpace.SShareCodeParse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shareSpace_2eproto);
    return ::descriptor_table_shareSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kHeadPicFieldNumber = 3,
    kHouseNameFieldNumber = 6,
    kHouseCoverFieldNumber = 7,
    kHousePwdFieldNumber = 8,
    kContentFieldNumber = 9,
    kHousePositionFieldNumber = 10,
    kUidFieldNumber = 1,
    kHouseTypeFieldNumber = 4,
    kHouseIdFieldNumber = 5,
  };
  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string headPic = 3;
  void clear_headpic();
  const std::string& headpic() const;
  void set_headpic(const std::string& value);
  void set_headpic(std::string&& value);
  void set_headpic(const char* value);
  void set_headpic(const char* value, size_t size);
  std::string* mutable_headpic();
  std::string* release_headpic();
  void set_allocated_headpic(std::string* headpic);
  private:
  const std::string& _internal_headpic() const;
  void _internal_set_headpic(const std::string& value);
  std::string* _internal_mutable_headpic();
  public:

  // string houseName = 6;
  void clear_housename();
  const std::string& housename() const;
  void set_housename(const std::string& value);
  void set_housename(std::string&& value);
  void set_housename(const char* value);
  void set_housename(const char* value, size_t size);
  std::string* mutable_housename();
  std::string* release_housename();
  void set_allocated_housename(std::string* housename);
  private:
  const std::string& _internal_housename() const;
  void _internal_set_housename(const std::string& value);
  std::string* _internal_mutable_housename();
  public:

  // string houseCover = 7;
  void clear_housecover();
  const std::string& housecover() const;
  void set_housecover(const std::string& value);
  void set_housecover(std::string&& value);
  void set_housecover(const char* value);
  void set_housecover(const char* value, size_t size);
  std::string* mutable_housecover();
  std::string* release_housecover();
  void set_allocated_housecover(std::string* housecover);
  private:
  const std::string& _internal_housecover() const;
  void _internal_set_housecover(const std::string& value);
  std::string* _internal_mutable_housecover();
  public:

  // string housePwd = 8;
  void clear_housepwd();
  const std::string& housepwd() const;
  void set_housepwd(const std::string& value);
  void set_housepwd(std::string&& value);
  void set_housepwd(const char* value);
  void set_housepwd(const char* value, size_t size);
  std::string* mutable_housepwd();
  std::string* release_housepwd();
  void set_allocated_housepwd(std::string* housepwd);
  private:
  const std::string& _internal_housepwd() const;
  void _internal_set_housepwd(const std::string& value);
  std::string* _internal_mutable_housepwd();
  public:

  // string content = 9;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .vector.PVector3 housePosition = 10;
  bool has_houseposition() const;
  private:
  bool _internal_has_houseposition() const;
  public:
  void clear_houseposition();
  const ::vector::PVector3& houseposition() const;
  ::vector::PVector3* release_houseposition();
  ::vector::PVector3* mutable_houseposition();
  void set_allocated_houseposition(::vector::PVector3* houseposition);
  private:
  const ::vector::PVector3& _internal_houseposition() const;
  ::vector::PVector3* _internal_mutable_houseposition();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 4;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseId = 5;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shareSpace.SShareCodeParse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headpic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housecover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housepwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::vector::PVector3* houseposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shareSpace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CShareSpaceCreate

// int32 houseId = 1;
inline void CShareSpaceCreate::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CShareSpaceCreate::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CShareSpaceCreate::houseid() const {
  // @@protoc_insertion_point(field_get:shareSpace.CShareSpaceCreate.houseId)
  return _internal_houseid();
}
inline void CShareSpaceCreate::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CShareSpaceCreate::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:shareSpace.CShareSpaceCreate.houseId)
}

// int32 Type = 2;
inline void CShareSpaceCreate::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CShareSpaceCreate::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CShareSpaceCreate::type() const {
  // @@protoc_insertion_point(field_get:shareSpace.CShareSpaceCreate.Type)
  return _internal_type();
}
inline void CShareSpaceCreate::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CShareSpaceCreate::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:shareSpace.CShareSpaceCreate.Type)
}

// -------------------------------------------------------------------

// SShareSpaceCreate

// string title = 1;
inline void SShareSpaceCreate::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareSpaceCreate::title() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareSpaceCreate.title)
  return _internal_title();
}
inline void SShareSpaceCreate::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareSpaceCreate.title)
}
inline std::string* SShareSpaceCreate::mutable_title() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareSpaceCreate.title)
  return _internal_mutable_title();
}
inline const std::string& SShareSpaceCreate::_internal_title() const {
  return title_.GetNoArena();
}
inline void SShareSpaceCreate::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareSpaceCreate::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareSpaceCreate.title)
}
inline void SShareSpaceCreate::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareSpaceCreate.title)
}
inline void SShareSpaceCreate::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareSpaceCreate.title)
}
inline std::string* SShareSpaceCreate::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareSpaceCreate::release_title() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareSpaceCreate.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareSpaceCreate::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareSpaceCreate.title)
}

// string url = 2;
inline void SShareSpaceCreate::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareSpaceCreate::url() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareSpaceCreate.url)
  return _internal_url();
}
inline void SShareSpaceCreate::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareSpaceCreate.url)
}
inline std::string* SShareSpaceCreate::mutable_url() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareSpaceCreate.url)
  return _internal_mutable_url();
}
inline const std::string& SShareSpaceCreate::_internal_url() const {
  return url_.GetNoArena();
}
inline void SShareSpaceCreate::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareSpaceCreate::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareSpaceCreate.url)
}
inline void SShareSpaceCreate::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareSpaceCreate.url)
}
inline void SShareSpaceCreate::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareSpaceCreate.url)
}
inline std::string* SShareSpaceCreate::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareSpaceCreate::release_url() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareSpaceCreate.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareSpaceCreate::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareSpaceCreate.url)
}

// string content = 3;
inline void SShareSpaceCreate::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareSpaceCreate::content() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareSpaceCreate.content)
  return _internal_content();
}
inline void SShareSpaceCreate::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareSpaceCreate.content)
}
inline std::string* SShareSpaceCreate::mutable_content() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareSpaceCreate.content)
  return _internal_mutable_content();
}
inline const std::string& SShareSpaceCreate::_internal_content() const {
  return content_.GetNoArena();
}
inline void SShareSpaceCreate::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareSpaceCreate::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareSpaceCreate.content)
}
inline void SShareSpaceCreate::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareSpaceCreate.content)
}
inline void SShareSpaceCreate::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareSpaceCreate.content)
}
inline std::string* SShareSpaceCreate::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareSpaceCreate::release_content() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareSpaceCreate.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareSpaceCreate::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareSpaceCreate.content)
}

// string cover = 4;
inline void SShareSpaceCreate::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareSpaceCreate::cover() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareSpaceCreate.cover)
  return _internal_cover();
}
inline void SShareSpaceCreate::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareSpaceCreate.cover)
}
inline std::string* SShareSpaceCreate::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareSpaceCreate.cover)
  return _internal_mutable_cover();
}
inline const std::string& SShareSpaceCreate::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void SShareSpaceCreate::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareSpaceCreate::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareSpaceCreate.cover)
}
inline void SShareSpaceCreate::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareSpaceCreate.cover)
}
inline void SShareSpaceCreate::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareSpaceCreate.cover)
}
inline std::string* SShareSpaceCreate::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareSpaceCreate::release_cover() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareSpaceCreate.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareSpaceCreate::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareSpaceCreate.cover)
}

// string wechatContent = 5;
inline void SShareSpaceCreate::clear_wechatcontent() {
  wechatcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareSpaceCreate::wechatcontent() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareSpaceCreate.wechatContent)
  return _internal_wechatcontent();
}
inline void SShareSpaceCreate::set_wechatcontent(const std::string& value) {
  _internal_set_wechatcontent(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareSpaceCreate.wechatContent)
}
inline std::string* SShareSpaceCreate::mutable_wechatcontent() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareSpaceCreate.wechatContent)
  return _internal_mutable_wechatcontent();
}
inline const std::string& SShareSpaceCreate::_internal_wechatcontent() const {
  return wechatcontent_.GetNoArena();
}
inline void SShareSpaceCreate::_internal_set_wechatcontent(const std::string& value) {
  
  wechatcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareSpaceCreate::set_wechatcontent(std::string&& value) {
  
  wechatcontent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareSpaceCreate.wechatContent)
}
inline void SShareSpaceCreate::set_wechatcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wechatcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareSpaceCreate.wechatContent)
}
inline void SShareSpaceCreate::set_wechatcontent(const char* value, size_t size) {
  
  wechatcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareSpaceCreate.wechatContent)
}
inline std::string* SShareSpaceCreate::_internal_mutable_wechatcontent() {
  
  return wechatcontent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareSpaceCreate::release_wechatcontent() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareSpaceCreate.wechatContent)
  
  return wechatcontent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareSpaceCreate::set_allocated_wechatcontent(std::string* wechatcontent) {
  if (wechatcontent != nullptr) {
    
  } else {
    
  }
  wechatcontent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wechatcontent);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareSpaceCreate.wechatContent)
}

// string shareTime = 6;
inline void SShareSpaceCreate::clear_sharetime() {
  sharetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareSpaceCreate::sharetime() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareSpaceCreate.shareTime)
  return _internal_sharetime();
}
inline void SShareSpaceCreate::set_sharetime(const std::string& value) {
  _internal_set_sharetime(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareSpaceCreate.shareTime)
}
inline std::string* SShareSpaceCreate::mutable_sharetime() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareSpaceCreate.shareTime)
  return _internal_mutable_sharetime();
}
inline const std::string& SShareSpaceCreate::_internal_sharetime() const {
  return sharetime_.GetNoArena();
}
inline void SShareSpaceCreate::_internal_set_sharetime(const std::string& value) {
  
  sharetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareSpaceCreate::set_sharetime(std::string&& value) {
  
  sharetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareSpaceCreate.shareTime)
}
inline void SShareSpaceCreate::set_sharetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sharetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareSpaceCreate.shareTime)
}
inline void SShareSpaceCreate::set_sharetime(const char* value, size_t size) {
  
  sharetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareSpaceCreate.shareTime)
}
inline std::string* SShareSpaceCreate::_internal_mutable_sharetime() {
  
  return sharetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareSpaceCreate::release_sharetime() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareSpaceCreate.shareTime)
  
  return sharetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareSpaceCreate::set_allocated_sharetime(std::string* sharetime) {
  if (sharetime != nullptr) {
    
  } else {
    
  }
  sharetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sharetime);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareSpaceCreate.shareTime)
}

// int32 visitCount = 7;
inline void SShareSpaceCreate::clear_visitcount() {
  visitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SShareSpaceCreate::_internal_visitcount() const {
  return visitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SShareSpaceCreate::visitcount() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareSpaceCreate.visitCount)
  return _internal_visitcount();
}
inline void SShareSpaceCreate::_internal_set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  visitcount_ = value;
}
inline void SShareSpaceCreate::set_visitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_visitcount(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareSpaceCreate.visitCount)
}

// -------------------------------------------------------------------

// CShareCodeParse

// string code = 1;
inline void CShareCodeParse::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CShareCodeParse::code() const {
  // @@protoc_insertion_point(field_get:shareSpace.CShareCodeParse.code)
  return _internal_code();
}
inline void CShareCodeParse::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:shareSpace.CShareCodeParse.code)
}
inline std::string* CShareCodeParse::mutable_code() {
  // @@protoc_insertion_point(field_mutable:shareSpace.CShareCodeParse.code)
  return _internal_mutable_code();
}
inline const std::string& CShareCodeParse::_internal_code() const {
  return code_.GetNoArena();
}
inline void CShareCodeParse::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CShareCodeParse::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.CShareCodeParse.code)
}
inline void CShareCodeParse::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.CShareCodeParse.code)
}
inline void CShareCodeParse::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.CShareCodeParse.code)
}
inline std::string* CShareCodeParse::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CShareCodeParse::release_code() {
  // @@protoc_insertion_point(field_release:shareSpace.CShareCodeParse.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CShareCodeParse::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.CShareCodeParse.code)
}

// -------------------------------------------------------------------

// SShareCodeParse

// int32 uid = 1;
inline void SShareCodeParse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SShareCodeParse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SShareCodeParse::uid() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.uid)
  return _internal_uid();
}
inline void SShareCodeParse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SShareCodeParse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareCodeParse.uid)
}

// string nick = 2;
inline void SShareCodeParse::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareCodeParse::nick() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.nick)
  return _internal_nick();
}
inline void SShareCodeParse::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareCodeParse.nick)
}
inline std::string* SShareCodeParse::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareCodeParse.nick)
  return _internal_mutable_nick();
}
inline const std::string& SShareCodeParse::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void SShareCodeParse::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareCodeParse::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareCodeParse.nick)
}
inline void SShareCodeParse::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareCodeParse.nick)
}
inline void SShareCodeParse::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareCodeParse.nick)
}
inline std::string* SShareCodeParse::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareCodeParse::release_nick() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareCodeParse.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareCodeParse::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareCodeParse.nick)
}

// string headPic = 3;
inline void SShareCodeParse::clear_headpic() {
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareCodeParse::headpic() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.headPic)
  return _internal_headpic();
}
inline void SShareCodeParse::set_headpic(const std::string& value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareCodeParse.headPic)
}
inline std::string* SShareCodeParse::mutable_headpic() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareCodeParse.headPic)
  return _internal_mutable_headpic();
}
inline const std::string& SShareCodeParse::_internal_headpic() const {
  return headpic_.GetNoArena();
}
inline void SShareCodeParse::_internal_set_headpic(const std::string& value) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareCodeParse::set_headpic(std::string&& value) {
  
  headpic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareCodeParse.headPic)
}
inline void SShareCodeParse::set_headpic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareCodeParse.headPic)
}
inline void SShareCodeParse::set_headpic(const char* value, size_t size) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareCodeParse.headPic)
}
inline std::string* SShareCodeParse::_internal_mutable_headpic() {
  
  return headpic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareCodeParse::release_headpic() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareCodeParse.headPic)
  
  return headpic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareCodeParse::set_allocated_headpic(std::string* headpic) {
  if (headpic != nullptr) {
    
  } else {
    
  }
  headpic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headpic);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareCodeParse.headPic)
}

// int32 houseType = 4;
inline void SShareCodeParse::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SShareCodeParse::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SShareCodeParse::housetype() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.houseType)
  return _internal_housetype();
}
inline void SShareCodeParse::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void SShareCodeParse::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareCodeParse.houseType)
}

// int32 houseId = 5;
inline void SShareCodeParse::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SShareCodeParse::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SShareCodeParse::houseid() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.houseId)
  return _internal_houseid();
}
inline void SShareCodeParse::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SShareCodeParse::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareCodeParse.houseId)
}

// string houseName = 6;
inline void SShareCodeParse::clear_housename() {
  housename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareCodeParse::housename() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.houseName)
  return _internal_housename();
}
inline void SShareCodeParse::set_housename(const std::string& value) {
  _internal_set_housename(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareCodeParse.houseName)
}
inline std::string* SShareCodeParse::mutable_housename() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareCodeParse.houseName)
  return _internal_mutable_housename();
}
inline const std::string& SShareCodeParse::_internal_housename() const {
  return housename_.GetNoArena();
}
inline void SShareCodeParse::_internal_set_housename(const std::string& value) {
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareCodeParse::set_housename(std::string&& value) {
  
  housename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareCodeParse.houseName)
}
inline void SShareCodeParse::set_housename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareCodeParse.houseName)
}
inline void SShareCodeParse::set_housename(const char* value, size_t size) {
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareCodeParse.houseName)
}
inline std::string* SShareCodeParse::_internal_mutable_housename() {
  
  return housename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareCodeParse::release_housename() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareCodeParse.houseName)
  
  return housename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareCodeParse::set_allocated_housename(std::string* housename) {
  if (housename != nullptr) {
    
  } else {
    
  }
  housename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housename);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareCodeParse.houseName)
}

// string houseCover = 7;
inline void SShareCodeParse::clear_housecover() {
  housecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareCodeParse::housecover() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.houseCover)
  return _internal_housecover();
}
inline void SShareCodeParse::set_housecover(const std::string& value) {
  _internal_set_housecover(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareCodeParse.houseCover)
}
inline std::string* SShareCodeParse::mutable_housecover() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareCodeParse.houseCover)
  return _internal_mutable_housecover();
}
inline const std::string& SShareCodeParse::_internal_housecover() const {
  return housecover_.GetNoArena();
}
inline void SShareCodeParse::_internal_set_housecover(const std::string& value) {
  
  housecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareCodeParse::set_housecover(std::string&& value) {
  
  housecover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareCodeParse.houseCover)
}
inline void SShareCodeParse::set_housecover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareCodeParse.houseCover)
}
inline void SShareCodeParse::set_housecover(const char* value, size_t size) {
  
  housecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareCodeParse.houseCover)
}
inline std::string* SShareCodeParse::_internal_mutable_housecover() {
  
  return housecover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareCodeParse::release_housecover() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareCodeParse.houseCover)
  
  return housecover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareCodeParse::set_allocated_housecover(std::string* housecover) {
  if (housecover != nullptr) {
    
  } else {
    
  }
  housecover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housecover);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareCodeParse.houseCover)
}

// string housePwd = 8;
inline void SShareCodeParse::clear_housepwd() {
  housepwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareCodeParse::housepwd() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.housePwd)
  return _internal_housepwd();
}
inline void SShareCodeParse::set_housepwd(const std::string& value) {
  _internal_set_housepwd(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareCodeParse.housePwd)
}
inline std::string* SShareCodeParse::mutable_housepwd() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareCodeParse.housePwd)
  return _internal_mutable_housepwd();
}
inline const std::string& SShareCodeParse::_internal_housepwd() const {
  return housepwd_.GetNoArena();
}
inline void SShareCodeParse::_internal_set_housepwd(const std::string& value) {
  
  housepwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareCodeParse::set_housepwd(std::string&& value) {
  
  housepwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareCodeParse.housePwd)
}
inline void SShareCodeParse::set_housepwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housepwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareCodeParse.housePwd)
}
inline void SShareCodeParse::set_housepwd(const char* value, size_t size) {
  
  housepwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareCodeParse.housePwd)
}
inline std::string* SShareCodeParse::_internal_mutable_housepwd() {
  
  return housepwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareCodeParse::release_housepwd() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareCodeParse.housePwd)
  
  return housepwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareCodeParse::set_allocated_housepwd(std::string* housepwd) {
  if (housepwd != nullptr) {
    
  } else {
    
  }
  housepwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housepwd);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareCodeParse.housePwd)
}

// string content = 9;
inline void SShareCodeParse::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SShareCodeParse::content() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.content)
  return _internal_content();
}
inline void SShareCodeParse::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:shareSpace.SShareCodeParse.content)
}
inline std::string* SShareCodeParse::mutable_content() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareCodeParse.content)
  return _internal_mutable_content();
}
inline const std::string& SShareCodeParse::_internal_content() const {
  return content_.GetNoArena();
}
inline void SShareCodeParse::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SShareCodeParse::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shareSpace.SShareCodeParse.content)
}
inline void SShareCodeParse::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareSpace.SShareCodeParse.content)
}
inline void SShareCodeParse::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareSpace.SShareCodeParse.content)
}
inline std::string* SShareCodeParse::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SShareCodeParse::release_content() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareCodeParse.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SShareCodeParse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareCodeParse.content)
}

// .vector.PVector3 housePosition = 10;
inline bool SShareCodeParse::_internal_has_houseposition() const {
  return this != internal_default_instance() && houseposition_ != nullptr;
}
inline bool SShareCodeParse::has_houseposition() const {
  return _internal_has_houseposition();
}
inline const ::vector::PVector3& SShareCodeParse::_internal_houseposition() const {
  const ::vector::PVector3* p = houseposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& SShareCodeParse::houseposition() const {
  // @@protoc_insertion_point(field_get:shareSpace.SShareCodeParse.housePosition)
  return _internal_houseposition();
}
inline ::vector::PVector3* SShareCodeParse::release_houseposition() {
  // @@protoc_insertion_point(field_release:shareSpace.SShareCodeParse.housePosition)
  
  ::vector::PVector3* temp = houseposition_;
  houseposition_ = nullptr;
  return temp;
}
inline ::vector::PVector3* SShareCodeParse::_internal_mutable_houseposition() {
  
  if (houseposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    houseposition_ = p;
  }
  return houseposition_;
}
inline ::vector::PVector3* SShareCodeParse::mutable_houseposition() {
  // @@protoc_insertion_point(field_mutable:shareSpace.SShareCodeParse.housePosition)
  return _internal_mutable_houseposition();
}
inline void SShareCodeParse::set_allocated_houseposition(::vector::PVector3* houseposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(houseposition_);
  }
  if (houseposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      houseposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, houseposition, submessage_arena);
    }
    
  } else {
    
  }
  houseposition_ = houseposition;
  // @@protoc_insertion_point(field_set_allocated:shareSpace.SShareCodeParse.housePosition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace shareSpace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shareSpace_2eproto
