// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: switchRoom.proto

#include "switchRoom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_switchRoom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonResp_switchRoom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUserInfo_userInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userPosition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UPosition_userPosition_2eproto;
namespace switchRoom {
class CSwitchRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSwitchRoom> _instance;
} _CSwitchRoom_default_instance_;
class SSwitchRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSwitchRoom> _instance;
} _SSwitchRoom_default_instance_;
class CExitRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CExitRoom> _instance;
} _CExitRoom_default_instance_;
class CommonRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonResp> _instance;
} _CommonResp_default_instance_;
class EnterRoomReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterRoomReq> _instance;
} _EnterRoomReq_default_instance_;
class EnterRoomRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterRoomResp> _instance;
} _EnterRoomResp_default_instance_;
}  // namespace switchRoom
static void InitDefaultsscc_info_CExitRoom_switchRoom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchRoom::_CExitRoom_default_instance_;
    new (ptr) ::switchRoom::CExitRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchRoom::CExitRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CExitRoom_switchRoom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CExitRoom_switchRoom_2eproto}, {
      &scc_info_UPosition_userPosition_2eproto.base,}};

static void InitDefaultsscc_info_CSwitchRoom_switchRoom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchRoom::_CSwitchRoom_default_instance_;
    new (ptr) ::switchRoom::CSwitchRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchRoom::CSwitchRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSwitchRoom_switchRoom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSwitchRoom_switchRoom_2eproto}, {}};

static void InitDefaultsscc_info_CommonResp_switchRoom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchRoom::_CommonResp_default_instance_;
    new (ptr) ::switchRoom::CommonResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchRoom::CommonResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonResp_switchRoom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonResp_switchRoom_2eproto}, {}};

static void InitDefaultsscc_info_EnterRoomReq_switchRoom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchRoom::_EnterRoomReq_default_instance_;
    new (ptr) ::switchRoom::EnterRoomReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchRoom::EnterRoomReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterRoomReq_switchRoom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterRoomReq_switchRoom_2eproto}, {}};

static void InitDefaultsscc_info_EnterRoomResp_switchRoom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchRoom::_EnterRoomResp_default_instance_;
    new (ptr) ::switchRoom::EnterRoomResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchRoom::EnterRoomResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnterRoomResp_switchRoom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnterRoomResp_switchRoom_2eproto}, {
      &scc_info_CommonResp_switchRoom_2eproto.base,}};

static void InitDefaultsscc_info_SSwitchRoom_switchRoom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchRoom::_SSwitchRoom_default_instance_;
    new (ptr) ::switchRoom::SSwitchRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchRoom::SSwitchRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSwitchRoom_switchRoom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSwitchRoom_switchRoom_2eproto}, {
      &scc_info_SUserInfo_userInfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_switchRoom_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_switchRoom_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_switchRoom_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_switchRoom_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchRoom::CSwitchRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchRoom::CSwitchRoom, prehouseid_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::CSwitchRoom, houseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchRoom::SSwitchRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchRoom::SSwitchRoom, infolist_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::SSwitchRoom, vipflag_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::SSwitchRoom, imgroupid_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::SSwitchRoom, enterflag_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::SSwitchRoom, roomid_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::SSwitchRoom, exitroomtext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchRoom::CExitRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchRoom::CExitRoom, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchRoom::CommonResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchRoom::CommonResp, code_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::CommonResp, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomReq, uid_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomReq, house_type_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomReq, house_id_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomReq, seq_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomReq, version_id_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomReq, is_special_user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomResp, common_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomResp, creator_server_ip_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::EnterRoomResp, creator_server_port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::switchRoom::CSwitchRoom)},
  { 7, -1, sizeof(::switchRoom::SSwitchRoom)},
  { 18, -1, sizeof(::switchRoom::CExitRoom)},
  { 24, -1, sizeof(::switchRoom::CommonResp)},
  { 31, -1, sizeof(::switchRoom::EnterRoomReq)},
  { 42, -1, sizeof(::switchRoom::EnterRoomResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchRoom::_CSwitchRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchRoom::_SSwitchRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchRoom::_CExitRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchRoom::_CommonResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchRoom::_EnterRoomReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchRoom::_EnterRoomResp_default_instance_),
};

const char descriptor_table_protodef_switchRoom_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020switchRoom.proto\022\nswitchRoom\032\022userPosi"
  "tion.proto\032\016userInfo.proto\"2\n\013CSwitchRoo"
  "m\022\022\n\npreHouseID\030\001 \001(\005\022\017\n\007houseID\030\002 \001(\005\"\221"
  "\001\n\013SSwitchRoom\022%\n\010infoList\030\001 \003(\0132\023.userI"
  "nfo.SUserInfo\022\017\n\007vipFlag\030\002 \001(\005\022\021\n\timGrou"
  "pId\030\003 \001(\t\022\021\n\tenterFlag\030\004 \001(\005\022\016\n\006roomId\030\005"
  " \001(\t\022\024\n\014exitRoomText\030\006 \001(\t\"6\n\tCExitRoom\022"
  ")\n\010position\030\001 \001(\0132\027.userPosition.UPositi"
  "on\"+\n\nCommonResp\022\014\n\004code\030\001 \001(\005\022\017\n\007messag"
  "e\030\002 \001(\t\"{\n\014EnterRoomReq\022\013\n\003uid\030\001 \001(\005\022\022\n\n"
  "house_type\030\002 \001(\005\022\020\n\010house_id\030\003 \001(\005\022\013\n\003se"
  "q\030\004 \001(\005\022\022\n\nversion_id\030\005 \001(\005\022\027\n\017is_specia"
  "l_user\030\006 \001(\010\"o\n\rEnterRoomResp\022&\n\006common\030"
  "\001 \001(\0132\026.switchRoom.CommonResp\022\031\n\021creator"
  "_server_ip\030\002 \001(\t\022\033\n\023creator_server_port\030"
  "\003 \001(\005B&\n\030com.dayou.space.protobufB\nSwitc"
  "hRoomb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_switchRoom_2eproto_deps[2] = {
  &::descriptor_table_userInfo_2eproto,
  &::descriptor_table_userPosition_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_switchRoom_2eproto_sccs[6] = {
  &scc_info_CExitRoom_switchRoom_2eproto.base,
  &scc_info_CSwitchRoom_switchRoom_2eproto.base,
  &scc_info_CommonResp_switchRoom_2eproto.base,
  &scc_info_EnterRoomReq_switchRoom_2eproto.base,
  &scc_info_EnterRoomResp_switchRoom_2eproto.base,
  &scc_info_SSwitchRoom_switchRoom_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_switchRoom_2eproto_once;
static bool descriptor_table_switchRoom_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_switchRoom_2eproto = {
  &descriptor_table_switchRoom_2eproto_initialized, descriptor_table_protodef_switchRoom_2eproto, "switchRoom.proto", 653,
  &descriptor_table_switchRoom_2eproto_once, descriptor_table_switchRoom_2eproto_sccs, descriptor_table_switchRoom_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_switchRoom_2eproto::offsets,
  file_level_metadata_switchRoom_2eproto, 6, file_level_enum_descriptors_switchRoom_2eproto, file_level_service_descriptors_switchRoom_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_switchRoom_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_switchRoom_2eproto), true);
namespace switchRoom {

// ===================================================================

void CSwitchRoom::InitAsDefaultInstance() {
}
class CSwitchRoom::_Internal {
 public:
};

CSwitchRoom::CSwitchRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchRoom.CSwitchRoom)
}
CSwitchRoom::CSwitchRoom(const CSwitchRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prehouseid_, &from.prehouseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&houseid_) -
    reinterpret_cast<char*>(&prehouseid_)) + sizeof(houseid_));
  // @@protoc_insertion_point(copy_constructor:switchRoom.CSwitchRoom)
}

void CSwitchRoom::SharedCtor() {
  ::memset(&prehouseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&houseid_) -
      reinterpret_cast<char*>(&prehouseid_)) + sizeof(houseid_));
}

CSwitchRoom::~CSwitchRoom() {
  // @@protoc_insertion_point(destructor:switchRoom.CSwitchRoom)
  SharedDtor();
}

void CSwitchRoom::SharedDtor() {
}

void CSwitchRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSwitchRoom& CSwitchRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSwitchRoom_switchRoom_2eproto.base);
  return *internal_default_instance();
}


void CSwitchRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:switchRoom.CSwitchRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prehouseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&houseid_) -
      reinterpret_cast<char*>(&prehouseid_)) + sizeof(houseid_));
  _internal_metadata_.Clear();
}

const char* CSwitchRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 preHouseID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prehouseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSwitchRoom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchRoom.CSwitchRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 preHouseID = 1;
  if (this->prehouseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prehouseid(), target);
  }

  // int32 houseID = 2;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_houseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchRoom.CSwitchRoom)
  return target;
}

size_t CSwitchRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchRoom.CSwitchRoom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 preHouseID = 1;
  if (this->prehouseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prehouseid());
  }

  // int32 houseID = 2;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSwitchRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchRoom.CSwitchRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const CSwitchRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSwitchRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchRoom.CSwitchRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchRoom.CSwitchRoom)
    MergeFrom(*source);
  }
}

void CSwitchRoom::MergeFrom(const CSwitchRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchRoom.CSwitchRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prehouseid() != 0) {
    _internal_set_prehouseid(from._internal_prehouseid());
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void CSwitchRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchRoom.CSwitchRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSwitchRoom::CopyFrom(const CSwitchRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchRoom.CSwitchRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSwitchRoom::IsInitialized() const {
  return true;
}

void CSwitchRoom::InternalSwap(CSwitchRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(prehouseid_, other->prehouseid_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSwitchRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSwitchRoom::InitAsDefaultInstance() {
}
class SSwitchRoom::_Internal {
 public:
};

void SSwitchRoom::clear_infolist() {
  infolist_.Clear();
}
SSwitchRoom::SSwitchRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchRoom.SSwitchRoom)
}
SSwitchRoom::SSwitchRoom(const SSwitchRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infolist_(from.infolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imgroupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imgroupid().empty()) {
    imgroupid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imgroupid_);
  }
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomid().empty()) {
    roomid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  exitroomtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exitroomtext().empty()) {
    exitroomtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exitroomtext_);
  }
  ::memcpy(&vipflag_, &from.vipflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&enterflag_) -
    reinterpret_cast<char*>(&vipflag_)) + sizeof(enterflag_));
  // @@protoc_insertion_point(copy_constructor:switchRoom.SSwitchRoom)
}

void SSwitchRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSwitchRoom_switchRoom_2eproto.base);
  imgroupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exitroomtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&vipflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enterflag_) -
      reinterpret_cast<char*>(&vipflag_)) + sizeof(enterflag_));
}

SSwitchRoom::~SSwitchRoom() {
  // @@protoc_insertion_point(destructor:switchRoom.SSwitchRoom)
  SharedDtor();
}

void SSwitchRoom::SharedDtor() {
  imgroupid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exitroomtext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSwitchRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSwitchRoom& SSwitchRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSwitchRoom_switchRoom_2eproto.base);
  return *internal_default_instance();
}


void SSwitchRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:switchRoom.SSwitchRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infolist_.Clear();
  imgroupid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exitroomtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&vipflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enterflag_) -
      reinterpret_cast<char*>(&vipflag_)) + sizeof(enterflag_));
  _internal_metadata_.Clear();
}

const char* SSwitchRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .userInfo.SUserInfo infoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 vipFlag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vipflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imGroupId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_imgroupid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "switchRoom.SSwitchRoom.imGroupId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enterFlag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enterflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_roomid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "switchRoom.SSwitchRoom.roomId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exitRoomText = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_exitroomtext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "switchRoom.SSwitchRoom.exitRoomText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSwitchRoom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchRoom.SSwitchRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .userInfo.SUserInfo infoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infolist(i), target, stream);
  }

  // int32 vipFlag = 2;
  if (this->vipflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vipflag(), target);
  }

  // string imGroupId = 3;
  if (this->imgroupid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imgroupid().data(), static_cast<int>(this->_internal_imgroupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "switchRoom.SSwitchRoom.imGroupId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_imgroupid(), target);
  }

  // int32 enterFlag = 4;
  if (this->enterflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_enterflag(), target);
  }

  // string roomId = 5;
  if (this->roomid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "switchRoom.SSwitchRoom.roomId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_roomid(), target);
  }

  // string exitRoomText = 6;
  if (this->exitroomtext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exitroomtext().data(), static_cast<int>(this->_internal_exitroomtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "switchRoom.SSwitchRoom.exitRoomText");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_exitroomtext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchRoom.SSwitchRoom)
  return target;
}

size_t SSwitchRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchRoom.SSwitchRoom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userInfo.SUserInfo infoList = 1;
  total_size += 1UL * this->_internal_infolist_size();
  for (const auto& msg : this->infolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string imGroupId = 3;
  if (this->imgroupid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imgroupid());
  }

  // string roomId = 5;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // string exitRoomText = 6;
  if (this->exitroomtext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exitroomtext());
  }

  // int32 vipFlag = 2;
  if (this->vipflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vipflag());
  }

  // int32 enterFlag = 4;
  if (this->enterflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enterflag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSwitchRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchRoom.SSwitchRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const SSwitchRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSwitchRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchRoom.SSwitchRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchRoom.SSwitchRoom)
    MergeFrom(*source);
  }
}

void SSwitchRoom::MergeFrom(const SSwitchRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchRoom.SSwitchRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infolist_.MergeFrom(from.infolist_);
  if (from.imgroupid().size() > 0) {

    imgroupid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imgroupid_);
  }
  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.exitroomtext().size() > 0) {

    exitroomtext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exitroomtext_);
  }
  if (from.vipflag() != 0) {
    _internal_set_vipflag(from._internal_vipflag());
  }
  if (from.enterflag() != 0) {
    _internal_set_enterflag(from._internal_enterflag());
  }
}

void SSwitchRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchRoom.SSwitchRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSwitchRoom::CopyFrom(const SSwitchRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchRoom.SSwitchRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSwitchRoom::IsInitialized() const {
  return true;
}

void SSwitchRoom::InternalSwap(SSwitchRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infolist_.InternalSwap(&other->infolist_);
  imgroupid_.Swap(&other->imgroupid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  roomid_.Swap(&other->roomid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exitroomtext_.Swap(&other->exitroomtext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vipflag_, other->vipflag_);
  swap(enterflag_, other->enterflag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSwitchRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CExitRoom::InitAsDefaultInstance() {
  ::switchRoom::_CExitRoom_default_instance_._instance.get_mutable()->position_ = const_cast< ::userPosition::UPosition*>(
      ::userPosition::UPosition::internal_default_instance());
}
class CExitRoom::_Internal {
 public:
  static const ::userPosition::UPosition& position(const CExitRoom* msg);
};

const ::userPosition::UPosition&
CExitRoom::_Internal::position(const CExitRoom* msg) {
  return *msg->position_;
}
void CExitRoom::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
CExitRoom::CExitRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchRoom.CExitRoom)
}
CExitRoom::CExitRoom(const CExitRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::userPosition::UPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:switchRoom.CExitRoom)
}

void CExitRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CExitRoom_switchRoom_2eproto.base);
  position_ = nullptr;
}

CExitRoom::~CExitRoom() {
  // @@protoc_insertion_point(destructor:switchRoom.CExitRoom)
  SharedDtor();
}

void CExitRoom::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CExitRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CExitRoom& CExitRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CExitRoom_switchRoom_2eproto.base);
  return *internal_default_instance();
}


void CExitRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:switchRoom.CExitRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CExitRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .userPosition.UPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CExitRoom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchRoom.CExitRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .userPosition.UPosition position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchRoom.CExitRoom)
  return target;
}

size_t CExitRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchRoom.CExitRoom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .userPosition.UPosition position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CExitRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchRoom.CExitRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const CExitRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CExitRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchRoom.CExitRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchRoom.CExitRoom)
    MergeFrom(*source);
  }
}

void CExitRoom::MergeFrom(const CExitRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchRoom.CExitRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::userPosition::UPosition::MergeFrom(from._internal_position());
  }
}

void CExitRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchRoom.CExitRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CExitRoom::CopyFrom(const CExitRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchRoom.CExitRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CExitRoom::IsInitialized() const {
  return true;
}

void CExitRoom::InternalSwap(CExitRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CExitRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommonResp::InitAsDefaultInstance() {
}
class CommonResp::_Internal {
 public:
};

CommonResp::CommonResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchRoom.CommonResp)
}
CommonResp::CommonResp(const CommonResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:switchRoom.CommonResp)
}

void CommonResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommonResp_switchRoom_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

CommonResp::~CommonResp() {
  // @@protoc_insertion_point(destructor:switchRoom.CommonResp)
  SharedDtor();
}

void CommonResp::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonResp& CommonResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonResp_switchRoom_2eproto.base);
  return *internal_default_instance();
}


void CommonResp::Clear() {
// @@protoc_insertion_point(message_clear_start:switchRoom.CommonResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* CommonResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "switchRoom.CommonResp.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchRoom.CommonResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "switchRoom.CommonResp.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchRoom.CommonResp)
  return target;
}

size_t CommonResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchRoom.CommonResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchRoom.CommonResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchRoom.CommonResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchRoom.CommonResp)
    MergeFrom(*source);
  }
}

void CommonResp::MergeFrom(const CommonResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchRoom.CommonResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void CommonResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchRoom.CommonResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResp::CopyFrom(const CommonResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchRoom.CommonResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResp::IsInitialized() const {
  return true;
}

void CommonResp::InternalSwap(CommonResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterRoomReq::InitAsDefaultInstance() {
}
class EnterRoomReq::_Internal {
 public:
};

EnterRoomReq::EnterRoomReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchRoom.EnterRoomReq)
}
EnterRoomReq::EnterRoomReq(const EnterRoomReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_special_user_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(is_special_user_));
  // @@protoc_insertion_point(copy_constructor:switchRoom.EnterRoomReq)
}

void EnterRoomReq::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_special_user_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(is_special_user_));
}

EnterRoomReq::~EnterRoomReq() {
  // @@protoc_insertion_point(destructor:switchRoom.EnterRoomReq)
  SharedDtor();
}

void EnterRoomReq::SharedDtor() {
}

void EnterRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterRoomReq& EnterRoomReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterRoomReq_switchRoom_2eproto.base);
  return *internal_default_instance();
}


void EnterRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:switchRoom.EnterRoomReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_special_user_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(is_special_user_));
  _internal_metadata_.Clear();
}

const char* EnterRoomReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 house_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          house_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 house_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          house_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_special_user = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_special_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterRoomReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchRoom.EnterRoomReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 house_type = 2;
  if (this->house_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_house_type(), target);
  }

  // int32 house_id = 3;
  if (this->house_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_house_id(), target);
  }

  // int32 seq = 4;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_seq(), target);
  }

  // int32 version_id = 5;
  if (this->version_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_version_id(), target);
  }

  // bool is_special_user = 6;
  if (this->is_special_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_special_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchRoom.EnterRoomReq)
  return target;
}

size_t EnterRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchRoom.EnterRoomReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 house_type = 2;
  if (this->house_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_house_type());
  }

  // int32 house_id = 3;
  if (this->house_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_house_id());
  }

  // int32 seq = 4;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seq());
  }

  // int32 version_id = 5;
  if (this->version_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version_id());
  }

  // bool is_special_user = 6;
  if (this->is_special_user() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterRoomReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchRoom.EnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterRoomReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchRoom.EnterRoomReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchRoom.EnterRoomReq)
    MergeFrom(*source);
  }
}

void EnterRoomReq::MergeFrom(const EnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchRoom.EnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.house_type() != 0) {
    _internal_set_house_type(from._internal_house_type());
  }
  if (from.house_id() != 0) {
    _internal_set_house_id(from._internal_house_id());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.version_id() != 0) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (from.is_special_user() != 0) {
    _internal_set_is_special_user(from._internal_is_special_user());
  }
}

void EnterRoomReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchRoom.EnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomReq::CopyFrom(const EnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchRoom.EnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomReq::IsInitialized() const {
  return true;
}

void EnterRoomReq::InternalSwap(EnterRoomReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(house_type_, other->house_type_);
  swap(house_id_, other->house_id_);
  swap(seq_, other->seq_);
  swap(version_id_, other->version_id_);
  swap(is_special_user_, other->is_special_user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoomReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterRoomResp::InitAsDefaultInstance() {
  ::switchRoom::_EnterRoomResp_default_instance_._instance.get_mutable()->common_ = const_cast< ::switchRoom::CommonResp*>(
      ::switchRoom::CommonResp::internal_default_instance());
}
class EnterRoomResp::_Internal {
 public:
  static const ::switchRoom::CommonResp& common(const EnterRoomResp* msg);
};

const ::switchRoom::CommonResp&
EnterRoomResp::_Internal::common(const EnterRoomResp* msg) {
  return *msg->common_;
}
EnterRoomResp::EnterRoomResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchRoom.EnterRoomResp)
}
EnterRoomResp::EnterRoomResp(const EnterRoomResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  creator_server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_server_ip().empty()) {
    creator_server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creator_server_ip_);
  }
  if (from._internal_has_common()) {
    common_ = new ::switchRoom::CommonResp(*from.common_);
  } else {
    common_ = nullptr;
  }
  creator_server_port_ = from.creator_server_port_;
  // @@protoc_insertion_point(copy_constructor:switchRoom.EnterRoomResp)
}

void EnterRoomResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterRoomResp_switchRoom_2eproto.base);
  creator_server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creator_server_port_) -
      reinterpret_cast<char*>(&common_)) + sizeof(creator_server_port_));
}

EnterRoomResp::~EnterRoomResp() {
  // @@protoc_insertion_point(destructor:switchRoom.EnterRoomResp)
  SharedDtor();
}

void EnterRoomResp::SharedDtor() {
  creator_server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete common_;
}

void EnterRoomResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterRoomResp& EnterRoomResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterRoomResp_switchRoom_2eproto.base);
  return *internal_default_instance();
}


void EnterRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:switchRoom.EnterRoomResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  creator_server_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  creator_server_port_ = 0;
  _internal_metadata_.Clear();
}

const char* EnterRoomResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .switchRoom.CommonResp common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string creator_server_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_creator_server_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "switchRoom.EnterRoomResp.creator_server_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 creator_server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          creator_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterRoomResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchRoom.EnterRoomResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .switchRoom.CommonResp common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // string creator_server_ip = 2;
  if (this->creator_server_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_server_ip().data(), static_cast<int>(this->_internal_creator_server_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "switchRoom.EnterRoomResp.creator_server_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_creator_server_ip(), target);
  }

  // int32 creator_server_port = 3;
  if (this->creator_server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_creator_server_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchRoom.EnterRoomResp)
  return target;
}

size_t EnterRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchRoom.EnterRoomResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string creator_server_ip = 2;
  if (this->creator_server_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_server_ip());
  }

  // .switchRoom.CommonResp common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // int32 creator_server_port = 3;
  if (this->creator_server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_creator_server_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterRoomResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchRoom.EnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterRoomResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchRoom.EnterRoomResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchRoom.EnterRoomResp)
    MergeFrom(*source);
  }
}

void EnterRoomResp::MergeFrom(const EnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchRoom.EnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.creator_server_ip().size() > 0) {

    creator_server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creator_server_ip_);
  }
  if (from.has_common()) {
    _internal_mutable_common()->::switchRoom::CommonResp::MergeFrom(from._internal_common());
  }
  if (from.creator_server_port() != 0) {
    _internal_set_creator_server_port(from._internal_creator_server_port());
  }
}

void EnterRoomResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchRoom.EnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomResp::CopyFrom(const EnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchRoom.EnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomResp::IsInitialized() const {
  return true;
}

void EnterRoomResp::InternalSwap(EnterRoomResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  creator_server_ip_.Swap(&other->creator_server_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(common_, other->common_);
  swap(creator_server_port_, other->creator_server_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoomResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace switchRoom
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::switchRoom::CSwitchRoom* Arena::CreateMaybeMessage< ::switchRoom::CSwitchRoom >(Arena* arena) {
  return Arena::CreateInternal< ::switchRoom::CSwitchRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::switchRoom::SSwitchRoom* Arena::CreateMaybeMessage< ::switchRoom::SSwitchRoom >(Arena* arena) {
  return Arena::CreateInternal< ::switchRoom::SSwitchRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::switchRoom::CExitRoom* Arena::CreateMaybeMessage< ::switchRoom::CExitRoom >(Arena* arena) {
  return Arena::CreateInternal< ::switchRoom::CExitRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::switchRoom::CommonResp* Arena::CreateMaybeMessage< ::switchRoom::CommonResp >(Arena* arena) {
  return Arena::CreateInternal< ::switchRoom::CommonResp >(arena);
}
template<> PROTOBUF_NOINLINE ::switchRoom::EnterRoomReq* Arena::CreateMaybeMessage< ::switchRoom::EnterRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::switchRoom::EnterRoomReq >(arena);
}
template<> PROTOBUF_NOINLINE ::switchRoom::EnterRoomResp* Arena::CreateMaybeMessage< ::switchRoom::EnterRoomResp >(Arena* arena) {
  return Arena::CreateInternal< ::switchRoom::EnterRoomResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
