// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: businessObject.proto

#include "businessObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_position_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPosition_position_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_businessObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BObject_businessObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_businessObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BSpaceAirVehicle_businessObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_businessObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BSpaceGoods_businessObject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_businessObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SPutGoods_businessObject_2eproto;
namespace space {
class CBusinessObjectListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CBusinessObjectList> _instance;
} _CBusinessObjectList_default_instance_;
class SBusinessObjectListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBusinessObjectList> _instance;
} _SBusinessObjectList_default_instance_;
class BObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BObject> _instance;
} _BObject_default_instance_;
class CTriggerBoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTriggerBo> _instance;
} _CTriggerBo_default_instance_;
class STriggerBoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STriggerBo> _instance;
} _STriggerBo_default_instance_;
class STriggerBoBroadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STriggerBoBroad> _instance;
} _STriggerBoBroad_default_instance_;
class CPutGoodsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPutGoods> _instance;
} _CPutGoods_default_instance_;
class SPutGoodsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPutGoods> _instance;
} _SPutGoods_default_instance_;
class SPutGoodsListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPutGoodsList> _instance;
} _SPutGoodsList_default_instance_;
class CPickGoodsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPickGoods> _instance;
} _CPickGoods_default_instance_;
class SPickGoodsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPickGoods> _instance;
} _SPickGoods_default_instance_;
class BSpaceGoodsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BSpaceGoods> _instance;
} _BSpaceGoods_default_instance_;
class SSpaceGoodsListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceGoodsList> _instance;
} _SSpaceGoodsList_default_instance_;
class CPickSpaceGoodsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPickSpaceGoods> _instance;
} _CPickSpaceGoods_default_instance_;
class SPickSpaceGoodsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPickSpaceGoods> _instance;
} _SPickSpaceGoods_default_instance_;
class BSpaceAirVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BSpaceAirVehicle> _instance;
} _BSpaceAirVehicle_default_instance_;
class SSpaceAirVehicleListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceAirVehicleList> _instance;
} _SSpaceAirVehicleList_default_instance_;
class CSpaceAirVehicleTakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSpaceAirVehicleTake> _instance;
} _CSpaceAirVehicleTake_default_instance_;
class SSpaceAirVehicleTakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceAirVehicleTake> _instance;
} _SSpaceAirVehicleTake_default_instance_;
class SSpaceAirVehicleDisappearDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceAirVehicleDisappear> _instance;
} _SSpaceAirVehicleDisappear_default_instance_;
class SSpaceAirVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceAirVehicle> _instance;
} _SSpaceAirVehicle_default_instance_;
}  // namespace space
static void InitDefaultsscc_info_BObject_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_BObject_default_instance_;
    new (ptr) ::space::BObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::BObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BObject_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BObject_businessObject_2eproto}, {
      &scc_info_BPosition_position_2eproto.base,}};

static void InitDefaultsscc_info_BSpaceAirVehicle_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_BSpaceAirVehicle_default_instance_;
    new (ptr) ::space::BSpaceAirVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::BSpaceAirVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BSpaceAirVehicle_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BSpaceAirVehicle_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_BSpaceGoods_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_BSpaceGoods_default_instance_;
    new (ptr) ::space::BSpaceGoods();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::BSpaceGoods::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BSpaceGoods_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BSpaceGoods_businessObject_2eproto}, {
      &scc_info_BPosition_position_2eproto.base,}};

static void InitDefaultsscc_info_CBusinessObjectList_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_CBusinessObjectList_default_instance_;
    new (ptr) ::space::CBusinessObjectList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::CBusinessObjectList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CBusinessObjectList_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CBusinessObjectList_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_CPickGoods_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_CPickGoods_default_instance_;
    new (ptr) ::space::CPickGoods();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::CPickGoods::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPickGoods_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPickGoods_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_CPickSpaceGoods_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_CPickSpaceGoods_default_instance_;
    new (ptr) ::space::CPickSpaceGoods();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::CPickSpaceGoods::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPickSpaceGoods_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPickSpaceGoods_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_CPutGoods_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_CPutGoods_default_instance_;
    new (ptr) ::space::CPutGoods();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::CPutGoods::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CPutGoods_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CPutGoods_businessObject_2eproto}, {
      &scc_info_BPosition_position_2eproto.base,}};

static void InitDefaultsscc_info_CSpaceAirVehicleTake_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_CSpaceAirVehicleTake_default_instance_;
    new (ptr) ::space::CSpaceAirVehicleTake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::CSpaceAirVehicleTake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSpaceAirVehicleTake_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSpaceAirVehicleTake_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_CTriggerBo_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_CTriggerBo_default_instance_;
    new (ptr) ::space::CTriggerBo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::CTriggerBo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTriggerBo_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CTriggerBo_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_SBusinessObjectList_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SBusinessObjectList_default_instance_;
    new (ptr) ::space::SBusinessObjectList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SBusinessObjectList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SBusinessObjectList_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SBusinessObjectList_businessObject_2eproto}, {
      &scc_info_BObject_businessObject_2eproto.base,}};

static void InitDefaultsscc_info_SPickGoods_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SPickGoods_default_instance_;
    new (ptr) ::space::SPickGoods();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SPickGoods::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SPickGoods_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SPickGoods_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_SPickSpaceGoods_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SPickSpaceGoods_default_instance_;
    new (ptr) ::space::SPickSpaceGoods();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SPickSpaceGoods::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SPickSpaceGoods_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SPickSpaceGoods_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_SPutGoods_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SPutGoods_default_instance_;
    new (ptr) ::space::SPutGoods();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SPutGoods::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SPutGoods_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SPutGoods_businessObject_2eproto}, {
      &scc_info_BPosition_position_2eproto.base,}};

static void InitDefaultsscc_info_SPutGoodsList_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SPutGoodsList_default_instance_;
    new (ptr) ::space::SPutGoodsList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SPutGoodsList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SPutGoodsList_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SPutGoodsList_businessObject_2eproto}, {
      &scc_info_SPutGoods_businessObject_2eproto.base,}};

static void InitDefaultsscc_info_SSpaceAirVehicle_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SSpaceAirVehicle_default_instance_;
    new (ptr) ::space::SSpaceAirVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SSpaceAirVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSpaceAirVehicle_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSpaceAirVehicle_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_SSpaceAirVehicleDisappear_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SSpaceAirVehicleDisappear_default_instance_;
    new (ptr) ::space::SSpaceAirVehicleDisappear();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SSpaceAirVehicleDisappear::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSpaceAirVehicleDisappear_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSpaceAirVehicleDisappear_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_SSpaceAirVehicleList_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SSpaceAirVehicleList_default_instance_;
    new (ptr) ::space::SSpaceAirVehicleList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SSpaceAirVehicleList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSpaceAirVehicleList_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSpaceAirVehicleList_businessObject_2eproto}, {
      &scc_info_BSpaceAirVehicle_businessObject_2eproto.base,}};

static void InitDefaultsscc_info_SSpaceAirVehicleTake_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SSpaceAirVehicleTake_default_instance_;
    new (ptr) ::space::SSpaceAirVehicleTake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SSpaceAirVehicleTake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSpaceAirVehicleTake_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSpaceAirVehicleTake_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_SSpaceGoodsList_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_SSpaceGoodsList_default_instance_;
    new (ptr) ::space::SSpaceGoodsList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::SSpaceGoodsList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSpaceGoodsList_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSpaceGoodsList_businessObject_2eproto}, {
      &scc_info_BSpaceGoods_businessObject_2eproto.base,}};

static void InitDefaultsscc_info_STriggerBo_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_STriggerBo_default_instance_;
    new (ptr) ::space::STriggerBo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::STriggerBo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STriggerBo_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STriggerBo_businessObject_2eproto}, {}};

static void InitDefaultsscc_info_STriggerBoBroad_businessObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::space::_STriggerBoBroad_default_instance_;
    new (ptr) ::space::STriggerBoBroad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::space::STriggerBoBroad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STriggerBoBroad_businessObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STriggerBoBroad_businessObject_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_businessObject_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_businessObject_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_businessObject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_businessObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::CBusinessObjectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::CBusinessObjectList, sceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SBusinessObjectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SBusinessObjectList, bolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::BObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::BObject, boid_),
  PROTOBUF_FIELD_OFFSET(::space::BObject, location_),
  PROTOBUF_FIELD_OFFSET(::space::BObject, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::CTriggerBo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::CTriggerBo, boid_),
  PROTOBUF_FIELD_OFFSET(::space::CTriggerBo, eventid_),
  PROTOBUF_FIELD_OFFSET(::space::CTriggerBo, location_),
  PROTOBUF_FIELD_OFFSET(::space::CTriggerBo, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::STriggerBo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::STriggerBo, issuccess_),
  PROTOBUF_FIELD_OFFSET(::space::STriggerBo, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::STriggerBoBroad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::STriggerBoBroad, boid_),
  PROTOBUF_FIELD_OFFSET(::space::STriggerBoBroad, eventid_),
  PROTOBUF_FIELD_OFFSET(::space::STriggerBoBroad, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::CPutGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::CPutGoods, position_),
  PROTOBUF_FIELD_OFFSET(::space::CPutGoods, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SPutGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SPutGoods, location_),
  PROTOBUF_FIELD_OFFSET(::space::SPutGoods, position_),
  PROTOBUF_FIELD_OFFSET(::space::SPutGoods, goodsid_),
  PROTOBUF_FIELD_OFFSET(::space::SPutGoods, second_),
  PROTOBUF_FIELD_OFFSET(::space::SPutGoods, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SPutGoodsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SPutGoodsList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::CPickGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::CPickGoods, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SPickGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SPickGoods, state_),
  PROTOBUF_FIELD_OFFSET(::space::SPickGoods, msg_),
  PROTOBUF_FIELD_OFFSET(::space::SPickGoods, location_),
  PROTOBUF_FIELD_OFFSET(::space::SPickGoods, pickuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::BSpaceGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::BSpaceGoods, location_),
  PROTOBUF_FIELD_OFFSET(::space::BSpaceGoods, position_),
  PROTOBUF_FIELD_OFFSET(::space::BSpaceGoods, goodsid_),
  PROTOBUF_FIELD_OFFSET(::space::BSpaceGoods, yuanlinum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceGoodsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceGoodsList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::CPickSpaceGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::CPickSpaceGoods, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SPickSpaceGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SPickSpaceGoods, state_),
  PROTOBUF_FIELD_OFFSET(::space::SPickSpaceGoods, msg_),
  PROTOBUF_FIELD_OFFSET(::space::SPickSpaceGoods, location_),
  PROTOBUF_FIELD_OFFSET(::space::SPickSpaceGoods, pickuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::BSpaceAirVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::BSpaceAirVehicle, id_),
  PROTOBUF_FIELD_OFFSET(::space::BSpaceAirVehicle, owner_),
  PROTOBUF_FIELD_OFFSET(::space::BSpaceAirVehicle, driver_),
  PROTOBUF_FIELD_OFFSET(::space::BSpaceAirVehicle, passenger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::CSpaceAirVehicleTake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::CSpaceAirVehicleTake, id_),
  PROTOBUF_FIELD_OFFSET(::space::CSpaceAirVehicleTake, takeaction_),
  PROTOBUF_FIELD_OFFSET(::space::CSpaceAirVehicleTake, takeposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleTake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleTake, state_),
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleTake, msg_),
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleTake, id_),
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleTake, takeuid_),
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleTake, takeposition_),
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleTake, takeaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleDisappear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleDisappear, id_),
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicleDisappear, second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicle, id_),
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicle, owner_),
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicle, driver_),
  PROTOBUF_FIELD_OFFSET(::space::SSpaceAirVehicle, passenger_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::space::CBusinessObjectList)},
  { 6, -1, sizeof(::space::SBusinessObjectList)},
  { 12, -1, sizeof(::space::BObject)},
  { 20, -1, sizeof(::space::CTriggerBo)},
  { 29, -1, sizeof(::space::STriggerBo)},
  { 36, -1, sizeof(::space::STriggerBoBroad)},
  { 44, -1, sizeof(::space::CPutGoods)},
  { 51, -1, sizeof(::space::SPutGoods)},
  { 61, -1, sizeof(::space::SPutGoodsList)},
  { 67, -1, sizeof(::space::CPickGoods)},
  { 73, -1, sizeof(::space::SPickGoods)},
  { 82, -1, sizeof(::space::BSpaceGoods)},
  { 91, -1, sizeof(::space::SSpaceGoodsList)},
  { 97, -1, sizeof(::space::CPickSpaceGoods)},
  { 103, -1, sizeof(::space::SPickSpaceGoods)},
  { 112, -1, sizeof(::space::BSpaceAirVehicle)},
  { 121, -1, sizeof(::space::SSpaceAirVehicleList)},
  { 127, -1, sizeof(::space::CSpaceAirVehicleTake)},
  { 135, -1, sizeof(::space::SSpaceAirVehicleTake)},
  { 146, -1, sizeof(::space::SSpaceAirVehicleDisappear)},
  { 153, -1, sizeof(::space::SSpaceAirVehicle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_CBusinessObjectList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SBusinessObjectList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_BObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_CTriggerBo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_STriggerBo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_STriggerBoBroad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_CPutGoods_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SPutGoods_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SPutGoodsList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_CPickGoods_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SPickGoods_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_BSpaceGoods_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SSpaceGoodsList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_CPickSpaceGoods_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SPickSpaceGoods_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_BSpaceAirVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SSpaceAirVehicleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_CSpaceAirVehicleTake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SSpaceAirVehicleTake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SSpaceAirVehicleDisappear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::space::_SSpaceAirVehicle_default_instance_),
};

const char descriptor_table_protodef_businessObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024businessObject.proto\022\005space\032\016position."
  "proto\"&\n\023CBusinessObjectList\022\017\n\007sceneId\030"
  "\001 \001(\005\"5\n\023SBusinessObjectList\022\036\n\006boList\030\001"
  " \003(\0132\016.space.BObject\"P\n\007BObject\022\014\n\004boId\030"
  "\001 \001(\005\022\020\n\010location\030\002 \001(\005\022%\n\010position\030\003 \001("
  "\0132\023.position.BPosition\"N\n\nCTriggerBo\022\014\n\004"
  "boId\030\001 \001(\005\022\017\n\007eventId\030\002 \001(\005\022\020\n\010location\030"
  "\003 \001(\005\022\017\n\007goodsId\030\004 \001(\005\"1\n\nSTriggerBo\022\021\n\t"
  "isSuccess\030\001 \001(\005\022\020\n\010location\030\002 \001(\005\"B\n\017STr"
  "iggerBoBroad\022\014\n\004boId\030\001 \001(\005\022\017\n\007eventId\030\002 "
  "\001(\005\022\020\n\010location\030\003 \001(\005\"C\n\tCPutGoods\022%\n\010po"
  "sition\030\001 \001(\0132\023.position.BPosition\022\017\n\007goo"
  "dsId\030\002 \001(\005\"r\n\tSPutGoods\022\020\n\010location\030\001 \001("
  "\005\022%\n\010position\030\002 \001(\0132\023.position.BPosition"
  "\022\017\n\007goodsId\030\003 \001(\005\022\016\n\006second\030\004 \001(\005\022\013\n\003uid"
  "\030\005 \001(\005\"/\n\rSPutGoodsList\022\036\n\004list\030\001 \003(\0132\020."
  "space.SPutGoods\"\036\n\nCPickGoods\022\020\n\010locatio"
  "n\030\001 \001(\005\"K\n\nSPickGoods\022\r\n\005state\030\001 \001(\005\022\013\n\003"
  "msg\030\002 \001(\t\022\020\n\010location\030\003 \001(\005\022\017\n\007pickUid\030\004"
  " \001(\005\"j\n\013BSpaceGoods\022\020\n\010location\030\001 \001(\005\022%\n"
  "\010position\030\002 \001(\0132\023.position.BPosition\022\017\n\007"
  "goodsId\030\003 \001(\005\022\021\n\tyuanliNum\030\004 \001(\005\"3\n\017SSpa"
  "ceGoodsList\022 \n\004list\030\001 \003(\0132\022.space.BSpace"
  "Goods\"#\n\017CPickSpaceGoods\022\020\n\010location\030\001 \001"
  "(\005\"P\n\017SPickSpaceGoods\022\r\n\005state\030\001 \001(\005\022\013\n\003"
  "msg\030\002 \001(\t\022\020\n\010location\030\003 \001(\005\022\017\n\007pickUid\030\004"
  " \001(\005\"P\n\020BSpaceAirVehicle\022\n\n\002id\030\001 \001(\005\022\r\n\005"
  "owner\030\002 \001(\005\022\016\n\006driver\030\003 \001(\005\022\021\n\tpassenger"
  "\030\004 \001(\005\"=\n\024SSpaceAirVehicleList\022%\n\004list\030\001"
  " \003(\0132\027.space.BSpaceAirVehicle\"L\n\024CSpaceA"
  "irVehicleTake\022\n\n\002id\030\001 \001(\005\022\022\n\ntakeAction\030"
  "\002 \001(\005\022\024\n\014takePosition\030\003 \001(\005\"y\n\024SSpaceAir"
  "VehicleTake\022\r\n\005state\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022"
  "\n\n\002id\030\003 \001(\005\022\017\n\007takeUid\030\004 \001(\005\022\024\n\014takePosi"
  "tion\030\005 \001(\005\022\022\n\ntakeAction\030\006 \001(\005\"7\n\031SSpace"
  "AirVehicleDisappear\022\n\n\002id\030\001 \001(\005\022\016\n\006secon"
  "d\030\002 \001(\005\"P\n\020SSpaceAirVehicle\022\n\n\002id\030\001 \001(\005\022"
  "\r\n\005owner\030\002 \001(\005\022\016\n\006driver\030\003 \001(\005\022\021\n\tpassen"
  "ger\030\004 \001(\005B*\n\030com.dayou.space.protobufB\016B"
  "usinessObjectb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_businessObject_2eproto_deps[1] = {
  &::descriptor_table_position_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_businessObject_2eproto_sccs[21] = {
  &scc_info_BObject_businessObject_2eproto.base,
  &scc_info_BSpaceAirVehicle_businessObject_2eproto.base,
  &scc_info_BSpaceGoods_businessObject_2eproto.base,
  &scc_info_CBusinessObjectList_businessObject_2eproto.base,
  &scc_info_CPickGoods_businessObject_2eproto.base,
  &scc_info_CPickSpaceGoods_businessObject_2eproto.base,
  &scc_info_CPutGoods_businessObject_2eproto.base,
  &scc_info_CSpaceAirVehicleTake_businessObject_2eproto.base,
  &scc_info_CTriggerBo_businessObject_2eproto.base,
  &scc_info_SBusinessObjectList_businessObject_2eproto.base,
  &scc_info_SPickGoods_businessObject_2eproto.base,
  &scc_info_SPickSpaceGoods_businessObject_2eproto.base,
  &scc_info_SPutGoods_businessObject_2eproto.base,
  &scc_info_SPutGoodsList_businessObject_2eproto.base,
  &scc_info_SSpaceAirVehicle_businessObject_2eproto.base,
  &scc_info_SSpaceAirVehicleDisappear_businessObject_2eproto.base,
  &scc_info_SSpaceAirVehicleList_businessObject_2eproto.base,
  &scc_info_SSpaceAirVehicleTake_businessObject_2eproto.base,
  &scc_info_SSpaceGoodsList_businessObject_2eproto.base,
  &scc_info_STriggerBo_businessObject_2eproto.base,
  &scc_info_STriggerBoBroad_businessObject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_businessObject_2eproto_once;
static bool descriptor_table_businessObject_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_businessObject_2eproto = {
  &descriptor_table_businessObject_2eproto_initialized, descriptor_table_protodef_businessObject_2eproto, "businessObject.proto", 1581,
  &descriptor_table_businessObject_2eproto_once, descriptor_table_businessObject_2eproto_sccs, descriptor_table_businessObject_2eproto_deps, 21, 1,
  schemas, file_default_instances, TableStruct_businessObject_2eproto::offsets,
  file_level_metadata_businessObject_2eproto, 21, file_level_enum_descriptors_businessObject_2eproto, file_level_service_descriptors_businessObject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_businessObject_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_businessObject_2eproto), true);
namespace space {

// ===================================================================

void CBusinessObjectList::InitAsDefaultInstance() {
}
class CBusinessObjectList::_Internal {
 public:
};

CBusinessObjectList::CBusinessObjectList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.CBusinessObjectList)
}
CBusinessObjectList::CBusinessObjectList(const CBusinessObjectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sceneid_ = from.sceneid_;
  // @@protoc_insertion_point(copy_constructor:space.CBusinessObjectList)
}

void CBusinessObjectList::SharedCtor() {
  sceneid_ = 0;
}

CBusinessObjectList::~CBusinessObjectList() {
  // @@protoc_insertion_point(destructor:space.CBusinessObjectList)
  SharedDtor();
}

void CBusinessObjectList::SharedDtor() {
}

void CBusinessObjectList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBusinessObjectList& CBusinessObjectList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CBusinessObjectList_businessObject_2eproto.base);
  return *internal_default_instance();
}


void CBusinessObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:space.CBusinessObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_ = 0;
  _internal_metadata_.Clear();
}

const char* CBusinessObjectList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sceneId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBusinessObjectList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.CBusinessObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sceneId = 1;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.CBusinessObjectList)
  return target;
}

size_t CBusinessObjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.CBusinessObjectList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sceneId = 1;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sceneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBusinessObjectList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.CBusinessObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  const CBusinessObjectList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBusinessObjectList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.CBusinessObjectList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.CBusinessObjectList)
    MergeFrom(*source);
  }
}

void CBusinessObjectList::MergeFrom(const CBusinessObjectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.CBusinessObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
}

void CBusinessObjectList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.CBusinessObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBusinessObjectList::CopyFrom(const CBusinessObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.CBusinessObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBusinessObjectList::IsInitialized() const {
  return true;
}

void CBusinessObjectList::InternalSwap(CBusinessObjectList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBusinessObjectList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBusinessObjectList::InitAsDefaultInstance() {
}
class SBusinessObjectList::_Internal {
 public:
};

SBusinessObjectList::SBusinessObjectList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SBusinessObjectList)
}
SBusinessObjectList::SBusinessObjectList(const SBusinessObjectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bolist_(from.bolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:space.SBusinessObjectList)
}

void SBusinessObjectList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBusinessObjectList_businessObject_2eproto.base);
}

SBusinessObjectList::~SBusinessObjectList() {
  // @@protoc_insertion_point(destructor:space.SBusinessObjectList)
  SharedDtor();
}

void SBusinessObjectList::SharedDtor() {
}

void SBusinessObjectList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBusinessObjectList& SBusinessObjectList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBusinessObjectList_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SBusinessObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SBusinessObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bolist_.Clear();
  _internal_metadata_.Clear();
}

const char* SBusinessObjectList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .space.BObject boList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBusinessObjectList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SBusinessObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .space.BObject boList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SBusinessObjectList)
  return target;
}

size_t SBusinessObjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SBusinessObjectList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .space.BObject boList = 1;
  total_size += 1UL * this->_internal_bolist_size();
  for (const auto& msg : this->bolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBusinessObjectList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SBusinessObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  const SBusinessObjectList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBusinessObjectList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SBusinessObjectList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SBusinessObjectList)
    MergeFrom(*source);
  }
}

void SBusinessObjectList::MergeFrom(const SBusinessObjectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SBusinessObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bolist_.MergeFrom(from.bolist_);
}

void SBusinessObjectList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SBusinessObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBusinessObjectList::CopyFrom(const SBusinessObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SBusinessObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBusinessObjectList::IsInitialized() const {
  return true;
}

void SBusinessObjectList::InternalSwap(SBusinessObjectList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bolist_.InternalSwap(&other->bolist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBusinessObjectList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BObject::InitAsDefaultInstance() {
  ::space::_BObject_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition*>(
      ::position::BPosition::internal_default_instance());
}
class BObject::_Internal {
 public:
  static const ::position::BPosition& position(const BObject* msg);
};

const ::position::BPosition&
BObject::_Internal::position(const BObject* msg) {
  return *msg->position_;
}
void BObject::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
BObject::BObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.BObject)
}
BObject::BObject(const BObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&boid_, &from.boid_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_) -
    reinterpret_cast<char*>(&boid_)) + sizeof(location_));
  // @@protoc_insertion_point(copy_constructor:space.BObject)
}

void BObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BObject_businessObject_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&position_)) + sizeof(location_));
}

BObject::~BObject() {
  // @@protoc_insertion_point(destructor:space.BObject)
  SharedDtor();
}

void BObject::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void BObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BObject& BObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BObject_businessObject_2eproto.base);
  return *internal_default_instance();
}


void BObject::Clear() {
// @@protoc_insertion_point(message_clear_start:space.BObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&boid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&boid_)) + sizeof(location_));
  _internal_metadata_.Clear();
}

const char* BObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .position.BPosition position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.BObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boId = 1;
  if (this->boid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boid(), target);
  }

  // int32 location = 2;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_location(), target);
  }

  // .position.BPosition position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.BObject)
  return target;
}

size_t BObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.BObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .position.BPosition position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 boId = 1;
  if (this->boid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boid());
  }

  // int32 location = 2;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.BObject)
  GOOGLE_DCHECK_NE(&from, this);
  const BObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.BObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.BObject)
    MergeFrom(*source);
  }
}

void BObject::MergeFrom(const BObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.BObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition::MergeFrom(from._internal_position());
  }
  if (from.boid() != 0) {
    _internal_set_boid(from._internal_boid());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
}

void BObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.BObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BObject::CopyFrom(const BObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.BObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BObject::IsInitialized() const {
  return true;
}

void BObject::InternalSwap(BObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(boid_, other->boid_);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CTriggerBo::InitAsDefaultInstance() {
}
class CTriggerBo::_Internal {
 public:
};

CTriggerBo::CTriggerBo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.CTriggerBo)
}
CTriggerBo::CTriggerBo(const CTriggerBo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&boid_, &from.boid_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&boid_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:space.CTriggerBo)
}

void CTriggerBo::SharedCtor() {
  ::memset(&boid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&boid_)) + sizeof(goodsid_));
}

CTriggerBo::~CTriggerBo() {
  // @@protoc_insertion_point(destructor:space.CTriggerBo)
  SharedDtor();
}

void CTriggerBo::SharedDtor() {
}

void CTriggerBo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTriggerBo& CTriggerBo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTriggerBo_businessObject_2eproto.base);
  return *internal_default_instance();
}


void CTriggerBo::Clear() {
// @@protoc_insertion_point(message_clear_start:space.CTriggerBo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&boid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&boid_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* CTriggerBo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTriggerBo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.CTriggerBo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boId = 1;
  if (this->boid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boid(), target);
  }

  // int32 eventId = 2;
  if (this->eventid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_eventid(), target);
  }

  // int32 location = 3;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_location(), target);
  }

  // int32 goodsId = 4;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.CTriggerBo)
  return target;
}

size_t CTriggerBo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.CTriggerBo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 boId = 1;
  if (this->boid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boid());
  }

  // int32 eventId = 2;
  if (this->eventid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventid());
  }

  // int32 location = 3;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  // int32 goodsId = 4;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTriggerBo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.CTriggerBo)
  GOOGLE_DCHECK_NE(&from, this);
  const CTriggerBo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTriggerBo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.CTriggerBo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.CTriggerBo)
    MergeFrom(*source);
  }
}

void CTriggerBo::MergeFrom(const CTriggerBo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.CTriggerBo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boid() != 0) {
    _internal_set_boid(from._internal_boid());
  }
  if (from.eventid() != 0) {
    _internal_set_eventid(from._internal_eventid());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CTriggerBo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.CTriggerBo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTriggerBo::CopyFrom(const CTriggerBo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.CTriggerBo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTriggerBo::IsInitialized() const {
  return true;
}

void CTriggerBo::InternalSwap(CTriggerBo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(boid_, other->boid_);
  swap(eventid_, other->eventid_);
  swap(location_, other->location_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTriggerBo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STriggerBo::InitAsDefaultInstance() {
}
class STriggerBo::_Internal {
 public:
};

STriggerBo::STriggerBo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.STriggerBo)
}
STriggerBo::STriggerBo(const STriggerBo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&issuccess_, &from.issuccess_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_) -
    reinterpret_cast<char*>(&issuccess_)) + sizeof(location_));
  // @@protoc_insertion_point(copy_constructor:space.STriggerBo)
}

void STriggerBo::SharedCtor() {
  ::memset(&issuccess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&issuccess_)) + sizeof(location_));
}

STriggerBo::~STriggerBo() {
  // @@protoc_insertion_point(destructor:space.STriggerBo)
  SharedDtor();
}

void STriggerBo::SharedDtor() {
}

void STriggerBo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STriggerBo& STriggerBo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STriggerBo_businessObject_2eproto.base);
  return *internal_default_instance();
}


void STriggerBo::Clear() {
// @@protoc_insertion_point(message_clear_start:space.STriggerBo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&issuccess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&issuccess_)) + sizeof(location_));
  _internal_metadata_.Clear();
}

const char* STriggerBo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STriggerBo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.STriggerBo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isSuccess = 1;
  if (this->issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_issuccess(), target);
  }

  // int32 location = 2;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.STriggerBo)
  return target;
}

size_t STriggerBo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.STriggerBo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 isSuccess = 1;
  if (this->issuccess() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_issuccess());
  }

  // int32 location = 2;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STriggerBo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.STriggerBo)
  GOOGLE_DCHECK_NE(&from, this);
  const STriggerBo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STriggerBo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.STriggerBo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.STriggerBo)
    MergeFrom(*source);
  }
}

void STriggerBo::MergeFrom(const STriggerBo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.STriggerBo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.issuccess() != 0) {
    _internal_set_issuccess(from._internal_issuccess());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
}

void STriggerBo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.STriggerBo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STriggerBo::CopyFrom(const STriggerBo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.STriggerBo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STriggerBo::IsInitialized() const {
  return true;
}

void STriggerBo::InternalSwap(STriggerBo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(issuccess_, other->issuccess_);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STriggerBo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STriggerBoBroad::InitAsDefaultInstance() {
}
class STriggerBoBroad::_Internal {
 public:
};

STriggerBoBroad::STriggerBoBroad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.STriggerBoBroad)
}
STriggerBoBroad::STriggerBoBroad(const STriggerBoBroad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&boid_, &from.boid_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_) -
    reinterpret_cast<char*>(&boid_)) + sizeof(location_));
  // @@protoc_insertion_point(copy_constructor:space.STriggerBoBroad)
}

void STriggerBoBroad::SharedCtor() {
  ::memset(&boid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&boid_)) + sizeof(location_));
}

STriggerBoBroad::~STriggerBoBroad() {
  // @@protoc_insertion_point(destructor:space.STriggerBoBroad)
  SharedDtor();
}

void STriggerBoBroad::SharedDtor() {
}

void STriggerBoBroad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STriggerBoBroad& STriggerBoBroad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STriggerBoBroad_businessObject_2eproto.base);
  return *internal_default_instance();
}


void STriggerBoBroad::Clear() {
// @@protoc_insertion_point(message_clear_start:space.STriggerBoBroad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&boid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&boid_)) + sizeof(location_));
  _internal_metadata_.Clear();
}

const char* STriggerBoBroad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STriggerBoBroad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.STriggerBoBroad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boId = 1;
  if (this->boid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boid(), target);
  }

  // int32 eventId = 2;
  if (this->eventid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_eventid(), target);
  }

  // int32 location = 3;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.STriggerBoBroad)
  return target;
}

size_t STriggerBoBroad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.STriggerBoBroad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 boId = 1;
  if (this->boid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boid());
  }

  // int32 eventId = 2;
  if (this->eventid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventid());
  }

  // int32 location = 3;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STriggerBoBroad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.STriggerBoBroad)
  GOOGLE_DCHECK_NE(&from, this);
  const STriggerBoBroad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STriggerBoBroad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.STriggerBoBroad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.STriggerBoBroad)
    MergeFrom(*source);
  }
}

void STriggerBoBroad::MergeFrom(const STriggerBoBroad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.STriggerBoBroad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boid() != 0) {
    _internal_set_boid(from._internal_boid());
  }
  if (from.eventid() != 0) {
    _internal_set_eventid(from._internal_eventid());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
}

void STriggerBoBroad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.STriggerBoBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STriggerBoBroad::CopyFrom(const STriggerBoBroad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.STriggerBoBroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STriggerBoBroad::IsInitialized() const {
  return true;
}

void STriggerBoBroad::InternalSwap(STriggerBoBroad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(boid_, other->boid_);
  swap(eventid_, other->eventid_);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STriggerBoBroad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPutGoods::InitAsDefaultInstance() {
  ::space::_CPutGoods_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition*>(
      ::position::BPosition::internal_default_instance());
}
class CPutGoods::_Internal {
 public:
  static const ::position::BPosition& position(const CPutGoods* msg);
};

const ::position::BPosition&
CPutGoods::_Internal::position(const CPutGoods* msg) {
  return *msg->position_;
}
void CPutGoods::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
CPutGoods::CPutGoods()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.CPutGoods)
}
CPutGoods::CPutGoods(const CPutGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:space.CPutGoods)
}

void CPutGoods::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPutGoods_businessObject_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(goodsid_));
}

CPutGoods::~CPutGoods() {
  // @@protoc_insertion_point(destructor:space.CPutGoods)
  SharedDtor();
}

void CPutGoods::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CPutGoods::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPutGoods& CPutGoods::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPutGoods_businessObject_2eproto.base);
  return *internal_default_instance();
}


void CPutGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:space.CPutGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* CPutGoods::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .position.BPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPutGoods::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.CPutGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .position.BPosition position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.CPutGoods)
  return target;
}

size_t CPutGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.CPutGoods)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .position.BPosition position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPutGoods::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.CPutGoods)
  GOOGLE_DCHECK_NE(&from, this);
  const CPutGoods* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPutGoods>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.CPutGoods)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.CPutGoods)
    MergeFrom(*source);
  }
}

void CPutGoods::MergeFrom(const CPutGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.CPutGoods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition::MergeFrom(from._internal_position());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CPutGoods::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.CPutGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPutGoods::CopyFrom(const CPutGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.CPutGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPutGoods::IsInitialized() const {
  return true;
}

void CPutGoods::InternalSwap(CPutGoods* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPutGoods::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPutGoods::InitAsDefaultInstance() {
  ::space::_SPutGoods_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition*>(
      ::position::BPosition::internal_default_instance());
}
class SPutGoods::_Internal {
 public:
  static const ::position::BPosition& position(const SPutGoods* msg);
};

const ::position::BPosition&
SPutGoods::_Internal::position(const SPutGoods* msg) {
  return *msg->position_;
}
void SPutGoods::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
SPutGoods::SPutGoods()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SPutGoods)
}
SPutGoods::SPutGoods(const SPutGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&location_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:space.SPutGoods)
}

void SPutGoods::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPutGoods_businessObject_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(uid_));
}

SPutGoods::~SPutGoods() {
  // @@protoc_insertion_point(destructor:space.SPutGoods)
  SharedDtor();
}

void SPutGoods::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void SPutGoods::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPutGoods& SPutGoods::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPutGoods_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SPutGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SPutGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&location_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SPutGoods::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .position.BPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 second = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPutGoods::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SPutGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_location(), target);
  }

  // .position.BPosition position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_goodsid(), target);
  }

  // int32 second = 4;
  if (this->second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_second(), target);
  }

  // int32 uid = 5;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SPutGoods)
  return target;
}

size_t SPutGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SPutGoods)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .position.BPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 location = 1;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 second = 4;
  if (this->second() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_second());
  }

  // int32 uid = 5;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPutGoods::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SPutGoods)
  GOOGLE_DCHECK_NE(&from, this);
  const SPutGoods* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPutGoods>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SPutGoods)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SPutGoods)
    MergeFrom(*source);
  }
}

void SPutGoods::MergeFrom(const SPutGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SPutGoods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition::MergeFrom(from._internal_position());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.second() != 0) {
    _internal_set_second(from._internal_second());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SPutGoods::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SPutGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPutGoods::CopyFrom(const SPutGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SPutGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPutGoods::IsInitialized() const {
  return true;
}

void SPutGoods::InternalSwap(SPutGoods* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(location_, other->location_);
  swap(goodsid_, other->goodsid_);
  swap(second_, other->second_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPutGoods::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPutGoodsList::InitAsDefaultInstance() {
}
class SPutGoodsList::_Internal {
 public:
};

SPutGoodsList::SPutGoodsList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SPutGoodsList)
}
SPutGoodsList::SPutGoodsList(const SPutGoodsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:space.SPutGoodsList)
}

void SPutGoodsList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPutGoodsList_businessObject_2eproto.base);
}

SPutGoodsList::~SPutGoodsList() {
  // @@protoc_insertion_point(destructor:space.SPutGoodsList)
  SharedDtor();
}

void SPutGoodsList::SharedDtor() {
}

void SPutGoodsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPutGoodsList& SPutGoodsList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPutGoodsList_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SPutGoodsList::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SPutGoodsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SPutGoodsList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .space.SPutGoods list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPutGoodsList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SPutGoodsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .space.SPutGoods list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SPutGoodsList)
  return target;
}

size_t SPutGoodsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SPutGoodsList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .space.SPutGoods list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPutGoodsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SPutGoodsList)
  GOOGLE_DCHECK_NE(&from, this);
  const SPutGoodsList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPutGoodsList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SPutGoodsList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SPutGoodsList)
    MergeFrom(*source);
  }
}

void SPutGoodsList::MergeFrom(const SPutGoodsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SPutGoodsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SPutGoodsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SPutGoodsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPutGoodsList::CopyFrom(const SPutGoodsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SPutGoodsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPutGoodsList::IsInitialized() const {
  return true;
}

void SPutGoodsList::InternalSwap(SPutGoodsList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPutGoodsList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPickGoods::InitAsDefaultInstance() {
}
class CPickGoods::_Internal {
 public:
};

CPickGoods::CPickGoods()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.CPickGoods)
}
CPickGoods::CPickGoods(const CPickGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_ = from.location_;
  // @@protoc_insertion_point(copy_constructor:space.CPickGoods)
}

void CPickGoods::SharedCtor() {
  location_ = 0;
}

CPickGoods::~CPickGoods() {
  // @@protoc_insertion_point(destructor:space.CPickGoods)
  SharedDtor();
}

void CPickGoods::SharedDtor() {
}

void CPickGoods::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPickGoods& CPickGoods::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPickGoods_businessObject_2eproto.base);
  return *internal_default_instance();
}


void CPickGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:space.CPickGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_ = 0;
  _internal_metadata_.Clear();
}

const char* CPickGoods::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPickGoods::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.CPickGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.CPickGoods)
  return target;
}

size_t CPickGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.CPickGoods)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPickGoods::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.CPickGoods)
  GOOGLE_DCHECK_NE(&from, this);
  const CPickGoods* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPickGoods>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.CPickGoods)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.CPickGoods)
    MergeFrom(*source);
  }
}

void CPickGoods::MergeFrom(const CPickGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.CPickGoods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
}

void CPickGoods::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.CPickGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPickGoods::CopyFrom(const CPickGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.CPickGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPickGoods::IsInitialized() const {
  return true;
}

void CPickGoods::InternalSwap(CPickGoods* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPickGoods::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPickGoods::InitAsDefaultInstance() {
}
class SPickGoods::_Internal {
 public:
};

SPickGoods::SPickGoods()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SPickGoods)
}
SPickGoods::SPickGoods(const SPickGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickuid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(pickuid_));
  // @@protoc_insertion_point(copy_constructor:space.SPickGoods)
}

void SPickGoods::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPickGoods_businessObject_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(pickuid_));
}

SPickGoods::~SPickGoods() {
  // @@protoc_insertion_point(destructor:space.SPickGoods)
  SharedDtor();
}

void SPickGoods::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SPickGoods::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPickGoods& SPickGoods::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPickGoods_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SPickGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SPickGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(pickuid_));
  _internal_metadata_.Clear();
}

const char* SPickGoods::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "space.SPickGoods.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pickUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pickuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPickGoods::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SPickGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "space.SPickGoods.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 location = 3;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_location(), target);
  }

  // int32 pickUid = 4;
  if (this->pickuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pickuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SPickGoods)
  return target;
}

size_t SPickGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SPickGoods)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 location = 3;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  // int32 pickUid = 4;
  if (this->pickuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pickuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPickGoods::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SPickGoods)
  GOOGLE_DCHECK_NE(&from, this);
  const SPickGoods* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPickGoods>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SPickGoods)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SPickGoods)
    MergeFrom(*source);
  }
}

void SPickGoods::MergeFrom(const SPickGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SPickGoods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.pickuid() != 0) {
    _internal_set_pickuid(from._internal_pickuid());
  }
}

void SPickGoods::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SPickGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPickGoods::CopyFrom(const SPickGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SPickGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPickGoods::IsInitialized() const {
  return true;
}

void SPickGoods::InternalSwap(SPickGoods* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(location_, other->location_);
  swap(pickuid_, other->pickuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPickGoods::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BSpaceGoods::InitAsDefaultInstance() {
  ::space::_BSpaceGoods_default_instance_._instance.get_mutable()->position_ = const_cast< ::position::BPosition*>(
      ::position::BPosition::internal_default_instance());
}
class BSpaceGoods::_Internal {
 public:
  static const ::position::BPosition& position(const BSpaceGoods* msg);
};

const ::position::BPosition&
BSpaceGoods::_Internal::position(const BSpaceGoods* msg) {
  return *msg->position_;
}
void BSpaceGoods::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
BSpaceGoods::BSpaceGoods()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.BSpaceGoods)
}
BSpaceGoods::BSpaceGoods(const BSpaceGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::position::BPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&yuanlinum_) -
    reinterpret_cast<char*>(&location_)) + sizeof(yuanlinum_));
  // @@protoc_insertion_point(copy_constructor:space.BSpaceGoods)
}

void BSpaceGoods::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BSpaceGoods_businessObject_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yuanlinum_) -
      reinterpret_cast<char*>(&position_)) + sizeof(yuanlinum_));
}

BSpaceGoods::~BSpaceGoods() {
  // @@protoc_insertion_point(destructor:space.BSpaceGoods)
  SharedDtor();
}

void BSpaceGoods::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void BSpaceGoods::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BSpaceGoods& BSpaceGoods::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BSpaceGoods_businessObject_2eproto.base);
  return *internal_default_instance();
}


void BSpaceGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:space.BSpaceGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yuanlinum_) -
      reinterpret_cast<char*>(&location_)) + sizeof(yuanlinum_));
  _internal_metadata_.Clear();
}

const char* BSpaceGoods::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .position.BPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yuanliNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          yuanlinum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BSpaceGoods::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.BSpaceGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_location(), target);
  }

  // .position.BPosition position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_goodsid(), target);
  }

  // int32 yuanliNum = 4;
  if (this->yuanlinum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_yuanlinum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.BSpaceGoods)
  return target;
}

size_t BSpaceGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.BSpaceGoods)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .position.BPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 location = 1;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 yuanliNum = 4;
  if (this->yuanlinum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yuanlinum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BSpaceGoods::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.BSpaceGoods)
  GOOGLE_DCHECK_NE(&from, this);
  const BSpaceGoods* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BSpaceGoods>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.BSpaceGoods)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.BSpaceGoods)
    MergeFrom(*source);
  }
}

void BSpaceGoods::MergeFrom(const BSpaceGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.BSpaceGoods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::position::BPosition::MergeFrom(from._internal_position());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.yuanlinum() != 0) {
    _internal_set_yuanlinum(from._internal_yuanlinum());
  }
}

void BSpaceGoods::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.BSpaceGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSpaceGoods::CopyFrom(const BSpaceGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.BSpaceGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSpaceGoods::IsInitialized() const {
  return true;
}

void BSpaceGoods::InternalSwap(BSpaceGoods* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(location_, other->location_);
  swap(goodsid_, other->goodsid_);
  swap(yuanlinum_, other->yuanlinum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BSpaceGoods::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceGoodsList::InitAsDefaultInstance() {
}
class SSpaceGoodsList::_Internal {
 public:
};

SSpaceGoodsList::SSpaceGoodsList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SSpaceGoodsList)
}
SSpaceGoodsList::SSpaceGoodsList(const SSpaceGoodsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:space.SSpaceGoodsList)
}

void SSpaceGoodsList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSpaceGoodsList_businessObject_2eproto.base);
}

SSpaceGoodsList::~SSpaceGoodsList() {
  // @@protoc_insertion_point(destructor:space.SSpaceGoodsList)
  SharedDtor();
}

void SSpaceGoodsList::SharedDtor() {
}

void SSpaceGoodsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceGoodsList& SSpaceGoodsList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceGoodsList_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SSpaceGoodsList::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SSpaceGoodsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SSpaceGoodsList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .space.BSpaceGoods list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceGoodsList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SSpaceGoodsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .space.BSpaceGoods list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SSpaceGoodsList)
  return target;
}

size_t SSpaceGoodsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SSpaceGoodsList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .space.BSpaceGoods list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceGoodsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SSpaceGoodsList)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceGoodsList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceGoodsList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SSpaceGoodsList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SSpaceGoodsList)
    MergeFrom(*source);
  }
}

void SSpaceGoodsList::MergeFrom(const SSpaceGoodsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SSpaceGoodsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SSpaceGoodsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SSpaceGoodsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceGoodsList::CopyFrom(const SSpaceGoodsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SSpaceGoodsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceGoodsList::IsInitialized() const {
  return true;
}

void SSpaceGoodsList::InternalSwap(SSpaceGoodsList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceGoodsList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPickSpaceGoods::InitAsDefaultInstance() {
}
class CPickSpaceGoods::_Internal {
 public:
};

CPickSpaceGoods::CPickSpaceGoods()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.CPickSpaceGoods)
}
CPickSpaceGoods::CPickSpaceGoods(const CPickSpaceGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_ = from.location_;
  // @@protoc_insertion_point(copy_constructor:space.CPickSpaceGoods)
}

void CPickSpaceGoods::SharedCtor() {
  location_ = 0;
}

CPickSpaceGoods::~CPickSpaceGoods() {
  // @@protoc_insertion_point(destructor:space.CPickSpaceGoods)
  SharedDtor();
}

void CPickSpaceGoods::SharedDtor() {
}

void CPickSpaceGoods::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPickSpaceGoods& CPickSpaceGoods::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPickSpaceGoods_businessObject_2eproto.base);
  return *internal_default_instance();
}


void CPickSpaceGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:space.CPickSpaceGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_ = 0;
  _internal_metadata_.Clear();
}

const char* CPickSpaceGoods::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPickSpaceGoods::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.CPickSpaceGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.CPickSpaceGoods)
  return target;
}

size_t CPickSpaceGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.CPickSpaceGoods)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPickSpaceGoods::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.CPickSpaceGoods)
  GOOGLE_DCHECK_NE(&from, this);
  const CPickSpaceGoods* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPickSpaceGoods>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.CPickSpaceGoods)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.CPickSpaceGoods)
    MergeFrom(*source);
  }
}

void CPickSpaceGoods::MergeFrom(const CPickSpaceGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.CPickSpaceGoods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
}

void CPickSpaceGoods::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.CPickSpaceGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPickSpaceGoods::CopyFrom(const CPickSpaceGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.CPickSpaceGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPickSpaceGoods::IsInitialized() const {
  return true;
}

void CPickSpaceGoods::InternalSwap(CPickSpaceGoods* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPickSpaceGoods::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPickSpaceGoods::InitAsDefaultInstance() {
}
class SPickSpaceGoods::_Internal {
 public:
};

SPickSpaceGoods::SPickSpaceGoods()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SPickSpaceGoods)
}
SPickSpaceGoods::SPickSpaceGoods(const SPickSpaceGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickuid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(pickuid_));
  // @@protoc_insertion_point(copy_constructor:space.SPickSpaceGoods)
}

void SPickSpaceGoods::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPickSpaceGoods_businessObject_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(pickuid_));
}

SPickSpaceGoods::~SPickSpaceGoods() {
  // @@protoc_insertion_point(destructor:space.SPickSpaceGoods)
  SharedDtor();
}

void SPickSpaceGoods::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SPickSpaceGoods::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPickSpaceGoods& SPickSpaceGoods::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPickSpaceGoods_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SPickSpaceGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SPickSpaceGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(pickuid_));
  _internal_metadata_.Clear();
}

const char* SPickSpaceGoods::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "space.SPickSpaceGoods.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pickUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pickuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPickSpaceGoods::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SPickSpaceGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "space.SPickSpaceGoods.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 location = 3;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_location(), target);
  }

  // int32 pickUid = 4;
  if (this->pickuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pickuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SPickSpaceGoods)
  return target;
}

size_t SPickSpaceGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SPickSpaceGoods)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 location = 3;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  // int32 pickUid = 4;
  if (this->pickuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pickuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPickSpaceGoods::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SPickSpaceGoods)
  GOOGLE_DCHECK_NE(&from, this);
  const SPickSpaceGoods* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPickSpaceGoods>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SPickSpaceGoods)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SPickSpaceGoods)
    MergeFrom(*source);
  }
}

void SPickSpaceGoods::MergeFrom(const SPickSpaceGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SPickSpaceGoods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.pickuid() != 0) {
    _internal_set_pickuid(from._internal_pickuid());
  }
}

void SPickSpaceGoods::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SPickSpaceGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPickSpaceGoods::CopyFrom(const SPickSpaceGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SPickSpaceGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPickSpaceGoods::IsInitialized() const {
  return true;
}

void SPickSpaceGoods::InternalSwap(SPickSpaceGoods* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(location_, other->location_);
  swap(pickuid_, other->pickuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPickSpaceGoods::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BSpaceAirVehicle::InitAsDefaultInstance() {
}
class BSpaceAirVehicle::_Internal {
 public:
};

BSpaceAirVehicle::BSpaceAirVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.BSpaceAirVehicle)
}
BSpaceAirVehicle::BSpaceAirVehicle(const BSpaceAirVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&passenger_) -
    reinterpret_cast<char*>(&id_)) + sizeof(passenger_));
  // @@protoc_insertion_point(copy_constructor:space.BSpaceAirVehicle)
}

void BSpaceAirVehicle::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_) -
      reinterpret_cast<char*>(&id_)) + sizeof(passenger_));
}

BSpaceAirVehicle::~BSpaceAirVehicle() {
  // @@protoc_insertion_point(destructor:space.BSpaceAirVehicle)
  SharedDtor();
}

void BSpaceAirVehicle::SharedDtor() {
}

void BSpaceAirVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BSpaceAirVehicle& BSpaceAirVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BSpaceAirVehicle_businessObject_2eproto.base);
  return *internal_default_instance();
}


void BSpaceAirVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:space.BSpaceAirVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_) -
      reinterpret_cast<char*>(&id_)) + sizeof(passenger_));
  _internal_metadata_.Clear();
}

const char* BSpaceAirVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passenger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          passenger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BSpaceAirVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.BSpaceAirVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_owner(), target);
  }

  // int32 driver = 3;
  if (this->driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_driver(), target);
  }

  // int32 passenger = 4;
  if (this->passenger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_passenger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.BSpaceAirVehicle)
  return target;
}

size_t BSpaceAirVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.BSpaceAirVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner());
  }

  // int32 driver = 3;
  if (this->driver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_driver());
  }

  // int32 passenger = 4;
  if (this->passenger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_passenger());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BSpaceAirVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.BSpaceAirVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const BSpaceAirVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BSpaceAirVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.BSpaceAirVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.BSpaceAirVehicle)
    MergeFrom(*source);
  }
}

void BSpaceAirVehicle::MergeFrom(const BSpaceAirVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.BSpaceAirVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from.passenger() != 0) {
    _internal_set_passenger(from._internal_passenger());
  }
}

void BSpaceAirVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.BSpaceAirVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSpaceAirVehicle::CopyFrom(const BSpaceAirVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.BSpaceAirVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSpaceAirVehicle::IsInitialized() const {
  return true;
}

void BSpaceAirVehicle::InternalSwap(BSpaceAirVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(owner_, other->owner_);
  swap(driver_, other->driver_);
  swap(passenger_, other->passenger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BSpaceAirVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceAirVehicleList::InitAsDefaultInstance() {
}
class SSpaceAirVehicleList::_Internal {
 public:
};

SSpaceAirVehicleList::SSpaceAirVehicleList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SSpaceAirVehicleList)
}
SSpaceAirVehicleList::SSpaceAirVehicleList(const SSpaceAirVehicleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:space.SSpaceAirVehicleList)
}

void SSpaceAirVehicleList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSpaceAirVehicleList_businessObject_2eproto.base);
}

SSpaceAirVehicleList::~SSpaceAirVehicleList() {
  // @@protoc_insertion_point(destructor:space.SSpaceAirVehicleList)
  SharedDtor();
}

void SSpaceAirVehicleList::SharedDtor() {
}

void SSpaceAirVehicleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceAirVehicleList& SSpaceAirVehicleList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceAirVehicleList_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SSpaceAirVehicleList::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SSpaceAirVehicleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SSpaceAirVehicleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .space.BSpaceAirVehicle list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceAirVehicleList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SSpaceAirVehicleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .space.BSpaceAirVehicle list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SSpaceAirVehicleList)
  return target;
}

size_t SSpaceAirVehicleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SSpaceAirVehicleList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .space.BSpaceAirVehicle list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceAirVehicleList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SSpaceAirVehicleList)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceAirVehicleList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceAirVehicleList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SSpaceAirVehicleList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SSpaceAirVehicleList)
    MergeFrom(*source);
  }
}

void SSpaceAirVehicleList::MergeFrom(const SSpaceAirVehicleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SSpaceAirVehicleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SSpaceAirVehicleList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SSpaceAirVehicleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceAirVehicleList::CopyFrom(const SSpaceAirVehicleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SSpaceAirVehicleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceAirVehicleList::IsInitialized() const {
  return true;
}

void SSpaceAirVehicleList::InternalSwap(SSpaceAirVehicleList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceAirVehicleList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSpaceAirVehicleTake::InitAsDefaultInstance() {
}
class CSpaceAirVehicleTake::_Internal {
 public:
};

CSpaceAirVehicleTake::CSpaceAirVehicleTake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.CSpaceAirVehicleTake)
}
CSpaceAirVehicleTake::CSpaceAirVehicleTake(const CSpaceAirVehicleTake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&takeposition_) -
    reinterpret_cast<char*>(&id_)) + sizeof(takeposition_));
  // @@protoc_insertion_point(copy_constructor:space.CSpaceAirVehicleTake)
}

void CSpaceAirVehicleTake::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&takeposition_) -
      reinterpret_cast<char*>(&id_)) + sizeof(takeposition_));
}

CSpaceAirVehicleTake::~CSpaceAirVehicleTake() {
  // @@protoc_insertion_point(destructor:space.CSpaceAirVehicleTake)
  SharedDtor();
}

void CSpaceAirVehicleTake::SharedDtor() {
}

void CSpaceAirVehicleTake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSpaceAirVehicleTake& CSpaceAirVehicleTake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSpaceAirVehicleTake_businessObject_2eproto.base);
  return *internal_default_instance();
}


void CSpaceAirVehicleTake::Clear() {
// @@protoc_insertion_point(message_clear_start:space.CSpaceAirVehicleTake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&takeposition_) -
      reinterpret_cast<char*>(&id_)) + sizeof(takeposition_));
  _internal_metadata_.Clear();
}

const char* CSpaceAirVehicleTake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 takeAction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          takeaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 takePosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          takeposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSpaceAirVehicleTake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.CSpaceAirVehicleTake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 takeAction = 2;
  if (this->takeaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_takeaction(), target);
  }

  // int32 takePosition = 3;
  if (this->takeposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_takeposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.CSpaceAirVehicleTake)
  return target;
}

size_t CSpaceAirVehicleTake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.CSpaceAirVehicleTake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 takeAction = 2;
  if (this->takeaction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_takeaction());
  }

  // int32 takePosition = 3;
  if (this->takeposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_takeposition());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSpaceAirVehicleTake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.CSpaceAirVehicleTake)
  GOOGLE_DCHECK_NE(&from, this);
  const CSpaceAirVehicleTake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSpaceAirVehicleTake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.CSpaceAirVehicleTake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.CSpaceAirVehicleTake)
    MergeFrom(*source);
  }
}

void CSpaceAirVehicleTake::MergeFrom(const CSpaceAirVehicleTake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.CSpaceAirVehicleTake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.takeaction() != 0) {
    _internal_set_takeaction(from._internal_takeaction());
  }
  if (from.takeposition() != 0) {
    _internal_set_takeposition(from._internal_takeposition());
  }
}

void CSpaceAirVehicleTake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.CSpaceAirVehicleTake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSpaceAirVehicleTake::CopyFrom(const CSpaceAirVehicleTake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.CSpaceAirVehicleTake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSpaceAirVehicleTake::IsInitialized() const {
  return true;
}

void CSpaceAirVehicleTake::InternalSwap(CSpaceAirVehicleTake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(takeaction_, other->takeaction_);
  swap(takeposition_, other->takeposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSpaceAirVehicleTake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceAirVehicleTake::InitAsDefaultInstance() {
}
class SSpaceAirVehicleTake::_Internal {
 public:
};

SSpaceAirVehicleTake::SSpaceAirVehicleTake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SSpaceAirVehicleTake)
}
SSpaceAirVehicleTake::SSpaceAirVehicleTake(const SSpaceAirVehicleTake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&takeaction_) -
    reinterpret_cast<char*>(&state_)) + sizeof(takeaction_));
  // @@protoc_insertion_point(copy_constructor:space.SSpaceAirVehicleTake)
}

void SSpaceAirVehicleTake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSpaceAirVehicleTake_businessObject_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&takeaction_) -
      reinterpret_cast<char*>(&state_)) + sizeof(takeaction_));
}

SSpaceAirVehicleTake::~SSpaceAirVehicleTake() {
  // @@protoc_insertion_point(destructor:space.SSpaceAirVehicleTake)
  SharedDtor();
}

void SSpaceAirVehicleTake::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSpaceAirVehicleTake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceAirVehicleTake& SSpaceAirVehicleTake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceAirVehicleTake_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SSpaceAirVehicleTake::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SSpaceAirVehicleTake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&takeaction_) -
      reinterpret_cast<char*>(&state_)) + sizeof(takeaction_));
  _internal_metadata_.Clear();
}

const char* SSpaceAirVehicleTake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "space.SSpaceAirVehicleTake.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 takeUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          takeuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 takePosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          takeposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 takeAction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          takeaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceAirVehicleTake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SSpaceAirVehicleTake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "space.SSpaceAirVehicleTake.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // int32 takeUid = 4;
  if (this->takeuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_takeuid(), target);
  }

  // int32 takePosition = 5;
  if (this->takeposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_takeposition(), target);
  }

  // int32 takeAction = 6;
  if (this->takeaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_takeaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SSpaceAirVehicleTake)
  return target;
}

size_t SSpaceAirVehicleTake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SSpaceAirVehicleTake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 takeUid = 4;
  if (this->takeuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_takeuid());
  }

  // int32 takePosition = 5;
  if (this->takeposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_takeposition());
  }

  // int32 takeAction = 6;
  if (this->takeaction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_takeaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceAirVehicleTake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SSpaceAirVehicleTake)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceAirVehicleTake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceAirVehicleTake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SSpaceAirVehicleTake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SSpaceAirVehicleTake)
    MergeFrom(*source);
  }
}

void SSpaceAirVehicleTake::MergeFrom(const SSpaceAirVehicleTake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SSpaceAirVehicleTake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.takeuid() != 0) {
    _internal_set_takeuid(from._internal_takeuid());
  }
  if (from.takeposition() != 0) {
    _internal_set_takeposition(from._internal_takeposition());
  }
  if (from.takeaction() != 0) {
    _internal_set_takeaction(from._internal_takeaction());
  }
}

void SSpaceAirVehicleTake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SSpaceAirVehicleTake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceAirVehicleTake::CopyFrom(const SSpaceAirVehicleTake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SSpaceAirVehicleTake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceAirVehicleTake::IsInitialized() const {
  return true;
}

void SSpaceAirVehicleTake::InternalSwap(SSpaceAirVehicleTake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(id_, other->id_);
  swap(takeuid_, other->takeuid_);
  swap(takeposition_, other->takeposition_);
  swap(takeaction_, other->takeaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceAirVehicleTake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceAirVehicleDisappear::InitAsDefaultInstance() {
}
class SSpaceAirVehicleDisappear::_Internal {
 public:
};

SSpaceAirVehicleDisappear::SSpaceAirVehicleDisappear()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SSpaceAirVehicleDisappear)
}
SSpaceAirVehicleDisappear::SSpaceAirVehicleDisappear(const SSpaceAirVehicleDisappear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&id_)) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:space.SSpaceAirVehicleDisappear)
}

void SSpaceAirVehicleDisappear::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_) -
      reinterpret_cast<char*>(&id_)) + sizeof(second_));
}

SSpaceAirVehicleDisappear::~SSpaceAirVehicleDisappear() {
  // @@protoc_insertion_point(destructor:space.SSpaceAirVehicleDisappear)
  SharedDtor();
}

void SSpaceAirVehicleDisappear::SharedDtor() {
}

void SSpaceAirVehicleDisappear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceAirVehicleDisappear& SSpaceAirVehicleDisappear::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceAirVehicleDisappear_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SSpaceAirVehicleDisappear::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SSpaceAirVehicleDisappear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_) -
      reinterpret_cast<char*>(&id_)) + sizeof(second_));
  _internal_metadata_.Clear();
}

const char* SSpaceAirVehicleDisappear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceAirVehicleDisappear::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SSpaceAirVehicleDisappear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 second = 2;
  if (this->second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SSpaceAirVehicleDisappear)
  return target;
}

size_t SSpaceAirVehicleDisappear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SSpaceAirVehicleDisappear)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 second = 2;
  if (this->second() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_second());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceAirVehicleDisappear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SSpaceAirVehicleDisappear)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceAirVehicleDisappear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceAirVehicleDisappear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SSpaceAirVehicleDisappear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SSpaceAirVehicleDisappear)
    MergeFrom(*source);
  }
}

void SSpaceAirVehicleDisappear::MergeFrom(const SSpaceAirVehicleDisappear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SSpaceAirVehicleDisappear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.second() != 0) {
    _internal_set_second(from._internal_second());
  }
}

void SSpaceAirVehicleDisappear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SSpaceAirVehicleDisappear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceAirVehicleDisappear::CopyFrom(const SSpaceAirVehicleDisappear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SSpaceAirVehicleDisappear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceAirVehicleDisappear::IsInitialized() const {
  return true;
}

void SSpaceAirVehicleDisappear::InternalSwap(SSpaceAirVehicleDisappear* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(second_, other->second_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceAirVehicleDisappear::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceAirVehicle::InitAsDefaultInstance() {
}
class SSpaceAirVehicle::_Internal {
 public:
};

SSpaceAirVehicle::SSpaceAirVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:space.SSpaceAirVehicle)
}
SSpaceAirVehicle::SSpaceAirVehicle(const SSpaceAirVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&passenger_) -
    reinterpret_cast<char*>(&id_)) + sizeof(passenger_));
  // @@protoc_insertion_point(copy_constructor:space.SSpaceAirVehicle)
}

void SSpaceAirVehicle::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_) -
      reinterpret_cast<char*>(&id_)) + sizeof(passenger_));
}

SSpaceAirVehicle::~SSpaceAirVehicle() {
  // @@protoc_insertion_point(destructor:space.SSpaceAirVehicle)
  SharedDtor();
}

void SSpaceAirVehicle::SharedDtor() {
}

void SSpaceAirVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceAirVehicle& SSpaceAirVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceAirVehicle_businessObject_2eproto.base);
  return *internal_default_instance();
}


void SSpaceAirVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:space.SSpaceAirVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_) -
      reinterpret_cast<char*>(&id_)) + sizeof(passenger_));
  _internal_metadata_.Clear();
}

const char* SSpaceAirVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passenger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          passenger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceAirVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:space.SSpaceAirVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_owner(), target);
  }

  // int32 driver = 3;
  if (this->driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_driver(), target);
  }

  // int32 passenger = 4;
  if (this->passenger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_passenger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:space.SSpaceAirVehicle)
  return target;
}

size_t SSpaceAirVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:space.SSpaceAirVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner());
  }

  // int32 driver = 3;
  if (this->driver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_driver());
  }

  // int32 passenger = 4;
  if (this->passenger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_passenger());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceAirVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:space.SSpaceAirVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceAirVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceAirVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:space.SSpaceAirVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:space.SSpaceAirVehicle)
    MergeFrom(*source);
  }
}

void SSpaceAirVehicle::MergeFrom(const SSpaceAirVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:space.SSpaceAirVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from.passenger() != 0) {
    _internal_set_passenger(from._internal_passenger());
  }
}

void SSpaceAirVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:space.SSpaceAirVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceAirVehicle::CopyFrom(const SSpaceAirVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:space.SSpaceAirVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceAirVehicle::IsInitialized() const {
  return true;
}

void SSpaceAirVehicle::InternalSwap(SSpaceAirVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(owner_, other->owner_);
  swap(driver_, other->driver_);
  swap(passenger_, other->passenger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceAirVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace space
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::space::CBusinessObjectList* Arena::CreateMaybeMessage< ::space::CBusinessObjectList >(Arena* arena) {
  return Arena::CreateInternal< ::space::CBusinessObjectList >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SBusinessObjectList* Arena::CreateMaybeMessage< ::space::SBusinessObjectList >(Arena* arena) {
  return Arena::CreateInternal< ::space::SBusinessObjectList >(arena);
}
template<> PROTOBUF_NOINLINE ::space::BObject* Arena::CreateMaybeMessage< ::space::BObject >(Arena* arena) {
  return Arena::CreateInternal< ::space::BObject >(arena);
}
template<> PROTOBUF_NOINLINE ::space::CTriggerBo* Arena::CreateMaybeMessage< ::space::CTriggerBo >(Arena* arena) {
  return Arena::CreateInternal< ::space::CTriggerBo >(arena);
}
template<> PROTOBUF_NOINLINE ::space::STriggerBo* Arena::CreateMaybeMessage< ::space::STriggerBo >(Arena* arena) {
  return Arena::CreateInternal< ::space::STriggerBo >(arena);
}
template<> PROTOBUF_NOINLINE ::space::STriggerBoBroad* Arena::CreateMaybeMessage< ::space::STriggerBoBroad >(Arena* arena) {
  return Arena::CreateInternal< ::space::STriggerBoBroad >(arena);
}
template<> PROTOBUF_NOINLINE ::space::CPutGoods* Arena::CreateMaybeMessage< ::space::CPutGoods >(Arena* arena) {
  return Arena::CreateInternal< ::space::CPutGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SPutGoods* Arena::CreateMaybeMessage< ::space::SPutGoods >(Arena* arena) {
  return Arena::CreateInternal< ::space::SPutGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SPutGoodsList* Arena::CreateMaybeMessage< ::space::SPutGoodsList >(Arena* arena) {
  return Arena::CreateInternal< ::space::SPutGoodsList >(arena);
}
template<> PROTOBUF_NOINLINE ::space::CPickGoods* Arena::CreateMaybeMessage< ::space::CPickGoods >(Arena* arena) {
  return Arena::CreateInternal< ::space::CPickGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SPickGoods* Arena::CreateMaybeMessage< ::space::SPickGoods >(Arena* arena) {
  return Arena::CreateInternal< ::space::SPickGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::space::BSpaceGoods* Arena::CreateMaybeMessage< ::space::BSpaceGoods >(Arena* arena) {
  return Arena::CreateInternal< ::space::BSpaceGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SSpaceGoodsList* Arena::CreateMaybeMessage< ::space::SSpaceGoodsList >(Arena* arena) {
  return Arena::CreateInternal< ::space::SSpaceGoodsList >(arena);
}
template<> PROTOBUF_NOINLINE ::space::CPickSpaceGoods* Arena::CreateMaybeMessage< ::space::CPickSpaceGoods >(Arena* arena) {
  return Arena::CreateInternal< ::space::CPickSpaceGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SPickSpaceGoods* Arena::CreateMaybeMessage< ::space::SPickSpaceGoods >(Arena* arena) {
  return Arena::CreateInternal< ::space::SPickSpaceGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::space::BSpaceAirVehicle* Arena::CreateMaybeMessage< ::space::BSpaceAirVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::space::BSpaceAirVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SSpaceAirVehicleList* Arena::CreateMaybeMessage< ::space::SSpaceAirVehicleList >(Arena* arena) {
  return Arena::CreateInternal< ::space::SSpaceAirVehicleList >(arena);
}
template<> PROTOBUF_NOINLINE ::space::CSpaceAirVehicleTake* Arena::CreateMaybeMessage< ::space::CSpaceAirVehicleTake >(Arena* arena) {
  return Arena::CreateInternal< ::space::CSpaceAirVehicleTake >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SSpaceAirVehicleTake* Arena::CreateMaybeMessage< ::space::SSpaceAirVehicleTake >(Arena* arena) {
  return Arena::CreateInternal< ::space::SSpaceAirVehicleTake >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SSpaceAirVehicleDisappear* Arena::CreateMaybeMessage< ::space::SSpaceAirVehicleDisappear >(Arena* arena) {
  return Arena::CreateInternal< ::space::SSpaceAirVehicleDisappear >(arena);
}
template<> PROTOBUF_NOINLINE ::space::SSpaceAirVehicle* Arena::CreateMaybeMessage< ::space::SSpaceAirVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::space::SSpaceAirVehicle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
