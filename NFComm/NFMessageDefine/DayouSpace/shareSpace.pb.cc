// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shareSpace.proto

#include "shareSpace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVector3_vector_2eproto;
namespace shareSpace {
class CShareSpaceCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CShareSpaceCreate> _instance;
} _CShareSpaceCreate_default_instance_;
class SShareSpaceCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SShareSpaceCreate> _instance;
} _SShareSpaceCreate_default_instance_;
class CShareCodeParseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CShareCodeParse> _instance;
} _CShareCodeParse_default_instance_;
class SShareCodeParseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SShareCodeParse> _instance;
} _SShareCodeParse_default_instance_;
}  // namespace shareSpace
static void InitDefaultsscc_info_CShareCodeParse_shareSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shareSpace::_CShareCodeParse_default_instance_;
    new (ptr) ::shareSpace::CShareCodeParse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shareSpace::CShareCodeParse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CShareCodeParse_shareSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CShareCodeParse_shareSpace_2eproto}, {}};

static void InitDefaultsscc_info_CShareSpaceCreate_shareSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shareSpace::_CShareSpaceCreate_default_instance_;
    new (ptr) ::shareSpace::CShareSpaceCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shareSpace::CShareSpaceCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CShareSpaceCreate_shareSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CShareSpaceCreate_shareSpace_2eproto}, {}};

static void InitDefaultsscc_info_SShareCodeParse_shareSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shareSpace::_SShareCodeParse_default_instance_;
    new (ptr) ::shareSpace::SShareCodeParse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shareSpace::SShareCodeParse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SShareCodeParse_shareSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SShareCodeParse_shareSpace_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_SShareSpaceCreate_shareSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shareSpace::_SShareSpaceCreate_default_instance_;
    new (ptr) ::shareSpace::SShareSpaceCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shareSpace::SShareSpaceCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SShareSpaceCreate_shareSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SShareSpaceCreate_shareSpace_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shareSpace_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_shareSpace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shareSpace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_shareSpace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shareSpace::CShareSpaceCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shareSpace::CShareSpaceCreate, houseid_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::CShareSpaceCreate, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareSpaceCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareSpaceCreate, title_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareSpaceCreate, url_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareSpaceCreate, content_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareSpaceCreate, cover_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareSpaceCreate, wechatcontent_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareSpaceCreate, sharetime_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareSpaceCreate, visitcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shareSpace::CShareCodeParse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shareSpace::CShareCodeParse, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, uid_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, nick_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, headpic_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, housetype_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, houseid_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, housename_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, housecover_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, housepwd_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, content_),
  PROTOBUF_FIELD_OFFSET(::shareSpace::SShareCodeParse, houseposition_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::shareSpace::CShareSpaceCreate)},
  { 7, -1, sizeof(::shareSpace::SShareSpaceCreate)},
  { 19, -1, sizeof(::shareSpace::CShareCodeParse)},
  { 25, -1, sizeof(::shareSpace::SShareCodeParse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shareSpace::_CShareSpaceCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shareSpace::_SShareSpaceCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shareSpace::_CShareCodeParse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shareSpace::_SShareCodeParse_default_instance_),
};

const char descriptor_table_protodef_shareSpace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020shareSpace.proto\022\nshareSpace\032\014vector.p"
  "roto\"2\n\021CShareSpaceCreate\022\017\n\007houseId\030\001 \001"
  "(\005\022\014\n\004Type\030\002 \001(\005\"\215\001\n\021SShareSpaceCreate\022\r"
  "\n\005title\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\017\n\007content\030\003 "
  "\001(\t\022\r\n\005cover\030\004 \001(\t\022\025\n\rwechatContent\030\005 \001("
  "\t\022\021\n\tshareTime\030\006 \001(\t\022\022\n\nvisitCount\030\007 \001(\005"
  "\"\037\n\017CShareCodeParse\022\014\n\004code\030\001 \001(\t\"\324\001\n\017SS"
  "hareCodeParse\022\013\n\003uid\030\001 \001(\005\022\014\n\004nick\030\002 \001(\t"
  "\022\017\n\007headPic\030\003 \001(\t\022\021\n\thouseType\030\004 \001(\005\022\017\n\007"
  "houseId\030\005 \001(\005\022\021\n\thouseName\030\006 \001(\t\022\022\n\nhous"
  "eCover\030\007 \001(\t\022\020\n\010housePwd\030\010 \001(\t\022\017\n\007conten"
  "t\030\t \001(\t\022\'\n\rhousePosition\030\n \001(\0132\020.vector."
  "PVector3B/\n\030com.dayou.space.protobufB\nSh"
  "areSpaceZ\007./pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_shareSpace_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_shareSpace_2eproto_sccs[4] = {
  &scc_info_CShareCodeParse_shareSpace_2eproto.base,
  &scc_info_CShareSpaceCreate_shareSpace_2eproto.base,
  &scc_info_SShareCodeParse_shareSpace_2eproto.base,
  &scc_info_SShareSpaceCreate_shareSpace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shareSpace_2eproto_once;
static bool descriptor_table_shareSpace_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shareSpace_2eproto = {
  &descriptor_table_shareSpace_2eproto_initialized, descriptor_table_protodef_shareSpace_2eproto, "shareSpace.proto", 545,
  &descriptor_table_shareSpace_2eproto_once, descriptor_table_shareSpace_2eproto_sccs, descriptor_table_shareSpace_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_shareSpace_2eproto::offsets,
  file_level_metadata_shareSpace_2eproto, 4, file_level_enum_descriptors_shareSpace_2eproto, file_level_service_descriptors_shareSpace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_shareSpace_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_shareSpace_2eproto), true);
namespace shareSpace {

// ===================================================================

void CShareSpaceCreate::InitAsDefaultInstance() {
}
class CShareSpaceCreate::_Internal {
 public:
};

CShareSpaceCreate::CShareSpaceCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareSpace.CShareSpaceCreate)
}
CShareSpaceCreate::CShareSpaceCreate(const CShareSpaceCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:shareSpace.CShareSpaceCreate)
}

void CShareSpaceCreate::SharedCtor() {
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
}

CShareSpaceCreate::~CShareSpaceCreate() {
  // @@protoc_insertion_point(destructor:shareSpace.CShareSpaceCreate)
  SharedDtor();
}

void CShareSpaceCreate::SharedDtor() {
}

void CShareSpaceCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CShareSpaceCreate& CShareSpaceCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CShareSpaceCreate_shareSpace_2eproto.base);
  return *internal_default_instance();
}


void CShareSpaceCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:shareSpace.CShareSpaceCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* CShareSpaceCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CShareSpaceCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareSpace.CShareSpaceCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shareSpace.CShareSpaceCreate)
  return target;
}

size_t CShareSpaceCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shareSpace.CShareSpaceCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CShareSpaceCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareSpace.CShareSpaceCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CShareSpaceCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CShareSpaceCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareSpace.CShareSpaceCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareSpace.CShareSpaceCreate)
    MergeFrom(*source);
  }
}

void CShareSpaceCreate::MergeFrom(const CShareSpaceCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareSpace.CShareSpaceCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CShareSpaceCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareSpace.CShareSpaceCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShareSpaceCreate::CopyFrom(const CShareSpaceCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareSpace.CShareSpaceCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShareSpaceCreate::IsInitialized() const {
  return true;
}

void CShareSpaceCreate::InternalSwap(CShareSpaceCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CShareSpaceCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SShareSpaceCreate::InitAsDefaultInstance() {
}
class SShareSpaceCreate::_Internal {
 public:
};

SShareSpaceCreate::SShareSpaceCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareSpace.SShareSpaceCreate)
}
SShareSpaceCreate::SShareSpaceCreate(const SShareSpaceCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  wechatcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wechatcontent().empty()) {
    wechatcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wechatcontent_);
  }
  sharetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sharetime().empty()) {
    sharetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sharetime_);
  }
  visitcount_ = from.visitcount_;
  // @@protoc_insertion_point(copy_constructor:shareSpace.SShareSpaceCreate)
}

void SShareSpaceCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SShareSpaceCreate_shareSpace_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wechatcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sharetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visitcount_ = 0;
}

SShareSpaceCreate::~SShareSpaceCreate() {
  // @@protoc_insertion_point(destructor:shareSpace.SShareSpaceCreate)
  SharedDtor();
}

void SShareSpaceCreate::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wechatcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sharetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SShareSpaceCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SShareSpaceCreate& SShareSpaceCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SShareSpaceCreate_shareSpace_2eproto.base);
  return *internal_default_instance();
}


void SShareSpaceCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:shareSpace.SShareSpaceCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wechatcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sharetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visitcount_ = 0;
  _internal_metadata_.Clear();
}

const char* SShareSpaceCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareSpaceCreate.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareSpaceCreate.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareSpaceCreate.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareSpaceCreate.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wechatContent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_wechatcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareSpaceCreate.wechatContent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shareTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sharetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareSpaceCreate.shareTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 visitCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          visitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SShareSpaceCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareSpace.SShareSpaceCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareSpaceCreate.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareSpaceCreate.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareSpaceCreate.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // string cover = 4;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareSpaceCreate.cover");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cover(), target);
  }

  // string wechatContent = 5;
  if (this->wechatcontent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wechatcontent().data(), static_cast<int>(this->_internal_wechatcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareSpaceCreate.wechatContent");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_wechatcontent(), target);
  }

  // string shareTime = 6;
  if (this->sharetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sharetime().data(), static_cast<int>(this->_internal_sharetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareSpaceCreate.shareTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sharetime(), target);
  }

  // int32 visitCount = 7;
  if (this->visitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_visitcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shareSpace.SShareSpaceCreate)
  return target;
}

size_t SShareSpaceCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shareSpace.SShareSpaceCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string cover = 4;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // string wechatContent = 5;
  if (this->wechatcontent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wechatcontent());
  }

  // string shareTime = 6;
  if (this->sharetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sharetime());
  }

  // int32 visitCount = 7;
  if (this->visitcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_visitcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SShareSpaceCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareSpace.SShareSpaceCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const SShareSpaceCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SShareSpaceCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareSpace.SShareSpaceCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareSpace.SShareSpaceCreate)
    MergeFrom(*source);
  }
}

void SShareSpaceCreate::MergeFrom(const SShareSpaceCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareSpace.SShareSpaceCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.wechatcontent().size() > 0) {

    wechatcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wechatcontent_);
  }
  if (from.sharetime().size() > 0) {

    sharetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sharetime_);
  }
  if (from.visitcount() != 0) {
    _internal_set_visitcount(from._internal_visitcount());
  }
}

void SShareSpaceCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareSpace.SShareSpaceCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SShareSpaceCreate::CopyFrom(const SShareSpaceCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareSpace.SShareSpaceCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SShareSpaceCreate::IsInitialized() const {
  return true;
}

void SShareSpaceCreate::InternalSwap(SShareSpaceCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wechatcontent_.Swap(&other->wechatcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sharetime_.Swap(&other->sharetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(visitcount_, other->visitcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SShareSpaceCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CShareCodeParse::InitAsDefaultInstance() {
}
class CShareCodeParse::_Internal {
 public:
};

CShareCodeParse::CShareCodeParse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareSpace.CShareCodeParse)
}
CShareCodeParse::CShareCodeParse(const CShareCodeParse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:shareSpace.CShareCodeParse)
}

void CShareCodeParse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CShareCodeParse_shareSpace_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CShareCodeParse::~CShareCodeParse() {
  // @@protoc_insertion_point(destructor:shareSpace.CShareCodeParse)
  SharedDtor();
}

void CShareCodeParse::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CShareCodeParse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CShareCodeParse& CShareCodeParse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CShareCodeParse_shareSpace_2eproto.base);
  return *internal_default_instance();
}


void CShareCodeParse::Clear() {
// @@protoc_insertion_point(message_clear_start:shareSpace.CShareCodeParse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CShareCodeParse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.CShareCodeParse.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CShareCodeParse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareSpace.CShareCodeParse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.CShareCodeParse.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shareSpace.CShareCodeParse)
  return target;
}

size_t CShareCodeParse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shareSpace.CShareCodeParse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CShareCodeParse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareSpace.CShareCodeParse)
  GOOGLE_DCHECK_NE(&from, this);
  const CShareCodeParse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CShareCodeParse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareSpace.CShareCodeParse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareSpace.CShareCodeParse)
    MergeFrom(*source);
  }
}

void CShareCodeParse::MergeFrom(const CShareCodeParse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareSpace.CShareCodeParse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void CShareCodeParse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareSpace.CShareCodeParse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShareCodeParse::CopyFrom(const CShareCodeParse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareSpace.CShareCodeParse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShareCodeParse::IsInitialized() const {
  return true;
}

void CShareCodeParse::InternalSwap(CShareCodeParse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CShareCodeParse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SShareCodeParse::InitAsDefaultInstance() {
  ::shareSpace::_SShareCodeParse_default_instance_._instance.get_mutable()->houseposition_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class SShareCodeParse::_Internal {
 public:
  static const ::vector::PVector3& houseposition(const SShareCodeParse* msg);
};

const ::vector::PVector3&
SShareCodeParse::_Internal::houseposition(const SShareCodeParse* msg) {
  return *msg->houseposition_;
}
void SShareCodeParse::clear_houseposition() {
  if (GetArenaNoVirtual() == nullptr && houseposition_ != nullptr) {
    delete houseposition_;
  }
  houseposition_ = nullptr;
}
SShareCodeParse::SShareCodeParse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareSpace.SShareCodeParse)
}
SShareCodeParse::SShareCodeParse(const SShareCodeParse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headpic().empty()) {
    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  housename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_housename().empty()) {
    housename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.housename_);
  }
  housecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_housecover().empty()) {
    housecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.housecover_);
  }
  housepwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_housepwd().empty()) {
    housepwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.housepwd_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_houseposition()) {
    houseposition_ = new ::vector::PVector3(*from.houseposition_);
  } else {
    houseposition_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&houseid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(houseid_));
  // @@protoc_insertion_point(copy_constructor:shareSpace.SShareCodeParse)
}

void SShareCodeParse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SShareCodeParse_shareSpace_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housecover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housepwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&houseposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&houseid_) -
      reinterpret_cast<char*>(&houseposition_)) + sizeof(houseid_));
}

SShareCodeParse::~SShareCodeParse() {
  // @@protoc_insertion_point(destructor:shareSpace.SShareCodeParse)
  SharedDtor();
}

void SShareCodeParse::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housecover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housepwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete houseposition_;
}

void SShareCodeParse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SShareCodeParse& SShareCodeParse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SShareCodeParse_shareSpace_2eproto.base);
  return *internal_default_instance();
}


void SShareCodeParse::Clear() {
// @@protoc_insertion_point(message_clear_start:shareSpace.SShareCodeParse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  housepwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && houseposition_ != nullptr) {
    delete houseposition_;
  }
  houseposition_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&houseid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(houseid_));
  _internal_metadata_.Clear();
}

const char* SShareCodeParse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareCodeParse.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headPic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_headpic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareCodeParse.headPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          housetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string houseName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_housename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareCodeParse.houseName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string houseCover = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_housecover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareCodeParse.houseCover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string housePwd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_housepwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareCodeParse.housePwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shareSpace.SShareCodeParse.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 housePosition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_houseposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SShareCodeParse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareSpace.SShareCodeParse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareCodeParse.nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick(), target);
  }

  // string headPic = 3;
  if (this->headpic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headpic().data(), static_cast<int>(this->_internal_headpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareCodeParse.headPic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_headpic(), target);
  }

  // int32 houseType = 4;
  if (this->housetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_housetype(), target);
  }

  // int32 houseId = 5;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_houseid(), target);
  }

  // string houseName = 6;
  if (this->housename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_housename().data(), static_cast<int>(this->_internal_housename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareCodeParse.houseName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_housename(), target);
  }

  // string houseCover = 7;
  if (this->housecover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_housecover().data(), static_cast<int>(this->_internal_housecover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareCodeParse.houseCover");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_housecover(), target);
  }

  // string housePwd = 8;
  if (this->housepwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_housepwd().data(), static_cast<int>(this->_internal_housepwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareCodeParse.housePwd");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_housepwd(), target);
  }

  // string content = 9;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shareSpace.SShareCodeParse.content");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_content(), target);
  }

  // .vector.PVector3 housePosition = 10;
  if (this->has_houseposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::houseposition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shareSpace.SShareCodeParse)
  return target;
}

size_t SShareCodeParse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shareSpace.SShareCodeParse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string headPic = 3;
  if (this->headpic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headpic());
  }

  // string houseName = 6;
  if (this->housename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_housename());
  }

  // string houseCover = 7;
  if (this->housecover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_housecover());
  }

  // string housePwd = 8;
  if (this->housepwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_housepwd());
  }

  // string content = 9;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .vector.PVector3 housePosition = 10;
  if (this->has_houseposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *houseposition_);
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 houseType = 4;
  if (this->housetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_housetype());
  }

  // int32 houseId = 5;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SShareCodeParse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareSpace.SShareCodeParse)
  GOOGLE_DCHECK_NE(&from, this);
  const SShareCodeParse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SShareCodeParse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareSpace.SShareCodeParse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareSpace.SShareCodeParse)
    MergeFrom(*source);
  }
}

void SShareCodeParse::MergeFrom(const SShareCodeParse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareSpace.SShareCodeParse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.headpic().size() > 0) {

    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  if (from.housename().size() > 0) {

    housename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.housename_);
  }
  if (from.housecover().size() > 0) {

    housecover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.housecover_);
  }
  if (from.housepwd().size() > 0) {

    housepwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.housepwd_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_houseposition()) {
    _internal_mutable_houseposition()->::vector::PVector3::MergeFrom(from._internal_houseposition());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.housetype() != 0) {
    _internal_set_housetype(from._internal_housetype());
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void SShareCodeParse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareSpace.SShareCodeParse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SShareCodeParse::CopyFrom(const SShareCodeParse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareSpace.SShareCodeParse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SShareCodeParse::IsInitialized() const {
  return true;
}

void SShareCodeParse::InternalSwap(SShareCodeParse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headpic_.Swap(&other->headpic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  housename_.Swap(&other->housename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  housecover_.Swap(&other->housecover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  housepwd_.Swap(&other->housepwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(houseposition_, other->houseposition_);
  swap(uid_, other->uid_);
  swap(housetype_, other->housetype_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SShareCodeParse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace shareSpace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::shareSpace::CShareSpaceCreate* Arena::CreateMaybeMessage< ::shareSpace::CShareSpaceCreate >(Arena* arena) {
  return Arena::CreateInternal< ::shareSpace::CShareSpaceCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::shareSpace::SShareSpaceCreate* Arena::CreateMaybeMessage< ::shareSpace::SShareSpaceCreate >(Arena* arena) {
  return Arena::CreateInternal< ::shareSpace::SShareSpaceCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::shareSpace::CShareCodeParse* Arena::CreateMaybeMessage< ::shareSpace::CShareCodeParse >(Arena* arena) {
  return Arena::CreateInternal< ::shareSpace::CShareCodeParse >(arena);
}
template<> PROTOBUF_NOINLINE ::shareSpace::SShareCodeParse* Arena::CreateMaybeMessage< ::shareSpace::SShareCodeParse >(Arena* arena) {
  return Arena::CreateInternal< ::shareSpace::SShareCodeParse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
