// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rewardForTask.proto

#include "rewardForTask.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rewardForTask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskInfo_rewardForTask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_treasureBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TreasureBoxRewardContent_treasureBox_2eproto;
namespace rewardForTask {
class CTaskListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTaskList> _instance;
} _CTaskList_default_instance_;
class STaskListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STaskList> _instance;
} _STaskList_default_instance_;
class CClaimTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CClaimTask> _instance;
} _CClaimTask_default_instance_;
class SClaimTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SClaimTask> _instance;
} _SClaimTask_default_instance_;
class CCompleteTaskReportingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCompleteTaskReporting> _instance;
} _CCompleteTaskReporting_default_instance_;
class SCompleteTaskReportingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCompleteTaskReporting> _instance;
} _SCompleteTaskReporting_default_instance_;
class CClaimRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CClaimReward> _instance;
} _CClaimReward_default_instance_;
class SClaimRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SClaimReward> _instance;
} _SClaimReward_default_instance_;
class CRefreshDailyTasksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRefreshDailyTasks> _instance;
} _CRefreshDailyTasks_default_instance_;
class SRefreshDailyTasksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRefreshDailyTasks> _instance;
} _SRefreshDailyTasks_default_instance_;
class TaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskInfo> _instance;
} _TaskInfo_default_instance_;
}  // namespace rewardForTask
static void InitDefaultsscc_info_CClaimReward_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_CClaimReward_default_instance_;
    new (ptr) ::rewardForTask::CClaimReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::CClaimReward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CClaimReward_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CClaimReward_rewardForTask_2eproto}, {}};

static void InitDefaultsscc_info_CClaimTask_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_CClaimTask_default_instance_;
    new (ptr) ::rewardForTask::CClaimTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::CClaimTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CClaimTask_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CClaimTask_rewardForTask_2eproto}, {}};

static void InitDefaultsscc_info_CCompleteTaskReporting_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_CCompleteTaskReporting_default_instance_;
    new (ptr) ::rewardForTask::CCompleteTaskReporting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::CCompleteTaskReporting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCompleteTaskReporting_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCompleteTaskReporting_rewardForTask_2eproto}, {}};

static void InitDefaultsscc_info_CRefreshDailyTasks_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_CRefreshDailyTasks_default_instance_;
    new (ptr) ::rewardForTask::CRefreshDailyTasks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::CRefreshDailyTasks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRefreshDailyTasks_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRefreshDailyTasks_rewardForTask_2eproto}, {}};

static void InitDefaultsscc_info_CTaskList_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_CTaskList_default_instance_;
    new (ptr) ::rewardForTask::CTaskList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::CTaskList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTaskList_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CTaskList_rewardForTask_2eproto}, {}};

static void InitDefaultsscc_info_SClaimReward_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_SClaimReward_default_instance_;
    new (ptr) ::rewardForTask::SClaimReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::SClaimReward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SClaimReward_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SClaimReward_rewardForTask_2eproto}, {
      &scc_info_TreasureBoxRewardContent_treasureBox_2eproto.base,}};

static void InitDefaultsscc_info_SClaimTask_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_SClaimTask_default_instance_;
    new (ptr) ::rewardForTask::SClaimTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::SClaimTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SClaimTask_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SClaimTask_rewardForTask_2eproto}, {}};

static void InitDefaultsscc_info_SCompleteTaskReporting_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_SCompleteTaskReporting_default_instance_;
    new (ptr) ::rewardForTask::SCompleteTaskReporting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::SCompleteTaskReporting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCompleteTaskReporting_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCompleteTaskReporting_rewardForTask_2eproto}, {}};

static void InitDefaultsscc_info_SRefreshDailyTasks_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_SRefreshDailyTasks_default_instance_;
    new (ptr) ::rewardForTask::SRefreshDailyTasks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::SRefreshDailyTasks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRefreshDailyTasks_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRefreshDailyTasks_rewardForTask_2eproto}, {
      &scc_info_TaskInfo_rewardForTask_2eproto.base,}};

static void InitDefaultsscc_info_STaskList_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_STaskList_default_instance_;
    new (ptr) ::rewardForTask::STaskList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::STaskList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_STaskList_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_STaskList_rewardForTask_2eproto}, {
      &scc_info_TaskInfo_rewardForTask_2eproto.base,}};

static void InitDefaultsscc_info_TaskInfo_rewardForTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rewardForTask::_TaskInfo_default_instance_;
    new (ptr) ::rewardForTask::TaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rewardForTask::TaskInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskInfo_rewardForTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskInfo_rewardForTask_2eproto}, {
      &scc_info_TreasureBoxRewardContent_treasureBox_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rewardForTask_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rewardForTask_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rewardForTask_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rewardForTask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CTaskList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CTaskList, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::STaskList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::STaskList, taskdesklist_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::STaskList, taskcenterlist_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::STaskList, state_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::STaskList, msg_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::STaskList, refreshprice_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::STaskList, key_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::STaskList, todaymaxyuanli_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::STaskList, todayyuanli_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CClaimTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CClaimTask, taskid_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CClaimTask, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimTask, state_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimTask, msg_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimTask, taskid_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimTask, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CCompleteTaskReporting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CCompleteTaskReporting, taskid_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CCompleteTaskReporting, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SCompleteTaskReporting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SCompleteTaskReporting, state_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SCompleteTaskReporting, msg_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SCompleteTaskReporting, taskid_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SCompleteTaskReporting, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CClaimReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CClaimReward, taskid_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CClaimReward, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimReward, list_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimReward, state_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimReward, msg_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimReward, taskid_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SClaimReward, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::CRefreshDailyTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SRefreshDailyTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SRefreshDailyTasks, list_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SRefreshDailyTasks, state_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SRefreshDailyTasks, msg_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::SRefreshDailyTasks, refreshprice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::TaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rewardForTask::TaskInfo, taskid_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::TaskInfo, list_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::TaskInfo, taskname_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::TaskInfo, taskkey_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::TaskInfo, taskdesc_),
  PROTOBUF_FIELD_OFFSET(::rewardForTask::TaskInfo, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rewardForTask::CTaskList)},
  { 6, -1, sizeof(::rewardForTask::STaskList)},
  { 19, -1, sizeof(::rewardForTask::CClaimTask)},
  { 26, -1, sizeof(::rewardForTask::SClaimTask)},
  { 35, -1, sizeof(::rewardForTask::CCompleteTaskReporting)},
  { 42, -1, sizeof(::rewardForTask::SCompleteTaskReporting)},
  { 51, -1, sizeof(::rewardForTask::CClaimReward)},
  { 58, -1, sizeof(::rewardForTask::SClaimReward)},
  { 68, -1, sizeof(::rewardForTask::CRefreshDailyTasks)},
  { 73, -1, sizeof(::rewardForTask::SRefreshDailyTasks)},
  { 82, -1, sizeof(::rewardForTask::TaskInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_CTaskList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_STaskList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_CClaimTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_SClaimTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_CCompleteTaskReporting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_SCompleteTaskReporting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_CClaimReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_SClaimReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_CRefreshDailyTasks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_SRefreshDailyTasks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rewardForTask::_TaskInfo_default_instance_),
};

const char descriptor_table_protodef_rewardForTask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023rewardForTask.proto\022\rrewardForTask\032\021tr"
  "easureBox.proto\"\030\n\tCTaskList\022\013\n\003key\030\001 \001("
  "\t\"\327\001\n\tSTaskList\022-\n\014taskDeskList\030\001 \003(\0132\027."
  "rewardForTask.TaskInfo\022/\n\016taskCenterList"
  "\030\002 \003(\0132\027.rewardForTask.TaskInfo\022\r\n\005state"
  "\030\003 \001(\005\022\013\n\003msg\030\004 \001(\t\022\024\n\014refreshPrice\030\005 \001("
  "\005\022\013\n\003key\030\006 \001(\t\022\026\n\016todayMaxYuanli\030\007 \001(\005\022\023"
  "\n\013todayYuanli\030\010 \001(\005\")\n\nCClaimTask\022\016\n\006tas"
  "kId\030\001 \001(\005\022\013\n\003key\030\002 \001(\t\"E\n\nSClaimTask\022\r\n\005"
  "state\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\016\n\006taskId\030\003 \001(\005"
  "\022\013\n\003key\030\004 \001(\t\"5\n\026CCompleteTaskReporting\022"
  "\016\n\006taskId\030\001 \001(\005\022\013\n\003key\030\002 \001(\t\"Q\n\026SComplet"
  "eTaskReporting\022\r\n\005state\030\001 \001(\005\022\013\n\003msg\030\002 \001"
  "(\t\022\016\n\006taskId\030\003 \001(\005\022\013\n\003key\030\004 \001(\t\"+\n\014CClai"
  "mReward\022\016\n\006taskId\030\001 \001(\005\022\013\n\003key\030\002 \001(\t\"|\n\014"
  "SClaimReward\0223\n\004list\030\001 \003(\0132%.treasureBox"
  ".TreasureBoxRewardContent\022\r\n\005state\030\002 \001(\005"
  "\022\013\n\003msg\030\003 \001(\t\022\016\n\006taskId\030\004 \001(\005\022\013\n\003key\030\005 \001"
  "(\t\"\024\n\022CRefreshDailyTasks\"m\n\022SRefreshDail"
  "yTasks\022%\n\004list\030\001 \003(\0132\027.rewardForTask.Tas"
  "kInfo\022\r\n\005state\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\022\024\n\014ref"
  "reshPrice\030\004 \001(\005\"\224\001\n\010TaskInfo\022\016\n\006taskId\030\001"
  " \001(\005\0223\n\004list\030\002 \003(\0132%.treasureBox.Treasur"
  "eBoxRewardContent\022\020\n\010taskName\030\003 \001(\t\022\017\n\007t"
  "askKey\030\004 \001(\t\022\020\n\010taskDesc\030\005 \001(\t\022\016\n\006status"
  "\030\006 \001(\005B-\n\030com.dayou.space.protobufB\rRewa"
  "rdForTaskZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rewardForTask_2eproto_deps[1] = {
  &::descriptor_table_treasureBox_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rewardForTask_2eproto_sccs[11] = {
  &scc_info_CClaimReward_rewardForTask_2eproto.base,
  &scc_info_CClaimTask_rewardForTask_2eproto.base,
  &scc_info_CCompleteTaskReporting_rewardForTask_2eproto.base,
  &scc_info_CRefreshDailyTasks_rewardForTask_2eproto.base,
  &scc_info_CTaskList_rewardForTask_2eproto.base,
  &scc_info_SClaimReward_rewardForTask_2eproto.base,
  &scc_info_SClaimTask_rewardForTask_2eproto.base,
  &scc_info_SCompleteTaskReporting_rewardForTask_2eproto.base,
  &scc_info_SRefreshDailyTasks_rewardForTask_2eproto.base,
  &scc_info_STaskList_rewardForTask_2eproto.base,
  &scc_info_TaskInfo_rewardForTask_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rewardForTask_2eproto_once;
static bool descriptor_table_rewardForTask_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rewardForTask_2eproto = {
  &descriptor_table_rewardForTask_2eproto_initialized, descriptor_table_protodef_rewardForTask_2eproto, "rewardForTask.proto", 1061,
  &descriptor_table_rewardForTask_2eproto_once, descriptor_table_rewardForTask_2eproto_sccs, descriptor_table_rewardForTask_2eproto_deps, 11, 1,
  schemas, file_default_instances, TableStruct_rewardForTask_2eproto::offsets,
  file_level_metadata_rewardForTask_2eproto, 11, file_level_enum_descriptors_rewardForTask_2eproto, file_level_service_descriptors_rewardForTask_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rewardForTask_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rewardForTask_2eproto), true);
namespace rewardForTask {

// ===================================================================

void CTaskList::InitAsDefaultInstance() {
}
class CTaskList::_Internal {
 public:
};

CTaskList::CTaskList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.CTaskList)
}
CTaskList::CTaskList(const CTaskList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:rewardForTask.CTaskList)
}

void CTaskList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CTaskList_rewardForTask_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CTaskList::~CTaskList() {
  // @@protoc_insertion_point(destructor:rewardForTask.CTaskList)
  SharedDtor();
}

void CTaskList::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTaskList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTaskList& CTaskList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTaskList_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void CTaskList::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.CTaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CTaskList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.CTaskList.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTaskList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.CTaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.CTaskList.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.CTaskList)
  return target;
}

size_t CTaskList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.CTaskList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTaskList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.CTaskList)
  GOOGLE_DCHECK_NE(&from, this);
  const CTaskList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTaskList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.CTaskList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.CTaskList)
    MergeFrom(*source);
  }
}

void CTaskList::MergeFrom(const CTaskList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.CTaskList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void CTaskList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.CTaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTaskList::CopyFrom(const CTaskList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.CTaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTaskList::IsInitialized() const {
  return true;
}

void CTaskList::InternalSwap(CTaskList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CTaskList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STaskList::InitAsDefaultInstance() {
}
class STaskList::_Internal {
 public:
};

STaskList::STaskList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.STaskList)
}
STaskList::STaskList(const STaskList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      taskdesklist_(from.taskdesklist_),
      taskcenterlist_(from.taskcenterlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&todayyuanli_) -
    reinterpret_cast<char*>(&state_)) + sizeof(todayyuanli_));
  // @@protoc_insertion_point(copy_constructor:rewardForTask.STaskList)
}

void STaskList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_STaskList_rewardForTask_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&todayyuanli_) -
      reinterpret_cast<char*>(&state_)) + sizeof(todayyuanli_));
}

STaskList::~STaskList() {
  // @@protoc_insertion_point(destructor:rewardForTask.STaskList)
  SharedDtor();
}

void STaskList::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void STaskList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STaskList& STaskList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STaskList_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void STaskList::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.STaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskdesklist_.Clear();
  taskcenterlist_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&todayyuanli_) -
      reinterpret_cast<char*>(&state_)) + sizeof(todayyuanli_));
  _internal_metadata_.Clear();
}

const char* STaskList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rewardForTask.TaskInfo taskDeskList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taskdesklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .rewardForTask.TaskInfo taskCenterList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taskcenterlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.STaskList.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 refreshPrice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refreshprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.STaskList.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 todayMaxYuanli = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          todaymaxyuanli_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 todayYuanli = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          todayyuanli_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STaskList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.STaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rewardForTask.TaskInfo taskDeskList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taskdesklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_taskdesklist(i), target, stream);
  }

  // repeated .rewardForTask.TaskInfo taskCenterList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taskcenterlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_taskcenterlist(i), target, stream);
  }

  // int32 state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.STaskList.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  // int32 refreshPrice = 5;
  if (this->refreshprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_refreshprice(), target);
  }

  // string key = 6;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.STaskList.key");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_key(), target);
  }

  // int32 todayMaxYuanli = 7;
  if (this->todaymaxyuanli() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_todaymaxyuanli(), target);
  }

  // int32 todayYuanli = 8;
  if (this->todayyuanli() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_todayyuanli(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.STaskList)
  return target;
}

size_t STaskList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.STaskList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rewardForTask.TaskInfo taskDeskList = 1;
  total_size += 1UL * this->_internal_taskdesklist_size();
  for (const auto& msg : this->taskdesklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rewardForTask.TaskInfo taskCenterList = 2;
  total_size += 1UL * this->_internal_taskcenterlist_size();
  for (const auto& msg : this->taskcenterlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string key = 6;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 refreshPrice = 5;
  if (this->refreshprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refreshprice());
  }

  // int32 todayMaxYuanli = 7;
  if (this->todaymaxyuanli() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_todaymaxyuanli());
  }

  // int32 todayYuanli = 8;
  if (this->todayyuanli() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_todayyuanli());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STaskList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.STaskList)
  GOOGLE_DCHECK_NE(&from, this);
  const STaskList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STaskList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.STaskList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.STaskList)
    MergeFrom(*source);
  }
}

void STaskList::MergeFrom(const STaskList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.STaskList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  taskdesklist_.MergeFrom(from.taskdesklist_);
  taskcenterlist_.MergeFrom(from.taskcenterlist_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.refreshprice() != 0) {
    _internal_set_refreshprice(from._internal_refreshprice());
  }
  if (from.todaymaxyuanli() != 0) {
    _internal_set_todaymaxyuanli(from._internal_todaymaxyuanli());
  }
  if (from.todayyuanli() != 0) {
    _internal_set_todayyuanli(from._internal_todayyuanli());
  }
}

void STaskList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.STaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STaskList::CopyFrom(const STaskList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.STaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STaskList::IsInitialized() const {
  return true;
}

void STaskList::InternalSwap(STaskList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskdesklist_.InternalSwap(&other->taskdesklist_);
  taskcenterlist_.InternalSwap(&other->taskcenterlist_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(refreshprice_, other->refreshprice_);
  swap(todaymaxyuanli_, other->todaymaxyuanli_);
  swap(todayyuanli_, other->todayyuanli_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STaskList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CClaimTask::InitAsDefaultInstance() {
}
class CClaimTask::_Internal {
 public:
};

CClaimTask::CClaimTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.CClaimTask)
}
CClaimTask::CClaimTask(const CClaimTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  taskid_ = from.taskid_;
  // @@protoc_insertion_point(copy_constructor:rewardForTask.CClaimTask)
}

void CClaimTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CClaimTask_rewardForTask_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
}

CClaimTask::~CClaimTask() {
  // @@protoc_insertion_point(destructor:rewardForTask.CClaimTask)
  SharedDtor();
}

void CClaimTask::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClaimTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CClaimTask& CClaimTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CClaimTask_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void CClaimTask::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.CClaimTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
  _internal_metadata_.Clear();
}

const char* CClaimTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.CClaimTask.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CClaimTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.CClaimTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.CClaimTask.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.CClaimTask)
  return target;
}

size_t CClaimTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.CClaimTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClaimTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.CClaimTask)
  GOOGLE_DCHECK_NE(&from, this);
  const CClaimTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CClaimTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.CClaimTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.CClaimTask)
    MergeFrom(*source);
  }
}

void CClaimTask::MergeFrom(const CClaimTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.CClaimTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void CClaimTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.CClaimTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClaimTask::CopyFrom(const CClaimTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.CClaimTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClaimTask::IsInitialized() const {
  return true;
}

void CClaimTask::InternalSwap(CClaimTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClaimTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SClaimTask::InitAsDefaultInstance() {
}
class SClaimTask::_Internal {
 public:
};

SClaimTask::SClaimTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.SClaimTask)
}
SClaimTask::SClaimTask(const SClaimTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:rewardForTask.SClaimTask)
}

void SClaimTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SClaimTask_rewardForTask_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(taskid_));
}

SClaimTask::~SClaimTask() {
  // @@protoc_insertion_point(destructor:rewardForTask.SClaimTask)
  SharedDtor();
}

void SClaimTask::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SClaimTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SClaimTask& SClaimTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SClaimTask_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void SClaimTask::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.SClaimTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(taskid_));
  _internal_metadata_.Clear();
}

const char* SClaimTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.SClaimTask.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.SClaimTask.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SClaimTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.SClaimTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.SClaimTask.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_taskid(), target);
  }

  // string key = 4;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.SClaimTask.key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.SClaimTask)
  return target;
}

size_t SClaimTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.SClaimTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SClaimTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.SClaimTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SClaimTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SClaimTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.SClaimTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.SClaimTask)
    MergeFrom(*source);
  }
}

void SClaimTask::MergeFrom(const SClaimTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.SClaimTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void SClaimTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.SClaimTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SClaimTask::CopyFrom(const SClaimTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.SClaimTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SClaimTask::IsInitialized() const {
  return true;
}

void SClaimTask::InternalSwap(SClaimTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SClaimTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCompleteTaskReporting::InitAsDefaultInstance() {
}
class CCompleteTaskReporting::_Internal {
 public:
};

CCompleteTaskReporting::CCompleteTaskReporting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.CCompleteTaskReporting)
}
CCompleteTaskReporting::CCompleteTaskReporting(const CCompleteTaskReporting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  taskid_ = from.taskid_;
  // @@protoc_insertion_point(copy_constructor:rewardForTask.CCompleteTaskReporting)
}

void CCompleteTaskReporting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CCompleteTaskReporting_rewardForTask_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
}

CCompleteTaskReporting::~CCompleteTaskReporting() {
  // @@protoc_insertion_point(destructor:rewardForTask.CCompleteTaskReporting)
  SharedDtor();
}

void CCompleteTaskReporting::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCompleteTaskReporting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCompleteTaskReporting& CCompleteTaskReporting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCompleteTaskReporting_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void CCompleteTaskReporting::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.CCompleteTaskReporting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
  _internal_metadata_.Clear();
}

const char* CCompleteTaskReporting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.CCompleteTaskReporting.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCompleteTaskReporting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.CCompleteTaskReporting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.CCompleteTaskReporting.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.CCompleteTaskReporting)
  return target;
}

size_t CCompleteTaskReporting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.CCompleteTaskReporting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCompleteTaskReporting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.CCompleteTaskReporting)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompleteTaskReporting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCompleteTaskReporting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.CCompleteTaskReporting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.CCompleteTaskReporting)
    MergeFrom(*source);
  }
}

void CCompleteTaskReporting::MergeFrom(const CCompleteTaskReporting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.CCompleteTaskReporting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void CCompleteTaskReporting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.CCompleteTaskReporting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompleteTaskReporting::CopyFrom(const CCompleteTaskReporting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.CCompleteTaskReporting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompleteTaskReporting::IsInitialized() const {
  return true;
}

void CCompleteTaskReporting::InternalSwap(CCompleteTaskReporting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCompleteTaskReporting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCompleteTaskReporting::InitAsDefaultInstance() {
}
class SCompleteTaskReporting::_Internal {
 public:
};

SCompleteTaskReporting::SCompleteTaskReporting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.SCompleteTaskReporting)
}
SCompleteTaskReporting::SCompleteTaskReporting(const SCompleteTaskReporting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:rewardForTask.SCompleteTaskReporting)
}

void SCompleteTaskReporting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCompleteTaskReporting_rewardForTask_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(taskid_));
}

SCompleteTaskReporting::~SCompleteTaskReporting() {
  // @@protoc_insertion_point(destructor:rewardForTask.SCompleteTaskReporting)
  SharedDtor();
}

void SCompleteTaskReporting::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCompleteTaskReporting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCompleteTaskReporting& SCompleteTaskReporting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCompleteTaskReporting_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void SCompleteTaskReporting::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.SCompleteTaskReporting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(taskid_));
  _internal_metadata_.Clear();
}

const char* SCompleteTaskReporting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.SCompleteTaskReporting.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.SCompleteTaskReporting.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCompleteTaskReporting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.SCompleteTaskReporting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.SCompleteTaskReporting.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_taskid(), target);
  }

  // string key = 4;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.SCompleteTaskReporting.key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.SCompleteTaskReporting)
  return target;
}

size_t SCompleteTaskReporting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.SCompleteTaskReporting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCompleteTaskReporting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.SCompleteTaskReporting)
  GOOGLE_DCHECK_NE(&from, this);
  const SCompleteTaskReporting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCompleteTaskReporting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.SCompleteTaskReporting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.SCompleteTaskReporting)
    MergeFrom(*source);
  }
}

void SCompleteTaskReporting::MergeFrom(const SCompleteTaskReporting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.SCompleteTaskReporting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void SCompleteTaskReporting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.SCompleteTaskReporting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCompleteTaskReporting::CopyFrom(const SCompleteTaskReporting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.SCompleteTaskReporting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCompleteTaskReporting::IsInitialized() const {
  return true;
}

void SCompleteTaskReporting::InternalSwap(SCompleteTaskReporting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCompleteTaskReporting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CClaimReward::InitAsDefaultInstance() {
}
class CClaimReward::_Internal {
 public:
};

CClaimReward::CClaimReward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.CClaimReward)
}
CClaimReward::CClaimReward(const CClaimReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  taskid_ = from.taskid_;
  // @@protoc_insertion_point(copy_constructor:rewardForTask.CClaimReward)
}

void CClaimReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CClaimReward_rewardForTask_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
}

CClaimReward::~CClaimReward() {
  // @@protoc_insertion_point(destructor:rewardForTask.CClaimReward)
  SharedDtor();
}

void CClaimReward::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClaimReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CClaimReward& CClaimReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CClaimReward_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void CClaimReward::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.CClaimReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
  _internal_metadata_.Clear();
}

const char* CClaimReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.CClaimReward.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CClaimReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.CClaimReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.CClaimReward.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.CClaimReward)
  return target;
}

size_t CClaimReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.CClaimReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClaimReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.CClaimReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CClaimReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CClaimReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.CClaimReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.CClaimReward)
    MergeFrom(*source);
  }
}

void CClaimReward::MergeFrom(const CClaimReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.CClaimReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void CClaimReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.CClaimReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClaimReward::CopyFrom(const CClaimReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.CClaimReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClaimReward::IsInitialized() const {
  return true;
}

void CClaimReward::InternalSwap(CClaimReward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClaimReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SClaimReward::InitAsDefaultInstance() {
}
class SClaimReward::_Internal {
 public:
};

void SClaimReward::clear_list() {
  list_.Clear();
}
SClaimReward::SClaimReward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.SClaimReward)
}
SClaimReward::SClaimReward(const SClaimReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:rewardForTask.SClaimReward)
}

void SClaimReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SClaimReward_rewardForTask_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(taskid_));
}

SClaimReward::~SClaimReward() {
  // @@protoc_insertion_point(destructor:rewardForTask.SClaimReward)
  SharedDtor();
}

void SClaimReward::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SClaimReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SClaimReward& SClaimReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SClaimReward_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void SClaimReward::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.SClaimReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(taskid_));
  _internal_metadata_.Clear();
}

const char* SClaimReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .treasureBox.TreasureBoxRewardContent list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.SClaimReward.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.SClaimReward.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SClaimReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.SClaimReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .treasureBox.TreasureBoxRewardContent list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.SClaimReward.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // int32 taskId = 4;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_taskid(), target);
  }

  // string key = 5;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.SClaimReward.key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.SClaimReward)
  return target;
}

size_t SClaimReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.SClaimReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .treasureBox.TreasureBoxRewardContent list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string key = 5;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 taskId = 4;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SClaimReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.SClaimReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SClaimReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SClaimReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.SClaimReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.SClaimReward)
    MergeFrom(*source);
  }
}

void SClaimReward::MergeFrom(const SClaimReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.SClaimReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void SClaimReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.SClaimReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SClaimReward::CopyFrom(const SClaimReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.SClaimReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SClaimReward::IsInitialized() const {
  return true;
}

void SClaimReward::InternalSwap(SClaimReward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SClaimReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CRefreshDailyTasks::InitAsDefaultInstance() {
}
class CRefreshDailyTasks::_Internal {
 public:
};

CRefreshDailyTasks::CRefreshDailyTasks()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.CRefreshDailyTasks)
}
CRefreshDailyTasks::CRefreshDailyTasks(const CRefreshDailyTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rewardForTask.CRefreshDailyTasks)
}

void CRefreshDailyTasks::SharedCtor() {
}

CRefreshDailyTasks::~CRefreshDailyTasks() {
  // @@protoc_insertion_point(destructor:rewardForTask.CRefreshDailyTasks)
  SharedDtor();
}

void CRefreshDailyTasks::SharedDtor() {
}

void CRefreshDailyTasks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRefreshDailyTasks& CRefreshDailyTasks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRefreshDailyTasks_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void CRefreshDailyTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.CRefreshDailyTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CRefreshDailyTasks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRefreshDailyTasks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.CRefreshDailyTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.CRefreshDailyTasks)
  return target;
}

size_t CRefreshDailyTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.CRefreshDailyTasks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRefreshDailyTasks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.CRefreshDailyTasks)
  GOOGLE_DCHECK_NE(&from, this);
  const CRefreshDailyTasks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRefreshDailyTasks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.CRefreshDailyTasks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.CRefreshDailyTasks)
    MergeFrom(*source);
  }
}

void CRefreshDailyTasks::MergeFrom(const CRefreshDailyTasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.CRefreshDailyTasks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CRefreshDailyTasks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.CRefreshDailyTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRefreshDailyTasks::CopyFrom(const CRefreshDailyTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.CRefreshDailyTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRefreshDailyTasks::IsInitialized() const {
  return true;
}

void CRefreshDailyTasks::InternalSwap(CRefreshDailyTasks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRefreshDailyTasks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRefreshDailyTasks::InitAsDefaultInstance() {
}
class SRefreshDailyTasks::_Internal {
 public:
};

SRefreshDailyTasks::SRefreshDailyTasks()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.SRefreshDailyTasks)
}
SRefreshDailyTasks::SRefreshDailyTasks(const SRefreshDailyTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&refreshprice_) -
    reinterpret_cast<char*>(&state_)) + sizeof(refreshprice_));
  // @@protoc_insertion_point(copy_constructor:rewardForTask.SRefreshDailyTasks)
}

void SRefreshDailyTasks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRefreshDailyTasks_rewardForTask_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refreshprice_) -
      reinterpret_cast<char*>(&state_)) + sizeof(refreshprice_));
}

SRefreshDailyTasks::~SRefreshDailyTasks() {
  // @@protoc_insertion_point(destructor:rewardForTask.SRefreshDailyTasks)
  SharedDtor();
}

void SRefreshDailyTasks::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SRefreshDailyTasks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRefreshDailyTasks& SRefreshDailyTasks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRefreshDailyTasks_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void SRefreshDailyTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.SRefreshDailyTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refreshprice_) -
      reinterpret_cast<char*>(&state_)) + sizeof(refreshprice_));
  _internal_metadata_.Clear();
}

const char* SRefreshDailyTasks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rewardForTask.TaskInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.SRefreshDailyTasks.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 refreshPrice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          refreshprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRefreshDailyTasks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.SRefreshDailyTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rewardForTask.TaskInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.SRefreshDailyTasks.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // int32 refreshPrice = 4;
  if (this->refreshprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_refreshprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.SRefreshDailyTasks)
  return target;
}

size_t SRefreshDailyTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.SRefreshDailyTasks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rewardForTask.TaskInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 refreshPrice = 4;
  if (this->refreshprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refreshprice());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRefreshDailyTasks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.SRefreshDailyTasks)
  GOOGLE_DCHECK_NE(&from, this);
  const SRefreshDailyTasks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRefreshDailyTasks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.SRefreshDailyTasks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.SRefreshDailyTasks)
    MergeFrom(*source);
  }
}

void SRefreshDailyTasks::MergeFrom(const SRefreshDailyTasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.SRefreshDailyTasks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.refreshprice() != 0) {
    _internal_set_refreshprice(from._internal_refreshprice());
  }
}

void SRefreshDailyTasks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.SRefreshDailyTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRefreshDailyTasks::CopyFrom(const SRefreshDailyTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.SRefreshDailyTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRefreshDailyTasks::IsInitialized() const {
  return true;
}

void SRefreshDailyTasks::InternalSwap(SRefreshDailyTasks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(refreshprice_, other->refreshprice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRefreshDailyTasks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskInfo::InitAsDefaultInstance() {
}
class TaskInfo::_Internal {
 public:
};

void TaskInfo::clear_list() {
  list_.Clear();
}
TaskInfo::TaskInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rewardForTask.TaskInfo)
}
TaskInfo::TaskInfo(const TaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskname().empty()) {
    taskname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskname_);
  }
  taskkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskkey().empty()) {
    taskkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskkey_);
  }
  taskdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskdesc().empty()) {
    taskdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskdesc_);
  }
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:rewardForTask.TaskInfo)
}

void TaskInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskInfo_rewardForTask_2eproto.base);
  taskname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:rewardForTask.TaskInfo)
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  taskname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskInfo& TaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskInfo_rewardForTask_2eproto.base);
  return *internal_default_instance();
}


void TaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rewardForTask.TaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  taskname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* TaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .treasureBox.TreasureBoxRewardContent list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string taskName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_taskname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.TaskInfo.taskName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string taskKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_taskkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.TaskInfo.taskKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string taskDesc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_taskdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rewardForTask.TaskInfo.taskDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rewardForTask.TaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // repeated .treasureBox.TreasureBoxRewardContent list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_list(i), target, stream);
  }

  // string taskName = 3;
  if (this->taskname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskname().data(), static_cast<int>(this->_internal_taskname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.TaskInfo.taskName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_taskname(), target);
  }

  // string taskKey = 4;
  if (this->taskkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskkey().data(), static_cast<int>(this->_internal_taskkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.TaskInfo.taskKey");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_taskkey(), target);
  }

  // string taskDesc = 5;
  if (this->taskdesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskdesc().data(), static_cast<int>(this->_internal_taskdesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rewardForTask.TaskInfo.taskDesc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_taskdesc(), target);
  }

  // int32 status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rewardForTask.TaskInfo)
  return target;
}

size_t TaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rewardForTask.TaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .treasureBox.TreasureBoxRewardContent list = 2;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string taskName = 3;
  if (this->taskname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskname());
  }

  // string taskKey = 4;
  if (this->taskkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskkey());
  }

  // string taskDesc = 5;
  if (this->taskdesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskdesc());
  }

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // int32 status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rewardForTask.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rewardForTask.TaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rewardForTask.TaskInfo)
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rewardForTask.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.taskname().size() > 0) {

    taskname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskname_);
  }
  if (from.taskkey().size() > 0) {

    taskkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskkey_);
  }
  if (from.taskdesc().size() > 0) {

    taskdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskdesc_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void TaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rewardForTask.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rewardForTask.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  return true;
}

void TaskInfo::InternalSwap(TaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  taskname_.Swap(&other->taskname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  taskkey_.Swap(&other->taskkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  taskdesc_.Swap(&other->taskdesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rewardForTask
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rewardForTask::CTaskList* Arena::CreateMaybeMessage< ::rewardForTask::CTaskList >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::CTaskList >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::STaskList* Arena::CreateMaybeMessage< ::rewardForTask::STaskList >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::STaskList >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::CClaimTask* Arena::CreateMaybeMessage< ::rewardForTask::CClaimTask >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::CClaimTask >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::SClaimTask* Arena::CreateMaybeMessage< ::rewardForTask::SClaimTask >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::SClaimTask >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::CCompleteTaskReporting* Arena::CreateMaybeMessage< ::rewardForTask::CCompleteTaskReporting >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::CCompleteTaskReporting >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::SCompleteTaskReporting* Arena::CreateMaybeMessage< ::rewardForTask::SCompleteTaskReporting >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::SCompleteTaskReporting >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::CClaimReward* Arena::CreateMaybeMessage< ::rewardForTask::CClaimReward >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::CClaimReward >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::SClaimReward* Arena::CreateMaybeMessage< ::rewardForTask::SClaimReward >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::SClaimReward >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::CRefreshDailyTasks* Arena::CreateMaybeMessage< ::rewardForTask::CRefreshDailyTasks >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::CRefreshDailyTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::SRefreshDailyTasks* Arena::CreateMaybeMessage< ::rewardForTask::SRefreshDailyTasks >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::SRefreshDailyTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::rewardForTask::TaskInfo* Arena::CreateMaybeMessage< ::rewardForTask::TaskInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rewardForTask::TaskInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
