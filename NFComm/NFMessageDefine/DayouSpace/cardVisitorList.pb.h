// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cardVisitorList.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cardVisitorList_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cardVisitorList_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cardVisitorList_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cardVisitorList_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cardVisitorList_2eproto;
namespace cardVisitorList {
class BCardVisitorList;
class BCardVisitorListDefaultTypeInternal;
extern BCardVisitorListDefaultTypeInternal _BCardVisitorList_default_instance_;
class CCardVisitNumber;
class CCardVisitNumberDefaultTypeInternal;
extern CCardVisitNumberDefaultTypeInternal _CCardVisitNumber_default_instance_;
class CCardVisitorList;
class CCardVisitorListDefaultTypeInternal;
extern CCardVisitorListDefaultTypeInternal _CCardVisitorList_default_instance_;
class SCardVisitNumber;
class SCardVisitNumberDefaultTypeInternal;
extern SCardVisitNumberDefaultTypeInternal _SCardVisitNumber_default_instance_;
class SCardVisitorList;
class SCardVisitorListDefaultTypeInternal;
extern SCardVisitorListDefaultTypeInternal _SCardVisitorList_default_instance_;
}  // namespace cardVisitorList
PROTOBUF_NAMESPACE_OPEN
template<> ::cardVisitorList::BCardVisitorList* Arena::CreateMaybeMessage<::cardVisitorList::BCardVisitorList>(Arena*);
template<> ::cardVisitorList::CCardVisitNumber* Arena::CreateMaybeMessage<::cardVisitorList::CCardVisitNumber>(Arena*);
template<> ::cardVisitorList::CCardVisitorList* Arena::CreateMaybeMessage<::cardVisitorList::CCardVisitorList>(Arena*);
template<> ::cardVisitorList::SCardVisitNumber* Arena::CreateMaybeMessage<::cardVisitorList::SCardVisitNumber>(Arena*);
template<> ::cardVisitorList::SCardVisitorList* Arena::CreateMaybeMessage<::cardVisitorList::SCardVisitorList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cardVisitorList {

// ===================================================================

class BCardVisitorList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cardVisitorList.BCardVisitorList) */ {
 public:
  BCardVisitorList();
  virtual ~BCardVisitorList();

  BCardVisitorList(const BCardVisitorList& from);
  BCardVisitorList(BCardVisitorList&& from) noexcept
    : BCardVisitorList() {
    *this = ::std::move(from);
  }

  inline BCardVisitorList& operator=(const BCardVisitorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BCardVisitorList& operator=(BCardVisitorList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BCardVisitorList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BCardVisitorList* internal_default_instance() {
    return reinterpret_cast<const BCardVisitorList*>(
               &_BCardVisitorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BCardVisitorList& a, BCardVisitorList& b) {
    a.Swap(&b);
  }
  inline void Swap(BCardVisitorList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BCardVisitorList* New() const final {
    return CreateMaybeMessage<BCardVisitorList>(nullptr);
  }

  BCardVisitorList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BCardVisitorList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BCardVisitorList& from);
  void MergeFrom(const BCardVisitorList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCardVisitorList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cardVisitorList.BCardVisitorList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cardVisitorList_2eproto);
    return ::descriptor_table_cardVisitorList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadPicFieldNumber = 2,
    kNickFieldNumber = 3,
    kUidFieldNumber = 1,
    kFollowStatusFieldNumber = 4,
  };
  // string headPic = 2;
  void clear_headpic();
  const std::string& headpic() const;
  void set_headpic(const std::string& value);
  void set_headpic(std::string&& value);
  void set_headpic(const char* value);
  void set_headpic(const char* value, size_t size);
  std::string* mutable_headpic();
  std::string* release_headpic();
  void set_allocated_headpic(std::string* headpic);
  private:
  const std::string& _internal_headpic() const;
  void _internal_set_headpic(const std::string& value);
  std::string* _internal_mutable_headpic();
  public:

  // string nick = 3;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 followStatus = 4;
  void clear_followstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus() const;
  void set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_followstatus() const;
  void _internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cardVisitorList.BCardVisitorList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headpic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 followstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cardVisitorList_2eproto;
};
// -------------------------------------------------------------------

class CCardVisitorList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cardVisitorList.CCardVisitorList) */ {
 public:
  CCardVisitorList();
  virtual ~CCardVisitorList();

  CCardVisitorList(const CCardVisitorList& from);
  CCardVisitorList(CCardVisitorList&& from) noexcept
    : CCardVisitorList() {
    *this = ::std::move(from);
  }

  inline CCardVisitorList& operator=(const CCardVisitorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCardVisitorList& operator=(CCardVisitorList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCardVisitorList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCardVisitorList* internal_default_instance() {
    return reinterpret_cast<const CCardVisitorList*>(
               &_CCardVisitorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CCardVisitorList& a, CCardVisitorList& b) {
    a.Swap(&b);
  }
  inline void Swap(CCardVisitorList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCardVisitorList* New() const final {
    return CreateMaybeMessage<CCardVisitorList>(nullptr);
  }

  CCardVisitorList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCardVisitorList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCardVisitorList& from);
  void MergeFrom(const CCardVisitorList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCardVisitorList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cardVisitorList.CCardVisitorList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cardVisitorList_2eproto);
    return ::descriptor_table_cardVisitorList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cardVisitorList.CCardVisitorList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cardVisitorList_2eproto;
};
// -------------------------------------------------------------------

class SCardVisitorList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cardVisitorList.SCardVisitorList) */ {
 public:
  SCardVisitorList();
  virtual ~SCardVisitorList();

  SCardVisitorList(const SCardVisitorList& from);
  SCardVisitorList(SCardVisitorList&& from) noexcept
    : SCardVisitorList() {
    *this = ::std::move(from);
  }

  inline SCardVisitorList& operator=(const SCardVisitorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCardVisitorList& operator=(SCardVisitorList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCardVisitorList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCardVisitorList* internal_default_instance() {
    return reinterpret_cast<const SCardVisitorList*>(
               &_SCardVisitorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SCardVisitorList& a, SCardVisitorList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCardVisitorList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCardVisitorList* New() const final {
    return CreateMaybeMessage<SCardVisitorList>(nullptr);
  }

  SCardVisitorList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCardVisitorList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCardVisitorList& from);
  void MergeFrom(const SCardVisitorList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCardVisitorList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cardVisitorList.SCardVisitorList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cardVisitorList_2eproto);
    return ::descriptor_table_cardVisitorList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .cardVisitorList.BCardVisitorList list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::cardVisitorList::BCardVisitorList* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cardVisitorList::BCardVisitorList >*
      mutable_list();
  private:
  const ::cardVisitorList::BCardVisitorList& _internal_list(int index) const;
  ::cardVisitorList::BCardVisitorList* _internal_add_list();
  public:
  const ::cardVisitorList::BCardVisitorList& list(int index) const;
  ::cardVisitorList::BCardVisitorList* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cardVisitorList::BCardVisitorList >&
      list() const;

  // @@protoc_insertion_point(class_scope:cardVisitorList.SCardVisitorList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cardVisitorList::BCardVisitorList > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cardVisitorList_2eproto;
};
// -------------------------------------------------------------------

class CCardVisitNumber :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cardVisitorList.CCardVisitNumber) */ {
 public:
  CCardVisitNumber();
  virtual ~CCardVisitNumber();

  CCardVisitNumber(const CCardVisitNumber& from);
  CCardVisitNumber(CCardVisitNumber&& from) noexcept
    : CCardVisitNumber() {
    *this = ::std::move(from);
  }

  inline CCardVisitNumber& operator=(const CCardVisitNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCardVisitNumber& operator=(CCardVisitNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCardVisitNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCardVisitNumber* internal_default_instance() {
    return reinterpret_cast<const CCardVisitNumber*>(
               &_CCardVisitNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CCardVisitNumber& a, CCardVisitNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(CCardVisitNumber* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCardVisitNumber* New() const final {
    return CreateMaybeMessage<CCardVisitNumber>(nullptr);
  }

  CCardVisitNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCardVisitNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCardVisitNumber& from);
  void MergeFrom(const CCardVisitNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCardVisitNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cardVisitorList.CCardVisitNumber";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cardVisitorList_2eproto);
    return ::descriptor_table_cardVisitorList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cardVisitorList.CCardVisitNumber)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cardVisitorList_2eproto;
};
// -------------------------------------------------------------------

class SCardVisitNumber :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cardVisitorList.SCardVisitNumber) */ {
 public:
  SCardVisitNumber();
  virtual ~SCardVisitNumber();

  SCardVisitNumber(const SCardVisitNumber& from);
  SCardVisitNumber(SCardVisitNumber&& from) noexcept
    : SCardVisitNumber() {
    *this = ::std::move(from);
  }

  inline SCardVisitNumber& operator=(const SCardVisitNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCardVisitNumber& operator=(SCardVisitNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCardVisitNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCardVisitNumber* internal_default_instance() {
    return reinterpret_cast<const SCardVisitNumber*>(
               &_SCardVisitNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SCardVisitNumber& a, SCardVisitNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(SCardVisitNumber* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCardVisitNumber* New() const final {
    return CreateMaybeMessage<SCardVisitNumber>(nullptr);
  }

  SCardVisitNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCardVisitNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCardVisitNumber& from);
  void MergeFrom(const SCardVisitNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCardVisitNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cardVisitorList.SCardVisitNumber";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cardVisitorList_2eproto);
    return ::descriptor_table_cardVisitorList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
  };
  // int32 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cardVisitorList.SCardVisitNumber)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cardVisitorList_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BCardVisitorList

// int32 uid = 1;
inline void BCardVisitorList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BCardVisitorList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BCardVisitorList::uid() const {
  // @@protoc_insertion_point(field_get:cardVisitorList.BCardVisitorList.uid)
  return _internal_uid();
}
inline void BCardVisitorList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BCardVisitorList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:cardVisitorList.BCardVisitorList.uid)
}

// string headPic = 2;
inline void BCardVisitorList::clear_headpic() {
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BCardVisitorList::headpic() const {
  // @@protoc_insertion_point(field_get:cardVisitorList.BCardVisitorList.headPic)
  return _internal_headpic();
}
inline void BCardVisitorList::set_headpic(const std::string& value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:cardVisitorList.BCardVisitorList.headPic)
}
inline std::string* BCardVisitorList::mutable_headpic() {
  // @@protoc_insertion_point(field_mutable:cardVisitorList.BCardVisitorList.headPic)
  return _internal_mutable_headpic();
}
inline const std::string& BCardVisitorList::_internal_headpic() const {
  return headpic_.GetNoArena();
}
inline void BCardVisitorList::_internal_set_headpic(const std::string& value) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BCardVisitorList::set_headpic(std::string&& value) {
  
  headpic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cardVisitorList.BCardVisitorList.headPic)
}
inline void BCardVisitorList::set_headpic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cardVisitorList.BCardVisitorList.headPic)
}
inline void BCardVisitorList::set_headpic(const char* value, size_t size) {
  
  headpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cardVisitorList.BCardVisitorList.headPic)
}
inline std::string* BCardVisitorList::_internal_mutable_headpic() {
  
  return headpic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BCardVisitorList::release_headpic() {
  // @@protoc_insertion_point(field_release:cardVisitorList.BCardVisitorList.headPic)
  
  return headpic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BCardVisitorList::set_allocated_headpic(std::string* headpic) {
  if (headpic != nullptr) {
    
  } else {
    
  }
  headpic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headpic);
  // @@protoc_insertion_point(field_set_allocated:cardVisitorList.BCardVisitorList.headPic)
}

// string nick = 3;
inline void BCardVisitorList::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BCardVisitorList::nick() const {
  // @@protoc_insertion_point(field_get:cardVisitorList.BCardVisitorList.nick)
  return _internal_nick();
}
inline void BCardVisitorList::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:cardVisitorList.BCardVisitorList.nick)
}
inline std::string* BCardVisitorList::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:cardVisitorList.BCardVisitorList.nick)
  return _internal_mutable_nick();
}
inline const std::string& BCardVisitorList::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void BCardVisitorList::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BCardVisitorList::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cardVisitorList.BCardVisitorList.nick)
}
inline void BCardVisitorList::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cardVisitorList.BCardVisitorList.nick)
}
inline void BCardVisitorList::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cardVisitorList.BCardVisitorList.nick)
}
inline std::string* BCardVisitorList::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BCardVisitorList::release_nick() {
  // @@protoc_insertion_point(field_release:cardVisitorList.BCardVisitorList.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BCardVisitorList::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:cardVisitorList.BCardVisitorList.nick)
}

// int32 followStatus = 4;
inline void BCardVisitorList::clear_followstatus() {
  followstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BCardVisitorList::_internal_followstatus() const {
  return followstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BCardVisitorList::followstatus() const {
  // @@protoc_insertion_point(field_get:cardVisitorList.BCardVisitorList.followStatus)
  return _internal_followstatus();
}
inline void BCardVisitorList::_internal_set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  followstatus_ = value;
}
inline void BCardVisitorList::set_followstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_followstatus(value);
  // @@protoc_insertion_point(field_set:cardVisitorList.BCardVisitorList.followStatus)
}

// -------------------------------------------------------------------

// CCardVisitorList

// int32 uid = 1;
inline void CCardVisitorList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCardVisitorList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCardVisitorList::uid() const {
  // @@protoc_insertion_point(field_get:cardVisitorList.CCardVisitorList.uid)
  return _internal_uid();
}
inline void CCardVisitorList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CCardVisitorList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:cardVisitorList.CCardVisitorList.uid)
}

// int32 count = 2;
inline void CCardVisitorList::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCardVisitorList::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCardVisitorList::count() const {
  // @@protoc_insertion_point(field_get:cardVisitorList.CCardVisitorList.count)
  return _internal_count();
}
inline void CCardVisitorList::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void CCardVisitorList::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:cardVisitorList.CCardVisitorList.count)
}

// -------------------------------------------------------------------

// SCardVisitorList

// repeated .cardVisitorList.BCardVisitorList list = 1;
inline int SCardVisitorList::_internal_list_size() const {
  return list_.size();
}
inline int SCardVisitorList::list_size() const {
  return _internal_list_size();
}
inline void SCardVisitorList::clear_list() {
  list_.Clear();
}
inline ::cardVisitorList::BCardVisitorList* SCardVisitorList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:cardVisitorList.SCardVisitorList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cardVisitorList::BCardVisitorList >*
SCardVisitorList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:cardVisitorList.SCardVisitorList.list)
  return &list_;
}
inline const ::cardVisitorList::BCardVisitorList& SCardVisitorList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::cardVisitorList::BCardVisitorList& SCardVisitorList::list(int index) const {
  // @@protoc_insertion_point(field_get:cardVisitorList.SCardVisitorList.list)
  return _internal_list(index);
}
inline ::cardVisitorList::BCardVisitorList* SCardVisitorList::_internal_add_list() {
  return list_.Add();
}
inline ::cardVisitorList::BCardVisitorList* SCardVisitorList::add_list() {
  // @@protoc_insertion_point(field_add:cardVisitorList.SCardVisitorList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cardVisitorList::BCardVisitorList >&
SCardVisitorList::list() const {
  // @@protoc_insertion_point(field_list:cardVisitorList.SCardVisitorList.list)
  return list_;
}

// -------------------------------------------------------------------

// CCardVisitNumber

// int32 uid = 1;
inline void CCardVisitNumber::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCardVisitNumber::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCardVisitNumber::uid() const {
  // @@protoc_insertion_point(field_get:cardVisitorList.CCardVisitNumber.uid)
  return _internal_uid();
}
inline void CCardVisitNumber::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CCardVisitNumber::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:cardVisitorList.CCardVisitNumber.uid)
}

// -------------------------------------------------------------------

// SCardVisitNumber

// int32 number = 1;
inline void SCardVisitNumber::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardVisitNumber::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCardVisitNumber::number() const {
  // @@protoc_insertion_point(field_get:cardVisitorList.SCardVisitNumber.number)
  return _internal_number();
}
inline void SCardVisitNumber::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void SCardVisitNumber::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:cardVisitorList.SCardVisitNumber.number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cardVisitorList

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cardVisitorList_2eproto
