// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceResource.proto

#include "spaceResource.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_spaceResource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpaceResourceInfo_spaceResource_2eproto;
namespace spaceResource {
class CSpaceResourceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSpaceResourceList> _instance;
} _CSpaceResourceList_default_instance_;
class SSpaceResourceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceResourceList> _instance;
} _SSpaceResourceList_default_instance_;
class SpaceResourceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpaceResourceInfo> _instance;
} _SpaceResourceInfo_default_instance_;
}  // namespace spaceResource
static void InitDefaultsscc_info_CSpaceResourceList_spaceResource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceResource::_CSpaceResourceList_default_instance_;
    new (ptr) ::spaceResource::CSpaceResourceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceResource::CSpaceResourceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSpaceResourceList_spaceResource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSpaceResourceList_spaceResource_2eproto}, {}};

static void InitDefaultsscc_info_SSpaceResourceList_spaceResource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceResource::_SSpaceResourceList_default_instance_;
    new (ptr) ::spaceResource::SSpaceResourceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceResource::SSpaceResourceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSpaceResourceList_spaceResource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSpaceResourceList_spaceResource_2eproto}, {
      &scc_info_SpaceResourceInfo_spaceResource_2eproto.base,}};

static void InitDefaultsscc_info_SpaceResourceInfo_spaceResource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceResource::_SpaceResourceInfo_default_instance_;
    new (ptr) ::spaceResource::SpaceResourceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceResource::SpaceResourceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpaceResourceInfo_spaceResource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpaceResourceInfo_spaceResource_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spaceResource_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_spaceResource_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spaceResource_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spaceResource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceResource::CSpaceResourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceResource::CSpaceResourceList, spaceresourceids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceResource::SSpaceResourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceResource::SSpaceResourceList, list_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SSpaceResourceList, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, id_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, name_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, creatoruid_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, type_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, thum_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, cdnurl_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, md5_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, abstatus_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, status_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, checkstatus_),
  PROTOBUF_FIELD_OFFSET(::spaceResource::SpaceResourceInfo, remarks_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::spaceResource::CSpaceResourceList)},
  { 6, -1, sizeof(::spaceResource::SSpaceResourceList)},
  { 13, -1, sizeof(::spaceResource::SpaceResourceInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceResource::_CSpaceResourceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceResource::_SSpaceResourceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceResource::_SpaceResourceInfo_default_instance_),
};

const char descriptor_table_protodef_spaceResource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023spaceResource.proto\022\rspaceResource\".\n\022"
  "CSpaceResourceList\022\030\n\020spaceResourceIds\030\001"
  " \003(\005\"Q\n\022SSpaceResourceList\022.\n\004list\030\001 \003(\013"
  "2 .spaceResource.SpaceResourceInfo\022\013\n\003ms"
  "g\030\002 \001(\t\"\302\001\n\021SpaceResourceInfo\022\n\n\002id\030\001 \001("
  "\005\022\014\n\004name\030\002 \001(\t\022\022\n\ncreatorUid\030\003 \001(\005\022\014\n\004t"
  "ype\030\004 \001(\005\022\014\n\004thum\030\005 \001(\t\022\016\n\006cdnUrl\030\006 \001(\t\022"
  "\013\n\003md5\030\007 \001(\t\022\020\n\010abStatus\030\010 \001(\005\022\016\n\006status"
  "\030\t \001(\005\022\023\n\013checkStatus\030\n \001(\005\022\017\n\007remarks\030\013"
  " \001(\tB-\n\030com.dayou.space.protobufB\rSpaceR"
  "esourceZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_spaceResource_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_spaceResource_2eproto_sccs[3] = {
  &scc_info_CSpaceResourceList_spaceResource_2eproto.base,
  &scc_info_SSpaceResourceList_spaceResource_2eproto.base,
  &scc_info_SpaceResourceInfo_spaceResource_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spaceResource_2eproto_once;
static bool descriptor_table_spaceResource_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceResource_2eproto = {
  &descriptor_table_spaceResource_2eproto_initialized, descriptor_table_protodef_spaceResource_2eproto, "spaceResource.proto", 419,
  &descriptor_table_spaceResource_2eproto_once, descriptor_table_spaceResource_2eproto_sccs, descriptor_table_spaceResource_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_spaceResource_2eproto::offsets,
  file_level_metadata_spaceResource_2eproto, 3, file_level_enum_descriptors_spaceResource_2eproto, file_level_service_descriptors_spaceResource_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spaceResource_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_spaceResource_2eproto), true);
namespace spaceResource {

// ===================================================================

void CSpaceResourceList::InitAsDefaultInstance() {
}
class CSpaceResourceList::_Internal {
 public:
};

CSpaceResourceList::CSpaceResourceList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceResource.CSpaceResourceList)
}
CSpaceResourceList::CSpaceResourceList(const CSpaceResourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      spaceresourceids_(from.spaceresourceids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:spaceResource.CSpaceResourceList)
}

void CSpaceResourceList::SharedCtor() {
}

CSpaceResourceList::~CSpaceResourceList() {
  // @@protoc_insertion_point(destructor:spaceResource.CSpaceResourceList)
  SharedDtor();
}

void CSpaceResourceList::SharedDtor() {
}

void CSpaceResourceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSpaceResourceList& CSpaceResourceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSpaceResourceList_spaceResource_2eproto.base);
  return *internal_default_instance();
}


void CSpaceResourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceResource.CSpaceResourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spaceresourceids_.Clear();
  _internal_metadata_.Clear();
}

const char* CSpaceResourceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 spaceResourceIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_spaceresourceids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_spaceresourceids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSpaceResourceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceResource.CSpaceResourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 spaceResourceIds = 1;
  {
    int byte_size = _spaceresourceids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_spaceresourceids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceResource.CSpaceResourceList)
  return target;
}

size_t CSpaceResourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceResource.CSpaceResourceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 spaceResourceIds = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->spaceresourceids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spaceresourceids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSpaceResourceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceResource.CSpaceResourceList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSpaceResourceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSpaceResourceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceResource.CSpaceResourceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceResource.CSpaceResourceList)
    MergeFrom(*source);
  }
}

void CSpaceResourceList::MergeFrom(const CSpaceResourceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceResource.CSpaceResourceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spaceresourceids_.MergeFrom(from.spaceresourceids_);
}

void CSpaceResourceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceResource.CSpaceResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSpaceResourceList::CopyFrom(const CSpaceResourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceResource.CSpaceResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSpaceResourceList::IsInitialized() const {
  return true;
}

void CSpaceResourceList::InternalSwap(CSpaceResourceList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  spaceresourceids_.InternalSwap(&other->spaceresourceids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSpaceResourceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceResourceList::InitAsDefaultInstance() {
}
class SSpaceResourceList::_Internal {
 public:
};

SSpaceResourceList::SSpaceResourceList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceResource.SSpaceResourceList)
}
SSpaceResourceList::SSpaceResourceList(const SSpaceResourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:spaceResource.SSpaceResourceList)
}

void SSpaceResourceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSpaceResourceList_spaceResource_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SSpaceResourceList::~SSpaceResourceList() {
  // @@protoc_insertion_point(destructor:spaceResource.SSpaceResourceList)
  SharedDtor();
}

void SSpaceResourceList::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSpaceResourceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceResourceList& SSpaceResourceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceResourceList_spaceResource_2eproto.base);
  return *internal_default_instance();
}


void SSpaceResourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceResource.SSpaceResourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SSpaceResourceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .spaceResource.SpaceResourceInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceResource.SSpaceResourceList.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceResourceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceResource.SSpaceResourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spaceResource.SpaceResourceInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceResource.SSpaceResourceList.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceResource.SSpaceResourceList)
  return target;
}

size_t SSpaceResourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceResource.SSpaceResourceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spaceResource.SpaceResourceInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceResourceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceResource.SSpaceResourceList)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceResourceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceResourceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceResource.SSpaceResourceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceResource.SSpaceResourceList)
    MergeFrom(*source);
  }
}

void SSpaceResourceList::MergeFrom(const SSpaceResourceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceResource.SSpaceResourceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SSpaceResourceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceResource.SSpaceResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceResourceList::CopyFrom(const SSpaceResourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceResource.SSpaceResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceResourceList::IsInitialized() const {
  return true;
}

void SSpaceResourceList::InternalSwap(SSpaceResourceList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceResourceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpaceResourceInfo::InitAsDefaultInstance() {
}
class SpaceResourceInfo::_Internal {
 public:
};

SpaceResourceInfo::SpaceResourceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceResource.SpaceResourceInfo)
}
SpaceResourceInfo::SpaceResourceInfo(const SpaceResourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  thum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thum().empty()) {
    thum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thum_);
  }
  cdnurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cdnurl().empty()) {
    cdnurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cdnurl_);
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_md5().empty()) {
    md5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  remarks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remarks().empty()) {
    remarks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remarks_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&checkstatus_) -
    reinterpret_cast<char*>(&id_)) + sizeof(checkstatus_));
  // @@protoc_insertion_point(copy_constructor:spaceResource.SpaceResourceInfo)
}

void SpaceResourceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpaceResourceInfo_spaceResource_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdnurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remarks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkstatus_) -
      reinterpret_cast<char*>(&id_)) + sizeof(checkstatus_));
}

SpaceResourceInfo::~SpaceResourceInfo() {
  // @@protoc_insertion_point(destructor:spaceResource.SpaceResourceInfo)
  SharedDtor();
}

void SpaceResourceInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdnurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remarks_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpaceResourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpaceResourceInfo& SpaceResourceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpaceResourceInfo_spaceResource_2eproto.base);
  return *internal_default_instance();
}


void SpaceResourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceResource.SpaceResourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdnurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remarks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkstatus_) -
      reinterpret_cast<char*>(&id_)) + sizeof(checkstatus_));
  _internal_metadata_.Clear();
}

const char* SpaceResourceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceResource.SpaceResourceInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 creatorUid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          creatoruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string thum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_thum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceResource.SpaceResourceInfo.thum"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cdnUrl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_cdnurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceResource.SpaceResourceInfo.cdnUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string md5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceResource.SpaceResourceInfo.md5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 abStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          abstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 checkStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          checkstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remarks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_remarks();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceResource.SpaceResourceInfo.remarks"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpaceResourceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceResource.SpaceResourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceResource.SpaceResourceInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 creatorUid = 3;
  if (this->creatoruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_creatoruid(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // string thum = 5;
  if (this->thum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thum().data(), static_cast<int>(this->_internal_thum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceResource.SpaceResourceInfo.thum");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_thum(), target);
  }

  // string cdnUrl = 6;
  if (this->cdnurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cdnurl().data(), static_cast<int>(this->_internal_cdnurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceResource.SpaceResourceInfo.cdnUrl");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cdnurl(), target);
  }

  // string md5 = 7;
  if (this->md5().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceResource.SpaceResourceInfo.md5");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_md5(), target);
  }

  // int32 abStatus = 8;
  if (this->abstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_abstatus(), target);
  }

  // int32 status = 9;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_status(), target);
  }

  // int32 checkStatus = 10;
  if (this->checkstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_checkstatus(), target);
  }

  // string remarks = 11;
  if (this->remarks().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remarks().data(), static_cast<int>(this->_internal_remarks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceResource.SpaceResourceInfo.remarks");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_remarks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceResource.SpaceResourceInfo)
  return target;
}

size_t SpaceResourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceResource.SpaceResourceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string thum = 5;
  if (this->thum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thum());
  }

  // string cdnUrl = 6;
  if (this->cdnurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cdnurl());
  }

  // string md5 = 7;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  // string remarks = 11;
  if (this->remarks().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remarks());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 creatorUid = 3;
  if (this->creatoruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_creatoruid());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 abStatus = 8;
  if (this->abstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abstatus());
  }

  // int32 status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 checkStatus = 10;
  if (this->checkstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_checkstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpaceResourceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceResource.SpaceResourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpaceResourceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpaceResourceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceResource.SpaceResourceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceResource.SpaceResourceInfo)
    MergeFrom(*source);
  }
}

void SpaceResourceInfo::MergeFrom(const SpaceResourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceResource.SpaceResourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.thum().size() > 0) {

    thum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thum_);
  }
  if (from.cdnurl().size() > 0) {

    cdnurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cdnurl_);
  }
  if (from.md5().size() > 0) {

    md5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.remarks().size() > 0) {

    remarks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remarks_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.creatoruid() != 0) {
    _internal_set_creatoruid(from._internal_creatoruid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.abstatus() != 0) {
    _internal_set_abstatus(from._internal_abstatus());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.checkstatus() != 0) {
    _internal_set_checkstatus(from._internal_checkstatus());
  }
}

void SpaceResourceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceResource.SpaceResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpaceResourceInfo::CopyFrom(const SpaceResourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceResource.SpaceResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpaceResourceInfo::IsInitialized() const {
  return true;
}

void SpaceResourceInfo::InternalSwap(SpaceResourceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thum_.Swap(&other->thum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cdnurl_.Swap(&other->cdnurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  md5_.Swap(&other->md5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remarks_.Swap(&other->remarks_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(creatoruid_, other->creatoruid_);
  swap(type_, other->type_);
  swap(abstatus_, other->abstatus_);
  swap(status_, other->status_);
  swap(checkstatus_, other->checkstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpaceResourceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spaceResource
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::spaceResource::CSpaceResourceList* Arena::CreateMaybeMessage< ::spaceResource::CSpaceResourceList >(Arena* arena) {
  return Arena::CreateInternal< ::spaceResource::CSpaceResourceList >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceResource::SSpaceResourceList* Arena::CreateMaybeMessage< ::spaceResource::SSpaceResourceList >(Arena* arena) {
  return Arena::CreateInternal< ::spaceResource::SSpaceResourceList >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceResource::SpaceResourceInfo* Arena::CreateMaybeMessage< ::spaceResource::SpaceResourceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::spaceResource::SpaceResourceInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
