// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: violationFeedback.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_violationFeedback_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_violationFeedback_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_violationFeedback_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_violationFeedback_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_violationFeedback_2eproto;
namespace violationFeedback {
class CViolationFeedback;
class CViolationFeedbackDefaultTypeInternal;
extern CViolationFeedbackDefaultTypeInternal _CViolationFeedback_default_instance_;
class SViolationFeedback;
class SViolationFeedbackDefaultTypeInternal;
extern SViolationFeedbackDefaultTypeInternal _SViolationFeedback_default_instance_;
}  // namespace violationFeedback
PROTOBUF_NAMESPACE_OPEN
template<> ::violationFeedback::CViolationFeedback* Arena::CreateMaybeMessage<::violationFeedback::CViolationFeedback>(Arena*);
template<> ::violationFeedback::SViolationFeedback* Arena::CreateMaybeMessage<::violationFeedback::SViolationFeedback>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace violationFeedback {

enum ViolationFeedbackType : int {
  FeedbackDefault = 0,
  FeedbackPlayer = 1,
  FeedbackScene = 2,
  FeedbackAvatar = 3,
  FeedbackMjLeaveMsg = 4,
  ViolationFeedbackType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ViolationFeedbackType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ViolationFeedbackType_IsValid(int value);
constexpr ViolationFeedbackType ViolationFeedbackType_MIN = FeedbackDefault;
constexpr ViolationFeedbackType ViolationFeedbackType_MAX = FeedbackMjLeaveMsg;
constexpr int ViolationFeedbackType_ARRAYSIZE = ViolationFeedbackType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViolationFeedbackType_descriptor();
template<typename T>
inline const std::string& ViolationFeedbackType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViolationFeedbackType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViolationFeedbackType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViolationFeedbackType_descriptor(), enum_t_value);
}
inline bool ViolationFeedbackType_Parse(
    const std::string& name, ViolationFeedbackType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViolationFeedbackType>(
    ViolationFeedbackType_descriptor(), name, value);
}
// ===================================================================

class CViolationFeedback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:violationFeedback.CViolationFeedback) */ {
 public:
  CViolationFeedback();
  virtual ~CViolationFeedback();

  CViolationFeedback(const CViolationFeedback& from);
  CViolationFeedback(CViolationFeedback&& from) noexcept
    : CViolationFeedback() {
    *this = ::std::move(from);
  }

  inline CViolationFeedback& operator=(const CViolationFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline CViolationFeedback& operator=(CViolationFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CViolationFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CViolationFeedback* internal_default_instance() {
    return reinterpret_cast<const CViolationFeedback*>(
               &_CViolationFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CViolationFeedback& a, CViolationFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(CViolationFeedback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CViolationFeedback* New() const final {
    return CreateMaybeMessage<CViolationFeedback>(nullptr);
  }

  CViolationFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CViolationFeedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CViolationFeedback& from);
  void MergeFrom(const CViolationFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CViolationFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "violationFeedback.CViolationFeedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_violationFeedback_2eproto);
    return ::descriptor_table_violationFeedback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 3,
    kDescFieldNumber = 4,
    kTypeFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // string Tag = 3;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string Desc = 4;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .violationFeedback.ViolationFeedbackType Type = 1;
  void clear_type();
  ::violationFeedback::ViolationFeedbackType type() const;
  void set_type(::violationFeedback::ViolationFeedbackType value);
  private:
  ::violationFeedback::ViolationFeedbackType _internal_type() const;
  void _internal_set_type(::violationFeedback::ViolationFeedbackType value);
  public:

  // int32 SourceId = 2;
  void clear_sourceid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceid() const;
  void set_sourceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceid() const;
  void _internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:violationFeedback.CViolationFeedback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_violationFeedback_2eproto;
};
// -------------------------------------------------------------------

class SViolationFeedback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:violationFeedback.SViolationFeedback) */ {
 public:
  SViolationFeedback();
  virtual ~SViolationFeedback();

  SViolationFeedback(const SViolationFeedback& from);
  SViolationFeedback(SViolationFeedback&& from) noexcept
    : SViolationFeedback() {
    *this = ::std::move(from);
  }

  inline SViolationFeedback& operator=(const SViolationFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SViolationFeedback& operator=(SViolationFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SViolationFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SViolationFeedback* internal_default_instance() {
    return reinterpret_cast<const SViolationFeedback*>(
               &_SViolationFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SViolationFeedback& a, SViolationFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(SViolationFeedback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SViolationFeedback* New() const final {
    return CreateMaybeMessage<SViolationFeedback>(nullptr);
  }

  SViolationFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SViolationFeedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SViolationFeedback& from);
  void MergeFrom(const SViolationFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SViolationFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "violationFeedback.SViolationFeedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_violationFeedback_2eproto);
    return ::descriptor_table_violationFeedback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:violationFeedback.SViolationFeedback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_violationFeedback_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CViolationFeedback

// .violationFeedback.ViolationFeedbackType Type = 1;
inline void CViolationFeedback::clear_type() {
  type_ = 0;
}
inline ::violationFeedback::ViolationFeedbackType CViolationFeedback::_internal_type() const {
  return static_cast< ::violationFeedback::ViolationFeedbackType >(type_);
}
inline ::violationFeedback::ViolationFeedbackType CViolationFeedback::type() const {
  // @@protoc_insertion_point(field_get:violationFeedback.CViolationFeedback.Type)
  return _internal_type();
}
inline void CViolationFeedback::_internal_set_type(::violationFeedback::ViolationFeedbackType value) {
  
  type_ = value;
}
inline void CViolationFeedback::set_type(::violationFeedback::ViolationFeedbackType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:violationFeedback.CViolationFeedback.Type)
}

// int32 SourceId = 2;
inline void CViolationFeedback::clear_sourceid() {
  sourceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CViolationFeedback::_internal_sourceid() const {
  return sourceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CViolationFeedback::sourceid() const {
  // @@protoc_insertion_point(field_get:violationFeedback.CViolationFeedback.SourceId)
  return _internal_sourceid();
}
inline void CViolationFeedback::_internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceid_ = value;
}
inline void CViolationFeedback::set_sourceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:violationFeedback.CViolationFeedback.SourceId)
}

// string Tag = 3;
inline void CViolationFeedback::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CViolationFeedback::tag() const {
  // @@protoc_insertion_point(field_get:violationFeedback.CViolationFeedback.Tag)
  return _internal_tag();
}
inline void CViolationFeedback::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:violationFeedback.CViolationFeedback.Tag)
}
inline std::string* CViolationFeedback::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:violationFeedback.CViolationFeedback.Tag)
  return _internal_mutable_tag();
}
inline const std::string& CViolationFeedback::_internal_tag() const {
  return tag_.GetNoArena();
}
inline void CViolationFeedback::_internal_set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CViolationFeedback::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:violationFeedback.CViolationFeedback.Tag)
}
inline void CViolationFeedback::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:violationFeedback.CViolationFeedback.Tag)
}
inline void CViolationFeedback::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:violationFeedback.CViolationFeedback.Tag)
}
inline std::string* CViolationFeedback::_internal_mutable_tag() {
  
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CViolationFeedback::release_tag() {
  // @@protoc_insertion_point(field_release:violationFeedback.CViolationFeedback.Tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CViolationFeedback::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:violationFeedback.CViolationFeedback.Tag)
}

// string Desc = 4;
inline void CViolationFeedback::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CViolationFeedback::desc() const {
  // @@protoc_insertion_point(field_get:violationFeedback.CViolationFeedback.Desc)
  return _internal_desc();
}
inline void CViolationFeedback::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:violationFeedback.CViolationFeedback.Desc)
}
inline std::string* CViolationFeedback::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:violationFeedback.CViolationFeedback.Desc)
  return _internal_mutable_desc();
}
inline const std::string& CViolationFeedback::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void CViolationFeedback::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CViolationFeedback::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:violationFeedback.CViolationFeedback.Desc)
}
inline void CViolationFeedback::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:violationFeedback.CViolationFeedback.Desc)
}
inline void CViolationFeedback::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:violationFeedback.CViolationFeedback.Desc)
}
inline std::string* CViolationFeedback::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CViolationFeedback::release_desc() {
  // @@protoc_insertion_point(field_release:violationFeedback.CViolationFeedback.Desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CViolationFeedback::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:violationFeedback.CViolationFeedback.Desc)
}

// -------------------------------------------------------------------

// SViolationFeedback

// int32 code = 1;
inline void SViolationFeedback::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SViolationFeedback::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SViolationFeedback::code() const {
  // @@protoc_insertion_point(field_get:violationFeedback.SViolationFeedback.code)
  return _internal_code();
}
inline void SViolationFeedback::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SViolationFeedback::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:violationFeedback.SViolationFeedback.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace violationFeedback

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::violationFeedback::ViolationFeedbackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::violationFeedback::ViolationFeedbackType>() {
  return ::violationFeedback::ViolationFeedbackType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_violationFeedback_2eproto
