// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hiphopCeremony.proto

#include "hiphopCeremony.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hiphopCeremony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BHiphopNote_hiphopCeremony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hiphopCeremony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BHiphopStarBakAudio_hiphopCeremony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hiphopCeremony_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BHiphopSwitch_hiphopCeremony_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVector3_vector_2eproto;
namespace hiphop {
class CHiphopAwardPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHiphopAwardPrediction> _instance;
} _CHiphopAwardPrediction_default_instance_;
class SHiphopAwardPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopAwardPrediction> _instance;
} _SHiphopAwardPrediction_default_instance_;
class CHiphopNoteListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHiphopNoteList> _instance;
} _CHiphopNoteList_default_instance_;
class BHiphopNoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BHiphopNote> _instance;
} _BHiphopNote_default_instance_;
class SHiphopNoteListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopNoteList> _instance;
} _SHiphopNoteList_default_instance_;
class CHiphopNotePickupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHiphopNotePickup> _instance;
} _CHiphopNotePickup_default_instance_;
class SHiphopNotePickupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopNotePickup> _instance;
} _SHiphopNotePickup_default_instance_;
class BHiphopSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BHiphopSwitch> _instance;
} _BHiphopSwitch_default_instance_;
class SHiphopSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopSwitch> _instance;
} _SHiphopSwitch_default_instance_;
class CHiphopWarmupStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHiphopWarmupState> _instance;
} _CHiphopWarmupState_default_instance_;
class SHiphopWarmupStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopWarmupState> _instance;
} _SHiphopWarmupState_default_instance_;
class SHiphopCeremonyProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopCeremonyProcess> _instance;
} _SHiphopCeremonyProcess_default_instance_;
class SHiphopStarSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopStarSwitch> _instance;
} _SHiphopStarSwitch_default_instance_;
class CHiphopCeremonyStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHiphopCeremonyState> _instance;
} _CHiphopCeremonyState_default_instance_;
class BHiphopStarBakAudioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BHiphopStarBakAudio> _instance;
} _BHiphopStarBakAudio_default_instance_;
class SHiphopCeremonyStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopCeremonyState> _instance;
} _SHiphopCeremonyState_default_instance_;
class SHiphopPhotoRainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHiphopPhotoRain> _instance;
} _SHiphopPhotoRain_default_instance_;
}  // namespace hiphop
static void InitDefaultsscc_info_BHiphopNote_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_BHiphopNote_default_instance_;
    new (ptr) ::hiphop::BHiphopNote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::BHiphopNote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BHiphopNote_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BHiphopNote_hiphopCeremony_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_BHiphopStarBakAudio_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_BHiphopStarBakAudio_default_instance_;
    new (ptr) ::hiphop::BHiphopStarBakAudio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::BHiphopStarBakAudio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BHiphopStarBakAudio_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BHiphopStarBakAudio_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_BHiphopSwitch_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_BHiphopSwitch_default_instance_;
    new (ptr) ::hiphop::BHiphopSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::BHiphopSwitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BHiphopSwitch_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BHiphopSwitch_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_CHiphopAwardPrediction_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_CHiphopAwardPrediction_default_instance_;
    new (ptr) ::hiphop::CHiphopAwardPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::CHiphopAwardPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHiphopAwardPrediction_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHiphopAwardPrediction_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_CHiphopCeremonyState_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_CHiphopCeremonyState_default_instance_;
    new (ptr) ::hiphop::CHiphopCeremonyState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::CHiphopCeremonyState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHiphopCeremonyState_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHiphopCeremonyState_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_CHiphopNoteList_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_CHiphopNoteList_default_instance_;
    new (ptr) ::hiphop::CHiphopNoteList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::CHiphopNoteList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHiphopNoteList_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHiphopNoteList_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_CHiphopNotePickup_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_CHiphopNotePickup_default_instance_;
    new (ptr) ::hiphop::CHiphopNotePickup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::CHiphopNotePickup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHiphopNotePickup_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHiphopNotePickup_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_CHiphopWarmupState_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_CHiphopWarmupState_default_instance_;
    new (ptr) ::hiphop::CHiphopWarmupState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::CHiphopWarmupState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHiphopWarmupState_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHiphopWarmupState_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopAwardPrediction_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopAwardPrediction_default_instance_;
    new (ptr) ::hiphop::SHiphopAwardPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopAwardPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHiphopAwardPrediction_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHiphopAwardPrediction_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopCeremonyProcess_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopCeremonyProcess_default_instance_;
    new (ptr) ::hiphop::SHiphopCeremonyProcess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopCeremonyProcess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHiphopCeremonyProcess_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHiphopCeremonyProcess_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopCeremonyState_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopCeremonyState_default_instance_;
    new (ptr) ::hiphop::SHiphopCeremonyState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopCeremonyState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SHiphopCeremonyState_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SHiphopCeremonyState_hiphopCeremony_2eproto}, {
      &scc_info_BHiphopSwitch_hiphopCeremony_2eproto.base,
      &scc_info_BHiphopStarBakAudio_hiphopCeremony_2eproto.base,}};

static void InitDefaultsscc_info_SHiphopNoteList_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopNoteList_default_instance_;
    new (ptr) ::hiphop::SHiphopNoteList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopNoteList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SHiphopNoteList_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SHiphopNoteList_hiphopCeremony_2eproto}, {
      &scc_info_BHiphopNote_hiphopCeremony_2eproto.base,}};

static void InitDefaultsscc_info_SHiphopNotePickup_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopNotePickup_default_instance_;
    new (ptr) ::hiphop::SHiphopNotePickup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopNotePickup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHiphopNotePickup_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHiphopNotePickup_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopPhotoRain_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopPhotoRain_default_instance_;
    new (ptr) ::hiphop::SHiphopPhotoRain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopPhotoRain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHiphopPhotoRain_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHiphopPhotoRain_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopStarSwitch_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopStarSwitch_default_instance_;
    new (ptr) ::hiphop::SHiphopStarSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopStarSwitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHiphopStarSwitch_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHiphopStarSwitch_hiphopCeremony_2eproto}, {}};

static void InitDefaultsscc_info_SHiphopSwitch_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopSwitch_default_instance_;
    new (ptr) ::hiphop::SHiphopSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopSwitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SHiphopSwitch_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SHiphopSwitch_hiphopCeremony_2eproto}, {
      &scc_info_BHiphopSwitch_hiphopCeremony_2eproto.base,}};

static void InitDefaultsscc_info_SHiphopWarmupState_hiphopCeremony_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hiphop::_SHiphopWarmupState_default_instance_;
    new (ptr) ::hiphop::SHiphopWarmupState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hiphop::SHiphopWarmupState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SHiphopWarmupState_hiphopCeremony_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SHiphopWarmupState_hiphopCeremony_2eproto}, {
      &scc_info_BHiphopSwitch_hiphopCeremony_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hiphopCeremony_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_hiphopCeremony_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hiphopCeremony_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hiphopCeremony_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopAwardPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopAwardPrediction, awardid_),
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopAwardPrediction, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopAwardPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopAwardPrediction, goodsname_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopAwardPrediction, goodspic_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopAwardPrediction, goodsdesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopNoteList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopNote, index_),
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopNote, position_),
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopNote, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopNoteList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopNoteList, notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopNotePickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopNotePickup, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopNotePickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopNotePickup, res_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopNotePickup, index_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopNotePickup, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopSwitch, curr_),
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopSwitch, on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopSwitch, bswitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopWarmupState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopWarmupState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopWarmupState, switchlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyProcess, curr_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyProcess, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopStarSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopStarSwitch, star_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopStarSwitch, type_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopStarSwitch, on_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopStarSwitch, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::CHiphopCeremonyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopStarBakAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopStarBakAudio, star_),
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopStarBakAudio, index_),
  PROTOBUF_FIELD_OFFSET(::hiphop::BHiphopStarBakAudio, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyState, switchlist_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyState, curr_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyState, starttime_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyState, voiceonstars_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyState, stageonstars_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyState, hasawardstars_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopCeremonyState, staraudio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopPhotoRain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopPhotoRain, goodsid_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopPhotoRain, goodstype_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopPhotoRain, goodsname_),
  PROTOBUF_FIELD_OFFSET(::hiphop::SHiphopPhotoRain, goodspic_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hiphop::CHiphopAwardPrediction)},
  { 7, -1, sizeof(::hiphop::SHiphopAwardPrediction)},
  { 15, -1, sizeof(::hiphop::CHiphopNoteList)},
  { 20, -1, sizeof(::hiphop::BHiphopNote)},
  { 28, -1, sizeof(::hiphop::SHiphopNoteList)},
  { 34, -1, sizeof(::hiphop::CHiphopNotePickup)},
  { 40, -1, sizeof(::hiphop::SHiphopNotePickup)},
  { 48, -1, sizeof(::hiphop::BHiphopSwitch)},
  { 55, -1, sizeof(::hiphop::SHiphopSwitch)},
  { 61, -1, sizeof(::hiphop::CHiphopWarmupState)},
  { 66, -1, sizeof(::hiphop::SHiphopWarmupState)},
  { 72, -1, sizeof(::hiphop::SHiphopCeremonyProcess)},
  { 79, -1, sizeof(::hiphop::SHiphopStarSwitch)},
  { 88, -1, sizeof(::hiphop::CHiphopCeremonyState)},
  { 93, -1, sizeof(::hiphop::BHiphopStarBakAudio)},
  { 101, -1, sizeof(::hiphop::SHiphopCeremonyState)},
  { 113, -1, sizeof(::hiphop::SHiphopPhotoRain)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_CHiphopAwardPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopAwardPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_CHiphopNoteList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_BHiphopNote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopNoteList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_CHiphopNotePickup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopNotePickup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_BHiphopSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_CHiphopWarmupState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopWarmupState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopCeremonyProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopStarSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_CHiphopCeremonyState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_BHiphopStarBakAudio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopCeremonyState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hiphop::_SHiphopPhotoRain_default_instance_),
};

const char descriptor_table_protodef_hiphopCeremony_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024hiphopCeremony.proto\022\006hiphop\032\014vector.p"
  "roto\"8\n\026CHiphopAwardPrediction\022\017\n\007awardI"
  "d\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\"P\n\026SHiphopAwardPr"
  "ediction\022\021\n\tgoodsName\030\001 \001(\t\022\020\n\010goodsPic\030"
  "\002 \001(\t\022\021\n\tgoodsDesc\030\003 \001(\t\"\021\n\017CHiphopNoteL"
  "ist\"d\n\013BHiphopNote\022\r\n\005index\030\001 \001(\005\022\"\n\010pos"
  "ition\030\002 \001(\0132\020.vector.PVector3\022\"\n\010rotatio"
  "n\030\003 \001(\0132\020.vector.PVector3\"5\n\017SHiphopNote"
  "List\022\"\n\005notes\030\001 \003(\0132\023.hiphop.BHiphopNote"
  "\"\"\n\021CHiphopNotePickup\022\r\n\005index\030\001 \001(\005\"<\n\021"
  "SHiphopNotePickup\022\013\n\003res\030\001 \001(\005\022\r\n\005index\030"
  "\002 \001(\005\022\013\n\003uid\030\003 \001(\005\"\?\n\rBHiphopSwitch\022\"\n\004c"
  "urr\030\001 \001(\0162\024.hiphop.HiphopSwitch\022\n\n\002on\030\002 "
  "\001(\010\"7\n\rSHiphopSwitch\022&\n\007bSwitch\030\001 \001(\0132\025."
  "hiphop.BHiphopSwitch\"\024\n\022CHiphopWarmupSta"
  "te\"\?\n\022SHiphopWarmupState\022)\n\nswitchList\030\001"
  " \003(\0132\025.hiphop.BHiphopSwitch\"P\n\026SHiphopCe"
  "remonyProcess\022#\n\004curr\030\001 \001(\0162\025.hiphop.Hip"
  "hopProcess\022\021\n\tstartTime\030\002 \001(\005\"^\n\021SHiphop"
  "StarSwitch\022 \n\004star\030\001 \001(\0162\022.hiphop.Hiphop"
  "Star\022\014\n\004type\030\002 \001(\005\022\n\n\002on\030\003 \001(\010\022\r\n\005index\030"
  "\004 \001(\005\"\026\n\024CHiphopCeremonyState\"Y\n\023BHiphop"
  "StarBakAudio\022 \n\004star\030\001 \001(\0162\022.hiphop.Hiph"
  "opStar\022\r\n\005index\030\002 \001(\005\022\021\n\tstartTime\030\003 \001(\005"
  "\"\250\002\n\024SHiphopCeremonyState\022)\n\nswitchList\030"
  "\001 \003(\0132\025.hiphop.BHiphopSwitch\022#\n\004curr\030\002 \001"
  "(\0162\025.hiphop.HiphopProcess\022\021\n\tstartTime\030\003"
  " \001(\005\022(\n\014voiceOnStars\030\004 \003(\0162\022.hiphop.Hiph"
  "opStar\022(\n\014stageOnStars\030\005 \003(\0162\022.hiphop.Hi"
  "phopStar\022)\n\rhasAwardStars\030\006 \003(\0162\022.hiphop"
  ".HiphopStar\022.\n\tstarAudio\030\007 \001(\0132\033.hiphop."
  "BHiphopStarBakAudio\"[\n\020SHiphopPhotoRain\022"
  "\017\n\007goodsId\030\001 \001(\005\022\021\n\tgoodsType\030\002 \001(\005\022\021\n\tg"
  "oodsName\030\003 \001(\t\022\020\n\010goodsPic\030\004 \001(\t*d\n\014Hiph"
  "opSwitch\022\013\n\007Unknown\020\000\022\017\n\013WarmupVideo\020\001\022\016"
  "\n\nPortalOpen\020\002\022\013\n\007PhotoUI\020\003\022\n\n\006GiftUI\020\004\022"
  "\r\n\tRedCarpet\020\005*\364\n\n\rHiphopProcess\022\t\n\005Rese"
  "t\020\000\022\016\n\nBeginVideo\020\004\022\022\n\016OpeningRemarks\020\005\022"
  "\023\n\017SongRefireStart\020\006\022\020\n\014BestRapMVVCR\020\007\022\020"
  "\n\014BestRapMVRes\020\010\022\021\n\rBestLyricsVCR\020\t\022\021\n\rB"
  "estLyricsRes\020\n\022\022\n\016BestComposeVCR\020\013\022\022\n\016Be"
  "stComposeRes\020\014\022\016\n\nBestRapVCR\020\r\022\016\n\nBestRa"
  "pRes\020\016\022\023\n\017BestRapAlbumVCR\020\017\022\023\n\017BestRapAl"
  "bumRes\020\020\022\027\n\023BestArtistAgencyVCR\020\021\022\027\n\023Bes"
  "tArtistAgencyRes\020\022\022\030\n\024BestMusicProducerV"
  "CR\020\023\022\030\n\024BestMusicProducerRes\020\024\022\023\n\017BestLy"
  "ricistVCR\020\025\022\023\n\017BestLyricistRes\020\026\022\024\n\020Song"
  "MontageStart\020\027\022\022\n\016SongMontageEnd\020\030\022 \n\034Mo"
  "stPopularRapRecordLabelVCR\020\031\022 \n\034MostPopu"
  "larRapRecordLabelRes\020\032\022%\n!MostPopularCol"
  "laborativeSingleVCR\020\033\022%\n!MostPopularColl"
  "aborativeSingleRes\020\034\022\032\n\026MostPopularNewco"
  "merVCR\020\035\022\032\n\026MostPopularNewcomerRes\020\036\022\030\n\024"
  "MostPopularSingleVCR\020\037\022\030\n\024MostPopularSin"
  "gleRes\020 \022\034\n\030MostPopularMaleSingerVCR\020!\022\034"
  "\n\030MostPopularMaleSingerRes\020\"\022\036\n\032MostPopu"
  "larFemaleSingerVCR\020#\022\036\n\032MostPopularFemal"
  "eSingerRes\020$\022\027\n\023SongBurnMeDownStart\020%\022\025\n"
  "\021SongBurnMeDownEnd\020&\022\032\n\026AnnualPioneerArt"
  "istVCR\020\'\022\032\n\026AnnualCommendArtistVCR\020(\022\026\n\022"
  "AnnualNewArtistVCR\020)\022\030\n\024AnnualBreakArtis"
  "tVCR\020*\022\034\n\030AnnualVarietyRapStageVCR\020+\022 \n\034"
  "AnnualMediaFavoriteArtistVCR\020,\022\033\n\027Annual"
  "CharismaArtistVCR\020-\022\030\n\024AnnualModelArtist"
  "VCR\020.\022\030\n\024SongTenToesDownStart\020/\022\026\n\022SongT"
  "enToesDownEnd\0200\022\033\n\027AnnualAlmightyArtistV"
  "CR\0201\022\036\n\032AnnualInfluentialArtistVCR\0202\022\033\n\027"
  "AnnualValuableArtistVCR\0203\022\026\n\022AnnualTopAr"
  "tistVCR\0204\022\026\n\022AnnualRapSingleVCR\0205\022\025\n\021Ann"
  "ualRapAlbumVCR\0206\022\026\n\022AnnualRapArtistVCR\0207"
  "\022\014\n\010Firework\020:\022\017\n\013CeremonyEnd\0208\022\024\n\020MJCon"
  "certTrailer\0209*\342\004\n\nHiphopStar\022\023\n\017HiphopSt"
  "ar_None\020\000\022\026\n\022HiphopStar_Pharaoh\020\001\022\031\n\025Hip"
  "hopStar_XuZhenZhen\020\002\022\027\n\023HiphopStar_Dough"
  "Boy\020\003\022\031\n\025HiphopStar_YangBuLaDe\020\004\022\024\n\020Hiph"
  "opStar_Hanji\020\005\022\027\n\023HiphopStar_YuZheHao\020\006\022"
  "\027\n\023HiphopStar_LiChenXi\020\007\022\025\n\021HiphopStar_D"
  "oggie\020\010\022\032\n\026HiphopStar_DengDianGuo\020\t\022\031\n\025H"
  "iphopStar_ZhangZiHao\020\n\022\027\n\023HiphopStar_Lil"
  "Howcy\020\013\022\033\n\027HiphopStar_XiaoJingLing\020\014\022\025\n\021"
  "HiphopStar_LuoYan\020\r\022\023\n\017HiphopStar_KASS\020\016"
  "\022\022\n\016HiphopStar_CDE\020\017\022\023\n\017HiphopStar_PACT\020"
  "\020\022\025\n\021HiphopStar_Vinida\020\021\022\032\n\026HiphopStar_G"
  "oodMorning\020\022\022\023\n\017HiphopStar_VaVa\020\023\022\022\n\016Hip"
  "hopStar_AIR\020\024\022\022\n\016HiphopStar_GAI\020\025\022\026\n\022Hip"
  "hopStar_ShengYu\020\026\022\026\n\022HiphopStar_LiuCong\020"
  "\027\022\027\n\023HiphopStar_YangHeSu\020\030B3\n\030com.dayou."
  "space.protobufB\016HiphopCeremonyZ\007./pb;pbb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hiphopCeremony_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hiphopCeremony_2eproto_sccs[17] = {
  &scc_info_BHiphopNote_hiphopCeremony_2eproto.base,
  &scc_info_BHiphopStarBakAudio_hiphopCeremony_2eproto.base,
  &scc_info_BHiphopSwitch_hiphopCeremony_2eproto.base,
  &scc_info_CHiphopAwardPrediction_hiphopCeremony_2eproto.base,
  &scc_info_CHiphopCeremonyState_hiphopCeremony_2eproto.base,
  &scc_info_CHiphopNoteList_hiphopCeremony_2eproto.base,
  &scc_info_CHiphopNotePickup_hiphopCeremony_2eproto.base,
  &scc_info_CHiphopWarmupState_hiphopCeremony_2eproto.base,
  &scc_info_SHiphopAwardPrediction_hiphopCeremony_2eproto.base,
  &scc_info_SHiphopCeremonyProcess_hiphopCeremony_2eproto.base,
  &scc_info_SHiphopCeremonyState_hiphopCeremony_2eproto.base,
  &scc_info_SHiphopNoteList_hiphopCeremony_2eproto.base,
  &scc_info_SHiphopNotePickup_hiphopCeremony_2eproto.base,
  &scc_info_SHiphopPhotoRain_hiphopCeremony_2eproto.base,
  &scc_info_SHiphopStarSwitch_hiphopCeremony_2eproto.base,
  &scc_info_SHiphopSwitch_hiphopCeremony_2eproto.base,
  &scc_info_SHiphopWarmupState_hiphopCeremony_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hiphopCeremony_2eproto_once;
static bool descriptor_table_hiphopCeremony_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hiphopCeremony_2eproto = {
  &descriptor_table_hiphopCeremony_2eproto_initialized, descriptor_table_protodef_hiphopCeremony_2eproto, "hiphopCeremony.proto", 3527,
  &descriptor_table_hiphopCeremony_2eproto_once, descriptor_table_hiphopCeremony_2eproto_sccs, descriptor_table_hiphopCeremony_2eproto_deps, 17, 1,
  schemas, file_default_instances, TableStruct_hiphopCeremony_2eproto::offsets,
  file_level_metadata_hiphopCeremony_2eproto, 17, file_level_enum_descriptors_hiphopCeremony_2eproto, file_level_service_descriptors_hiphopCeremony_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hiphopCeremony_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hiphopCeremony_2eproto), true);
namespace hiphop {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HiphopSwitch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hiphopCeremony_2eproto);
  return file_level_enum_descriptors_hiphopCeremony_2eproto[0];
}
bool HiphopSwitch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HiphopProcess_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hiphopCeremony_2eproto);
  return file_level_enum_descriptors_hiphopCeremony_2eproto[1];
}
bool HiphopProcess_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HiphopStar_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hiphopCeremony_2eproto);
  return file_level_enum_descriptors_hiphopCeremony_2eproto[2];
}
bool HiphopStar_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CHiphopAwardPrediction::InitAsDefaultInstance() {
}
class CHiphopAwardPrediction::_Internal {
 public:
};

CHiphopAwardPrediction::CHiphopAwardPrediction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.CHiphopAwardPrediction)
}
CHiphopAwardPrediction::CHiphopAwardPrediction(const CHiphopAwardPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&awardid_, &from.awardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&awardid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:hiphop.CHiphopAwardPrediction)
}

void CHiphopAwardPrediction::SharedCtor() {
  ::memset(&awardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&awardid_)) + sizeof(index_));
}

CHiphopAwardPrediction::~CHiphopAwardPrediction() {
  // @@protoc_insertion_point(destructor:hiphop.CHiphopAwardPrediction)
  SharedDtor();
}

void CHiphopAwardPrediction::SharedDtor() {
}

void CHiphopAwardPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHiphopAwardPrediction& CHiphopAwardPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHiphopAwardPrediction_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void CHiphopAwardPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.CHiphopAwardPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&awardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&awardid_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

const char* CHiphopAwardPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 awardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          awardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHiphopAwardPrediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.CHiphopAwardPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 awardId = 1;
  if (this->awardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_awardid(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.CHiphopAwardPrediction)
  return target;
}

size_t CHiphopAwardPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.CHiphopAwardPrediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 awardId = 1;
  if (this->awardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_awardid());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHiphopAwardPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.CHiphopAwardPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CHiphopAwardPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHiphopAwardPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.CHiphopAwardPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.CHiphopAwardPrediction)
    MergeFrom(*source);
  }
}

void CHiphopAwardPrediction::MergeFrom(const CHiphopAwardPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.CHiphopAwardPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.awardid() != 0) {
    _internal_set_awardid(from._internal_awardid());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void CHiphopAwardPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.CHiphopAwardPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHiphopAwardPrediction::CopyFrom(const CHiphopAwardPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.CHiphopAwardPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHiphopAwardPrediction::IsInitialized() const {
  return true;
}

void CHiphopAwardPrediction::InternalSwap(CHiphopAwardPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(awardid_, other->awardid_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHiphopAwardPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopAwardPrediction::InitAsDefaultInstance() {
}
class SHiphopAwardPrediction::_Internal {
 public:
};

SHiphopAwardPrediction::SHiphopAwardPrediction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopAwardPrediction)
}
SHiphopAwardPrediction::SHiphopAwardPrediction(const SHiphopAwardPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goodsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goodsname().empty()) {
    goodsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodsname_);
  }
  goodspic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goodspic().empty()) {
    goodspic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodspic_);
  }
  goodsdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goodsdesc().empty()) {
    goodsdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodsdesc_);
  }
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopAwardPrediction)
}

void SHiphopAwardPrediction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHiphopAwardPrediction_hiphopCeremony_2eproto.base);
  goodsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodspic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodsdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SHiphopAwardPrediction::~SHiphopAwardPrediction() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopAwardPrediction)
  SharedDtor();
}

void SHiphopAwardPrediction::SharedDtor() {
  goodsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodspic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodsdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SHiphopAwardPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopAwardPrediction& SHiphopAwardPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopAwardPrediction_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void SHiphopAwardPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopAwardPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodspic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodsdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SHiphopAwardPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string goodsName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_goodsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hiphop.SHiphopAwardPrediction.goodsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string goodsPic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_goodspic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hiphop.SHiphopAwardPrediction.goodsPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string goodsDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_goodsdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hiphop.SHiphopAwardPrediction.goodsDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopAwardPrediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopAwardPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string goodsName = 1;
  if (this->goodsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goodsname().data(), static_cast<int>(this->_internal_goodsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hiphop.SHiphopAwardPrediction.goodsName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_goodsname(), target);
  }

  // string goodsPic = 2;
  if (this->goodspic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goodspic().data(), static_cast<int>(this->_internal_goodspic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hiphop.SHiphopAwardPrediction.goodsPic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_goodspic(), target);
  }

  // string goodsDesc = 3;
  if (this->goodsdesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goodsdesc().data(), static_cast<int>(this->_internal_goodsdesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hiphop.SHiphopAwardPrediction.goodsDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_goodsdesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopAwardPrediction)
  return target;
}

size_t SHiphopAwardPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopAwardPrediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string goodsName = 1;
  if (this->goodsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goodsname());
  }

  // string goodsPic = 2;
  if (this->goodspic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goodspic());
  }

  // string goodsDesc = 3;
  if (this->goodsdesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goodsdesc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopAwardPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopAwardPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopAwardPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopAwardPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopAwardPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopAwardPrediction)
    MergeFrom(*source);
  }
}

void SHiphopAwardPrediction::MergeFrom(const SHiphopAwardPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopAwardPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsname().size() > 0) {

    goodsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodsname_);
  }
  if (from.goodspic().size() > 0) {

    goodspic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodspic_);
  }
  if (from.goodsdesc().size() > 0) {

    goodsdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodsdesc_);
  }
}

void SHiphopAwardPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopAwardPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopAwardPrediction::CopyFrom(const SHiphopAwardPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopAwardPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopAwardPrediction::IsInitialized() const {
  return true;
}

void SHiphopAwardPrediction::InternalSwap(SHiphopAwardPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  goodsname_.Swap(&other->goodsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  goodspic_.Swap(&other->goodspic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  goodsdesc_.Swap(&other->goodsdesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopAwardPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHiphopNoteList::InitAsDefaultInstance() {
}
class CHiphopNoteList::_Internal {
 public:
};

CHiphopNoteList::CHiphopNoteList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.CHiphopNoteList)
}
CHiphopNoteList::CHiphopNoteList(const CHiphopNoteList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hiphop.CHiphopNoteList)
}

void CHiphopNoteList::SharedCtor() {
}

CHiphopNoteList::~CHiphopNoteList() {
  // @@protoc_insertion_point(destructor:hiphop.CHiphopNoteList)
  SharedDtor();
}

void CHiphopNoteList::SharedDtor() {
}

void CHiphopNoteList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHiphopNoteList& CHiphopNoteList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHiphopNoteList_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void CHiphopNoteList::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.CHiphopNoteList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CHiphopNoteList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHiphopNoteList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.CHiphopNoteList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.CHiphopNoteList)
  return target;
}

size_t CHiphopNoteList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.CHiphopNoteList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHiphopNoteList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.CHiphopNoteList)
  GOOGLE_DCHECK_NE(&from, this);
  const CHiphopNoteList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHiphopNoteList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.CHiphopNoteList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.CHiphopNoteList)
    MergeFrom(*source);
  }
}

void CHiphopNoteList::MergeFrom(const CHiphopNoteList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.CHiphopNoteList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHiphopNoteList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.CHiphopNoteList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHiphopNoteList::CopyFrom(const CHiphopNoteList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.CHiphopNoteList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHiphopNoteList::IsInitialized() const {
  return true;
}

void CHiphopNoteList::InternalSwap(CHiphopNoteList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHiphopNoteList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BHiphopNote::InitAsDefaultInstance() {
  ::hiphop::_BHiphopNote_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::hiphop::_BHiphopNote_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class BHiphopNote::_Internal {
 public:
  static const ::vector::PVector3& position(const BHiphopNote* msg);
  static const ::vector::PVector3& rotation(const BHiphopNote* msg);
};

const ::vector::PVector3&
BHiphopNote::_Internal::position(const BHiphopNote* msg) {
  return *msg->position_;
}
const ::vector::PVector3&
BHiphopNote::_Internal::rotation(const BHiphopNote* msg) {
  return *msg->rotation_;
}
void BHiphopNote::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void BHiphopNote::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
BHiphopNote::BHiphopNote()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.BHiphopNote)
}
BHiphopNote::BHiphopNote(const BHiphopNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::vector::PVector3(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:hiphop.BHiphopNote)
}

void BHiphopNote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BHiphopNote_hiphopCeremony_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&position_)) + sizeof(index_));
}

BHiphopNote::~BHiphopNote() {
  // @@protoc_insertion_point(destructor:hiphop.BHiphopNote)
  SharedDtor();
}

void BHiphopNote::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void BHiphopNote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BHiphopNote& BHiphopNote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BHiphopNote_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void BHiphopNote::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.BHiphopNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  index_ = 0;
  _internal_metadata_.Clear();
}

const char* BHiphopNote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BHiphopNote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.BHiphopNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .vector.PVector3 rotation = 3;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.BHiphopNote)
  return target;
}

size_t BHiphopNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.BHiphopNote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .vector.PVector3 rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BHiphopNote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.BHiphopNote)
  GOOGLE_DCHECK_NE(&from, this);
  const BHiphopNote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BHiphopNote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.BHiphopNote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.BHiphopNote)
    MergeFrom(*source);
  }
}

void BHiphopNote::MergeFrom(const BHiphopNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.BHiphopNote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::vector::PVector3::MergeFrom(from._internal_rotation());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void BHiphopNote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.BHiphopNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BHiphopNote::CopyFrom(const BHiphopNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.BHiphopNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BHiphopNote::IsInitialized() const {
  return true;
}

void BHiphopNote::InternalSwap(BHiphopNote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BHiphopNote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopNoteList::InitAsDefaultInstance() {
}
class SHiphopNoteList::_Internal {
 public:
};

SHiphopNoteList::SHiphopNoteList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopNoteList)
}
SHiphopNoteList::SHiphopNoteList(const SHiphopNoteList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      notes_(from.notes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopNoteList)
}

void SHiphopNoteList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHiphopNoteList_hiphopCeremony_2eproto.base);
}

SHiphopNoteList::~SHiphopNoteList() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopNoteList)
  SharedDtor();
}

void SHiphopNoteList::SharedDtor() {
}

void SHiphopNoteList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopNoteList& SHiphopNoteList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopNoteList_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void SHiphopNoteList::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopNoteList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notes_.Clear();
  _internal_metadata_.Clear();
}

const char* SHiphopNoteList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hiphop.BHiphopNote notes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopNoteList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopNoteList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hiphop.BHiphopNote notes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopNoteList)
  return target;
}

size_t SHiphopNoteList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopNoteList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hiphop.BHiphopNote notes = 1;
  total_size += 1UL * this->_internal_notes_size();
  for (const auto& msg : this->notes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopNoteList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopNoteList)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopNoteList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopNoteList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopNoteList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopNoteList)
    MergeFrom(*source);
  }
}

void SHiphopNoteList::MergeFrom(const SHiphopNoteList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopNoteList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notes_.MergeFrom(from.notes_);
}

void SHiphopNoteList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopNoteList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopNoteList::CopyFrom(const SHiphopNoteList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopNoteList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopNoteList::IsInitialized() const {
  return true;
}

void SHiphopNoteList::InternalSwap(SHiphopNoteList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  notes_.InternalSwap(&other->notes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopNoteList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHiphopNotePickup::InitAsDefaultInstance() {
}
class CHiphopNotePickup::_Internal {
 public:
};

CHiphopNotePickup::CHiphopNotePickup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.CHiphopNotePickup)
}
CHiphopNotePickup::CHiphopNotePickup(const CHiphopNotePickup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:hiphop.CHiphopNotePickup)
}

void CHiphopNotePickup::SharedCtor() {
  index_ = 0;
}

CHiphopNotePickup::~CHiphopNotePickup() {
  // @@protoc_insertion_point(destructor:hiphop.CHiphopNotePickup)
  SharedDtor();
}

void CHiphopNotePickup::SharedDtor() {
}

void CHiphopNotePickup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHiphopNotePickup& CHiphopNotePickup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHiphopNotePickup_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void CHiphopNotePickup::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.CHiphopNotePickup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _internal_metadata_.Clear();
}

const char* CHiphopNotePickup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHiphopNotePickup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.CHiphopNotePickup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.CHiphopNotePickup)
  return target;
}

size_t CHiphopNotePickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.CHiphopNotePickup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHiphopNotePickup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.CHiphopNotePickup)
  GOOGLE_DCHECK_NE(&from, this);
  const CHiphopNotePickup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHiphopNotePickup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.CHiphopNotePickup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.CHiphopNotePickup)
    MergeFrom(*source);
  }
}

void CHiphopNotePickup::MergeFrom(const CHiphopNotePickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.CHiphopNotePickup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void CHiphopNotePickup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.CHiphopNotePickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHiphopNotePickup::CopyFrom(const CHiphopNotePickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.CHiphopNotePickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHiphopNotePickup::IsInitialized() const {
  return true;
}

void CHiphopNotePickup::InternalSwap(CHiphopNotePickup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHiphopNotePickup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopNotePickup::InitAsDefaultInstance() {
}
class SHiphopNotePickup::_Internal {
 public:
};

SHiphopNotePickup::SHiphopNotePickup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopNotePickup)
}
SHiphopNotePickup::SHiphopNotePickup(const SHiphopNotePickup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&res_, &from.res_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&res_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopNotePickup)
}

void SHiphopNotePickup::SharedCtor() {
  ::memset(&res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&res_)) + sizeof(uid_));
}

SHiphopNotePickup::~SHiphopNotePickup() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopNotePickup)
  SharedDtor();
}

void SHiphopNotePickup::SharedDtor() {
}

void SHiphopNotePickup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopNotePickup& SHiphopNotePickup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopNotePickup_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void SHiphopNotePickup::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopNotePickup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&res_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SHiphopNotePickup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopNotePickup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopNotePickup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopNotePickup)
  return target;
}

size_t SHiphopNotePickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopNotePickup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopNotePickup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopNotePickup)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopNotePickup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopNotePickup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopNotePickup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopNotePickup)
    MergeFrom(*source);
  }
}

void SHiphopNotePickup::MergeFrom(const SHiphopNotePickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopNotePickup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SHiphopNotePickup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopNotePickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopNotePickup::CopyFrom(const SHiphopNotePickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopNotePickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopNotePickup::IsInitialized() const {
  return true;
}

void SHiphopNotePickup::InternalSwap(SHiphopNotePickup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(res_, other->res_);
  swap(index_, other->index_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopNotePickup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BHiphopSwitch::InitAsDefaultInstance() {
}
class BHiphopSwitch::_Internal {
 public:
};

BHiphopSwitch::BHiphopSwitch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.BHiphopSwitch)
}
BHiphopSwitch::BHiphopSwitch(const BHiphopSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curr_, &from.curr_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_) -
    reinterpret_cast<char*>(&curr_)) + sizeof(on_));
  // @@protoc_insertion_point(copy_constructor:hiphop.BHiphopSwitch)
}

void BHiphopSwitch::SharedCtor() {
  ::memset(&curr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_) -
      reinterpret_cast<char*>(&curr_)) + sizeof(on_));
}

BHiphopSwitch::~BHiphopSwitch() {
  // @@protoc_insertion_point(destructor:hiphop.BHiphopSwitch)
  SharedDtor();
}

void BHiphopSwitch::SharedDtor() {
}

void BHiphopSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BHiphopSwitch& BHiphopSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BHiphopSwitch_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void BHiphopSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.BHiphopSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_) -
      reinterpret_cast<char*>(&curr_)) + sizeof(on_));
  _internal_metadata_.Clear();
}

const char* BHiphopSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .hiphop.HiphopSwitch curr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_curr(static_cast<::hiphop::HiphopSwitch>(val));
        } else goto handle_unusual;
        continue;
      // bool on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BHiphopSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.BHiphopSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hiphop.HiphopSwitch curr = 1;
  if (this->curr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_curr(), target);
  }

  // bool on = 2;
  if (this->on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.BHiphopSwitch)
  return target;
}

size_t BHiphopSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.BHiphopSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hiphop.HiphopSwitch curr = 1;
  if (this->curr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_curr());
  }

  // bool on = 2;
  if (this->on() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BHiphopSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.BHiphopSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const BHiphopSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BHiphopSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.BHiphopSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.BHiphopSwitch)
    MergeFrom(*source);
  }
}

void BHiphopSwitch::MergeFrom(const BHiphopSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.BHiphopSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curr() != 0) {
    _internal_set_curr(from._internal_curr());
  }
  if (from.on() != 0) {
    _internal_set_on(from._internal_on());
  }
}

void BHiphopSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.BHiphopSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BHiphopSwitch::CopyFrom(const BHiphopSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.BHiphopSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BHiphopSwitch::IsInitialized() const {
  return true;
}

void BHiphopSwitch::InternalSwap(BHiphopSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(curr_, other->curr_);
  swap(on_, other->on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BHiphopSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopSwitch::InitAsDefaultInstance() {
  ::hiphop::_SHiphopSwitch_default_instance_._instance.get_mutable()->bswitch_ = const_cast< ::hiphop::BHiphopSwitch*>(
      ::hiphop::BHiphopSwitch::internal_default_instance());
}
class SHiphopSwitch::_Internal {
 public:
  static const ::hiphop::BHiphopSwitch& bswitch(const SHiphopSwitch* msg);
};

const ::hiphop::BHiphopSwitch&
SHiphopSwitch::_Internal::bswitch(const SHiphopSwitch* msg) {
  return *msg->bswitch_;
}
SHiphopSwitch::SHiphopSwitch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopSwitch)
}
SHiphopSwitch::SHiphopSwitch(const SHiphopSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_bswitch()) {
    bswitch_ = new ::hiphop::BHiphopSwitch(*from.bswitch_);
  } else {
    bswitch_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopSwitch)
}

void SHiphopSwitch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHiphopSwitch_hiphopCeremony_2eproto.base);
  bswitch_ = nullptr;
}

SHiphopSwitch::~SHiphopSwitch() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopSwitch)
  SharedDtor();
}

void SHiphopSwitch::SharedDtor() {
  if (this != internal_default_instance()) delete bswitch_;
}

void SHiphopSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopSwitch& SHiphopSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopSwitch_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void SHiphopSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && bswitch_ != nullptr) {
    delete bswitch_;
  }
  bswitch_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SHiphopSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .hiphop.BHiphopSwitch bSwitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bswitch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hiphop.BHiphopSwitch bSwitch = 1;
  if (this->has_bswitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bswitch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopSwitch)
  return target;
}

size_t SHiphopSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hiphop.BHiphopSwitch bSwitch = 1;
  if (this->has_bswitch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bswitch_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopSwitch)
    MergeFrom(*source);
  }
}

void SHiphopSwitch::MergeFrom(const SHiphopSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bswitch()) {
    _internal_mutable_bswitch()->::hiphop::BHiphopSwitch::MergeFrom(from._internal_bswitch());
  }
}

void SHiphopSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopSwitch::CopyFrom(const SHiphopSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopSwitch::IsInitialized() const {
  return true;
}

void SHiphopSwitch::InternalSwap(SHiphopSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bswitch_, other->bswitch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHiphopWarmupState::InitAsDefaultInstance() {
}
class CHiphopWarmupState::_Internal {
 public:
};

CHiphopWarmupState::CHiphopWarmupState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.CHiphopWarmupState)
}
CHiphopWarmupState::CHiphopWarmupState(const CHiphopWarmupState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hiphop.CHiphopWarmupState)
}

void CHiphopWarmupState::SharedCtor() {
}

CHiphopWarmupState::~CHiphopWarmupState() {
  // @@protoc_insertion_point(destructor:hiphop.CHiphopWarmupState)
  SharedDtor();
}

void CHiphopWarmupState::SharedDtor() {
}

void CHiphopWarmupState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHiphopWarmupState& CHiphopWarmupState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHiphopWarmupState_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void CHiphopWarmupState::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.CHiphopWarmupState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CHiphopWarmupState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHiphopWarmupState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.CHiphopWarmupState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.CHiphopWarmupState)
  return target;
}

size_t CHiphopWarmupState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.CHiphopWarmupState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHiphopWarmupState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.CHiphopWarmupState)
  GOOGLE_DCHECK_NE(&from, this);
  const CHiphopWarmupState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHiphopWarmupState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.CHiphopWarmupState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.CHiphopWarmupState)
    MergeFrom(*source);
  }
}

void CHiphopWarmupState::MergeFrom(const CHiphopWarmupState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.CHiphopWarmupState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHiphopWarmupState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.CHiphopWarmupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHiphopWarmupState::CopyFrom(const CHiphopWarmupState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.CHiphopWarmupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHiphopWarmupState::IsInitialized() const {
  return true;
}

void CHiphopWarmupState::InternalSwap(CHiphopWarmupState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHiphopWarmupState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopWarmupState::InitAsDefaultInstance() {
}
class SHiphopWarmupState::_Internal {
 public:
};

SHiphopWarmupState::SHiphopWarmupState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopWarmupState)
}
SHiphopWarmupState::SHiphopWarmupState(const SHiphopWarmupState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      switchlist_(from.switchlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopWarmupState)
}

void SHiphopWarmupState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHiphopWarmupState_hiphopCeremony_2eproto.base);
}

SHiphopWarmupState::~SHiphopWarmupState() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopWarmupState)
  SharedDtor();
}

void SHiphopWarmupState::SharedDtor() {
}

void SHiphopWarmupState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopWarmupState& SHiphopWarmupState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopWarmupState_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void SHiphopWarmupState::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopWarmupState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switchlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SHiphopWarmupState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hiphop.BHiphopSwitch switchList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_switchlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopWarmupState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopWarmupState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hiphop.BHiphopSwitch switchList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_switchlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_switchlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopWarmupState)
  return target;
}

size_t SHiphopWarmupState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopWarmupState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hiphop.BHiphopSwitch switchList = 1;
  total_size += 1UL * this->_internal_switchlist_size();
  for (const auto& msg : this->switchlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopWarmupState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopWarmupState)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopWarmupState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopWarmupState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopWarmupState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopWarmupState)
    MergeFrom(*source);
  }
}

void SHiphopWarmupState::MergeFrom(const SHiphopWarmupState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopWarmupState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switchlist_.MergeFrom(from.switchlist_);
}

void SHiphopWarmupState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopWarmupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopWarmupState::CopyFrom(const SHiphopWarmupState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopWarmupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopWarmupState::IsInitialized() const {
  return true;
}

void SHiphopWarmupState::InternalSwap(SHiphopWarmupState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  switchlist_.InternalSwap(&other->switchlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopWarmupState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopCeremonyProcess::InitAsDefaultInstance() {
}
class SHiphopCeremonyProcess::_Internal {
 public:
};

SHiphopCeremonyProcess::SHiphopCeremonyProcess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopCeremonyProcess)
}
SHiphopCeremonyProcess::SHiphopCeremonyProcess(const SHiphopCeremonyProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curr_, &from.curr_,
    static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&curr_)) + sizeof(starttime_));
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopCeremonyProcess)
}

void SHiphopCeremonyProcess::SharedCtor() {
  ::memset(&curr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&curr_)) + sizeof(starttime_));
}

SHiphopCeremonyProcess::~SHiphopCeremonyProcess() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopCeremonyProcess)
  SharedDtor();
}

void SHiphopCeremonyProcess::SharedDtor() {
}

void SHiphopCeremonyProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopCeremonyProcess& SHiphopCeremonyProcess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopCeremonyProcess_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void SHiphopCeremonyProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopCeremonyProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&curr_)) + sizeof(starttime_));
  _internal_metadata_.Clear();
}

const char* SHiphopCeremonyProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .hiphop.HiphopProcess curr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_curr(static_cast<::hiphop::HiphopProcess>(val));
        } else goto handle_unusual;
        continue;
      // int32 startTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopCeremonyProcess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopCeremonyProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hiphop.HiphopProcess curr = 1;
  if (this->curr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_curr(), target);
  }

  // int32 startTime = 2;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_starttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopCeremonyProcess)
  return target;
}

size_t SHiphopCeremonyProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopCeremonyProcess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hiphop.HiphopProcess curr = 1;
  if (this->curr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_curr());
  }

  // int32 startTime = 2;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopCeremonyProcess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopCeremonyProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopCeremonyProcess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopCeremonyProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopCeremonyProcess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopCeremonyProcess)
    MergeFrom(*source);
  }
}

void SHiphopCeremonyProcess::MergeFrom(const SHiphopCeremonyProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopCeremonyProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curr() != 0) {
    _internal_set_curr(from._internal_curr());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
}

void SHiphopCeremonyProcess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopCeremonyProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopCeremonyProcess::CopyFrom(const SHiphopCeremonyProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopCeremonyProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopCeremonyProcess::IsInitialized() const {
  return true;
}

void SHiphopCeremonyProcess::InternalSwap(SHiphopCeremonyProcess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(curr_, other->curr_);
  swap(starttime_, other->starttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopCeremonyProcess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopStarSwitch::InitAsDefaultInstance() {
}
class SHiphopStarSwitch::_Internal {
 public:
};

SHiphopStarSwitch::SHiphopStarSwitch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopStarSwitch)
}
SHiphopStarSwitch::SHiphopStarSwitch(const SHiphopStarSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&star_, &from.star_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&star_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopStarSwitch)
}

void SHiphopStarSwitch::SharedCtor() {
  ::memset(&star_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&star_)) + sizeof(index_));
}

SHiphopStarSwitch::~SHiphopStarSwitch() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopStarSwitch)
  SharedDtor();
}

void SHiphopStarSwitch::SharedDtor() {
}

void SHiphopStarSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopStarSwitch& SHiphopStarSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopStarSwitch_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void SHiphopStarSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopStarSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&star_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&star_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

const char* SHiphopStarSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .hiphop.HiphopStar star = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_star(static_cast<::hiphop::HiphopStar>(val));
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopStarSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopStarSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hiphop.HiphopStar star = 1;
  if (this->star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_star(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // bool on = 3;
  if (this->on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_on(), target);
  }

  // int32 index = 4;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopStarSwitch)
  return target;
}

size_t SHiphopStarSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopStarSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hiphop.HiphopStar star = 1;
  if (this->star() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_star());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // bool on = 3;
  if (this->on() != 0) {
    total_size += 1 + 1;
  }

  // int32 index = 4;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopStarSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopStarSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopStarSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopStarSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopStarSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopStarSwitch)
    MergeFrom(*source);
  }
}

void SHiphopStarSwitch::MergeFrom(const SHiphopStarSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopStarSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.star() != 0) {
    _internal_set_star(from._internal_star());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.on() != 0) {
    _internal_set_on(from._internal_on());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void SHiphopStarSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopStarSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopStarSwitch::CopyFrom(const SHiphopStarSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopStarSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopStarSwitch::IsInitialized() const {
  return true;
}

void SHiphopStarSwitch::InternalSwap(SHiphopStarSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(star_, other->star_);
  swap(type_, other->type_);
  swap(on_, other->on_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopStarSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHiphopCeremonyState::InitAsDefaultInstance() {
}
class CHiphopCeremonyState::_Internal {
 public:
};

CHiphopCeremonyState::CHiphopCeremonyState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.CHiphopCeremonyState)
}
CHiphopCeremonyState::CHiphopCeremonyState(const CHiphopCeremonyState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hiphop.CHiphopCeremonyState)
}

void CHiphopCeremonyState::SharedCtor() {
}

CHiphopCeremonyState::~CHiphopCeremonyState() {
  // @@protoc_insertion_point(destructor:hiphop.CHiphopCeremonyState)
  SharedDtor();
}

void CHiphopCeremonyState::SharedDtor() {
}

void CHiphopCeremonyState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHiphopCeremonyState& CHiphopCeremonyState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHiphopCeremonyState_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void CHiphopCeremonyState::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.CHiphopCeremonyState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CHiphopCeremonyState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHiphopCeremonyState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.CHiphopCeremonyState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.CHiphopCeremonyState)
  return target;
}

size_t CHiphopCeremonyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.CHiphopCeremonyState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHiphopCeremonyState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.CHiphopCeremonyState)
  GOOGLE_DCHECK_NE(&from, this);
  const CHiphopCeremonyState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHiphopCeremonyState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.CHiphopCeremonyState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.CHiphopCeremonyState)
    MergeFrom(*source);
  }
}

void CHiphopCeremonyState::MergeFrom(const CHiphopCeremonyState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.CHiphopCeremonyState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHiphopCeremonyState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.CHiphopCeremonyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHiphopCeremonyState::CopyFrom(const CHiphopCeremonyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.CHiphopCeremonyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHiphopCeremonyState::IsInitialized() const {
  return true;
}

void CHiphopCeremonyState::InternalSwap(CHiphopCeremonyState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHiphopCeremonyState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BHiphopStarBakAudio::InitAsDefaultInstance() {
}
class BHiphopStarBakAudio::_Internal {
 public:
};

BHiphopStarBakAudio::BHiphopStarBakAudio()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.BHiphopStarBakAudio)
}
BHiphopStarBakAudio::BHiphopStarBakAudio(const BHiphopStarBakAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&star_, &from.star_,
    static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&star_)) + sizeof(starttime_));
  // @@protoc_insertion_point(copy_constructor:hiphop.BHiphopStarBakAudio)
}

void BHiphopStarBakAudio::SharedCtor() {
  ::memset(&star_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&star_)) + sizeof(starttime_));
}

BHiphopStarBakAudio::~BHiphopStarBakAudio() {
  // @@protoc_insertion_point(destructor:hiphop.BHiphopStarBakAudio)
  SharedDtor();
}

void BHiphopStarBakAudio::SharedDtor() {
}

void BHiphopStarBakAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BHiphopStarBakAudio& BHiphopStarBakAudio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BHiphopStarBakAudio_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void BHiphopStarBakAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.BHiphopStarBakAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&star_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&star_)) + sizeof(starttime_));
  _internal_metadata_.Clear();
}

const char* BHiphopStarBakAudio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .hiphop.HiphopStar star = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_star(static_cast<::hiphop::HiphopStar>(val));
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BHiphopStarBakAudio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.BHiphopStarBakAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hiphop.HiphopStar star = 1;
  if (this->star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_star(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 startTime = 3;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_starttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.BHiphopStarBakAudio)
  return target;
}

size_t BHiphopStarBakAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.BHiphopStarBakAudio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hiphop.HiphopStar star = 1;
  if (this->star() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_star());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 startTime = 3;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BHiphopStarBakAudio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.BHiphopStarBakAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const BHiphopStarBakAudio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BHiphopStarBakAudio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.BHiphopStarBakAudio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.BHiphopStarBakAudio)
    MergeFrom(*source);
  }
}

void BHiphopStarBakAudio::MergeFrom(const BHiphopStarBakAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.BHiphopStarBakAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.star() != 0) {
    _internal_set_star(from._internal_star());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
}

void BHiphopStarBakAudio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.BHiphopStarBakAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BHiphopStarBakAudio::CopyFrom(const BHiphopStarBakAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.BHiphopStarBakAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BHiphopStarBakAudio::IsInitialized() const {
  return true;
}

void BHiphopStarBakAudio::InternalSwap(BHiphopStarBakAudio* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(star_, other->star_);
  swap(index_, other->index_);
  swap(starttime_, other->starttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BHiphopStarBakAudio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopCeremonyState::InitAsDefaultInstance() {
  ::hiphop::_SHiphopCeremonyState_default_instance_._instance.get_mutable()->staraudio_ = const_cast< ::hiphop::BHiphopStarBakAudio*>(
      ::hiphop::BHiphopStarBakAudio::internal_default_instance());
}
class SHiphopCeremonyState::_Internal {
 public:
  static const ::hiphop::BHiphopStarBakAudio& staraudio(const SHiphopCeremonyState* msg);
};

const ::hiphop::BHiphopStarBakAudio&
SHiphopCeremonyState::_Internal::staraudio(const SHiphopCeremonyState* msg) {
  return *msg->staraudio_;
}
SHiphopCeremonyState::SHiphopCeremonyState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopCeremonyState)
}
SHiphopCeremonyState::SHiphopCeremonyState(const SHiphopCeremonyState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      switchlist_(from.switchlist_),
      voiceonstars_(from.voiceonstars_),
      stageonstars_(from.stageonstars_),
      hasawardstars_(from.hasawardstars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_staraudio()) {
    staraudio_ = new ::hiphop::BHiphopStarBakAudio(*from.staraudio_);
  } else {
    staraudio_ = nullptr;
  }
  ::memcpy(&curr_, &from.curr_,
    static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&curr_)) + sizeof(starttime_));
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopCeremonyState)
}

void SHiphopCeremonyState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHiphopCeremonyState_hiphopCeremony_2eproto.base);
  ::memset(&staraudio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&staraudio_)) + sizeof(starttime_));
}

SHiphopCeremonyState::~SHiphopCeremonyState() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopCeremonyState)
  SharedDtor();
}

void SHiphopCeremonyState::SharedDtor() {
  if (this != internal_default_instance()) delete staraudio_;
}

void SHiphopCeremonyState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopCeremonyState& SHiphopCeremonyState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopCeremonyState_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void SHiphopCeremonyState::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopCeremonyState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switchlist_.Clear();
  voiceonstars_.Clear();
  stageonstars_.Clear();
  hasawardstars_.Clear();
  if (GetArenaNoVirtual() == nullptr && staraudio_ != nullptr) {
    delete staraudio_;
  }
  staraudio_ = nullptr;
  ::memset(&curr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&curr_)) + sizeof(starttime_));
  _internal_metadata_.Clear();
}

const char* SHiphopCeremonyState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hiphop.BHiphopSwitch switchList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_switchlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .hiphop.HiphopProcess curr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_curr(static_cast<::hiphop::HiphopProcess>(val));
        } else goto handle_unusual;
        continue;
      // int32 startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hiphop.HiphopStar voiceOnStars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_voiceonstars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_voiceonstars(static_cast<::hiphop::HiphopStar>(val));
        } else goto handle_unusual;
        continue;
      // repeated .hiphop.HiphopStar stageOnStars = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_stageonstars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_stageonstars(static_cast<::hiphop::HiphopStar>(val));
        } else goto handle_unusual;
        continue;
      // repeated .hiphop.HiphopStar hasAwardStars = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_hasawardstars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_hasawardstars(static_cast<::hiphop::HiphopStar>(val));
        } else goto handle_unusual;
        continue;
      // .hiphop.BHiphopStarBakAudio starAudio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_staraudio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopCeremonyState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopCeremonyState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hiphop.BHiphopSwitch switchList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_switchlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_switchlist(i), target, stream);
  }

  // .hiphop.HiphopProcess curr = 2;
  if (this->curr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_curr(), target);
  }

  // int32 startTime = 3;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_starttime(), target);
  }

  // repeated .hiphop.HiphopStar voiceOnStars = 4;
  {
    int byte_size = _voiceonstars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, voiceonstars_, byte_size, target);
    }
  }

  // repeated .hiphop.HiphopStar stageOnStars = 5;
  {
    int byte_size = _stageonstars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          5, stageonstars_, byte_size, target);
    }
  }

  // repeated .hiphop.HiphopStar hasAwardStars = 6;
  {
    int byte_size = _hasawardstars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, hasawardstars_, byte_size, target);
    }
  }

  // .hiphop.BHiphopStarBakAudio starAudio = 7;
  if (this->has_staraudio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::staraudio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopCeremonyState)
  return target;
}

size_t SHiphopCeremonyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopCeremonyState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hiphop.BHiphopSwitch switchList = 1;
  total_size += 1UL * this->_internal_switchlist_size();
  for (const auto& msg : this->switchlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .hiphop.HiphopStar voiceOnStars = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_voiceonstars_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_voiceonstars(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _voiceonstars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .hiphop.HiphopStar stageOnStars = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_stageonstars_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_stageonstars(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stageonstars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .hiphop.HiphopStar hasAwardStars = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_hasawardstars_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_hasawardstars(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hasawardstars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .hiphop.BHiphopStarBakAudio starAudio = 7;
  if (this->has_staraudio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *staraudio_);
  }

  // .hiphop.HiphopProcess curr = 2;
  if (this->curr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_curr());
  }

  // int32 startTime = 3;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopCeremonyState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopCeremonyState)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopCeremonyState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopCeremonyState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopCeremonyState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopCeremonyState)
    MergeFrom(*source);
  }
}

void SHiphopCeremonyState::MergeFrom(const SHiphopCeremonyState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopCeremonyState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switchlist_.MergeFrom(from.switchlist_);
  voiceonstars_.MergeFrom(from.voiceonstars_);
  stageonstars_.MergeFrom(from.stageonstars_);
  hasawardstars_.MergeFrom(from.hasawardstars_);
  if (from.has_staraudio()) {
    _internal_mutable_staraudio()->::hiphop::BHiphopStarBakAudio::MergeFrom(from._internal_staraudio());
  }
  if (from.curr() != 0) {
    _internal_set_curr(from._internal_curr());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
}

void SHiphopCeremonyState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopCeremonyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopCeremonyState::CopyFrom(const SHiphopCeremonyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopCeremonyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopCeremonyState::IsInitialized() const {
  return true;
}

void SHiphopCeremonyState::InternalSwap(SHiphopCeremonyState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  switchlist_.InternalSwap(&other->switchlist_);
  voiceonstars_.InternalSwap(&other->voiceonstars_);
  stageonstars_.InternalSwap(&other->stageonstars_);
  hasawardstars_.InternalSwap(&other->hasawardstars_);
  swap(staraudio_, other->staraudio_);
  swap(curr_, other->curr_);
  swap(starttime_, other->starttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopCeremonyState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHiphopPhotoRain::InitAsDefaultInstance() {
}
class SHiphopPhotoRain::_Internal {
 public:
};

SHiphopPhotoRain::SHiphopPhotoRain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hiphop.SHiphopPhotoRain)
}
SHiphopPhotoRain::SHiphopPhotoRain(const SHiphopPhotoRain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goodsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goodsname().empty()) {
    goodsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodsname_);
  }
  goodspic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goodspic().empty()) {
    goodspic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodspic_);
  }
  ::memcpy(&goodsid_, &from.goodsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodstype_) -
    reinterpret_cast<char*>(&goodsid_)) + sizeof(goodstype_));
  // @@protoc_insertion_point(copy_constructor:hiphop.SHiphopPhotoRain)
}

void SHiphopPhotoRain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHiphopPhotoRain_hiphopCeremony_2eproto.base);
  goodsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodspic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodstype_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(goodstype_));
}

SHiphopPhotoRain::~SHiphopPhotoRain() {
  // @@protoc_insertion_point(destructor:hiphop.SHiphopPhotoRain)
  SharedDtor();
}

void SHiphopPhotoRain::SharedDtor() {
  goodsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodspic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SHiphopPhotoRain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHiphopPhotoRain& SHiphopPhotoRain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHiphopPhotoRain_hiphopCeremony_2eproto.base);
  return *internal_default_instance();
}


void SHiphopPhotoRain::Clear() {
// @@protoc_insertion_point(message_clear_start:hiphop.SHiphopPhotoRain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodspic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodstype_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(goodstype_));
  _internal_metadata_.Clear();
}

const char* SHiphopPhotoRain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          goodstype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string goodsName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_goodsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hiphop.SHiphopPhotoRain.goodsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string goodsPic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_goodspic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hiphop.SHiphopPhotoRain.goodsPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHiphopPhotoRain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hiphop.SHiphopPhotoRain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  // int32 goodsType = 2;
  if (this->goodstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_goodstype(), target);
  }

  // string goodsName = 3;
  if (this->goodsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goodsname().data(), static_cast<int>(this->_internal_goodsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hiphop.SHiphopPhotoRain.goodsName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_goodsname(), target);
  }

  // string goodsPic = 4;
  if (this->goodspic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goodspic().data(), static_cast<int>(this->_internal_goodspic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hiphop.SHiphopPhotoRain.goodsPic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_goodspic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hiphop.SHiphopPhotoRain)
  return target;
}

size_t SHiphopPhotoRain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hiphop.SHiphopPhotoRain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string goodsName = 3;
  if (this->goodsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goodsname());
  }

  // string goodsPic = 4;
  if (this->goodspic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goodspic());
  }

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 goodsType = 2;
  if (this->goodstype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodstype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHiphopPhotoRain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hiphop.SHiphopPhotoRain)
  GOOGLE_DCHECK_NE(&from, this);
  const SHiphopPhotoRain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHiphopPhotoRain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hiphop.SHiphopPhotoRain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hiphop.SHiphopPhotoRain)
    MergeFrom(*source);
  }
}

void SHiphopPhotoRain::MergeFrom(const SHiphopPhotoRain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hiphop.SHiphopPhotoRain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsname().size() > 0) {

    goodsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodsname_);
  }
  if (from.goodspic().size() > 0) {

    goodspic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goodspic_);
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.goodstype() != 0) {
    _internal_set_goodstype(from._internal_goodstype());
  }
}

void SHiphopPhotoRain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hiphop.SHiphopPhotoRain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHiphopPhotoRain::CopyFrom(const SHiphopPhotoRain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hiphop.SHiphopPhotoRain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHiphopPhotoRain::IsInitialized() const {
  return true;
}

void SHiphopPhotoRain::InternalSwap(SHiphopPhotoRain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  goodsname_.Swap(&other->goodsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  goodspic_.Swap(&other->goodspic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(goodsid_, other->goodsid_);
  swap(goodstype_, other->goodstype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHiphopPhotoRain::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hiphop
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hiphop::CHiphopAwardPrediction* Arena::CreateMaybeMessage< ::hiphop::CHiphopAwardPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::CHiphopAwardPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopAwardPrediction* Arena::CreateMaybeMessage< ::hiphop::SHiphopAwardPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopAwardPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::CHiphopNoteList* Arena::CreateMaybeMessage< ::hiphop::CHiphopNoteList >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::CHiphopNoteList >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::BHiphopNote* Arena::CreateMaybeMessage< ::hiphop::BHiphopNote >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::BHiphopNote >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopNoteList* Arena::CreateMaybeMessage< ::hiphop::SHiphopNoteList >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopNoteList >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::CHiphopNotePickup* Arena::CreateMaybeMessage< ::hiphop::CHiphopNotePickup >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::CHiphopNotePickup >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopNotePickup* Arena::CreateMaybeMessage< ::hiphop::SHiphopNotePickup >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopNotePickup >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::BHiphopSwitch* Arena::CreateMaybeMessage< ::hiphop::BHiphopSwitch >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::BHiphopSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopSwitch* Arena::CreateMaybeMessage< ::hiphop::SHiphopSwitch >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::CHiphopWarmupState* Arena::CreateMaybeMessage< ::hiphop::CHiphopWarmupState >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::CHiphopWarmupState >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopWarmupState* Arena::CreateMaybeMessage< ::hiphop::SHiphopWarmupState >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopWarmupState >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopCeremonyProcess* Arena::CreateMaybeMessage< ::hiphop::SHiphopCeremonyProcess >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopCeremonyProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopStarSwitch* Arena::CreateMaybeMessage< ::hiphop::SHiphopStarSwitch >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopStarSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::CHiphopCeremonyState* Arena::CreateMaybeMessage< ::hiphop::CHiphopCeremonyState >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::CHiphopCeremonyState >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::BHiphopStarBakAudio* Arena::CreateMaybeMessage< ::hiphop::BHiphopStarBakAudio >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::BHiphopStarBakAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopCeremonyState* Arena::CreateMaybeMessage< ::hiphop::SHiphopCeremonyState >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopCeremonyState >(arena);
}
template<> PROTOBUF_NOINLINE ::hiphop::SHiphopPhotoRain* Arena::CreateMaybeMessage< ::hiphop::SHiphopPhotoRain >(Arena* arena) {
  return Arena::CreateInternal< ::hiphop::SHiphopPhotoRain >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
