// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userInfoList.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userInfoList_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userInfoList_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "userInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userInfoList_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userInfoList_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userInfoList_2eproto;
namespace userInfoList {
class CGetUserInfoList;
class CGetUserInfoListDefaultTypeInternal;
extern CGetUserInfoListDefaultTypeInternal _CGetUserInfoList_default_instance_;
class CUsersSort;
class CUsersSortDefaultTypeInternal;
extern CUsersSortDefaultTypeInternal _CUsersSort_default_instance_;
class SGetRoomUserList;
class SGetRoomUserListDefaultTypeInternal;
extern SGetRoomUserListDefaultTypeInternal _SGetRoomUserList_default_instance_;
class SGetUserInfoList;
class SGetUserInfoListDefaultTypeInternal;
extern SGetUserInfoListDefaultTypeInternal _SGetUserInfoList_default_instance_;
class SUsersSort;
class SUsersSortDefaultTypeInternal;
extern SUsersSortDefaultTypeInternal _SUsersSort_default_instance_;
}  // namespace userInfoList
PROTOBUF_NAMESPACE_OPEN
template<> ::userInfoList::CGetUserInfoList* Arena::CreateMaybeMessage<::userInfoList::CGetUserInfoList>(Arena*);
template<> ::userInfoList::CUsersSort* Arena::CreateMaybeMessage<::userInfoList::CUsersSort>(Arena*);
template<> ::userInfoList::SGetRoomUserList* Arena::CreateMaybeMessage<::userInfoList::SGetRoomUserList>(Arena*);
template<> ::userInfoList::SGetUserInfoList* Arena::CreateMaybeMessage<::userInfoList::SGetUserInfoList>(Arena*);
template<> ::userInfoList::SUsersSort* Arena::CreateMaybeMessage<::userInfoList::SUsersSort>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userInfoList {

// ===================================================================

class CGetUserInfoList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfoList.CGetUserInfoList) */ {
 public:
  CGetUserInfoList();
  virtual ~CGetUserInfoList();

  CGetUserInfoList(const CGetUserInfoList& from);
  CGetUserInfoList(CGetUserInfoList&& from) noexcept
    : CGetUserInfoList() {
    *this = ::std::move(from);
  }

  inline CGetUserInfoList& operator=(const CGetUserInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetUserInfoList& operator=(CGetUserInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetUserInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetUserInfoList* internal_default_instance() {
    return reinterpret_cast<const CGetUserInfoList*>(
               &_CGetUserInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGetUserInfoList& a, CGetUserInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetUserInfoList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetUserInfoList* New() const final {
    return CreateMaybeMessage<CGetUserInfoList>(nullptr);
  }

  CGetUserInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetUserInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetUserInfoList& from);
  void MergeFrom(const CGetUserInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetUserInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfoList.CGetUserInfoList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfoList_2eproto);
    return ::descriptor_table_userInfoList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 1,
  };
  // repeated int32 uids = 1;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uids() const;
  void _internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uids(int index) const;
  void set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:userInfoList.CGetUserInfoList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfoList_2eproto;
};
// -------------------------------------------------------------------

class SGetUserInfoList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfoList.SGetUserInfoList) */ {
 public:
  SGetUserInfoList();
  virtual ~SGetUserInfoList();

  SGetUserInfoList(const SGetUserInfoList& from);
  SGetUserInfoList(SGetUserInfoList&& from) noexcept
    : SGetUserInfoList() {
    *this = ::std::move(from);
  }

  inline SGetUserInfoList& operator=(const SGetUserInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetUserInfoList& operator=(SGetUserInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetUserInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetUserInfoList* internal_default_instance() {
    return reinterpret_cast<const SGetUserInfoList*>(
               &_SGetUserInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SGetUserInfoList& a, SGetUserInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetUserInfoList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetUserInfoList* New() const final {
    return CreateMaybeMessage<SGetUserInfoList>(nullptr);
  }

  SGetUserInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetUserInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetUserInfoList& from);
  void MergeFrom(const SGetUserInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetUserInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfoList.SGetUserInfoList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfoList_2eproto);
    return ::descriptor_table_userInfoList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 1,
  };
  // repeated .userInfo.SUserInfo infoList = 1;
  int infolist_size() const;
  private:
  int _internal_infolist_size() const;
  public:
  void clear_infolist();
  ::userInfo::SUserInfo* mutable_infolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
      mutable_infolist();
  private:
  const ::userInfo::SUserInfo& _internal_infolist(int index) const;
  ::userInfo::SUserInfo* _internal_add_infolist();
  public:
  const ::userInfo::SUserInfo& infolist(int index) const;
  ::userInfo::SUserInfo* add_infolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
      infolist() const;

  // @@protoc_insertion_point(class_scope:userInfoList.SGetUserInfoList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo > infolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfoList_2eproto;
};
// -------------------------------------------------------------------

class CUsersSort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfoList.CUsersSort) */ {
 public:
  CUsersSort();
  virtual ~CUsersSort();

  CUsersSort(const CUsersSort& from);
  CUsersSort(CUsersSort&& from) noexcept
    : CUsersSort() {
    *this = ::std::move(from);
  }

  inline CUsersSort& operator=(const CUsersSort& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUsersSort& operator=(CUsersSort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUsersSort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUsersSort* internal_default_instance() {
    return reinterpret_cast<const CUsersSort*>(
               &_CUsersSort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CUsersSort& a, CUsersSort& b) {
    a.Swap(&b);
  }
  inline void Swap(CUsersSort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUsersSort* New() const final {
    return CreateMaybeMessage<CUsersSort>(nullptr);
  }

  CUsersSort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUsersSort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUsersSort& from);
  void MergeFrom(const CUsersSort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUsersSort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfoList.CUsersSort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfoList_2eproto);
    return ::descriptor_table_userInfoList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 1,
  };
  // repeated int32 uids = 1;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uids() const;
  void _internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uids(int index) const;
  void set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:userInfoList.CUsersSort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfoList_2eproto;
};
// -------------------------------------------------------------------

class SUsersSort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfoList.SUsersSort) */ {
 public:
  SUsersSort();
  virtual ~SUsersSort();

  SUsersSort(const SUsersSort& from);
  SUsersSort(SUsersSort&& from) noexcept
    : SUsersSort() {
    *this = ::std::move(from);
  }

  inline SUsersSort& operator=(const SUsersSort& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUsersSort& operator=(SUsersSort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUsersSort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUsersSort* internal_default_instance() {
    return reinterpret_cast<const SUsersSort*>(
               &_SUsersSort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SUsersSort& a, SUsersSort& b) {
    a.Swap(&b);
  }
  inline void Swap(SUsersSort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUsersSort* New() const final {
    return CreateMaybeMessage<SUsersSort>(nullptr);
  }

  SUsersSort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUsersSort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUsersSort& from);
  void MergeFrom(const SUsersSort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUsersSort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfoList.SUsersSort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfoList_2eproto);
    return ::descriptor_table_userInfoList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 1,
  };
  // repeated int32 uids = 1;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uids() const;
  void _internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uids(int index) const;
  void set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:userInfoList.SUsersSort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfoList_2eproto;
};
// -------------------------------------------------------------------

class SGetRoomUserList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfoList.SGetRoomUserList) */ {
 public:
  SGetRoomUserList();
  virtual ~SGetRoomUserList();

  SGetRoomUserList(const SGetRoomUserList& from);
  SGetRoomUserList(SGetRoomUserList&& from) noexcept
    : SGetRoomUserList() {
    *this = ::std::move(from);
  }

  inline SGetRoomUserList& operator=(const SGetRoomUserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetRoomUserList& operator=(SGetRoomUserList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetRoomUserList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetRoomUserList* internal_default_instance() {
    return reinterpret_cast<const SGetRoomUserList*>(
               &_SGetRoomUserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SGetRoomUserList& a, SGetRoomUserList& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetRoomUserList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetRoomUserList* New() const final {
    return CreateMaybeMessage<SGetRoomUserList>(nullptr);
  }

  SGetRoomUserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetRoomUserList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetRoomUserList& from);
  void MergeFrom(const SGetRoomUserList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetRoomUserList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfoList.SGetRoomUserList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfoList_2eproto);
    return ::descriptor_table_userInfoList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 1,
  };
  // repeated .userInfo.SUserInfo infoList = 1;
  int infolist_size() const;
  private:
  int _internal_infolist_size() const;
  public:
  void clear_infolist();
  ::userInfo::SUserInfo* mutable_infolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
      mutable_infolist();
  private:
  const ::userInfo::SUserInfo& _internal_infolist(int index) const;
  ::userInfo::SUserInfo* _internal_add_infolist();
  public:
  const ::userInfo::SUserInfo& infolist(int index) const;
  ::userInfo::SUserInfo* add_infolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
      infolist() const;

  // @@protoc_insertion_point(class_scope:userInfoList.SGetRoomUserList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo > infolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfoList_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGetUserInfoList

// repeated int32 uids = 1;
inline int CGetUserInfoList::_internal_uids_size() const {
  return uids_.size();
}
inline int CGetUserInfoList::uids_size() const {
  return _internal_uids_size();
}
inline void CGetUserInfoList::clear_uids() {
  uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetUserInfoList::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetUserInfoList::uids(int index) const {
  // @@protoc_insertion_point(field_get:userInfoList.CGetUserInfoList.uids)
  return _internal_uids(index);
}
inline void CGetUserInfoList::set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:userInfoList.CGetUserInfoList.uids)
}
inline void CGetUserInfoList::_internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Add(value);
}
inline void CGetUserInfoList::add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:userInfoList.CGetUserInfoList.uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CGetUserInfoList::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CGetUserInfoList::uids() const {
  // @@protoc_insertion_point(field_list:userInfoList.CGetUserInfoList.uids)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CGetUserInfoList::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CGetUserInfoList::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:userInfoList.CGetUserInfoList.uids)
  return _internal_mutable_uids();
}

// -------------------------------------------------------------------

// SGetUserInfoList

// repeated .userInfo.SUserInfo infoList = 1;
inline int SGetUserInfoList::_internal_infolist_size() const {
  return infolist_.size();
}
inline int SGetUserInfoList::infolist_size() const {
  return _internal_infolist_size();
}
inline ::userInfo::SUserInfo* SGetUserInfoList::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:userInfoList.SGetUserInfoList.infoList)
  return infolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
SGetUserInfoList::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:userInfoList.SGetUserInfoList.infoList)
  return &infolist_;
}
inline const ::userInfo::SUserInfo& SGetUserInfoList::_internal_infolist(int index) const {
  return infolist_.Get(index);
}
inline const ::userInfo::SUserInfo& SGetUserInfoList::infolist(int index) const {
  // @@protoc_insertion_point(field_get:userInfoList.SGetUserInfoList.infoList)
  return _internal_infolist(index);
}
inline ::userInfo::SUserInfo* SGetUserInfoList::_internal_add_infolist() {
  return infolist_.Add();
}
inline ::userInfo::SUserInfo* SGetUserInfoList::add_infolist() {
  // @@protoc_insertion_point(field_add:userInfoList.SGetUserInfoList.infoList)
  return _internal_add_infolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
SGetUserInfoList::infolist() const {
  // @@protoc_insertion_point(field_list:userInfoList.SGetUserInfoList.infoList)
  return infolist_;
}

// -------------------------------------------------------------------

// CUsersSort

// repeated int32 uids = 1;
inline int CUsersSort::_internal_uids_size() const {
  return uids_.size();
}
inline int CUsersSort::uids_size() const {
  return _internal_uids_size();
}
inline void CUsersSort::clear_uids() {
  uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUsersSort::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUsersSort::uids(int index) const {
  // @@protoc_insertion_point(field_get:userInfoList.CUsersSort.uids)
  return _internal_uids(index);
}
inline void CUsersSort::set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:userInfoList.CUsersSort.uids)
}
inline void CUsersSort::_internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Add(value);
}
inline void CUsersSort::add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:userInfoList.CUsersSort.uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CUsersSort::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CUsersSort::uids() const {
  // @@protoc_insertion_point(field_list:userInfoList.CUsersSort.uids)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CUsersSort::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CUsersSort::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:userInfoList.CUsersSort.uids)
  return _internal_mutable_uids();
}

// -------------------------------------------------------------------

// SUsersSort

// repeated int32 uids = 1;
inline int SUsersSort::_internal_uids_size() const {
  return uids_.size();
}
inline int SUsersSort::uids_size() const {
  return _internal_uids_size();
}
inline void SUsersSort::clear_uids() {
  uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUsersSort::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUsersSort::uids(int index) const {
  // @@protoc_insertion_point(field_get:userInfoList.SUsersSort.uids)
  return _internal_uids(index);
}
inline void SUsersSort::set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:userInfoList.SUsersSort.uids)
}
inline void SUsersSort::_internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Add(value);
}
inline void SUsersSort::add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:userInfoList.SUsersSort.uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SUsersSort::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SUsersSort::uids() const {
  // @@protoc_insertion_point(field_list:userInfoList.SUsersSort.uids)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SUsersSort::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SUsersSort::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:userInfoList.SUsersSort.uids)
  return _internal_mutable_uids();
}

// -------------------------------------------------------------------

// SGetRoomUserList

// repeated .userInfo.SUserInfo infoList = 1;
inline int SGetRoomUserList::_internal_infolist_size() const {
  return infolist_.size();
}
inline int SGetRoomUserList::infolist_size() const {
  return _internal_infolist_size();
}
inline ::userInfo::SUserInfo* SGetRoomUserList::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:userInfoList.SGetRoomUserList.infoList)
  return infolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
SGetRoomUserList::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:userInfoList.SGetRoomUserList.infoList)
  return &infolist_;
}
inline const ::userInfo::SUserInfo& SGetRoomUserList::_internal_infolist(int index) const {
  return infolist_.Get(index);
}
inline const ::userInfo::SUserInfo& SGetRoomUserList::infolist(int index) const {
  // @@protoc_insertion_point(field_get:userInfoList.SGetRoomUserList.infoList)
  return _internal_infolist(index);
}
inline ::userInfo::SUserInfo* SGetRoomUserList::_internal_add_infolist() {
  return infolist_.Add();
}
inline ::userInfo::SUserInfo* SGetRoomUserList::add_infolist() {
  // @@protoc_insertion_point(field_add:userInfoList.SGetRoomUserList.infoList)
  return _internal_add_infolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
SGetRoomUserList::infolist() const {
  // @@protoc_insertion_point(field_list:userInfoList.SGetRoomUserList.infoList)
  return infolist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userInfoList

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userInfoList_2eproto
