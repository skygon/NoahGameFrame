// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OwnerSpace.proto

#include "OwnerSpace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace OwnerSpace {
class COwnerSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<COwnerSpace> _instance;
} _COwnerSpace_default_instance_;
class SOwnerSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SOwnerSpace> _instance;
} _SOwnerSpace_default_instance_;
}  // namespace OwnerSpace
static void InitDefaultsscc_info_COwnerSpace_OwnerSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OwnerSpace::_COwnerSpace_default_instance_;
    new (ptr) ::OwnerSpace::COwnerSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OwnerSpace::COwnerSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_COwnerSpace_OwnerSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_COwnerSpace_OwnerSpace_2eproto}, {}};

static void InitDefaultsscc_info_SOwnerSpace_OwnerSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OwnerSpace::_SOwnerSpace_default_instance_;
    new (ptr) ::OwnerSpace::SOwnerSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OwnerSpace::SOwnerSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SOwnerSpace_OwnerSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SOwnerSpace_OwnerSpace_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OwnerSpace_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OwnerSpace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OwnerSpace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OwnerSpace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OwnerSpace::COwnerSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OwnerSpace::SOwnerSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OwnerSpace::SOwnerSpace, common_),
  PROTOBUF_FIELD_OFFSET(::OwnerSpace::SOwnerSpace, ishasperformer_),
  PROTOBUF_FIELD_OFFSET(::OwnerSpace::SOwnerSpace, isfollowstatus_),
  PROTOBUF_FIELD_OFFSET(::OwnerSpace::SOwnerSpace, uid_),
  PROTOBUF_FIELD_OFFSET(::OwnerSpace::SOwnerSpace, headpic_),
  PROTOBUF_FIELD_OFFSET(::OwnerSpace::SOwnerSpace, nickname_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::OwnerSpace::COwnerSpace)},
  { 5, -1, sizeof(::OwnerSpace::SOwnerSpace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OwnerSpace::_COwnerSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OwnerSpace::_SOwnerSpace_default_instance_),
};

const char descriptor_table_protodef_OwnerSpace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020OwnerSpace.proto\022\nOwnerSpace\"\r\n\013COwner"
  "Space\"}\n\013SOwnerSpace\022\016\n\006common\030\001 \001(\005\022\026\n\016"
  "isHasPerformer\030\002 \001(\010\022\026\n\016isFollowStatus\030\003"
  " \001(\010\022\013\n\003uid\030\004 \001(\005\022\017\n\007headPic\030\005 \001(\t\022\020\n\010ni"
  "ckName\030\006 \001(\tB&\n\030com.dayou.space.protobuf"
  "B\nOwnerSpaceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OwnerSpace_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OwnerSpace_2eproto_sccs[2] = {
  &scc_info_COwnerSpace_OwnerSpace_2eproto.base,
  &scc_info_SOwnerSpace_OwnerSpace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OwnerSpace_2eproto_once;
static bool descriptor_table_OwnerSpace_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OwnerSpace_2eproto = {
  &descriptor_table_OwnerSpace_2eproto_initialized, descriptor_table_protodef_OwnerSpace_2eproto, "OwnerSpace.proto", 220,
  &descriptor_table_OwnerSpace_2eproto_once, descriptor_table_OwnerSpace_2eproto_sccs, descriptor_table_OwnerSpace_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_OwnerSpace_2eproto::offsets,
  file_level_metadata_OwnerSpace_2eproto, 2, file_level_enum_descriptors_OwnerSpace_2eproto, file_level_service_descriptors_OwnerSpace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OwnerSpace_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OwnerSpace_2eproto), true);
namespace OwnerSpace {

// ===================================================================

void COwnerSpace::InitAsDefaultInstance() {
}
class COwnerSpace::_Internal {
 public:
};

COwnerSpace::COwnerSpace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OwnerSpace.COwnerSpace)
}
COwnerSpace::COwnerSpace(const COwnerSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OwnerSpace.COwnerSpace)
}

void COwnerSpace::SharedCtor() {
}

COwnerSpace::~COwnerSpace() {
  // @@protoc_insertion_point(destructor:OwnerSpace.COwnerSpace)
  SharedDtor();
}

void COwnerSpace::SharedDtor() {
}

void COwnerSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COwnerSpace& COwnerSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_COwnerSpace_OwnerSpace_2eproto.base);
  return *internal_default_instance();
}


void COwnerSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:OwnerSpace.COwnerSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* COwnerSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* COwnerSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OwnerSpace.COwnerSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OwnerSpace.COwnerSpace)
  return target;
}

size_t COwnerSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OwnerSpace.COwnerSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COwnerSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OwnerSpace.COwnerSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const COwnerSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<COwnerSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OwnerSpace.COwnerSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OwnerSpace.COwnerSpace)
    MergeFrom(*source);
  }
}

void COwnerSpace::MergeFrom(const COwnerSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OwnerSpace.COwnerSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void COwnerSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OwnerSpace.COwnerSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COwnerSpace::CopyFrom(const COwnerSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OwnerSpace.COwnerSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COwnerSpace::IsInitialized() const {
  return true;
}

void COwnerSpace::InternalSwap(COwnerSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata COwnerSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SOwnerSpace::InitAsDefaultInstance() {
}
class SOwnerSpace::_Internal {
 public:
};

SOwnerSpace::SOwnerSpace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OwnerSpace.SOwnerSpace)
}
SOwnerSpace::SOwnerSpace(const SOwnerSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headpic().empty()) {
    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&common_, &from.common_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&common_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:OwnerSpace.SOwnerSpace)
}

void SOwnerSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SOwnerSpace_OwnerSpace_2eproto.base);
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&common_)) + sizeof(uid_));
}

SOwnerSpace::~SOwnerSpace() {
  // @@protoc_insertion_point(destructor:OwnerSpace.SOwnerSpace)
  SharedDtor();
}

void SOwnerSpace::SharedDtor() {
  headpic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SOwnerSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SOwnerSpace& SOwnerSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SOwnerSpace_OwnerSpace_2eproto.base);
  return *internal_default_instance();
}


void SOwnerSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:OwnerSpace.SOwnerSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&common_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SOwnerSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          common_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isHasPerformer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ishasperformer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFollowStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isfollowstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headPic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_headpic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OwnerSpace.SOwnerSpace.headPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OwnerSpace.SOwnerSpace.nickName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SOwnerSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OwnerSpace.SOwnerSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 common = 1;
  if (this->common() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_common(), target);
  }

  // bool isHasPerformer = 2;
  if (this->ishasperformer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ishasperformer(), target);
  }

  // bool isFollowStatus = 3;
  if (this->isfollowstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isfollowstatus(), target);
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_uid(), target);
  }

  // string headPic = 5;
  if (this->headpic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headpic().data(), static_cast<int>(this->_internal_headpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OwnerSpace.SOwnerSpace.headPic");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_headpic(), target);
  }

  // string nickName = 6;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OwnerSpace.SOwnerSpace.nickName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OwnerSpace.SOwnerSpace)
  return target;
}

size_t SOwnerSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OwnerSpace.SOwnerSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string headPic = 5;
  if (this->headpic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headpic());
  }

  // string nickName = 6;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 common = 1;
  if (this->common() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_common());
  }

  // bool isHasPerformer = 2;
  if (this->ishasperformer() != 0) {
    total_size += 1 + 1;
  }

  // bool isFollowStatus = 3;
  if (this->isfollowstatus() != 0) {
    total_size += 1 + 1;
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SOwnerSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OwnerSpace.SOwnerSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const SOwnerSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SOwnerSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OwnerSpace.SOwnerSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OwnerSpace.SOwnerSpace)
    MergeFrom(*source);
  }
}

void SOwnerSpace::MergeFrom(const SOwnerSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OwnerSpace.SOwnerSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.headpic().size() > 0) {

    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.common() != 0) {
    _internal_set_common(from._internal_common());
  }
  if (from.ishasperformer() != 0) {
    _internal_set_ishasperformer(from._internal_ishasperformer());
  }
  if (from.isfollowstatus() != 0) {
    _internal_set_isfollowstatus(from._internal_isfollowstatus());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SOwnerSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OwnerSpace.SOwnerSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOwnerSpace::CopyFrom(const SOwnerSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OwnerSpace.SOwnerSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOwnerSpace::IsInitialized() const {
  return true;
}

void SOwnerSpace::InternalSwap(SOwnerSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  headpic_.Swap(&other->headpic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(common_, other->common_);
  swap(ishasperformer_, other->ishasperformer_);
  swap(isfollowstatus_, other->isfollowstatus_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SOwnerSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OwnerSpace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OwnerSpace::COwnerSpace* Arena::CreateMaybeMessage< ::OwnerSpace::COwnerSpace >(Arena* arena) {
  return Arena::CreateInternal< ::OwnerSpace::COwnerSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::OwnerSpace::SOwnerSpace* Arena::CreateMaybeMessage< ::OwnerSpace::SOwnerSpace >(Arena* arena) {
  return Arena::CreateInternal< ::OwnerSpace::SOwnerSpace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
