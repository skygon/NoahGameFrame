// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameOfBoating.proto

#include "gameOfBoating.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gameOfBoating {
class CGameOfBoatingUpBoatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGameOfBoatingUpBoat> _instance;
} _CGameOfBoatingUpBoat_default_instance_;
class SGameOfBoatingUpBoatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameOfBoatingUpBoat> _instance;
} _SGameOfBoatingUpBoat_default_instance_;
class CGameOfBoatingDownBoatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGameOfBoatingDownBoat> _instance;
} _CGameOfBoatingDownBoat_default_instance_;
class SGameOfBoatingDownBoatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameOfBoatingDownBoat> _instance;
} _SGameOfBoatingDownBoat_default_instance_;
class CGameOfBoatingSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGameOfBoatingSuccess> _instance;
} _CGameOfBoatingSuccess_default_instance_;
class SGameOfBoatingSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameOfBoatingSuccess> _instance;
} _SGameOfBoatingSuccess_default_instance_;
class CGameOfBoatingSynchronizeBoatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGameOfBoatingSynchronizeBoat> _instance;
} _CGameOfBoatingSynchronizeBoat_default_instance_;
class SGameOfBoatingSynchronizeBoatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameOfBoatingSynchronizeBoat> _instance;
} _SGameOfBoatingSynchronizeBoat_default_instance_;
}  // namespace gameOfBoating
static void InitDefaultsscc_info_CGameOfBoatingDownBoat_gameOfBoating_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameOfBoating::_CGameOfBoatingDownBoat_default_instance_;
    new (ptr) ::gameOfBoating::CGameOfBoatingDownBoat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameOfBoating::CGameOfBoatingDownBoat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGameOfBoatingDownBoat_gameOfBoating_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGameOfBoatingDownBoat_gameOfBoating_2eproto}, {}};

static void InitDefaultsscc_info_CGameOfBoatingSuccess_gameOfBoating_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameOfBoating::_CGameOfBoatingSuccess_default_instance_;
    new (ptr) ::gameOfBoating::CGameOfBoatingSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameOfBoating::CGameOfBoatingSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGameOfBoatingSuccess_gameOfBoating_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGameOfBoatingSuccess_gameOfBoating_2eproto}, {}};

static void InitDefaultsscc_info_CGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameOfBoating::_CGameOfBoatingSynchronizeBoat_default_instance_;
    new (ptr) ::gameOfBoating::CGameOfBoatingSynchronizeBoat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameOfBoating::CGameOfBoatingSynchronizeBoat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto}, {}};

static void InitDefaultsscc_info_CGameOfBoatingUpBoat_gameOfBoating_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameOfBoating::_CGameOfBoatingUpBoat_default_instance_;
    new (ptr) ::gameOfBoating::CGameOfBoatingUpBoat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameOfBoating::CGameOfBoatingUpBoat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGameOfBoatingUpBoat_gameOfBoating_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGameOfBoatingUpBoat_gameOfBoating_2eproto}, {}};

static void InitDefaultsscc_info_SGameOfBoatingDownBoat_gameOfBoating_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameOfBoating::_SGameOfBoatingDownBoat_default_instance_;
    new (ptr) ::gameOfBoating::SGameOfBoatingDownBoat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameOfBoating::SGameOfBoatingDownBoat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGameOfBoatingDownBoat_gameOfBoating_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGameOfBoatingDownBoat_gameOfBoating_2eproto}, {}};

static void InitDefaultsscc_info_SGameOfBoatingSuccess_gameOfBoating_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameOfBoating::_SGameOfBoatingSuccess_default_instance_;
    new (ptr) ::gameOfBoating::SGameOfBoatingSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameOfBoating::SGameOfBoatingSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGameOfBoatingSuccess_gameOfBoating_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGameOfBoatingSuccess_gameOfBoating_2eproto}, {}};

static void InitDefaultsscc_info_SGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameOfBoating::_SGameOfBoatingSynchronizeBoat_default_instance_;
    new (ptr) ::gameOfBoating::SGameOfBoatingSynchronizeBoat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameOfBoating::SGameOfBoatingSynchronizeBoat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto}, {}};

static void InitDefaultsscc_info_SGameOfBoatingUpBoat_gameOfBoating_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameOfBoating::_SGameOfBoatingUpBoat_default_instance_;
    new (ptr) ::gameOfBoating::SGameOfBoatingUpBoat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameOfBoating::SGameOfBoatingUpBoat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGameOfBoatingUpBoat_gameOfBoating_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGameOfBoatingUpBoat_gameOfBoating_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gameOfBoating_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gameOfBoating_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gameOfBoating_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gameOfBoating_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingUpBoat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingUpBoat, boatid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingUpBoat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingUpBoat, boatid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingUpBoat, leftuid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingUpBoat, rightuid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingUpBoat, upboatuid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingUpBoat, status_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingUpBoat, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingDownBoat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingDownBoat, boatid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingDownBoat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingDownBoat, boatid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingDownBoat, leftuid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingDownBoat, rightuid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingDownBoat, downboatuid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingDownBoat, status_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingDownBoat, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSuccess, boatid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSuccess, teammateuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, boatid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, uid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, teammateuid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, nick_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, teammatenick_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, usericon_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, teammateusericon_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, msg_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSuccess, gamescore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSynchronizeBoat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSynchronizeBoat, numberofoperations_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSynchronizeBoat, x_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSynchronizeBoat, z_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSynchronizeBoat, y_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSynchronizeBoat, rotationy_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSynchronizeBoat, rotationx_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::CGameOfBoatingSynchronizeBoat, rotationz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSynchronizeBoat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSynchronizeBoat, uid_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSynchronizeBoat, numberofoperations_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSynchronizeBoat, x_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSynchronizeBoat, z_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSynchronizeBoat, y_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSynchronizeBoat, rotationy_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSynchronizeBoat, rotationx_),
  PROTOBUF_FIELD_OFFSET(::gameOfBoating::SGameOfBoatingSynchronizeBoat, rotationz_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gameOfBoating::CGameOfBoatingUpBoat)},
  { 6, -1, sizeof(::gameOfBoating::SGameOfBoatingUpBoat)},
  { 17, -1, sizeof(::gameOfBoating::CGameOfBoatingDownBoat)},
  { 23, -1, sizeof(::gameOfBoating::SGameOfBoatingDownBoat)},
  { 34, -1, sizeof(::gameOfBoating::CGameOfBoatingSuccess)},
  { 41, -1, sizeof(::gameOfBoating::SGameOfBoatingSuccess)},
  { 55, -1, sizeof(::gameOfBoating::CGameOfBoatingSynchronizeBoat)},
  { 67, -1, sizeof(::gameOfBoating::SGameOfBoatingSynchronizeBoat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameOfBoating::_CGameOfBoatingUpBoat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameOfBoating::_SGameOfBoatingUpBoat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameOfBoating::_CGameOfBoatingDownBoat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameOfBoating::_SGameOfBoatingDownBoat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameOfBoating::_CGameOfBoatingSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameOfBoating::_SGameOfBoatingSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameOfBoating::_CGameOfBoatingSynchronizeBoat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameOfBoating::_SGameOfBoatingSynchronizeBoat_default_instance_),
};

const char descriptor_table_protodef_gameOfBoating_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023gameOfBoating.proto\022\rgameOfBoating\"&\n\024"
  "CGameOfBoatingUpBoat\022\016\n\006boatId\030\001 \001(\005\"y\n\024"
  "SGameOfBoatingUpBoat\022\016\n\006boatId\030\001 \001(\005\022\017\n\007"
  "leftUid\030\002 \001(\005\022\020\n\010rightUid\030\003 \001(\005\022\021\n\tupBoa"
  "tUid\030\004 \001(\005\022\016\n\006status\030\005 \001(\005\022\013\n\003msg\030\006 \001(\t\""
  "(\n\026CGameOfBoatingDownBoat\022\016\n\006boatId\030\001 \001("
  "\005\"}\n\026SGameOfBoatingDownBoat\022\016\n\006boatId\030\001 "
  "\001(\005\022\017\n\007leftUid\030\002 \001(\005\022\020\n\010rightUid\030\003 \001(\005\022\023"
  "\n\013DownBoatUid\030\004 \001(\005\022\016\n\006status\030\005 \001(\005\022\013\n\003m"
  "sg\030\006 \001(\t\"<\n\025CGameOfBoatingSuccess\022\016\n\006boa"
  "tId\030\001 \001(\005\022\023\n\013teammateUid\030\002 \001(\005\"\271\001\n\025SGame"
  "OfBoatingSuccess\022\016\n\006boatId\030\001 \001(\005\022\013\n\003uid\030"
  "\002 \001(\005\022\023\n\013teammateUid\030\003 \001(\005\022\014\n\004nick\030\004 \001(\t"
  "\022\024\n\014teammateNick\030\005 \001(\t\022\020\n\010userIcon\030\006 \001(\t"
  "\022\030\n\020teammateUserIcon\030\007 \001(\t\022\013\n\003msg\030\010 \001(\t\022"
  "\021\n\tgameScore\030\t \001(\005\"\225\001\n\035CGameOfBoatingSyn"
  "chronizeBoat\022\032\n\022numberOfOperations\030\001 \001(\005"
  "\022\t\n\001x\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\021\n\trot"
  "ationY\030\005 \001(\002\022\021\n\trotationX\030\006 \001(\002\022\021\n\trotat"
  "ionZ\030\007 \001(\002\"\242\001\n\035SGameOfBoatingSynchronize"
  "Boat\022\013\n\003uid\030\001 \001(\005\022\032\n\022numberOfOperations\030"
  "\002 \001(\005\022\t\n\001x\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\021"
  "\n\trotationY\030\006 \001(\002\022\021\n\trotationX\030\007 \001(\002\022\021\n\t"
  "rotationZ\030\010 \001(\002B)\n\030com.dayou.space.proto"
  "bufB\rGameOfBoatingb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gameOfBoating_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gameOfBoating_2eproto_sccs[8] = {
  &scc_info_CGameOfBoatingDownBoat_gameOfBoating_2eproto.base,
  &scc_info_CGameOfBoatingSuccess_gameOfBoating_2eproto.base,
  &scc_info_CGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto.base,
  &scc_info_CGameOfBoatingUpBoat_gameOfBoating_2eproto.base,
  &scc_info_SGameOfBoatingDownBoat_gameOfBoating_2eproto.base,
  &scc_info_SGameOfBoatingSuccess_gameOfBoating_2eproto.base,
  &scc_info_SGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto.base,
  &scc_info_SGameOfBoatingUpBoat_gameOfBoating_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gameOfBoating_2eproto_once;
static bool descriptor_table_gameOfBoating_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameOfBoating_2eproto = {
  &descriptor_table_gameOfBoating_2eproto_initialized, descriptor_table_protodef_gameOfBoating_2eproto, "gameOfBoating.proto", 986,
  &descriptor_table_gameOfBoating_2eproto_once, descriptor_table_gameOfBoating_2eproto_sccs, descriptor_table_gameOfBoating_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_gameOfBoating_2eproto::offsets,
  file_level_metadata_gameOfBoating_2eproto, 8, file_level_enum_descriptors_gameOfBoating_2eproto, file_level_service_descriptors_gameOfBoating_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gameOfBoating_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gameOfBoating_2eproto), true);
namespace gameOfBoating {

// ===================================================================

void CGameOfBoatingUpBoat::InitAsDefaultInstance() {
}
class CGameOfBoatingUpBoat::_Internal {
 public:
};

CGameOfBoatingUpBoat::CGameOfBoatingUpBoat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameOfBoating.CGameOfBoatingUpBoat)
}
CGameOfBoatingUpBoat::CGameOfBoatingUpBoat(const CGameOfBoatingUpBoat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  boatid_ = from.boatid_;
  // @@protoc_insertion_point(copy_constructor:gameOfBoating.CGameOfBoatingUpBoat)
}

void CGameOfBoatingUpBoat::SharedCtor() {
  boatid_ = 0;
}

CGameOfBoatingUpBoat::~CGameOfBoatingUpBoat() {
  // @@protoc_insertion_point(destructor:gameOfBoating.CGameOfBoatingUpBoat)
  SharedDtor();
}

void CGameOfBoatingUpBoat::SharedDtor() {
}

void CGameOfBoatingUpBoat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameOfBoatingUpBoat& CGameOfBoatingUpBoat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGameOfBoatingUpBoat_gameOfBoating_2eproto.base);
  return *internal_default_instance();
}


void CGameOfBoatingUpBoat::Clear() {
// @@protoc_insertion_point(message_clear_start:gameOfBoating.CGameOfBoatingUpBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boatid_ = 0;
  _internal_metadata_.Clear();
}

const char* CGameOfBoatingUpBoat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boatId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameOfBoatingUpBoat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameOfBoating.CGameOfBoatingUpBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boatid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameOfBoating.CGameOfBoatingUpBoat)
  return target;
}

size_t CGameOfBoatingUpBoat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameOfBoating.CGameOfBoatingUpBoat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boatid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameOfBoatingUpBoat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameOfBoating.CGameOfBoatingUpBoat)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameOfBoatingUpBoat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameOfBoatingUpBoat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameOfBoating.CGameOfBoatingUpBoat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameOfBoating.CGameOfBoatingUpBoat)
    MergeFrom(*source);
  }
}

void CGameOfBoatingUpBoat::MergeFrom(const CGameOfBoatingUpBoat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameOfBoating.CGameOfBoatingUpBoat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boatid() != 0) {
    _internal_set_boatid(from._internal_boatid());
  }
}

void CGameOfBoatingUpBoat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameOfBoating.CGameOfBoatingUpBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameOfBoatingUpBoat::CopyFrom(const CGameOfBoatingUpBoat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameOfBoating.CGameOfBoatingUpBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameOfBoatingUpBoat::IsInitialized() const {
  return true;
}

void CGameOfBoatingUpBoat::InternalSwap(CGameOfBoatingUpBoat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(boatid_, other->boatid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameOfBoatingUpBoat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameOfBoatingUpBoat::InitAsDefaultInstance() {
}
class SGameOfBoatingUpBoat::_Internal {
 public:
};

SGameOfBoatingUpBoat::SGameOfBoatingUpBoat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameOfBoating.SGameOfBoatingUpBoat)
}
SGameOfBoatingUpBoat::SGameOfBoatingUpBoat(const SGameOfBoatingUpBoat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&boatid_, &from.boatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&boatid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:gameOfBoating.SGameOfBoatingUpBoat)
}

void SGameOfBoatingUpBoat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGameOfBoatingUpBoat_gameOfBoating_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(status_));
}

SGameOfBoatingUpBoat::~SGameOfBoatingUpBoat() {
  // @@protoc_insertion_point(destructor:gameOfBoating.SGameOfBoatingUpBoat)
  SharedDtor();
}

void SGameOfBoatingUpBoat::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGameOfBoatingUpBoat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameOfBoatingUpBoat& SGameOfBoatingUpBoat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameOfBoatingUpBoat_gameOfBoating_2eproto.base);
  return *internal_default_instance();
}


void SGameOfBoatingUpBoat::Clear() {
// @@protoc_insertion_point(message_clear_start:gameOfBoating.SGameOfBoatingUpBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* SGameOfBoatingUpBoat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boatId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 leftUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leftuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rightUid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rightuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 upBoatUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          upboatuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameOfBoating.SGameOfBoatingUpBoat.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameOfBoatingUpBoat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameOfBoating.SGameOfBoatingUpBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boatid(), target);
  }

  // int32 leftUid = 2;
  if (this->leftuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leftuid(), target);
  }

  // int32 rightUid = 3;
  if (this->rightuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rightuid(), target);
  }

  // int32 upBoatUid = 4;
  if (this->upboatuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_upboatuid(), target);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // string msg = 6;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameOfBoating.SGameOfBoatingUpBoat.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameOfBoating.SGameOfBoatingUpBoat)
  return target;
}

size_t SGameOfBoatingUpBoat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameOfBoating.SGameOfBoatingUpBoat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 6;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boatid());
  }

  // int32 leftUid = 2;
  if (this->leftuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leftuid());
  }

  // int32 rightUid = 3;
  if (this->rightuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rightuid());
  }

  // int32 upBoatUid = 4;
  if (this->upboatuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_upboatuid());
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameOfBoatingUpBoat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameOfBoating.SGameOfBoatingUpBoat)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameOfBoatingUpBoat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameOfBoatingUpBoat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameOfBoating.SGameOfBoatingUpBoat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameOfBoating.SGameOfBoatingUpBoat)
    MergeFrom(*source);
  }
}

void SGameOfBoatingUpBoat::MergeFrom(const SGameOfBoatingUpBoat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameOfBoating.SGameOfBoatingUpBoat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.boatid() != 0) {
    _internal_set_boatid(from._internal_boatid());
  }
  if (from.leftuid() != 0) {
    _internal_set_leftuid(from._internal_leftuid());
  }
  if (from.rightuid() != 0) {
    _internal_set_rightuid(from._internal_rightuid());
  }
  if (from.upboatuid() != 0) {
    _internal_set_upboatuid(from._internal_upboatuid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SGameOfBoatingUpBoat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameOfBoating.SGameOfBoatingUpBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameOfBoatingUpBoat::CopyFrom(const SGameOfBoatingUpBoat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameOfBoating.SGameOfBoatingUpBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameOfBoatingUpBoat::IsInitialized() const {
  return true;
}

void SGameOfBoatingUpBoat::InternalSwap(SGameOfBoatingUpBoat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(boatid_, other->boatid_);
  swap(leftuid_, other->leftuid_);
  swap(rightuid_, other->rightuid_);
  swap(upboatuid_, other->upboatuid_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameOfBoatingUpBoat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGameOfBoatingDownBoat::InitAsDefaultInstance() {
}
class CGameOfBoatingDownBoat::_Internal {
 public:
};

CGameOfBoatingDownBoat::CGameOfBoatingDownBoat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameOfBoating.CGameOfBoatingDownBoat)
}
CGameOfBoatingDownBoat::CGameOfBoatingDownBoat(const CGameOfBoatingDownBoat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  boatid_ = from.boatid_;
  // @@protoc_insertion_point(copy_constructor:gameOfBoating.CGameOfBoatingDownBoat)
}

void CGameOfBoatingDownBoat::SharedCtor() {
  boatid_ = 0;
}

CGameOfBoatingDownBoat::~CGameOfBoatingDownBoat() {
  // @@protoc_insertion_point(destructor:gameOfBoating.CGameOfBoatingDownBoat)
  SharedDtor();
}

void CGameOfBoatingDownBoat::SharedDtor() {
}

void CGameOfBoatingDownBoat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameOfBoatingDownBoat& CGameOfBoatingDownBoat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGameOfBoatingDownBoat_gameOfBoating_2eproto.base);
  return *internal_default_instance();
}


void CGameOfBoatingDownBoat::Clear() {
// @@protoc_insertion_point(message_clear_start:gameOfBoating.CGameOfBoatingDownBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boatid_ = 0;
  _internal_metadata_.Clear();
}

const char* CGameOfBoatingDownBoat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boatId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameOfBoatingDownBoat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameOfBoating.CGameOfBoatingDownBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boatid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameOfBoating.CGameOfBoatingDownBoat)
  return target;
}

size_t CGameOfBoatingDownBoat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameOfBoating.CGameOfBoatingDownBoat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boatid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameOfBoatingDownBoat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameOfBoating.CGameOfBoatingDownBoat)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameOfBoatingDownBoat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameOfBoatingDownBoat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameOfBoating.CGameOfBoatingDownBoat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameOfBoating.CGameOfBoatingDownBoat)
    MergeFrom(*source);
  }
}

void CGameOfBoatingDownBoat::MergeFrom(const CGameOfBoatingDownBoat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameOfBoating.CGameOfBoatingDownBoat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boatid() != 0) {
    _internal_set_boatid(from._internal_boatid());
  }
}

void CGameOfBoatingDownBoat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameOfBoating.CGameOfBoatingDownBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameOfBoatingDownBoat::CopyFrom(const CGameOfBoatingDownBoat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameOfBoating.CGameOfBoatingDownBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameOfBoatingDownBoat::IsInitialized() const {
  return true;
}

void CGameOfBoatingDownBoat::InternalSwap(CGameOfBoatingDownBoat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(boatid_, other->boatid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameOfBoatingDownBoat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameOfBoatingDownBoat::InitAsDefaultInstance() {
}
class SGameOfBoatingDownBoat::_Internal {
 public:
};

SGameOfBoatingDownBoat::SGameOfBoatingDownBoat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameOfBoating.SGameOfBoatingDownBoat)
}
SGameOfBoatingDownBoat::SGameOfBoatingDownBoat(const SGameOfBoatingDownBoat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&boatid_, &from.boatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&boatid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:gameOfBoating.SGameOfBoatingDownBoat)
}

void SGameOfBoatingDownBoat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGameOfBoatingDownBoat_gameOfBoating_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(status_));
}

SGameOfBoatingDownBoat::~SGameOfBoatingDownBoat() {
  // @@protoc_insertion_point(destructor:gameOfBoating.SGameOfBoatingDownBoat)
  SharedDtor();
}

void SGameOfBoatingDownBoat::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGameOfBoatingDownBoat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameOfBoatingDownBoat& SGameOfBoatingDownBoat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameOfBoatingDownBoat_gameOfBoating_2eproto.base);
  return *internal_default_instance();
}


void SGameOfBoatingDownBoat::Clear() {
// @@protoc_insertion_point(message_clear_start:gameOfBoating.SGameOfBoatingDownBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* SGameOfBoatingDownBoat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boatId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 leftUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leftuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rightUid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rightuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DownBoatUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          downboatuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameOfBoating.SGameOfBoatingDownBoat.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameOfBoatingDownBoat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameOfBoating.SGameOfBoatingDownBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boatid(), target);
  }

  // int32 leftUid = 2;
  if (this->leftuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leftuid(), target);
  }

  // int32 rightUid = 3;
  if (this->rightuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rightuid(), target);
  }

  // int32 DownBoatUid = 4;
  if (this->downboatuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_downboatuid(), target);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // string msg = 6;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameOfBoating.SGameOfBoatingDownBoat.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameOfBoating.SGameOfBoatingDownBoat)
  return target;
}

size_t SGameOfBoatingDownBoat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameOfBoating.SGameOfBoatingDownBoat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 6;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boatid());
  }

  // int32 leftUid = 2;
  if (this->leftuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leftuid());
  }

  // int32 rightUid = 3;
  if (this->rightuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rightuid());
  }

  // int32 DownBoatUid = 4;
  if (this->downboatuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_downboatuid());
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameOfBoatingDownBoat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameOfBoating.SGameOfBoatingDownBoat)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameOfBoatingDownBoat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameOfBoatingDownBoat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameOfBoating.SGameOfBoatingDownBoat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameOfBoating.SGameOfBoatingDownBoat)
    MergeFrom(*source);
  }
}

void SGameOfBoatingDownBoat::MergeFrom(const SGameOfBoatingDownBoat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameOfBoating.SGameOfBoatingDownBoat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.boatid() != 0) {
    _internal_set_boatid(from._internal_boatid());
  }
  if (from.leftuid() != 0) {
    _internal_set_leftuid(from._internal_leftuid());
  }
  if (from.rightuid() != 0) {
    _internal_set_rightuid(from._internal_rightuid());
  }
  if (from.downboatuid() != 0) {
    _internal_set_downboatuid(from._internal_downboatuid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SGameOfBoatingDownBoat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameOfBoating.SGameOfBoatingDownBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameOfBoatingDownBoat::CopyFrom(const SGameOfBoatingDownBoat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameOfBoating.SGameOfBoatingDownBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameOfBoatingDownBoat::IsInitialized() const {
  return true;
}

void SGameOfBoatingDownBoat::InternalSwap(SGameOfBoatingDownBoat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(boatid_, other->boatid_);
  swap(leftuid_, other->leftuid_);
  swap(rightuid_, other->rightuid_);
  swap(downboatuid_, other->downboatuid_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameOfBoatingDownBoat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGameOfBoatingSuccess::InitAsDefaultInstance() {
}
class CGameOfBoatingSuccess::_Internal {
 public:
};

CGameOfBoatingSuccess::CGameOfBoatingSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameOfBoating.CGameOfBoatingSuccess)
}
CGameOfBoatingSuccess::CGameOfBoatingSuccess(const CGameOfBoatingSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&boatid_, &from.boatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&teammateuid_) -
    reinterpret_cast<char*>(&boatid_)) + sizeof(teammateuid_));
  // @@protoc_insertion_point(copy_constructor:gameOfBoating.CGameOfBoatingSuccess)
}

void CGameOfBoatingSuccess::SharedCtor() {
  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teammateuid_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(teammateuid_));
}

CGameOfBoatingSuccess::~CGameOfBoatingSuccess() {
  // @@protoc_insertion_point(destructor:gameOfBoating.CGameOfBoatingSuccess)
  SharedDtor();
}

void CGameOfBoatingSuccess::SharedDtor() {
}

void CGameOfBoatingSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameOfBoatingSuccess& CGameOfBoatingSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGameOfBoatingSuccess_gameOfBoating_2eproto.base);
  return *internal_default_instance();
}


void CGameOfBoatingSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:gameOfBoating.CGameOfBoatingSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teammateuid_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(teammateuid_));
  _internal_metadata_.Clear();
}

const char* CGameOfBoatingSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boatId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 teammateUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          teammateuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameOfBoatingSuccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameOfBoating.CGameOfBoatingSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boatid(), target);
  }

  // int32 teammateUid = 2;
  if (this->teammateuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_teammateuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameOfBoating.CGameOfBoatingSuccess)
  return target;
}

size_t CGameOfBoatingSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameOfBoating.CGameOfBoatingSuccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boatid());
  }

  // int32 teammateUid = 2;
  if (this->teammateuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_teammateuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameOfBoatingSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameOfBoating.CGameOfBoatingSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameOfBoatingSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameOfBoatingSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameOfBoating.CGameOfBoatingSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameOfBoating.CGameOfBoatingSuccess)
    MergeFrom(*source);
  }
}

void CGameOfBoatingSuccess::MergeFrom(const CGameOfBoatingSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameOfBoating.CGameOfBoatingSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boatid() != 0) {
    _internal_set_boatid(from._internal_boatid());
  }
  if (from.teammateuid() != 0) {
    _internal_set_teammateuid(from._internal_teammateuid());
  }
}

void CGameOfBoatingSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameOfBoating.CGameOfBoatingSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameOfBoatingSuccess::CopyFrom(const CGameOfBoatingSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameOfBoating.CGameOfBoatingSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameOfBoatingSuccess::IsInitialized() const {
  return true;
}

void CGameOfBoatingSuccess::InternalSwap(CGameOfBoatingSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(boatid_, other->boatid_);
  swap(teammateuid_, other->teammateuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameOfBoatingSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameOfBoatingSuccess::InitAsDefaultInstance() {
}
class SGameOfBoatingSuccess::_Internal {
 public:
};

SGameOfBoatingSuccess::SGameOfBoatingSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameOfBoating.SGameOfBoatingSuccess)
}
SGameOfBoatingSuccess::SGameOfBoatingSuccess(const SGameOfBoatingSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  teammatenick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_teammatenick().empty()) {
    teammatenick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teammatenick_);
  }
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usericon().empty()) {
    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  teammateusericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_teammateusericon().empty()) {
    teammateusericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teammateusericon_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&boatid_, &from.boatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamescore_) -
    reinterpret_cast<char*>(&boatid_)) + sizeof(gamescore_));
  // @@protoc_insertion_point(copy_constructor:gameOfBoating.SGameOfBoatingSuccess)
}

void SGameOfBoatingSuccess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGameOfBoatingSuccess_gameOfBoating_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teammatenick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teammateusericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamescore_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(gamescore_));
}

SGameOfBoatingSuccess::~SGameOfBoatingSuccess() {
  // @@protoc_insertion_point(destructor:gameOfBoating.SGameOfBoatingSuccess)
  SharedDtor();
}

void SGameOfBoatingSuccess::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teammatenick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usericon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teammateusericon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGameOfBoatingSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameOfBoatingSuccess& SGameOfBoatingSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameOfBoatingSuccess_gameOfBoating_2eproto.base);
  return *internal_default_instance();
}


void SGameOfBoatingSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:gameOfBoating.SGameOfBoatingSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teammatenick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teammateusericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&boatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamescore_) -
      reinterpret_cast<char*>(&boatid_)) + sizeof(gamescore_));
  _internal_metadata_.Clear();
}

const char* SGameOfBoatingSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 boatId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          boatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 teammateUid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          teammateuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameOfBoating.SGameOfBoatingSuccess.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string teammateNick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_teammatenick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameOfBoating.SGameOfBoatingSuccess.teammateNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userIcon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_usericon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameOfBoating.SGameOfBoatingSuccess.userIcon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string teammateUserIcon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_teammateusericon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameOfBoating.SGameOfBoatingSuccess.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gameScore = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gamescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameOfBoatingSuccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameOfBoating.SGameOfBoatingSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_boatid(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  // int32 teammateUid = 3;
  if (this->teammateuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_teammateuid(), target);
  }

  // string nick = 4;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameOfBoating.SGameOfBoatingSuccess.nick");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nick(), target);
  }

  // string teammateNick = 5;
  if (this->teammatenick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teammatenick().data(), static_cast<int>(this->_internal_teammatenick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameOfBoating.SGameOfBoatingSuccess.teammateNick");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_teammatenick(), target);
  }

  // string userIcon = 6;
  if (this->usericon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usericon().data(), static_cast<int>(this->_internal_usericon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameOfBoating.SGameOfBoatingSuccess.userIcon");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_usericon(), target);
  }

  // string teammateUserIcon = 7;
  if (this->teammateusericon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teammateusericon().data(), static_cast<int>(this->_internal_teammateusericon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameOfBoating.SGameOfBoatingSuccess.teammateUserIcon");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_teammateusericon(), target);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameOfBoating.SGameOfBoatingSuccess.msg");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_msg(), target);
  }

  // int32 gameScore = 9;
  if (this->gamescore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_gamescore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameOfBoating.SGameOfBoatingSuccess)
  return target;
}

size_t SGameOfBoatingSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameOfBoating.SGameOfBoatingSuccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 4;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string teammateNick = 5;
  if (this->teammatenick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teammatenick());
  }

  // string userIcon = 6;
  if (this->usericon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usericon());
  }

  // string teammateUserIcon = 7;
  if (this->teammateusericon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teammateusericon());
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 boatId = 1;
  if (this->boatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boatid());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 teammateUid = 3;
  if (this->teammateuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_teammateuid());
  }

  // int32 gameScore = 9;
  if (this->gamescore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamescore());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameOfBoatingSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameOfBoating.SGameOfBoatingSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameOfBoatingSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameOfBoatingSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameOfBoating.SGameOfBoatingSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameOfBoating.SGameOfBoatingSuccess)
    MergeFrom(*source);
  }
}

void SGameOfBoatingSuccess::MergeFrom(const SGameOfBoatingSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameOfBoating.SGameOfBoatingSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.teammatenick().size() > 0) {

    teammatenick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teammatenick_);
  }
  if (from.usericon().size() > 0) {

    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  if (from.teammateusericon().size() > 0) {

    teammateusericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teammateusericon_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.boatid() != 0) {
    _internal_set_boatid(from._internal_boatid());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.teammateuid() != 0) {
    _internal_set_teammateuid(from._internal_teammateuid());
  }
  if (from.gamescore() != 0) {
    _internal_set_gamescore(from._internal_gamescore());
  }
}

void SGameOfBoatingSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameOfBoating.SGameOfBoatingSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameOfBoatingSuccess::CopyFrom(const SGameOfBoatingSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameOfBoating.SGameOfBoatingSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameOfBoatingSuccess::IsInitialized() const {
  return true;
}

void SGameOfBoatingSuccess::InternalSwap(SGameOfBoatingSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  teammatenick_.Swap(&other->teammatenick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usericon_.Swap(&other->usericon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  teammateusericon_.Swap(&other->teammateusericon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(boatid_, other->boatid_);
  swap(uid_, other->uid_);
  swap(teammateuid_, other->teammateuid_);
  swap(gamescore_, other->gamescore_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameOfBoatingSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGameOfBoatingSynchronizeBoat::InitAsDefaultInstance() {
}
class CGameOfBoatingSynchronizeBoat::_Internal {
 public:
};

CGameOfBoatingSynchronizeBoat::CGameOfBoatingSynchronizeBoat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameOfBoating.CGameOfBoatingSynchronizeBoat)
}
CGameOfBoatingSynchronizeBoat::CGameOfBoatingSynchronizeBoat(const CGameOfBoatingSynchronizeBoat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&numberofoperations_, &from.numberofoperations_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotationz_) -
    reinterpret_cast<char*>(&numberofoperations_)) + sizeof(rotationz_));
  // @@protoc_insertion_point(copy_constructor:gameOfBoating.CGameOfBoatingSynchronizeBoat)
}

void CGameOfBoatingSynchronizeBoat::SharedCtor() {
  ::memset(&numberofoperations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationz_) -
      reinterpret_cast<char*>(&numberofoperations_)) + sizeof(rotationz_));
}

CGameOfBoatingSynchronizeBoat::~CGameOfBoatingSynchronizeBoat() {
  // @@protoc_insertion_point(destructor:gameOfBoating.CGameOfBoatingSynchronizeBoat)
  SharedDtor();
}

void CGameOfBoatingSynchronizeBoat::SharedDtor() {
}

void CGameOfBoatingSynchronizeBoat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameOfBoatingSynchronizeBoat& CGameOfBoatingSynchronizeBoat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto.base);
  return *internal_default_instance();
}


void CGameOfBoatingSynchronizeBoat::Clear() {
// @@protoc_insertion_point(message_clear_start:gameOfBoating.CGameOfBoatingSynchronizeBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&numberofoperations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationz_) -
      reinterpret_cast<char*>(&numberofoperations_)) + sizeof(rotationz_));
  _internal_metadata_.Clear();
}

const char* CGameOfBoatingSynchronizeBoat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 numberOfOperations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          numberofoperations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          rotationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          rotationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rotationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameOfBoatingSynchronizeBoat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameOfBoating.CGameOfBoatingSynchronizeBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 numberOfOperations = 1;
  if (this->numberofoperations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_numberofoperations(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float rotationY = 5;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rotationy(), target);
  }

  // float rotationX = 6;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rotationx(), target);
  }

  // float rotationZ = 7;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rotationz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameOfBoating.CGameOfBoatingSynchronizeBoat)
  return target;
}

size_t CGameOfBoatingSynchronizeBoat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameOfBoating.CGameOfBoatingSynchronizeBoat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 numberOfOperations = 1;
  if (this->numberofoperations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofoperations());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationY = 5;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationX = 6;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationZ = 7;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameOfBoatingSynchronizeBoat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameOfBoating.CGameOfBoatingSynchronizeBoat)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameOfBoatingSynchronizeBoat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameOfBoatingSynchronizeBoat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameOfBoating.CGameOfBoatingSynchronizeBoat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameOfBoating.CGameOfBoatingSynchronizeBoat)
    MergeFrom(*source);
  }
}

void CGameOfBoatingSynchronizeBoat::MergeFrom(const CGameOfBoatingSynchronizeBoat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameOfBoating.CGameOfBoatingSynchronizeBoat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.numberofoperations() != 0) {
    _internal_set_numberofoperations(from._internal_numberofoperations());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.rotationy() <= 0 && from.rotationy() >= 0)) {
    _internal_set_rotationy(from._internal_rotationy());
  }
  if (!(from.rotationx() <= 0 && from.rotationx() >= 0)) {
    _internal_set_rotationx(from._internal_rotationx());
  }
  if (!(from.rotationz() <= 0 && from.rotationz() >= 0)) {
    _internal_set_rotationz(from._internal_rotationz());
  }
}

void CGameOfBoatingSynchronizeBoat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameOfBoating.CGameOfBoatingSynchronizeBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameOfBoatingSynchronizeBoat::CopyFrom(const CGameOfBoatingSynchronizeBoat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameOfBoating.CGameOfBoatingSynchronizeBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameOfBoatingSynchronizeBoat::IsInitialized() const {
  return true;
}

void CGameOfBoatingSynchronizeBoat::InternalSwap(CGameOfBoatingSynchronizeBoat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(numberofoperations_, other->numberofoperations_);
  swap(x_, other->x_);
  swap(z_, other->z_);
  swap(y_, other->y_);
  swap(rotationy_, other->rotationy_);
  swap(rotationx_, other->rotationx_);
  swap(rotationz_, other->rotationz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameOfBoatingSynchronizeBoat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameOfBoatingSynchronizeBoat::InitAsDefaultInstance() {
}
class SGameOfBoatingSynchronizeBoat::_Internal {
 public:
};

SGameOfBoatingSynchronizeBoat::SGameOfBoatingSynchronizeBoat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameOfBoating.SGameOfBoatingSynchronizeBoat)
}
SGameOfBoatingSynchronizeBoat::SGameOfBoatingSynchronizeBoat(const SGameOfBoatingSynchronizeBoat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotationz_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(rotationz_));
  // @@protoc_insertion_point(copy_constructor:gameOfBoating.SGameOfBoatingSynchronizeBoat)
}

void SGameOfBoatingSynchronizeBoat::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationz_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(rotationz_));
}

SGameOfBoatingSynchronizeBoat::~SGameOfBoatingSynchronizeBoat() {
  // @@protoc_insertion_point(destructor:gameOfBoating.SGameOfBoatingSynchronizeBoat)
  SharedDtor();
}

void SGameOfBoatingSynchronizeBoat::SharedDtor() {
}

void SGameOfBoatingSynchronizeBoat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameOfBoatingSynchronizeBoat& SGameOfBoatingSynchronizeBoat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameOfBoatingSynchronizeBoat_gameOfBoating_2eproto.base);
  return *internal_default_instance();
}


void SGameOfBoatingSynchronizeBoat::Clear() {
// @@protoc_insertion_point(message_clear_start:gameOfBoating.SGameOfBoatingSynchronizeBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationz_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(rotationz_));
  _internal_metadata_.Clear();
}

const char* SGameOfBoatingSynchronizeBoat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numberOfOperations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numberofoperations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          rotationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rotationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationZ = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          rotationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameOfBoatingSynchronizeBoat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameOfBoating.SGameOfBoatingSynchronizeBoat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 numberOfOperations = 2;
  if (this->numberofoperations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_numberofoperations(), target);
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // float rotationY = 6;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rotationy(), target);
  }

  // float rotationX = 7;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rotationx(), target);
  }

  // float rotationZ = 8;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rotationz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameOfBoating.SGameOfBoatingSynchronizeBoat)
  return target;
}

size_t SGameOfBoatingSynchronizeBoat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameOfBoating.SGameOfBoatingSynchronizeBoat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 numberOfOperations = 2;
  if (this->numberofoperations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofoperations());
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationY = 6;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationX = 7;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationZ = 8;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameOfBoatingSynchronizeBoat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameOfBoating.SGameOfBoatingSynchronizeBoat)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameOfBoatingSynchronizeBoat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameOfBoatingSynchronizeBoat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameOfBoating.SGameOfBoatingSynchronizeBoat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameOfBoating.SGameOfBoatingSynchronizeBoat)
    MergeFrom(*source);
  }
}

void SGameOfBoatingSynchronizeBoat::MergeFrom(const SGameOfBoatingSynchronizeBoat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameOfBoating.SGameOfBoatingSynchronizeBoat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.numberofoperations() != 0) {
    _internal_set_numberofoperations(from._internal_numberofoperations());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.rotationy() <= 0 && from.rotationy() >= 0)) {
    _internal_set_rotationy(from._internal_rotationy());
  }
  if (!(from.rotationx() <= 0 && from.rotationx() >= 0)) {
    _internal_set_rotationx(from._internal_rotationx());
  }
  if (!(from.rotationz() <= 0 && from.rotationz() >= 0)) {
    _internal_set_rotationz(from._internal_rotationz());
  }
}

void SGameOfBoatingSynchronizeBoat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameOfBoating.SGameOfBoatingSynchronizeBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameOfBoatingSynchronizeBoat::CopyFrom(const SGameOfBoatingSynchronizeBoat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameOfBoating.SGameOfBoatingSynchronizeBoat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameOfBoatingSynchronizeBoat::IsInitialized() const {
  return true;
}

void SGameOfBoatingSynchronizeBoat::InternalSwap(SGameOfBoatingSynchronizeBoat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(numberofoperations_, other->numberofoperations_);
  swap(x_, other->x_);
  swap(z_, other->z_);
  swap(y_, other->y_);
  swap(rotationy_, other->rotationy_);
  swap(rotationx_, other->rotationx_);
  swap(rotationz_, other->rotationz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameOfBoatingSynchronizeBoat::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gameOfBoating
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gameOfBoating::CGameOfBoatingUpBoat* Arena::CreateMaybeMessage< ::gameOfBoating::CGameOfBoatingUpBoat >(Arena* arena) {
  return Arena::CreateInternal< ::gameOfBoating::CGameOfBoatingUpBoat >(arena);
}
template<> PROTOBUF_NOINLINE ::gameOfBoating::SGameOfBoatingUpBoat* Arena::CreateMaybeMessage< ::gameOfBoating::SGameOfBoatingUpBoat >(Arena* arena) {
  return Arena::CreateInternal< ::gameOfBoating::SGameOfBoatingUpBoat >(arena);
}
template<> PROTOBUF_NOINLINE ::gameOfBoating::CGameOfBoatingDownBoat* Arena::CreateMaybeMessage< ::gameOfBoating::CGameOfBoatingDownBoat >(Arena* arena) {
  return Arena::CreateInternal< ::gameOfBoating::CGameOfBoatingDownBoat >(arena);
}
template<> PROTOBUF_NOINLINE ::gameOfBoating::SGameOfBoatingDownBoat* Arena::CreateMaybeMessage< ::gameOfBoating::SGameOfBoatingDownBoat >(Arena* arena) {
  return Arena::CreateInternal< ::gameOfBoating::SGameOfBoatingDownBoat >(arena);
}
template<> PROTOBUF_NOINLINE ::gameOfBoating::CGameOfBoatingSuccess* Arena::CreateMaybeMessage< ::gameOfBoating::CGameOfBoatingSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::gameOfBoating::CGameOfBoatingSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::gameOfBoating::SGameOfBoatingSuccess* Arena::CreateMaybeMessage< ::gameOfBoating::SGameOfBoatingSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::gameOfBoating::SGameOfBoatingSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::gameOfBoating::CGameOfBoatingSynchronizeBoat* Arena::CreateMaybeMessage< ::gameOfBoating::CGameOfBoatingSynchronizeBoat >(Arena* arena) {
  return Arena::CreateInternal< ::gameOfBoating::CGameOfBoatingSynchronizeBoat >(arena);
}
template<> PROTOBUF_NOINLINE ::gameOfBoating::SGameOfBoatingSynchronizeBoat* Arena::CreateMaybeMessage< ::gameOfBoating::SGameOfBoatingSynchronizeBoat >(Arena* arena) {
  return Arena::CreateInternal< ::gameOfBoating::SGameOfBoatingSynchronizeBoat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
