// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linedNum.proto

#include "linedNum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace switchRoom {
class CLinedNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLinedNum> _instance;
} _CLinedNum_default_instance_;
class SLinedNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLinedNum> _instance;
} _SLinedNum_default_instance_;
}  // namespace switchRoom
static void InitDefaultsscc_info_CLinedNum_linedNum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchRoom::_CLinedNum_default_instance_;
    new (ptr) ::switchRoom::CLinedNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchRoom::CLinedNum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLinedNum_linedNum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CLinedNum_linedNum_2eproto}, {}};

static void InitDefaultsscc_info_SLinedNum_linedNum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchRoom::_SLinedNum_default_instance_;
    new (ptr) ::switchRoom::SLinedNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchRoom::SLinedNum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLinedNum_linedNum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLinedNum_linedNum_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_linedNum_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_linedNum_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_linedNum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_linedNum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchRoom::CLinedNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchRoom::CLinedNum, houseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchRoom::SLinedNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchRoom::SLinedNum, number_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::SLinedNum, uid_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::SLinedNum, houseid_),
  PROTOBUF_FIELD_OFFSET(::switchRoom::SLinedNum, vipflag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::switchRoom::CLinedNum)},
  { 6, -1, sizeof(::switchRoom::SLinedNum)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchRoom::_CLinedNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchRoom::_SLinedNum_default_instance_),
};

const char descriptor_table_protodef_linedNum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016linedNum.proto\022\nswitchRoom\"\034\n\tCLinedNu"
  "m\022\017\n\007houseID\030\001 \001(\005\"J\n\tSLinedNum\022\016\n\006numbe"
  "r\030\002 \001(\005\022\013\n\003uid\030\003 \001(\005\022\017\n\007houseID\030\004 \001(\005\022\017\n"
  "\007vipFlag\030\005 \001(\005B$\n\030com.dayou.space.protob"
  "ufB\010LinedNumb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_linedNum_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_linedNum_2eproto_sccs[2] = {
  &scc_info_CLinedNum_linedNum_2eproto.base,
  &scc_info_SLinedNum_linedNum_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_linedNum_2eproto_once;
static bool descriptor_table_linedNum_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_linedNum_2eproto = {
  &descriptor_table_linedNum_2eproto_initialized, descriptor_table_protodef_linedNum_2eproto, "linedNum.proto", 180,
  &descriptor_table_linedNum_2eproto_once, descriptor_table_linedNum_2eproto_sccs, descriptor_table_linedNum_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_linedNum_2eproto::offsets,
  file_level_metadata_linedNum_2eproto, 2, file_level_enum_descriptors_linedNum_2eproto, file_level_service_descriptors_linedNum_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_linedNum_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_linedNum_2eproto), true);
namespace switchRoom {

// ===================================================================

void CLinedNum::InitAsDefaultInstance() {
}
class CLinedNum::_Internal {
 public:
};

CLinedNum::CLinedNum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchRoom.CLinedNum)
}
CLinedNum::CLinedNum(const CLinedNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  houseid_ = from.houseid_;
  // @@protoc_insertion_point(copy_constructor:switchRoom.CLinedNum)
}

void CLinedNum::SharedCtor() {
  houseid_ = 0;
}

CLinedNum::~CLinedNum() {
  // @@protoc_insertion_point(destructor:switchRoom.CLinedNum)
  SharedDtor();
}

void CLinedNum::SharedDtor() {
}

void CLinedNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLinedNum& CLinedNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLinedNum_linedNum_2eproto.base);
  return *internal_default_instance();
}


void CLinedNum::Clear() {
// @@protoc_insertion_point(message_clear_start:switchRoom.CLinedNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  houseid_ = 0;
  _internal_metadata_.Clear();
}

const char* CLinedNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLinedNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchRoom.CLinedNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseID = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchRoom.CLinedNum)
  return target;
}

size_t CLinedNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchRoom.CLinedNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseID = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLinedNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchRoom.CLinedNum)
  GOOGLE_DCHECK_NE(&from, this);
  const CLinedNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLinedNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchRoom.CLinedNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchRoom.CLinedNum)
    MergeFrom(*source);
  }
}

void CLinedNum::MergeFrom(const CLinedNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchRoom.CLinedNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void CLinedNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchRoom.CLinedNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLinedNum::CopyFrom(const CLinedNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchRoom.CLinedNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLinedNum::IsInitialized() const {
  return true;
}

void CLinedNum::InternalSwap(CLinedNum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLinedNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLinedNum::InitAsDefaultInstance() {
}
class SLinedNum::_Internal {
 public:
};

SLinedNum::SLinedNum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchRoom.SLinedNum)
}
SLinedNum::SLinedNum(const SLinedNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&vipflag_) -
    reinterpret_cast<char*>(&number_)) + sizeof(vipflag_));
  // @@protoc_insertion_point(copy_constructor:switchRoom.SLinedNum)
}

void SLinedNum::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vipflag_) -
      reinterpret_cast<char*>(&number_)) + sizeof(vipflag_));
}

SLinedNum::~SLinedNum() {
  // @@protoc_insertion_point(destructor:switchRoom.SLinedNum)
  SharedDtor();
}

void SLinedNum::SharedDtor() {
}

void SLinedNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLinedNum& SLinedNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLinedNum_linedNum_2eproto.base);
  return *internal_default_instance();
}


void SLinedNum::Clear() {
// @@protoc_insertion_point(message_clear_start:switchRoom.SLinedNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vipflag_) -
      reinterpret_cast<char*>(&number_)) + sizeof(vipflag_));
  _internal_metadata_.Clear();
}

const char* SLinedNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vipFlag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vipflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLinedNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchRoom.SLinedNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 2;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  // int32 houseID = 4;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_houseid(), target);
  }

  // int32 vipFlag = 5;
  if (this->vipflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vipflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchRoom.SLinedNum)
  return target;
}

size_t SLinedNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchRoom.SLinedNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number = 2;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 houseID = 4;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 vipFlag = 5;
  if (this->vipflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vipflag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLinedNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchRoom.SLinedNum)
  GOOGLE_DCHECK_NE(&from, this);
  const SLinedNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLinedNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchRoom.SLinedNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchRoom.SLinedNum)
    MergeFrom(*source);
  }
}

void SLinedNum::MergeFrom(const SLinedNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchRoom.SLinedNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.vipflag() != 0) {
    _internal_set_vipflag(from._internal_vipflag());
  }
}

void SLinedNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchRoom.SLinedNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLinedNum::CopyFrom(const SLinedNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchRoom.SLinedNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLinedNum::IsInitialized() const {
  return true;
}

void SLinedNum::InternalSwap(SLinedNum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_, other->number_);
  swap(uid_, other->uid_);
  swap(houseid_, other->houseid_);
  swap(vipflag_, other->vipflag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLinedNum::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace switchRoom
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::switchRoom::CLinedNum* Arena::CreateMaybeMessage< ::switchRoom::CLinedNum >(Arena* arena) {
  return Arena::CreateInternal< ::switchRoom::CLinedNum >(arena);
}
template<> PROTOBUF_NOINLINE ::switchRoom::SLinedNum* Arena::CreateMaybeMessage< ::switchRoom::SLinedNum >(Arena* arena) {
  return Arena::CreateInternal< ::switchRoom::SLinedNum >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
