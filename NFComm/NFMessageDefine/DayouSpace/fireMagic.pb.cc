// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fireMagic.proto

#include "fireMagic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_head_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BHead_head_2eproto;
namespace fireMagic {
class CFireMagicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CFireMagic> _instance;
} _CFireMagic_default_instance_;
class SFireMagicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFireMagic> _instance;
} _SFireMagic_default_instance_;
class SBroadFireMagicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBroadFireMagic> _instance;
} _SBroadFireMagic_default_instance_;
}  // namespace fireMagic
static void InitDefaultsscc_info_CFireMagic_fireMagic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fireMagic::_CFireMagic_default_instance_;
    new (ptr) ::fireMagic::CFireMagic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fireMagic::CFireMagic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CFireMagic_fireMagic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CFireMagic_fireMagic_2eproto}, {}};

static void InitDefaultsscc_info_SBroadFireMagic_fireMagic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fireMagic::_SBroadFireMagic_default_instance_;
    new (ptr) ::fireMagic::SBroadFireMagic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fireMagic::SBroadFireMagic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SBroadFireMagic_fireMagic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SBroadFireMagic_fireMagic_2eproto}, {}};

static void InitDefaultsscc_info_SFireMagic_fireMagic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fireMagic::_SFireMagic_default_instance_;
    new (ptr) ::fireMagic::SFireMagic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fireMagic::SFireMagic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SFireMagic_fireMagic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SFireMagic_fireMagic_2eproto}, {
      &scc_info_BHead_head_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fireMagic_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fireMagic_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fireMagic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fireMagic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fireMagic::CFireMagic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fireMagic::CFireMagic, touid_),
  PROTOBUF_FIELD_OFFSET(::fireMagic::CFireMagic, toolid_),
  PROTOBUF_FIELD_OFFSET(::fireMagic::CFireMagic, actionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fireMagic::SFireMagic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fireMagic::SFireMagic, head_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fireMagic::SBroadFireMagic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fireMagic::SBroadFireMagic, fromuid_),
  PROTOBUF_FIELD_OFFSET(::fireMagic::SBroadFireMagic, touid_),
  PROTOBUF_FIELD_OFFSET(::fireMagic::SBroadFireMagic, toolid_),
  PROTOBUF_FIELD_OFFSET(::fireMagic::SBroadFireMagic, actionid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fireMagic::CFireMagic)},
  { 8, -1, sizeof(::fireMagic::SFireMagic)},
  { 14, -1, sizeof(::fireMagic::SBroadFireMagic)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fireMagic::_CFireMagic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fireMagic::_SFireMagic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fireMagic::_SBroadFireMagic_default_instance_),
};

const char descriptor_table_protodef_fireMagic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017fireMagic.proto\022\tfireMagic\032\nhead.proto"
  "\"=\n\nCFireMagic\022\r\n\005toUid\030\001 \001(\005\022\016\n\006toolID\030"
  "\002 \001(\005\022\020\n\010actionID\030\003 \001(\005\"\'\n\nSFireMagic\022\031\n"
  "\004head\030\001 \001(\0132\013.head.BHead\"S\n\017SBroadFireMa"
  "gic\022\017\n\007fromUid\030\001 \001(\005\022\r\n\005toUid\030\002 \001(\005\022\016\n\006t"
  "oolID\030\003 \001(\005\022\020\n\010actionID\030\004 \001(\005B%\n\030com.day"
  "ou.space.protobufB\tFireMagicb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fireMagic_2eproto_deps[1] = {
  &::descriptor_table_head_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fireMagic_2eproto_sccs[3] = {
  &scc_info_CFireMagic_fireMagic_2eproto.base,
  &scc_info_SBroadFireMagic_fireMagic_2eproto.base,
  &scc_info_SFireMagic_fireMagic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fireMagic_2eproto_once;
static bool descriptor_table_fireMagic_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fireMagic_2eproto = {
  &descriptor_table_fireMagic_2eproto_initialized, descriptor_table_protodef_fireMagic_2eproto, "fireMagic.proto", 276,
  &descriptor_table_fireMagic_2eproto_once, descriptor_table_fireMagic_2eproto_sccs, descriptor_table_fireMagic_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_fireMagic_2eproto::offsets,
  file_level_metadata_fireMagic_2eproto, 3, file_level_enum_descriptors_fireMagic_2eproto, file_level_service_descriptors_fireMagic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fireMagic_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fireMagic_2eproto), true);
namespace fireMagic {

// ===================================================================

void CFireMagic::InitAsDefaultInstance() {
}
class CFireMagic::_Internal {
 public:
};

CFireMagic::CFireMagic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fireMagic.CFireMagic)
}
CFireMagic::CFireMagic(const CFireMagic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&touid_, &from.touid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&touid_)) + sizeof(actionid_));
  // @@protoc_insertion_point(copy_constructor:fireMagic.CFireMagic)
}

void CFireMagic::SharedCtor() {
  ::memset(&touid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&touid_)) + sizeof(actionid_));
}

CFireMagic::~CFireMagic() {
  // @@protoc_insertion_point(destructor:fireMagic.CFireMagic)
  SharedDtor();
}

void CFireMagic::SharedDtor() {
}

void CFireMagic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CFireMagic& CFireMagic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CFireMagic_fireMagic_2eproto.base);
  return *internal_default_instance();
}


void CFireMagic::Clear() {
// @@protoc_insertion_point(message_clear_start:fireMagic.CFireMagic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&touid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&touid_)) + sizeof(actionid_));
  _internal_metadata_.Clear();
}

const char* CFireMagic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 toUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          touid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 toolID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          toolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFireMagic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fireMagic.CFireMagic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 toUid = 1;
  if (this->touid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_touid(), target);
  }

  // int32 toolID = 2;
  if (this->toolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_toolid(), target);
  }

  // int32 actionID = 3;
  if (this->actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fireMagic.CFireMagic)
  return target;
}

size_t CFireMagic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fireMagic.CFireMagic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 toUid = 1;
  if (this->touid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_touid());
  }

  // int32 toolID = 2;
  if (this->toolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_toolid());
  }

  // int32 actionID = 3;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFireMagic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fireMagic.CFireMagic)
  GOOGLE_DCHECK_NE(&from, this);
  const CFireMagic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFireMagic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fireMagic.CFireMagic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fireMagic.CFireMagic)
    MergeFrom(*source);
  }
}

void CFireMagic::MergeFrom(const CFireMagic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fireMagic.CFireMagic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.touid() != 0) {
    _internal_set_touid(from._internal_touid());
  }
  if (from.toolid() != 0) {
    _internal_set_toolid(from._internal_toolid());
  }
  if (from.actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
}

void CFireMagic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fireMagic.CFireMagic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFireMagic::CopyFrom(const CFireMagic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fireMagic.CFireMagic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFireMagic::IsInitialized() const {
  return true;
}

void CFireMagic::InternalSwap(CFireMagic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(touid_, other->touid_);
  swap(toolid_, other->toolid_);
  swap(actionid_, other->actionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFireMagic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SFireMagic::InitAsDefaultInstance() {
  ::fireMagic::_SFireMagic_default_instance_._instance.get_mutable()->head_ = const_cast< ::head::BHead*>(
      ::head::BHead::internal_default_instance());
}
class SFireMagic::_Internal {
 public:
  static const ::head::BHead& head(const SFireMagic* msg);
};

const ::head::BHead&
SFireMagic::_Internal::head(const SFireMagic* msg) {
  return *msg->head_;
}
void SFireMagic::clear_head() {
  if (GetArenaNoVirtual() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
SFireMagic::SFireMagic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fireMagic.SFireMagic)
}
SFireMagic::SFireMagic(const SFireMagic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::head::BHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fireMagic.SFireMagic)
}

void SFireMagic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SFireMagic_fireMagic_2eproto.base);
  head_ = nullptr;
}

SFireMagic::~SFireMagic() {
  // @@protoc_insertion_point(destructor:fireMagic.SFireMagic)
  SharedDtor();
}

void SFireMagic::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void SFireMagic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFireMagic& SFireMagic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFireMagic_fireMagic_2eproto.base);
  return *internal_default_instance();
}


void SFireMagic::Clear() {
// @@protoc_insertion_point(message_clear_start:fireMagic.SFireMagic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SFireMagic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .head.BHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SFireMagic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fireMagic.SFireMagic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .head.BHead head = 1;
  if (this->has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fireMagic.SFireMagic)
  return target;
}

size_t SFireMagic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fireMagic.SFireMagic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .head.BHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFireMagic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fireMagic.SFireMagic)
  GOOGLE_DCHECK_NE(&from, this);
  const SFireMagic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SFireMagic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fireMagic.SFireMagic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fireMagic.SFireMagic)
    MergeFrom(*source);
  }
}

void SFireMagic::MergeFrom(const SFireMagic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fireMagic.SFireMagic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    _internal_mutable_head()->::head::BHead::MergeFrom(from._internal_head());
  }
}

void SFireMagic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fireMagic.SFireMagic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFireMagic::CopyFrom(const SFireMagic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fireMagic.SFireMagic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFireMagic::IsInitialized() const {
  return true;
}

void SFireMagic::InternalSwap(SFireMagic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(head_, other->head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SFireMagic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBroadFireMagic::InitAsDefaultInstance() {
}
class SBroadFireMagic::_Internal {
 public:
};

SBroadFireMagic::SBroadFireMagic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fireMagic.SBroadFireMagic)
}
SBroadFireMagic::SBroadFireMagic(const SBroadFireMagic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fromuid_, &from.fromuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&fromuid_)) + sizeof(actionid_));
  // @@protoc_insertion_point(copy_constructor:fireMagic.SBroadFireMagic)
}

void SBroadFireMagic::SharedCtor() {
  ::memset(&fromuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&fromuid_)) + sizeof(actionid_));
}

SBroadFireMagic::~SBroadFireMagic() {
  // @@protoc_insertion_point(destructor:fireMagic.SBroadFireMagic)
  SharedDtor();
}

void SBroadFireMagic::SharedDtor() {
}

void SBroadFireMagic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBroadFireMagic& SBroadFireMagic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBroadFireMagic_fireMagic_2eproto.base);
  return *internal_default_instance();
}


void SBroadFireMagic::Clear() {
// @@protoc_insertion_point(message_clear_start:fireMagic.SBroadFireMagic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fromuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&fromuid_)) + sizeof(actionid_));
  _internal_metadata_.Clear();
}

const char* SBroadFireMagic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fromUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fromuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 toUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          touid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 toolID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          toolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBroadFireMagic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fireMagic.SBroadFireMagic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fromUid = 1;
  if (this->fromuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fromuid(), target);
  }

  // int32 toUid = 2;
  if (this->touid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_touid(), target);
  }

  // int32 toolID = 3;
  if (this->toolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_toolid(), target);
  }

  // int32 actionID = 4;
  if (this->actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fireMagic.SBroadFireMagic)
  return target;
}

size_t SBroadFireMagic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fireMagic.SBroadFireMagic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fromUid = 1;
  if (this->fromuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fromuid());
  }

  // int32 toUid = 2;
  if (this->touid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_touid());
  }

  // int32 toolID = 3;
  if (this->toolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_toolid());
  }

  // int32 actionID = 4;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBroadFireMagic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fireMagic.SBroadFireMagic)
  GOOGLE_DCHECK_NE(&from, this);
  const SBroadFireMagic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBroadFireMagic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fireMagic.SBroadFireMagic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fireMagic.SBroadFireMagic)
    MergeFrom(*source);
  }
}

void SBroadFireMagic::MergeFrom(const SBroadFireMagic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fireMagic.SBroadFireMagic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fromuid() != 0) {
    _internal_set_fromuid(from._internal_fromuid());
  }
  if (from.touid() != 0) {
    _internal_set_touid(from._internal_touid());
  }
  if (from.toolid() != 0) {
    _internal_set_toolid(from._internal_toolid());
  }
  if (from.actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
}

void SBroadFireMagic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fireMagic.SBroadFireMagic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBroadFireMagic::CopyFrom(const SBroadFireMagic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fireMagic.SBroadFireMagic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBroadFireMagic::IsInitialized() const {
  return true;
}

void SBroadFireMagic::InternalSwap(SBroadFireMagic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fromuid_, other->fromuid_);
  swap(touid_, other->touid_);
  swap(toolid_, other->toolid_);
  swap(actionid_, other->actionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBroadFireMagic::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fireMagic
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fireMagic::CFireMagic* Arena::CreateMaybeMessage< ::fireMagic::CFireMagic >(Arena* arena) {
  return Arena::CreateInternal< ::fireMagic::CFireMagic >(arena);
}
template<> PROTOBUF_NOINLINE ::fireMagic::SFireMagic* Arena::CreateMaybeMessage< ::fireMagic::SFireMagic >(Arena* arena) {
  return Arena::CreateInternal< ::fireMagic::SFireMagic >(arena);
}
template<> PROTOBUF_NOINLINE ::fireMagic::SBroadFireMagic* Arena::CreateMaybeMessage< ::fireMagic::SBroadFireMagic >(Arena* arena) {
  return Arena::CreateInternal< ::fireMagic::SBroadFireMagic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
