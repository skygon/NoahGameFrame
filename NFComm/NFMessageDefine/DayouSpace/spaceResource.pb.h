// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceResource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceResource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceResource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceResource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceResource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceResource_2eproto;
namespace spaceResource {
class CSpaceResourceList;
class CSpaceResourceListDefaultTypeInternal;
extern CSpaceResourceListDefaultTypeInternal _CSpaceResourceList_default_instance_;
class SSpaceResourceList;
class SSpaceResourceListDefaultTypeInternal;
extern SSpaceResourceListDefaultTypeInternal _SSpaceResourceList_default_instance_;
class SpaceResourceInfo;
class SpaceResourceInfoDefaultTypeInternal;
extern SpaceResourceInfoDefaultTypeInternal _SpaceResourceInfo_default_instance_;
}  // namespace spaceResource
PROTOBUF_NAMESPACE_OPEN
template<> ::spaceResource::CSpaceResourceList* Arena::CreateMaybeMessage<::spaceResource::CSpaceResourceList>(Arena*);
template<> ::spaceResource::SSpaceResourceList* Arena::CreateMaybeMessage<::spaceResource::SSpaceResourceList>(Arena*);
template<> ::spaceResource::SpaceResourceInfo* Arena::CreateMaybeMessage<::spaceResource::SpaceResourceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spaceResource {

// ===================================================================

class CSpaceResourceList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceResource.CSpaceResourceList) */ {
 public:
  CSpaceResourceList();
  virtual ~CSpaceResourceList();

  CSpaceResourceList(const CSpaceResourceList& from);
  CSpaceResourceList(CSpaceResourceList&& from) noexcept
    : CSpaceResourceList() {
    *this = ::std::move(from);
  }

  inline CSpaceResourceList& operator=(const CSpaceResourceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceResourceList& operator=(CSpaceResourceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceResourceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceResourceList* internal_default_instance() {
    return reinterpret_cast<const CSpaceResourceList*>(
               &_CSpaceResourceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSpaceResourceList& a, CSpaceResourceList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceResourceList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceResourceList* New() const final {
    return CreateMaybeMessage<CSpaceResourceList>(nullptr);
  }

  CSpaceResourceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceResourceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceResourceList& from);
  void MergeFrom(const CSpaceResourceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceResourceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceResource.CSpaceResourceList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceResource_2eproto);
    return ::descriptor_table_spaceResource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceResourceIdsFieldNumber = 1,
  };
  // repeated int32 spaceResourceIds = 1;
  int spaceresourceids_size() const;
  private:
  int _internal_spaceresourceids_size() const;
  public:
  void clear_spaceresourceids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spaceresourceids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_spaceresourceids() const;
  void _internal_add_spaceresourceids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_spaceresourceids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 spaceresourceids(int index) const;
  void set_spaceresourceids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_spaceresourceids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      spaceresourceids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_spaceresourceids();

  // @@protoc_insertion_point(class_scope:spaceResource.CSpaceResourceList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > spaceresourceids_;
  mutable std::atomic<int> _spaceresourceids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceResource_2eproto;
};
// -------------------------------------------------------------------

class SSpaceResourceList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceResource.SSpaceResourceList) */ {
 public:
  SSpaceResourceList();
  virtual ~SSpaceResourceList();

  SSpaceResourceList(const SSpaceResourceList& from);
  SSpaceResourceList(SSpaceResourceList&& from) noexcept
    : SSpaceResourceList() {
    *this = ::std::move(from);
  }

  inline SSpaceResourceList& operator=(const SSpaceResourceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceResourceList& operator=(SSpaceResourceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceResourceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceResourceList* internal_default_instance() {
    return reinterpret_cast<const SSpaceResourceList*>(
               &_SSpaceResourceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSpaceResourceList& a, SSpaceResourceList& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceResourceList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceResourceList* New() const final {
    return CreateMaybeMessage<SSpaceResourceList>(nullptr);
  }

  SSpaceResourceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceResourceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceResourceList& from);
  void MergeFrom(const SSpaceResourceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceResourceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceResource.SSpaceResourceList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceResource_2eproto);
    return ::descriptor_table_spaceResource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 2,
  };
  // repeated .spaceResource.SpaceResourceInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::spaceResource::SpaceResourceInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceResource::SpaceResourceInfo >*
      mutable_list();
  private:
  const ::spaceResource::SpaceResourceInfo& _internal_list(int index) const;
  ::spaceResource::SpaceResourceInfo* _internal_add_list();
  public:
  const ::spaceResource::SpaceResourceInfo& list(int index) const;
  ::spaceResource::SpaceResourceInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceResource::SpaceResourceInfo >&
      list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:spaceResource.SSpaceResourceList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceResource::SpaceResourceInfo > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceResource_2eproto;
};
// -------------------------------------------------------------------

class SpaceResourceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceResource.SpaceResourceInfo) */ {
 public:
  SpaceResourceInfo();
  virtual ~SpaceResourceInfo();

  SpaceResourceInfo(const SpaceResourceInfo& from);
  SpaceResourceInfo(SpaceResourceInfo&& from) noexcept
    : SpaceResourceInfo() {
    *this = ::std::move(from);
  }

  inline SpaceResourceInfo& operator=(const SpaceResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpaceResourceInfo& operator=(SpaceResourceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpaceResourceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpaceResourceInfo* internal_default_instance() {
    return reinterpret_cast<const SpaceResourceInfo*>(
               &_SpaceResourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpaceResourceInfo& a, SpaceResourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SpaceResourceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpaceResourceInfo* New() const final {
    return CreateMaybeMessage<SpaceResourceInfo>(nullptr);
  }

  SpaceResourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpaceResourceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpaceResourceInfo& from);
  void MergeFrom(const SpaceResourceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpaceResourceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceResource.SpaceResourceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceResource_2eproto);
    return ::descriptor_table_spaceResource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kThumFieldNumber = 5,
    kCdnUrlFieldNumber = 6,
    kMd5FieldNumber = 7,
    kRemarksFieldNumber = 11,
    kIdFieldNumber = 1,
    kCreatorUidFieldNumber = 3,
    kTypeFieldNumber = 4,
    kAbStatusFieldNumber = 8,
    kStatusFieldNumber = 9,
    kCheckStatusFieldNumber = 10,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string thum = 5;
  void clear_thum();
  const std::string& thum() const;
  void set_thum(const std::string& value);
  void set_thum(std::string&& value);
  void set_thum(const char* value);
  void set_thum(const char* value, size_t size);
  std::string* mutable_thum();
  std::string* release_thum();
  void set_allocated_thum(std::string* thum);
  private:
  const std::string& _internal_thum() const;
  void _internal_set_thum(const std::string& value);
  std::string* _internal_mutable_thum();
  public:

  // string cdnUrl = 6;
  void clear_cdnurl();
  const std::string& cdnurl() const;
  void set_cdnurl(const std::string& value);
  void set_cdnurl(std::string&& value);
  void set_cdnurl(const char* value);
  void set_cdnurl(const char* value, size_t size);
  std::string* mutable_cdnurl();
  std::string* release_cdnurl();
  void set_allocated_cdnurl(std::string* cdnurl);
  private:
  const std::string& _internal_cdnurl() const;
  void _internal_set_cdnurl(const std::string& value);
  std::string* _internal_mutable_cdnurl();
  public:

  // string md5 = 7;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // string remarks = 11;
  void clear_remarks();
  const std::string& remarks() const;
  void set_remarks(const std::string& value);
  void set_remarks(std::string&& value);
  void set_remarks(const char* value);
  void set_remarks(const char* value, size_t size);
  std::string* mutable_remarks();
  std::string* release_remarks();
  void set_allocated_remarks(std::string* remarks);
  private:
  const std::string& _internal_remarks() const;
  void _internal_set_remarks(const std::string& value);
  std::string* _internal_mutable_remarks();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 creatorUid = 3;
  void clear_creatoruid();
  ::PROTOBUF_NAMESPACE_ID::int32 creatoruid() const;
  void set_creatoruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_creatoruid() const;
  void _internal_set_creatoruid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 abStatus = 8;
  void clear_abstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 abstatus() const;
  void set_abstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_abstatus() const;
  void _internal_set_abstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 9;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 checkStatus = 10;
  void clear_checkstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 checkstatus() const;
  void set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checkstatus() const;
  void _internal_set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceResource.SpaceResourceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdnurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remarks_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 creatoruid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 abstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceResource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSpaceResourceList

// repeated int32 spaceResourceIds = 1;
inline int CSpaceResourceList::_internal_spaceresourceids_size() const {
  return spaceresourceids_.size();
}
inline int CSpaceResourceList::spaceresourceids_size() const {
  return _internal_spaceresourceids_size();
}
inline void CSpaceResourceList::clear_spaceresourceids() {
  spaceresourceids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceResourceList::_internal_spaceresourceids(int index) const {
  return spaceresourceids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceResourceList::spaceresourceids(int index) const {
  // @@protoc_insertion_point(field_get:spaceResource.CSpaceResourceList.spaceResourceIds)
  return _internal_spaceresourceids(index);
}
inline void CSpaceResourceList::set_spaceresourceids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  spaceresourceids_.Set(index, value);
  // @@protoc_insertion_point(field_set:spaceResource.CSpaceResourceList.spaceResourceIds)
}
inline void CSpaceResourceList::_internal_add_spaceresourceids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  spaceresourceids_.Add(value);
}
inline void CSpaceResourceList::add_spaceresourceids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_spaceresourceids(value);
  // @@protoc_insertion_point(field_add:spaceResource.CSpaceResourceList.spaceResourceIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSpaceResourceList::_internal_spaceresourceids() const {
  return spaceresourceids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSpaceResourceList::spaceresourceids() const {
  // @@protoc_insertion_point(field_list:spaceResource.CSpaceResourceList.spaceResourceIds)
  return _internal_spaceresourceids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSpaceResourceList::_internal_mutable_spaceresourceids() {
  return &spaceresourceids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSpaceResourceList::mutable_spaceresourceids() {
  // @@protoc_insertion_point(field_mutable_list:spaceResource.CSpaceResourceList.spaceResourceIds)
  return _internal_mutable_spaceresourceids();
}

// -------------------------------------------------------------------

// SSpaceResourceList

// repeated .spaceResource.SpaceResourceInfo list = 1;
inline int SSpaceResourceList::_internal_list_size() const {
  return list_.size();
}
inline int SSpaceResourceList::list_size() const {
  return _internal_list_size();
}
inline void SSpaceResourceList::clear_list() {
  list_.Clear();
}
inline ::spaceResource::SpaceResourceInfo* SSpaceResourceList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:spaceResource.SSpaceResourceList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceResource::SpaceResourceInfo >*
SSpaceResourceList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceResource.SSpaceResourceList.list)
  return &list_;
}
inline const ::spaceResource::SpaceResourceInfo& SSpaceResourceList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::spaceResource::SpaceResourceInfo& SSpaceResourceList::list(int index) const {
  // @@protoc_insertion_point(field_get:spaceResource.SSpaceResourceList.list)
  return _internal_list(index);
}
inline ::spaceResource::SpaceResourceInfo* SSpaceResourceList::_internal_add_list() {
  return list_.Add();
}
inline ::spaceResource::SpaceResourceInfo* SSpaceResourceList::add_list() {
  // @@protoc_insertion_point(field_add:spaceResource.SSpaceResourceList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceResource::SpaceResourceInfo >&
SSpaceResourceList::list() const {
  // @@protoc_insertion_point(field_list:spaceResource.SSpaceResourceList.list)
  return list_;
}

// string msg = 2;
inline void SSpaceResourceList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceResourceList::msg() const {
  // @@protoc_insertion_point(field_get:spaceResource.SSpaceResourceList.msg)
  return _internal_msg();
}
inline void SSpaceResourceList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:spaceResource.SSpaceResourceList.msg)
}
inline std::string* SSpaceResourceList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:spaceResource.SSpaceResourceList.msg)
  return _internal_mutable_msg();
}
inline const std::string& SSpaceResourceList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SSpaceResourceList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceResourceList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceResource.SSpaceResourceList.msg)
}
inline void SSpaceResourceList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceResource.SSpaceResourceList.msg)
}
inline void SSpaceResourceList::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceResource.SSpaceResourceList.msg)
}
inline std::string* SSpaceResourceList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceResourceList::release_msg() {
  // @@protoc_insertion_point(field_release:spaceResource.SSpaceResourceList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceResourceList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:spaceResource.SSpaceResourceList.msg)
}

// -------------------------------------------------------------------

// SpaceResourceInfo

// int32 id = 1;
inline void SpaceResourceInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::id() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.id)
  return _internal_id();
}
inline void SpaceResourceInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SpaceResourceInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.id)
}

// string name = 2;
inline void SpaceResourceInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceResourceInfo::name() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.name)
  return _internal_name();
}
inline void SpaceResourceInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.name)
}
inline std::string* SpaceResourceInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:spaceResource.SpaceResourceInfo.name)
  return _internal_mutable_name();
}
inline const std::string& SpaceResourceInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void SpaceResourceInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceResourceInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceResource.SpaceResourceInfo.name)
}
inline void SpaceResourceInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceResource.SpaceResourceInfo.name)
}
inline void SpaceResourceInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceResource.SpaceResourceInfo.name)
}
inline std::string* SpaceResourceInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceResourceInfo::release_name() {
  // @@protoc_insertion_point(field_release:spaceResource.SpaceResourceInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceResourceInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:spaceResource.SpaceResourceInfo.name)
}

// int32 creatorUid = 3;
inline void SpaceResourceInfo::clear_creatoruid() {
  creatoruid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::_internal_creatoruid() const {
  return creatoruid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::creatoruid() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.creatorUid)
  return _internal_creatoruid();
}
inline void SpaceResourceInfo::_internal_set_creatoruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  creatoruid_ = value;
}
inline void SpaceResourceInfo::set_creatoruid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_creatoruid(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.creatorUid)
}

// int32 type = 4;
inline void SpaceResourceInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::type() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.type)
  return _internal_type();
}
inline void SpaceResourceInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SpaceResourceInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.type)
}

// string thum = 5;
inline void SpaceResourceInfo::clear_thum() {
  thum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceResourceInfo::thum() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.thum)
  return _internal_thum();
}
inline void SpaceResourceInfo::set_thum(const std::string& value) {
  _internal_set_thum(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.thum)
}
inline std::string* SpaceResourceInfo::mutable_thum() {
  // @@protoc_insertion_point(field_mutable:spaceResource.SpaceResourceInfo.thum)
  return _internal_mutable_thum();
}
inline const std::string& SpaceResourceInfo::_internal_thum() const {
  return thum_.GetNoArena();
}
inline void SpaceResourceInfo::_internal_set_thum(const std::string& value) {
  
  thum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceResourceInfo::set_thum(std::string&& value) {
  
  thum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceResource.SpaceResourceInfo.thum)
}
inline void SpaceResourceInfo::set_thum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceResource.SpaceResourceInfo.thum)
}
inline void SpaceResourceInfo::set_thum(const char* value, size_t size) {
  
  thum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceResource.SpaceResourceInfo.thum)
}
inline std::string* SpaceResourceInfo::_internal_mutable_thum() {
  
  return thum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceResourceInfo::release_thum() {
  // @@protoc_insertion_point(field_release:spaceResource.SpaceResourceInfo.thum)
  
  return thum_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceResourceInfo::set_allocated_thum(std::string* thum) {
  if (thum != nullptr) {
    
  } else {
    
  }
  thum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thum);
  // @@protoc_insertion_point(field_set_allocated:spaceResource.SpaceResourceInfo.thum)
}

// string cdnUrl = 6;
inline void SpaceResourceInfo::clear_cdnurl() {
  cdnurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceResourceInfo::cdnurl() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.cdnUrl)
  return _internal_cdnurl();
}
inline void SpaceResourceInfo::set_cdnurl(const std::string& value) {
  _internal_set_cdnurl(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.cdnUrl)
}
inline std::string* SpaceResourceInfo::mutable_cdnurl() {
  // @@protoc_insertion_point(field_mutable:spaceResource.SpaceResourceInfo.cdnUrl)
  return _internal_mutable_cdnurl();
}
inline const std::string& SpaceResourceInfo::_internal_cdnurl() const {
  return cdnurl_.GetNoArena();
}
inline void SpaceResourceInfo::_internal_set_cdnurl(const std::string& value) {
  
  cdnurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceResourceInfo::set_cdnurl(std::string&& value) {
  
  cdnurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceResource.SpaceResourceInfo.cdnUrl)
}
inline void SpaceResourceInfo::set_cdnurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cdnurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceResource.SpaceResourceInfo.cdnUrl)
}
inline void SpaceResourceInfo::set_cdnurl(const char* value, size_t size) {
  
  cdnurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceResource.SpaceResourceInfo.cdnUrl)
}
inline std::string* SpaceResourceInfo::_internal_mutable_cdnurl() {
  
  return cdnurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceResourceInfo::release_cdnurl() {
  // @@protoc_insertion_point(field_release:spaceResource.SpaceResourceInfo.cdnUrl)
  
  return cdnurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceResourceInfo::set_allocated_cdnurl(std::string* cdnurl) {
  if (cdnurl != nullptr) {
    
  } else {
    
  }
  cdnurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cdnurl);
  // @@protoc_insertion_point(field_set_allocated:spaceResource.SpaceResourceInfo.cdnUrl)
}

// string md5 = 7;
inline void SpaceResourceInfo::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceResourceInfo::md5() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.md5)
  return _internal_md5();
}
inline void SpaceResourceInfo::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.md5)
}
inline std::string* SpaceResourceInfo::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:spaceResource.SpaceResourceInfo.md5)
  return _internal_mutable_md5();
}
inline const std::string& SpaceResourceInfo::_internal_md5() const {
  return md5_.GetNoArena();
}
inline void SpaceResourceInfo::_internal_set_md5(const std::string& value) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceResourceInfo::set_md5(std::string&& value) {
  
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceResource.SpaceResourceInfo.md5)
}
inline void SpaceResourceInfo::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceResource.SpaceResourceInfo.md5)
}
inline void SpaceResourceInfo::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceResource.SpaceResourceInfo.md5)
}
inline std::string* SpaceResourceInfo::_internal_mutable_md5() {
  
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceResourceInfo::release_md5() {
  // @@protoc_insertion_point(field_release:spaceResource.SpaceResourceInfo.md5)
  
  return md5_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceResourceInfo::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:spaceResource.SpaceResourceInfo.md5)
}

// int32 abStatus = 8;
inline void SpaceResourceInfo::clear_abstatus() {
  abstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::_internal_abstatus() const {
  return abstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::abstatus() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.abStatus)
  return _internal_abstatus();
}
inline void SpaceResourceInfo::_internal_set_abstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  abstatus_ = value;
}
inline void SpaceResourceInfo::set_abstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_abstatus(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.abStatus)
}

// int32 status = 9;
inline void SpaceResourceInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::status() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.status)
  return _internal_status();
}
inline void SpaceResourceInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SpaceResourceInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.status)
}

// int32 checkStatus = 10;
inline void SpaceResourceInfo::clear_checkstatus() {
  checkstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::_internal_checkstatus() const {
  return checkstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceResourceInfo::checkstatus() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.checkStatus)
  return _internal_checkstatus();
}
inline void SpaceResourceInfo::_internal_set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  checkstatus_ = value;
}
inline void SpaceResourceInfo::set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checkstatus(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.checkStatus)
}

// string remarks = 11;
inline void SpaceResourceInfo::clear_remarks() {
  remarks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceResourceInfo::remarks() const {
  // @@protoc_insertion_point(field_get:spaceResource.SpaceResourceInfo.remarks)
  return _internal_remarks();
}
inline void SpaceResourceInfo::set_remarks(const std::string& value) {
  _internal_set_remarks(value);
  // @@protoc_insertion_point(field_set:spaceResource.SpaceResourceInfo.remarks)
}
inline std::string* SpaceResourceInfo::mutable_remarks() {
  // @@protoc_insertion_point(field_mutable:spaceResource.SpaceResourceInfo.remarks)
  return _internal_mutable_remarks();
}
inline const std::string& SpaceResourceInfo::_internal_remarks() const {
  return remarks_.GetNoArena();
}
inline void SpaceResourceInfo::_internal_set_remarks(const std::string& value) {
  
  remarks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceResourceInfo::set_remarks(std::string&& value) {
  
  remarks_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceResource.SpaceResourceInfo.remarks)
}
inline void SpaceResourceInfo::set_remarks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remarks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceResource.SpaceResourceInfo.remarks)
}
inline void SpaceResourceInfo::set_remarks(const char* value, size_t size) {
  
  remarks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceResource.SpaceResourceInfo.remarks)
}
inline std::string* SpaceResourceInfo::_internal_mutable_remarks() {
  
  return remarks_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceResourceInfo::release_remarks() {
  // @@protoc_insertion_point(field_release:spaceResource.SpaceResourceInfo.remarks)
  
  return remarks_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceResourceInfo::set_allocated_remarks(std::string* remarks) {
  if (remarks != nullptr) {
    
  } else {
    
  }
  remarks_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remarks);
  // @@protoc_insertion_point(field_set_allocated:spaceResource.SpaceResourceInfo.remarks)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spaceResource

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceResource_2eproto
