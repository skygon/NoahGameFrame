// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceWorks.proto

#include "spaceWorks.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_spaceWorks_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorksInfo_spaceWorks_2eproto;
namespace pb {
class WorksInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorksInfo> _instance;
} _WorksInfo_default_instance_;
class CSpaceWorksUploadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSpaceWorksUpload> _instance;
} _CSpaceWorksUpload_default_instance_;
class SSpaceWorksUploadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceWorksUpload> _instance;
} _SSpaceWorksUpload_default_instance_;
class CSpaceWorksGetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSpaceWorksGet> _instance;
} _CSpaceWorksGet_default_instance_;
class SSpaceWorksGetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceWorksGet> _instance;
} _SSpaceWorksGet_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_CSpaceWorksGet_spaceWorks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CSpaceWorksGet_default_instance_;
    new (ptr) ::pb::CSpaceWorksGet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CSpaceWorksGet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSpaceWorksGet_spaceWorks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSpaceWorksGet_spaceWorks_2eproto}, {}};

static void InitDefaultsscc_info_CSpaceWorksUpload_spaceWorks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CSpaceWorksUpload_default_instance_;
    new (ptr) ::pb::CSpaceWorksUpload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CSpaceWorksUpload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSpaceWorksUpload_spaceWorks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSpaceWorksUpload_spaceWorks_2eproto}, {
      &scc_info_WorksInfo_spaceWorks_2eproto.base,}};

static void InitDefaultsscc_info_SSpaceWorksGet_spaceWorks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SSpaceWorksGet_default_instance_;
    new (ptr) ::pb::SSpaceWorksGet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SSpaceWorksGet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSpaceWorksGet_spaceWorks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSpaceWorksGet_spaceWorks_2eproto}, {
      &scc_info_WorksInfo_spaceWorks_2eproto.base,}};

static void InitDefaultsscc_info_SSpaceWorksUpload_spaceWorks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SSpaceWorksUpload_default_instance_;
    new (ptr) ::pb::SSpaceWorksUpload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SSpaceWorksUpload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSpaceWorksUpload_spaceWorks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSpaceWorksUpload_spaceWorks_2eproto}, {}};

static void InitDefaultsscc_info_WorksInfo_spaceWorks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_WorksInfo_default_instance_;
    new (ptr) ::pb::WorksInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::WorksInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorksInfo_spaceWorks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorksInfo_spaceWorks_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spaceWorks_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_spaceWorks_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spaceWorks_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spaceWorks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::WorksInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::WorksInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::pb::WorksInfo, wechatid_),
  PROTOBUF_FIELD_OFFSET(::pb::WorksInfo, phone_),
  PROTOBUF_FIELD_OFFSET(::pb::WorksInfo, page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CSpaceWorksUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CSpaceWorksUpload, worksinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SSpaceWorksUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CSpaceWorksGet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SSpaceWorksGet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SSpaceWorksGet, worksinfo_),
  PROTOBUF_FIELD_OFFSET(::pb::SSpaceWorksGet, contactdesc_),
  PROTOBUF_FIELD_OFFSET(::pb::SSpaceWorksGet, contactwechatid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::WorksInfo)},
  { 9, -1, sizeof(::pb::CSpaceWorksUpload)},
  { 15, -1, sizeof(::pb::SSpaceWorksUpload)},
  { 20, -1, sizeof(::pb::CSpaceWorksGet)},
  { 25, -1, sizeof(::pb::SSpaceWorksGet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_WorksInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CSpaceWorksUpload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SSpaceWorksUpload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CSpaceWorksGet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SSpaceWorksGet_default_instance_),
};

const char descriptor_table_protodef_spaceWorks_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020spaceWorks.proto\022\002pb\"H\n\tWorksInfo\022\014\n\004N"
  "ick\030\001 \001(\t\022\020\n\010WechatId\030\002 \001(\t\022\r\n\005Phone\030\003 \001"
  "(\003\022\014\n\004Page\030\004 \003(\t\"5\n\021CSpaceWorksUpload\022 \n"
  "\tworksInfo\030\001 \001(\0132\r.pb.WorksInfo\"\023\n\021SSpac"
  "eWorksUpload\"\020\n\016CSpaceWorksGet\"`\n\016SSpace"
  "WorksGet\022 \n\tworksInfo\030\001 \001(\0132\r.pb.WorksIn"
  "fo\022\023\n\013ContactDesc\030\002 \001(\t\022\027\n\017ContactWechat"
  "Id\030\003 \001(\tB2\n\030com.dayou.space.protobufB\nSp"
  "aceWorksZ\005./;pb\252\002\002Pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_spaceWorks_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_spaceWorks_2eproto_sccs[5] = {
  &scc_info_CSpaceWorksGet_spaceWorks_2eproto.base,
  &scc_info_CSpaceWorksUpload_spaceWorks_2eproto.base,
  &scc_info_SSpaceWorksGet_spaceWorks_2eproto.base,
  &scc_info_SSpaceWorksUpload_spaceWorks_2eproto.base,
  &scc_info_WorksInfo_spaceWorks_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spaceWorks_2eproto_once;
static bool descriptor_table_spaceWorks_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceWorks_2eproto = {
  &descriptor_table_spaceWorks_2eproto_initialized, descriptor_table_protodef_spaceWorks_2eproto, "spaceWorks.proto", 348,
  &descriptor_table_spaceWorks_2eproto_once, descriptor_table_spaceWorks_2eproto_sccs, descriptor_table_spaceWorks_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_spaceWorks_2eproto::offsets,
  file_level_metadata_spaceWorks_2eproto, 5, file_level_enum_descriptors_spaceWorks_2eproto, file_level_service_descriptors_spaceWorks_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spaceWorks_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_spaceWorks_2eproto), true);
namespace pb {

// ===================================================================

void WorksInfo::InitAsDefaultInstance() {
}
class WorksInfo::_Internal {
 public:
};

WorksInfo::WorksInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.WorksInfo)
}
WorksInfo::WorksInfo(const WorksInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      page_(from.page_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  wechatid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wechatid().empty()) {
    wechatid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wechatid_);
  }
  phone_ = from.phone_;
  // @@protoc_insertion_point(copy_constructor:pb.WorksInfo)
}

void WorksInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorksInfo_spaceWorks_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wechatid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_ = PROTOBUF_LONGLONG(0);
}

WorksInfo::~WorksInfo() {
  // @@protoc_insertion_point(destructor:pb.WorksInfo)
  SharedDtor();
}

void WorksInfo::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wechatid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorksInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorksInfo& WorksInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorksInfo_spaceWorks_2eproto.base);
  return *internal_default_instance();
}


void WorksInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.WorksInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_.Clear();
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wechatid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* WorksInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Nick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.WorksInfo.Nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string WechatId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_wechatid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.WorksInfo.WechatId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_page();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.WorksInfo.Page"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorksInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.WorksInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Nick = 1;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.WorksInfo.Nick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nick(), target);
  }

  // string WechatId = 2;
  if (this->wechatid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wechatid().data(), static_cast<int>(this->_internal_wechatid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.WorksInfo.WechatId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_wechatid(), target);
  }

  // int64 Phone = 3;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_phone(), target);
  }

  // repeated string Page = 4;
  for (int i = 0, n = this->_internal_page_size(); i < n; i++) {
    const auto& s = this->_internal_page(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.WorksInfo.Page");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.WorksInfo)
  return target;
}

size_t WorksInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.WorksInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Page = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(page_.size());
  for (int i = 0, n = page_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      page_.Get(i));
  }

  // string Nick = 1;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string WechatId = 2;
  if (this->wechatid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wechatid());
  }

  // int64 Phone = 3;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorksInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.WorksInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WorksInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorksInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.WorksInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.WorksInfo)
    MergeFrom(*source);
  }
}

void WorksInfo::MergeFrom(const WorksInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.WorksInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  page_.MergeFrom(from.page_);
  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.wechatid().size() > 0) {

    wechatid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wechatid_);
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void WorksInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.WorksInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorksInfo::CopyFrom(const WorksInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.WorksInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorksInfo::IsInitialized() const {
  return true;
}

void WorksInfo::InternalSwap(WorksInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  page_.InternalSwap(&other->page_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wechatid_.Swap(&other->wechatid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(phone_, other->phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorksInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSpaceWorksUpload::InitAsDefaultInstance() {
  ::pb::_CSpaceWorksUpload_default_instance_._instance.get_mutable()->worksinfo_ = const_cast< ::pb::WorksInfo*>(
      ::pb::WorksInfo::internal_default_instance());
}
class CSpaceWorksUpload::_Internal {
 public:
  static const ::pb::WorksInfo& worksinfo(const CSpaceWorksUpload* msg);
};

const ::pb::WorksInfo&
CSpaceWorksUpload::_Internal::worksinfo(const CSpaceWorksUpload* msg) {
  return *msg->worksinfo_;
}
CSpaceWorksUpload::CSpaceWorksUpload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CSpaceWorksUpload)
}
CSpaceWorksUpload::CSpaceWorksUpload(const CSpaceWorksUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_worksinfo()) {
    worksinfo_ = new ::pb::WorksInfo(*from.worksinfo_);
  } else {
    worksinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.CSpaceWorksUpload)
}

void CSpaceWorksUpload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSpaceWorksUpload_spaceWorks_2eproto.base);
  worksinfo_ = nullptr;
}

CSpaceWorksUpload::~CSpaceWorksUpload() {
  // @@protoc_insertion_point(destructor:pb.CSpaceWorksUpload)
  SharedDtor();
}

void CSpaceWorksUpload::SharedDtor() {
  if (this != internal_default_instance()) delete worksinfo_;
}

void CSpaceWorksUpload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSpaceWorksUpload& CSpaceWorksUpload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSpaceWorksUpload_spaceWorks_2eproto.base);
  return *internal_default_instance();
}


void CSpaceWorksUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CSpaceWorksUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && worksinfo_ != nullptr) {
    delete worksinfo_;
  }
  worksinfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CSpaceWorksUpload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.WorksInfo worksInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_worksinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSpaceWorksUpload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CSpaceWorksUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.WorksInfo worksInfo = 1;
  if (this->has_worksinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::worksinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CSpaceWorksUpload)
  return target;
}

size_t CSpaceWorksUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CSpaceWorksUpload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.WorksInfo worksInfo = 1;
  if (this->has_worksinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worksinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSpaceWorksUpload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CSpaceWorksUpload)
  GOOGLE_DCHECK_NE(&from, this);
  const CSpaceWorksUpload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSpaceWorksUpload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CSpaceWorksUpload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CSpaceWorksUpload)
    MergeFrom(*source);
  }
}

void CSpaceWorksUpload::MergeFrom(const CSpaceWorksUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CSpaceWorksUpload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_worksinfo()) {
    _internal_mutable_worksinfo()->::pb::WorksInfo::MergeFrom(from._internal_worksinfo());
  }
}

void CSpaceWorksUpload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CSpaceWorksUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSpaceWorksUpload::CopyFrom(const CSpaceWorksUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CSpaceWorksUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSpaceWorksUpload::IsInitialized() const {
  return true;
}

void CSpaceWorksUpload::InternalSwap(CSpaceWorksUpload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(worksinfo_, other->worksinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSpaceWorksUpload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceWorksUpload::InitAsDefaultInstance() {
}
class SSpaceWorksUpload::_Internal {
 public:
};

SSpaceWorksUpload::SSpaceWorksUpload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SSpaceWorksUpload)
}
SSpaceWorksUpload::SSpaceWorksUpload(const SSpaceWorksUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.SSpaceWorksUpload)
}

void SSpaceWorksUpload::SharedCtor() {
}

SSpaceWorksUpload::~SSpaceWorksUpload() {
  // @@protoc_insertion_point(destructor:pb.SSpaceWorksUpload)
  SharedDtor();
}

void SSpaceWorksUpload::SharedDtor() {
}

void SSpaceWorksUpload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceWorksUpload& SSpaceWorksUpload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceWorksUpload_spaceWorks_2eproto.base);
  return *internal_default_instance();
}


void SSpaceWorksUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SSpaceWorksUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SSpaceWorksUpload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceWorksUpload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SSpaceWorksUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SSpaceWorksUpload)
  return target;
}

size_t SSpaceWorksUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SSpaceWorksUpload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceWorksUpload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SSpaceWorksUpload)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceWorksUpload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceWorksUpload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SSpaceWorksUpload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SSpaceWorksUpload)
    MergeFrom(*source);
  }
}

void SSpaceWorksUpload::MergeFrom(const SSpaceWorksUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SSpaceWorksUpload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SSpaceWorksUpload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SSpaceWorksUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceWorksUpload::CopyFrom(const SSpaceWorksUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SSpaceWorksUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceWorksUpload::IsInitialized() const {
  return true;
}

void SSpaceWorksUpload::InternalSwap(SSpaceWorksUpload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceWorksUpload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSpaceWorksGet::InitAsDefaultInstance() {
}
class CSpaceWorksGet::_Internal {
 public:
};

CSpaceWorksGet::CSpaceWorksGet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CSpaceWorksGet)
}
CSpaceWorksGet::CSpaceWorksGet(const CSpaceWorksGet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CSpaceWorksGet)
}

void CSpaceWorksGet::SharedCtor() {
}

CSpaceWorksGet::~CSpaceWorksGet() {
  // @@protoc_insertion_point(destructor:pb.CSpaceWorksGet)
  SharedDtor();
}

void CSpaceWorksGet::SharedDtor() {
}

void CSpaceWorksGet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSpaceWorksGet& CSpaceWorksGet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSpaceWorksGet_spaceWorks_2eproto.base);
  return *internal_default_instance();
}


void CSpaceWorksGet::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CSpaceWorksGet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CSpaceWorksGet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSpaceWorksGet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CSpaceWorksGet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CSpaceWorksGet)
  return target;
}

size_t CSpaceWorksGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CSpaceWorksGet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSpaceWorksGet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CSpaceWorksGet)
  GOOGLE_DCHECK_NE(&from, this);
  const CSpaceWorksGet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSpaceWorksGet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CSpaceWorksGet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CSpaceWorksGet)
    MergeFrom(*source);
  }
}

void CSpaceWorksGet::MergeFrom(const CSpaceWorksGet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CSpaceWorksGet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSpaceWorksGet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CSpaceWorksGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSpaceWorksGet::CopyFrom(const CSpaceWorksGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CSpaceWorksGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSpaceWorksGet::IsInitialized() const {
  return true;
}

void CSpaceWorksGet::InternalSwap(CSpaceWorksGet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSpaceWorksGet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceWorksGet::InitAsDefaultInstance() {
  ::pb::_SSpaceWorksGet_default_instance_._instance.get_mutable()->worksinfo_ = const_cast< ::pb::WorksInfo*>(
      ::pb::WorksInfo::internal_default_instance());
}
class SSpaceWorksGet::_Internal {
 public:
  static const ::pb::WorksInfo& worksinfo(const SSpaceWorksGet* msg);
};

const ::pb::WorksInfo&
SSpaceWorksGet::_Internal::worksinfo(const SSpaceWorksGet* msg) {
  return *msg->worksinfo_;
}
SSpaceWorksGet::SSpaceWorksGet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SSpaceWorksGet)
}
SSpaceWorksGet::SSpaceWorksGet(const SSpaceWorksGet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contactdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contactdesc().empty()) {
    contactdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contactdesc_);
  }
  contactwechatid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contactwechatid().empty()) {
    contactwechatid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contactwechatid_);
  }
  if (from._internal_has_worksinfo()) {
    worksinfo_ = new ::pb::WorksInfo(*from.worksinfo_);
  } else {
    worksinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.SSpaceWorksGet)
}

void SSpaceWorksGet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSpaceWorksGet_spaceWorks_2eproto.base);
  contactdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contactwechatid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worksinfo_ = nullptr;
}

SSpaceWorksGet::~SSpaceWorksGet() {
  // @@protoc_insertion_point(destructor:pb.SSpaceWorksGet)
  SharedDtor();
}

void SSpaceWorksGet::SharedDtor() {
  contactdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contactwechatid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete worksinfo_;
}

void SSpaceWorksGet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceWorksGet& SSpaceWorksGet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceWorksGet_spaceWorks_2eproto.base);
  return *internal_default_instance();
}


void SSpaceWorksGet::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SSpaceWorksGet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contactdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contactwechatid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && worksinfo_ != nullptr) {
    delete worksinfo_;
  }
  worksinfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SSpaceWorksGet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.WorksInfo worksInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_worksinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContactDesc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contactdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SSpaceWorksGet.ContactDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContactWechatId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_contactwechatid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SSpaceWorksGet.ContactWechatId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceWorksGet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SSpaceWorksGet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.WorksInfo worksInfo = 1;
  if (this->has_worksinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::worksinfo(this), target, stream);
  }

  // string ContactDesc = 2;
  if (this->contactdesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contactdesc().data(), static_cast<int>(this->_internal_contactdesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSpaceWorksGet.ContactDesc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contactdesc(), target);
  }

  // string ContactWechatId = 3;
  if (this->contactwechatid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contactwechatid().data(), static_cast<int>(this->_internal_contactwechatid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SSpaceWorksGet.ContactWechatId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_contactwechatid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SSpaceWorksGet)
  return target;
}

size_t SSpaceWorksGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SSpaceWorksGet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ContactDesc = 2;
  if (this->contactdesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contactdesc());
  }

  // string ContactWechatId = 3;
  if (this->contactwechatid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contactwechatid());
  }

  // .pb.WorksInfo worksInfo = 1;
  if (this->has_worksinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worksinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceWorksGet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SSpaceWorksGet)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceWorksGet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceWorksGet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SSpaceWorksGet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SSpaceWorksGet)
    MergeFrom(*source);
  }
}

void SSpaceWorksGet::MergeFrom(const SSpaceWorksGet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SSpaceWorksGet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contactdesc().size() > 0) {

    contactdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contactdesc_);
  }
  if (from.contactwechatid().size() > 0) {

    contactwechatid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contactwechatid_);
  }
  if (from.has_worksinfo()) {
    _internal_mutable_worksinfo()->::pb::WorksInfo::MergeFrom(from._internal_worksinfo());
  }
}

void SSpaceWorksGet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SSpaceWorksGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceWorksGet::CopyFrom(const SSpaceWorksGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SSpaceWorksGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceWorksGet::IsInitialized() const {
  return true;
}

void SSpaceWorksGet::InternalSwap(SSpaceWorksGet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  contactdesc_.Swap(&other->contactdesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contactwechatid_.Swap(&other->contactwechatid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(worksinfo_, other->worksinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceWorksGet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::WorksInfo* Arena::CreateMaybeMessage< ::pb::WorksInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::WorksInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CSpaceWorksUpload* Arena::CreateMaybeMessage< ::pb::CSpaceWorksUpload >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CSpaceWorksUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SSpaceWorksUpload* Arena::CreateMaybeMessage< ::pb::SSpaceWorksUpload >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SSpaceWorksUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CSpaceWorksGet* Arena::CreateMaybeMessage< ::pb::CSpaceWorksGet >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CSpaceWorksGet >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SSpaceWorksGet* Arena::CreateMaybeMessage< ::pb::SSpaceWorksGet >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SSpaceWorksGet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
