// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backPack.proto

#include "backPack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_backPack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pieceMsg_backPack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backPack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_propMsg_backPack_2eproto;
namespace backPack {
class pieceMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pieceMsg> _instance;
} _pieceMsg_default_instance_;
class propMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<propMsg> _instance;
} _propMsg_default_instance_;
class SNftChipListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNftChipList> _instance;
} _SNftChipList_default_instance_;
class SPropListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPropList> _instance;
} _SPropList_default_instance_;
class CSinglePropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSingleProp> _instance;
} _CSingleProp_default_instance_;
class SSinglePropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSingleProp> _instance;
} _SSingleProp_default_instance_;
}  // namespace backPack
static void InitDefaultsscc_info_CSingleProp_backPack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::backPack::_CSingleProp_default_instance_;
    new (ptr) ::backPack::CSingleProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::backPack::CSingleProp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSingleProp_backPack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSingleProp_backPack_2eproto}, {}};

static void InitDefaultsscc_info_SNftChipList_backPack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::backPack::_SNftChipList_default_instance_;
    new (ptr) ::backPack::SNftChipList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::backPack::SNftChipList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SNftChipList_backPack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SNftChipList_backPack_2eproto}, {
      &scc_info_pieceMsg_backPack_2eproto.base,}};

static void InitDefaultsscc_info_SPropList_backPack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::backPack::_SPropList_default_instance_;
    new (ptr) ::backPack::SPropList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::backPack::SPropList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SPropList_backPack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SPropList_backPack_2eproto}, {
      &scc_info_propMsg_backPack_2eproto.base,}};

static void InitDefaultsscc_info_SSingleProp_backPack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::backPack::_SSingleProp_default_instance_;
    new (ptr) ::backPack::SSingleProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::backPack::SSingleProp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSingleProp_backPack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSingleProp_backPack_2eproto}, {
      &scc_info_propMsg_backPack_2eproto.base,}};

static void InitDefaultsscc_info_pieceMsg_backPack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::backPack::_pieceMsg_default_instance_;
    new (ptr) ::backPack::pieceMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::backPack::pieceMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pieceMsg_backPack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pieceMsg_backPack_2eproto}, {}};

static void InitDefaultsscc_info_propMsg_backPack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::backPack::_propMsg_default_instance_;
    new (ptr) ::backPack::propMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::backPack::propMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_propMsg_backPack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_propMsg_backPack_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_backPack_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_backPack_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_backPack_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_backPack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backPack::pieceMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::backPack::pieceMsg, piece_id_),
  PROTOBUF_FIELD_OFFSET(::backPack::pieceMsg, name_),
  PROTOBUF_FIELD_OFFSET(::backPack::pieceMsg, image_),
  PROTOBUF_FIELD_OFFSET(::backPack::pieceMsg, num_),
  PROTOBUF_FIELD_OFFSET(::backPack::pieceMsg, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backPack::propMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::backPack::propMsg, count_),
  PROTOBUF_FIELD_OFFSET(::backPack::propMsg, prop_type_),
  PROTOBUF_FIELD_OFFSET(::backPack::propMsg, prop_name_),
  PROTOBUF_FIELD_OFFSET(::backPack::propMsg, goods_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backPack::SNftChipList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::backPack::SNftChipList, nftchiplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backPack::SPropList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::backPack::SPropList, proplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backPack::CSingleProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::backPack::CSingleProp, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backPack::SSingleProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::backPack::SSingleProp, prop_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::backPack::pieceMsg)},
  { 10, -1, sizeof(::backPack::propMsg)},
  { 19, -1, sizeof(::backPack::SNftChipList)},
  { 25, -1, sizeof(::backPack::SPropList)},
  { 31, -1, sizeof(::backPack::CSingleProp)},
  { 37, -1, sizeof(::backPack::SSingleProp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::backPack::_pieceMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::backPack::_propMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::backPack::_SNftChipList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::backPack::_SPropList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::backPack::_CSingleProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::backPack::_SSingleProp_default_instance_),
};

const char descriptor_table_protodef_backPack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016backPack.proto\022\010backPack\"W\n\010pieceMsg\022\020"
  "\n\010piece_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005image\030"
  "\003 \001(\t\022\013\n\003num\030\004 \001(\005\022\017\n\007goodsId\030\005 \001(\005\"P\n\007p"
  "ropMsg\022\r\n\005count\030\001 \001(\005\022\021\n\tprop_type\030\002 \001(\005"
  "\022\021\n\tprop_name\030\003 \001(\t\022\020\n\010goods_id\030\004 \001(\005\"7\n"
  "\014SNftChipList\022\'\n\013nftChipList\030\001 \003(\0132\022.bac"
  "kPack.pieceMsg\"0\n\tSPropList\022#\n\010propList\030"
  "\001 \003(\0132\021.backPack.propMsg\"\036\n\013CSingleProp\022"
  "\017\n\007goodsId\030\001 \001(\005\".\n\013SSingleProp\022\037\n\004prop\030"
  "\001 \001(\0132\021.backPack.propMsgB$\n\030com.dayou.sp"
  "ace.protobufB\010BackPackb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_backPack_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_backPack_2eproto_sccs[6] = {
  &scc_info_CSingleProp_backPack_2eproto.base,
  &scc_info_SNftChipList_backPack_2eproto.base,
  &scc_info_SPropList_backPack_2eproto.base,
  &scc_info_SSingleProp_backPack_2eproto.base,
  &scc_info_pieceMsg_backPack_2eproto.base,
  &scc_info_propMsg_backPack_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_backPack_2eproto_once;
static bool descriptor_table_backPack_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backPack_2eproto = {
  &descriptor_table_backPack_2eproto_initialized, descriptor_table_protodef_backPack_2eproto, "backPack.proto", 430,
  &descriptor_table_backPack_2eproto_once, descriptor_table_backPack_2eproto_sccs, descriptor_table_backPack_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_backPack_2eproto::offsets,
  file_level_metadata_backPack_2eproto, 6, file_level_enum_descriptors_backPack_2eproto, file_level_service_descriptors_backPack_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_backPack_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_backPack_2eproto), true);
namespace backPack {

// ===================================================================

void pieceMsg::InitAsDefaultInstance() {
}
class pieceMsg::_Internal {
 public:
};

pieceMsg::pieceMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backPack.pieceMsg)
}
pieceMsg::pieceMsg(const pieceMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&piece_id_, &from.piece_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&piece_id_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:backPack.pieceMsg)
}

void pieceMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_pieceMsg_backPack_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&piece_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&piece_id_)) + sizeof(goodsid_));
}

pieceMsg::~pieceMsg() {
  // @@protoc_insertion_point(destructor:backPack.pieceMsg)
  SharedDtor();
}

void pieceMsg::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pieceMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pieceMsg& pieceMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pieceMsg_backPack_2eproto.base);
  return *internal_default_instance();
}


void pieceMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:backPack.pieceMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&piece_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&piece_id_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* pieceMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 piece_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          piece_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "backPack.pieceMsg.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "backPack.pieceMsg.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pieceMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backPack.pieceMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 piece_id = 1;
  if (this->piece_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_piece_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backPack.pieceMsg.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string image = 3;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backPack.pieceMsg.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // int32 num = 4;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num(), target);
  }

  // int32 goodsId = 5;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backPack.pieceMsg)
  return target;
}

size_t pieceMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backPack.pieceMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 3;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // int32 piece_id = 1;
  if (this->piece_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_piece_id());
  }

  // int32 num = 4;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 goodsId = 5;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pieceMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backPack.pieceMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const pieceMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pieceMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backPack.pieceMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backPack.pieceMsg)
    MergeFrom(*source);
  }
}

void pieceMsg::MergeFrom(const pieceMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backPack.pieceMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.piece_id() != 0) {
    _internal_set_piece_id(from._internal_piece_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void pieceMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backPack.pieceMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pieceMsg::CopyFrom(const pieceMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backPack.pieceMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pieceMsg::IsInitialized() const {
  return true;
}

void pieceMsg::InternalSwap(pieceMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(piece_id_, other->piece_id_);
  swap(num_, other->num_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pieceMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void propMsg::InitAsDefaultInstance() {
}
class propMsg::_Internal {
 public:
};

propMsg::propMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backPack.propMsg)
}
propMsg::propMsg(const propMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prop_name().empty()) {
    prop_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prop_name_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&goods_id_) -
    reinterpret_cast<char*>(&count_)) + sizeof(goods_id_));
  // @@protoc_insertion_point(copy_constructor:backPack.propMsg)
}

void propMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_propMsg_backPack_2eproto.base);
  prop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goods_id_) -
      reinterpret_cast<char*>(&count_)) + sizeof(goods_id_));
}

propMsg::~propMsg() {
  // @@protoc_insertion_point(destructor:backPack.propMsg)
  SharedDtor();
}

void propMsg::SharedDtor() {
  prop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void propMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const propMsg& propMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_propMsg_backPack_2eproto.base);
  return *internal_default_instance();
}


void propMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:backPack.propMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goods_id_) -
      reinterpret_cast<char*>(&count_)) + sizeof(goods_id_));
  _internal_metadata_.Clear();
}

const char* propMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prop_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prop_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "backPack.propMsg.prop_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goods_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          goods_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* propMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backPack.propMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // int32 prop_type = 2;
  if (this->prop_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prop_type(), target);
  }

  // string prop_name = 3;
  if (this->prop_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prop_name().data(), static_cast<int>(this->_internal_prop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backPack.propMsg.prop_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prop_name(), target);
  }

  // int32 goods_id = 4;
  if (this->goods_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_goods_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backPack.propMsg)
  return target;
}

size_t propMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backPack.propMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prop_name = 3;
  if (this->prop_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prop_name());
  }

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 prop_type = 2;
  if (this->prop_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_type());
  }

  // int32 goods_id = 4;
  if (this->goods_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goods_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void propMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backPack.propMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const propMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<propMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backPack.propMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backPack.propMsg)
    MergeFrom(*source);
  }
}

void propMsg::MergeFrom(const propMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backPack.propMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prop_name().size() > 0) {

    prop_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prop_name_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.prop_type() != 0) {
    _internal_set_prop_type(from._internal_prop_type());
  }
  if (from.goods_id() != 0) {
    _internal_set_goods_id(from._internal_goods_id());
  }
}

void propMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backPack.propMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void propMsg::CopyFrom(const propMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backPack.propMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool propMsg::IsInitialized() const {
  return true;
}

void propMsg::InternalSwap(propMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prop_name_.Swap(&other->prop_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(prop_type_, other->prop_type_);
  swap(goods_id_, other->goods_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata propMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNftChipList::InitAsDefaultInstance() {
}
class SNftChipList::_Internal {
 public:
};

SNftChipList::SNftChipList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backPack.SNftChipList)
}
SNftChipList::SNftChipList(const SNftChipList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nftchiplist_(from.nftchiplist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:backPack.SNftChipList)
}

void SNftChipList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNftChipList_backPack_2eproto.base);
}

SNftChipList::~SNftChipList() {
  // @@protoc_insertion_point(destructor:backPack.SNftChipList)
  SharedDtor();
}

void SNftChipList::SharedDtor() {
}

void SNftChipList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNftChipList& SNftChipList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNftChipList_backPack_2eproto.base);
  return *internal_default_instance();
}


void SNftChipList::Clear() {
// @@protoc_insertion_point(message_clear_start:backPack.SNftChipList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nftchiplist_.Clear();
  _internal_metadata_.Clear();
}

const char* SNftChipList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .backPack.pieceMsg nftChipList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nftchiplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNftChipList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backPack.SNftChipList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .backPack.pieceMsg nftChipList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nftchiplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nftchiplist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backPack.SNftChipList)
  return target;
}

size_t SNftChipList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backPack.SNftChipList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .backPack.pieceMsg nftChipList = 1;
  total_size += 1UL * this->_internal_nftchiplist_size();
  for (const auto& msg : this->nftchiplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNftChipList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backPack.SNftChipList)
  GOOGLE_DCHECK_NE(&from, this);
  const SNftChipList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNftChipList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backPack.SNftChipList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backPack.SNftChipList)
    MergeFrom(*source);
  }
}

void SNftChipList::MergeFrom(const SNftChipList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backPack.SNftChipList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nftchiplist_.MergeFrom(from.nftchiplist_);
}

void SNftChipList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backPack.SNftChipList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNftChipList::CopyFrom(const SNftChipList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backPack.SNftChipList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNftChipList::IsInitialized() const {
  return true;
}

void SNftChipList::InternalSwap(SNftChipList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nftchiplist_.InternalSwap(&other->nftchiplist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNftChipList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPropList::InitAsDefaultInstance() {
}
class SPropList::_Internal {
 public:
};

SPropList::SPropList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backPack.SPropList)
}
SPropList::SPropList(const SPropList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      proplist_(from.proplist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:backPack.SPropList)
}

void SPropList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPropList_backPack_2eproto.base);
}

SPropList::~SPropList() {
  // @@protoc_insertion_point(destructor:backPack.SPropList)
  SharedDtor();
}

void SPropList::SharedDtor() {
}

void SPropList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPropList& SPropList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPropList_backPack_2eproto.base);
  return *internal_default_instance();
}


void SPropList::Clear() {
// @@protoc_insertion_point(message_clear_start:backPack.SPropList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proplist_.Clear();
  _internal_metadata_.Clear();
}

const char* SPropList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .backPack.propMsg propList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPropList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backPack.SPropList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .backPack.propMsg propList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_proplist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backPack.SPropList)
  return target;
}

size_t SPropList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backPack.SPropList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .backPack.propMsg propList = 1;
  total_size += 1UL * this->_internal_proplist_size();
  for (const auto& msg : this->proplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPropList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backPack.SPropList)
  GOOGLE_DCHECK_NE(&from, this);
  const SPropList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPropList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backPack.SPropList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backPack.SPropList)
    MergeFrom(*source);
  }
}

void SPropList::MergeFrom(const SPropList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backPack.SPropList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proplist_.MergeFrom(from.proplist_);
}

void SPropList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backPack.SPropList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPropList::CopyFrom(const SPropList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backPack.SPropList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPropList::IsInitialized() const {
  return true;
}

void SPropList::InternalSwap(SPropList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  proplist_.InternalSwap(&other->proplist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPropList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSingleProp::InitAsDefaultInstance() {
}
class CSingleProp::_Internal {
 public:
};

CSingleProp::CSingleProp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backPack.CSingleProp)
}
CSingleProp::CSingleProp(const CSingleProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goodsid_ = from.goodsid_;
  // @@protoc_insertion_point(copy_constructor:backPack.CSingleProp)
}

void CSingleProp::SharedCtor() {
  goodsid_ = 0;
}

CSingleProp::~CSingleProp() {
  // @@protoc_insertion_point(destructor:backPack.CSingleProp)
  SharedDtor();
}

void CSingleProp::SharedDtor() {
}

void CSingleProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSingleProp& CSingleProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSingleProp_backPack_2eproto.base);
  return *internal_default_instance();
}


void CSingleProp::Clear() {
// @@protoc_insertion_point(message_clear_start:backPack.CSingleProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodsid_ = 0;
  _internal_metadata_.Clear();
}

const char* CSingleProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 goodsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSingleProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backPack.CSingleProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backPack.CSingleProp)
  return target;
}

size_t CSingleProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backPack.CSingleProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 goodsId = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSingleProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backPack.CSingleProp)
  GOOGLE_DCHECK_NE(&from, this);
  const CSingleProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSingleProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backPack.CSingleProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backPack.CSingleProp)
    MergeFrom(*source);
  }
}

void CSingleProp::MergeFrom(const CSingleProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backPack.CSingleProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CSingleProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backPack.CSingleProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSingleProp::CopyFrom(const CSingleProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backPack.CSingleProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSingleProp::IsInitialized() const {
  return true;
}

void CSingleProp::InternalSwap(CSingleProp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSingleProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSingleProp::InitAsDefaultInstance() {
  ::backPack::_SSingleProp_default_instance_._instance.get_mutable()->prop_ = const_cast< ::backPack::propMsg*>(
      ::backPack::propMsg::internal_default_instance());
}
class SSingleProp::_Internal {
 public:
  static const ::backPack::propMsg& prop(const SSingleProp* msg);
};

const ::backPack::propMsg&
SSingleProp::_Internal::prop(const SSingleProp* msg) {
  return *msg->prop_;
}
SSingleProp::SSingleProp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backPack.SSingleProp)
}
SSingleProp::SSingleProp(const SSingleProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_prop()) {
    prop_ = new ::backPack::propMsg(*from.prop_);
  } else {
    prop_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:backPack.SSingleProp)
}

void SSingleProp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSingleProp_backPack_2eproto.base);
  prop_ = nullptr;
}

SSingleProp::~SSingleProp() {
  // @@protoc_insertion_point(destructor:backPack.SSingleProp)
  SharedDtor();
}

void SSingleProp::SharedDtor() {
  if (this != internal_default_instance()) delete prop_;
}

void SSingleProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSingleProp& SSingleProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSingleProp_backPack_2eproto.base);
  return *internal_default_instance();
}


void SSingleProp::Clear() {
// @@protoc_insertion_point(message_clear_start:backPack.SSingleProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && prop_ != nullptr) {
    delete prop_;
  }
  prop_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SSingleProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .backPack.propMsg prop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSingleProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backPack.SSingleProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .backPack.propMsg prop = 1;
  if (this->has_prop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backPack.SSingleProp)
  return target;
}

size_t SSingleProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backPack.SSingleProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .backPack.propMsg prop = 1;
  if (this->has_prop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prop_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSingleProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backPack.SSingleProp)
  GOOGLE_DCHECK_NE(&from, this);
  const SSingleProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSingleProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backPack.SSingleProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backPack.SSingleProp)
    MergeFrom(*source);
  }
}

void SSingleProp::MergeFrom(const SSingleProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backPack.SSingleProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prop()) {
    _internal_mutable_prop()->::backPack::propMsg::MergeFrom(from._internal_prop());
  }
}

void SSingleProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backPack.SSingleProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSingleProp::CopyFrom(const SSingleProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backPack.SSingleProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSingleProp::IsInitialized() const {
  return true;
}

void SSingleProp::InternalSwap(SSingleProp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(prop_, other->prop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSingleProp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace backPack
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::backPack::pieceMsg* Arena::CreateMaybeMessage< ::backPack::pieceMsg >(Arena* arena) {
  return Arena::CreateInternal< ::backPack::pieceMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::backPack::propMsg* Arena::CreateMaybeMessage< ::backPack::propMsg >(Arena* arena) {
  return Arena::CreateInternal< ::backPack::propMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::backPack::SNftChipList* Arena::CreateMaybeMessage< ::backPack::SNftChipList >(Arena* arena) {
  return Arena::CreateInternal< ::backPack::SNftChipList >(arena);
}
template<> PROTOBUF_NOINLINE ::backPack::SPropList* Arena::CreateMaybeMessage< ::backPack::SPropList >(Arena* arena) {
  return Arena::CreateInternal< ::backPack::SPropList >(arena);
}
template<> PROTOBUF_NOINLINE ::backPack::CSingleProp* Arena::CreateMaybeMessage< ::backPack::CSingleProp >(Arena* arena) {
  return Arena::CreateInternal< ::backPack::CSingleProp >(arena);
}
template<> PROTOBUF_NOINLINE ::backPack::SSingleProp* Arena::CreateMaybeMessage< ::backPack::SSingleProp >(Arena* arena) {
  return Arena::CreateInternal< ::backPack::SSingleProp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
