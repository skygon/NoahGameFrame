// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: liuXiaTask.proto

#include "liuXiaTask.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_liuXiaTask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiuXiaTaskInfo_liuXiaTask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_liuXiaTask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiuXiaTaskRewardInfo_liuXiaTask_2eproto;
namespace liuXiaTask {
class CGetLiuXiaTaskListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetLiuXiaTaskList> _instance;
} _CGetLiuXiaTaskList_default_instance_;
class SGetLiuXiaTaskListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetLiuXiaTaskList> _instance;
} _SGetLiuXiaTaskList_default_instance_;
class LiuXiaTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiuXiaTaskInfo> _instance;
} _LiuXiaTaskInfo_default_instance_;
class CLiuXiaCompleteTaskReportingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLiuXiaCompleteTaskReporting> _instance;
} _CLiuXiaCompleteTaskReporting_default_instance_;
class SLiuXiaCompleteTaskReportingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLiuXiaCompleteTaskReporting> _instance;
} _SLiuXiaCompleteTaskReporting_default_instance_;
class CLiuXiaClaimRewardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLiuXiaClaimRewards> _instance;
} _CLiuXiaClaimRewards_default_instance_;
class SLiuXiaClaimRewardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLiuXiaClaimRewards> _instance;
} _SLiuXiaClaimRewards_default_instance_;
class LiuXiaTaskRewardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiuXiaTaskRewardInfo> _instance;
} _LiuXiaTaskRewardInfo_default_instance_;
class CCollectionSiKuQuanShuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCollectionSiKuQuanShu> _instance;
} _CCollectionSiKuQuanShu_default_instance_;
class SCollectionSiKuQuanShuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCollectionSiKuQuanShu> _instance;
} _SCollectionSiKuQuanShu_default_instance_;
class CStatCollectionSiKuQuanShuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CStatCollectionSiKuQuanShu> _instance;
} _CStatCollectionSiKuQuanShu_default_instance_;
class SStatCollectionSiKuQuanShuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SStatCollectionSiKuQuanShu> _instance;
} _SStatCollectionSiKuQuanShu_default_instance_;
class CGetUserSiKuQuanShuPageNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetUserSiKuQuanShuPageNum> _instance;
} _CGetUserSiKuQuanShuPageNum_default_instance_;
class SGetUserSiKuQuanShuPageNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetUserSiKuQuanShuPageNum> _instance;
} _SGetUserSiKuQuanShuPageNum_default_instance_;
class CGetLiuxiaFreeGiftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetLiuxiaFreeGift> _instance;
} _CGetLiuxiaFreeGift_default_instance_;
class SGetLiuxiaFreeGiftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetLiuxiaFreeGift> _instance;
} _SGetLiuxiaFreeGift_default_instance_;
class CGetLiuxiaSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetLiuxiaSwitch> _instance;
} _CGetLiuxiaSwitch_default_instance_;
class SGetLiuxiaSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetLiuxiaSwitch> _instance;
} _SGetLiuxiaSwitch_default_instance_;
}  // namespace liuXiaTask
static void InitDefaultsscc_info_CCollectionSiKuQuanShu_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_CCollectionSiKuQuanShu_default_instance_;
    new (ptr) ::liuXiaTask::CCollectionSiKuQuanShu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::CCollectionSiKuQuanShu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCollectionSiKuQuanShu_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCollectionSiKuQuanShu_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_CGetLiuXiaTaskList_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_CGetLiuXiaTaskList_default_instance_;
    new (ptr) ::liuXiaTask::CGetLiuXiaTaskList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::CGetLiuXiaTaskList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetLiuXiaTaskList_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetLiuXiaTaskList_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_CGetLiuxiaFreeGift_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_CGetLiuxiaFreeGift_default_instance_;
    new (ptr) ::liuXiaTask::CGetLiuxiaFreeGift();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::CGetLiuxiaFreeGift::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetLiuxiaFreeGift_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetLiuxiaFreeGift_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_CGetLiuxiaSwitch_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_CGetLiuxiaSwitch_default_instance_;
    new (ptr) ::liuXiaTask::CGetLiuxiaSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::CGetLiuxiaSwitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetLiuxiaSwitch_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetLiuxiaSwitch_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_CGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_CGetUserSiKuQuanShuPageNum_default_instance_;
    new (ptr) ::liuXiaTask::CGetUserSiKuQuanShuPageNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::CGetUserSiKuQuanShuPageNum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_CLiuXiaClaimRewards_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_CLiuXiaClaimRewards_default_instance_;
    new (ptr) ::liuXiaTask::CLiuXiaClaimRewards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::CLiuXiaClaimRewards::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLiuXiaClaimRewards_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CLiuXiaClaimRewards_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_CLiuXiaCompleteTaskReporting_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_CLiuXiaCompleteTaskReporting_default_instance_;
    new (ptr) ::liuXiaTask::CLiuXiaCompleteTaskReporting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::CLiuXiaCompleteTaskReporting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLiuXiaCompleteTaskReporting_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CLiuXiaCompleteTaskReporting_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_CStatCollectionSiKuQuanShu_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_CStatCollectionSiKuQuanShu_default_instance_;
    new (ptr) ::liuXiaTask::CStatCollectionSiKuQuanShu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::CStatCollectionSiKuQuanShu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CStatCollectionSiKuQuanShu_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CStatCollectionSiKuQuanShu_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_LiuXiaTaskInfo_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_LiuXiaTaskInfo_default_instance_;
    new (ptr) ::liuXiaTask::LiuXiaTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::LiuXiaTaskInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiuXiaTaskInfo_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiuXiaTaskInfo_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_LiuXiaTaskRewardInfo_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_LiuXiaTaskRewardInfo_default_instance_;
    new (ptr) ::liuXiaTask::LiuXiaTaskRewardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::LiuXiaTaskRewardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiuXiaTaskRewardInfo_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiuXiaTaskRewardInfo_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_SCollectionSiKuQuanShu_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_SCollectionSiKuQuanShu_default_instance_;
    new (ptr) ::liuXiaTask::SCollectionSiKuQuanShu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::SCollectionSiKuQuanShu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCollectionSiKuQuanShu_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCollectionSiKuQuanShu_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_SGetLiuXiaTaskList_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_SGetLiuXiaTaskList_default_instance_;
    new (ptr) ::liuXiaTask::SGetLiuXiaTaskList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::SGetLiuXiaTaskList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SGetLiuXiaTaskList_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SGetLiuXiaTaskList_liuXiaTask_2eproto}, {
      &scc_info_LiuXiaTaskInfo_liuXiaTask_2eproto.base,}};

static void InitDefaultsscc_info_SGetLiuxiaFreeGift_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_SGetLiuxiaFreeGift_default_instance_;
    new (ptr) ::liuXiaTask::SGetLiuxiaFreeGift();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::SGetLiuxiaFreeGift::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGetLiuxiaFreeGift_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGetLiuxiaFreeGift_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_SGetLiuxiaSwitch_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_SGetLiuxiaSwitch_default_instance_;
    new (ptr) ::liuXiaTask::SGetLiuxiaSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::SGetLiuxiaSwitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGetLiuxiaSwitch_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGetLiuxiaSwitch_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_SGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_SGetUserSiKuQuanShuPageNum_default_instance_;
    new (ptr) ::liuXiaTask::SGetUserSiKuQuanShuPageNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::SGetUserSiKuQuanShuPageNum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_SLiuXiaClaimRewards_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_SLiuXiaClaimRewards_default_instance_;
    new (ptr) ::liuXiaTask::SLiuXiaClaimRewards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::SLiuXiaClaimRewards::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLiuXiaClaimRewards_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLiuXiaClaimRewards_liuXiaTask_2eproto}, {
      &scc_info_LiuXiaTaskRewardInfo_liuXiaTask_2eproto.base,}};

static void InitDefaultsscc_info_SLiuXiaCompleteTaskReporting_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_SLiuXiaCompleteTaskReporting_default_instance_;
    new (ptr) ::liuXiaTask::SLiuXiaCompleteTaskReporting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::SLiuXiaCompleteTaskReporting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLiuXiaCompleteTaskReporting_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLiuXiaCompleteTaskReporting_liuXiaTask_2eproto}, {}};

static void InitDefaultsscc_info_SStatCollectionSiKuQuanShu_liuXiaTask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::liuXiaTask::_SStatCollectionSiKuQuanShu_default_instance_;
    new (ptr) ::liuXiaTask::SStatCollectionSiKuQuanShu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::liuXiaTask::SStatCollectionSiKuQuanShu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SStatCollectionSiKuQuanShu_liuXiaTask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SStatCollectionSiKuQuanShu_liuXiaTask_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_liuXiaTask_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_liuXiaTask_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_liuXiaTask_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_liuXiaTask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CGetLiuXiaTaskList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuXiaTaskList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuXiaTaskList, msg_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuXiaTaskList, state_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuXiaTaskList, featuredtasklist_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuXiaTaskList, sukuquanshutasklist_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuXiaTaskList, dailytasklist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskInfo, taskid_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskInfo, name_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskInfo, key_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskInfo, desc_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskInfo, coppercoinnum_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CLiuXiaCompleteTaskReporting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CLiuXiaCompleteTaskReporting, key_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CLiuXiaCompleteTaskReporting, taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaCompleteTaskReporting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaCompleteTaskReporting, key_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaCompleteTaskReporting, taskid_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaCompleteTaskReporting, state_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaCompleteTaskReporting, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CLiuXiaClaimRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CLiuXiaClaimRewards, key_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CLiuXiaClaimRewards, taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaClaimRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaClaimRewards, key_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaClaimRewards, taskid_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaClaimRewards, list_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaClaimRewards, state_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SLiuXiaClaimRewards, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskRewardInfo, key_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskRewardInfo, taskid_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::LiuXiaTaskRewardInfo, coppercoinnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CCollectionSiKuQuanShu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CCollectionSiKuQuanShu, num_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CCollectionSiKuQuanShu, npcid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SCollectionSiKuQuanShu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SCollectionSiKuQuanShu, state_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SCollectionSiKuQuanShu, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CStatCollectionSiKuQuanShu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SStatCollectionSiKuQuanShu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SStatCollectionSiKuQuanShu, totalusernum_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SStatCollectionSiKuQuanShu, totalpagenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CGetUserSiKuQuanShuPageNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetUserSiKuQuanShuPageNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetUserSiKuQuanShuPageNum, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CGetLiuxiaFreeGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuxiaFreeGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuxiaFreeGift, state_),
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuxiaFreeGift, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::CGetLiuxiaSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuxiaSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::liuXiaTask::SGetLiuxiaSwitch, daynight_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::liuXiaTask::CGetLiuXiaTaskList)},
  { 5, -1, sizeof(::liuXiaTask::SGetLiuXiaTaskList)},
  { 15, -1, sizeof(::liuXiaTask::LiuXiaTaskInfo)},
  { 26, -1, sizeof(::liuXiaTask::CLiuXiaCompleteTaskReporting)},
  { 33, -1, sizeof(::liuXiaTask::SLiuXiaCompleteTaskReporting)},
  { 42, -1, sizeof(::liuXiaTask::CLiuXiaClaimRewards)},
  { 49, -1, sizeof(::liuXiaTask::SLiuXiaClaimRewards)},
  { 59, -1, sizeof(::liuXiaTask::LiuXiaTaskRewardInfo)},
  { 67, -1, sizeof(::liuXiaTask::CCollectionSiKuQuanShu)},
  { 74, -1, sizeof(::liuXiaTask::SCollectionSiKuQuanShu)},
  { 81, -1, sizeof(::liuXiaTask::CStatCollectionSiKuQuanShu)},
  { 86, -1, sizeof(::liuXiaTask::SStatCollectionSiKuQuanShu)},
  { 93, -1, sizeof(::liuXiaTask::CGetUserSiKuQuanShuPageNum)},
  { 98, -1, sizeof(::liuXiaTask::SGetUserSiKuQuanShuPageNum)},
  { 104, -1, sizeof(::liuXiaTask::CGetLiuxiaFreeGift)},
  { 109, -1, sizeof(::liuXiaTask::SGetLiuxiaFreeGift)},
  { 116, -1, sizeof(::liuXiaTask::CGetLiuxiaSwitch)},
  { 121, -1, sizeof(::liuXiaTask::SGetLiuxiaSwitch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_CGetLiuXiaTaskList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_SGetLiuXiaTaskList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_LiuXiaTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_CLiuXiaCompleteTaskReporting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_SLiuXiaCompleteTaskReporting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_CLiuXiaClaimRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_SLiuXiaClaimRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_LiuXiaTaskRewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_CCollectionSiKuQuanShu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_SCollectionSiKuQuanShu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_CStatCollectionSiKuQuanShu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_SStatCollectionSiKuQuanShu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_CGetUserSiKuQuanShuPageNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_SGetUserSiKuQuanShuPageNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_CGetLiuxiaFreeGift_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_SGetLiuxiaFreeGift_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_CGetLiuxiaSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::liuXiaTask::_SGetLiuxiaSwitch_default_instance_),
};

const char descriptor_table_protodef_liuXiaTask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020liuXiaTask.proto\022\nliuXiaTask\"\024\n\022CGetLi"
  "uXiaTaskList\"\322\001\n\022SGetLiuXiaTaskList\022\013\n\003m"
  "sg\030\001 \001(\t\022\r\n\005state\030\002 \001(\005\0224\n\020featuredTaskL"
  "ist\030\003 \003(\0132\032.liuXiaTask.LiuXiaTaskInfo\0227\n"
  "\023suKuQuanShuTaskList\030\004 \003(\0132\032.liuXiaTask."
  "LiuXiaTaskInfo\0221\n\rdailyTaskList\030\005 \003(\0132\032."
  "liuXiaTask.LiuXiaTaskInfo\"p\n\016LiuXiaTaskI"
  "nfo\022\016\n\006taskId\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003key"
  "\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t\022\025\n\rcopperCoinNum\030\005 "
  "\001(\005\022\016\n\006status\030\006 \001(\005\";\n\034CLiuXiaCompleteTa"
  "skReporting\022\013\n\003key\030\001 \001(\t\022\016\n\006taskId\030\002 \001(\005"
  "\"W\n\034SLiuXiaCompleteTaskReporting\022\013\n\003key\030"
  "\001 \001(\t\022\016\n\006taskId\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\013\n\003"
  "msg\030\004 \001(\t\"2\n\023CLiuXiaClaimRewards\022\013\n\003key\030"
  "\001 \001(\t\022\016\n\006taskId\030\002 \001(\005\"~\n\023SLiuXiaClaimRew"
  "ards\022\013\n\003key\030\001 \001(\t\022\016\n\006taskId\030\002 \001(\005\022.\n\004lis"
  "t\030\003 \003(\0132 .liuXiaTask.LiuXiaTaskRewardInf"
  "o\022\r\n\005state\030\004 \001(\005\022\013\n\003msg\030\005 \001(\t\"J\n\024LiuXiaT"
  "askRewardInfo\022\013\n\003key\030\001 \001(\t\022\016\n\006taskId\030\002 \001"
  "(\005\022\025\n\rcopperCoinNum\030\003 \001(\005\"4\n\026CCollection"
  "SiKuQuanShu\022\013\n\003num\030\001 \001(\005\022\r\n\005npcId\030\002 \001(\005\""
  "4\n\026SCollectionSiKuQuanShu\022\r\n\005state\030\001 \001(\005"
  "\022\013\n\003msg\030\002 \001(\t\"\034\n\032CStatCollectionSiKuQuan"
  "Shu\"H\n\032SStatCollectionSiKuQuanShu\022\024\n\014tot"
  "alUserNum\030\001 \001(\005\022\024\n\014totalPageNum\030\002 \001(\005\"\034\n"
  "\032CGetUserSiKuQuanShuPageNum\")\n\032SGetUserS"
  "iKuQuanShuPageNum\022\013\n\003num\030\001 \001(\005\"\024\n\022CGetLi"
  "uxiaFreeGift\"0\n\022SGetLiuxiaFreeGift\022\r\n\005st"
  "ate\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\022\n\020CGetLiuxiaSwit"
  "ch\"$\n\020SGetLiuxiaSwitch\022\020\n\010daynight\030\001 \001(\005"
  "B*\n\030com.dayou.space.protobufB\nLiuXiaTask"
  "Z\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_liuXiaTask_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_liuXiaTask_2eproto_sccs[18] = {
  &scc_info_CCollectionSiKuQuanShu_liuXiaTask_2eproto.base,
  &scc_info_CGetLiuXiaTaskList_liuXiaTask_2eproto.base,
  &scc_info_CGetLiuxiaFreeGift_liuXiaTask_2eproto.base,
  &scc_info_CGetLiuxiaSwitch_liuXiaTask_2eproto.base,
  &scc_info_CGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto.base,
  &scc_info_CLiuXiaClaimRewards_liuXiaTask_2eproto.base,
  &scc_info_CLiuXiaCompleteTaskReporting_liuXiaTask_2eproto.base,
  &scc_info_CStatCollectionSiKuQuanShu_liuXiaTask_2eproto.base,
  &scc_info_LiuXiaTaskInfo_liuXiaTask_2eproto.base,
  &scc_info_LiuXiaTaskRewardInfo_liuXiaTask_2eproto.base,
  &scc_info_SCollectionSiKuQuanShu_liuXiaTask_2eproto.base,
  &scc_info_SGetLiuXiaTaskList_liuXiaTask_2eproto.base,
  &scc_info_SGetLiuxiaFreeGift_liuXiaTask_2eproto.base,
  &scc_info_SGetLiuxiaSwitch_liuXiaTask_2eproto.base,
  &scc_info_SGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto.base,
  &scc_info_SLiuXiaClaimRewards_liuXiaTask_2eproto.base,
  &scc_info_SLiuXiaCompleteTaskReporting_liuXiaTask_2eproto.base,
  &scc_info_SStatCollectionSiKuQuanShu_liuXiaTask_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_liuXiaTask_2eproto_once;
static bool descriptor_table_liuXiaTask_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_liuXiaTask_2eproto = {
  &descriptor_table_liuXiaTask_2eproto_initialized, descriptor_table_protodef_liuXiaTask_2eproto, "liuXiaTask.proto", 1252,
  &descriptor_table_liuXiaTask_2eproto_once, descriptor_table_liuXiaTask_2eproto_sccs, descriptor_table_liuXiaTask_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_liuXiaTask_2eproto::offsets,
  file_level_metadata_liuXiaTask_2eproto, 18, file_level_enum_descriptors_liuXiaTask_2eproto, file_level_service_descriptors_liuXiaTask_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_liuXiaTask_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_liuXiaTask_2eproto), true);
namespace liuXiaTask {

// ===================================================================

void CGetLiuXiaTaskList::InitAsDefaultInstance() {
}
class CGetLiuXiaTaskList::_Internal {
 public:
};

CGetLiuXiaTaskList::CGetLiuXiaTaskList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.CGetLiuXiaTaskList)
}
CGetLiuXiaTaskList::CGetLiuXiaTaskList(const CGetLiuXiaTaskList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.CGetLiuXiaTaskList)
}

void CGetLiuXiaTaskList::SharedCtor() {
}

CGetLiuXiaTaskList::~CGetLiuXiaTaskList() {
  // @@protoc_insertion_point(destructor:liuXiaTask.CGetLiuXiaTaskList)
  SharedDtor();
}

void CGetLiuXiaTaskList::SharedDtor() {
}

void CGetLiuXiaTaskList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetLiuXiaTaskList& CGetLiuXiaTaskList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetLiuXiaTaskList_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void CGetLiuXiaTaskList::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.CGetLiuXiaTaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CGetLiuXiaTaskList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetLiuXiaTaskList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.CGetLiuXiaTaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.CGetLiuXiaTaskList)
  return target;
}

size_t CGetLiuXiaTaskList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.CGetLiuXiaTaskList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetLiuXiaTaskList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.CGetLiuXiaTaskList)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetLiuXiaTaskList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetLiuXiaTaskList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.CGetLiuXiaTaskList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.CGetLiuXiaTaskList)
    MergeFrom(*source);
  }
}

void CGetLiuXiaTaskList::MergeFrom(const CGetLiuXiaTaskList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.CGetLiuXiaTaskList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGetLiuXiaTaskList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.CGetLiuXiaTaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetLiuXiaTaskList::CopyFrom(const CGetLiuXiaTaskList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.CGetLiuXiaTaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetLiuXiaTaskList::IsInitialized() const {
  return true;
}

void CGetLiuXiaTaskList::InternalSwap(CGetLiuXiaTaskList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetLiuXiaTaskList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetLiuXiaTaskList::InitAsDefaultInstance() {
}
class SGetLiuXiaTaskList::_Internal {
 public:
};

SGetLiuXiaTaskList::SGetLiuXiaTaskList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.SGetLiuXiaTaskList)
}
SGetLiuXiaTaskList::SGetLiuXiaTaskList(const SGetLiuXiaTaskList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      featuredtasklist_(from.featuredtasklist_),
      sukuquanshutasklist_(from.sukuquanshutasklist_),
      dailytasklist_(from.dailytasklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.SGetLiuXiaTaskList)
}

void SGetLiuXiaTaskList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGetLiuXiaTaskList_liuXiaTask_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SGetLiuXiaTaskList::~SGetLiuXiaTaskList() {
  // @@protoc_insertion_point(destructor:liuXiaTask.SGetLiuXiaTaskList)
  SharedDtor();
}

void SGetLiuXiaTaskList::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGetLiuXiaTaskList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetLiuXiaTaskList& SGetLiuXiaTaskList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetLiuXiaTaskList_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void SGetLiuXiaTaskList::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.SGetLiuXiaTaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  featuredtasklist_.Clear();
  sukuquanshutasklist_.Clear();
  dailytasklist_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SGetLiuXiaTaskList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.SGetLiuXiaTaskList.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .liuXiaTask.LiuXiaTaskInfo featuredTaskList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_featuredtasklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .liuXiaTask.LiuXiaTaskInfo suKuQuanShuTaskList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sukuquanshutasklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .liuXiaTask.LiuXiaTaskInfo dailyTaskList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dailytasklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetLiuXiaTaskList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.SGetLiuXiaTaskList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.SGetLiuXiaTaskList.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // repeated .liuXiaTask.LiuXiaTaskInfo featuredTaskList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_featuredtasklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_featuredtasklist(i), target, stream);
  }

  // repeated .liuXiaTask.LiuXiaTaskInfo suKuQuanShuTaskList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sukuquanshutasklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sukuquanshutasklist(i), target, stream);
  }

  // repeated .liuXiaTask.LiuXiaTaskInfo dailyTaskList = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dailytasklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_dailytasklist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.SGetLiuXiaTaskList)
  return target;
}

size_t SGetLiuXiaTaskList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.SGetLiuXiaTaskList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .liuXiaTask.LiuXiaTaskInfo featuredTaskList = 3;
  total_size += 1UL * this->_internal_featuredtasklist_size();
  for (const auto& msg : this->featuredtasklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .liuXiaTask.LiuXiaTaskInfo suKuQuanShuTaskList = 4;
  total_size += 1UL * this->_internal_sukuquanshutasklist_size();
  for (const auto& msg : this->sukuquanshutasklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .liuXiaTask.LiuXiaTaskInfo dailyTaskList = 5;
  total_size += 1UL * this->_internal_dailytasklist_size();
  for (const auto& msg : this->dailytasklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetLiuXiaTaskList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.SGetLiuXiaTaskList)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetLiuXiaTaskList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetLiuXiaTaskList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.SGetLiuXiaTaskList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.SGetLiuXiaTaskList)
    MergeFrom(*source);
  }
}

void SGetLiuXiaTaskList::MergeFrom(const SGetLiuXiaTaskList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.SGetLiuXiaTaskList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  featuredtasklist_.MergeFrom(from.featuredtasklist_);
  sukuquanshutasklist_.MergeFrom(from.sukuquanshutasklist_);
  dailytasklist_.MergeFrom(from.dailytasklist_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SGetLiuXiaTaskList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.SGetLiuXiaTaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetLiuXiaTaskList::CopyFrom(const SGetLiuXiaTaskList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.SGetLiuXiaTaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetLiuXiaTaskList::IsInitialized() const {
  return true;
}

void SGetLiuXiaTaskList::InternalSwap(SGetLiuXiaTaskList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  featuredtasklist_.InternalSwap(&other->featuredtasklist_);
  sukuquanshutasklist_.InternalSwap(&other->sukuquanshutasklist_);
  dailytasklist_.InternalSwap(&other->dailytasklist_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetLiuXiaTaskList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiuXiaTaskInfo::InitAsDefaultInstance() {
}
class LiuXiaTaskInfo::_Internal {
 public:
};

LiuXiaTaskInfo::LiuXiaTaskInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.LiuXiaTaskInfo)
}
LiuXiaTaskInfo::LiuXiaTaskInfo(const LiuXiaTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.LiuXiaTaskInfo)
}

void LiuXiaTaskInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiuXiaTaskInfo_liuXiaTask_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
}

LiuXiaTaskInfo::~LiuXiaTaskInfo() {
  // @@protoc_insertion_point(destructor:liuXiaTask.LiuXiaTaskInfo)
  SharedDtor();
}

void LiuXiaTaskInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiuXiaTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiuXiaTaskInfo& LiuXiaTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiuXiaTaskInfo_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void LiuXiaTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.LiuXiaTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* LiuXiaTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.LiuXiaTaskInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.LiuXiaTaskInfo.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.LiuXiaTaskInfo.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 copperCoinNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          coppercoinnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiuXiaTaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.LiuXiaTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.LiuXiaTaskInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string key = 3;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.LiuXiaTaskInfo.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // string desc = 4;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.LiuXiaTaskInfo.desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  // int32 copperCoinNum = 5;
  if (this->coppercoinnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_coppercoinnum(), target);
  }

  // int32 status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.LiuXiaTaskInfo)
  return target;
}

size_t LiuXiaTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.LiuXiaTaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string desc = 4;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // int32 copperCoinNum = 5;
  if (this->coppercoinnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coppercoinnum());
  }

  // int32 status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiuXiaTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.LiuXiaTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LiuXiaTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiuXiaTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.LiuXiaTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.LiuXiaTaskInfo)
    MergeFrom(*source);
  }
}

void LiuXiaTaskInfo::MergeFrom(const LiuXiaTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.LiuXiaTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.coppercoinnum() != 0) {
    _internal_set_coppercoinnum(from._internal_coppercoinnum());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void LiuXiaTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.LiuXiaTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiuXiaTaskInfo::CopyFrom(const LiuXiaTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.LiuXiaTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiuXiaTaskInfo::IsInitialized() const {
  return true;
}

void LiuXiaTaskInfo::InternalSwap(LiuXiaTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
  swap(coppercoinnum_, other->coppercoinnum_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiuXiaTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLiuXiaCompleteTaskReporting::InitAsDefaultInstance() {
}
class CLiuXiaCompleteTaskReporting::_Internal {
 public:
};

CLiuXiaCompleteTaskReporting::CLiuXiaCompleteTaskReporting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.CLiuXiaCompleteTaskReporting)
}
CLiuXiaCompleteTaskReporting::CLiuXiaCompleteTaskReporting(const CLiuXiaCompleteTaskReporting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  taskid_ = from.taskid_;
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.CLiuXiaCompleteTaskReporting)
}

void CLiuXiaCompleteTaskReporting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CLiuXiaCompleteTaskReporting_liuXiaTask_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
}

CLiuXiaCompleteTaskReporting::~CLiuXiaCompleteTaskReporting() {
  // @@protoc_insertion_point(destructor:liuXiaTask.CLiuXiaCompleteTaskReporting)
  SharedDtor();
}

void CLiuXiaCompleteTaskReporting::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CLiuXiaCompleteTaskReporting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLiuXiaCompleteTaskReporting& CLiuXiaCompleteTaskReporting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLiuXiaCompleteTaskReporting_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void CLiuXiaCompleteTaskReporting::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.CLiuXiaCompleteTaskReporting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
  _internal_metadata_.Clear();
}

const char* CLiuXiaCompleteTaskReporting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.CLiuXiaCompleteTaskReporting.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLiuXiaCompleteTaskReporting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.CLiuXiaCompleteTaskReporting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.CLiuXiaCompleteTaskReporting.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.CLiuXiaCompleteTaskReporting)
  return target;
}

size_t CLiuXiaCompleteTaskReporting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.CLiuXiaCompleteTaskReporting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLiuXiaCompleteTaskReporting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.CLiuXiaCompleteTaskReporting)
  GOOGLE_DCHECK_NE(&from, this);
  const CLiuXiaCompleteTaskReporting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLiuXiaCompleteTaskReporting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.CLiuXiaCompleteTaskReporting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.CLiuXiaCompleteTaskReporting)
    MergeFrom(*source);
  }
}

void CLiuXiaCompleteTaskReporting::MergeFrom(const CLiuXiaCompleteTaskReporting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.CLiuXiaCompleteTaskReporting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void CLiuXiaCompleteTaskReporting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.CLiuXiaCompleteTaskReporting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLiuXiaCompleteTaskReporting::CopyFrom(const CLiuXiaCompleteTaskReporting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.CLiuXiaCompleteTaskReporting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLiuXiaCompleteTaskReporting::IsInitialized() const {
  return true;
}

void CLiuXiaCompleteTaskReporting::InternalSwap(CLiuXiaCompleteTaskReporting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLiuXiaCompleteTaskReporting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLiuXiaCompleteTaskReporting::InitAsDefaultInstance() {
}
class SLiuXiaCompleteTaskReporting::_Internal {
 public:
};

SLiuXiaCompleteTaskReporting::SLiuXiaCompleteTaskReporting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.SLiuXiaCompleteTaskReporting)
}
SLiuXiaCompleteTaskReporting::SLiuXiaCompleteTaskReporting(const SLiuXiaCompleteTaskReporting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.SLiuXiaCompleteTaskReporting)
}

void SLiuXiaCompleteTaskReporting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLiuXiaCompleteTaskReporting_liuXiaTask_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(state_));
}

SLiuXiaCompleteTaskReporting::~SLiuXiaCompleteTaskReporting() {
  // @@protoc_insertion_point(destructor:liuXiaTask.SLiuXiaCompleteTaskReporting)
  SharedDtor();
}

void SLiuXiaCompleteTaskReporting::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLiuXiaCompleteTaskReporting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLiuXiaCompleteTaskReporting& SLiuXiaCompleteTaskReporting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLiuXiaCompleteTaskReporting_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void SLiuXiaCompleteTaskReporting::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.SLiuXiaCompleteTaskReporting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* SLiuXiaCompleteTaskReporting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.SLiuXiaCompleteTaskReporting.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.SLiuXiaCompleteTaskReporting.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLiuXiaCompleteTaskReporting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.SLiuXiaCompleteTaskReporting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.SLiuXiaCompleteTaskReporting.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_taskid(), target);
  }

  // int32 state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.SLiuXiaCompleteTaskReporting.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.SLiuXiaCompleteTaskReporting)
  return target;
}

size_t SLiuXiaCompleteTaskReporting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.SLiuXiaCompleteTaskReporting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // int32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLiuXiaCompleteTaskReporting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.SLiuXiaCompleteTaskReporting)
  GOOGLE_DCHECK_NE(&from, this);
  const SLiuXiaCompleteTaskReporting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLiuXiaCompleteTaskReporting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.SLiuXiaCompleteTaskReporting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.SLiuXiaCompleteTaskReporting)
    MergeFrom(*source);
  }
}

void SLiuXiaCompleteTaskReporting::MergeFrom(const SLiuXiaCompleteTaskReporting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.SLiuXiaCompleteTaskReporting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SLiuXiaCompleteTaskReporting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.SLiuXiaCompleteTaskReporting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLiuXiaCompleteTaskReporting::CopyFrom(const SLiuXiaCompleteTaskReporting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.SLiuXiaCompleteTaskReporting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLiuXiaCompleteTaskReporting::IsInitialized() const {
  return true;
}

void SLiuXiaCompleteTaskReporting::InternalSwap(SLiuXiaCompleteTaskReporting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLiuXiaCompleteTaskReporting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLiuXiaClaimRewards::InitAsDefaultInstance() {
}
class CLiuXiaClaimRewards::_Internal {
 public:
};

CLiuXiaClaimRewards::CLiuXiaClaimRewards()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.CLiuXiaClaimRewards)
}
CLiuXiaClaimRewards::CLiuXiaClaimRewards(const CLiuXiaClaimRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  taskid_ = from.taskid_;
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.CLiuXiaClaimRewards)
}

void CLiuXiaClaimRewards::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CLiuXiaClaimRewards_liuXiaTask_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
}

CLiuXiaClaimRewards::~CLiuXiaClaimRewards() {
  // @@protoc_insertion_point(destructor:liuXiaTask.CLiuXiaClaimRewards)
  SharedDtor();
}

void CLiuXiaClaimRewards::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CLiuXiaClaimRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLiuXiaClaimRewards& CLiuXiaClaimRewards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLiuXiaClaimRewards_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void CLiuXiaClaimRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.CLiuXiaClaimRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0;
  _internal_metadata_.Clear();
}

const char* CLiuXiaClaimRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.CLiuXiaClaimRewards.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLiuXiaClaimRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.CLiuXiaClaimRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.CLiuXiaClaimRewards.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.CLiuXiaClaimRewards)
  return target;
}

size_t CLiuXiaClaimRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.CLiuXiaClaimRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLiuXiaClaimRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.CLiuXiaClaimRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const CLiuXiaClaimRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLiuXiaClaimRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.CLiuXiaClaimRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.CLiuXiaClaimRewards)
    MergeFrom(*source);
  }
}

void CLiuXiaClaimRewards::MergeFrom(const CLiuXiaClaimRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.CLiuXiaClaimRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void CLiuXiaClaimRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.CLiuXiaClaimRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLiuXiaClaimRewards::CopyFrom(const CLiuXiaClaimRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.CLiuXiaClaimRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLiuXiaClaimRewards::IsInitialized() const {
  return true;
}

void CLiuXiaClaimRewards::InternalSwap(CLiuXiaClaimRewards* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLiuXiaClaimRewards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLiuXiaClaimRewards::InitAsDefaultInstance() {
}
class SLiuXiaClaimRewards::_Internal {
 public:
};

SLiuXiaClaimRewards::SLiuXiaClaimRewards()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.SLiuXiaClaimRewards)
}
SLiuXiaClaimRewards::SLiuXiaClaimRewards(const SLiuXiaClaimRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.SLiuXiaClaimRewards)
}

void SLiuXiaClaimRewards::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLiuXiaClaimRewards_liuXiaTask_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(state_));
}

SLiuXiaClaimRewards::~SLiuXiaClaimRewards() {
  // @@protoc_insertion_point(destructor:liuXiaTask.SLiuXiaClaimRewards)
  SharedDtor();
}

void SLiuXiaClaimRewards::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLiuXiaClaimRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLiuXiaClaimRewards& SLiuXiaClaimRewards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLiuXiaClaimRewards_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void SLiuXiaClaimRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.SLiuXiaClaimRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* SLiuXiaClaimRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.SLiuXiaClaimRewards.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .liuXiaTask.LiuXiaTaskRewardInfo list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.SLiuXiaClaimRewards.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLiuXiaClaimRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.SLiuXiaClaimRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.SLiuXiaClaimRewards.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_taskid(), target);
  }

  // repeated .liuXiaTask.LiuXiaTaskRewardInfo list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_list(i), target, stream);
  }

  // int32 state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_state(), target);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.SLiuXiaClaimRewards.msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.SLiuXiaClaimRewards)
  return target;
}

size_t SLiuXiaClaimRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.SLiuXiaClaimRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .liuXiaTask.LiuXiaTaskRewardInfo list = 3;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // int32 state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLiuXiaClaimRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.SLiuXiaClaimRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const SLiuXiaClaimRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLiuXiaClaimRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.SLiuXiaClaimRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.SLiuXiaClaimRewards)
    MergeFrom(*source);
  }
}

void SLiuXiaClaimRewards::MergeFrom(const SLiuXiaClaimRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.SLiuXiaClaimRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SLiuXiaClaimRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.SLiuXiaClaimRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLiuXiaClaimRewards::CopyFrom(const SLiuXiaClaimRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.SLiuXiaClaimRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLiuXiaClaimRewards::IsInitialized() const {
  return true;
}

void SLiuXiaClaimRewards::InternalSwap(SLiuXiaClaimRewards* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLiuXiaClaimRewards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiuXiaTaskRewardInfo::InitAsDefaultInstance() {
}
class LiuXiaTaskRewardInfo::_Internal {
 public:
};

LiuXiaTaskRewardInfo::LiuXiaTaskRewardInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.LiuXiaTaskRewardInfo)
}
LiuXiaTaskRewardInfo::LiuXiaTaskRewardInfo(const LiuXiaTaskRewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&coppercoinnum_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(coppercoinnum_));
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.LiuXiaTaskRewardInfo)
}

void LiuXiaTaskRewardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiuXiaTaskRewardInfo_liuXiaTask_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coppercoinnum_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(coppercoinnum_));
}

LiuXiaTaskRewardInfo::~LiuXiaTaskRewardInfo() {
  // @@protoc_insertion_point(destructor:liuXiaTask.LiuXiaTaskRewardInfo)
  SharedDtor();
}

void LiuXiaTaskRewardInfo::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiuXiaTaskRewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiuXiaTaskRewardInfo& LiuXiaTaskRewardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiuXiaTaskRewardInfo_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void LiuXiaTaskRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.LiuXiaTaskRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coppercoinnum_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(coppercoinnum_));
  _internal_metadata_.Clear();
}

const char* LiuXiaTaskRewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.LiuXiaTaskRewardInfo.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taskId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 copperCoinNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coppercoinnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiuXiaTaskRewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.LiuXiaTaskRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.LiuXiaTaskRewardInfo.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_taskid(), target);
  }

  // int32 copperCoinNum = 3;
  if (this->coppercoinnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_coppercoinnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.LiuXiaTaskRewardInfo)
  return target;
}

size_t LiuXiaTaskRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.LiuXiaTaskRewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // int32 copperCoinNum = 3;
  if (this->coppercoinnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coppercoinnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiuXiaTaskRewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.LiuXiaTaskRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LiuXiaTaskRewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiuXiaTaskRewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.LiuXiaTaskRewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.LiuXiaTaskRewardInfo)
    MergeFrom(*source);
  }
}

void LiuXiaTaskRewardInfo::MergeFrom(const LiuXiaTaskRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.LiuXiaTaskRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.coppercoinnum() != 0) {
    _internal_set_coppercoinnum(from._internal_coppercoinnum());
  }
}

void LiuXiaTaskRewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.LiuXiaTaskRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiuXiaTaskRewardInfo::CopyFrom(const LiuXiaTaskRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.LiuXiaTaskRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiuXiaTaskRewardInfo::IsInitialized() const {
  return true;
}

void LiuXiaTaskRewardInfo::InternalSwap(LiuXiaTaskRewardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
  swap(coppercoinnum_, other->coppercoinnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiuXiaTaskRewardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCollectionSiKuQuanShu::InitAsDefaultInstance() {
}
class CCollectionSiKuQuanShu::_Internal {
 public:
};

CCollectionSiKuQuanShu::CCollectionSiKuQuanShu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.CCollectionSiKuQuanShu)
}
CCollectionSiKuQuanShu::CCollectionSiKuQuanShu(const CCollectionSiKuQuanShu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&npcid_) -
    reinterpret_cast<char*>(&num_)) + sizeof(npcid_));
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.CCollectionSiKuQuanShu)
}

void CCollectionSiKuQuanShu::SharedCtor() {
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npcid_) -
      reinterpret_cast<char*>(&num_)) + sizeof(npcid_));
}

CCollectionSiKuQuanShu::~CCollectionSiKuQuanShu() {
  // @@protoc_insertion_point(destructor:liuXiaTask.CCollectionSiKuQuanShu)
  SharedDtor();
}

void CCollectionSiKuQuanShu::SharedDtor() {
}

void CCollectionSiKuQuanShu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCollectionSiKuQuanShu& CCollectionSiKuQuanShu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCollectionSiKuQuanShu_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void CCollectionSiKuQuanShu::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.CCollectionSiKuQuanShu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npcid_) -
      reinterpret_cast<char*>(&num_)) + sizeof(npcid_));
  _internal_metadata_.Clear();
}

const char* CCollectionSiKuQuanShu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 npcId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          npcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCollectionSiKuQuanShu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.CCollectionSiKuQuanShu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // int32 npcId = 2;
  if (this->npcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_npcid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.CCollectionSiKuQuanShu)
  return target;
}

size_t CCollectionSiKuQuanShu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.CCollectionSiKuQuanShu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 npcId = 2;
  if (this->npcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_npcid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCollectionSiKuQuanShu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.CCollectionSiKuQuanShu)
  GOOGLE_DCHECK_NE(&from, this);
  const CCollectionSiKuQuanShu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCollectionSiKuQuanShu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.CCollectionSiKuQuanShu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.CCollectionSiKuQuanShu)
    MergeFrom(*source);
  }
}

void CCollectionSiKuQuanShu::MergeFrom(const CCollectionSiKuQuanShu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.CCollectionSiKuQuanShu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.npcid() != 0) {
    _internal_set_npcid(from._internal_npcid());
  }
}

void CCollectionSiKuQuanShu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.CCollectionSiKuQuanShu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCollectionSiKuQuanShu::CopyFrom(const CCollectionSiKuQuanShu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.CCollectionSiKuQuanShu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCollectionSiKuQuanShu::IsInitialized() const {
  return true;
}

void CCollectionSiKuQuanShu::InternalSwap(CCollectionSiKuQuanShu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_, other->num_);
  swap(npcid_, other->npcid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCollectionSiKuQuanShu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCollectionSiKuQuanShu::InitAsDefaultInstance() {
}
class SCollectionSiKuQuanShu::_Internal {
 public:
};

SCollectionSiKuQuanShu::SCollectionSiKuQuanShu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.SCollectionSiKuQuanShu)
}
SCollectionSiKuQuanShu::SCollectionSiKuQuanShu(const SCollectionSiKuQuanShu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.SCollectionSiKuQuanShu)
}

void SCollectionSiKuQuanShu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCollectionSiKuQuanShu_liuXiaTask_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SCollectionSiKuQuanShu::~SCollectionSiKuQuanShu() {
  // @@protoc_insertion_point(destructor:liuXiaTask.SCollectionSiKuQuanShu)
  SharedDtor();
}

void SCollectionSiKuQuanShu::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCollectionSiKuQuanShu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCollectionSiKuQuanShu& SCollectionSiKuQuanShu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCollectionSiKuQuanShu_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void SCollectionSiKuQuanShu::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.SCollectionSiKuQuanShu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SCollectionSiKuQuanShu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.SCollectionSiKuQuanShu.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCollectionSiKuQuanShu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.SCollectionSiKuQuanShu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.SCollectionSiKuQuanShu.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.SCollectionSiKuQuanShu)
  return target;
}

size_t SCollectionSiKuQuanShu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.SCollectionSiKuQuanShu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCollectionSiKuQuanShu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.SCollectionSiKuQuanShu)
  GOOGLE_DCHECK_NE(&from, this);
  const SCollectionSiKuQuanShu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCollectionSiKuQuanShu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.SCollectionSiKuQuanShu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.SCollectionSiKuQuanShu)
    MergeFrom(*source);
  }
}

void SCollectionSiKuQuanShu::MergeFrom(const SCollectionSiKuQuanShu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.SCollectionSiKuQuanShu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SCollectionSiKuQuanShu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.SCollectionSiKuQuanShu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCollectionSiKuQuanShu::CopyFrom(const SCollectionSiKuQuanShu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.SCollectionSiKuQuanShu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCollectionSiKuQuanShu::IsInitialized() const {
  return true;
}

void SCollectionSiKuQuanShu::InternalSwap(SCollectionSiKuQuanShu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCollectionSiKuQuanShu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CStatCollectionSiKuQuanShu::InitAsDefaultInstance() {
}
class CStatCollectionSiKuQuanShu::_Internal {
 public:
};

CStatCollectionSiKuQuanShu::CStatCollectionSiKuQuanShu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.CStatCollectionSiKuQuanShu)
}
CStatCollectionSiKuQuanShu::CStatCollectionSiKuQuanShu(const CStatCollectionSiKuQuanShu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.CStatCollectionSiKuQuanShu)
}

void CStatCollectionSiKuQuanShu::SharedCtor() {
}

CStatCollectionSiKuQuanShu::~CStatCollectionSiKuQuanShu() {
  // @@protoc_insertion_point(destructor:liuXiaTask.CStatCollectionSiKuQuanShu)
  SharedDtor();
}

void CStatCollectionSiKuQuanShu::SharedDtor() {
}

void CStatCollectionSiKuQuanShu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStatCollectionSiKuQuanShu& CStatCollectionSiKuQuanShu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CStatCollectionSiKuQuanShu_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void CStatCollectionSiKuQuanShu::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.CStatCollectionSiKuQuanShu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CStatCollectionSiKuQuanShu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStatCollectionSiKuQuanShu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.CStatCollectionSiKuQuanShu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.CStatCollectionSiKuQuanShu)
  return target;
}

size_t CStatCollectionSiKuQuanShu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.CStatCollectionSiKuQuanShu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStatCollectionSiKuQuanShu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.CStatCollectionSiKuQuanShu)
  GOOGLE_DCHECK_NE(&from, this);
  const CStatCollectionSiKuQuanShu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStatCollectionSiKuQuanShu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.CStatCollectionSiKuQuanShu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.CStatCollectionSiKuQuanShu)
    MergeFrom(*source);
  }
}

void CStatCollectionSiKuQuanShu::MergeFrom(const CStatCollectionSiKuQuanShu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.CStatCollectionSiKuQuanShu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStatCollectionSiKuQuanShu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.CStatCollectionSiKuQuanShu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStatCollectionSiKuQuanShu::CopyFrom(const CStatCollectionSiKuQuanShu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.CStatCollectionSiKuQuanShu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStatCollectionSiKuQuanShu::IsInitialized() const {
  return true;
}

void CStatCollectionSiKuQuanShu::InternalSwap(CStatCollectionSiKuQuanShu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStatCollectionSiKuQuanShu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SStatCollectionSiKuQuanShu::InitAsDefaultInstance() {
}
class SStatCollectionSiKuQuanShu::_Internal {
 public:
};

SStatCollectionSiKuQuanShu::SStatCollectionSiKuQuanShu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.SStatCollectionSiKuQuanShu)
}
SStatCollectionSiKuQuanShu::SStatCollectionSiKuQuanShu(const SStatCollectionSiKuQuanShu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&totalusernum_, &from.totalusernum_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalpagenum_) -
    reinterpret_cast<char*>(&totalusernum_)) + sizeof(totalpagenum_));
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.SStatCollectionSiKuQuanShu)
}

void SStatCollectionSiKuQuanShu::SharedCtor() {
  ::memset(&totalusernum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalpagenum_) -
      reinterpret_cast<char*>(&totalusernum_)) + sizeof(totalpagenum_));
}

SStatCollectionSiKuQuanShu::~SStatCollectionSiKuQuanShu() {
  // @@protoc_insertion_point(destructor:liuXiaTask.SStatCollectionSiKuQuanShu)
  SharedDtor();
}

void SStatCollectionSiKuQuanShu::SharedDtor() {
}

void SStatCollectionSiKuQuanShu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SStatCollectionSiKuQuanShu& SStatCollectionSiKuQuanShu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SStatCollectionSiKuQuanShu_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void SStatCollectionSiKuQuanShu::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.SStatCollectionSiKuQuanShu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&totalusernum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalpagenum_) -
      reinterpret_cast<char*>(&totalusernum_)) + sizeof(totalpagenum_));
  _internal_metadata_.Clear();
}

const char* SStatCollectionSiKuQuanShu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 totalUserNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          totalusernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalPageNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          totalpagenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SStatCollectionSiKuQuanShu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.SStatCollectionSiKuQuanShu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 totalUserNum = 1;
  if (this->totalusernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_totalusernum(), target);
  }

  // int32 totalPageNum = 2;
  if (this->totalpagenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalpagenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.SStatCollectionSiKuQuanShu)
  return target;
}

size_t SStatCollectionSiKuQuanShu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.SStatCollectionSiKuQuanShu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 totalUserNum = 1;
  if (this->totalusernum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalusernum());
  }

  // int32 totalPageNum = 2;
  if (this->totalpagenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalpagenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SStatCollectionSiKuQuanShu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.SStatCollectionSiKuQuanShu)
  GOOGLE_DCHECK_NE(&from, this);
  const SStatCollectionSiKuQuanShu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SStatCollectionSiKuQuanShu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.SStatCollectionSiKuQuanShu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.SStatCollectionSiKuQuanShu)
    MergeFrom(*source);
  }
}

void SStatCollectionSiKuQuanShu::MergeFrom(const SStatCollectionSiKuQuanShu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.SStatCollectionSiKuQuanShu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.totalusernum() != 0) {
    _internal_set_totalusernum(from._internal_totalusernum());
  }
  if (from.totalpagenum() != 0) {
    _internal_set_totalpagenum(from._internal_totalpagenum());
  }
}

void SStatCollectionSiKuQuanShu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.SStatCollectionSiKuQuanShu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SStatCollectionSiKuQuanShu::CopyFrom(const SStatCollectionSiKuQuanShu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.SStatCollectionSiKuQuanShu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SStatCollectionSiKuQuanShu::IsInitialized() const {
  return true;
}

void SStatCollectionSiKuQuanShu::InternalSwap(SStatCollectionSiKuQuanShu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(totalusernum_, other->totalusernum_);
  swap(totalpagenum_, other->totalpagenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SStatCollectionSiKuQuanShu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGetUserSiKuQuanShuPageNum::InitAsDefaultInstance() {
}
class CGetUserSiKuQuanShuPageNum::_Internal {
 public:
};

CGetUserSiKuQuanShuPageNum::CGetUserSiKuQuanShuPageNum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.CGetUserSiKuQuanShuPageNum)
}
CGetUserSiKuQuanShuPageNum::CGetUserSiKuQuanShuPageNum(const CGetUserSiKuQuanShuPageNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.CGetUserSiKuQuanShuPageNum)
}

void CGetUserSiKuQuanShuPageNum::SharedCtor() {
}

CGetUserSiKuQuanShuPageNum::~CGetUserSiKuQuanShuPageNum() {
  // @@protoc_insertion_point(destructor:liuXiaTask.CGetUserSiKuQuanShuPageNum)
  SharedDtor();
}

void CGetUserSiKuQuanShuPageNum::SharedDtor() {
}

void CGetUserSiKuQuanShuPageNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetUserSiKuQuanShuPageNum& CGetUserSiKuQuanShuPageNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void CGetUserSiKuQuanShuPageNum::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.CGetUserSiKuQuanShuPageNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CGetUserSiKuQuanShuPageNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetUserSiKuQuanShuPageNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.CGetUserSiKuQuanShuPageNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.CGetUserSiKuQuanShuPageNum)
  return target;
}

size_t CGetUserSiKuQuanShuPageNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.CGetUserSiKuQuanShuPageNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetUserSiKuQuanShuPageNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.CGetUserSiKuQuanShuPageNum)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetUserSiKuQuanShuPageNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetUserSiKuQuanShuPageNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.CGetUserSiKuQuanShuPageNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.CGetUserSiKuQuanShuPageNum)
    MergeFrom(*source);
  }
}

void CGetUserSiKuQuanShuPageNum::MergeFrom(const CGetUserSiKuQuanShuPageNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.CGetUserSiKuQuanShuPageNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGetUserSiKuQuanShuPageNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.CGetUserSiKuQuanShuPageNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetUserSiKuQuanShuPageNum::CopyFrom(const CGetUserSiKuQuanShuPageNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.CGetUserSiKuQuanShuPageNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetUserSiKuQuanShuPageNum::IsInitialized() const {
  return true;
}

void CGetUserSiKuQuanShuPageNum::InternalSwap(CGetUserSiKuQuanShuPageNum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetUserSiKuQuanShuPageNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetUserSiKuQuanShuPageNum::InitAsDefaultInstance() {
}
class SGetUserSiKuQuanShuPageNum::_Internal {
 public:
};

SGetUserSiKuQuanShuPageNum::SGetUserSiKuQuanShuPageNum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.SGetUserSiKuQuanShuPageNum)
}
SGetUserSiKuQuanShuPageNum::SGetUserSiKuQuanShuPageNum(const SGetUserSiKuQuanShuPageNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.SGetUserSiKuQuanShuPageNum)
}

void SGetUserSiKuQuanShuPageNum::SharedCtor() {
  num_ = 0;
}

SGetUserSiKuQuanShuPageNum::~SGetUserSiKuQuanShuPageNum() {
  // @@protoc_insertion_point(destructor:liuXiaTask.SGetUserSiKuQuanShuPageNum)
  SharedDtor();
}

void SGetUserSiKuQuanShuPageNum::SharedDtor() {
}

void SGetUserSiKuQuanShuPageNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetUserSiKuQuanShuPageNum& SGetUserSiKuQuanShuPageNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetUserSiKuQuanShuPageNum_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void SGetUserSiKuQuanShuPageNum::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.SGetUserSiKuQuanShuPageNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_ = 0;
  _internal_metadata_.Clear();
}

const char* SGetUserSiKuQuanShuPageNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetUserSiKuQuanShuPageNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.SGetUserSiKuQuanShuPageNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.SGetUserSiKuQuanShuPageNum)
  return target;
}

size_t SGetUserSiKuQuanShuPageNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.SGetUserSiKuQuanShuPageNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetUserSiKuQuanShuPageNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.SGetUserSiKuQuanShuPageNum)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetUserSiKuQuanShuPageNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetUserSiKuQuanShuPageNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.SGetUserSiKuQuanShuPageNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.SGetUserSiKuQuanShuPageNum)
    MergeFrom(*source);
  }
}

void SGetUserSiKuQuanShuPageNum::MergeFrom(const SGetUserSiKuQuanShuPageNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.SGetUserSiKuQuanShuPageNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void SGetUserSiKuQuanShuPageNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.SGetUserSiKuQuanShuPageNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetUserSiKuQuanShuPageNum::CopyFrom(const SGetUserSiKuQuanShuPageNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.SGetUserSiKuQuanShuPageNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetUserSiKuQuanShuPageNum::IsInitialized() const {
  return true;
}

void SGetUserSiKuQuanShuPageNum::InternalSwap(SGetUserSiKuQuanShuPageNum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetUserSiKuQuanShuPageNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGetLiuxiaFreeGift::InitAsDefaultInstance() {
}
class CGetLiuxiaFreeGift::_Internal {
 public:
};

CGetLiuxiaFreeGift::CGetLiuxiaFreeGift()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.CGetLiuxiaFreeGift)
}
CGetLiuxiaFreeGift::CGetLiuxiaFreeGift(const CGetLiuxiaFreeGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.CGetLiuxiaFreeGift)
}

void CGetLiuxiaFreeGift::SharedCtor() {
}

CGetLiuxiaFreeGift::~CGetLiuxiaFreeGift() {
  // @@protoc_insertion_point(destructor:liuXiaTask.CGetLiuxiaFreeGift)
  SharedDtor();
}

void CGetLiuxiaFreeGift::SharedDtor() {
}

void CGetLiuxiaFreeGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetLiuxiaFreeGift& CGetLiuxiaFreeGift::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetLiuxiaFreeGift_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void CGetLiuxiaFreeGift::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.CGetLiuxiaFreeGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CGetLiuxiaFreeGift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetLiuxiaFreeGift::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.CGetLiuxiaFreeGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.CGetLiuxiaFreeGift)
  return target;
}

size_t CGetLiuxiaFreeGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.CGetLiuxiaFreeGift)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetLiuxiaFreeGift::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.CGetLiuxiaFreeGift)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetLiuxiaFreeGift* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetLiuxiaFreeGift>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.CGetLiuxiaFreeGift)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.CGetLiuxiaFreeGift)
    MergeFrom(*source);
  }
}

void CGetLiuxiaFreeGift::MergeFrom(const CGetLiuxiaFreeGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.CGetLiuxiaFreeGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGetLiuxiaFreeGift::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.CGetLiuxiaFreeGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetLiuxiaFreeGift::CopyFrom(const CGetLiuxiaFreeGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.CGetLiuxiaFreeGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetLiuxiaFreeGift::IsInitialized() const {
  return true;
}

void CGetLiuxiaFreeGift::InternalSwap(CGetLiuxiaFreeGift* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetLiuxiaFreeGift::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetLiuxiaFreeGift::InitAsDefaultInstance() {
}
class SGetLiuxiaFreeGift::_Internal {
 public:
};

SGetLiuxiaFreeGift::SGetLiuxiaFreeGift()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.SGetLiuxiaFreeGift)
}
SGetLiuxiaFreeGift::SGetLiuxiaFreeGift(const SGetLiuxiaFreeGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.SGetLiuxiaFreeGift)
}

void SGetLiuxiaFreeGift::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGetLiuxiaFreeGift_liuXiaTask_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SGetLiuxiaFreeGift::~SGetLiuxiaFreeGift() {
  // @@protoc_insertion_point(destructor:liuXiaTask.SGetLiuxiaFreeGift)
  SharedDtor();
}

void SGetLiuxiaFreeGift::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGetLiuxiaFreeGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetLiuxiaFreeGift& SGetLiuxiaFreeGift::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetLiuxiaFreeGift_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void SGetLiuxiaFreeGift::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.SGetLiuxiaFreeGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SGetLiuxiaFreeGift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "liuXiaTask.SGetLiuxiaFreeGift.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetLiuxiaFreeGift::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.SGetLiuxiaFreeGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "liuXiaTask.SGetLiuxiaFreeGift.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.SGetLiuxiaFreeGift)
  return target;
}

size_t SGetLiuxiaFreeGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.SGetLiuxiaFreeGift)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetLiuxiaFreeGift::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.SGetLiuxiaFreeGift)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetLiuxiaFreeGift* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetLiuxiaFreeGift>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.SGetLiuxiaFreeGift)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.SGetLiuxiaFreeGift)
    MergeFrom(*source);
  }
}

void SGetLiuxiaFreeGift::MergeFrom(const SGetLiuxiaFreeGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.SGetLiuxiaFreeGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SGetLiuxiaFreeGift::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.SGetLiuxiaFreeGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetLiuxiaFreeGift::CopyFrom(const SGetLiuxiaFreeGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.SGetLiuxiaFreeGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetLiuxiaFreeGift::IsInitialized() const {
  return true;
}

void SGetLiuxiaFreeGift::InternalSwap(SGetLiuxiaFreeGift* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetLiuxiaFreeGift::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGetLiuxiaSwitch::InitAsDefaultInstance() {
}
class CGetLiuxiaSwitch::_Internal {
 public:
};

CGetLiuxiaSwitch::CGetLiuxiaSwitch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.CGetLiuxiaSwitch)
}
CGetLiuxiaSwitch::CGetLiuxiaSwitch(const CGetLiuxiaSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.CGetLiuxiaSwitch)
}

void CGetLiuxiaSwitch::SharedCtor() {
}

CGetLiuxiaSwitch::~CGetLiuxiaSwitch() {
  // @@protoc_insertion_point(destructor:liuXiaTask.CGetLiuxiaSwitch)
  SharedDtor();
}

void CGetLiuxiaSwitch::SharedDtor() {
}

void CGetLiuxiaSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetLiuxiaSwitch& CGetLiuxiaSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetLiuxiaSwitch_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void CGetLiuxiaSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.CGetLiuxiaSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CGetLiuxiaSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetLiuxiaSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.CGetLiuxiaSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.CGetLiuxiaSwitch)
  return target;
}

size_t CGetLiuxiaSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.CGetLiuxiaSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetLiuxiaSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.CGetLiuxiaSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetLiuxiaSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetLiuxiaSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.CGetLiuxiaSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.CGetLiuxiaSwitch)
    MergeFrom(*source);
  }
}

void CGetLiuxiaSwitch::MergeFrom(const CGetLiuxiaSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.CGetLiuxiaSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGetLiuxiaSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.CGetLiuxiaSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetLiuxiaSwitch::CopyFrom(const CGetLiuxiaSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.CGetLiuxiaSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetLiuxiaSwitch::IsInitialized() const {
  return true;
}

void CGetLiuxiaSwitch::InternalSwap(CGetLiuxiaSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetLiuxiaSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetLiuxiaSwitch::InitAsDefaultInstance() {
}
class SGetLiuxiaSwitch::_Internal {
 public:
};

SGetLiuxiaSwitch::SGetLiuxiaSwitch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:liuXiaTask.SGetLiuxiaSwitch)
}
SGetLiuxiaSwitch::SGetLiuxiaSwitch(const SGetLiuxiaSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  daynight_ = from.daynight_;
  // @@protoc_insertion_point(copy_constructor:liuXiaTask.SGetLiuxiaSwitch)
}

void SGetLiuxiaSwitch::SharedCtor() {
  daynight_ = 0;
}

SGetLiuxiaSwitch::~SGetLiuxiaSwitch() {
  // @@protoc_insertion_point(destructor:liuXiaTask.SGetLiuxiaSwitch)
  SharedDtor();
}

void SGetLiuxiaSwitch::SharedDtor() {
}

void SGetLiuxiaSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetLiuxiaSwitch& SGetLiuxiaSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetLiuxiaSwitch_liuXiaTask_2eproto.base);
  return *internal_default_instance();
}


void SGetLiuxiaSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:liuXiaTask.SGetLiuxiaSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  daynight_ = 0;
  _internal_metadata_.Clear();
}

const char* SGetLiuxiaSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 daynight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          daynight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetLiuxiaSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:liuXiaTask.SGetLiuxiaSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 daynight = 1;
  if (this->daynight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_daynight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:liuXiaTask.SGetLiuxiaSwitch)
  return target;
}

size_t SGetLiuxiaSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:liuXiaTask.SGetLiuxiaSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 daynight = 1;
  if (this->daynight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_daynight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetLiuxiaSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:liuXiaTask.SGetLiuxiaSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetLiuxiaSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetLiuxiaSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:liuXiaTask.SGetLiuxiaSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:liuXiaTask.SGetLiuxiaSwitch)
    MergeFrom(*source);
  }
}

void SGetLiuxiaSwitch::MergeFrom(const SGetLiuxiaSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:liuXiaTask.SGetLiuxiaSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.daynight() != 0) {
    _internal_set_daynight(from._internal_daynight());
  }
}

void SGetLiuxiaSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:liuXiaTask.SGetLiuxiaSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetLiuxiaSwitch::CopyFrom(const SGetLiuxiaSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:liuXiaTask.SGetLiuxiaSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetLiuxiaSwitch::IsInitialized() const {
  return true;
}

void SGetLiuxiaSwitch::InternalSwap(SGetLiuxiaSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(daynight_, other->daynight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetLiuxiaSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace liuXiaTask
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::liuXiaTask::CGetLiuXiaTaskList* Arena::CreateMaybeMessage< ::liuXiaTask::CGetLiuXiaTaskList >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::CGetLiuXiaTaskList >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::SGetLiuXiaTaskList* Arena::CreateMaybeMessage< ::liuXiaTask::SGetLiuXiaTaskList >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::SGetLiuXiaTaskList >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::LiuXiaTaskInfo* Arena::CreateMaybeMessage< ::liuXiaTask::LiuXiaTaskInfo >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::LiuXiaTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::CLiuXiaCompleteTaskReporting* Arena::CreateMaybeMessage< ::liuXiaTask::CLiuXiaCompleteTaskReporting >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::CLiuXiaCompleteTaskReporting >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::SLiuXiaCompleteTaskReporting* Arena::CreateMaybeMessage< ::liuXiaTask::SLiuXiaCompleteTaskReporting >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::SLiuXiaCompleteTaskReporting >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::CLiuXiaClaimRewards* Arena::CreateMaybeMessage< ::liuXiaTask::CLiuXiaClaimRewards >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::CLiuXiaClaimRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::SLiuXiaClaimRewards* Arena::CreateMaybeMessage< ::liuXiaTask::SLiuXiaClaimRewards >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::SLiuXiaClaimRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::LiuXiaTaskRewardInfo* Arena::CreateMaybeMessage< ::liuXiaTask::LiuXiaTaskRewardInfo >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::LiuXiaTaskRewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::CCollectionSiKuQuanShu* Arena::CreateMaybeMessage< ::liuXiaTask::CCollectionSiKuQuanShu >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::CCollectionSiKuQuanShu >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::SCollectionSiKuQuanShu* Arena::CreateMaybeMessage< ::liuXiaTask::SCollectionSiKuQuanShu >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::SCollectionSiKuQuanShu >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::CStatCollectionSiKuQuanShu* Arena::CreateMaybeMessage< ::liuXiaTask::CStatCollectionSiKuQuanShu >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::CStatCollectionSiKuQuanShu >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::SStatCollectionSiKuQuanShu* Arena::CreateMaybeMessage< ::liuXiaTask::SStatCollectionSiKuQuanShu >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::SStatCollectionSiKuQuanShu >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::CGetUserSiKuQuanShuPageNum* Arena::CreateMaybeMessage< ::liuXiaTask::CGetUserSiKuQuanShuPageNum >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::CGetUserSiKuQuanShuPageNum >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::SGetUserSiKuQuanShuPageNum* Arena::CreateMaybeMessage< ::liuXiaTask::SGetUserSiKuQuanShuPageNum >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::SGetUserSiKuQuanShuPageNum >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::CGetLiuxiaFreeGift* Arena::CreateMaybeMessage< ::liuXiaTask::CGetLiuxiaFreeGift >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::CGetLiuxiaFreeGift >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::SGetLiuxiaFreeGift* Arena::CreateMaybeMessage< ::liuXiaTask::SGetLiuxiaFreeGift >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::SGetLiuxiaFreeGift >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::CGetLiuxiaSwitch* Arena::CreateMaybeMessage< ::liuXiaTask::CGetLiuxiaSwitch >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::CGetLiuxiaSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::liuXiaTask::SGetLiuxiaSwitch* Arena::CreateMaybeMessage< ::liuXiaTask::SGetLiuxiaSwitch >(Arena* arena) {
  return Arena::CreateInternal< ::liuXiaTask::SGetLiuxiaSwitch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
