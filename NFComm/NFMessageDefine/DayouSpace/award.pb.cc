// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: award.proto

#include "award.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace award {
class BAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BAward> _instance;
} _BAward_default_instance_;
}  // namespace award
static void InitDefaultsscc_info_BAward_award_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::award::_BAward_default_instance_;
    new (ptr) ::award::BAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::award::BAward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BAward_award_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BAward_award_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_award_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_award_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_award_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_award_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::award::BAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::award::BAward, awardid_),
  PROTOBUF_FIELD_OFFSET(::award::BAward, awardname_),
  PROTOBUF_FIELD_OFFSET(::award::BAward, awardurl_),
  PROTOBUF_FIELD_OFFSET(::award::BAward, awardtype_),
  PROTOBUF_FIELD_OFFSET(::award::BAward, awarddescribe_),
  PROTOBUF_FIELD_OFFSET(::award::BAward, goodsid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::award::BAward)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::award::_BAward_default_instance_),
};

const char descriptor_table_protodef_award_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013award.proto\022\005award\"y\n\006BAward\022\017\n\007awardI"
  "D\030\001 \001(\005\022\021\n\tawardName\030\002 \001(\t\022\020\n\010awardURL\030\003"
  " \001(\t\022\021\n\tawardType\030\004 \001(\005\022\025\n\rawardDescribe"
  "\030\005 \001(\t\022\017\n\007goodsId\030\006 \001(\005B!\n\030com.dayou.spa"
  "ce.protobufB\005Awardb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_award_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_award_2eproto_sccs[1] = {
  &scc_info_BAward_award_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_award_2eproto_once;
static bool descriptor_table_award_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_award_2eproto = {
  &descriptor_table_award_2eproto_initialized, descriptor_table_protodef_award_2eproto, "award.proto", 186,
  &descriptor_table_award_2eproto_once, descriptor_table_award_2eproto_sccs, descriptor_table_award_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_award_2eproto::offsets,
  file_level_metadata_award_2eproto, 1, file_level_enum_descriptors_award_2eproto, file_level_service_descriptors_award_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_award_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_award_2eproto), true);
namespace award {

// ===================================================================

void BAward::InitAsDefaultInstance() {
}
class BAward::_Internal {
 public:
};

BAward::BAward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:award.BAward)
}
BAward::BAward(const BAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  awardname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_awardname().empty()) {
    awardname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.awardname_);
  }
  awardurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_awardurl().empty()) {
    awardurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.awardurl_);
  }
  awarddescribe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_awarddescribe().empty()) {
    awarddescribe_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.awarddescribe_);
  }
  ::memcpy(&awardid_, &from.awardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&awardid_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:award.BAward)
}

void BAward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BAward_award_2eproto.base);
  awardname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awardurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awarddescribe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&awardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&awardid_)) + sizeof(goodsid_));
}

BAward::~BAward() {
  // @@protoc_insertion_point(destructor:award.BAward)
  SharedDtor();
}

void BAward::SharedDtor() {
  awardname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awardurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awarddescribe_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BAward& BAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BAward_award_2eproto.base);
  return *internal_default_instance();
}


void BAward::Clear() {
// @@protoc_insertion_point(message_clear_start:award.BAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  awardname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awardurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awarddescribe_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&awardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&awardid_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* BAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 awardID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          awardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string awardName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_awardname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "award.BAward.awardName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string awardURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_awardurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "award.BAward.awardURL"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 awardType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          awardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string awardDescribe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_awarddescribe();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "award.BAward.awardDescribe"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:award.BAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 awardID = 1;
  if (this->awardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_awardid(), target);
  }

  // string awardName = 2;
  if (this->awardname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_awardname().data(), static_cast<int>(this->_internal_awardname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "award.BAward.awardName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_awardname(), target);
  }

  // string awardURL = 3;
  if (this->awardurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_awardurl().data(), static_cast<int>(this->_internal_awardurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "award.BAward.awardURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_awardurl(), target);
  }

  // int32 awardType = 4;
  if (this->awardtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_awardtype(), target);
  }

  // string awardDescribe = 5;
  if (this->awarddescribe().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_awarddescribe().data(), static_cast<int>(this->_internal_awarddescribe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "award.BAward.awardDescribe");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_awarddescribe(), target);
  }

  // int32 goodsId = 6;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:award.BAward)
  return target;
}

size_t BAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:award.BAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string awardName = 2;
  if (this->awardname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_awardname());
  }

  // string awardURL = 3;
  if (this->awardurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_awardurl());
  }

  // string awardDescribe = 5;
  if (this->awarddescribe().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_awarddescribe());
  }

  // int32 awardID = 1;
  if (this->awardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_awardid());
  }

  // int32 awardType = 4;
  if (this->awardtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_awardtype());
  }

  // int32 goodsId = 6;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:award.BAward)
  GOOGLE_DCHECK_NE(&from, this);
  const BAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:award.BAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:award.BAward)
    MergeFrom(*source);
  }
}

void BAward::MergeFrom(const BAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:award.BAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.awardname().size() > 0) {

    awardname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.awardname_);
  }
  if (from.awardurl().size() > 0) {

    awardurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.awardurl_);
  }
  if (from.awarddescribe().size() > 0) {

    awarddescribe_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.awarddescribe_);
  }
  if (from.awardid() != 0) {
    _internal_set_awardid(from._internal_awardid());
  }
  if (from.awardtype() != 0) {
    _internal_set_awardtype(from._internal_awardtype());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void BAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:award.BAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BAward::CopyFrom(const BAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:award.BAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BAward::IsInitialized() const {
  return true;
}

void BAward::InternalSwap(BAward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  awardname_.Swap(&other->awardname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  awardurl_.Swap(&other->awardurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  awarddescribe_.Swap(&other->awarddescribe_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(awardid_, other->awardid_);
  swap(awardtype_, other->awardtype_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BAward::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace award
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::award::BAward* Arena::CreateMaybeMessage< ::award::BAward >(Arena* arena) {
  return Arena::CreateInternal< ::award::BAward >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
