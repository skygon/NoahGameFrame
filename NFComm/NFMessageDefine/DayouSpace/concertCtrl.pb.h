// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concertCtrl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_concertCtrl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_concertCtrl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_concertCtrl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_concertCtrl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_concertCtrl_2eproto;
namespace concert {
class CConcertFlyInit;
class CConcertFlyInitDefaultTypeInternal;
extern CConcertFlyInitDefaultTypeInternal _CConcertFlyInit_default_instance_;
class CCtrlHeartBeat;
class CCtrlHeartBeatDefaultTypeInternal;
extern CCtrlHeartBeatDefaultTypeInternal _CCtrlHeartBeat_default_instance_;
class CCtrlInfo;
class CCtrlInfoDefaultTypeInternal;
extern CCtrlInfoDefaultTypeInternal _CCtrlInfo_default_instance_;
class CCtrlToggle;
class CCtrlToggleDefaultTypeInternal;
extern CCtrlToggleDefaultTypeInternal _CCtrlToggle_default_instance_;
class CtrlFlyPlayer;
class CtrlFlyPlayerDefaultTypeInternal;
extern CtrlFlyPlayerDefaultTypeInternal _CtrlFlyPlayer_default_instance_;
class CtrlManual;
class CtrlManualDefaultTypeInternal;
extern CtrlManualDefaultTypeInternal _CtrlManual_default_instance_;
class SAreaJump;
class SAreaJumpDefaultTypeInternal;
extern SAreaJumpDefaultTypeInternal _SAreaJump_default_instance_;
class SBroadCtrlManual;
class SBroadCtrlManualDefaultTypeInternal;
extern SBroadCtrlManualDefaultTypeInternal _SBroadCtrlManual_default_instance_;
class SCtrlBroadcast;
class SCtrlBroadcastDefaultTypeInternal;
extern SCtrlBroadcastDefaultTypeInternal _SCtrlBroadcast_default_instance_;
class SCtrlEncoreBroadcast;
class SCtrlEncoreBroadcastDefaultTypeInternal;
extern SCtrlEncoreBroadcastDefaultTypeInternal _SCtrlEncoreBroadcast_default_instance_;
class SCtrlFlyBroadcast;
class SCtrlFlyBroadcastDefaultTypeInternal;
extern SCtrlFlyBroadcastDefaultTypeInternal _SCtrlFlyBroadcast_default_instance_;
class SCtrlHeartBeat;
class SCtrlHeartBeatDefaultTypeInternal;
extern SCtrlHeartBeatDefaultTypeInternal _SCtrlHeartBeat_default_instance_;
class SCtrlInfo;
class SCtrlInfoDefaultTypeInternal;
extern SCtrlInfoDefaultTypeInternal _SCtrlInfo_default_instance_;
class SCtrlLiftBroadcast;
class SCtrlLiftBroadcastDefaultTypeInternal;
extern SCtrlLiftBroadcastDefaultTypeInternal _SCtrlLiftBroadcast_default_instance_;
class SFlyTimelineBroadcast;
class SFlyTimelineBroadcastDefaultTypeInternal;
extern SFlyTimelineBroadcastDefaultTypeInternal _SFlyTimelineBroadcast_default_instance_;
}  // namespace concert
PROTOBUF_NAMESPACE_OPEN
template<> ::concert::CConcertFlyInit* Arena::CreateMaybeMessage<::concert::CConcertFlyInit>(Arena*);
template<> ::concert::CCtrlHeartBeat* Arena::CreateMaybeMessage<::concert::CCtrlHeartBeat>(Arena*);
template<> ::concert::CCtrlInfo* Arena::CreateMaybeMessage<::concert::CCtrlInfo>(Arena*);
template<> ::concert::CCtrlToggle* Arena::CreateMaybeMessage<::concert::CCtrlToggle>(Arena*);
template<> ::concert::CtrlFlyPlayer* Arena::CreateMaybeMessage<::concert::CtrlFlyPlayer>(Arena*);
template<> ::concert::CtrlManual* Arena::CreateMaybeMessage<::concert::CtrlManual>(Arena*);
template<> ::concert::SAreaJump* Arena::CreateMaybeMessage<::concert::SAreaJump>(Arena*);
template<> ::concert::SBroadCtrlManual* Arena::CreateMaybeMessage<::concert::SBroadCtrlManual>(Arena*);
template<> ::concert::SCtrlBroadcast* Arena::CreateMaybeMessage<::concert::SCtrlBroadcast>(Arena*);
template<> ::concert::SCtrlEncoreBroadcast* Arena::CreateMaybeMessage<::concert::SCtrlEncoreBroadcast>(Arena*);
template<> ::concert::SCtrlFlyBroadcast* Arena::CreateMaybeMessage<::concert::SCtrlFlyBroadcast>(Arena*);
template<> ::concert::SCtrlHeartBeat* Arena::CreateMaybeMessage<::concert::SCtrlHeartBeat>(Arena*);
template<> ::concert::SCtrlInfo* Arena::CreateMaybeMessage<::concert::SCtrlInfo>(Arena*);
template<> ::concert::SCtrlLiftBroadcast* Arena::CreateMaybeMessage<::concert::SCtrlLiftBroadcast>(Arena*);
template<> ::concert::SFlyTimelineBroadcast* Arena::CreateMaybeMessage<::concert::SFlyTimelineBroadcast>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace concert {

enum CtrlType : int {
  Default = 0,
  ChannelGame = 1,
  EnterConcert = 2,
  LeaveStage = 3,
  DisconnectConcert = 4,
  SongCut_1 = 10,
  OnStage = 11,
  Song_1 = 12,
  Cheers = 13,
  Interact_1 = 14,
  SongCut_2 = 20,
  Song_2 = 21,
  Interact_2 = 22,
  GiftFallScattered_2 = 23,
  SongCut_3 = 30,
  Song_3 = 31,
  Fish = 32,
  Lift = 33,
  Interact_3 = 34,
  SongCut_4 = 40,
  Song_4 = 41,
  GlowStick = 42,
  Interact_4 = 43,
  GiftFallScattered_4 = 44,
  Interact_4_2 = 45,
  StartRankCountdownTips = 46,
  FallGround = 47,
  Screen_4 = 48,
  SongCut_5 = 50,
  Song_5 = 51,
  Dance = 52,
  Interact_5 = 53,
  Encore = 54,
  Screen_5_1 = 55,
  Screen_5_2 = 56,
  Screen_5_3 = 57,
  SongCut_6 = 60,
  Song_6 = 61,
  Interact_6 = 62,
  AllPhoto = 63,
  TurnFish_1 = 100,
  TurnFish_2 = 101,
  TurnFish_3 = 102,
  TurnFish_4 = 103,
  Fly = 104,
  Jump = 105,
  Jump2 = 106,
  Jump3 = 107,
  Jump4 = 108,
  Bomb = 109,
  BubbleFly = 110,
  CtrlType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CtrlType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CtrlType_IsValid(int value);
constexpr CtrlType CtrlType_MIN = Default;
constexpr CtrlType CtrlType_MAX = BubbleFly;
constexpr int CtrlType_ARRAYSIZE = CtrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CtrlType_descriptor();
template<typename T>
inline const std::string& CtrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CtrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CtrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CtrlType_descriptor(), enum_t_value);
}
inline bool CtrlType_Parse(
    const std::string& name, CtrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CtrlType>(
    CtrlType_descriptor(), name, value);
}
// ===================================================================

class CCtrlToggle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.CCtrlToggle) */ {
 public:
  CCtrlToggle();
  virtual ~CCtrlToggle();

  CCtrlToggle(const CCtrlToggle& from);
  CCtrlToggle(CCtrlToggle&& from) noexcept
    : CCtrlToggle() {
    *this = ::std::move(from);
  }

  inline CCtrlToggle& operator=(const CCtrlToggle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCtrlToggle& operator=(CCtrlToggle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCtrlToggle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCtrlToggle* internal_default_instance() {
    return reinterpret_cast<const CCtrlToggle*>(
               &_CCtrlToggle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCtrlToggle& a, CCtrlToggle& b) {
    a.Swap(&b);
  }
  inline void Swap(CCtrlToggle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCtrlToggle* New() const final {
    return CreateMaybeMessage<CCtrlToggle>(nullptr);
  }

  CCtrlToggle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCtrlToggle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCtrlToggle& from);
  void MergeFrom(const CCtrlToggle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCtrlToggle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.CCtrlToggle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .concert.CtrlType Type = 1;
  void clear_type();
  ::concert::CtrlType type() const;
  void set_type(::concert::CtrlType value);
  private:
  ::concert::CtrlType _internal_type() const;
  void _internal_set_type(::concert::CtrlType value);
  public:

  // int32 Status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.CCtrlToggle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class SCtrlBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SCtrlBroadcast) */ {
 public:
  SCtrlBroadcast();
  virtual ~SCtrlBroadcast();

  SCtrlBroadcast(const SCtrlBroadcast& from);
  SCtrlBroadcast(SCtrlBroadcast&& from) noexcept
    : SCtrlBroadcast() {
    *this = ::std::move(from);
  }

  inline SCtrlBroadcast& operator=(const SCtrlBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCtrlBroadcast& operator=(SCtrlBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCtrlBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCtrlBroadcast* internal_default_instance() {
    return reinterpret_cast<const SCtrlBroadcast*>(
               &_SCtrlBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCtrlBroadcast& a, SCtrlBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(SCtrlBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCtrlBroadcast* New() const final {
    return CreateMaybeMessage<SCtrlBroadcast>(nullptr);
  }

  SCtrlBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCtrlBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCtrlBroadcast& from);
  void MergeFrom(const SCtrlBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCtrlBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SCtrlBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtThirdFieldNumber = 5,
    kTypeFieldNumber = 1,
    kStatusFieldNumber = 2,
    kExtFirstFieldNumber = 3,
    kExtSecondFieldNumber = 4,
  };
  // string ExtThird = 5;
  void clear_extthird();
  const std::string& extthird() const;
  void set_extthird(const std::string& value);
  void set_extthird(std::string&& value);
  void set_extthird(const char* value);
  void set_extthird(const char* value, size_t size);
  std::string* mutable_extthird();
  std::string* release_extthird();
  void set_allocated_extthird(std::string* extthird);
  private:
  const std::string& _internal_extthird() const;
  void _internal_set_extthird(const std::string& value);
  std::string* _internal_mutable_extthird();
  public:

  // .concert.CtrlType Type = 1;
  void clear_type();
  ::concert::CtrlType type() const;
  void set_type(::concert::CtrlType value);
  private:
  ::concert::CtrlType _internal_type() const;
  void _internal_set_type(::concert::CtrlType value);
  public:

  // int32 Status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ExtFirst = 3;
  void clear_extfirst();
  ::PROTOBUF_NAMESPACE_ID::int32 extfirst() const;
  void set_extfirst(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extfirst() const;
  void _internal_set_extfirst(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ExtSecond = 4;
  void clear_extsecond();
  ::PROTOBUF_NAMESPACE_ID::int32 extsecond() const;
  void set_extsecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extsecond() const;
  void _internal_set_extsecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.SCtrlBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extthird_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 extfirst_;
  ::PROTOBUF_NAMESPACE_ID::int32 extsecond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class CtrlFlyPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.CtrlFlyPlayer) */ {
 public:
  CtrlFlyPlayer();
  virtual ~CtrlFlyPlayer();

  CtrlFlyPlayer(const CtrlFlyPlayer& from);
  CtrlFlyPlayer(CtrlFlyPlayer&& from) noexcept
    : CtrlFlyPlayer() {
    *this = ::std::move(from);
  }

  inline CtrlFlyPlayer& operator=(const CtrlFlyPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtrlFlyPlayer& operator=(CtrlFlyPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtrlFlyPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtrlFlyPlayer* internal_default_instance() {
    return reinterpret_cast<const CtrlFlyPlayer*>(
               &_CtrlFlyPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CtrlFlyPlayer& a, CtrlFlyPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CtrlFlyPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CtrlFlyPlayer* New() const final {
    return CreateMaybeMessage<CtrlFlyPlayer>(nullptr);
  }

  CtrlFlyPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtrlFlyPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtrlFlyPlayer& from);
  void MergeFrom(const CtrlFlyPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtrlFlyPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.CtrlFlyPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 3,
    kUidFieldNumber = 1,
    kMeshFieldNumber = 2,
  };
  // string Nick = 3;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // int32 Uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Mesh = 2;
  void clear_mesh();
  ::PROTOBUF_NAMESPACE_ID::int32 mesh() const;
  void set_mesh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mesh() const;
  void _internal_set_mesh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.CtrlFlyPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class SAreaJump :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SAreaJump) */ {
 public:
  SAreaJump();
  virtual ~SAreaJump();

  SAreaJump(const SAreaJump& from);
  SAreaJump(SAreaJump&& from) noexcept
    : SAreaJump() {
    *this = ::std::move(from);
  }

  inline SAreaJump& operator=(const SAreaJump& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAreaJump& operator=(SAreaJump&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAreaJump& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAreaJump* internal_default_instance() {
    return reinterpret_cast<const SAreaJump*>(
               &_SAreaJump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SAreaJump& a, SAreaJump& b) {
    a.Swap(&b);
  }
  inline void Swap(SAreaJump* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAreaJump* New() const final {
    return CreateMaybeMessage<SAreaJump>(nullptr);
  }

  SAreaJump* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAreaJump>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAreaJump& from);
  void MergeFrom(const SAreaJump& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAreaJump* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SAreaJump";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // repeated int32 Uid = 1;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uid() const;
  void _internal_add_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uid(int index) const;
  void set_uid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uid();

  // @@protoc_insertion_point(class_scope:concert.SAreaJump)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uid_;
  mutable std::atomic<int> _uid_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class SCtrlFlyBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SCtrlFlyBroadcast) */ {
 public:
  SCtrlFlyBroadcast();
  virtual ~SCtrlFlyBroadcast();

  SCtrlFlyBroadcast(const SCtrlFlyBroadcast& from);
  SCtrlFlyBroadcast(SCtrlFlyBroadcast&& from) noexcept
    : SCtrlFlyBroadcast() {
    *this = ::std::move(from);
  }

  inline SCtrlFlyBroadcast& operator=(const SCtrlFlyBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCtrlFlyBroadcast& operator=(SCtrlFlyBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCtrlFlyBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCtrlFlyBroadcast* internal_default_instance() {
    return reinterpret_cast<const SCtrlFlyBroadcast*>(
               &_SCtrlFlyBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SCtrlFlyBroadcast& a, SCtrlFlyBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(SCtrlFlyBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCtrlFlyBroadcast* New() const final {
    return CreateMaybeMessage<SCtrlFlyBroadcast>(nullptr);
  }

  SCtrlFlyBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCtrlFlyBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCtrlFlyBroadcast& from);
  void MergeFrom(const SCtrlFlyBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCtrlFlyBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SCtrlFlyBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 4,
    kStatusFieldNumber = 1,
    kTimelineIdFieldNumber = 2,
    kEffectIdFieldNumber = 3,
  };
  // repeated .concert.CtrlFlyPlayer Player = 4;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::concert::CtrlFlyPlayer* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::CtrlFlyPlayer >*
      mutable_player();
  private:
  const ::concert::CtrlFlyPlayer& _internal_player(int index) const;
  ::concert::CtrlFlyPlayer* _internal_add_player();
  public:
  const ::concert::CtrlFlyPlayer& player(int index) const;
  ::concert::CtrlFlyPlayer* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::CtrlFlyPlayer >&
      player() const;

  // int32 Status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TimelineId = 2;
  void clear_timelineid();
  ::PROTOBUF_NAMESPACE_ID::int32 timelineid() const;
  void set_timelineid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timelineid() const;
  void _internal_set_timelineid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 EffectId = 3;
  void clear_effectid();
  ::PROTOBUF_NAMESPACE_ID::int32 effectid() const;
  void set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effectid() const;
  void _internal_set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.SCtrlFlyBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::CtrlFlyPlayer > player_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 timelineid_;
  ::PROTOBUF_NAMESPACE_ID::int32 effectid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class SFlyTimelineBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SFlyTimelineBroadcast) */ {
 public:
  SFlyTimelineBroadcast();
  virtual ~SFlyTimelineBroadcast();

  SFlyTimelineBroadcast(const SFlyTimelineBroadcast& from);
  SFlyTimelineBroadcast(SFlyTimelineBroadcast&& from) noexcept
    : SFlyTimelineBroadcast() {
    *this = ::std::move(from);
  }

  inline SFlyTimelineBroadcast& operator=(const SFlyTimelineBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFlyTimelineBroadcast& operator=(SFlyTimelineBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SFlyTimelineBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFlyTimelineBroadcast* internal_default_instance() {
    return reinterpret_cast<const SFlyTimelineBroadcast*>(
               &_SFlyTimelineBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SFlyTimelineBroadcast& a, SFlyTimelineBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(SFlyTimelineBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFlyTimelineBroadcast* New() const final {
    return CreateMaybeMessage<SFlyTimelineBroadcast>(nullptr);
  }

  SFlyTimelineBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFlyTimelineBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SFlyTimelineBroadcast& from);
  void MergeFrom(const SFlyTimelineBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFlyTimelineBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SFlyTimelineBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineFieldNumber = 1,
  };
  // int32 Timeline = 1;
  void clear_timeline();
  ::PROTOBUF_NAMESPACE_ID::int32 timeline() const;
  void set_timeline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeline() const;
  void _internal_set_timeline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.SFlyTimelineBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class CConcertFlyInit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.CConcertFlyInit) */ {
 public:
  CConcertFlyInit();
  virtual ~CConcertFlyInit();

  CConcertFlyInit(const CConcertFlyInit& from);
  CConcertFlyInit(CConcertFlyInit&& from) noexcept
    : CConcertFlyInit() {
    *this = ::std::move(from);
  }

  inline CConcertFlyInit& operator=(const CConcertFlyInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CConcertFlyInit& operator=(CConcertFlyInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CConcertFlyInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CConcertFlyInit* internal_default_instance() {
    return reinterpret_cast<const CConcertFlyInit*>(
               &_CConcertFlyInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CConcertFlyInit& a, CConcertFlyInit& b) {
    a.Swap(&b);
  }
  inline void Swap(CConcertFlyInit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CConcertFlyInit* New() const final {
    return CreateMaybeMessage<CConcertFlyInit>(nullptr);
  }

  CConcertFlyInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CConcertFlyInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CConcertFlyInit& from);
  void MergeFrom(const CConcertFlyInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CConcertFlyInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.CConcertFlyInit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:concert.CConcertFlyInit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class SCtrlLiftBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SCtrlLiftBroadcast) */ {
 public:
  SCtrlLiftBroadcast();
  virtual ~SCtrlLiftBroadcast();

  SCtrlLiftBroadcast(const SCtrlLiftBroadcast& from);
  SCtrlLiftBroadcast(SCtrlLiftBroadcast&& from) noexcept
    : SCtrlLiftBroadcast() {
    *this = ::std::move(from);
  }

  inline SCtrlLiftBroadcast& operator=(const SCtrlLiftBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCtrlLiftBroadcast& operator=(SCtrlLiftBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCtrlLiftBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCtrlLiftBroadcast* internal_default_instance() {
    return reinterpret_cast<const SCtrlLiftBroadcast*>(
               &_SCtrlLiftBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SCtrlLiftBroadcast& a, SCtrlLiftBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(SCtrlLiftBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCtrlLiftBroadcast* New() const final {
    return CreateMaybeMessage<SCtrlLiftBroadcast>(nullptr);
  }

  SCtrlLiftBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCtrlLiftBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCtrlLiftBroadcast& from);
  void MergeFrom(const SCtrlLiftBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCtrlLiftBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SCtrlLiftBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:concert.SCtrlLiftBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class SCtrlEncoreBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SCtrlEncoreBroadcast) */ {
 public:
  SCtrlEncoreBroadcast();
  virtual ~SCtrlEncoreBroadcast();

  SCtrlEncoreBroadcast(const SCtrlEncoreBroadcast& from);
  SCtrlEncoreBroadcast(SCtrlEncoreBroadcast&& from) noexcept
    : SCtrlEncoreBroadcast() {
    *this = ::std::move(from);
  }

  inline SCtrlEncoreBroadcast& operator=(const SCtrlEncoreBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCtrlEncoreBroadcast& operator=(SCtrlEncoreBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCtrlEncoreBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCtrlEncoreBroadcast* internal_default_instance() {
    return reinterpret_cast<const SCtrlEncoreBroadcast*>(
               &_SCtrlEncoreBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SCtrlEncoreBroadcast& a, SCtrlEncoreBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(SCtrlEncoreBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCtrlEncoreBroadcast* New() const final {
    return CreateMaybeMessage<SCtrlEncoreBroadcast>(nullptr);
  }

  SCtrlEncoreBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCtrlEncoreBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCtrlEncoreBroadcast& from);
  void MergeFrom(const SCtrlEncoreBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCtrlEncoreBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SCtrlEncoreBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:concert.SCtrlEncoreBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class CCtrlInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.CCtrlInfo) */ {
 public:
  CCtrlInfo();
  virtual ~CCtrlInfo();

  CCtrlInfo(const CCtrlInfo& from);
  CCtrlInfo(CCtrlInfo&& from) noexcept
    : CCtrlInfo() {
    *this = ::std::move(from);
  }

  inline CCtrlInfo& operator=(const CCtrlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCtrlInfo& operator=(CCtrlInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCtrlInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCtrlInfo* internal_default_instance() {
    return reinterpret_cast<const CCtrlInfo*>(
               &_CCtrlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CCtrlInfo& a, CCtrlInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CCtrlInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCtrlInfo* New() const final {
    return CreateMaybeMessage<CCtrlInfo>(nullptr);
  }

  CCtrlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCtrlInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCtrlInfo& from);
  void MergeFrom(const CCtrlInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCtrlInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.CCtrlInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:concert.CCtrlInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class SCtrlInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SCtrlInfo) */ {
 public:
  SCtrlInfo();
  virtual ~SCtrlInfo();

  SCtrlInfo(const SCtrlInfo& from);
  SCtrlInfo(SCtrlInfo&& from) noexcept
    : SCtrlInfo() {
    *this = ::std::move(from);
  }

  inline SCtrlInfo& operator=(const SCtrlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCtrlInfo& operator=(SCtrlInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCtrlInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCtrlInfo* internal_default_instance() {
    return reinterpret_cast<const SCtrlInfo*>(
               &_SCtrlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SCtrlInfo& a, SCtrlInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCtrlInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCtrlInfo* New() const final {
    return CreateMaybeMessage<SCtrlInfo>(nullptr);
  }

  SCtrlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCtrlInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCtrlInfo& from);
  void MergeFrom(const SCtrlInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCtrlInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SCtrlInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
    kKeepTimeFieldNumber = 2,
  };
  // .concert.CtrlType Stage = 1;
  void clear_stage();
  ::concert::CtrlType stage() const;
  void set_stage(::concert::CtrlType value);
  private:
  ::concert::CtrlType _internal_stage() const;
  void _internal_set_stage(::concert::CtrlType value);
  public:

  // int32 KeepTime = 2;
  void clear_keeptime();
  ::PROTOBUF_NAMESPACE_ID::int32 keeptime() const;
  void set_keeptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keeptime() const;
  void _internal_set_keeptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.SCtrlInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 keeptime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class CCtrlHeartBeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.CCtrlHeartBeat) */ {
 public:
  CCtrlHeartBeat();
  virtual ~CCtrlHeartBeat();

  CCtrlHeartBeat(const CCtrlHeartBeat& from);
  CCtrlHeartBeat(CCtrlHeartBeat&& from) noexcept
    : CCtrlHeartBeat() {
    *this = ::std::move(from);
  }

  inline CCtrlHeartBeat& operator=(const CCtrlHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCtrlHeartBeat& operator=(CCtrlHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCtrlHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCtrlHeartBeat* internal_default_instance() {
    return reinterpret_cast<const CCtrlHeartBeat*>(
               &_CCtrlHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CCtrlHeartBeat& a, CCtrlHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(CCtrlHeartBeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCtrlHeartBeat* New() const final {
    return CreateMaybeMessage<CCtrlHeartBeat>(nullptr);
  }

  CCtrlHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCtrlHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCtrlHeartBeat& from);
  void MergeFrom(const CCtrlHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCtrlHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.CCtrlHeartBeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:concert.CCtrlHeartBeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class SCtrlHeartBeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SCtrlHeartBeat) */ {
 public:
  SCtrlHeartBeat();
  virtual ~SCtrlHeartBeat();

  SCtrlHeartBeat(const SCtrlHeartBeat& from);
  SCtrlHeartBeat(SCtrlHeartBeat&& from) noexcept
    : SCtrlHeartBeat() {
    *this = ::std::move(from);
  }

  inline SCtrlHeartBeat& operator=(const SCtrlHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCtrlHeartBeat& operator=(SCtrlHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCtrlHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCtrlHeartBeat* internal_default_instance() {
    return reinterpret_cast<const SCtrlHeartBeat*>(
               &_SCtrlHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SCtrlHeartBeat& a, SCtrlHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(SCtrlHeartBeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCtrlHeartBeat* New() const final {
    return CreateMaybeMessage<SCtrlHeartBeat>(nullptr);
  }

  SCtrlHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCtrlHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCtrlHeartBeat& from);
  void MergeFrom(const SCtrlHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCtrlHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SCtrlHeartBeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
    kKeepTimeFieldNumber = 2,
  };
  // .concert.CtrlType Stage = 1;
  void clear_stage();
  ::concert::CtrlType stage() const;
  void set_stage(::concert::CtrlType value);
  private:
  ::concert::CtrlType _internal_stage() const;
  void _internal_set_stage(::concert::CtrlType value);
  public:

  // int32 KeepTime = 2;
  void clear_keeptime();
  ::PROTOBUF_NAMESPACE_ID::int32 keeptime() const;
  void set_keeptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keeptime() const;
  void _internal_set_keeptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.SCtrlHeartBeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 keeptime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class CtrlManual :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.CtrlManual) */ {
 public:
  CtrlManual();
  virtual ~CtrlManual();

  CtrlManual(const CtrlManual& from);
  CtrlManual(CtrlManual&& from) noexcept
    : CtrlManual() {
    *this = ::std::move(from);
  }

  inline CtrlManual& operator=(const CtrlManual& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtrlManual& operator=(CtrlManual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtrlManual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtrlManual* internal_default_instance() {
    return reinterpret_cast<const CtrlManual*>(
               &_CtrlManual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CtrlManual& a, CtrlManual& b) {
    a.Swap(&b);
  }
  inline void Swap(CtrlManual* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CtrlManual* New() const final {
    return CreateMaybeMessage<CtrlManual>(nullptr);
  }

  CtrlManual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtrlManual>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtrlManual& from);
  void MergeFrom(const CtrlManual& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtrlManual* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.CtrlManual";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
  };
  // .concert.CtrlType Stage = 1;
  void clear_stage();
  ::concert::CtrlType stage() const;
  void set_stage(::concert::CtrlType value);
  private:
  ::concert::CtrlType _internal_stage() const;
  void _internal_set_stage(::concert::CtrlType value);
  public:

  // @@protoc_insertion_point(class_scope:concert.CtrlManual)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// -------------------------------------------------------------------

class SBroadCtrlManual :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SBroadCtrlManual) */ {
 public:
  SBroadCtrlManual();
  virtual ~SBroadCtrlManual();

  SBroadCtrlManual(const SBroadCtrlManual& from);
  SBroadCtrlManual(SBroadCtrlManual&& from) noexcept
    : SBroadCtrlManual() {
    *this = ::std::move(from);
  }

  inline SBroadCtrlManual& operator=(const SBroadCtrlManual& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBroadCtrlManual& operator=(SBroadCtrlManual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBroadCtrlManual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBroadCtrlManual* internal_default_instance() {
    return reinterpret_cast<const SBroadCtrlManual*>(
               &_SBroadCtrlManual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SBroadCtrlManual& a, SBroadCtrlManual& b) {
    a.Swap(&b);
  }
  inline void Swap(SBroadCtrlManual* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBroadCtrlManual* New() const final {
    return CreateMaybeMessage<SBroadCtrlManual>(nullptr);
  }

  SBroadCtrlManual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBroadCtrlManual>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBroadCtrlManual& from);
  void MergeFrom(const SBroadCtrlManual& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBroadCtrlManual* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SBroadCtrlManual";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertCtrl_2eproto);
    return ::descriptor_table_concertCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStampFieldNumber = 2,
    kStageFieldNumber = 1,
  };
  // int64 Stamp = 2;
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .concert.CtrlType Stage = 1;
  void clear_stage();
  ::concert::CtrlType stage() const;
  void set_stage(::concert::CtrlType value);
  private:
  ::concert::CtrlType _internal_stage() const;
  void _internal_set_stage(::concert::CtrlType value);
  public:

  // @@protoc_insertion_point(class_scope:concert.SBroadCtrlManual)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 stamp_;
  int stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertCtrl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCtrlToggle

// .concert.CtrlType Type = 1;
inline void CCtrlToggle::clear_type() {
  type_ = 0;
}
inline ::concert::CtrlType CCtrlToggle::_internal_type() const {
  return static_cast< ::concert::CtrlType >(type_);
}
inline ::concert::CtrlType CCtrlToggle::type() const {
  // @@protoc_insertion_point(field_get:concert.CCtrlToggle.Type)
  return _internal_type();
}
inline void CCtrlToggle::_internal_set_type(::concert::CtrlType value) {
  
  type_ = value;
}
inline void CCtrlToggle::set_type(::concert::CtrlType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:concert.CCtrlToggle.Type)
}

// int32 Status = 2;
inline void CCtrlToggle::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCtrlToggle::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCtrlToggle::status() const {
  // @@protoc_insertion_point(field_get:concert.CCtrlToggle.Status)
  return _internal_status();
}
inline void CCtrlToggle::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void CCtrlToggle::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:concert.CCtrlToggle.Status)
}

// -------------------------------------------------------------------

// SCtrlBroadcast

// .concert.CtrlType Type = 1;
inline void SCtrlBroadcast::clear_type() {
  type_ = 0;
}
inline ::concert::CtrlType SCtrlBroadcast::_internal_type() const {
  return static_cast< ::concert::CtrlType >(type_);
}
inline ::concert::CtrlType SCtrlBroadcast::type() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlBroadcast.Type)
  return _internal_type();
}
inline void SCtrlBroadcast::_internal_set_type(::concert::CtrlType value) {
  
  type_ = value;
}
inline void SCtrlBroadcast::set_type(::concert::CtrlType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlBroadcast.Type)
}

// int32 Status = 2;
inline void SCtrlBroadcast::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlBroadcast::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlBroadcast::status() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlBroadcast.Status)
  return _internal_status();
}
inline void SCtrlBroadcast::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCtrlBroadcast::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlBroadcast.Status)
}

// int32 ExtFirst = 3;
inline void SCtrlBroadcast::clear_extfirst() {
  extfirst_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlBroadcast::_internal_extfirst() const {
  return extfirst_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlBroadcast::extfirst() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlBroadcast.ExtFirst)
  return _internal_extfirst();
}
inline void SCtrlBroadcast::_internal_set_extfirst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extfirst_ = value;
}
inline void SCtrlBroadcast::set_extfirst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extfirst(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlBroadcast.ExtFirst)
}

// int32 ExtSecond = 4;
inline void SCtrlBroadcast::clear_extsecond() {
  extsecond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlBroadcast::_internal_extsecond() const {
  return extsecond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlBroadcast::extsecond() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlBroadcast.ExtSecond)
  return _internal_extsecond();
}
inline void SCtrlBroadcast::_internal_set_extsecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extsecond_ = value;
}
inline void SCtrlBroadcast::set_extsecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extsecond(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlBroadcast.ExtSecond)
}

// string ExtThird = 5;
inline void SCtrlBroadcast::clear_extthird() {
  extthird_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCtrlBroadcast::extthird() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlBroadcast.ExtThird)
  return _internal_extthird();
}
inline void SCtrlBroadcast::set_extthird(const std::string& value) {
  _internal_set_extthird(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlBroadcast.ExtThird)
}
inline std::string* SCtrlBroadcast::mutable_extthird() {
  // @@protoc_insertion_point(field_mutable:concert.SCtrlBroadcast.ExtThird)
  return _internal_mutable_extthird();
}
inline const std::string& SCtrlBroadcast::_internal_extthird() const {
  return extthird_.GetNoArena();
}
inline void SCtrlBroadcast::_internal_set_extthird(const std::string& value) {
  
  extthird_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCtrlBroadcast::set_extthird(std::string&& value) {
  
  extthird_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:concert.SCtrlBroadcast.ExtThird)
}
inline void SCtrlBroadcast::set_extthird(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extthird_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:concert.SCtrlBroadcast.ExtThird)
}
inline void SCtrlBroadcast::set_extthird(const char* value, size_t size) {
  
  extthird_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:concert.SCtrlBroadcast.ExtThird)
}
inline std::string* SCtrlBroadcast::_internal_mutable_extthird() {
  
  return extthird_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCtrlBroadcast::release_extthird() {
  // @@protoc_insertion_point(field_release:concert.SCtrlBroadcast.ExtThird)
  
  return extthird_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCtrlBroadcast::set_allocated_extthird(std::string* extthird) {
  if (extthird != nullptr) {
    
  } else {
    
  }
  extthird_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extthird);
  // @@protoc_insertion_point(field_set_allocated:concert.SCtrlBroadcast.ExtThird)
}

// -------------------------------------------------------------------

// CtrlFlyPlayer

// int32 Uid = 1;
inline void CtrlFlyPlayer::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtrlFlyPlayer::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtrlFlyPlayer::uid() const {
  // @@protoc_insertion_point(field_get:concert.CtrlFlyPlayer.Uid)
  return _internal_uid();
}
inline void CtrlFlyPlayer::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CtrlFlyPlayer::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:concert.CtrlFlyPlayer.Uid)
}

// int32 Mesh = 2;
inline void CtrlFlyPlayer::clear_mesh() {
  mesh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtrlFlyPlayer::_internal_mesh() const {
  return mesh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CtrlFlyPlayer::mesh() const {
  // @@protoc_insertion_point(field_get:concert.CtrlFlyPlayer.Mesh)
  return _internal_mesh();
}
inline void CtrlFlyPlayer::_internal_set_mesh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mesh_ = value;
}
inline void CtrlFlyPlayer::set_mesh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mesh(value);
  // @@protoc_insertion_point(field_set:concert.CtrlFlyPlayer.Mesh)
}

// string Nick = 3;
inline void CtrlFlyPlayer::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CtrlFlyPlayer::nick() const {
  // @@protoc_insertion_point(field_get:concert.CtrlFlyPlayer.Nick)
  return _internal_nick();
}
inline void CtrlFlyPlayer::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:concert.CtrlFlyPlayer.Nick)
}
inline std::string* CtrlFlyPlayer::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:concert.CtrlFlyPlayer.Nick)
  return _internal_mutable_nick();
}
inline const std::string& CtrlFlyPlayer::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void CtrlFlyPlayer::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CtrlFlyPlayer::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:concert.CtrlFlyPlayer.Nick)
}
inline void CtrlFlyPlayer::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:concert.CtrlFlyPlayer.Nick)
}
inline void CtrlFlyPlayer::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:concert.CtrlFlyPlayer.Nick)
}
inline std::string* CtrlFlyPlayer::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CtrlFlyPlayer::release_nick() {
  // @@protoc_insertion_point(field_release:concert.CtrlFlyPlayer.Nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFlyPlayer::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:concert.CtrlFlyPlayer.Nick)
}

// -------------------------------------------------------------------

// SAreaJump

// repeated int32 Uid = 1;
inline int SAreaJump::_internal_uid_size() const {
  return uid_.size();
}
inline int SAreaJump::uid_size() const {
  return _internal_uid_size();
}
inline void SAreaJump::clear_uid() {
  uid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAreaJump::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAreaJump::uid(int index) const {
  // @@protoc_insertion_point(field_get:concert.SAreaJump.Uid)
  return _internal_uid(index);
}
inline void SAreaJump::set_uid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:concert.SAreaJump.Uid)
}
inline void SAreaJump::_internal_add_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uid_.Add(value);
}
inline void SAreaJump::add_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uid(value);
  // @@protoc_insertion_point(field_add:concert.SAreaJump.Uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SAreaJump::_internal_uid() const {
  return uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SAreaJump::uid() const {
  // @@protoc_insertion_point(field_list:concert.SAreaJump.Uid)
  return _internal_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SAreaJump::_internal_mutable_uid() {
  return &uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SAreaJump::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:concert.SAreaJump.Uid)
  return _internal_mutable_uid();
}

// -------------------------------------------------------------------

// SCtrlFlyBroadcast

// int32 Status = 1;
inline void SCtrlFlyBroadcast::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlFlyBroadcast::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlFlyBroadcast::status() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlFlyBroadcast.Status)
  return _internal_status();
}
inline void SCtrlFlyBroadcast::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCtrlFlyBroadcast::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlFlyBroadcast.Status)
}

// int32 TimelineId = 2;
inline void SCtrlFlyBroadcast::clear_timelineid() {
  timelineid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlFlyBroadcast::_internal_timelineid() const {
  return timelineid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlFlyBroadcast::timelineid() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlFlyBroadcast.TimelineId)
  return _internal_timelineid();
}
inline void SCtrlFlyBroadcast::_internal_set_timelineid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timelineid_ = value;
}
inline void SCtrlFlyBroadcast::set_timelineid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timelineid(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlFlyBroadcast.TimelineId)
}

// int32 EffectId = 3;
inline void SCtrlFlyBroadcast::clear_effectid() {
  effectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlFlyBroadcast::_internal_effectid() const {
  return effectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlFlyBroadcast::effectid() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlFlyBroadcast.EffectId)
  return _internal_effectid();
}
inline void SCtrlFlyBroadcast::_internal_set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effectid_ = value;
}
inline void SCtrlFlyBroadcast::set_effectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effectid(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlFlyBroadcast.EffectId)
}

// repeated .concert.CtrlFlyPlayer Player = 4;
inline int SCtrlFlyBroadcast::_internal_player_size() const {
  return player_.size();
}
inline int SCtrlFlyBroadcast::player_size() const {
  return _internal_player_size();
}
inline void SCtrlFlyBroadcast::clear_player() {
  player_.Clear();
}
inline ::concert::CtrlFlyPlayer* SCtrlFlyBroadcast::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:concert.SCtrlFlyBroadcast.Player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::CtrlFlyPlayer >*
SCtrlFlyBroadcast::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:concert.SCtrlFlyBroadcast.Player)
  return &player_;
}
inline const ::concert::CtrlFlyPlayer& SCtrlFlyBroadcast::_internal_player(int index) const {
  return player_.Get(index);
}
inline const ::concert::CtrlFlyPlayer& SCtrlFlyBroadcast::player(int index) const {
  // @@protoc_insertion_point(field_get:concert.SCtrlFlyBroadcast.Player)
  return _internal_player(index);
}
inline ::concert::CtrlFlyPlayer* SCtrlFlyBroadcast::_internal_add_player() {
  return player_.Add();
}
inline ::concert::CtrlFlyPlayer* SCtrlFlyBroadcast::add_player() {
  // @@protoc_insertion_point(field_add:concert.SCtrlFlyBroadcast.Player)
  return _internal_add_player();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::concert::CtrlFlyPlayer >&
SCtrlFlyBroadcast::player() const {
  // @@protoc_insertion_point(field_list:concert.SCtrlFlyBroadcast.Player)
  return player_;
}

// -------------------------------------------------------------------

// SFlyTimelineBroadcast

// int32 Timeline = 1;
inline void SFlyTimelineBroadcast::clear_timeline() {
  timeline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFlyTimelineBroadcast::_internal_timeline() const {
  return timeline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFlyTimelineBroadcast::timeline() const {
  // @@protoc_insertion_point(field_get:concert.SFlyTimelineBroadcast.Timeline)
  return _internal_timeline();
}
inline void SFlyTimelineBroadcast::_internal_set_timeline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeline_ = value;
}
inline void SFlyTimelineBroadcast::set_timeline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeline(value);
  // @@protoc_insertion_point(field_set:concert.SFlyTimelineBroadcast.Timeline)
}

// -------------------------------------------------------------------

// CConcertFlyInit

// -------------------------------------------------------------------

// SCtrlLiftBroadcast

// -------------------------------------------------------------------

// SCtrlEncoreBroadcast

// -------------------------------------------------------------------

// CCtrlInfo

// -------------------------------------------------------------------

// SCtrlInfo

// .concert.CtrlType Stage = 1;
inline void SCtrlInfo::clear_stage() {
  stage_ = 0;
}
inline ::concert::CtrlType SCtrlInfo::_internal_stage() const {
  return static_cast< ::concert::CtrlType >(stage_);
}
inline ::concert::CtrlType SCtrlInfo::stage() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlInfo.Stage)
  return _internal_stage();
}
inline void SCtrlInfo::_internal_set_stage(::concert::CtrlType value) {
  
  stage_ = value;
}
inline void SCtrlInfo::set_stage(::concert::CtrlType value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlInfo.Stage)
}

// int32 KeepTime = 2;
inline void SCtrlInfo::clear_keeptime() {
  keeptime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlInfo::_internal_keeptime() const {
  return keeptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlInfo::keeptime() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlInfo.KeepTime)
  return _internal_keeptime();
}
inline void SCtrlInfo::_internal_set_keeptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keeptime_ = value;
}
inline void SCtrlInfo::set_keeptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keeptime(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlInfo.KeepTime)
}

// -------------------------------------------------------------------

// CCtrlHeartBeat

// -------------------------------------------------------------------

// SCtrlHeartBeat

// .concert.CtrlType Stage = 1;
inline void SCtrlHeartBeat::clear_stage() {
  stage_ = 0;
}
inline ::concert::CtrlType SCtrlHeartBeat::_internal_stage() const {
  return static_cast< ::concert::CtrlType >(stage_);
}
inline ::concert::CtrlType SCtrlHeartBeat::stage() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlHeartBeat.Stage)
  return _internal_stage();
}
inline void SCtrlHeartBeat::_internal_set_stage(::concert::CtrlType value) {
  
  stage_ = value;
}
inline void SCtrlHeartBeat::set_stage(::concert::CtrlType value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlHeartBeat.Stage)
}

// int32 KeepTime = 2;
inline void SCtrlHeartBeat::clear_keeptime() {
  keeptime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlHeartBeat::_internal_keeptime() const {
  return keeptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCtrlHeartBeat::keeptime() const {
  // @@protoc_insertion_point(field_get:concert.SCtrlHeartBeat.KeepTime)
  return _internal_keeptime();
}
inline void SCtrlHeartBeat::_internal_set_keeptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keeptime_ = value;
}
inline void SCtrlHeartBeat::set_keeptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keeptime(value);
  // @@protoc_insertion_point(field_set:concert.SCtrlHeartBeat.KeepTime)
}

// -------------------------------------------------------------------

// CtrlManual

// .concert.CtrlType Stage = 1;
inline void CtrlManual::clear_stage() {
  stage_ = 0;
}
inline ::concert::CtrlType CtrlManual::_internal_stage() const {
  return static_cast< ::concert::CtrlType >(stage_);
}
inline ::concert::CtrlType CtrlManual::stage() const {
  // @@protoc_insertion_point(field_get:concert.CtrlManual.Stage)
  return _internal_stage();
}
inline void CtrlManual::_internal_set_stage(::concert::CtrlType value) {
  
  stage_ = value;
}
inline void CtrlManual::set_stage(::concert::CtrlType value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:concert.CtrlManual.Stage)
}

// -------------------------------------------------------------------

// SBroadCtrlManual

// .concert.CtrlType Stage = 1;
inline void SBroadCtrlManual::clear_stage() {
  stage_ = 0;
}
inline ::concert::CtrlType SBroadCtrlManual::_internal_stage() const {
  return static_cast< ::concert::CtrlType >(stage_);
}
inline ::concert::CtrlType SBroadCtrlManual::stage() const {
  // @@protoc_insertion_point(field_get:concert.SBroadCtrlManual.Stage)
  return _internal_stage();
}
inline void SBroadCtrlManual::_internal_set_stage(::concert::CtrlType value) {
  
  stage_ = value;
}
inline void SBroadCtrlManual::set_stage(::concert::CtrlType value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:concert.SBroadCtrlManual.Stage)
}

// int64 Stamp = 2;
inline void SBroadCtrlManual::clear_stamp() {
  stamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SBroadCtrlManual::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SBroadCtrlManual::stamp() const {
  // @@protoc_insertion_point(field_get:concert.SBroadCtrlManual.Stamp)
  return _internal_stamp();
}
inline void SBroadCtrlManual::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  stamp_ = value;
}
inline void SBroadCtrlManual::set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:concert.SBroadCtrlManual.Stamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace concert

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::concert::CtrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::concert::CtrlType>() {
  return ::concert::CtrlType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_concertCtrl_2eproto
