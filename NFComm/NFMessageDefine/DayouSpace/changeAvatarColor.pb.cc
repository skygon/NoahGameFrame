// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: changeAvatarColor.proto

#include "changeAvatarColor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_avatar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BAvatar_avatar_2eproto;
namespace changeAvatarColor {
class SChangeAvatarColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SChangeAvatarColor> _instance;
} _SChangeAvatarColor_default_instance_;
class CUpdateAvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CUpdateAvatar> _instance;
} _CUpdateAvatar_default_instance_;
class SUpdateAvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SUpdateAvatar> _instance;
} _SUpdateAvatar_default_instance_;
class CAvatarListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAvatarList> _instance;
} _CAvatarList_default_instance_;
class SAvatarListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAvatarList> _instance;
} _SAvatarList_default_instance_;
class CUpdateYuanshenAvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CUpdateYuanshenAvatar> _instance;
} _CUpdateYuanshenAvatar_default_instance_;
class SUpdateYuanshenAvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SUpdateYuanshenAvatar> _instance;
} _SUpdateYuanshenAvatar_default_instance_;
class CNewUserSelectAvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNewUserSelectAvatar> _instance;
} _CNewUserSelectAvatar_default_instance_;
class SNewUserSelectAvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNewUserSelectAvatar> _instance;
} _SNewUserSelectAvatar_default_instance_;
}  // namespace changeAvatarColor
static void InitDefaultsscc_info_CAvatarList_changeAvatarColor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::changeAvatarColor::_CAvatarList_default_instance_;
    new (ptr) ::changeAvatarColor::CAvatarList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::changeAvatarColor::CAvatarList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAvatarList_changeAvatarColor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAvatarList_changeAvatarColor_2eproto}, {}};

static void InitDefaultsscc_info_CNewUserSelectAvatar_changeAvatarColor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::changeAvatarColor::_CNewUserSelectAvatar_default_instance_;
    new (ptr) ::changeAvatarColor::CNewUserSelectAvatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::changeAvatarColor::CNewUserSelectAvatar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNewUserSelectAvatar_changeAvatarColor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNewUserSelectAvatar_changeAvatarColor_2eproto}, {}};

static void InitDefaultsscc_info_CUpdateAvatar_changeAvatarColor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::changeAvatarColor::_CUpdateAvatar_default_instance_;
    new (ptr) ::changeAvatarColor::CUpdateAvatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::changeAvatarColor::CUpdateAvatar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CUpdateAvatar_changeAvatarColor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CUpdateAvatar_changeAvatarColor_2eproto}, {}};

static void InitDefaultsscc_info_CUpdateYuanshenAvatar_changeAvatarColor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::changeAvatarColor::_CUpdateYuanshenAvatar_default_instance_;
    new (ptr) ::changeAvatarColor::CUpdateYuanshenAvatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::changeAvatarColor::CUpdateYuanshenAvatar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CUpdateYuanshenAvatar_changeAvatarColor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CUpdateYuanshenAvatar_changeAvatarColor_2eproto}, {}};

static void InitDefaultsscc_info_SAvatarList_changeAvatarColor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::changeAvatarColor::_SAvatarList_default_instance_;
    new (ptr) ::changeAvatarColor::SAvatarList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::changeAvatarColor::SAvatarList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SAvatarList_changeAvatarColor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SAvatarList_changeAvatarColor_2eproto}, {
      &scc_info_BAvatar_avatar_2eproto.base,}};

static void InitDefaultsscc_info_SChangeAvatarColor_changeAvatarColor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::changeAvatarColor::_SChangeAvatarColor_default_instance_;
    new (ptr) ::changeAvatarColor::SChangeAvatarColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::changeAvatarColor::SChangeAvatarColor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SChangeAvatarColor_changeAvatarColor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SChangeAvatarColor_changeAvatarColor_2eproto}, {
      &scc_info_BAvatar_avatar_2eproto.base,}};

static void InitDefaultsscc_info_SNewUserSelectAvatar_changeAvatarColor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::changeAvatarColor::_SNewUserSelectAvatar_default_instance_;
    new (ptr) ::changeAvatarColor::SNewUserSelectAvatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::changeAvatarColor::SNewUserSelectAvatar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNewUserSelectAvatar_changeAvatarColor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNewUserSelectAvatar_changeAvatarColor_2eproto}, {}};

static void InitDefaultsscc_info_SUpdateAvatar_changeAvatarColor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::changeAvatarColor::_SUpdateAvatar_default_instance_;
    new (ptr) ::changeAvatarColor::SUpdateAvatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::changeAvatarColor::SUpdateAvatar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUpdateAvatar_changeAvatarColor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SUpdateAvatar_changeAvatarColor_2eproto}, {}};

static void InitDefaultsscc_info_SUpdateYuanshenAvatar_changeAvatarColor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::changeAvatarColor::_SUpdateYuanshenAvatar_default_instance_;
    new (ptr) ::changeAvatarColor::SUpdateYuanshenAvatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::changeAvatarColor::SUpdateYuanshenAvatar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUpdateYuanshenAvatar_changeAvatarColor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SUpdateYuanshenAvatar_changeAvatarColor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_changeAvatarColor_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_changeAvatarColor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_changeAvatarColor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_changeAvatarColor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SChangeAvatarColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SChangeAvatarColor, avatar_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SChangeAvatarColor, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CUpdateAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CUpdateAvatar, avatarid_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CUpdateAvatar, avatarcolor_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CUpdateAvatar, avatarkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SUpdateAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SUpdateAvatar, avatarid_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SUpdateAvatar, avatarcolor_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SUpdateAvatar, avatarkey_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SUpdateAvatar, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CAvatarList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CAvatarList, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SAvatarList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SAvatarList, avatarlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CUpdateYuanshenAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CUpdateYuanshenAvatar, avatarkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SUpdateYuanshenAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SUpdateYuanshenAvatar, avatarkey_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SUpdateYuanshenAvatar, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CNewUserSelectAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CNewUserSelectAvatar, avatarid_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CNewUserSelectAvatar, avatarkey_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::CNewUserSelectAvatar, goodid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SNewUserSelectAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SNewUserSelectAvatar, state_),
  PROTOBUF_FIELD_OFFSET(::changeAvatarColor::SNewUserSelectAvatar, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::changeAvatarColor::SChangeAvatarColor)},
  { 7, -1, sizeof(::changeAvatarColor::CUpdateAvatar)},
  { 15, -1, sizeof(::changeAvatarColor::SUpdateAvatar)},
  { 24, -1, sizeof(::changeAvatarColor::CAvatarList)},
  { 30, -1, sizeof(::changeAvatarColor::SAvatarList)},
  { 36, -1, sizeof(::changeAvatarColor::CUpdateYuanshenAvatar)},
  { 42, -1, sizeof(::changeAvatarColor::SUpdateYuanshenAvatar)},
  { 49, -1, sizeof(::changeAvatarColor::CNewUserSelectAvatar)},
  { 57, -1, sizeof(::changeAvatarColor::SNewUserSelectAvatar)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::changeAvatarColor::_SChangeAvatarColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::changeAvatarColor::_CUpdateAvatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::changeAvatarColor::_SUpdateAvatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::changeAvatarColor::_CAvatarList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::changeAvatarColor::_SAvatarList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::changeAvatarColor::_CUpdateYuanshenAvatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::changeAvatarColor::_SUpdateYuanshenAvatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::changeAvatarColor::_CNewUserSelectAvatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::changeAvatarColor::_SNewUserSelectAvatar_default_instance_),
};

const char descriptor_table_protodef_changeAvatarColor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027changeAvatarColor.proto\022\021changeAvatarC"
  "olor\032\014avatar.proto\"I\n\022SChangeAvatarColor"
  "\022&\n\006avatar\030\001 \001(\0132\026.avatarPackage.BAvatar"
  "\022\013\n\003uid\030\002 \001(\005\"I\n\rCUpdateAvatar\022\020\n\010avatar"
  "Id\030\001 \001(\005\022\023\n\013avatarColor\030\002 \001(\t\022\021\n\tavatarK"
  "ey\030\003 \001(\005\"V\n\rSUpdateAvatar\022\020\n\010avatarId\030\001 "
  "\001(\005\022\023\n\013avatarColor\030\002 \001(\t\022\021\n\tavatarKey\030\003 "
  "\001(\005\022\013\n\003uid\030\004 \001(\005\"\037\n\013CAvatarList\022\020\n\010resou"
  "rce\030\001 \001(\005\"9\n\013SAvatarList\022*\n\navatarList\030\001"
  " \003(\0132\026.avatarPackage.BAvatar\"*\n\025CUpdateY"
  "uanshenAvatar\022\021\n\tavatarKey\030\001 \001(\005\"7\n\025SUpd"
  "ateYuanshenAvatar\022\021\n\tavatarKey\030\001 \001(\005\022\013\n\003"
  "uid\030\002 \001(\005\"K\n\024CNewUserSelectAvatar\022\020\n\010ava"
  "tarId\030\001 \001(\005\022\021\n\tavatarKey\030\002 \001(\005\022\016\n\006goodId"
  "\030\003 \001(\005\"2\n\024SNewUserSelectAvatar\022\r\n\005state\030"
  "\001 \001(\005\022\013\n\003msg\030\002 \001(\tB-\n\030com.dayou.space.pr"
  "otobufB\021ChangeAvatarColorb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_changeAvatarColor_2eproto_deps[1] = {
  &::descriptor_table_avatar_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_changeAvatarColor_2eproto_sccs[9] = {
  &scc_info_CAvatarList_changeAvatarColor_2eproto.base,
  &scc_info_CNewUserSelectAvatar_changeAvatarColor_2eproto.base,
  &scc_info_CUpdateAvatar_changeAvatarColor_2eproto.base,
  &scc_info_CUpdateYuanshenAvatar_changeAvatarColor_2eproto.base,
  &scc_info_SAvatarList_changeAvatarColor_2eproto.base,
  &scc_info_SChangeAvatarColor_changeAvatarColor_2eproto.base,
  &scc_info_SNewUserSelectAvatar_changeAvatarColor_2eproto.base,
  &scc_info_SUpdateAvatar_changeAvatarColor_2eproto.base,
  &scc_info_SUpdateYuanshenAvatar_changeAvatarColor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_changeAvatarColor_2eproto_once;
static bool descriptor_table_changeAvatarColor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_changeAvatarColor_2eproto = {
  &descriptor_table_changeAvatarColor_2eproto_initialized, descriptor_table_protodef_changeAvatarColor_2eproto, "changeAvatarColor.proto", 673,
  &descriptor_table_changeAvatarColor_2eproto_once, descriptor_table_changeAvatarColor_2eproto_sccs, descriptor_table_changeAvatarColor_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_changeAvatarColor_2eproto::offsets,
  file_level_metadata_changeAvatarColor_2eproto, 9, file_level_enum_descriptors_changeAvatarColor_2eproto, file_level_service_descriptors_changeAvatarColor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_changeAvatarColor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_changeAvatarColor_2eproto), true);
namespace changeAvatarColor {

// ===================================================================

void SChangeAvatarColor::InitAsDefaultInstance() {
  ::changeAvatarColor::_SChangeAvatarColor_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::avatarPackage::BAvatar*>(
      ::avatarPackage::BAvatar::internal_default_instance());
}
class SChangeAvatarColor::_Internal {
 public:
  static const ::avatarPackage::BAvatar& avatar(const SChangeAvatarColor* msg);
};

const ::avatarPackage::BAvatar&
SChangeAvatarColor::_Internal::avatar(const SChangeAvatarColor* msg) {
  return *msg->avatar_;
}
void SChangeAvatarColor::clear_avatar() {
  if (GetArenaNoVirtual() == nullptr && avatar_ != nullptr) {
    delete avatar_;
  }
  avatar_ = nullptr;
}
SChangeAvatarColor::SChangeAvatarColor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:changeAvatarColor.SChangeAvatarColor)
}
SChangeAvatarColor::SChangeAvatarColor(const SChangeAvatarColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_avatar()) {
    avatar_ = new ::avatarPackage::BAvatar(*from.avatar_);
  } else {
    avatar_ = nullptr;
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:changeAvatarColor.SChangeAvatarColor)
}

void SChangeAvatarColor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SChangeAvatarColor_changeAvatarColor_2eproto.base);
  ::memset(&avatar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&avatar_)) + sizeof(uid_));
}

SChangeAvatarColor::~SChangeAvatarColor() {
  // @@protoc_insertion_point(destructor:changeAvatarColor.SChangeAvatarColor)
  SharedDtor();
}

void SChangeAvatarColor::SharedDtor() {
  if (this != internal_default_instance()) delete avatar_;
}

void SChangeAvatarColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SChangeAvatarColor& SChangeAvatarColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SChangeAvatarColor_changeAvatarColor_2eproto.base);
  return *internal_default_instance();
}


void SChangeAvatarColor::Clear() {
// @@protoc_insertion_point(message_clear_start:changeAvatarColor.SChangeAvatarColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && avatar_ != nullptr) {
    delete avatar_;
  }
  avatar_ = nullptr;
  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* SChangeAvatarColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .avatarPackage.BAvatar avatar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChangeAvatarColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:changeAvatarColor.SChangeAvatarColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .avatarPackage.BAvatar avatar = 1;
  if (this->has_avatar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::avatar(this), target, stream);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:changeAvatarColor.SChangeAvatarColor)
  return target;
}

size_t SChangeAvatarColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:changeAvatarColor.SChangeAvatarColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .avatarPackage.BAvatar avatar = 1;
  if (this->has_avatar()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *avatar_);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SChangeAvatarColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:changeAvatarColor.SChangeAvatarColor)
  GOOGLE_DCHECK_NE(&from, this);
  const SChangeAvatarColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SChangeAvatarColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:changeAvatarColor.SChangeAvatarColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:changeAvatarColor.SChangeAvatarColor)
    MergeFrom(*source);
  }
}

void SChangeAvatarColor::MergeFrom(const SChangeAvatarColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:changeAvatarColor.SChangeAvatarColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_avatar()) {
    _internal_mutable_avatar()->::avatarPackage::BAvatar::MergeFrom(from._internal_avatar());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SChangeAvatarColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:changeAvatarColor.SChangeAvatarColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChangeAvatarColor::CopyFrom(const SChangeAvatarColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:changeAvatarColor.SChangeAvatarColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChangeAvatarColor::IsInitialized() const {
  return true;
}

void SChangeAvatarColor::InternalSwap(SChangeAvatarColor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(avatar_, other->avatar_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SChangeAvatarColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CUpdateAvatar::InitAsDefaultInstance() {
}
class CUpdateAvatar::_Internal {
 public:
};

CUpdateAvatar::CUpdateAvatar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:changeAvatarColor.CUpdateAvatar)
}
CUpdateAvatar::CUpdateAvatar(const CUpdateAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarcolor().empty()) {
    avatarcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarcolor_);
  }
  ::memcpy(&avatarid_, &from.avatarid_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatarkey_) -
    reinterpret_cast<char*>(&avatarid_)) + sizeof(avatarkey_));
  // @@protoc_insertion_point(copy_constructor:changeAvatarColor.CUpdateAvatar)
}

void CUpdateAvatar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CUpdateAvatar_changeAvatarColor_2eproto.base);
  avatarcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatarid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarkey_) -
      reinterpret_cast<char*>(&avatarid_)) + sizeof(avatarkey_));
}

CUpdateAvatar::~CUpdateAvatar() {
  // @@protoc_insertion_point(destructor:changeAvatarColor.CUpdateAvatar)
  SharedDtor();
}

void CUpdateAvatar::SharedDtor() {
  avatarcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUpdateAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUpdateAvatar& CUpdateAvatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CUpdateAvatar_changeAvatarColor_2eproto.base);
  return *internal_default_instance();
}


void CUpdateAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:changeAvatarColor.CUpdateAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatarid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarkey_) -
      reinterpret_cast<char*>(&avatarid_)) + sizeof(avatarkey_));
  _internal_metadata_.Clear();
}

const char* CUpdateAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatarcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "changeAvatarColor.CUpdateAvatar.avatarColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUpdateAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:changeAvatarColor.CUpdateAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarId = 1;
  if (this->avatarid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarid(), target);
  }

  // string avatarColor = 2;
  if (this->avatarcolor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarcolor().data(), static_cast<int>(this->_internal_avatarcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "changeAvatarColor.CUpdateAvatar.avatarColor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatarcolor(), target);
  }

  // int32 avatarKey = 3;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_avatarkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:changeAvatarColor.CUpdateAvatar)
  return target;
}

size_t CUpdateAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:changeAvatarColor.CUpdateAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string avatarColor = 2;
  if (this->avatarcolor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarcolor());
  }

  // int32 avatarId = 1;
  if (this->avatarid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarid());
  }

  // int32 avatarKey = 3;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUpdateAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:changeAvatarColor.CUpdateAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const CUpdateAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUpdateAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:changeAvatarColor.CUpdateAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:changeAvatarColor.CUpdateAvatar)
    MergeFrom(*source);
  }
}

void CUpdateAvatar::MergeFrom(const CUpdateAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:changeAvatarColor.CUpdateAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarcolor().size() > 0) {

    avatarcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarcolor_);
  }
  if (from.avatarid() != 0) {
    _internal_set_avatarid(from._internal_avatarid());
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
}

void CUpdateAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:changeAvatarColor.CUpdateAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUpdateAvatar::CopyFrom(const CUpdateAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:changeAvatarColor.CUpdateAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUpdateAvatar::IsInitialized() const {
  return true;
}

void CUpdateAvatar::InternalSwap(CUpdateAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avatarcolor_.Swap(&other->avatarcolor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(avatarid_, other->avatarid_);
  swap(avatarkey_, other->avatarkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUpdateAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SUpdateAvatar::InitAsDefaultInstance() {
}
class SUpdateAvatar::_Internal {
 public:
};

SUpdateAvatar::SUpdateAvatar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:changeAvatarColor.SUpdateAvatar)
}
SUpdateAvatar::SUpdateAvatar(const SUpdateAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarcolor().empty()) {
    avatarcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarcolor_);
  }
  ::memcpy(&avatarid_, &from.avatarid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&avatarid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:changeAvatarColor.SUpdateAvatar)
}

void SUpdateAvatar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SUpdateAvatar_changeAvatarColor_2eproto.base);
  avatarcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatarid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&avatarid_)) + sizeof(uid_));
}

SUpdateAvatar::~SUpdateAvatar() {
  // @@protoc_insertion_point(destructor:changeAvatarColor.SUpdateAvatar)
  SharedDtor();
}

void SUpdateAvatar::SharedDtor() {
  avatarcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SUpdateAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SUpdateAvatar& SUpdateAvatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SUpdateAvatar_changeAvatarColor_2eproto.base);
  return *internal_default_instance();
}


void SUpdateAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:changeAvatarColor.SUpdateAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatarid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&avatarid_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SUpdateAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatarcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "changeAvatarColor.SUpdateAvatar.avatarColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUpdateAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:changeAvatarColor.SUpdateAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarId = 1;
  if (this->avatarid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarid(), target);
  }

  // string avatarColor = 2;
  if (this->avatarcolor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarcolor().data(), static_cast<int>(this->_internal_avatarcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "changeAvatarColor.SUpdateAvatar.avatarColor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatarcolor(), target);
  }

  // int32 avatarKey = 3;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_avatarkey(), target);
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:changeAvatarColor.SUpdateAvatar)
  return target;
}

size_t SUpdateAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:changeAvatarColor.SUpdateAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string avatarColor = 2;
  if (this->avatarcolor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarcolor());
  }

  // int32 avatarId = 1;
  if (this->avatarid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarid());
  }

  // int32 avatarKey = 3;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUpdateAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:changeAvatarColor.SUpdateAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const SUpdateAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SUpdateAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:changeAvatarColor.SUpdateAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:changeAvatarColor.SUpdateAvatar)
    MergeFrom(*source);
  }
}

void SUpdateAvatar::MergeFrom(const SUpdateAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:changeAvatarColor.SUpdateAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarcolor().size() > 0) {

    avatarcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarcolor_);
  }
  if (from.avatarid() != 0) {
    _internal_set_avatarid(from._internal_avatarid());
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SUpdateAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:changeAvatarColor.SUpdateAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUpdateAvatar::CopyFrom(const SUpdateAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:changeAvatarColor.SUpdateAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUpdateAvatar::IsInitialized() const {
  return true;
}

void SUpdateAvatar::InternalSwap(SUpdateAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avatarcolor_.Swap(&other->avatarcolor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(avatarid_, other->avatarid_);
  swap(avatarkey_, other->avatarkey_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SUpdateAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAvatarList::InitAsDefaultInstance() {
}
class CAvatarList::_Internal {
 public:
};

CAvatarList::CAvatarList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:changeAvatarColor.CAvatarList)
}
CAvatarList::CAvatarList(const CAvatarList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_ = from.resource_;
  // @@protoc_insertion_point(copy_constructor:changeAvatarColor.CAvatarList)
}

void CAvatarList::SharedCtor() {
  resource_ = 0;
}

CAvatarList::~CAvatarList() {
  // @@protoc_insertion_point(destructor:changeAvatarColor.CAvatarList)
  SharedDtor();
}

void CAvatarList::SharedDtor() {
}

void CAvatarList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAvatarList& CAvatarList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAvatarList_changeAvatarColor_2eproto.base);
  return *internal_default_instance();
}


void CAvatarList::Clear() {
// @@protoc_insertion_point(message_clear_start:changeAvatarColor.CAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_ = 0;
  _internal_metadata_.Clear();
}

const char* CAvatarList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAvatarList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:changeAvatarColor.CAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 resource = 1;
  if (this->resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_resource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:changeAvatarColor.CAvatarList)
  return target;
}

size_t CAvatarList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:changeAvatarColor.CAvatarList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 resource = 1;
  if (this->resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAvatarList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:changeAvatarColor.CAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  const CAvatarList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAvatarList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:changeAvatarColor.CAvatarList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:changeAvatarColor.CAvatarList)
    MergeFrom(*source);
  }
}

void CAvatarList::MergeFrom(const CAvatarList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:changeAvatarColor.CAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
}

void CAvatarList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:changeAvatarColor.CAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAvatarList::CopyFrom(const CAvatarList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:changeAvatarColor.CAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAvatarList::IsInitialized() const {
  return true;
}

void CAvatarList::InternalSwap(CAvatarList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(resource_, other->resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAvatarList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAvatarList::InitAsDefaultInstance() {
}
class SAvatarList::_Internal {
 public:
};

void SAvatarList::clear_avatarlist() {
  avatarlist_.Clear();
}
SAvatarList::SAvatarList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:changeAvatarColor.SAvatarList)
}
SAvatarList::SAvatarList(const SAvatarList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      avatarlist_(from.avatarlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:changeAvatarColor.SAvatarList)
}

void SAvatarList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SAvatarList_changeAvatarColor_2eproto.base);
}

SAvatarList::~SAvatarList() {
  // @@protoc_insertion_point(destructor:changeAvatarColor.SAvatarList)
  SharedDtor();
}

void SAvatarList::SharedDtor() {
}

void SAvatarList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAvatarList& SAvatarList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAvatarList_changeAvatarColor_2eproto.base);
  return *internal_default_instance();
}


void SAvatarList::Clear() {
// @@protoc_insertion_point(message_clear_start:changeAvatarColor.SAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SAvatarList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .avatarPackage.BAvatar avatarList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_avatarlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAvatarList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:changeAvatarColor.SAvatarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .avatarPackage.BAvatar avatarList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_avatarlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_avatarlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:changeAvatarColor.SAvatarList)
  return target;
}

size_t SAvatarList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:changeAvatarColor.SAvatarList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .avatarPackage.BAvatar avatarList = 1;
  total_size += 1UL * this->_internal_avatarlist_size();
  for (const auto& msg : this->avatarlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAvatarList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:changeAvatarColor.SAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  const SAvatarList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAvatarList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:changeAvatarColor.SAvatarList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:changeAvatarColor.SAvatarList)
    MergeFrom(*source);
  }
}

void SAvatarList::MergeFrom(const SAvatarList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:changeAvatarColor.SAvatarList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatarlist_.MergeFrom(from.avatarlist_);
}

void SAvatarList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:changeAvatarColor.SAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAvatarList::CopyFrom(const SAvatarList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:changeAvatarColor.SAvatarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAvatarList::IsInitialized() const {
  return true;
}

void SAvatarList::InternalSwap(SAvatarList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avatarlist_.InternalSwap(&other->avatarlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAvatarList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CUpdateYuanshenAvatar::InitAsDefaultInstance() {
}
class CUpdateYuanshenAvatar::_Internal {
 public:
};

CUpdateYuanshenAvatar::CUpdateYuanshenAvatar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:changeAvatarColor.CUpdateYuanshenAvatar)
}
CUpdateYuanshenAvatar::CUpdateYuanshenAvatar(const CUpdateYuanshenAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarkey_ = from.avatarkey_;
  // @@protoc_insertion_point(copy_constructor:changeAvatarColor.CUpdateYuanshenAvatar)
}

void CUpdateYuanshenAvatar::SharedCtor() {
  avatarkey_ = 0;
}

CUpdateYuanshenAvatar::~CUpdateYuanshenAvatar() {
  // @@protoc_insertion_point(destructor:changeAvatarColor.CUpdateYuanshenAvatar)
  SharedDtor();
}

void CUpdateYuanshenAvatar::SharedDtor() {
}

void CUpdateYuanshenAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUpdateYuanshenAvatar& CUpdateYuanshenAvatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CUpdateYuanshenAvatar_changeAvatarColor_2eproto.base);
  return *internal_default_instance();
}


void CUpdateYuanshenAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:changeAvatarColor.CUpdateYuanshenAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarkey_ = 0;
  _internal_metadata_.Clear();
}

const char* CUpdateYuanshenAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUpdateYuanshenAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:changeAvatarColor.CUpdateYuanshenAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:changeAvatarColor.CUpdateYuanshenAvatar)
  return target;
}

size_t CUpdateYuanshenAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:changeAvatarColor.CUpdateYuanshenAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUpdateYuanshenAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:changeAvatarColor.CUpdateYuanshenAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const CUpdateYuanshenAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUpdateYuanshenAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:changeAvatarColor.CUpdateYuanshenAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:changeAvatarColor.CUpdateYuanshenAvatar)
    MergeFrom(*source);
  }
}

void CUpdateYuanshenAvatar::MergeFrom(const CUpdateYuanshenAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:changeAvatarColor.CUpdateYuanshenAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
}

void CUpdateYuanshenAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:changeAvatarColor.CUpdateYuanshenAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUpdateYuanshenAvatar::CopyFrom(const CUpdateYuanshenAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:changeAvatarColor.CUpdateYuanshenAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUpdateYuanshenAvatar::IsInitialized() const {
  return true;
}

void CUpdateYuanshenAvatar::InternalSwap(CUpdateYuanshenAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(avatarkey_, other->avatarkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUpdateYuanshenAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SUpdateYuanshenAvatar::InitAsDefaultInstance() {
}
class SUpdateYuanshenAvatar::_Internal {
 public:
};

SUpdateYuanshenAvatar::SUpdateYuanshenAvatar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:changeAvatarColor.SUpdateYuanshenAvatar)
}
SUpdateYuanshenAvatar::SUpdateYuanshenAvatar(const SUpdateYuanshenAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatarkey_, &from.avatarkey_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&avatarkey_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:changeAvatarColor.SUpdateYuanshenAvatar)
}

void SUpdateYuanshenAvatar::SharedCtor() {
  ::memset(&avatarkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&avatarkey_)) + sizeof(uid_));
}

SUpdateYuanshenAvatar::~SUpdateYuanshenAvatar() {
  // @@protoc_insertion_point(destructor:changeAvatarColor.SUpdateYuanshenAvatar)
  SharedDtor();
}

void SUpdateYuanshenAvatar::SharedDtor() {
}

void SUpdateYuanshenAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SUpdateYuanshenAvatar& SUpdateYuanshenAvatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SUpdateYuanshenAvatar_changeAvatarColor_2eproto.base);
  return *internal_default_instance();
}


void SUpdateYuanshenAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:changeAvatarColor.SUpdateYuanshenAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatarkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&avatarkey_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SUpdateYuanshenAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUpdateYuanshenAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:changeAvatarColor.SUpdateYuanshenAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarkey(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:changeAvatarColor.SUpdateYuanshenAvatar)
  return target;
}

size_t SUpdateYuanshenAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:changeAvatarColor.SUpdateYuanshenAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUpdateYuanshenAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:changeAvatarColor.SUpdateYuanshenAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const SUpdateYuanshenAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SUpdateYuanshenAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:changeAvatarColor.SUpdateYuanshenAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:changeAvatarColor.SUpdateYuanshenAvatar)
    MergeFrom(*source);
  }
}

void SUpdateYuanshenAvatar::MergeFrom(const SUpdateYuanshenAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:changeAvatarColor.SUpdateYuanshenAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SUpdateYuanshenAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:changeAvatarColor.SUpdateYuanshenAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUpdateYuanshenAvatar::CopyFrom(const SUpdateYuanshenAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:changeAvatarColor.SUpdateYuanshenAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUpdateYuanshenAvatar::IsInitialized() const {
  return true;
}

void SUpdateYuanshenAvatar::InternalSwap(SUpdateYuanshenAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(avatarkey_, other->avatarkey_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SUpdateYuanshenAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CNewUserSelectAvatar::InitAsDefaultInstance() {
}
class CNewUserSelectAvatar::_Internal {
 public:
};

CNewUserSelectAvatar::CNewUserSelectAvatar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:changeAvatarColor.CNewUserSelectAvatar)
}
CNewUserSelectAvatar::CNewUserSelectAvatar(const CNewUserSelectAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatarid_, &from.avatarid_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodid_) -
    reinterpret_cast<char*>(&avatarid_)) + sizeof(goodid_));
  // @@protoc_insertion_point(copy_constructor:changeAvatarColor.CNewUserSelectAvatar)
}

void CNewUserSelectAvatar::SharedCtor() {
  ::memset(&avatarid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodid_) -
      reinterpret_cast<char*>(&avatarid_)) + sizeof(goodid_));
}

CNewUserSelectAvatar::~CNewUserSelectAvatar() {
  // @@protoc_insertion_point(destructor:changeAvatarColor.CNewUserSelectAvatar)
  SharedDtor();
}

void CNewUserSelectAvatar::SharedDtor() {
}

void CNewUserSelectAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNewUserSelectAvatar& CNewUserSelectAvatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNewUserSelectAvatar_changeAvatarColor_2eproto.base);
  return *internal_default_instance();
}


void CNewUserSelectAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:changeAvatarColor.CNewUserSelectAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatarid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodid_) -
      reinterpret_cast<char*>(&avatarid_)) + sizeof(goodid_));
  _internal_metadata_.Clear();
}

const char* CNewUserSelectAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          goodid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNewUserSelectAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:changeAvatarColor.CNewUserSelectAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarId = 1;
  if (this->avatarid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarid(), target);
  }

  // int32 avatarKey = 2;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_avatarkey(), target);
  }

  // int32 goodId = 3;
  if (this->goodid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_goodid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:changeAvatarColor.CNewUserSelectAvatar)
  return target;
}

size_t CNewUserSelectAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:changeAvatarColor.CNewUserSelectAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 avatarId = 1;
  if (this->avatarid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarid());
  }

  // int32 avatarKey = 2;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  // int32 goodId = 3;
  if (this->goodid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNewUserSelectAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:changeAvatarColor.CNewUserSelectAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const CNewUserSelectAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNewUserSelectAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:changeAvatarColor.CNewUserSelectAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:changeAvatarColor.CNewUserSelectAvatar)
    MergeFrom(*source);
  }
}

void CNewUserSelectAvatar::MergeFrom(const CNewUserSelectAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:changeAvatarColor.CNewUserSelectAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarid() != 0) {
    _internal_set_avatarid(from._internal_avatarid());
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
  if (from.goodid() != 0) {
    _internal_set_goodid(from._internal_goodid());
  }
}

void CNewUserSelectAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:changeAvatarColor.CNewUserSelectAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNewUserSelectAvatar::CopyFrom(const CNewUserSelectAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:changeAvatarColor.CNewUserSelectAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNewUserSelectAvatar::IsInitialized() const {
  return true;
}

void CNewUserSelectAvatar::InternalSwap(CNewUserSelectAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(avatarid_, other->avatarid_);
  swap(avatarkey_, other->avatarkey_);
  swap(goodid_, other->goodid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNewUserSelectAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNewUserSelectAvatar::InitAsDefaultInstance() {
}
class SNewUserSelectAvatar::_Internal {
 public:
};

SNewUserSelectAvatar::SNewUserSelectAvatar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:changeAvatarColor.SNewUserSelectAvatar)
}
SNewUserSelectAvatar::SNewUserSelectAvatar(const SNewUserSelectAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:changeAvatarColor.SNewUserSelectAvatar)
}

void SNewUserSelectAvatar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNewUserSelectAvatar_changeAvatarColor_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

SNewUserSelectAvatar::~SNewUserSelectAvatar() {
  // @@protoc_insertion_point(destructor:changeAvatarColor.SNewUserSelectAvatar)
  SharedDtor();
}

void SNewUserSelectAvatar::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SNewUserSelectAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNewUserSelectAvatar& SNewUserSelectAvatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNewUserSelectAvatar_changeAvatarColor_2eproto.base);
  return *internal_default_instance();
}


void SNewUserSelectAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:changeAvatarColor.SNewUserSelectAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SNewUserSelectAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "changeAvatarColor.SNewUserSelectAvatar.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNewUserSelectAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:changeAvatarColor.SNewUserSelectAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "changeAvatarColor.SNewUserSelectAvatar.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:changeAvatarColor.SNewUserSelectAvatar)
  return target;
}

size_t SNewUserSelectAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:changeAvatarColor.SNewUserSelectAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNewUserSelectAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:changeAvatarColor.SNewUserSelectAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const SNewUserSelectAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNewUserSelectAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:changeAvatarColor.SNewUserSelectAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:changeAvatarColor.SNewUserSelectAvatar)
    MergeFrom(*source);
  }
}

void SNewUserSelectAvatar::MergeFrom(const SNewUserSelectAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:changeAvatarColor.SNewUserSelectAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SNewUserSelectAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:changeAvatarColor.SNewUserSelectAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNewUserSelectAvatar::CopyFrom(const SNewUserSelectAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:changeAvatarColor.SNewUserSelectAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNewUserSelectAvatar::IsInitialized() const {
  return true;
}

void SNewUserSelectAvatar::InternalSwap(SNewUserSelectAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNewUserSelectAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace changeAvatarColor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::changeAvatarColor::SChangeAvatarColor* Arena::CreateMaybeMessage< ::changeAvatarColor::SChangeAvatarColor >(Arena* arena) {
  return Arena::CreateInternal< ::changeAvatarColor::SChangeAvatarColor >(arena);
}
template<> PROTOBUF_NOINLINE ::changeAvatarColor::CUpdateAvatar* Arena::CreateMaybeMessage< ::changeAvatarColor::CUpdateAvatar >(Arena* arena) {
  return Arena::CreateInternal< ::changeAvatarColor::CUpdateAvatar >(arena);
}
template<> PROTOBUF_NOINLINE ::changeAvatarColor::SUpdateAvatar* Arena::CreateMaybeMessage< ::changeAvatarColor::SUpdateAvatar >(Arena* arena) {
  return Arena::CreateInternal< ::changeAvatarColor::SUpdateAvatar >(arena);
}
template<> PROTOBUF_NOINLINE ::changeAvatarColor::CAvatarList* Arena::CreateMaybeMessage< ::changeAvatarColor::CAvatarList >(Arena* arena) {
  return Arena::CreateInternal< ::changeAvatarColor::CAvatarList >(arena);
}
template<> PROTOBUF_NOINLINE ::changeAvatarColor::SAvatarList* Arena::CreateMaybeMessage< ::changeAvatarColor::SAvatarList >(Arena* arena) {
  return Arena::CreateInternal< ::changeAvatarColor::SAvatarList >(arena);
}
template<> PROTOBUF_NOINLINE ::changeAvatarColor::CUpdateYuanshenAvatar* Arena::CreateMaybeMessage< ::changeAvatarColor::CUpdateYuanshenAvatar >(Arena* arena) {
  return Arena::CreateInternal< ::changeAvatarColor::CUpdateYuanshenAvatar >(arena);
}
template<> PROTOBUF_NOINLINE ::changeAvatarColor::SUpdateYuanshenAvatar* Arena::CreateMaybeMessage< ::changeAvatarColor::SUpdateYuanshenAvatar >(Arena* arena) {
  return Arena::CreateInternal< ::changeAvatarColor::SUpdateYuanshenAvatar >(arena);
}
template<> PROTOBUF_NOINLINE ::changeAvatarColor::CNewUserSelectAvatar* Arena::CreateMaybeMessage< ::changeAvatarColor::CNewUserSelectAvatar >(Arena* arena) {
  return Arena::CreateInternal< ::changeAvatarColor::CNewUserSelectAvatar >(arena);
}
template<> PROTOBUF_NOINLINE ::changeAvatarColor::SNewUserSelectAvatar* Arena::CreateMaybeMessage< ::changeAvatarColor::SNewUserSelectAvatar >(Arena* arena) {
  return Arena::CreateInternal< ::changeAvatarColor::SNewUserSelectAvatar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
