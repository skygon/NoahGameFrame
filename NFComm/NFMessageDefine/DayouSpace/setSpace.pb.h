// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: setSpace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_setSpace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_setSpace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_setSpace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_setSpace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_setSpace_2eproto;
namespace pb {
class BaseLayPosition;
class BaseLayPositionDefaultTypeInternal;
extern BaseLayPositionDefaultTypeInternal _BaseLayPosition_default_instance_;
class CGetLayPosition;
class CGetLayPositionDefaultTypeInternal;
extern CGetLayPositionDefaultTypeInternal _CGetLayPosition_default_instance_;
class CGetSpaceBack;
class CGetSpaceBackDefaultTypeInternal;
extern CGetSpaceBackDefaultTypeInternal _CGetSpaceBack_default_instance_;
class CSetLayPosition;
class CSetLayPositionDefaultTypeInternal;
extern CSetLayPositionDefaultTypeInternal _CSetLayPosition_default_instance_;
class PayGoodsInfo;
class PayGoodsInfoDefaultTypeInternal;
extern PayGoodsInfoDefaultTypeInternal _PayGoodsInfo_default_instance_;
class PhotoWall;
class PhotoWallDefaultTypeInternal;
extern PhotoWallDefaultTypeInternal _PhotoWall_default_instance_;
class SGetLayPosition;
class SGetLayPositionDefaultTypeInternal;
extern SGetLayPositionDefaultTypeInternal _SGetLayPosition_default_instance_;
class SGetSpaceBack;
class SGetSpaceBackDefaultTypeInternal;
extern SGetSpaceBackDefaultTypeInternal _SGetSpaceBack_default_instance_;
class SSetLayPosition;
class SSetLayPositionDefaultTypeInternal;
extern SSetLayPositionDefaultTypeInternal _SSetLayPosition_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::BaseLayPosition* Arena::CreateMaybeMessage<::pb::BaseLayPosition>(Arena*);
template<> ::pb::CGetLayPosition* Arena::CreateMaybeMessage<::pb::CGetLayPosition>(Arena*);
template<> ::pb::CGetSpaceBack* Arena::CreateMaybeMessage<::pb::CGetSpaceBack>(Arena*);
template<> ::pb::CSetLayPosition* Arena::CreateMaybeMessage<::pb::CSetLayPosition>(Arena*);
template<> ::pb::PayGoodsInfo* Arena::CreateMaybeMessage<::pb::PayGoodsInfo>(Arena*);
template<> ::pb::PhotoWall* Arena::CreateMaybeMessage<::pb::PhotoWall>(Arena*);
template<> ::pb::SGetLayPosition* Arena::CreateMaybeMessage<::pb::SGetLayPosition>(Arena*);
template<> ::pb::SGetSpaceBack* Arena::CreateMaybeMessage<::pb::SGetSpaceBack>(Arena*);
template<> ::pb::SSetLayPosition* Arena::CreateMaybeMessage<::pb::SSetLayPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class PhotoWall :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PhotoWall) */ {
 public:
  PhotoWall();
  virtual ~PhotoWall();

  PhotoWall(const PhotoWall& from);
  PhotoWall(PhotoWall&& from) noexcept
    : PhotoWall() {
    *this = ::std::move(from);
  }

  inline PhotoWall& operator=(const PhotoWall& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhotoWall& operator=(PhotoWall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhotoWall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhotoWall* internal_default_instance() {
    return reinterpret_cast<const PhotoWall*>(
               &_PhotoWall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PhotoWall& a, PhotoWall& b) {
    a.Swap(&b);
  }
  inline void Swap(PhotoWall* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhotoWall* New() const final {
    return CreateMaybeMessage<PhotoWall>(nullptr);
  }

  PhotoWall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhotoWall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhotoWall& from);
  void MergeFrom(const PhotoWall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhotoWall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PhotoWall";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_setSpace_2eproto);
    return ::descriptor_table_setSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 3,
    kSpaceLayIdFieldNumber = 1,
    kThingBackIdFieldNumber = 2,
  };
  // repeated string url = 3;
  int url_size() const;
  private:
  int _internal_url_size() const;
  public:
  void clear_url();
  const std::string& url(int index) const;
  std::string* mutable_url(int index);
  void set_url(int index, const std::string& value);
  void set_url(int index, std::string&& value);
  void set_url(int index, const char* value);
  void set_url(int index, const char* value, size_t size);
  std::string* add_url();
  void add_url(const std::string& value);
  void add_url(std::string&& value);
  void add_url(const char* value);
  void add_url(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& url() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_url();
  private:
  const std::string& _internal_url(int index) const;
  std::string* _internal_add_url();
  public:

  // int32 spaceLayId = 1;
  void clear_spacelayid();
  ::PROTOBUF_NAMESPACE_ID::int32 spacelayid() const;
  void set_spacelayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacelayid() const;
  void _internal_set_spacelayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 thingBackId = 2;
  void clear_thingbackid();
  ::PROTOBUF_NAMESPACE_ID::int32 thingbackid() const;
  void set_thingbackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thingbackid() const;
  void _internal_set_thingbackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PhotoWall)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> url_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacelayid_;
  ::PROTOBUF_NAMESPACE_ID::int32 thingbackid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_setSpace_2eproto;
};
// -------------------------------------------------------------------

class BaseLayPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BaseLayPosition) */ {
 public:
  BaseLayPosition();
  virtual ~BaseLayPosition();

  BaseLayPosition(const BaseLayPosition& from);
  BaseLayPosition(BaseLayPosition&& from) noexcept
    : BaseLayPosition() {
    *this = ::std::move(from);
  }

  inline BaseLayPosition& operator=(const BaseLayPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseLayPosition& operator=(BaseLayPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseLayPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseLayPosition* internal_default_instance() {
    return reinterpret_cast<const BaseLayPosition*>(
               &_BaseLayPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BaseLayPosition& a, BaseLayPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseLayPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseLayPosition* New() const final {
    return CreateMaybeMessage<BaseLayPosition>(nullptr);
  }

  BaseLayPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseLayPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseLayPosition& from);
  void MergeFrom(const BaseLayPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseLayPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BaseLayPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_setSpace_2eproto);
    return ::descriptor_table_setSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 8,
    kCoverFieldNumber = 9,
    kNameFieldNumber = 10,
    kPositionFieldNumber = 6,
    kOrientateFieldNumber = 7,
    kPhotoWallFieldNumber = 11,
    kIdFieldNumber = 1,
    kThingIdFieldNumber = 2,
    kSceneIdFieldNumber = 3,
    kGoodsIdFieldNumber = 4,
    kLayPositionTypeFieldNumber = 5,
  };
  // string resource = 8;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string cover = 9;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .vector.PVector3 position = 6;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // .vector.PVector3 orientate = 7;
  bool has_orientate() const;
  private:
  bool _internal_has_orientate() const;
  public:
  void clear_orientate();
  const ::vector::PVector3& orientate() const;
  ::vector::PVector3* release_orientate();
  ::vector::PVector3* mutable_orientate();
  void set_allocated_orientate(::vector::PVector3* orientate);
  private:
  const ::vector::PVector3& _internal_orientate() const;
  ::vector::PVector3* _internal_mutable_orientate();
  public:

  // .pb.PhotoWall photoWall = 11;
  bool has_photowall() const;
  private:
  bool _internal_has_photowall() const;
  public:
  void clear_photowall();
  const ::pb::PhotoWall& photowall() const;
  ::pb::PhotoWall* release_photowall();
  ::pb::PhotoWall* mutable_photowall();
  void set_allocated_photowall(::pb::PhotoWall* photowall);
  private:
  const ::pb::PhotoWall& _internal_photowall() const;
  ::pb::PhotoWall* _internal_mutable_photowall();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 thingId = 2;
  void clear_thingid();
  ::PROTOBUF_NAMESPACE_ID::int32 thingid() const;
  void set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thingid() const;
  void _internal_set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sceneId = 3;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 4;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 layPositionType = 5;
  void clear_laypositiontype();
  ::PROTOBUF_NAMESPACE_ID::int32 laypositiontype() const;
  void set_laypositiontype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_laypositiontype() const;
  void _internal_set_laypositiontype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BaseLayPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::vector::PVector3* position_;
  ::vector::PVector3* orientate_;
  ::pb::PhotoWall* photowall_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 thingid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 laypositiontype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_setSpace_2eproto;
};
// -------------------------------------------------------------------

class PayGoodsInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PayGoodsInfo) */ {
 public:
  PayGoodsInfo();
  virtual ~PayGoodsInfo();

  PayGoodsInfo(const PayGoodsInfo& from);
  PayGoodsInfo(PayGoodsInfo&& from) noexcept
    : PayGoodsInfo() {
    *this = ::std::move(from);
  }

  inline PayGoodsInfo& operator=(const PayGoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayGoodsInfo& operator=(PayGoodsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PayGoodsInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayGoodsInfo* internal_default_instance() {
    return reinterpret_cast<const PayGoodsInfo*>(
               &_PayGoodsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PayGoodsInfo& a, PayGoodsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PayGoodsInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PayGoodsInfo* New() const final {
    return CreateMaybeMessage<PayGoodsInfo>(nullptr);
  }

  PayGoodsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PayGoodsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PayGoodsInfo& from);
  void MergeFrom(const PayGoodsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayGoodsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PayGoodsInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_setSpace_2eproto);
    return ::descriptor_table_setSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShoppingIdFieldNumber = 1,
    kShoppingNumFieldNumber = 4,
  };
  // int32 shoppingId = 1;
  void clear_shoppingid();
  ::PROTOBUF_NAMESPACE_ID::int32 shoppingid() const;
  void set_shoppingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shoppingid() const;
  void _internal_set_shoppingid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shoppingNum = 4;
  void clear_shoppingnum();
  ::PROTOBUF_NAMESPACE_ID::int32 shoppingnum() const;
  void set_shoppingnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shoppingnum() const;
  void _internal_set_shoppingnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PayGoodsInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 shoppingid_;
  ::PROTOBUF_NAMESPACE_ID::int32 shoppingnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_setSpace_2eproto;
};
// -------------------------------------------------------------------

class CGetSpaceBack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CGetSpaceBack) */ {
 public:
  CGetSpaceBack();
  virtual ~CGetSpaceBack();

  CGetSpaceBack(const CGetSpaceBack& from);
  CGetSpaceBack(CGetSpaceBack&& from) noexcept
    : CGetSpaceBack() {
    *this = ::std::move(from);
  }

  inline CGetSpaceBack& operator=(const CGetSpaceBack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetSpaceBack& operator=(CGetSpaceBack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetSpaceBack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetSpaceBack* internal_default_instance() {
    return reinterpret_cast<const CGetSpaceBack*>(
               &_CGetSpaceBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CGetSpaceBack& a, CGetSpaceBack& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetSpaceBack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetSpaceBack* New() const final {
    return CreateMaybeMessage<CGetSpaceBack>(nullptr);
  }

  CGetSpaceBack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetSpaceBack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetSpaceBack& from);
  void MergeFrom(const CGetSpaceBack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetSpaceBack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CGetSpaceBack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_setSpace_2eproto);
    return ::descriptor_table_setSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CGetSpaceBack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_setSpace_2eproto;
};
// -------------------------------------------------------------------

class SGetSpaceBack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SGetSpaceBack) */ {
 public:
  SGetSpaceBack();
  virtual ~SGetSpaceBack();

  SGetSpaceBack(const SGetSpaceBack& from);
  SGetSpaceBack(SGetSpaceBack&& from) noexcept
    : SGetSpaceBack() {
    *this = ::std::move(from);
  }

  inline SGetSpaceBack& operator=(const SGetSpaceBack& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetSpaceBack& operator=(SGetSpaceBack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetSpaceBack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetSpaceBack* internal_default_instance() {
    return reinterpret_cast<const SGetSpaceBack*>(
               &_SGetSpaceBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SGetSpaceBack& a, SGetSpaceBack& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetSpaceBack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetSpaceBack* New() const final {
    return CreateMaybeMessage<SGetSpaceBack>(nullptr);
  }

  SGetSpaceBack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetSpaceBack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetSpaceBack& from);
  void MergeFrom(const SGetSpaceBack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetSpaceBack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SGetSpaceBack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_setSpace_2eproto);
    return ::descriptor_table_setSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoverFieldNumber = 2,
    kResourceFieldNumber = 3,
    kNickNameFieldNumber = 5,
    kAvatarFieldNumber = 6,
    kAndroidUrlFieldNumber = 8,
    kIosUrlFieldNumber = 9,
    kWindowsUrlFieldNumber = 10,
    kConfigUrlFieldNumber = 16,
    kServerLuaUrlFieldNumber = 17,
    kClientLuaUrlFieldNumber = 18,
    kUidFieldNumber = 4,
    kRelationFieldNumber = 7,
    kOnlineTimeFieldNumber = 11,
    kTypeFieldNumber = 12,
    kCreateUidFieldNumber = 13,
    kCheckStatusFieldNumber = 14,
    kSerialNumberFieldNumber = 15,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cover = 2;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string resource = 3;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string nickName = 5;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 6;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string androidUrl = 8;
  void clear_androidurl();
  const std::string& androidurl() const;
  void set_androidurl(const std::string& value);
  void set_androidurl(std::string&& value);
  void set_androidurl(const char* value);
  void set_androidurl(const char* value, size_t size);
  std::string* mutable_androidurl();
  std::string* release_androidurl();
  void set_allocated_androidurl(std::string* androidurl);
  private:
  const std::string& _internal_androidurl() const;
  void _internal_set_androidurl(const std::string& value);
  std::string* _internal_mutable_androidurl();
  public:

  // string iosUrl = 9;
  void clear_iosurl();
  const std::string& iosurl() const;
  void set_iosurl(const std::string& value);
  void set_iosurl(std::string&& value);
  void set_iosurl(const char* value);
  void set_iosurl(const char* value, size_t size);
  std::string* mutable_iosurl();
  std::string* release_iosurl();
  void set_allocated_iosurl(std::string* iosurl);
  private:
  const std::string& _internal_iosurl() const;
  void _internal_set_iosurl(const std::string& value);
  std::string* _internal_mutable_iosurl();
  public:

  // string windowsUrl = 10;
  void clear_windowsurl();
  const std::string& windowsurl() const;
  void set_windowsurl(const std::string& value);
  void set_windowsurl(std::string&& value);
  void set_windowsurl(const char* value);
  void set_windowsurl(const char* value, size_t size);
  std::string* mutable_windowsurl();
  std::string* release_windowsurl();
  void set_allocated_windowsurl(std::string* windowsurl);
  private:
  const std::string& _internal_windowsurl() const;
  void _internal_set_windowsurl(const std::string& value);
  std::string* _internal_mutable_windowsurl();
  public:

  // string configUrl = 16;
  void clear_configurl();
  const std::string& configurl() const;
  void set_configurl(const std::string& value);
  void set_configurl(std::string&& value);
  void set_configurl(const char* value);
  void set_configurl(const char* value, size_t size);
  std::string* mutable_configurl();
  std::string* release_configurl();
  void set_allocated_configurl(std::string* configurl);
  private:
  const std::string& _internal_configurl() const;
  void _internal_set_configurl(const std::string& value);
  std::string* _internal_mutable_configurl();
  public:

  // string ServerLuaUrl = 17;
  void clear_serverluaurl();
  const std::string& serverluaurl() const;
  void set_serverluaurl(const std::string& value);
  void set_serverluaurl(std::string&& value);
  void set_serverluaurl(const char* value);
  void set_serverluaurl(const char* value, size_t size);
  std::string* mutable_serverluaurl();
  std::string* release_serverluaurl();
  void set_allocated_serverluaurl(std::string* serverluaurl);
  private:
  const std::string& _internal_serverluaurl() const;
  void _internal_set_serverluaurl(const std::string& value);
  std::string* _internal_mutable_serverluaurl();
  public:

  // string ClientLuaUrl = 18;
  void clear_clientluaurl();
  const std::string& clientluaurl() const;
  void set_clientluaurl(const std::string& value);
  void set_clientluaurl(std::string&& value);
  void set_clientluaurl(const char* value);
  void set_clientluaurl(const char* value, size_t size);
  std::string* mutable_clientluaurl();
  std::string* release_clientluaurl();
  void set_allocated_clientluaurl(std::string* clientluaurl);
  private:
  const std::string& _internal_clientluaurl() const;
  void _internal_set_clientluaurl(const std::string& value);
  std::string* _internal_mutable_clientluaurl();
  public:

  // int32 uid = 4;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 relation = 7;
  void clear_relation();
  ::PROTOBUF_NAMESPACE_ID::int32 relation() const;
  void set_relation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relation() const;
  void _internal_set_relation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 onlineTime = 11;
  void clear_onlinetime();
  ::PROTOBUF_NAMESPACE_ID::int32 onlinetime() const;
  void set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onlinetime() const;
  void _internal_set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 12;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 createUid = 13;
  void clear_createuid();
  ::PROTOBUF_NAMESPACE_ID::int32 createuid() const;
  void set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_createuid() const;
  void _internal_set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 checkStatus = 14;
  void clear_checkstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 checkstatus() const;
  void set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checkstatus() const;
  void _internal_set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SerialNumber = 15;
  void clear_serialnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 serialnumber() const;
  void set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serialnumber() const;
  void _internal_set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SGetSpaceBack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr androidurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iosurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr windowsurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverluaurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientluaurl_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 relation_;
  ::PROTOBUF_NAMESPACE_ID::int32 onlinetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 createuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 serialnumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_setSpace_2eproto;
};
// -------------------------------------------------------------------

class CGetLayPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CGetLayPosition) */ {
 public:
  CGetLayPosition();
  virtual ~CGetLayPosition();

  CGetLayPosition(const CGetLayPosition& from);
  CGetLayPosition(CGetLayPosition&& from) noexcept
    : CGetLayPosition() {
    *this = ::std::move(from);
  }

  inline CGetLayPosition& operator=(const CGetLayPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetLayPosition& operator=(CGetLayPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetLayPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetLayPosition* internal_default_instance() {
    return reinterpret_cast<const CGetLayPosition*>(
               &_CGetLayPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CGetLayPosition& a, CGetLayPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetLayPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetLayPosition* New() const final {
    return CreateMaybeMessage<CGetLayPosition>(nullptr);
  }

  CGetLayPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetLayPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetLayPosition& from);
  void MergeFrom(const CGetLayPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetLayPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CGetLayPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_setSpace_2eproto);
    return ::descriptor_table_setSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CGetLayPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_setSpace_2eproto;
};
// -------------------------------------------------------------------

class SGetLayPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SGetLayPosition) */ {
 public:
  SGetLayPosition();
  virtual ~SGetLayPosition();

  SGetLayPosition(const SGetLayPosition& from);
  SGetLayPosition(SGetLayPosition&& from) noexcept
    : SGetLayPosition() {
    *this = ::std::move(from);
  }

  inline SGetLayPosition& operator=(const SGetLayPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetLayPosition& operator=(SGetLayPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetLayPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetLayPosition* internal_default_instance() {
    return reinterpret_cast<const SGetLayPosition*>(
               &_SGetLayPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SGetLayPosition& a, SGetLayPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetLayPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetLayPosition* New() const final {
    return CreateMaybeMessage<SGetLayPosition>(nullptr);
  }

  SGetLayPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetLayPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetLayPosition& from);
  void MergeFrom(const SGetLayPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetLayPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SGetLayPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_setSpace_2eproto);
    return ::descriptor_table_setSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayPositionFieldNumber = 1,
  };
  // repeated .pb.BaseLayPosition layPosition = 1;
  int layposition_size() const;
  private:
  int _internal_layposition_size() const;
  public:
  void clear_layposition();
  ::pb::BaseLayPosition* mutable_layposition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition >*
      mutable_layposition();
  private:
  const ::pb::BaseLayPosition& _internal_layposition(int index) const;
  ::pb::BaseLayPosition* _internal_add_layposition();
  public:
  const ::pb::BaseLayPosition& layposition(int index) const;
  ::pb::BaseLayPosition* add_layposition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition >&
      layposition() const;

  // @@protoc_insertion_point(class_scope:pb.SGetLayPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition > layposition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_setSpace_2eproto;
};
// -------------------------------------------------------------------

class CSetLayPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CSetLayPosition) */ {
 public:
  CSetLayPosition();
  virtual ~CSetLayPosition();

  CSetLayPosition(const CSetLayPosition& from);
  CSetLayPosition(CSetLayPosition&& from) noexcept
    : CSetLayPosition() {
    *this = ::std::move(from);
  }

  inline CSetLayPosition& operator=(const CSetLayPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSetLayPosition& operator=(CSetLayPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSetLayPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSetLayPosition* internal_default_instance() {
    return reinterpret_cast<const CSetLayPosition*>(
               &_CSetLayPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CSetLayPosition& a, CSetLayPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CSetLayPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSetLayPosition* New() const final {
    return CreateMaybeMessage<CSetLayPosition>(nullptr);
  }

  CSetLayPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSetLayPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSetLayPosition& from);
  void MergeFrom(const CSetLayPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSetLayPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CSetLayPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_setSpace_2eproto);
    return ::descriptor_table_setSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayPositionFieldNumber = 2,
    kHouseIdFieldNumber = 1,
  };
  // repeated .pb.BaseLayPosition LayPosition = 2;
  int layposition_size() const;
  private:
  int _internal_layposition_size() const;
  public:
  void clear_layposition();
  ::pb::BaseLayPosition* mutable_layposition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition >*
      mutable_layposition();
  private:
  const ::pb::BaseLayPosition& _internal_layposition(int index) const;
  ::pb::BaseLayPosition* _internal_add_layposition();
  public:
  const ::pb::BaseLayPosition& layposition(int index) const;
  ::pb::BaseLayPosition* add_layposition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition >&
      layposition() const;

  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CSetLayPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition > layposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_setSpace_2eproto;
};
// -------------------------------------------------------------------

class SSetLayPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SSetLayPosition) */ {
 public:
  SSetLayPosition();
  virtual ~SSetLayPosition();

  SSetLayPosition(const SSetLayPosition& from);
  SSetLayPosition(SSetLayPosition&& from) noexcept
    : SSetLayPosition() {
    *this = ::std::move(from);
  }

  inline SSetLayPosition& operator=(const SSetLayPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSetLayPosition& operator=(SSetLayPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSetLayPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSetLayPosition* internal_default_instance() {
    return reinterpret_cast<const SSetLayPosition*>(
               &_SSetLayPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SSetLayPosition& a, SSetLayPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SSetLayPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSetLayPosition* New() const final {
    return CreateMaybeMessage<SSetLayPosition>(nullptr);
  }

  SSetLayPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSetLayPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSetLayPosition& from);
  void MergeFrom(const SSetLayPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSetLayPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SSetLayPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_setSpace_2eproto);
    return ::descriptor_table_setSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayGoodsInfoFieldNumber = 1,
    kSetResultFieldNumber = 2,
  };
  // repeated .pb.PayGoodsInfo payGoodsInfo = 1;
  int paygoodsinfo_size() const;
  private:
  int _internal_paygoodsinfo_size() const;
  public:
  void clear_paygoodsinfo();
  ::pb::PayGoodsInfo* mutable_paygoodsinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PayGoodsInfo >*
      mutable_paygoodsinfo();
  private:
  const ::pb::PayGoodsInfo& _internal_paygoodsinfo(int index) const;
  ::pb::PayGoodsInfo* _internal_add_paygoodsinfo();
  public:
  const ::pb::PayGoodsInfo& paygoodsinfo(int index) const;
  ::pb::PayGoodsInfo* add_paygoodsinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PayGoodsInfo >&
      paygoodsinfo() const;

  // bool setResult = 2;
  void clear_setresult();
  bool setresult() const;
  void set_setresult(bool value);
  private:
  bool _internal_setresult() const;
  void _internal_set_setresult(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SSetLayPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PayGoodsInfo > paygoodsinfo_;
  bool setresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_setSpace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PhotoWall

// int32 spaceLayId = 1;
inline void PhotoWall::clear_spacelayid() {
  spacelayid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhotoWall::_internal_spacelayid() const {
  return spacelayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhotoWall::spacelayid() const {
  // @@protoc_insertion_point(field_get:pb.PhotoWall.spaceLayId)
  return _internal_spacelayid();
}
inline void PhotoWall::_internal_set_spacelayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacelayid_ = value;
}
inline void PhotoWall::set_spacelayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacelayid(value);
  // @@protoc_insertion_point(field_set:pb.PhotoWall.spaceLayId)
}

// int32 thingBackId = 2;
inline void PhotoWall::clear_thingbackid() {
  thingbackid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhotoWall::_internal_thingbackid() const {
  return thingbackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhotoWall::thingbackid() const {
  // @@protoc_insertion_point(field_get:pb.PhotoWall.thingBackId)
  return _internal_thingbackid();
}
inline void PhotoWall::_internal_set_thingbackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thingbackid_ = value;
}
inline void PhotoWall::set_thingbackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thingbackid(value);
  // @@protoc_insertion_point(field_set:pb.PhotoWall.thingBackId)
}

// repeated string url = 3;
inline int PhotoWall::_internal_url_size() const {
  return url_.size();
}
inline int PhotoWall::url_size() const {
  return _internal_url_size();
}
inline void PhotoWall::clear_url() {
  url_.Clear();
}
inline std::string* PhotoWall::add_url() {
  // @@protoc_insertion_point(field_add_mutable:pb.PhotoWall.url)
  return _internal_add_url();
}
inline const std::string& PhotoWall::_internal_url(int index) const {
  return url_.Get(index);
}
inline const std::string& PhotoWall::url(int index) const {
  // @@protoc_insertion_point(field_get:pb.PhotoWall.url)
  return _internal_url(index);
}
inline std::string* PhotoWall::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PhotoWall.url)
  return url_.Mutable(index);
}
inline void PhotoWall::set_url(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.PhotoWall.url)
  url_.Mutable(index)->assign(value);
}
inline void PhotoWall::set_url(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.PhotoWall.url)
  url_.Mutable(index)->assign(std::move(value));
}
inline void PhotoWall::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PhotoWall.url)
}
inline void PhotoWall::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PhotoWall.url)
}
inline std::string* PhotoWall::_internal_add_url() {
  return url_.Add();
}
inline void PhotoWall::add_url(const std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PhotoWall.url)
}
inline void PhotoWall::add_url(std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PhotoWall.url)
}
inline void PhotoWall::add_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PhotoWall.url)
}
inline void PhotoWall::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PhotoWall.url)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PhotoWall::url() const {
  // @@protoc_insertion_point(field_list:pb.PhotoWall.url)
  return url_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PhotoWall::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:pb.PhotoWall.url)
  return &url_;
}

// -------------------------------------------------------------------

// BaseLayPosition

// int32 id = 1;
inline void BaseLayPosition::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::id() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.id)
  return _internal_id();
}
inline void BaseLayPosition::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void BaseLayPosition::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.BaseLayPosition.id)
}

// int32 thingId = 2;
inline void BaseLayPosition::clear_thingid() {
  thingid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::_internal_thingid() const {
  return thingid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::thingid() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.thingId)
  return _internal_thingid();
}
inline void BaseLayPosition::_internal_set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thingid_ = value;
}
inline void BaseLayPosition::set_thingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thingid(value);
  // @@protoc_insertion_point(field_set:pb.BaseLayPosition.thingId)
}

// int32 sceneId = 3;
inline void BaseLayPosition::clear_sceneid() {
  sceneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::sceneid() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.sceneId)
  return _internal_sceneid();
}
inline void BaseLayPosition::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sceneid_ = value;
}
inline void BaseLayPosition::set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:pb.BaseLayPosition.sceneId)
}

// int32 goodsId = 4;
inline void BaseLayPosition::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.goodsId)
  return _internal_goodsid();
}
inline void BaseLayPosition::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void BaseLayPosition::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:pb.BaseLayPosition.goodsId)
}

// int32 layPositionType = 5;
inline void BaseLayPosition::clear_laypositiontype() {
  laypositiontype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::_internal_laypositiontype() const {
  return laypositiontype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseLayPosition::laypositiontype() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.layPositionType)
  return _internal_laypositiontype();
}
inline void BaseLayPosition::_internal_set_laypositiontype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  laypositiontype_ = value;
}
inline void BaseLayPosition::set_laypositiontype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_laypositiontype(value);
  // @@protoc_insertion_point(field_set:pb.BaseLayPosition.layPositionType)
}

// .vector.PVector3 position = 6;
inline bool BaseLayPosition::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BaseLayPosition::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& BaseLayPosition::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& BaseLayPosition::position() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.position)
  return _internal_position();
}
inline ::vector::PVector3* BaseLayPosition::release_position() {
  // @@protoc_insertion_point(field_release:pb.BaseLayPosition.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* BaseLayPosition::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* BaseLayPosition::mutable_position() {
  // @@protoc_insertion_point(field_mutable:pb.BaseLayPosition.position)
  return _internal_mutable_position();
}
inline void BaseLayPosition::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:pb.BaseLayPosition.position)
}

// .vector.PVector3 orientate = 7;
inline bool BaseLayPosition::_internal_has_orientate() const {
  return this != internal_default_instance() && orientate_ != nullptr;
}
inline bool BaseLayPosition::has_orientate() const {
  return _internal_has_orientate();
}
inline const ::vector::PVector3& BaseLayPosition::_internal_orientate() const {
  const ::vector::PVector3* p = orientate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& BaseLayPosition::orientate() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.orientate)
  return _internal_orientate();
}
inline ::vector::PVector3* BaseLayPosition::release_orientate() {
  // @@protoc_insertion_point(field_release:pb.BaseLayPosition.orientate)
  
  ::vector::PVector3* temp = orientate_;
  orientate_ = nullptr;
  return temp;
}
inline ::vector::PVector3* BaseLayPosition::_internal_mutable_orientate() {
  
  if (orientate_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    orientate_ = p;
  }
  return orientate_;
}
inline ::vector::PVector3* BaseLayPosition::mutable_orientate() {
  // @@protoc_insertion_point(field_mutable:pb.BaseLayPosition.orientate)
  return _internal_mutable_orientate();
}
inline void BaseLayPosition::set_allocated_orientate(::vector::PVector3* orientate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientate_);
  }
  if (orientate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientate, submessage_arena);
    }
    
  } else {
    
  }
  orientate_ = orientate;
  // @@protoc_insertion_point(field_set_allocated:pb.BaseLayPosition.orientate)
}

// string resource = 8;
inline void BaseLayPosition::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BaseLayPosition::resource() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.resource)
  return _internal_resource();
}
inline void BaseLayPosition::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:pb.BaseLayPosition.resource)
}
inline std::string* BaseLayPosition::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:pb.BaseLayPosition.resource)
  return _internal_mutable_resource();
}
inline const std::string& BaseLayPosition::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void BaseLayPosition::_internal_set_resource(const std::string& value) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BaseLayPosition::set_resource(std::string&& value) {
  
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseLayPosition.resource)
}
inline void BaseLayPosition::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseLayPosition.resource)
}
inline void BaseLayPosition::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseLayPosition.resource)
}
inline std::string* BaseLayPosition::_internal_mutable_resource() {
  
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BaseLayPosition::release_resource() {
  // @@protoc_insertion_point(field_release:pb.BaseLayPosition.resource)
  
  return resource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BaseLayPosition::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseLayPosition.resource)
}

// string cover = 9;
inline void BaseLayPosition::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BaseLayPosition::cover() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.cover)
  return _internal_cover();
}
inline void BaseLayPosition::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:pb.BaseLayPosition.cover)
}
inline std::string* BaseLayPosition::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:pb.BaseLayPosition.cover)
  return _internal_mutable_cover();
}
inline const std::string& BaseLayPosition::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void BaseLayPosition::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BaseLayPosition::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseLayPosition.cover)
}
inline void BaseLayPosition::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseLayPosition.cover)
}
inline void BaseLayPosition::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseLayPosition.cover)
}
inline std::string* BaseLayPosition::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BaseLayPosition::release_cover() {
  // @@protoc_insertion_point(field_release:pb.BaseLayPosition.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BaseLayPosition::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseLayPosition.cover)
}

// string name = 10;
inline void BaseLayPosition::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BaseLayPosition::name() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.name)
  return _internal_name();
}
inline void BaseLayPosition::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.BaseLayPosition.name)
}
inline std::string* BaseLayPosition::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.BaseLayPosition.name)
  return _internal_mutable_name();
}
inline const std::string& BaseLayPosition::_internal_name() const {
  return name_.GetNoArena();
}
inline void BaseLayPosition::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BaseLayPosition::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseLayPosition.name)
}
inline void BaseLayPosition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BaseLayPosition.name)
}
inline void BaseLayPosition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BaseLayPosition.name)
}
inline std::string* BaseLayPosition::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BaseLayPosition::release_name() {
  // @@protoc_insertion_point(field_release:pb.BaseLayPosition.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BaseLayPosition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.BaseLayPosition.name)
}

// .pb.PhotoWall photoWall = 11;
inline bool BaseLayPosition::_internal_has_photowall() const {
  return this != internal_default_instance() && photowall_ != nullptr;
}
inline bool BaseLayPosition::has_photowall() const {
  return _internal_has_photowall();
}
inline void BaseLayPosition::clear_photowall() {
  if (GetArenaNoVirtual() == nullptr && photowall_ != nullptr) {
    delete photowall_;
  }
  photowall_ = nullptr;
}
inline const ::pb::PhotoWall& BaseLayPosition::_internal_photowall() const {
  const ::pb::PhotoWall* p = photowall_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::PhotoWall*>(
      &::pb::_PhotoWall_default_instance_);
}
inline const ::pb::PhotoWall& BaseLayPosition::photowall() const {
  // @@protoc_insertion_point(field_get:pb.BaseLayPosition.photoWall)
  return _internal_photowall();
}
inline ::pb::PhotoWall* BaseLayPosition::release_photowall() {
  // @@protoc_insertion_point(field_release:pb.BaseLayPosition.photoWall)
  
  ::pb::PhotoWall* temp = photowall_;
  photowall_ = nullptr;
  return temp;
}
inline ::pb::PhotoWall* BaseLayPosition::_internal_mutable_photowall() {
  
  if (photowall_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PhotoWall>(GetArenaNoVirtual());
    photowall_ = p;
  }
  return photowall_;
}
inline ::pb::PhotoWall* BaseLayPosition::mutable_photowall() {
  // @@protoc_insertion_point(field_mutable:pb.BaseLayPosition.photoWall)
  return _internal_mutable_photowall();
}
inline void BaseLayPosition::set_allocated_photowall(::pb::PhotoWall* photowall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete photowall_;
  }
  if (photowall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      photowall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, photowall, submessage_arena);
    }
    
  } else {
    
  }
  photowall_ = photowall;
  // @@protoc_insertion_point(field_set_allocated:pb.BaseLayPosition.photoWall)
}

// -------------------------------------------------------------------

// PayGoodsInfo

// int32 shoppingId = 1;
inline void PayGoodsInfo::clear_shoppingid() {
  shoppingid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayGoodsInfo::_internal_shoppingid() const {
  return shoppingid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayGoodsInfo::shoppingid() const {
  // @@protoc_insertion_point(field_get:pb.PayGoodsInfo.shoppingId)
  return _internal_shoppingid();
}
inline void PayGoodsInfo::_internal_set_shoppingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shoppingid_ = value;
}
inline void PayGoodsInfo::set_shoppingid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shoppingid(value);
  // @@protoc_insertion_point(field_set:pb.PayGoodsInfo.shoppingId)
}

// int32 shoppingNum = 4;
inline void PayGoodsInfo::clear_shoppingnum() {
  shoppingnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayGoodsInfo::_internal_shoppingnum() const {
  return shoppingnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayGoodsInfo::shoppingnum() const {
  // @@protoc_insertion_point(field_get:pb.PayGoodsInfo.shoppingNum)
  return _internal_shoppingnum();
}
inline void PayGoodsInfo::_internal_set_shoppingnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shoppingnum_ = value;
}
inline void PayGoodsInfo::set_shoppingnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shoppingnum(value);
  // @@protoc_insertion_point(field_set:pb.PayGoodsInfo.shoppingNum)
}

// -------------------------------------------------------------------

// CGetSpaceBack

// int32 houseId = 1;
inline void CGetSpaceBack::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetSpaceBack::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetSpaceBack::houseid() const {
  // @@protoc_insertion_point(field_get:pb.CGetSpaceBack.houseId)
  return _internal_houseid();
}
inline void CGetSpaceBack::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CGetSpaceBack::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:pb.CGetSpaceBack.houseId)
}

// -------------------------------------------------------------------

// SGetSpaceBack

// string name = 1;
inline void SGetSpaceBack::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::name() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.name)
  return _internal_name();
}
inline void SGetSpaceBack::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.name)
}
inline std::string* SGetSpaceBack::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.name)
  return _internal_mutable_name();
}
inline const std::string& SGetSpaceBack::_internal_name() const {
  return name_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.name)
}
inline void SGetSpaceBack::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.name)
}
inline void SGetSpaceBack::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.name)
}
inline std::string* SGetSpaceBack::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_name() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.name)
}

// string cover = 2;
inline void SGetSpaceBack::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::cover() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.cover)
  return _internal_cover();
}
inline void SGetSpaceBack::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.cover)
}
inline std::string* SGetSpaceBack::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.cover)
  return _internal_mutable_cover();
}
inline const std::string& SGetSpaceBack::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.cover)
}
inline void SGetSpaceBack::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.cover)
}
inline void SGetSpaceBack::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.cover)
}
inline std::string* SGetSpaceBack::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_cover() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.cover)
}

// string resource = 3;
inline void SGetSpaceBack::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::resource() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.resource)
  return _internal_resource();
}
inline void SGetSpaceBack::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.resource)
}
inline std::string* SGetSpaceBack::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.resource)
  return _internal_mutable_resource();
}
inline const std::string& SGetSpaceBack::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_resource(const std::string& value) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_resource(std::string&& value) {
  
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.resource)
}
inline void SGetSpaceBack::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.resource)
}
inline void SGetSpaceBack::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.resource)
}
inline std::string* SGetSpaceBack::_internal_mutable_resource() {
  
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_resource() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.resource)
  
  return resource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.resource)
}

// int32 uid = 4;
inline void SGetSpaceBack::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::uid() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.uid)
  return _internal_uid();
}
inline void SGetSpaceBack::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SGetSpaceBack::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.uid)
}

// string nickName = 5;
inline void SGetSpaceBack::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::nickname() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.nickName)
  return _internal_nickname();
}
inline void SGetSpaceBack::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.nickName)
}
inline std::string* SGetSpaceBack::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& SGetSpaceBack::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.nickName)
}
inline void SGetSpaceBack::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.nickName)
}
inline void SGetSpaceBack::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.nickName)
}
inline std::string* SGetSpaceBack::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_nickname() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.nickName)
}

// string avatar = 6;
inline void SGetSpaceBack::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::avatar() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.avatar)
  return _internal_avatar();
}
inline void SGetSpaceBack::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.avatar)
}
inline std::string* SGetSpaceBack::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& SGetSpaceBack::_internal_avatar() const {
  return avatar_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_avatar(const std::string& value) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_avatar(std::string&& value) {
  
  avatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.avatar)
}
inline void SGetSpaceBack::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.avatar)
}
inline void SGetSpaceBack::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.avatar)
}
inline std::string* SGetSpaceBack::_internal_mutable_avatar() {
  
  return avatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_avatar() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.avatar)
  
  return avatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.avatar)
}

// int32 relation = 7;
inline void SGetSpaceBack::clear_relation() {
  relation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::_internal_relation() const {
  return relation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::relation() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.relation)
  return _internal_relation();
}
inline void SGetSpaceBack::_internal_set_relation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  relation_ = value;
}
inline void SGetSpaceBack::set_relation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relation(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.relation)
}

// string androidUrl = 8;
inline void SGetSpaceBack::clear_androidurl() {
  androidurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::androidurl() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.androidUrl)
  return _internal_androidurl();
}
inline void SGetSpaceBack::set_androidurl(const std::string& value) {
  _internal_set_androidurl(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.androidUrl)
}
inline std::string* SGetSpaceBack::mutable_androidurl() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.androidUrl)
  return _internal_mutable_androidurl();
}
inline const std::string& SGetSpaceBack::_internal_androidurl() const {
  return androidurl_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_androidurl(const std::string& value) {
  
  androidurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_androidurl(std::string&& value) {
  
  androidurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.androidUrl)
}
inline void SGetSpaceBack::set_androidurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  androidurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.androidUrl)
}
inline void SGetSpaceBack::set_androidurl(const char* value, size_t size) {
  
  androidurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.androidUrl)
}
inline std::string* SGetSpaceBack::_internal_mutable_androidurl() {
  
  return androidurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_androidurl() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.androidUrl)
  
  return androidurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_androidurl(std::string* androidurl) {
  if (androidurl != nullptr) {
    
  } else {
    
  }
  androidurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), androidurl);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.androidUrl)
}

// string iosUrl = 9;
inline void SGetSpaceBack::clear_iosurl() {
  iosurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::iosurl() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.iosUrl)
  return _internal_iosurl();
}
inline void SGetSpaceBack::set_iosurl(const std::string& value) {
  _internal_set_iosurl(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.iosUrl)
}
inline std::string* SGetSpaceBack::mutable_iosurl() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.iosUrl)
  return _internal_mutable_iosurl();
}
inline const std::string& SGetSpaceBack::_internal_iosurl() const {
  return iosurl_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_iosurl(const std::string& value) {
  
  iosurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_iosurl(std::string&& value) {
  
  iosurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.iosUrl)
}
inline void SGetSpaceBack::set_iosurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iosurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.iosUrl)
}
inline void SGetSpaceBack::set_iosurl(const char* value, size_t size) {
  
  iosurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.iosUrl)
}
inline std::string* SGetSpaceBack::_internal_mutable_iosurl() {
  
  return iosurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_iosurl() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.iosUrl)
  
  return iosurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_iosurl(std::string* iosurl) {
  if (iosurl != nullptr) {
    
  } else {
    
  }
  iosurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iosurl);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.iosUrl)
}

// string windowsUrl = 10;
inline void SGetSpaceBack::clear_windowsurl() {
  windowsurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::windowsurl() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.windowsUrl)
  return _internal_windowsurl();
}
inline void SGetSpaceBack::set_windowsurl(const std::string& value) {
  _internal_set_windowsurl(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.windowsUrl)
}
inline std::string* SGetSpaceBack::mutable_windowsurl() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.windowsUrl)
  return _internal_mutable_windowsurl();
}
inline const std::string& SGetSpaceBack::_internal_windowsurl() const {
  return windowsurl_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_windowsurl(const std::string& value) {
  
  windowsurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_windowsurl(std::string&& value) {
  
  windowsurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.windowsUrl)
}
inline void SGetSpaceBack::set_windowsurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  windowsurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.windowsUrl)
}
inline void SGetSpaceBack::set_windowsurl(const char* value, size_t size) {
  
  windowsurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.windowsUrl)
}
inline std::string* SGetSpaceBack::_internal_mutable_windowsurl() {
  
  return windowsurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_windowsurl() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.windowsUrl)
  
  return windowsurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_windowsurl(std::string* windowsurl) {
  if (windowsurl != nullptr) {
    
  } else {
    
  }
  windowsurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), windowsurl);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.windowsUrl)
}

// int32 onlineTime = 11;
inline void SGetSpaceBack::clear_onlinetime() {
  onlinetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::_internal_onlinetime() const {
  return onlinetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::onlinetime() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.onlineTime)
  return _internal_onlinetime();
}
inline void SGetSpaceBack::_internal_set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onlinetime_ = value;
}
inline void SGetSpaceBack::set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onlinetime(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.onlineTime)
}

// int32 type = 12;
inline void SGetSpaceBack::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::type() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.type)
  return _internal_type();
}
inline void SGetSpaceBack::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SGetSpaceBack::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.type)
}

// int32 createUid = 13;
inline void SGetSpaceBack::clear_createuid() {
  createuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::_internal_createuid() const {
  return createuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::createuid() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.createUid)
  return _internal_createuid();
}
inline void SGetSpaceBack::_internal_set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  createuid_ = value;
}
inline void SGetSpaceBack::set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_createuid(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.createUid)
}

// int32 checkStatus = 14;
inline void SGetSpaceBack::clear_checkstatus() {
  checkstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::_internal_checkstatus() const {
  return checkstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::checkstatus() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.checkStatus)
  return _internal_checkstatus();
}
inline void SGetSpaceBack::_internal_set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  checkstatus_ = value;
}
inline void SGetSpaceBack::set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checkstatus(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.checkStatus)
}

// int32 SerialNumber = 15;
inline void SGetSpaceBack::clear_serialnumber() {
  serialnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::_internal_serialnumber() const {
  return serialnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceBack::serialnumber() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.SerialNumber)
  return _internal_serialnumber();
}
inline void SGetSpaceBack::_internal_set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serialnumber_ = value;
}
inline void SGetSpaceBack::set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serialnumber(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.SerialNumber)
}

// string configUrl = 16;
inline void SGetSpaceBack::clear_configurl() {
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::configurl() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.configUrl)
  return _internal_configurl();
}
inline void SGetSpaceBack::set_configurl(const std::string& value) {
  _internal_set_configurl(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.configUrl)
}
inline std::string* SGetSpaceBack::mutable_configurl() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.configUrl)
  return _internal_mutable_configurl();
}
inline const std::string& SGetSpaceBack::_internal_configurl() const {
  return configurl_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_configurl(const std::string& value) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_configurl(std::string&& value) {
  
  configurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.configUrl)
}
inline void SGetSpaceBack::set_configurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.configUrl)
}
inline void SGetSpaceBack::set_configurl(const char* value, size_t size) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.configUrl)
}
inline std::string* SGetSpaceBack::_internal_mutable_configurl() {
  
  return configurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_configurl() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.configUrl)
  
  return configurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_configurl(std::string* configurl) {
  if (configurl != nullptr) {
    
  } else {
    
  }
  configurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configurl);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.configUrl)
}

// string ServerLuaUrl = 17;
inline void SGetSpaceBack::clear_serverluaurl() {
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::serverluaurl() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.ServerLuaUrl)
  return _internal_serverluaurl();
}
inline void SGetSpaceBack::set_serverluaurl(const std::string& value) {
  _internal_set_serverluaurl(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.ServerLuaUrl)
}
inline std::string* SGetSpaceBack::mutable_serverluaurl() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.ServerLuaUrl)
  return _internal_mutable_serverluaurl();
}
inline const std::string& SGetSpaceBack::_internal_serverluaurl() const {
  return serverluaurl_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_serverluaurl(const std::string& value) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_serverluaurl(std::string&& value) {
  
  serverluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.ServerLuaUrl)
}
inline void SGetSpaceBack::set_serverluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.ServerLuaUrl)
}
inline void SGetSpaceBack::set_serverluaurl(const char* value, size_t size) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.ServerLuaUrl)
}
inline std::string* SGetSpaceBack::_internal_mutable_serverluaurl() {
  
  return serverluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_serverluaurl() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.ServerLuaUrl)
  
  return serverluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_serverluaurl(std::string* serverluaurl) {
  if (serverluaurl != nullptr) {
    
  } else {
    
  }
  serverluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverluaurl);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.ServerLuaUrl)
}

// string ClientLuaUrl = 18;
inline void SGetSpaceBack::clear_clientluaurl() {
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceBack::clientluaurl() const {
  // @@protoc_insertion_point(field_get:pb.SGetSpaceBack.ClientLuaUrl)
  return _internal_clientluaurl();
}
inline void SGetSpaceBack::set_clientluaurl(const std::string& value) {
  _internal_set_clientluaurl(value);
  // @@protoc_insertion_point(field_set:pb.SGetSpaceBack.ClientLuaUrl)
}
inline std::string* SGetSpaceBack::mutable_clientluaurl() {
  // @@protoc_insertion_point(field_mutable:pb.SGetSpaceBack.ClientLuaUrl)
  return _internal_mutable_clientluaurl();
}
inline const std::string& SGetSpaceBack::_internal_clientluaurl() const {
  return clientluaurl_.GetNoArena();
}
inline void SGetSpaceBack::_internal_set_clientluaurl(const std::string& value) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceBack::set_clientluaurl(std::string&& value) {
  
  clientluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SGetSpaceBack.ClientLuaUrl)
}
inline void SGetSpaceBack::set_clientluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SGetSpaceBack.ClientLuaUrl)
}
inline void SGetSpaceBack::set_clientluaurl(const char* value, size_t size) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SGetSpaceBack.ClientLuaUrl)
}
inline std::string* SGetSpaceBack::_internal_mutable_clientluaurl() {
  
  return clientluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceBack::release_clientluaurl() {
  // @@protoc_insertion_point(field_release:pb.SGetSpaceBack.ClientLuaUrl)
  
  return clientluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceBack::set_allocated_clientluaurl(std::string* clientluaurl) {
  if (clientluaurl != nullptr) {
    
  } else {
    
  }
  clientluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientluaurl);
  // @@protoc_insertion_point(field_set_allocated:pb.SGetSpaceBack.ClientLuaUrl)
}

// -------------------------------------------------------------------

// CGetLayPosition

// int32 houseId = 1;
inline void CGetLayPosition::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetLayPosition::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetLayPosition::houseid() const {
  // @@protoc_insertion_point(field_get:pb.CGetLayPosition.houseId)
  return _internal_houseid();
}
inline void CGetLayPosition::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CGetLayPosition::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:pb.CGetLayPosition.houseId)
}

// -------------------------------------------------------------------

// SGetLayPosition

// repeated .pb.BaseLayPosition layPosition = 1;
inline int SGetLayPosition::_internal_layposition_size() const {
  return layposition_.size();
}
inline int SGetLayPosition::layposition_size() const {
  return _internal_layposition_size();
}
inline void SGetLayPosition::clear_layposition() {
  layposition_.Clear();
}
inline ::pb::BaseLayPosition* SGetLayPosition::mutable_layposition(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SGetLayPosition.layPosition)
  return layposition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition >*
SGetLayPosition::mutable_layposition() {
  // @@protoc_insertion_point(field_mutable_list:pb.SGetLayPosition.layPosition)
  return &layposition_;
}
inline const ::pb::BaseLayPosition& SGetLayPosition::_internal_layposition(int index) const {
  return layposition_.Get(index);
}
inline const ::pb::BaseLayPosition& SGetLayPosition::layposition(int index) const {
  // @@protoc_insertion_point(field_get:pb.SGetLayPosition.layPosition)
  return _internal_layposition(index);
}
inline ::pb::BaseLayPosition* SGetLayPosition::_internal_add_layposition() {
  return layposition_.Add();
}
inline ::pb::BaseLayPosition* SGetLayPosition::add_layposition() {
  // @@protoc_insertion_point(field_add:pb.SGetLayPosition.layPosition)
  return _internal_add_layposition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition >&
SGetLayPosition::layposition() const {
  // @@protoc_insertion_point(field_list:pb.SGetLayPosition.layPosition)
  return layposition_;
}

// -------------------------------------------------------------------

// CSetLayPosition

// int32 houseId = 1;
inline void CSetLayPosition::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSetLayPosition::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSetLayPosition::houseid() const {
  // @@protoc_insertion_point(field_get:pb.CSetLayPosition.houseId)
  return _internal_houseid();
}
inline void CSetLayPosition::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CSetLayPosition::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:pb.CSetLayPosition.houseId)
}

// repeated .pb.BaseLayPosition LayPosition = 2;
inline int CSetLayPosition::_internal_layposition_size() const {
  return layposition_.size();
}
inline int CSetLayPosition::layposition_size() const {
  return _internal_layposition_size();
}
inline void CSetLayPosition::clear_layposition() {
  layposition_.Clear();
}
inline ::pb::BaseLayPosition* CSetLayPosition::mutable_layposition(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CSetLayPosition.LayPosition)
  return layposition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition >*
CSetLayPosition::mutable_layposition() {
  // @@protoc_insertion_point(field_mutable_list:pb.CSetLayPosition.LayPosition)
  return &layposition_;
}
inline const ::pb::BaseLayPosition& CSetLayPosition::_internal_layposition(int index) const {
  return layposition_.Get(index);
}
inline const ::pb::BaseLayPosition& CSetLayPosition::layposition(int index) const {
  // @@protoc_insertion_point(field_get:pb.CSetLayPosition.LayPosition)
  return _internal_layposition(index);
}
inline ::pb::BaseLayPosition* CSetLayPosition::_internal_add_layposition() {
  return layposition_.Add();
}
inline ::pb::BaseLayPosition* CSetLayPosition::add_layposition() {
  // @@protoc_insertion_point(field_add:pb.CSetLayPosition.LayPosition)
  return _internal_add_layposition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BaseLayPosition >&
CSetLayPosition::layposition() const {
  // @@protoc_insertion_point(field_list:pb.CSetLayPosition.LayPosition)
  return layposition_;
}

// -------------------------------------------------------------------

// SSetLayPosition

// repeated .pb.PayGoodsInfo payGoodsInfo = 1;
inline int SSetLayPosition::_internal_paygoodsinfo_size() const {
  return paygoodsinfo_.size();
}
inline int SSetLayPosition::paygoodsinfo_size() const {
  return _internal_paygoodsinfo_size();
}
inline void SSetLayPosition::clear_paygoodsinfo() {
  paygoodsinfo_.Clear();
}
inline ::pb::PayGoodsInfo* SSetLayPosition::mutable_paygoodsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SSetLayPosition.payGoodsInfo)
  return paygoodsinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PayGoodsInfo >*
SSetLayPosition::mutable_paygoodsinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.SSetLayPosition.payGoodsInfo)
  return &paygoodsinfo_;
}
inline const ::pb::PayGoodsInfo& SSetLayPosition::_internal_paygoodsinfo(int index) const {
  return paygoodsinfo_.Get(index);
}
inline const ::pb::PayGoodsInfo& SSetLayPosition::paygoodsinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.SSetLayPosition.payGoodsInfo)
  return _internal_paygoodsinfo(index);
}
inline ::pb::PayGoodsInfo* SSetLayPosition::_internal_add_paygoodsinfo() {
  return paygoodsinfo_.Add();
}
inline ::pb::PayGoodsInfo* SSetLayPosition::add_paygoodsinfo() {
  // @@protoc_insertion_point(field_add:pb.SSetLayPosition.payGoodsInfo)
  return _internal_add_paygoodsinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PayGoodsInfo >&
SSetLayPosition::paygoodsinfo() const {
  // @@protoc_insertion_point(field_list:pb.SSetLayPosition.payGoodsInfo)
  return paygoodsinfo_;
}

// bool setResult = 2;
inline void SSetLayPosition::clear_setresult() {
  setresult_ = false;
}
inline bool SSetLayPosition::_internal_setresult() const {
  return setresult_;
}
inline bool SSetLayPosition::setresult() const {
  // @@protoc_insertion_point(field_get:pb.SSetLayPosition.setResult)
  return _internal_setresult();
}
inline void SSetLayPosition::_internal_set_setresult(bool value) {
  
  setresult_ = value;
}
inline void SSetLayPosition::set_setresult(bool value) {
  _internal_set_setresult(value);
  // @@protoc_insertion_point(field_set:pb.SSetLayPosition.setResult)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_setSpace_2eproto
