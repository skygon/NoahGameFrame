// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chipMerge.proto

#include "chipMerge.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chipMerge_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prize_chipMerge_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUserInfo_userInfo_2eproto;
namespace chipMerge {
class PrizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prize> _instance;
} _Prize_default_instance_;
class SChipMergeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SChipMerge> _instance;
} _SChipMerge_default_instance_;
class SBroadcastChipMergeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBroadcastChipMerge> _instance;
} _SBroadcastChipMerge_default_instance_;
}  // namespace chipMerge
static void InitDefaultsscc_info_Prize_chipMerge_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chipMerge::_Prize_default_instance_;
    new (ptr) ::chipMerge::Prize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chipMerge::Prize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prize_chipMerge_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prize_chipMerge_2eproto}, {}};

static void InitDefaultsscc_info_SBroadcastChipMerge_chipMerge_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chipMerge::_SBroadcastChipMerge_default_instance_;
    new (ptr) ::chipMerge::SBroadcastChipMerge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chipMerge::SBroadcastChipMerge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SBroadcastChipMerge_chipMerge_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SBroadcastChipMerge_chipMerge_2eproto}, {
      &scc_info_SUserInfo_userInfo_2eproto.base,
      &scc_info_Prize_chipMerge_2eproto.base,}};

static void InitDefaultsscc_info_SChipMerge_chipMerge_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chipMerge::_SChipMerge_default_instance_;
    new (ptr) ::chipMerge::SChipMerge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chipMerge::SChipMerge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SChipMerge_chipMerge_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SChipMerge_chipMerge_2eproto}, {
      &scc_info_Prize_chipMerge_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chipMerge_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chipMerge_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chipMerge_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chipMerge_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chipMerge::Prize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chipMerge::Prize, name_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::Prize, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chipMerge::SChipMerge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chipMerge::SChipMerge, mergeflag_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SChipMerge, score_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SChipMerge, textcontent_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SChipMerge, prize_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SChipMerge, constelone_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SChipMerge, consteltwo_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SChipMerge, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chipMerge::SBroadcastChipMerge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chipMerge::SBroadcastChipMerge, mergeflag_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SBroadcastChipMerge, infolist_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SBroadcastChipMerge, score_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SBroadcastChipMerge, textcontent_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SBroadcastChipMerge, prize_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SBroadcastChipMerge, constelone_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SBroadcastChipMerge, consteltwo_),
  PROTOBUF_FIELD_OFFSET(::chipMerge::SBroadcastChipMerge, level_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chipMerge::Prize)},
  { 7, -1, sizeof(::chipMerge::SChipMerge)},
  { 19, -1, sizeof(::chipMerge::SBroadcastChipMerge)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chipMerge::_Prize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chipMerge::_SChipMerge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chipMerge::_SBroadcastChipMerge_default_instance_),
};

const char descriptor_table_protodef_chipMerge_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017chipMerge.proto\022\tchipMerge\032\016userInfo.p"
  "roto\"\"\n\005Prize\022\014\n\004name\030\001 \001(\t\022\013\n\003url\030\002 \001(\t"
  "\"\233\001\n\nSChipMerge\022\021\n\tmergeFlag\030\001 \001(\005\022\r\n\005sc"
  "ore\030\002 \001(\005\022\023\n\013textContent\030\003 \001(\t\022\037\n\005prize\030"
  "\004 \003(\0132\020.chipMerge.Prize\022\022\n\nconstelOne\030\005 "
  "\001(\005\022\022\n\nconstelTwo\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\"\313"
  "\001\n\023SBroadcastChipMerge\022\021\n\tmergeFlag\030\001 \001("
  "\005\022%\n\010infoList\030\002 \003(\0132\023.userInfo.SUserInfo"
  "\022\r\n\005score\030\003 \001(\005\022\023\n\013textContent\030\004 \001(\t\022\037\n\005"
  "prize\030\005 \003(\0132\020.chipMerge.Prize\022\022\n\nconstel"
  "One\030\006 \001(\005\022\022\n\nconstelTwo\030\007 \001(\005\022\r\n\005level\030\010"
  " \001(\005B%\n\030com.dayou.space.protobufB\tChipMe"
  "rgeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chipMerge_2eproto_deps[1] = {
  &::descriptor_table_userInfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chipMerge_2eproto_sccs[3] = {
  &scc_info_Prize_chipMerge_2eproto.base,
  &scc_info_SBroadcastChipMerge_chipMerge_2eproto.base,
  &scc_info_SChipMerge_chipMerge_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chipMerge_2eproto_once;
static bool descriptor_table_chipMerge_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chipMerge_2eproto = {
  &descriptor_table_chipMerge_2eproto_initialized, descriptor_table_protodef_chipMerge_2eproto, "chipMerge.proto", 491,
  &descriptor_table_chipMerge_2eproto_once, descriptor_table_chipMerge_2eproto_sccs, descriptor_table_chipMerge_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_chipMerge_2eproto::offsets,
  file_level_metadata_chipMerge_2eproto, 3, file_level_enum_descriptors_chipMerge_2eproto, file_level_service_descriptors_chipMerge_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chipMerge_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chipMerge_2eproto), true);
namespace chipMerge {

// ===================================================================

void Prize::InitAsDefaultInstance() {
}
class Prize::_Internal {
 public:
};

Prize::Prize()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chipMerge.Prize)
}
Prize::Prize(const Prize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:chipMerge.Prize)
}

void Prize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prize_chipMerge_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Prize::~Prize() {
  // @@protoc_insertion_point(destructor:chipMerge.Prize)
  SharedDtor();
}

void Prize::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Prize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prize& Prize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prize_chipMerge_2eproto.base);
  return *internal_default_instance();
}


void Prize::Clear() {
// @@protoc_insertion_point(message_clear_start:chipMerge.Prize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Prize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chipMerge.Prize.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chipMerge.Prize.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chipMerge.Prize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chipMerge.Prize.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chipMerge.Prize.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chipMerge.Prize)
  return target;
}

size_t Prize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chipMerge.Prize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chipMerge.Prize)
  GOOGLE_DCHECK_NE(&from, this);
  const Prize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chipMerge.Prize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chipMerge.Prize)
    MergeFrom(*source);
  }
}

void Prize::MergeFrom(const Prize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chipMerge.Prize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void Prize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chipMerge.Prize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prize::CopyFrom(const Prize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chipMerge.Prize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prize::IsInitialized() const {
  return true;
}

void Prize::InternalSwap(Prize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Prize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SChipMerge::InitAsDefaultInstance() {
}
class SChipMerge::_Internal {
 public:
};

SChipMerge::SChipMerge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chipMerge.SChipMerge)
}
SChipMerge::SChipMerge(const SChipMerge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      prize_(from.prize_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  textcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_textcontent().empty()) {
    textcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.textcontent_);
  }
  ::memcpy(&mergeflag_, &from.mergeflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&mergeflag_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:chipMerge.SChipMerge)
}

void SChipMerge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SChipMerge_chipMerge_2eproto.base);
  textcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mergeflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&mergeflag_)) + sizeof(level_));
}

SChipMerge::~SChipMerge() {
  // @@protoc_insertion_point(destructor:chipMerge.SChipMerge)
  SharedDtor();
}

void SChipMerge::SharedDtor() {
  textcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SChipMerge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SChipMerge& SChipMerge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SChipMerge_chipMerge_2eproto.base);
  return *internal_default_instance();
}


void SChipMerge::Clear() {
// @@protoc_insertion_point(message_clear_start:chipMerge.SChipMerge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prize_.Clear();
  textcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mergeflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&mergeflag_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* SChipMerge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mergeFlag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mergeflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string textContent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_textcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chipMerge.SChipMerge.textContent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .chipMerge.Prize prize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prize(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 constelOne = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          constelone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 constelTwo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          consteltwo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChipMerge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chipMerge.SChipMerge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mergeFlag = 1;
  if (this->mergeflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mergeflag(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // string textContent = 3;
  if (this->textcontent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_textcontent().data(), static_cast<int>(this->_internal_textcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chipMerge.SChipMerge.textContent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_textcontent(), target);
  }

  // repeated .chipMerge.Prize prize = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prize_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_prize(i), target, stream);
  }

  // int32 constelOne = 5;
  if (this->constelone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_constelone(), target);
  }

  // int32 constelTwo = 6;
  if (this->consteltwo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_consteltwo(), target);
  }

  // int32 level = 7;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chipMerge.SChipMerge)
  return target;
}

size_t SChipMerge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chipMerge.SChipMerge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chipMerge.Prize prize = 4;
  total_size += 1UL * this->_internal_prize_size();
  for (const auto& msg : this->prize_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string textContent = 3;
  if (this->textcontent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_textcontent());
  }

  // int32 mergeFlag = 1;
  if (this->mergeflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mergeflag());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 constelOne = 5;
  if (this->constelone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_constelone());
  }

  // int32 constelTwo = 6;
  if (this->consteltwo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_consteltwo());
  }

  // int32 level = 7;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SChipMerge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chipMerge.SChipMerge)
  GOOGLE_DCHECK_NE(&from, this);
  const SChipMerge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SChipMerge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chipMerge.SChipMerge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chipMerge.SChipMerge)
    MergeFrom(*source);
  }
}

void SChipMerge::MergeFrom(const SChipMerge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chipMerge.SChipMerge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prize_.MergeFrom(from.prize_);
  if (from.textcontent().size() > 0) {

    textcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.textcontent_);
  }
  if (from.mergeflag() != 0) {
    _internal_set_mergeflag(from._internal_mergeflag());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.constelone() != 0) {
    _internal_set_constelone(from._internal_constelone());
  }
  if (from.consteltwo() != 0) {
    _internal_set_consteltwo(from._internal_consteltwo());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void SChipMerge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chipMerge.SChipMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChipMerge::CopyFrom(const SChipMerge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chipMerge.SChipMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChipMerge::IsInitialized() const {
  return true;
}

void SChipMerge::InternalSwap(SChipMerge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prize_.InternalSwap(&other->prize_);
  textcontent_.Swap(&other->textcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mergeflag_, other->mergeflag_);
  swap(score_, other->score_);
  swap(constelone_, other->constelone_);
  swap(consteltwo_, other->consteltwo_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SChipMerge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBroadcastChipMerge::InitAsDefaultInstance() {
}
class SBroadcastChipMerge::_Internal {
 public:
};

void SBroadcastChipMerge::clear_infolist() {
  infolist_.Clear();
}
SBroadcastChipMerge::SBroadcastChipMerge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chipMerge.SBroadcastChipMerge)
}
SBroadcastChipMerge::SBroadcastChipMerge(const SBroadcastChipMerge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infolist_(from.infolist_),
      prize_(from.prize_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  textcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_textcontent().empty()) {
    textcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.textcontent_);
  }
  ::memcpy(&mergeflag_, &from.mergeflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&mergeflag_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:chipMerge.SBroadcastChipMerge)
}

void SBroadcastChipMerge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBroadcastChipMerge_chipMerge_2eproto.base);
  textcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mergeflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&mergeflag_)) + sizeof(level_));
}

SBroadcastChipMerge::~SBroadcastChipMerge() {
  // @@protoc_insertion_point(destructor:chipMerge.SBroadcastChipMerge)
  SharedDtor();
}

void SBroadcastChipMerge::SharedDtor() {
  textcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SBroadcastChipMerge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBroadcastChipMerge& SBroadcastChipMerge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBroadcastChipMerge_chipMerge_2eproto.base);
  return *internal_default_instance();
}


void SBroadcastChipMerge::Clear() {
// @@protoc_insertion_point(message_clear_start:chipMerge.SBroadcastChipMerge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infolist_.Clear();
  prize_.Clear();
  textcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mergeflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&mergeflag_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* SBroadcastChipMerge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mergeFlag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mergeflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .userInfo.SUserInfo infoList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string textContent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_textcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chipMerge.SBroadcastChipMerge.textContent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .chipMerge.Prize prize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prize(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 constelOne = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          constelone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 constelTwo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          consteltwo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBroadcastChipMerge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chipMerge.SBroadcastChipMerge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mergeFlag = 1;
  if (this->mergeflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mergeflag(), target);
  }

  // repeated .userInfo.SUserInfo infoList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infolist(i), target, stream);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // string textContent = 4;
  if (this->textcontent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_textcontent().data(), static_cast<int>(this->_internal_textcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chipMerge.SBroadcastChipMerge.textContent");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_textcontent(), target);
  }

  // repeated .chipMerge.Prize prize = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prize_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_prize(i), target, stream);
  }

  // int32 constelOne = 6;
  if (this->constelone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_constelone(), target);
  }

  // int32 constelTwo = 7;
  if (this->consteltwo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_consteltwo(), target);
  }

  // int32 level = 8;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chipMerge.SBroadcastChipMerge)
  return target;
}

size_t SBroadcastChipMerge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chipMerge.SBroadcastChipMerge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userInfo.SUserInfo infoList = 2;
  total_size += 1UL * this->_internal_infolist_size();
  for (const auto& msg : this->infolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .chipMerge.Prize prize = 5;
  total_size += 1UL * this->_internal_prize_size();
  for (const auto& msg : this->prize_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string textContent = 4;
  if (this->textcontent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_textcontent());
  }

  // int32 mergeFlag = 1;
  if (this->mergeflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mergeflag());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 constelOne = 6;
  if (this->constelone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_constelone());
  }

  // int32 constelTwo = 7;
  if (this->consteltwo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_consteltwo());
  }

  // int32 level = 8;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBroadcastChipMerge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chipMerge.SBroadcastChipMerge)
  GOOGLE_DCHECK_NE(&from, this);
  const SBroadcastChipMerge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBroadcastChipMerge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chipMerge.SBroadcastChipMerge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chipMerge.SBroadcastChipMerge)
    MergeFrom(*source);
  }
}

void SBroadcastChipMerge::MergeFrom(const SBroadcastChipMerge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chipMerge.SBroadcastChipMerge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infolist_.MergeFrom(from.infolist_);
  prize_.MergeFrom(from.prize_);
  if (from.textcontent().size() > 0) {

    textcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.textcontent_);
  }
  if (from.mergeflag() != 0) {
    _internal_set_mergeflag(from._internal_mergeflag());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.constelone() != 0) {
    _internal_set_constelone(from._internal_constelone());
  }
  if (from.consteltwo() != 0) {
    _internal_set_consteltwo(from._internal_consteltwo());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void SBroadcastChipMerge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chipMerge.SBroadcastChipMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBroadcastChipMerge::CopyFrom(const SBroadcastChipMerge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chipMerge.SBroadcastChipMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBroadcastChipMerge::IsInitialized() const {
  return true;
}

void SBroadcastChipMerge::InternalSwap(SBroadcastChipMerge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infolist_.InternalSwap(&other->infolist_);
  prize_.InternalSwap(&other->prize_);
  textcontent_.Swap(&other->textcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mergeflag_, other->mergeflag_);
  swap(score_, other->score_);
  swap(constelone_, other->constelone_);
  swap(consteltwo_, other->consteltwo_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBroadcastChipMerge::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chipMerge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chipMerge::Prize* Arena::CreateMaybeMessage< ::chipMerge::Prize >(Arena* arena) {
  return Arena::CreateInternal< ::chipMerge::Prize >(arena);
}
template<> PROTOBUF_NOINLINE ::chipMerge::SChipMerge* Arena::CreateMaybeMessage< ::chipMerge::SChipMerge >(Arena* arena) {
  return Arena::CreateInternal< ::chipMerge::SChipMerge >(arena);
}
template<> PROTOBUF_NOINLINE ::chipMerge::SBroadcastChipMerge* Arena::CreateMaybeMessage< ::chipMerge::SBroadcastChipMerge >(Arena* arena) {
  return Arena::CreateInternal< ::chipMerge::SBroadcastChipMerge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
