// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bulletScreen.proto

#include "bulletScreen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bulletScreen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBulletScreenUser_bulletScreen_2eproto;
namespace bulletScreen {
class CBulletScreenUserListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CBulletScreenUserList> _instance;
} _CBulletScreenUserList_default_instance_;
class BBulletScreenUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BBulletScreenUser> _instance;
} _BBulletScreenUser_default_instance_;
class SBulletScreenUserListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBulletScreenUserList> _instance;
} _SBulletScreenUserList_default_instance_;
class SBulletScreenUserCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBulletScreenUserCreate> _instance;
} _SBulletScreenUserCreate_default_instance_;
class SBulletScreenUserDeleteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBulletScreenUserDelete> _instance;
} _SBulletScreenUserDelete_default_instance_;
class SBulletScreenUserTalkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBulletScreenUserTalk> _instance;
} _SBulletScreenUserTalk_default_instance_;
}  // namespace bulletScreen
static void InitDefaultsscc_info_BBulletScreenUser_bulletScreen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bulletScreen::_BBulletScreenUser_default_instance_;
    new (ptr) ::bulletScreen::BBulletScreenUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bulletScreen::BBulletScreenUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBulletScreenUser_bulletScreen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BBulletScreenUser_bulletScreen_2eproto}, {}};

static void InitDefaultsscc_info_CBulletScreenUserList_bulletScreen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bulletScreen::_CBulletScreenUserList_default_instance_;
    new (ptr) ::bulletScreen::CBulletScreenUserList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bulletScreen::CBulletScreenUserList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CBulletScreenUserList_bulletScreen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CBulletScreenUserList_bulletScreen_2eproto}, {}};

static void InitDefaultsscc_info_SBulletScreenUserCreate_bulletScreen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bulletScreen::_SBulletScreenUserCreate_default_instance_;
    new (ptr) ::bulletScreen::SBulletScreenUserCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bulletScreen::SBulletScreenUserCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SBulletScreenUserCreate_bulletScreen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SBulletScreenUserCreate_bulletScreen_2eproto}, {
      &scc_info_BBulletScreenUser_bulletScreen_2eproto.base,}};

static void InitDefaultsscc_info_SBulletScreenUserDelete_bulletScreen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bulletScreen::_SBulletScreenUserDelete_default_instance_;
    new (ptr) ::bulletScreen::SBulletScreenUserDelete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bulletScreen::SBulletScreenUserDelete::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SBulletScreenUserDelete_bulletScreen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SBulletScreenUserDelete_bulletScreen_2eproto}, {}};

static void InitDefaultsscc_info_SBulletScreenUserList_bulletScreen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bulletScreen::_SBulletScreenUserList_default_instance_;
    new (ptr) ::bulletScreen::SBulletScreenUserList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bulletScreen::SBulletScreenUserList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SBulletScreenUserList_bulletScreen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SBulletScreenUserList_bulletScreen_2eproto}, {
      &scc_info_BBulletScreenUser_bulletScreen_2eproto.base,}};

static void InitDefaultsscc_info_SBulletScreenUserTalk_bulletScreen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bulletScreen::_SBulletScreenUserTalk_default_instance_;
    new (ptr) ::bulletScreen::SBulletScreenUserTalk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bulletScreen::SBulletScreenUserTalk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SBulletScreenUserTalk_bulletScreen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SBulletScreenUserTalk_bulletScreen_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bulletScreen_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bulletScreen_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bulletScreen_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bulletScreen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::CBulletScreenUserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::BBulletScreenUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::BBulletScreenUser, temp_id_),
  PROTOBUF_FIELD_OFFSET(::bulletScreen::BBulletScreenUser, nick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::SBulletScreenUserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::SBulletScreenUserList, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::SBulletScreenUserCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::SBulletScreenUserCreate, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::SBulletScreenUserDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::SBulletScreenUserDelete, temp_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::SBulletScreenUserTalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bulletScreen::SBulletScreenUserTalk, temp_id_),
  PROTOBUF_FIELD_OFFSET(::bulletScreen::SBulletScreenUserTalk, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bulletScreen::CBulletScreenUserList)},
  { 5, -1, sizeof(::bulletScreen::BBulletScreenUser)},
  { 12, -1, sizeof(::bulletScreen::SBulletScreenUserList)},
  { 18, -1, sizeof(::bulletScreen::SBulletScreenUserCreate)},
  { 24, -1, sizeof(::bulletScreen::SBulletScreenUserDelete)},
  { 30, -1, sizeof(::bulletScreen::SBulletScreenUserTalk)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bulletScreen::_CBulletScreenUserList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bulletScreen::_BBulletScreenUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bulletScreen::_SBulletScreenUserList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bulletScreen::_SBulletScreenUserCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bulletScreen::_SBulletScreenUserDelete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bulletScreen::_SBulletScreenUserTalk_default_instance_),
};

const char descriptor_table_protodef_bulletScreen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022bulletScreen.proto\022\014bulletScreen\"\027\n\025CB"
  "ulletScreenUserList\"2\n\021BBulletScreenUser"
  "\022\017\n\007temp_id\030\001 \001(\005\022\014\n\004nick\030\002 \001(\t\"G\n\025SBull"
  "etScreenUserList\022.\n\005users\030\001 \003(\0132\037.bullet"
  "Screen.BBulletScreenUser\"H\n\027SBulletScree"
  "nUserCreate\022-\n\004user\030\001 \001(\0132\037.bulletScreen"
  ".BBulletScreenUser\"*\n\027SBulletScreenUserD"
  "elete\022\017\n\007temp_id\030\001 \003(\005\"9\n\025SBulletScreenU"
  "serTalk\022\017\n\007temp_id\030\001 \001(\005\022\017\n\007message\030\002 \001("
  "\tB1\n\030com.dayou.space.protobufB\014BulletScr"
  "eenZ\007./pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bulletScreen_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bulletScreen_2eproto_sccs[6] = {
  &scc_info_BBulletScreenUser_bulletScreen_2eproto.base,
  &scc_info_CBulletScreenUserList_bulletScreen_2eproto.base,
  &scc_info_SBulletScreenUserCreate_bulletScreen_2eproto.base,
  &scc_info_SBulletScreenUserDelete_bulletScreen_2eproto.base,
  &scc_info_SBulletScreenUserList_bulletScreen_2eproto.base,
  &scc_info_SBulletScreenUserTalk_bulletScreen_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bulletScreen_2eproto_once;
static bool descriptor_table_bulletScreen_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bulletScreen_2eproto = {
  &descriptor_table_bulletScreen_2eproto_initialized, descriptor_table_protodef_bulletScreen_2eproto, "bulletScreen.proto", 420,
  &descriptor_table_bulletScreen_2eproto_once, descriptor_table_bulletScreen_2eproto_sccs, descriptor_table_bulletScreen_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_bulletScreen_2eproto::offsets,
  file_level_metadata_bulletScreen_2eproto, 6, file_level_enum_descriptors_bulletScreen_2eproto, file_level_service_descriptors_bulletScreen_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bulletScreen_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bulletScreen_2eproto), true);
namespace bulletScreen {

// ===================================================================

void CBulletScreenUserList::InitAsDefaultInstance() {
}
class CBulletScreenUserList::_Internal {
 public:
};

CBulletScreenUserList::CBulletScreenUserList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bulletScreen.CBulletScreenUserList)
}
CBulletScreenUserList::CBulletScreenUserList(const CBulletScreenUserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bulletScreen.CBulletScreenUserList)
}

void CBulletScreenUserList::SharedCtor() {
}

CBulletScreenUserList::~CBulletScreenUserList() {
  // @@protoc_insertion_point(destructor:bulletScreen.CBulletScreenUserList)
  SharedDtor();
}

void CBulletScreenUserList::SharedDtor() {
}

void CBulletScreenUserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBulletScreenUserList& CBulletScreenUserList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CBulletScreenUserList_bulletScreen_2eproto.base);
  return *internal_default_instance();
}


void CBulletScreenUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:bulletScreen.CBulletScreenUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CBulletScreenUserList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBulletScreenUserList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bulletScreen.CBulletScreenUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bulletScreen.CBulletScreenUserList)
  return target;
}

size_t CBulletScreenUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bulletScreen.CBulletScreenUserList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBulletScreenUserList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bulletScreen.CBulletScreenUserList)
  GOOGLE_DCHECK_NE(&from, this);
  const CBulletScreenUserList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBulletScreenUserList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bulletScreen.CBulletScreenUserList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bulletScreen.CBulletScreenUserList)
    MergeFrom(*source);
  }
}

void CBulletScreenUserList::MergeFrom(const CBulletScreenUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bulletScreen.CBulletScreenUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBulletScreenUserList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bulletScreen.CBulletScreenUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBulletScreenUserList::CopyFrom(const CBulletScreenUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bulletScreen.CBulletScreenUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBulletScreenUserList::IsInitialized() const {
  return true;
}

void CBulletScreenUserList::InternalSwap(CBulletScreenUserList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBulletScreenUserList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BBulletScreenUser::InitAsDefaultInstance() {
}
class BBulletScreenUser::_Internal {
 public:
};

BBulletScreenUser::BBulletScreenUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bulletScreen.BBulletScreenUser)
}
BBulletScreenUser::BBulletScreenUser(const BBulletScreenUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  temp_id_ = from.temp_id_;
  // @@protoc_insertion_point(copy_constructor:bulletScreen.BBulletScreenUser)
}

void BBulletScreenUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BBulletScreenUser_bulletScreen_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  temp_id_ = 0;
}

BBulletScreenUser::~BBulletScreenUser() {
  // @@protoc_insertion_point(destructor:bulletScreen.BBulletScreenUser)
  SharedDtor();
}

void BBulletScreenUser::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BBulletScreenUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBulletScreenUser& BBulletScreenUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BBulletScreenUser_bulletScreen_2eproto.base);
  return *internal_default_instance();
}


void BBulletScreenUser::Clear() {
// @@protoc_insertion_point(message_clear_start:bulletScreen.BBulletScreenUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  temp_id_ = 0;
  _internal_metadata_.Clear();
}

const char* BBulletScreenUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 temp_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          temp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bulletScreen.BBulletScreenUser.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBulletScreenUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bulletScreen.BBulletScreenUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 temp_id = 1;
  if (this->temp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_temp_id(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bulletScreen.BBulletScreenUser.nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bulletScreen.BBulletScreenUser)
  return target;
}

size_t BBulletScreenUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bulletScreen.BBulletScreenUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // int32 temp_id = 1;
  if (this->temp_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_temp_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBulletScreenUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bulletScreen.BBulletScreenUser)
  GOOGLE_DCHECK_NE(&from, this);
  const BBulletScreenUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBulletScreenUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bulletScreen.BBulletScreenUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bulletScreen.BBulletScreenUser)
    MergeFrom(*source);
  }
}

void BBulletScreenUser::MergeFrom(const BBulletScreenUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bulletScreen.BBulletScreenUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.temp_id() != 0) {
    _internal_set_temp_id(from._internal_temp_id());
  }
}

void BBulletScreenUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bulletScreen.BBulletScreenUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBulletScreenUser::CopyFrom(const BBulletScreenUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bulletScreen.BBulletScreenUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBulletScreenUser::IsInitialized() const {
  return true;
}

void BBulletScreenUser::InternalSwap(BBulletScreenUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(temp_id_, other->temp_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBulletScreenUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBulletScreenUserList::InitAsDefaultInstance() {
}
class SBulletScreenUserList::_Internal {
 public:
};

SBulletScreenUserList::SBulletScreenUserList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bulletScreen.SBulletScreenUserList)
}
SBulletScreenUserList::SBulletScreenUserList(const SBulletScreenUserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bulletScreen.SBulletScreenUserList)
}

void SBulletScreenUserList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBulletScreenUserList_bulletScreen_2eproto.base);
}

SBulletScreenUserList::~SBulletScreenUserList() {
  // @@protoc_insertion_point(destructor:bulletScreen.SBulletScreenUserList)
  SharedDtor();
}

void SBulletScreenUserList::SharedDtor() {
}

void SBulletScreenUserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBulletScreenUserList& SBulletScreenUserList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBulletScreenUserList_bulletScreen_2eproto.base);
  return *internal_default_instance();
}


void SBulletScreenUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:bulletScreen.SBulletScreenUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear();
}

const char* SBulletScreenUserList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bulletScreen.BBulletScreenUser users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBulletScreenUserList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bulletScreen.SBulletScreenUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bulletScreen.BBulletScreenUser users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bulletScreen.SBulletScreenUserList)
  return target;
}

size_t SBulletScreenUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bulletScreen.SBulletScreenUserList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bulletScreen.BBulletScreenUser users = 1;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBulletScreenUserList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bulletScreen.SBulletScreenUserList)
  GOOGLE_DCHECK_NE(&from, this);
  const SBulletScreenUserList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBulletScreenUserList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bulletScreen.SBulletScreenUserList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bulletScreen.SBulletScreenUserList)
    MergeFrom(*source);
  }
}

void SBulletScreenUserList::MergeFrom(const SBulletScreenUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bulletScreen.SBulletScreenUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void SBulletScreenUserList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bulletScreen.SBulletScreenUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBulletScreenUserList::CopyFrom(const SBulletScreenUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bulletScreen.SBulletScreenUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBulletScreenUserList::IsInitialized() const {
  return true;
}

void SBulletScreenUserList::InternalSwap(SBulletScreenUserList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBulletScreenUserList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBulletScreenUserCreate::InitAsDefaultInstance() {
  ::bulletScreen::_SBulletScreenUserCreate_default_instance_._instance.get_mutable()->user_ = const_cast< ::bulletScreen::BBulletScreenUser*>(
      ::bulletScreen::BBulletScreenUser::internal_default_instance());
}
class SBulletScreenUserCreate::_Internal {
 public:
  static const ::bulletScreen::BBulletScreenUser& user(const SBulletScreenUserCreate* msg);
};

const ::bulletScreen::BBulletScreenUser&
SBulletScreenUserCreate::_Internal::user(const SBulletScreenUserCreate* msg) {
  return *msg->user_;
}
SBulletScreenUserCreate::SBulletScreenUserCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bulletScreen.SBulletScreenUserCreate)
}
SBulletScreenUserCreate::SBulletScreenUserCreate(const SBulletScreenUserCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::bulletScreen::BBulletScreenUser(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bulletScreen.SBulletScreenUserCreate)
}

void SBulletScreenUserCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBulletScreenUserCreate_bulletScreen_2eproto.base);
  user_ = nullptr;
}

SBulletScreenUserCreate::~SBulletScreenUserCreate() {
  // @@protoc_insertion_point(destructor:bulletScreen.SBulletScreenUserCreate)
  SharedDtor();
}

void SBulletScreenUserCreate::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
}

void SBulletScreenUserCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBulletScreenUserCreate& SBulletScreenUserCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBulletScreenUserCreate_bulletScreen_2eproto.base);
  return *internal_default_instance();
}


void SBulletScreenUserCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:bulletScreen.SBulletScreenUserCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SBulletScreenUserCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bulletScreen.BBulletScreenUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBulletScreenUserCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bulletScreen.SBulletScreenUserCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bulletScreen.BBulletScreenUser user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bulletScreen.SBulletScreenUserCreate)
  return target;
}

size_t SBulletScreenUserCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bulletScreen.SBulletScreenUserCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bulletScreen.BBulletScreenUser user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBulletScreenUserCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bulletScreen.SBulletScreenUserCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const SBulletScreenUserCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBulletScreenUserCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bulletScreen.SBulletScreenUserCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bulletScreen.SBulletScreenUserCreate)
    MergeFrom(*source);
  }
}

void SBulletScreenUserCreate::MergeFrom(const SBulletScreenUserCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bulletScreen.SBulletScreenUserCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::bulletScreen::BBulletScreenUser::MergeFrom(from._internal_user());
  }
}

void SBulletScreenUserCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bulletScreen.SBulletScreenUserCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBulletScreenUserCreate::CopyFrom(const SBulletScreenUserCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bulletScreen.SBulletScreenUserCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBulletScreenUserCreate::IsInitialized() const {
  return true;
}

void SBulletScreenUserCreate::InternalSwap(SBulletScreenUserCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBulletScreenUserCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBulletScreenUserDelete::InitAsDefaultInstance() {
}
class SBulletScreenUserDelete::_Internal {
 public:
};

SBulletScreenUserDelete::SBulletScreenUserDelete()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bulletScreen.SBulletScreenUserDelete)
}
SBulletScreenUserDelete::SBulletScreenUserDelete(const SBulletScreenUserDelete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      temp_id_(from.temp_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bulletScreen.SBulletScreenUserDelete)
}

void SBulletScreenUserDelete::SharedCtor() {
}

SBulletScreenUserDelete::~SBulletScreenUserDelete() {
  // @@protoc_insertion_point(destructor:bulletScreen.SBulletScreenUserDelete)
  SharedDtor();
}

void SBulletScreenUserDelete::SharedDtor() {
}

void SBulletScreenUserDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBulletScreenUserDelete& SBulletScreenUserDelete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBulletScreenUserDelete_bulletScreen_2eproto.base);
  return *internal_default_instance();
}


void SBulletScreenUserDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:bulletScreen.SBulletScreenUserDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temp_id_.Clear();
  _internal_metadata_.Clear();
}

const char* SBulletScreenUserDelete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 temp_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_temp_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_temp_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBulletScreenUserDelete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bulletScreen.SBulletScreenUserDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 temp_id = 1;
  {
    int byte_size = _temp_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_temp_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bulletScreen.SBulletScreenUserDelete)
  return target;
}

size_t SBulletScreenUserDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bulletScreen.SBulletScreenUserDelete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 temp_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->temp_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _temp_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBulletScreenUserDelete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bulletScreen.SBulletScreenUserDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const SBulletScreenUserDelete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBulletScreenUserDelete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bulletScreen.SBulletScreenUserDelete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bulletScreen.SBulletScreenUserDelete)
    MergeFrom(*source);
  }
}

void SBulletScreenUserDelete::MergeFrom(const SBulletScreenUserDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bulletScreen.SBulletScreenUserDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  temp_id_.MergeFrom(from.temp_id_);
}

void SBulletScreenUserDelete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bulletScreen.SBulletScreenUserDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBulletScreenUserDelete::CopyFrom(const SBulletScreenUserDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bulletScreen.SBulletScreenUserDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBulletScreenUserDelete::IsInitialized() const {
  return true;
}

void SBulletScreenUserDelete::InternalSwap(SBulletScreenUserDelete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  temp_id_.InternalSwap(&other->temp_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBulletScreenUserDelete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBulletScreenUserTalk::InitAsDefaultInstance() {
}
class SBulletScreenUserTalk::_Internal {
 public:
};

SBulletScreenUserTalk::SBulletScreenUserTalk()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bulletScreen.SBulletScreenUserTalk)
}
SBulletScreenUserTalk::SBulletScreenUserTalk(const SBulletScreenUserTalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  temp_id_ = from.temp_id_;
  // @@protoc_insertion_point(copy_constructor:bulletScreen.SBulletScreenUserTalk)
}

void SBulletScreenUserTalk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBulletScreenUserTalk_bulletScreen_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  temp_id_ = 0;
}

SBulletScreenUserTalk::~SBulletScreenUserTalk() {
  // @@protoc_insertion_point(destructor:bulletScreen.SBulletScreenUserTalk)
  SharedDtor();
}

void SBulletScreenUserTalk::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SBulletScreenUserTalk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBulletScreenUserTalk& SBulletScreenUserTalk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBulletScreenUserTalk_bulletScreen_2eproto.base);
  return *internal_default_instance();
}


void SBulletScreenUserTalk::Clear() {
// @@protoc_insertion_point(message_clear_start:bulletScreen.SBulletScreenUserTalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  temp_id_ = 0;
  _internal_metadata_.Clear();
}

const char* SBulletScreenUserTalk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 temp_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          temp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bulletScreen.SBulletScreenUserTalk.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBulletScreenUserTalk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bulletScreen.SBulletScreenUserTalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 temp_id = 1;
  if (this->temp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_temp_id(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bulletScreen.SBulletScreenUserTalk.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bulletScreen.SBulletScreenUserTalk)
  return target;
}

size_t SBulletScreenUserTalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bulletScreen.SBulletScreenUserTalk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 temp_id = 1;
  if (this->temp_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_temp_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBulletScreenUserTalk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bulletScreen.SBulletScreenUserTalk)
  GOOGLE_DCHECK_NE(&from, this);
  const SBulletScreenUserTalk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBulletScreenUserTalk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bulletScreen.SBulletScreenUserTalk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bulletScreen.SBulletScreenUserTalk)
    MergeFrom(*source);
  }
}

void SBulletScreenUserTalk::MergeFrom(const SBulletScreenUserTalk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bulletScreen.SBulletScreenUserTalk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.temp_id() != 0) {
    _internal_set_temp_id(from._internal_temp_id());
  }
}

void SBulletScreenUserTalk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bulletScreen.SBulletScreenUserTalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBulletScreenUserTalk::CopyFrom(const SBulletScreenUserTalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bulletScreen.SBulletScreenUserTalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBulletScreenUserTalk::IsInitialized() const {
  return true;
}

void SBulletScreenUserTalk::InternalSwap(SBulletScreenUserTalk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(temp_id_, other->temp_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBulletScreenUserTalk::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bulletScreen
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bulletScreen::CBulletScreenUserList* Arena::CreateMaybeMessage< ::bulletScreen::CBulletScreenUserList >(Arena* arena) {
  return Arena::CreateInternal< ::bulletScreen::CBulletScreenUserList >(arena);
}
template<> PROTOBUF_NOINLINE ::bulletScreen::BBulletScreenUser* Arena::CreateMaybeMessage< ::bulletScreen::BBulletScreenUser >(Arena* arena) {
  return Arena::CreateInternal< ::bulletScreen::BBulletScreenUser >(arena);
}
template<> PROTOBUF_NOINLINE ::bulletScreen::SBulletScreenUserList* Arena::CreateMaybeMessage< ::bulletScreen::SBulletScreenUserList >(Arena* arena) {
  return Arena::CreateInternal< ::bulletScreen::SBulletScreenUserList >(arena);
}
template<> PROTOBUF_NOINLINE ::bulletScreen::SBulletScreenUserCreate* Arena::CreateMaybeMessage< ::bulletScreen::SBulletScreenUserCreate >(Arena* arena) {
  return Arena::CreateInternal< ::bulletScreen::SBulletScreenUserCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::bulletScreen::SBulletScreenUserDelete* Arena::CreateMaybeMessage< ::bulletScreen::SBulletScreenUserDelete >(Arena* arena) {
  return Arena::CreateInternal< ::bulletScreen::SBulletScreenUserDelete >(arena);
}
template<> PROTOBUF_NOINLINE ::bulletScreen::SBulletScreenUserTalk* Arena::CreateMaybeMessage< ::bulletScreen::SBulletScreenUserTalk >(Arena* arena) {
  return Arena::CreateInternal< ::bulletScreen::SBulletScreenUserTalk >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
