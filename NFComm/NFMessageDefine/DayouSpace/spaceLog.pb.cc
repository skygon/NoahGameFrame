// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceLog.proto

#include "spaceLog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_spaceLog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BSpaceLogInfo_spaceLog_2eproto;
namespace spaceLog {
class CSpaceLogListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSpaceLogList> _instance;
} _CSpaceLogList_default_instance_;
class SSpaceLogListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpaceLogList> _instance;
} _SSpaceLogList_default_instance_;
class BSpaceLogInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BSpaceLogInfo> _instance;
} _BSpaceLogInfo_default_instance_;
}  // namespace spaceLog
static void InitDefaultsscc_info_BSpaceLogInfo_spaceLog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceLog::_BSpaceLogInfo_default_instance_;
    new (ptr) ::spaceLog::BSpaceLogInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceLog::BSpaceLogInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BSpaceLogInfo_spaceLog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BSpaceLogInfo_spaceLog_2eproto}, {}};

static void InitDefaultsscc_info_CSpaceLogList_spaceLog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceLog::_CSpaceLogList_default_instance_;
    new (ptr) ::spaceLog::CSpaceLogList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceLog::CSpaceLogList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSpaceLogList_spaceLog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSpaceLogList_spaceLog_2eproto}, {}};

static void InitDefaultsscc_info_SSpaceLogList_spaceLog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spaceLog::_SSpaceLogList_default_instance_;
    new (ptr) ::spaceLog::SSpaceLogList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spaceLog::SSpaceLogList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSpaceLogList_spaceLog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSpaceLogList_spaceLog_2eproto}, {
      &scc_info_BSpaceLogInfo_spaceLog_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spaceLog_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_spaceLog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spaceLog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spaceLog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceLog::CSpaceLogList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceLog::CSpaceLogList, houseid_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::CSpaceLogList, type_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::CSpaceLogList, page_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::CSpaceLogList, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceLog::SSpaceLogList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceLog::SSpaceLogList, type_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::SSpaceLogList, loglist_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::SSpaceLogList, total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spaceLog::BSpaceLogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spaceLog::BSpaceLogInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::BSpaceLogInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::BSpaceLogInfo, headpic_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::BSpaceLogInfo, time_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::BSpaceLogInfo, type_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::BSpaceLogInfo, log_),
  PROTOBUF_FIELD_OFFSET(::spaceLog::BSpaceLogInfo, followstatus_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::spaceLog::CSpaceLogList)},
  { 9, -1, sizeof(::spaceLog::SSpaceLogList)},
  { 17, -1, sizeof(::spaceLog::BSpaceLogInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceLog::_CSpaceLogList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceLog::_SSpaceLogList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spaceLog::_BSpaceLogInfo_default_instance_),
};

const char descriptor_table_protodef_spaceLog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016spaceLog.proto\022\010spaceLog\"J\n\rCSpaceLogL"
  "ist\022\017\n\007houseId\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\014\n\004pa"
  "ge\030\003 \001(\005\022\014\n\004size\030\004 \001(\005\"V\n\rSSpaceLogList\022"
  "\014\n\004type\030\001 \001(\005\022(\n\007logList\030\002 \003(\0132\027.spaceLo"
  "g.BSpaceLogInfo\022\r\n\005total\030\003 \001(\005\"z\n\rBSpace"
  "LogInfo\022\013\n\003uid\030\001 \001(\005\022\014\n\004nick\030\002 \001(\t\022\017\n\007he"
  "adPic\030\003 \001(\t\022\014\n\004time\030\004 \001(\003\022\014\n\004type\030\005 \001(\005\022"
  "\013\n\003log\030\006 \001(\t\022\024\n\014followStatus\030\007 \001(\005B-\n\030co"
  "m.dayou.space.protobufB\010SpaceLogZ\007./pb;p"
  "bb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_spaceLog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_spaceLog_2eproto_sccs[3] = {
  &scc_info_BSpaceLogInfo_spaceLog_2eproto.base,
  &scc_info_CSpaceLogList_spaceLog_2eproto.base,
  &scc_info_SSpaceLogList_spaceLog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spaceLog_2eproto_once;
static bool descriptor_table_spaceLog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceLog_2eproto = {
  &descriptor_table_spaceLog_2eproto_initialized, descriptor_table_protodef_spaceLog_2eproto, "spaceLog.proto", 369,
  &descriptor_table_spaceLog_2eproto_once, descriptor_table_spaceLog_2eproto_sccs, descriptor_table_spaceLog_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_spaceLog_2eproto::offsets,
  file_level_metadata_spaceLog_2eproto, 3, file_level_enum_descriptors_spaceLog_2eproto, file_level_service_descriptors_spaceLog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spaceLog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_spaceLog_2eproto), true);
namespace spaceLog {

// ===================================================================

void CSpaceLogList::InitAsDefaultInstance() {
}
class CSpaceLogList::_Internal {
 public:
};

CSpaceLogList::CSpaceLogList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceLog.CSpaceLogList)
}
CSpaceLogList::CSpaceLogList(const CSpaceLogList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:spaceLog.CSpaceLogList)
}

void CSpaceLogList::SharedCtor() {
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(size_));
}

CSpaceLogList::~CSpaceLogList() {
  // @@protoc_insertion_point(destructor:spaceLog.CSpaceLogList)
  SharedDtor();
}

void CSpaceLogList::SharedDtor() {
}

void CSpaceLogList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSpaceLogList& CSpaceLogList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSpaceLogList_spaceLog_2eproto.base);
  return *internal_default_instance();
}


void CSpaceLogList::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceLog.CSpaceLogList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

const char* CSpaceLogList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSpaceLogList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceLog.CSpaceLogList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_page(), target);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceLog.CSpaceLogList)
  return target;
}

size_t CSpaceLogList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceLog.CSpaceLogList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  // int32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSpaceLogList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceLog.CSpaceLogList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSpaceLogList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSpaceLogList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceLog.CSpaceLogList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceLog.CSpaceLogList)
    MergeFrom(*source);
  }
}

void CSpaceLogList::MergeFrom(const CSpaceLogList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceLog.CSpaceLogList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void CSpaceLogList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceLog.CSpaceLogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSpaceLogList::CopyFrom(const CSpaceLogList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceLog.CSpaceLogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSpaceLogList::IsInitialized() const {
  return true;
}

void CSpaceLogList::InternalSwap(CSpaceLogList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
  swap(type_, other->type_);
  swap(page_, other->page_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSpaceLogList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpaceLogList::InitAsDefaultInstance() {
}
class SSpaceLogList::_Internal {
 public:
};

SSpaceLogList::SSpaceLogList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceLog.SSpaceLogList)
}
SSpaceLogList::SSpaceLogList(const SSpaceLogList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      loglist_(from.loglist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&type_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:spaceLog.SSpaceLogList)
}

void SSpaceLogList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSpaceLogList_spaceLog_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&type_)) + sizeof(total_));
}

SSpaceLogList::~SSpaceLogList() {
  // @@protoc_insertion_point(destructor:spaceLog.SSpaceLogList)
  SharedDtor();
}

void SSpaceLogList::SharedDtor() {
}

void SSpaceLogList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpaceLogList& SSpaceLogList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpaceLogList_spaceLog_2eproto.base);
  return *internal_default_instance();
}


void SSpaceLogList::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceLog.SSpaceLogList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loglist_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&type_)) + sizeof(total_));
  _internal_metadata_.Clear();
}

const char* SSpaceLogList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .spaceLog.BSpaceLogInfo logList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loglist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpaceLogList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceLog.SSpaceLogList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .spaceLog.BSpaceLogInfo logList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loglist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_loglist(i), target, stream);
  }

  // int32 total = 3;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceLog.SSpaceLogList)
  return target;
}

size_t SSpaceLogList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceLog.SSpaceLogList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spaceLog.BSpaceLogInfo logList = 2;
  total_size += 1UL * this->_internal_loglist_size();
  for (const auto& msg : this->loglist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpaceLogList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceLog.SSpaceLogList)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpaceLogList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpaceLogList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceLog.SSpaceLogList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceLog.SSpaceLogList)
    MergeFrom(*source);
  }
}

void SSpaceLogList::MergeFrom(const SSpaceLogList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceLog.SSpaceLogList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loglist_.MergeFrom(from.loglist_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void SSpaceLogList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceLog.SSpaceLogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpaceLogList::CopyFrom(const SSpaceLogList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceLog.SSpaceLogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpaceLogList::IsInitialized() const {
  return true;
}

void SSpaceLogList::InternalSwap(SSpaceLogList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  loglist_.InternalSwap(&other->loglist_);
  swap(type_, other->type_);
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpaceLogList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BSpaceLogInfo::InitAsDefaultInstance() {
}
class BSpaceLogInfo::_Internal {
 public:
};

BSpaceLogInfo::BSpaceLogInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceLog.BSpaceLogInfo)
}
BSpaceLogInfo::BSpaceLogInfo(const BSpaceLogInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headpic().empty()) {
    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log().empty()) {
    log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&followstatus_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
  // @@protoc_insertion_point(copy_constructor:spaceLog.BSpaceLogInfo)
}

void BSpaceLogInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BSpaceLogInfo_spaceLog_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&followstatus_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
}

BSpaceLogInfo::~BSpaceLogInfo() {
  // @@protoc_insertion_point(destructor:spaceLog.BSpaceLogInfo)
  SharedDtor();
}

void BSpaceLogInfo::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BSpaceLogInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BSpaceLogInfo& BSpaceLogInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BSpaceLogInfo_spaceLog_2eproto.base);
  return *internal_default_instance();
}


void BSpaceLogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceLog.BSpaceLogInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&followstatus_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
  _internal_metadata_.Clear();
}

const char* BSpaceLogInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceLog.BSpaceLogInfo.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headPic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_headpic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceLog.BSpaceLogInfo.headPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spaceLog.BSpaceLogInfo.log"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 followStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          followstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BSpaceLogInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spaceLog.BSpaceLogInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceLog.BSpaceLogInfo.nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick(), target);
  }

  // string headPic = 3;
  if (this->headpic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headpic().data(), static_cast<int>(this->_internal_headpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceLog.BSpaceLogInfo.headPic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_headpic(), target);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // string log = 6;
  if (this->log().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spaceLog.BSpaceLogInfo.log");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_log(), target);
  }

  // int32 followStatus = 7;
  if (this->followstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_followstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spaceLog.BSpaceLogInfo)
  return target;
}

size_t BSpaceLogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceLog.BSpaceLogInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string headPic = 3;
  if (this->headpic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headpic());
  }

  // string log = 6;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int32 followStatus = 7;
  if (this->followstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_followstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BSpaceLogInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceLog.BSpaceLogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BSpaceLogInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BSpaceLogInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceLog.BSpaceLogInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceLog.BSpaceLogInfo)
    MergeFrom(*source);
  }
}

void BSpaceLogInfo::MergeFrom(const BSpaceLogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceLog.BSpaceLogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.headpic().size() > 0) {

    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.followstatus() != 0) {
    _internal_set_followstatus(from._internal_followstatus());
  }
}

void BSpaceLogInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceLog.BSpaceLogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSpaceLogInfo::CopyFrom(const BSpaceLogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceLog.BSpaceLogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSpaceLogInfo::IsInitialized() const {
  return true;
}

void BSpaceLogInfo::InternalSwap(BSpaceLogInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headpic_.Swap(&other->headpic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_.Swap(&other->log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(followstatus_, other->followstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BSpaceLogInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spaceLog
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::spaceLog::CSpaceLogList* Arena::CreateMaybeMessage< ::spaceLog::CSpaceLogList >(Arena* arena) {
  return Arena::CreateInternal< ::spaceLog::CSpaceLogList >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceLog::SSpaceLogList* Arena::CreateMaybeMessage< ::spaceLog::SSpaceLogList >(Arena* arena) {
  return Arena::CreateInternal< ::spaceLog::SSpaceLogList >(arena);
}
template<> PROTOBUF_NOINLINE ::spaceLog::BSpaceLogInfo* Arena::CreateMaybeMessage< ::spaceLog::BSpaceLogInfo >(Arena* arena) {
  return Arena::CreateInternal< ::spaceLog::BSpaceLogInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
