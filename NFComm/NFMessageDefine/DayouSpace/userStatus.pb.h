// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userStatus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userStatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userStatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userStatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userStatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userStatus_2eproto;
namespace userStatus {
class CSpeakStatus;
class CSpeakStatusDefaultTypeInternal;
extern CSpeakStatusDefaultTypeInternal _CSpeakStatus_default_instance_;
class SSpeakStatus;
class SSpeakStatusDefaultTypeInternal;
extern SSpeakStatusDefaultTypeInternal _SSpeakStatus_default_instance_;
}  // namespace userStatus
PROTOBUF_NAMESPACE_OPEN
template<> ::userStatus::CSpeakStatus* Arena::CreateMaybeMessage<::userStatus::CSpeakStatus>(Arena*);
template<> ::userStatus::SSpeakStatus* Arena::CreateMaybeMessage<::userStatus::SSpeakStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userStatus {

// ===================================================================

class CSpeakStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userStatus.CSpeakStatus) */ {
 public:
  CSpeakStatus();
  virtual ~CSpeakStatus();

  CSpeakStatus(const CSpeakStatus& from);
  CSpeakStatus(CSpeakStatus&& from) noexcept
    : CSpeakStatus() {
    *this = ::std::move(from);
  }

  inline CSpeakStatus& operator=(const CSpeakStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpeakStatus& operator=(CSpeakStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpeakStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpeakStatus* internal_default_instance() {
    return reinterpret_cast<const CSpeakStatus*>(
               &_CSpeakStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSpeakStatus& a, CSpeakStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpeakStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpeakStatus* New() const final {
    return CreateMaybeMessage<CSpeakStatus>(nullptr);
  }

  CSpeakStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpeakStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpeakStatus& from);
  void MergeFrom(const CSpeakStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpeakStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userStatus.CSpeakStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userStatus_2eproto);
    return ::descriptor_table_userStatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userStatus.CSpeakStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userStatus_2eproto;
};
// -------------------------------------------------------------------

class SSpeakStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userStatus.SSpeakStatus) */ {
 public:
  SSpeakStatus();
  virtual ~SSpeakStatus();

  SSpeakStatus(const SSpeakStatus& from);
  SSpeakStatus(SSpeakStatus&& from) noexcept
    : SSpeakStatus() {
    *this = ::std::move(from);
  }

  inline SSpeakStatus& operator=(const SSpeakStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpeakStatus& operator=(SSpeakStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpeakStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpeakStatus* internal_default_instance() {
    return reinterpret_cast<const SSpeakStatus*>(
               &_SSpeakStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSpeakStatus& a, SSpeakStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpeakStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpeakStatus* New() const final {
    return CreateMaybeMessage<SSpeakStatus>(nullptr);
  }

  SSpeakStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpeakStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpeakStatus& from);
  void MergeFrom(const SSpeakStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpeakStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userStatus.SSpeakStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userStatus_2eproto);
    return ::descriptor_table_userStatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kNpcBanFieldNumber = 2,
    kNpcBanEndTimeFieldNumber = 3,
    kServerBanFieldNumber = 4,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 npcBan = 2;
  void clear_npcban();
  ::PROTOBUF_NAMESPACE_ID::int32 npcban() const;
  void set_npcban(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_npcban() const;
  void _internal_set_npcban(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 npcBanEndTime = 3;
  void clear_npcbanendtime();
  ::PROTOBUF_NAMESPACE_ID::int64 npcbanendtime() const;
  void set_npcbanendtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_npcbanendtime() const;
  void _internal_set_npcbanendtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 serverBan = 4;
  void clear_serverban();
  ::PROTOBUF_NAMESPACE_ID::int32 serverban() const;
  void set_serverban(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverban() const;
  void _internal_set_serverban(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userStatus.SSpeakStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 npcban_;
  ::PROTOBUF_NAMESPACE_ID::int64 npcbanendtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverban_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userStatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSpeakStatus

// int32 uid = 1;
inline void CSpeakStatus::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpeakStatus::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpeakStatus::uid() const {
  // @@protoc_insertion_point(field_get:userStatus.CSpeakStatus.uid)
  return _internal_uid();
}
inline void CSpeakStatus::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CSpeakStatus::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userStatus.CSpeakStatus.uid)
}

// -------------------------------------------------------------------

// SSpeakStatus

// int32 uid = 1;
inline void SSpeakStatus::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpeakStatus::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpeakStatus::uid() const {
  // @@protoc_insertion_point(field_get:userStatus.SSpeakStatus.uid)
  return _internal_uid();
}
inline void SSpeakStatus::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SSpeakStatus::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userStatus.SSpeakStatus.uid)
}

// int32 npcBan = 2;
inline void SSpeakStatus::clear_npcban() {
  npcban_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpeakStatus::_internal_npcban() const {
  return npcban_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpeakStatus::npcban() const {
  // @@protoc_insertion_point(field_get:userStatus.SSpeakStatus.npcBan)
  return _internal_npcban();
}
inline void SSpeakStatus::_internal_set_npcban(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  npcban_ = value;
}
inline void SSpeakStatus::set_npcban(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_npcban(value);
  // @@protoc_insertion_point(field_set:userStatus.SSpeakStatus.npcBan)
}

// int64 npcBanEndTime = 3;
inline void SSpeakStatus::clear_npcbanendtime() {
  npcbanendtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SSpeakStatus::_internal_npcbanendtime() const {
  return npcbanendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SSpeakStatus::npcbanendtime() const {
  // @@protoc_insertion_point(field_get:userStatus.SSpeakStatus.npcBanEndTime)
  return _internal_npcbanendtime();
}
inline void SSpeakStatus::_internal_set_npcbanendtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  npcbanendtime_ = value;
}
inline void SSpeakStatus::set_npcbanendtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_npcbanendtime(value);
  // @@protoc_insertion_point(field_set:userStatus.SSpeakStatus.npcBanEndTime)
}

// int32 serverBan = 4;
inline void SSpeakStatus::clear_serverban() {
  serverban_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpeakStatus::_internal_serverban() const {
  return serverban_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpeakStatus::serverban() const {
  // @@protoc_insertion_point(field_get:userStatus.SSpeakStatus.serverBan)
  return _internal_serverban();
}
inline void SSpeakStatus::_internal_set_serverban(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverban_ = value;
}
inline void SSpeakStatus::set_serverban(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverban(value);
  // @@protoc_insertion_point(field_set:userStatus.SSpeakStatus.serverBan)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userStatus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userStatus_2eproto
