// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userInfo_2eproto;
namespace userInfo {
class CChangeUserIcon;
class CChangeUserIconDefaultTypeInternal;
extern CChangeUserIconDefaultTypeInternal _CChangeUserIcon_default_instance_;
class CChangeUserSign;
class CChangeUserSignDefaultTypeInternal;
extern CChangeUserSignDefaultTypeInternal _CChangeUserSign_default_instance_;
class CUserInfo;
class CUserInfoDefaultTypeInternal;
extern CUserInfoDefaultTypeInternal _CUserInfo_default_instance_;
class SChangeUserIcon;
class SChangeUserIconDefaultTypeInternal;
extern SChangeUserIconDefaultTypeInternal _SChangeUserIcon_default_instance_;
class SChangeUserSign;
class SChangeUserSignDefaultTypeInternal;
extern SChangeUserSignDefaultTypeInternal _SChangeUserSign_default_instance_;
class SInAccountUnbind;
class SInAccountUnbindDefaultTypeInternal;
extern SInAccountUnbindDefaultTypeInternal _SInAccountUnbind_default_instance_;
class SUserAttrFromNft;
class SUserAttrFromNftDefaultTypeInternal;
extern SUserAttrFromNftDefaultTypeInternal _SUserAttrFromNft_default_instance_;
class SUserInfo;
class SUserInfoDefaultTypeInternal;
extern SUserInfoDefaultTypeInternal _SUserInfo_default_instance_;
}  // namespace userInfo
PROTOBUF_NAMESPACE_OPEN
template<> ::userInfo::CChangeUserIcon* Arena::CreateMaybeMessage<::userInfo::CChangeUserIcon>(Arena*);
template<> ::userInfo::CChangeUserSign* Arena::CreateMaybeMessage<::userInfo::CChangeUserSign>(Arena*);
template<> ::userInfo::CUserInfo* Arena::CreateMaybeMessage<::userInfo::CUserInfo>(Arena*);
template<> ::userInfo::SChangeUserIcon* Arena::CreateMaybeMessage<::userInfo::SChangeUserIcon>(Arena*);
template<> ::userInfo::SChangeUserSign* Arena::CreateMaybeMessage<::userInfo::SChangeUserSign>(Arena*);
template<> ::userInfo::SInAccountUnbind* Arena::CreateMaybeMessage<::userInfo::SInAccountUnbind>(Arena*);
template<> ::userInfo::SUserAttrFromNft* Arena::CreateMaybeMessage<::userInfo::SUserAttrFromNft>(Arena*);
template<> ::userInfo::SUserInfo* Arena::CreateMaybeMessage<::userInfo::SUserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userInfo {

// ===================================================================

class CUserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfo.CUserInfo) */ {
 public:
  CUserInfo();
  virtual ~CUserInfo();

  CUserInfo(const CUserInfo& from);
  CUserInfo(CUserInfo&& from) noexcept
    : CUserInfo() {
    *this = ::std::move(from);
  }

  inline CUserInfo& operator=(const CUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserInfo& operator=(CUserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserInfo* internal_default_instance() {
    return reinterpret_cast<const CUserInfo*>(
               &_CUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CUserInfo& a, CUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUserInfo* New() const final {
    return CreateMaybeMessage<CUserInfo>(nullptr);
  }

  CUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUserInfo& from);
  void MergeFrom(const CUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfo.CUserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfo_2eproto);
    return ::descriptor_table_userInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIpFieldNumber = 2,
    kOsFieldNumber = 1,
  };
  // string clientIp = 2;
  void clear_clientip();
  const std::string& clientip() const;
  void set_clientip(const std::string& value);
  void set_clientip(std::string&& value);
  void set_clientip(const char* value);
  void set_clientip(const char* value, size_t size);
  std::string* mutable_clientip();
  std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // int32 os = 1;
  void clear_os();
  ::PROTOBUF_NAMESPACE_ID::int32 os() const;
  void set_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os() const;
  void _internal_set_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userInfo.CUserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfo_2eproto;
};
// -------------------------------------------------------------------

class SUserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfo.SUserInfo) */ {
 public:
  SUserInfo();
  virtual ~SUserInfo();

  SUserInfo(const SUserInfo& from);
  SUserInfo(SUserInfo&& from) noexcept
    : SUserInfo() {
    *this = ::std::move(from);
  }

  inline SUserInfo& operator=(const SUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUserInfo& operator=(SUserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUserInfo* internal_default_instance() {
    return reinterpret_cast<const SUserInfo*>(
               &_SUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SUserInfo& a, SUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SUserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUserInfo* New() const final {
    return CreateMaybeMessage<SUserInfo>(nullptr);
  }

  SUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUserInfo& from);
  void MergeFrom(const SUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfo.SUserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfo_2eproto);
    return ::descriptor_table_userInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarColorFieldNumber = 3,
    kIdentifierIdFieldNumber = 4,
    kImTokenFieldNumber = 7,
    kPhoneFieldNumber = 8,
    kNickFieldNumber = 9,
    kUserIconFieldNumber = 11,
    kUnionidFieldNumber = 12,
    kSignFieldNumber = 13,
    kInUidFieldNumber = 15,
    kIpCityFieldNumber = 17,
    kTitleFieldNumber = 21,
    kCertificationFieldNumber = 22,
    kUidFieldNumber = 1,
    kAvatarFieldNumber = 2,
    kNameplateFieldNumber = 5,
    kAuthorityIDFieldNumber = 6,
    kAvatarKeyFieldNumber = 10,
    kOsFieldNumber = 14,
    kYuanshenAvatarKeyFieldNumber = 16,
    kIsCreatorFieldNumber = 18,
    kGenderFieldNumber = 19,
    kHiphopStarTokenFieldNumber = 20,
  };
  // string avatarColor = 3;
  void clear_avatarcolor();
  const std::string& avatarcolor() const;
  void set_avatarcolor(const std::string& value);
  void set_avatarcolor(std::string&& value);
  void set_avatarcolor(const char* value);
  void set_avatarcolor(const char* value, size_t size);
  std::string* mutable_avatarcolor();
  std::string* release_avatarcolor();
  void set_allocated_avatarcolor(std::string* avatarcolor);
  private:
  const std::string& _internal_avatarcolor() const;
  void _internal_set_avatarcolor(const std::string& value);
  std::string* _internal_mutable_avatarcolor();
  public:

  // string identifierId = 4;
  void clear_identifierid();
  const std::string& identifierid() const;
  void set_identifierid(const std::string& value);
  void set_identifierid(std::string&& value);
  void set_identifierid(const char* value);
  void set_identifierid(const char* value, size_t size);
  std::string* mutable_identifierid();
  std::string* release_identifierid();
  void set_allocated_identifierid(std::string* identifierid);
  private:
  const std::string& _internal_identifierid() const;
  void _internal_set_identifierid(const std::string& value);
  std::string* _internal_mutable_identifierid();
  public:

  // string imToken = 7;
  void clear_imtoken();
  const std::string& imtoken() const;
  void set_imtoken(const std::string& value);
  void set_imtoken(std::string&& value);
  void set_imtoken(const char* value);
  void set_imtoken(const char* value, size_t size);
  std::string* mutable_imtoken();
  std::string* release_imtoken();
  void set_allocated_imtoken(std::string* imtoken);
  private:
  const std::string& _internal_imtoken() const;
  void _internal_set_imtoken(const std::string& value);
  std::string* _internal_mutable_imtoken();
  public:

  // string phone = 8;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string nick = 9;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string userIcon = 11;
  void clear_usericon();
  const std::string& usericon() const;
  void set_usericon(const std::string& value);
  void set_usericon(std::string&& value);
  void set_usericon(const char* value);
  void set_usericon(const char* value, size_t size);
  std::string* mutable_usericon();
  std::string* release_usericon();
  void set_allocated_usericon(std::string* usericon);
  private:
  const std::string& _internal_usericon() const;
  void _internal_set_usericon(const std::string& value);
  std::string* _internal_mutable_usericon();
  public:

  // string unionid = 12;
  void clear_unionid();
  const std::string& unionid() const;
  void set_unionid(const std::string& value);
  void set_unionid(std::string&& value);
  void set_unionid(const char* value);
  void set_unionid(const char* value, size_t size);
  std::string* mutable_unionid();
  std::string* release_unionid();
  void set_allocated_unionid(std::string* unionid);
  private:
  const std::string& _internal_unionid() const;
  void _internal_set_unionid(const std::string& value);
  std::string* _internal_mutable_unionid();
  public:

  // string sign = 13;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // string inUid = 15;
  void clear_inuid();
  const std::string& inuid() const;
  void set_inuid(const std::string& value);
  void set_inuid(std::string&& value);
  void set_inuid(const char* value);
  void set_inuid(const char* value, size_t size);
  std::string* mutable_inuid();
  std::string* release_inuid();
  void set_allocated_inuid(std::string* inuid);
  private:
  const std::string& _internal_inuid() const;
  void _internal_set_inuid(const std::string& value);
  std::string* _internal_mutable_inuid();
  public:

  // string ipCity = 17;
  void clear_ipcity();
  const std::string& ipcity() const;
  void set_ipcity(const std::string& value);
  void set_ipcity(std::string&& value);
  void set_ipcity(const char* value);
  void set_ipcity(const char* value, size_t size);
  std::string* mutable_ipcity();
  std::string* release_ipcity();
  void set_allocated_ipcity(std::string* ipcity);
  private:
  const std::string& _internal_ipcity() const;
  void _internal_set_ipcity(const std::string& value);
  std::string* _internal_mutable_ipcity();
  public:

  // string title = 21;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string certification = 22;
  void clear_certification();
  const std::string& certification() const;
  void set_certification(const std::string& value);
  void set_certification(std::string&& value);
  void set_certification(const char* value);
  void set_certification(const char* value, size_t size);
  std::string* mutable_certification();
  std::string* release_certification();
  void set_allocated_certification(std::string* certification);
  private:
  const std::string& _internal_certification() const;
  void _internal_set_certification(const std::string& value);
  std::string* _internal_mutable_certification();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatar = 2;
  void clear_avatar();
  ::PROTOBUF_NAMESPACE_ID::int32 avatar() const;
  void set_avatar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatar() const;
  void _internal_set_avatar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nameplate = 5;
  void clear_nameplate();
  ::PROTOBUF_NAMESPACE_ID::int32 nameplate() const;
  void set_nameplate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nameplate() const;
  void _internal_set_nameplate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 authorityID = 6;
  void clear_authorityid();
  ::PROTOBUF_NAMESPACE_ID::int32 authorityid() const;
  void set_authorityid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_authorityid() const;
  void _internal_set_authorityid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarKey = 10;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 os = 14;
  void clear_os();
  ::PROTOBUF_NAMESPACE_ID::int32 os() const;
  void set_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os() const;
  void _internal_set_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 yuanshenAvatarKey = 16;
  void clear_yuanshenavatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 yuanshenavatarkey() const;
  void set_yuanshenavatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yuanshenavatarkey() const;
  void _internal_set_yuanshenavatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isCreator = 18;
  void clear_iscreator();
  ::PROTOBUF_NAMESPACE_ID::int32 iscreator() const;
  void set_iscreator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iscreator() const;
  void _internal_set_iscreator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gender = 19;
  void clear_gender();
  ::PROTOBUF_NAMESPACE_ID::int32 gender() const;
  void set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gender() const;
  void _internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hiphopStarToken = 20;
  void clear_hiphopstartoken();
  ::PROTOBUF_NAMESPACE_ID::int32 hiphopstartoken() const;
  void set_hiphopstartoken(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hiphopstartoken() const;
  void _internal_set_hiphopstartoken(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userInfo.SUserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarcolor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifierid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usericon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipcity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certification_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_;
  ::PROTOBUF_NAMESPACE_ID::int32 nameplate_;
  ::PROTOBUF_NAMESPACE_ID::int32 authorityid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_;
  ::PROTOBUF_NAMESPACE_ID::int32 yuanshenavatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 iscreator_;
  ::PROTOBUF_NAMESPACE_ID::int32 gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 hiphopstartoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfo_2eproto;
};
// -------------------------------------------------------------------

class SUserAttrFromNft :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfo.SUserAttrFromNft) */ {
 public:
  SUserAttrFromNft();
  virtual ~SUserAttrFromNft();

  SUserAttrFromNft(const SUserAttrFromNft& from);
  SUserAttrFromNft(SUserAttrFromNft&& from) noexcept
    : SUserAttrFromNft() {
    *this = ::std::move(from);
  }

  inline SUserAttrFromNft& operator=(const SUserAttrFromNft& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUserAttrFromNft& operator=(SUserAttrFromNft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUserAttrFromNft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUserAttrFromNft* internal_default_instance() {
    return reinterpret_cast<const SUserAttrFromNft*>(
               &_SUserAttrFromNft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SUserAttrFromNft& a, SUserAttrFromNft& b) {
    a.Swap(&b);
  }
  inline void Swap(SUserAttrFromNft* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUserAttrFromNft* New() const final {
    return CreateMaybeMessage<SUserAttrFromNft>(nullptr);
  }

  SUserAttrFromNft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUserAttrFromNft>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUserAttrFromNft& from);
  void MergeFrom(const SUserAttrFromNft& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUserAttrFromNft* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfo.SUserAttrFromNft";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfo_2eproto);
    return ::descriptor_table_userInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 1,
  };
  // int32 attr = 1;
  void clear_attr();
  ::PROTOBUF_NAMESPACE_ID::int32 attr() const;
  void set_attr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attr() const;
  void _internal_set_attr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userInfo.SUserAttrFromNft)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 attr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfo_2eproto;
};
// -------------------------------------------------------------------

class CChangeUserSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfo.CChangeUserSign) */ {
 public:
  CChangeUserSign();
  virtual ~CChangeUserSign();

  CChangeUserSign(const CChangeUserSign& from);
  CChangeUserSign(CChangeUserSign&& from) noexcept
    : CChangeUserSign() {
    *this = ::std::move(from);
  }

  inline CChangeUserSign& operator=(const CChangeUserSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline CChangeUserSign& operator=(CChangeUserSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CChangeUserSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CChangeUserSign* internal_default_instance() {
    return reinterpret_cast<const CChangeUserSign*>(
               &_CChangeUserSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CChangeUserSign& a, CChangeUserSign& b) {
    a.Swap(&b);
  }
  inline void Swap(CChangeUserSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CChangeUserSign* New() const final {
    return CreateMaybeMessage<CChangeUserSign>(nullptr);
  }

  CChangeUserSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CChangeUserSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CChangeUserSign& from);
  void MergeFrom(const CChangeUserSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CChangeUserSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfo.CChangeUserSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfo_2eproto);
    return ::descriptor_table_userInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignFieldNumber = 1,
  };
  // string sign = 1;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // @@protoc_insertion_point(class_scope:userInfo.CChangeUserSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfo_2eproto;
};
// -------------------------------------------------------------------

class SChangeUserSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfo.SChangeUserSign) */ {
 public:
  SChangeUserSign();
  virtual ~SChangeUserSign();

  SChangeUserSign(const SChangeUserSign& from);
  SChangeUserSign(SChangeUserSign&& from) noexcept
    : SChangeUserSign() {
    *this = ::std::move(from);
  }

  inline SChangeUserSign& operator=(const SChangeUserSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChangeUserSign& operator=(SChangeUserSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChangeUserSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChangeUserSign* internal_default_instance() {
    return reinterpret_cast<const SChangeUserSign*>(
               &_SChangeUserSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SChangeUserSign& a, SChangeUserSign& b) {
    a.Swap(&b);
  }
  inline void Swap(SChangeUserSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChangeUserSign* New() const final {
    return CreateMaybeMessage<SChangeUserSign>(nullptr);
  }

  SChangeUserSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChangeUserSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChangeUserSign& from);
  void MergeFrom(const SChangeUserSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChangeUserSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfo.SChangeUserSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfo_2eproto);
    return ::descriptor_table_userInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userInfo.SChangeUserSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfo_2eproto;
};
// -------------------------------------------------------------------

class CChangeUserIcon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfo.CChangeUserIcon) */ {
 public:
  CChangeUserIcon();
  virtual ~CChangeUserIcon();

  CChangeUserIcon(const CChangeUserIcon& from);
  CChangeUserIcon(CChangeUserIcon&& from) noexcept
    : CChangeUserIcon() {
    *this = ::std::move(from);
  }

  inline CChangeUserIcon& operator=(const CChangeUserIcon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CChangeUserIcon& operator=(CChangeUserIcon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CChangeUserIcon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CChangeUserIcon* internal_default_instance() {
    return reinterpret_cast<const CChangeUserIcon*>(
               &_CChangeUserIcon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CChangeUserIcon& a, CChangeUserIcon& b) {
    a.Swap(&b);
  }
  inline void Swap(CChangeUserIcon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CChangeUserIcon* New() const final {
    return CreateMaybeMessage<CChangeUserIcon>(nullptr);
  }

  CChangeUserIcon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CChangeUserIcon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CChangeUserIcon& from);
  void MergeFrom(const CChangeUserIcon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CChangeUserIcon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfo.CChangeUserIcon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfo_2eproto);
    return ::descriptor_table_userInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIconFieldNumber = 1,
  };
  // string userIcon = 1;
  void clear_usericon();
  const std::string& usericon() const;
  void set_usericon(const std::string& value);
  void set_usericon(std::string&& value);
  void set_usericon(const char* value);
  void set_usericon(const char* value, size_t size);
  std::string* mutable_usericon();
  std::string* release_usericon();
  void set_allocated_usericon(std::string* usericon);
  private:
  const std::string& _internal_usericon() const;
  void _internal_set_usericon(const std::string& value);
  std::string* _internal_mutable_usericon();
  public:

  // @@protoc_insertion_point(class_scope:userInfo.CChangeUserIcon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usericon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfo_2eproto;
};
// -------------------------------------------------------------------

class SChangeUserIcon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfo.SChangeUserIcon) */ {
 public:
  SChangeUserIcon();
  virtual ~SChangeUserIcon();

  SChangeUserIcon(const SChangeUserIcon& from);
  SChangeUserIcon(SChangeUserIcon&& from) noexcept
    : SChangeUserIcon() {
    *this = ::std::move(from);
  }

  inline SChangeUserIcon& operator=(const SChangeUserIcon& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChangeUserIcon& operator=(SChangeUserIcon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChangeUserIcon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChangeUserIcon* internal_default_instance() {
    return reinterpret_cast<const SChangeUserIcon*>(
               &_SChangeUserIcon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SChangeUserIcon& a, SChangeUserIcon& b) {
    a.Swap(&b);
  }
  inline void Swap(SChangeUserIcon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChangeUserIcon* New() const final {
    return CreateMaybeMessage<SChangeUserIcon>(nullptr);
  }

  SChangeUserIcon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChangeUserIcon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChangeUserIcon& from);
  void MergeFrom(const SChangeUserIcon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChangeUserIcon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfo.SChangeUserIcon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfo_2eproto);
    return ::descriptor_table_userInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIconFieldNumber = 2,
    kStatusFieldNumber = 1,
    kUidFieldNumber = 3,
  };
  // string userIcon = 2;
  void clear_usericon();
  const std::string& usericon() const;
  void set_usericon(const std::string& value);
  void set_usericon(std::string&& value);
  void set_usericon(const char* value);
  void set_usericon(const char* value, size_t size);
  std::string* mutable_usericon();
  std::string* release_usericon();
  void set_allocated_usericon(std::string* usericon);
  private:
  const std::string& _internal_usericon() const;
  void _internal_set_usericon(const std::string& value);
  std::string* _internal_mutable_usericon();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userInfo.SChangeUserIcon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usericon_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfo_2eproto;
};
// -------------------------------------------------------------------

class SInAccountUnbind :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userInfo.SInAccountUnbind) */ {
 public:
  SInAccountUnbind();
  virtual ~SInAccountUnbind();

  SInAccountUnbind(const SInAccountUnbind& from);
  SInAccountUnbind(SInAccountUnbind&& from) noexcept
    : SInAccountUnbind() {
    *this = ::std::move(from);
  }

  inline SInAccountUnbind& operator=(const SInAccountUnbind& from) {
    CopyFrom(from);
    return *this;
  }
  inline SInAccountUnbind& operator=(SInAccountUnbind&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SInAccountUnbind& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SInAccountUnbind* internal_default_instance() {
    return reinterpret_cast<const SInAccountUnbind*>(
               &_SInAccountUnbind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SInAccountUnbind& a, SInAccountUnbind& b) {
    a.Swap(&b);
  }
  inline void Swap(SInAccountUnbind* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SInAccountUnbind* New() const final {
    return CreateMaybeMessage<SInAccountUnbind>(nullptr);
  }

  SInAccountUnbind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SInAccountUnbind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SInAccountUnbind& from);
  void MergeFrom(const SInAccountUnbind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SInAccountUnbind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userInfo.SInAccountUnbind";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userInfo_2eproto);
    return ::descriptor_table_userInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userInfo.SInAccountUnbind)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CUserInfo

// int32 os = 1;
inline void CUserInfo::clear_os() {
  os_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserInfo::_internal_os() const {
  return os_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUserInfo::os() const {
  // @@protoc_insertion_point(field_get:userInfo.CUserInfo.os)
  return _internal_os();
}
inline void CUserInfo::_internal_set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_ = value;
}
inline void CUserInfo::set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:userInfo.CUserInfo.os)
}

// string clientIp = 2;
inline void CUserInfo::clear_clientip() {
  clientip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CUserInfo::clientip() const {
  // @@protoc_insertion_point(field_get:userInfo.CUserInfo.clientIp)
  return _internal_clientip();
}
inline void CUserInfo::set_clientip(const std::string& value) {
  _internal_set_clientip(value);
  // @@protoc_insertion_point(field_set:userInfo.CUserInfo.clientIp)
}
inline std::string* CUserInfo::mutable_clientip() {
  // @@protoc_insertion_point(field_mutable:userInfo.CUserInfo.clientIp)
  return _internal_mutable_clientip();
}
inline const std::string& CUserInfo::_internal_clientip() const {
  return clientip_.GetNoArena();
}
inline void CUserInfo::_internal_set_clientip(const std::string& value) {
  
  clientip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CUserInfo::set_clientip(std::string&& value) {
  
  clientip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.CUserInfo.clientIp)
}
inline void CUserInfo::set_clientip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.CUserInfo.clientIp)
}
inline void CUserInfo::set_clientip(const char* value, size_t size) {
  
  clientip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.CUserInfo.clientIp)
}
inline std::string* CUserInfo::_internal_mutable_clientip() {
  
  return clientip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CUserInfo::release_clientip() {
  // @@protoc_insertion_point(field_release:userInfo.CUserInfo.clientIp)
  
  return clientip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CUserInfo::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    
  } else {
    
  }
  clientip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientip);
  // @@protoc_insertion_point(field_set_allocated:userInfo.CUserInfo.clientIp)
}

// -------------------------------------------------------------------

// SUserInfo

// int32 uid = 1;
inline void SUserInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.uid)
  return _internal_uid();
}
inline void SUserInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SUserInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.uid)
}

// int32 avatar = 2;
inline void SUserInfo::clear_avatar() {
  avatar_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_avatar() const {
  return avatar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::avatar() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.avatar)
  return _internal_avatar();
}
inline void SUserInfo::_internal_set_avatar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatar_ = value;
}
inline void SUserInfo::set_avatar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.avatar)
}

// string avatarColor = 3;
inline void SUserInfo::clear_avatarcolor() {
  avatarcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::avatarcolor() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.avatarColor)
  return _internal_avatarcolor();
}
inline void SUserInfo::set_avatarcolor(const std::string& value) {
  _internal_set_avatarcolor(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.avatarColor)
}
inline std::string* SUserInfo::mutable_avatarcolor() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.avatarColor)
  return _internal_mutable_avatarcolor();
}
inline const std::string& SUserInfo::_internal_avatarcolor() const {
  return avatarcolor_.GetNoArena();
}
inline void SUserInfo::_internal_set_avatarcolor(const std::string& value) {
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_avatarcolor(std::string&& value) {
  
  avatarcolor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.avatarColor)
}
inline void SUserInfo::set_avatarcolor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.avatarColor)
}
inline void SUserInfo::set_avatarcolor(const char* value, size_t size) {
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.avatarColor)
}
inline std::string* SUserInfo::_internal_mutable_avatarcolor() {
  
  return avatarcolor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_avatarcolor() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.avatarColor)
  
  return avatarcolor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_avatarcolor(std::string* avatarcolor) {
  if (avatarcolor != nullptr) {
    
  } else {
    
  }
  avatarcolor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatarcolor);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.avatarColor)
}

// string identifierId = 4;
inline void SUserInfo::clear_identifierid() {
  identifierid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::identifierid() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.identifierId)
  return _internal_identifierid();
}
inline void SUserInfo::set_identifierid(const std::string& value) {
  _internal_set_identifierid(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.identifierId)
}
inline std::string* SUserInfo::mutable_identifierid() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.identifierId)
  return _internal_mutable_identifierid();
}
inline const std::string& SUserInfo::_internal_identifierid() const {
  return identifierid_.GetNoArena();
}
inline void SUserInfo::_internal_set_identifierid(const std::string& value) {
  
  identifierid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_identifierid(std::string&& value) {
  
  identifierid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.identifierId)
}
inline void SUserInfo::set_identifierid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identifierid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.identifierId)
}
inline void SUserInfo::set_identifierid(const char* value, size_t size) {
  
  identifierid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.identifierId)
}
inline std::string* SUserInfo::_internal_mutable_identifierid() {
  
  return identifierid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_identifierid() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.identifierId)
  
  return identifierid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_identifierid(std::string* identifierid) {
  if (identifierid != nullptr) {
    
  } else {
    
  }
  identifierid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifierid);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.identifierId)
}

// int32 nameplate = 5;
inline void SUserInfo::clear_nameplate() {
  nameplate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_nameplate() const {
  return nameplate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::nameplate() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.nameplate)
  return _internal_nameplate();
}
inline void SUserInfo::_internal_set_nameplate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nameplate_ = value;
}
inline void SUserInfo::set_nameplate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nameplate(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.nameplate)
}

// int32 authorityID = 6;
inline void SUserInfo::clear_authorityid() {
  authorityid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_authorityid() const {
  return authorityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::authorityid() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.authorityID)
  return _internal_authorityid();
}
inline void SUserInfo::_internal_set_authorityid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  authorityid_ = value;
}
inline void SUserInfo::set_authorityid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_authorityid(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.authorityID)
}

// string imToken = 7;
inline void SUserInfo::clear_imtoken() {
  imtoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::imtoken() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.imToken)
  return _internal_imtoken();
}
inline void SUserInfo::set_imtoken(const std::string& value) {
  _internal_set_imtoken(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.imToken)
}
inline std::string* SUserInfo::mutable_imtoken() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.imToken)
  return _internal_mutable_imtoken();
}
inline const std::string& SUserInfo::_internal_imtoken() const {
  return imtoken_.GetNoArena();
}
inline void SUserInfo::_internal_set_imtoken(const std::string& value) {
  
  imtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_imtoken(std::string&& value) {
  
  imtoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.imToken)
}
inline void SUserInfo::set_imtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.imToken)
}
inline void SUserInfo::set_imtoken(const char* value, size_t size) {
  
  imtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.imToken)
}
inline std::string* SUserInfo::_internal_mutable_imtoken() {
  
  return imtoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_imtoken() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.imToken)
  
  return imtoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_imtoken(std::string* imtoken) {
  if (imtoken != nullptr) {
    
  } else {
    
  }
  imtoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imtoken);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.imToken)
}

// string phone = 8;
inline void SUserInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::phone() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.phone)
  return _internal_phone();
}
inline void SUserInfo::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.phone)
}
inline std::string* SUserInfo::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.phone)
  return _internal_mutable_phone();
}
inline const std::string& SUserInfo::_internal_phone() const {
  return phone_.GetNoArena();
}
inline void SUserInfo::_internal_set_phone(const std::string& value) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_phone(std::string&& value) {
  
  phone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.phone)
}
inline void SUserInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.phone)
}
inline void SUserInfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.phone)
}
inline std::string* SUserInfo::_internal_mutable_phone() {
  
  return phone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_phone() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.phone)
  
  return phone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.phone)
}

// string nick = 9;
inline void SUserInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::nick() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.nick)
  return _internal_nick();
}
inline void SUserInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.nick)
}
inline std::string* SUserInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.nick)
  return _internal_mutable_nick();
}
inline const std::string& SUserInfo::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void SUserInfo::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.nick)
}
inline void SUserInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.nick)
}
inline void SUserInfo::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.nick)
}
inline std::string* SUserInfo::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_nick() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.nick)
}

// int32 avatarKey = 10;
inline void SUserInfo::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::avatarkey() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.avatarKey)
  return _internal_avatarkey();
}
inline void SUserInfo::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void SUserInfo::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.avatarKey)
}

// string userIcon = 11;
inline void SUserInfo::clear_usericon() {
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::usericon() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.userIcon)
  return _internal_usericon();
}
inline void SUserInfo::set_usericon(const std::string& value) {
  _internal_set_usericon(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.userIcon)
}
inline std::string* SUserInfo::mutable_usericon() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.userIcon)
  return _internal_mutable_usericon();
}
inline const std::string& SUserInfo::_internal_usericon() const {
  return usericon_.GetNoArena();
}
inline void SUserInfo::_internal_set_usericon(const std::string& value) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_usericon(std::string&& value) {
  
  usericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.userIcon)
}
inline void SUserInfo::set_usericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.userIcon)
}
inline void SUserInfo::set_usericon(const char* value, size_t size) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.userIcon)
}
inline std::string* SUserInfo::_internal_mutable_usericon() {
  
  return usericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_usericon() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.userIcon)
  
  return usericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_usericon(std::string* usericon) {
  if (usericon != nullptr) {
    
  } else {
    
  }
  usericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usericon);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.userIcon)
}

// string unionid = 12;
inline void SUserInfo::clear_unionid() {
  unionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::unionid() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.unionid)
  return _internal_unionid();
}
inline void SUserInfo::set_unionid(const std::string& value) {
  _internal_set_unionid(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.unionid)
}
inline std::string* SUserInfo::mutable_unionid() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.unionid)
  return _internal_mutable_unionid();
}
inline const std::string& SUserInfo::_internal_unionid() const {
  return unionid_.GetNoArena();
}
inline void SUserInfo::_internal_set_unionid(const std::string& value) {
  
  unionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_unionid(std::string&& value) {
  
  unionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.unionid)
}
inline void SUserInfo::set_unionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.unionid)
}
inline void SUserInfo::set_unionid(const char* value, size_t size) {
  
  unionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.unionid)
}
inline std::string* SUserInfo::_internal_mutable_unionid() {
  
  return unionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_unionid() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.unionid)
  
  return unionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_unionid(std::string* unionid) {
  if (unionid != nullptr) {
    
  } else {
    
  }
  unionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unionid);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.unionid)
}

// string sign = 13;
inline void SUserInfo::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::sign() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.sign)
  return _internal_sign();
}
inline void SUserInfo::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.sign)
}
inline std::string* SUserInfo::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.sign)
  return _internal_mutable_sign();
}
inline const std::string& SUserInfo::_internal_sign() const {
  return sign_.GetNoArena();
}
inline void SUserInfo::_internal_set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.sign)
}
inline void SUserInfo::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.sign)
}
inline void SUserInfo::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.sign)
}
inline std::string* SUserInfo::_internal_mutable_sign() {
  
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_sign() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.sign)
}

// int32 os = 14;
inline void SUserInfo::clear_os() {
  os_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_os() const {
  return os_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::os() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.os)
  return _internal_os();
}
inline void SUserInfo::_internal_set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_ = value;
}
inline void SUserInfo::set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.os)
}

// string inUid = 15;
inline void SUserInfo::clear_inuid() {
  inuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::inuid() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.inUid)
  return _internal_inuid();
}
inline void SUserInfo::set_inuid(const std::string& value) {
  _internal_set_inuid(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.inUid)
}
inline std::string* SUserInfo::mutable_inuid() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.inUid)
  return _internal_mutable_inuid();
}
inline const std::string& SUserInfo::_internal_inuid() const {
  return inuid_.GetNoArena();
}
inline void SUserInfo::_internal_set_inuid(const std::string& value) {
  
  inuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_inuid(std::string&& value) {
  
  inuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.inUid)
}
inline void SUserInfo::set_inuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.inUid)
}
inline void SUserInfo::set_inuid(const char* value, size_t size) {
  
  inuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.inUid)
}
inline std::string* SUserInfo::_internal_mutable_inuid() {
  
  return inuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_inuid() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.inUid)
  
  return inuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_inuid(std::string* inuid) {
  if (inuid != nullptr) {
    
  } else {
    
  }
  inuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inuid);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.inUid)
}

// int32 yuanshenAvatarKey = 16;
inline void SUserInfo::clear_yuanshenavatarkey() {
  yuanshenavatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_yuanshenavatarkey() const {
  return yuanshenavatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::yuanshenavatarkey() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.yuanshenAvatarKey)
  return _internal_yuanshenavatarkey();
}
inline void SUserInfo::_internal_set_yuanshenavatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yuanshenavatarkey_ = value;
}
inline void SUserInfo::set_yuanshenavatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yuanshenavatarkey(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.yuanshenAvatarKey)
}

// string ipCity = 17;
inline void SUserInfo::clear_ipcity() {
  ipcity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::ipcity() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.ipCity)
  return _internal_ipcity();
}
inline void SUserInfo::set_ipcity(const std::string& value) {
  _internal_set_ipcity(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.ipCity)
}
inline std::string* SUserInfo::mutable_ipcity() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.ipCity)
  return _internal_mutable_ipcity();
}
inline const std::string& SUserInfo::_internal_ipcity() const {
  return ipcity_.GetNoArena();
}
inline void SUserInfo::_internal_set_ipcity(const std::string& value) {
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_ipcity(std::string&& value) {
  
  ipcity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.ipCity)
}
inline void SUserInfo::set_ipcity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.ipCity)
}
inline void SUserInfo::set_ipcity(const char* value, size_t size) {
  
  ipcity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.ipCity)
}
inline std::string* SUserInfo::_internal_mutable_ipcity() {
  
  return ipcity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_ipcity() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.ipCity)
  
  return ipcity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_ipcity(std::string* ipcity) {
  if (ipcity != nullptr) {
    
  } else {
    
  }
  ipcity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipcity);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.ipCity)
}

// int32 isCreator = 18;
inline void SUserInfo::clear_iscreator() {
  iscreator_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_iscreator() const {
  return iscreator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::iscreator() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.isCreator)
  return _internal_iscreator();
}
inline void SUserInfo::_internal_set_iscreator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iscreator_ = value;
}
inline void SUserInfo::set_iscreator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iscreator(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.isCreator)
}

// int32 gender = 19;
inline void SUserInfo::clear_gender() {
  gender_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_gender() const {
  return gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::gender() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.gender)
  return _internal_gender();
}
inline void SUserInfo::_internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gender_ = value;
}
inline void SUserInfo::set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.gender)
}

// int32 hiphopStarToken = 20;
inline void SUserInfo::clear_hiphopstartoken() {
  hiphopstartoken_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::_internal_hiphopstartoken() const {
  return hiphopstartoken_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserInfo::hiphopstartoken() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.hiphopStarToken)
  return _internal_hiphopstartoken();
}
inline void SUserInfo::_internal_set_hiphopstartoken(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hiphopstartoken_ = value;
}
inline void SUserInfo::set_hiphopstartoken(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hiphopstartoken(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.hiphopStarToken)
}

// string title = 21;
inline void SUserInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::title() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.title)
  return _internal_title();
}
inline void SUserInfo::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.title)
}
inline std::string* SUserInfo::mutable_title() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.title)
  return _internal_mutable_title();
}
inline const std::string& SUserInfo::_internal_title() const {
  return title_.GetNoArena();
}
inline void SUserInfo::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.title)
}
inline void SUserInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.title)
}
inline void SUserInfo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.title)
}
inline std::string* SUserInfo::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_title() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.title)
}

// string certification = 22;
inline void SUserInfo::clear_certification() {
  certification_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUserInfo::certification() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserInfo.certification)
  return _internal_certification();
}
inline void SUserInfo::set_certification(const std::string& value) {
  _internal_set_certification(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserInfo.certification)
}
inline std::string* SUserInfo::mutable_certification() {
  // @@protoc_insertion_point(field_mutable:userInfo.SUserInfo.certification)
  return _internal_mutable_certification();
}
inline const std::string& SUserInfo::_internal_certification() const {
  return certification_.GetNoArena();
}
inline void SUserInfo::_internal_set_certification(const std::string& value) {
  
  certification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUserInfo::set_certification(std::string&& value) {
  
  certification_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SUserInfo.certification)
}
inline void SUserInfo::set_certification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SUserInfo.certification)
}
inline void SUserInfo::set_certification(const char* value, size_t size) {
  
  certification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SUserInfo.certification)
}
inline std::string* SUserInfo::_internal_mutable_certification() {
  
  return certification_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUserInfo::release_certification() {
  // @@protoc_insertion_point(field_release:userInfo.SUserInfo.certification)
  
  return certification_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUserInfo::set_allocated_certification(std::string* certification) {
  if (certification != nullptr) {
    
  } else {
    
  }
  certification_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), certification);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SUserInfo.certification)
}

// -------------------------------------------------------------------

// SUserAttrFromNft

// int32 attr = 1;
inline void SUserAttrFromNft::clear_attr() {
  attr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserAttrFromNft::_internal_attr() const {
  return attr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUserAttrFromNft::attr() const {
  // @@protoc_insertion_point(field_get:userInfo.SUserAttrFromNft.attr)
  return _internal_attr();
}
inline void SUserAttrFromNft::_internal_set_attr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attr_ = value;
}
inline void SUserAttrFromNft::set_attr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attr(value);
  // @@protoc_insertion_point(field_set:userInfo.SUserAttrFromNft.attr)
}

// -------------------------------------------------------------------

// CChangeUserSign

// string sign = 1;
inline void CChangeUserSign::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CChangeUserSign::sign() const {
  // @@protoc_insertion_point(field_get:userInfo.CChangeUserSign.sign)
  return _internal_sign();
}
inline void CChangeUserSign::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:userInfo.CChangeUserSign.sign)
}
inline std::string* CChangeUserSign::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:userInfo.CChangeUserSign.sign)
  return _internal_mutable_sign();
}
inline const std::string& CChangeUserSign::_internal_sign() const {
  return sign_.GetNoArena();
}
inline void CChangeUserSign::_internal_set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CChangeUserSign::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.CChangeUserSign.sign)
}
inline void CChangeUserSign::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.CChangeUserSign.sign)
}
inline void CChangeUserSign::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.CChangeUserSign.sign)
}
inline std::string* CChangeUserSign::_internal_mutable_sign() {
  
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CChangeUserSign::release_sign() {
  // @@protoc_insertion_point(field_release:userInfo.CChangeUserSign.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CChangeUserSign::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:userInfo.CChangeUserSign.sign)
}

// -------------------------------------------------------------------

// SChangeUserSign

// int32 status = 1;
inline void SChangeUserSign::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangeUserSign::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangeUserSign::status() const {
  // @@protoc_insertion_point(field_get:userInfo.SChangeUserSign.status)
  return _internal_status();
}
inline void SChangeUserSign::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SChangeUserSign::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:userInfo.SChangeUserSign.status)
}

// -------------------------------------------------------------------

// CChangeUserIcon

// string userIcon = 1;
inline void CChangeUserIcon::clear_usericon() {
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CChangeUserIcon::usericon() const {
  // @@protoc_insertion_point(field_get:userInfo.CChangeUserIcon.userIcon)
  return _internal_usericon();
}
inline void CChangeUserIcon::set_usericon(const std::string& value) {
  _internal_set_usericon(value);
  // @@protoc_insertion_point(field_set:userInfo.CChangeUserIcon.userIcon)
}
inline std::string* CChangeUserIcon::mutable_usericon() {
  // @@protoc_insertion_point(field_mutable:userInfo.CChangeUserIcon.userIcon)
  return _internal_mutable_usericon();
}
inline const std::string& CChangeUserIcon::_internal_usericon() const {
  return usericon_.GetNoArena();
}
inline void CChangeUserIcon::_internal_set_usericon(const std::string& value) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CChangeUserIcon::set_usericon(std::string&& value) {
  
  usericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.CChangeUserIcon.userIcon)
}
inline void CChangeUserIcon::set_usericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.CChangeUserIcon.userIcon)
}
inline void CChangeUserIcon::set_usericon(const char* value, size_t size) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.CChangeUserIcon.userIcon)
}
inline std::string* CChangeUserIcon::_internal_mutable_usericon() {
  
  return usericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CChangeUserIcon::release_usericon() {
  // @@protoc_insertion_point(field_release:userInfo.CChangeUserIcon.userIcon)
  
  return usericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CChangeUserIcon::set_allocated_usericon(std::string* usericon) {
  if (usericon != nullptr) {
    
  } else {
    
  }
  usericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usericon);
  // @@protoc_insertion_point(field_set_allocated:userInfo.CChangeUserIcon.userIcon)
}

// -------------------------------------------------------------------

// SChangeUserIcon

// int32 status = 1;
inline void SChangeUserIcon::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangeUserIcon::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangeUserIcon::status() const {
  // @@protoc_insertion_point(field_get:userInfo.SChangeUserIcon.status)
  return _internal_status();
}
inline void SChangeUserIcon::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SChangeUserIcon::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:userInfo.SChangeUserIcon.status)
}

// string userIcon = 2;
inline void SChangeUserIcon::clear_usericon() {
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SChangeUserIcon::usericon() const {
  // @@protoc_insertion_point(field_get:userInfo.SChangeUserIcon.userIcon)
  return _internal_usericon();
}
inline void SChangeUserIcon::set_usericon(const std::string& value) {
  _internal_set_usericon(value);
  // @@protoc_insertion_point(field_set:userInfo.SChangeUserIcon.userIcon)
}
inline std::string* SChangeUserIcon::mutable_usericon() {
  // @@protoc_insertion_point(field_mutable:userInfo.SChangeUserIcon.userIcon)
  return _internal_mutable_usericon();
}
inline const std::string& SChangeUserIcon::_internal_usericon() const {
  return usericon_.GetNoArena();
}
inline void SChangeUserIcon::_internal_set_usericon(const std::string& value) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SChangeUserIcon::set_usericon(std::string&& value) {
  
  usericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userInfo.SChangeUserIcon.userIcon)
}
inline void SChangeUserIcon::set_usericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userInfo.SChangeUserIcon.userIcon)
}
inline void SChangeUserIcon::set_usericon(const char* value, size_t size) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userInfo.SChangeUserIcon.userIcon)
}
inline std::string* SChangeUserIcon::_internal_mutable_usericon() {
  
  return usericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SChangeUserIcon::release_usericon() {
  // @@protoc_insertion_point(field_release:userInfo.SChangeUserIcon.userIcon)
  
  return usericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SChangeUserIcon::set_allocated_usericon(std::string* usericon) {
  if (usericon != nullptr) {
    
  } else {
    
  }
  usericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usericon);
  // @@protoc_insertion_point(field_set_allocated:userInfo.SChangeUserIcon.userIcon)
}

// int32 uid = 3;
inline void SChangeUserIcon::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangeUserIcon::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangeUserIcon::uid() const {
  // @@protoc_insertion_point(field_get:userInfo.SChangeUserIcon.uid)
  return _internal_uid();
}
inline void SChangeUserIcon::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SChangeUserIcon::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:userInfo.SChangeUserIcon.uid)
}

// -------------------------------------------------------------------

// SInAccountUnbind

// int32 status = 1;
inline void SInAccountUnbind::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInAccountUnbind::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInAccountUnbind::status() const {
  // @@protoc_insertion_point(field_get:userInfo.SInAccountUnbind.status)
  return _internal_status();
}
inline void SInAccountUnbind::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SInAccountUnbind::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:userInfo.SInAccountUnbind.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userInfo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userInfo_2eproto
