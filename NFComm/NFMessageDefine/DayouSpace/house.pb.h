// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: house.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_house_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_house_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_house_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_house_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_house_2eproto;
namespace house {
class CAddPiece;
class CAddPieceDefaultTypeInternal;
extern CAddPieceDefaultTypeInternal _CAddPiece_default_instance_;
class CGetNftPieceFromHouse;
class CGetNftPieceFromHouseDefaultTypeInternal;
extern CGetNftPieceFromHouseDefaultTypeInternal _CGetNftPieceFromHouse_default_instance_;
class CHouseDetail;
class CHouseDetailDefaultTypeInternal;
extern CHouseDetailDefaultTypeInternal _CHouseDetail_default_instance_;
class SAddPiece;
class SAddPieceDefaultTypeInternal;
extern SAddPieceDefaultTypeInternal _SAddPiece_default_instance_;
class SGetNftPieceFromHouse;
class SGetNftPieceFromHouseDefaultTypeInternal;
extern SGetNftPieceFromHouseDefaultTypeInternal _SGetNftPieceFromHouse_default_instance_;
class SHouseDetail;
class SHouseDetailDefaultTypeInternal;
extern SHouseDetailDefaultTypeInternal _SHouseDetail_default_instance_;
class houseMsg;
class houseMsgDefaultTypeInternal;
extern houseMsgDefaultTypeInternal _houseMsg_default_instance_;
}  // namespace house
PROTOBUF_NAMESPACE_OPEN
template<> ::house::CAddPiece* Arena::CreateMaybeMessage<::house::CAddPiece>(Arena*);
template<> ::house::CGetNftPieceFromHouse* Arena::CreateMaybeMessage<::house::CGetNftPieceFromHouse>(Arena*);
template<> ::house::CHouseDetail* Arena::CreateMaybeMessage<::house::CHouseDetail>(Arena*);
template<> ::house::SAddPiece* Arena::CreateMaybeMessage<::house::SAddPiece>(Arena*);
template<> ::house::SGetNftPieceFromHouse* Arena::CreateMaybeMessage<::house::SGetNftPieceFromHouse>(Arena*);
template<> ::house::SHouseDetail* Arena::CreateMaybeMessage<::house::SHouseDetail>(Arena*);
template<> ::house::houseMsg* Arena::CreateMaybeMessage<::house::houseMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace house {

// ===================================================================

class houseMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:house.houseMsg) */ {
 public:
  houseMsg();
  virtual ~houseMsg();

  houseMsg(const houseMsg& from);
  houseMsg(houseMsg&& from) noexcept
    : houseMsg() {
    *this = ::std::move(from);
  }

  inline houseMsg& operator=(const houseMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline houseMsg& operator=(houseMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const houseMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const houseMsg* internal_default_instance() {
    return reinterpret_cast<const houseMsg*>(
               &_houseMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(houseMsg& a, houseMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(houseMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline houseMsg* New() const final {
    return CreateMaybeMessage<houseMsg>(nullptr);
  }

  houseMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<houseMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const houseMsg& from);
  void MergeFrom(const houseMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(houseMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "house.houseMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_house_2eproto);
    return ::descriptor_table_house_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kLocationIdFieldNumber = 2,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 locationId = 2;
  void clear_locationid();
  ::PROTOBUF_NAMESPACE_ID::int32 locationid() const;
  void set_locationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locationid() const;
  void _internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:house.houseMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 locationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_house_2eproto;
};
// -------------------------------------------------------------------

class CAddPiece :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:house.CAddPiece) */ {
 public:
  CAddPiece();
  virtual ~CAddPiece();

  CAddPiece(const CAddPiece& from);
  CAddPiece(CAddPiece&& from) noexcept
    : CAddPiece() {
    *this = ::std::move(from);
  }

  inline CAddPiece& operator=(const CAddPiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAddPiece& operator=(CAddPiece&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAddPiece& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAddPiece* internal_default_instance() {
    return reinterpret_cast<const CAddPiece*>(
               &_CAddPiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CAddPiece& a, CAddPiece& b) {
    a.Swap(&b);
  }
  inline void Swap(CAddPiece* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAddPiece* New() const final {
    return CreateMaybeMessage<CAddPiece>(nullptr);
  }

  CAddPiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAddPiece>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAddPiece& from);
  void MergeFrom(const CAddPiece& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAddPiece* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "house.CAddPiece";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_house_2eproto);
    return ::descriptor_table_house_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseInfoFieldNumber = 1,
  };
  // .house.houseMsg houseInfo = 1;
  bool has_houseinfo() const;
  private:
  bool _internal_has_houseinfo() const;
  public:
  void clear_houseinfo();
  const ::house::houseMsg& houseinfo() const;
  ::house::houseMsg* release_houseinfo();
  ::house::houseMsg* mutable_houseinfo();
  void set_allocated_houseinfo(::house::houseMsg* houseinfo);
  private:
  const ::house::houseMsg& _internal_houseinfo() const;
  ::house::houseMsg* _internal_mutable_houseinfo();
  public:

  // @@protoc_insertion_point(class_scope:house.CAddPiece)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::house::houseMsg* houseinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_house_2eproto;
};
// -------------------------------------------------------------------

class SAddPiece :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:house.SAddPiece) */ {
 public:
  SAddPiece();
  virtual ~SAddPiece();

  SAddPiece(const SAddPiece& from);
  SAddPiece(SAddPiece&& from) noexcept
    : SAddPiece() {
    *this = ::std::move(from);
  }

  inline SAddPiece& operator=(const SAddPiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAddPiece& operator=(SAddPiece&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAddPiece& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAddPiece* internal_default_instance() {
    return reinterpret_cast<const SAddPiece*>(
               &_SAddPiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SAddPiece& a, SAddPiece& b) {
    a.Swap(&b);
  }
  inline void Swap(SAddPiece* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAddPiece* New() const final {
    return CreateMaybeMessage<SAddPiece>(nullptr);
  }

  SAddPiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAddPiece>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAddPiece& from);
  void MergeFrom(const SAddPiece& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAddPiece* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "house.SAddPiece";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_house_2eproto);
    return ::descriptor_table_house_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:house.SAddPiece)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_house_2eproto;
};
// -------------------------------------------------------------------

class CGetNftPieceFromHouse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:house.CGetNftPieceFromHouse) */ {
 public:
  CGetNftPieceFromHouse();
  virtual ~CGetNftPieceFromHouse();

  CGetNftPieceFromHouse(const CGetNftPieceFromHouse& from);
  CGetNftPieceFromHouse(CGetNftPieceFromHouse&& from) noexcept
    : CGetNftPieceFromHouse() {
    *this = ::std::move(from);
  }

  inline CGetNftPieceFromHouse& operator=(const CGetNftPieceFromHouse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetNftPieceFromHouse& operator=(CGetNftPieceFromHouse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetNftPieceFromHouse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetNftPieceFromHouse* internal_default_instance() {
    return reinterpret_cast<const CGetNftPieceFromHouse*>(
               &_CGetNftPieceFromHouse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CGetNftPieceFromHouse& a, CGetNftPieceFromHouse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetNftPieceFromHouse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetNftPieceFromHouse* New() const final {
    return CreateMaybeMessage<CGetNftPieceFromHouse>(nullptr);
  }

  CGetNftPieceFromHouse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetNftPieceFromHouse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetNftPieceFromHouse& from);
  void MergeFrom(const CGetNftPieceFromHouse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetNftPieceFromHouse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "house.CGetNftPieceFromHouse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_house_2eproto);
    return ::descriptor_table_house_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:house.CGetNftPieceFromHouse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_house_2eproto;
};
// -------------------------------------------------------------------

class SGetNftPieceFromHouse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:house.SGetNftPieceFromHouse) */ {
 public:
  SGetNftPieceFromHouse();
  virtual ~SGetNftPieceFromHouse();

  SGetNftPieceFromHouse(const SGetNftPieceFromHouse& from);
  SGetNftPieceFromHouse(SGetNftPieceFromHouse&& from) noexcept
    : SGetNftPieceFromHouse() {
    *this = ::std::move(from);
  }

  inline SGetNftPieceFromHouse& operator=(const SGetNftPieceFromHouse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetNftPieceFromHouse& operator=(SGetNftPieceFromHouse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetNftPieceFromHouse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetNftPieceFromHouse* internal_default_instance() {
    return reinterpret_cast<const SGetNftPieceFromHouse*>(
               &_SGetNftPieceFromHouse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SGetNftPieceFromHouse& a, SGetNftPieceFromHouse& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetNftPieceFromHouse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetNftPieceFromHouse* New() const final {
    return CreateMaybeMessage<SGetNftPieceFromHouse>(nullptr);
  }

  SGetNftPieceFromHouse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetNftPieceFromHouse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetNftPieceFromHouse& from);
  void MergeFrom(const SGetNftPieceFromHouse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetNftPieceFromHouse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "house.SGetNftPieceFromHouse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_house_2eproto);
    return ::descriptor_table_house_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 1,
  };
  // repeated int32 locations = 1;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_locations() const;
  void _internal_add_locations(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_locations();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 locations(int index) const;
  void set_locations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_locations(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      locations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_locations();

  // @@protoc_insertion_point(class_scope:house.SGetNftPieceFromHouse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > locations_;
  mutable std::atomic<int> _locations_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_house_2eproto;
};
// -------------------------------------------------------------------

class CHouseDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:house.CHouseDetail) */ {
 public:
  CHouseDetail();
  virtual ~CHouseDetail();

  CHouseDetail(const CHouseDetail& from);
  CHouseDetail(CHouseDetail&& from) noexcept
    : CHouseDetail() {
    *this = ::std::move(from);
  }

  inline CHouseDetail& operator=(const CHouseDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHouseDetail& operator=(CHouseDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHouseDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHouseDetail* internal_default_instance() {
    return reinterpret_cast<const CHouseDetail*>(
               &_CHouseDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CHouseDetail& a, CHouseDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CHouseDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHouseDetail* New() const final {
    return CreateMaybeMessage<CHouseDetail>(nullptr);
  }

  CHouseDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHouseDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHouseDetail& from);
  void MergeFrom(const CHouseDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHouseDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "house.CHouseDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_house_2eproto);
    return ::descriptor_table_house_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:house.CHouseDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_house_2eproto;
};
// -------------------------------------------------------------------

class SHouseDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:house.SHouseDetail) */ {
 public:
  SHouseDetail();
  virtual ~SHouseDetail();

  SHouseDetail(const SHouseDetail& from);
  SHouseDetail(SHouseDetail&& from) noexcept
    : SHouseDetail() {
    *this = ::std::move(from);
  }

  inline SHouseDetail& operator=(const SHouseDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHouseDetail& operator=(SHouseDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHouseDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHouseDetail* internal_default_instance() {
    return reinterpret_cast<const SHouseDetail*>(
               &_SHouseDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SHouseDetail& a, SHouseDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SHouseDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHouseDetail* New() const final {
    return CreateMaybeMessage<SHouseDetail>(nullptr);
  }

  SHouseDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHouseDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHouseDetail& from);
  void MergeFrom(const SHouseDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHouseDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "house.SHouseDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_house_2eproto);
    return ::descriptor_table_house_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshAliasFieldNumber = 2,
    kTitleFieldNumber = 3,
    kImageFieldNumber = 4,
    kHostAvatarFieldNumber = 10,
    kHostNickFieldNumber = 11,
    kNftIdFieldNumber = 1,
    kHostUidFieldNumber = 5,
    kHouseIdFieldNumber = 6,
    kLikesFieldNumber = 7,
    kPvFieldNumber = 8,
    kSelfHasHouseFieldNumber = 9,
    kSceneFieldNumber = 12,
  };
  // string meshAlias = 2;
  void clear_meshalias();
  const std::string& meshalias() const;
  void set_meshalias(const std::string& value);
  void set_meshalias(std::string&& value);
  void set_meshalias(const char* value);
  void set_meshalias(const char* value, size_t size);
  std::string* mutable_meshalias();
  std::string* release_meshalias();
  void set_allocated_meshalias(std::string* meshalias);
  private:
  const std::string& _internal_meshalias() const;
  void _internal_set_meshalias(const std::string& value);
  std::string* _internal_mutable_meshalias();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string image = 4;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string hostAvatar = 10;
  void clear_hostavatar();
  const std::string& hostavatar() const;
  void set_hostavatar(const std::string& value);
  void set_hostavatar(std::string&& value);
  void set_hostavatar(const char* value);
  void set_hostavatar(const char* value, size_t size);
  std::string* mutable_hostavatar();
  std::string* release_hostavatar();
  void set_allocated_hostavatar(std::string* hostavatar);
  private:
  const std::string& _internal_hostavatar() const;
  void _internal_set_hostavatar(const std::string& value);
  std::string* _internal_mutable_hostavatar();
  public:

  // string hostNick = 11;
  void clear_hostnick();
  const std::string& hostnick() const;
  void set_hostnick(const std::string& value);
  void set_hostnick(std::string&& value);
  void set_hostnick(const char* value);
  void set_hostnick(const char* value, size_t size);
  std::string* mutable_hostnick();
  std::string* release_hostnick();
  void set_allocated_hostnick(std::string* hostnick);
  private:
  const std::string& _internal_hostnick() const;
  void _internal_set_hostnick(const std::string& value);
  std::string* _internal_mutable_hostnick();
  public:

  // int32 nftId = 1;
  void clear_nftid();
  ::PROTOBUF_NAMESPACE_ID::int32 nftid() const;
  void set_nftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nftid() const;
  void _internal_set_nftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hostUid = 5;
  void clear_hostuid();
  ::PROTOBUF_NAMESPACE_ID::int32 hostuid() const;
  void set_hostuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hostuid() const;
  void _internal_set_hostuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseId = 6;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 likes = 7;
  void clear_likes();
  ::PROTOBUF_NAMESPACE_ID::int32 likes() const;
  void set_likes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_likes() const;
  void _internal_set_likes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pv = 8;
  void clear_pv();
  ::PROTOBUF_NAMESPACE_ID::int32 pv() const;
  void set_pv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pv() const;
  void _internal_set_pv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool selfHasHouse = 9;
  void clear_selfhashouse();
  bool selfhashouse() const;
  void set_selfhashouse(bool value);
  private:
  bool _internal_selfhashouse() const;
  void _internal_set_selfhashouse(bool value);
  public:

  // int32 scene = 12;
  void clear_scene();
  ::PROTOBUF_NAMESPACE_ID::int32 scene() const;
  void set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene() const;
  void _internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:house.SHouseDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meshalias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostavatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostnick_;
  ::PROTOBUF_NAMESPACE_ID::int32 nftid_;
  ::PROTOBUF_NAMESPACE_ID::int32 hostuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 likes_;
  ::PROTOBUF_NAMESPACE_ID::int32 pv_;
  bool selfhashouse_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_house_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// houseMsg

// int32 houseId = 1;
inline void houseMsg::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 houseMsg::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 houseMsg::houseid() const {
  // @@protoc_insertion_point(field_get:house.houseMsg.houseId)
  return _internal_houseid();
}
inline void houseMsg::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void houseMsg::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:house.houseMsg.houseId)
}

// int32 locationId = 2;
inline void houseMsg::clear_locationid() {
  locationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 houseMsg::_internal_locationid() const {
  return locationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 houseMsg::locationid() const {
  // @@protoc_insertion_point(field_get:house.houseMsg.locationId)
  return _internal_locationid();
}
inline void houseMsg::_internal_set_locationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  locationid_ = value;
}
inline void houseMsg::set_locationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_locationid(value);
  // @@protoc_insertion_point(field_set:house.houseMsg.locationId)
}

// -------------------------------------------------------------------

// CAddPiece

// .house.houseMsg houseInfo = 1;
inline bool CAddPiece::_internal_has_houseinfo() const {
  return this != internal_default_instance() && houseinfo_ != nullptr;
}
inline bool CAddPiece::has_houseinfo() const {
  return _internal_has_houseinfo();
}
inline void CAddPiece::clear_houseinfo() {
  if (GetArenaNoVirtual() == nullptr && houseinfo_ != nullptr) {
    delete houseinfo_;
  }
  houseinfo_ = nullptr;
}
inline const ::house::houseMsg& CAddPiece::_internal_houseinfo() const {
  const ::house::houseMsg* p = houseinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::house::houseMsg*>(
      &::house::_houseMsg_default_instance_);
}
inline const ::house::houseMsg& CAddPiece::houseinfo() const {
  // @@protoc_insertion_point(field_get:house.CAddPiece.houseInfo)
  return _internal_houseinfo();
}
inline ::house::houseMsg* CAddPiece::release_houseinfo() {
  // @@protoc_insertion_point(field_release:house.CAddPiece.houseInfo)
  
  ::house::houseMsg* temp = houseinfo_;
  houseinfo_ = nullptr;
  return temp;
}
inline ::house::houseMsg* CAddPiece::_internal_mutable_houseinfo() {
  
  if (houseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::house::houseMsg>(GetArenaNoVirtual());
    houseinfo_ = p;
  }
  return houseinfo_;
}
inline ::house::houseMsg* CAddPiece::mutable_houseinfo() {
  // @@protoc_insertion_point(field_mutable:house.CAddPiece.houseInfo)
  return _internal_mutable_houseinfo();
}
inline void CAddPiece::set_allocated_houseinfo(::house::houseMsg* houseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete houseinfo_;
  }
  if (houseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      houseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, houseinfo, submessage_arena);
    }
    
  } else {
    
  }
  houseinfo_ = houseinfo;
  // @@protoc_insertion_point(field_set_allocated:house.CAddPiece.houseInfo)
}

// -------------------------------------------------------------------

// SAddPiece

// int32 type = 1;
inline void SAddPiece::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAddPiece::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAddPiece::type() const {
  // @@protoc_insertion_point(field_get:house.SAddPiece.type)
  return _internal_type();
}
inline void SAddPiece::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SAddPiece::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:house.SAddPiece.type)
}

// int32 id = 2;
inline void SAddPiece::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAddPiece::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAddPiece::id() const {
  // @@protoc_insertion_point(field_get:house.SAddPiece.id)
  return _internal_id();
}
inline void SAddPiece::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SAddPiece::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:house.SAddPiece.id)
}

// -------------------------------------------------------------------

// CGetNftPieceFromHouse

// int32 houseId = 1;
inline void CGetNftPieceFromHouse::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetNftPieceFromHouse::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetNftPieceFromHouse::houseid() const {
  // @@protoc_insertion_point(field_get:house.CGetNftPieceFromHouse.houseId)
  return _internal_houseid();
}
inline void CGetNftPieceFromHouse::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CGetNftPieceFromHouse::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:house.CGetNftPieceFromHouse.houseId)
}

// -------------------------------------------------------------------

// SGetNftPieceFromHouse

// repeated int32 locations = 1;
inline int SGetNftPieceFromHouse::_internal_locations_size() const {
  return locations_.size();
}
inline int SGetNftPieceFromHouse::locations_size() const {
  return _internal_locations_size();
}
inline void SGetNftPieceFromHouse::clear_locations() {
  locations_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetNftPieceFromHouse::_internal_locations(int index) const {
  return locations_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetNftPieceFromHouse::locations(int index) const {
  // @@protoc_insertion_point(field_get:house.SGetNftPieceFromHouse.locations)
  return _internal_locations(index);
}
inline void SGetNftPieceFromHouse::set_locations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  locations_.Set(index, value);
  // @@protoc_insertion_point(field_set:house.SGetNftPieceFromHouse.locations)
}
inline void SGetNftPieceFromHouse::_internal_add_locations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  locations_.Add(value);
}
inline void SGetNftPieceFromHouse::add_locations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_locations(value);
  // @@protoc_insertion_point(field_add:house.SGetNftPieceFromHouse.locations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SGetNftPieceFromHouse::_internal_locations() const {
  return locations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SGetNftPieceFromHouse::locations() const {
  // @@protoc_insertion_point(field_list:house.SGetNftPieceFromHouse.locations)
  return _internal_locations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SGetNftPieceFromHouse::_internal_mutable_locations() {
  return &locations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SGetNftPieceFromHouse::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:house.SGetNftPieceFromHouse.locations)
  return _internal_mutable_locations();
}

// -------------------------------------------------------------------

// CHouseDetail

// int32 houseId = 1;
inline void CHouseDetail::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHouseDetail::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHouseDetail::houseid() const {
  // @@protoc_insertion_point(field_get:house.CHouseDetail.houseId)
  return _internal_houseid();
}
inline void CHouseDetail::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CHouseDetail::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:house.CHouseDetail.houseId)
}

// -------------------------------------------------------------------

// SHouseDetail

// int32 nftId = 1;
inline void SHouseDetail::clear_nftid() {
  nftid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::_internal_nftid() const {
  return nftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::nftid() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.nftId)
  return _internal_nftid();
}
inline void SHouseDetail::_internal_set_nftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nftid_ = value;
}
inline void SHouseDetail::set_nftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nftid(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.nftId)
}

// string meshAlias = 2;
inline void SHouseDetail::clear_meshalias() {
  meshalias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHouseDetail::meshalias() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.meshAlias)
  return _internal_meshalias();
}
inline void SHouseDetail::set_meshalias(const std::string& value) {
  _internal_set_meshalias(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.meshAlias)
}
inline std::string* SHouseDetail::mutable_meshalias() {
  // @@protoc_insertion_point(field_mutable:house.SHouseDetail.meshAlias)
  return _internal_mutable_meshalias();
}
inline const std::string& SHouseDetail::_internal_meshalias() const {
  return meshalias_.GetNoArena();
}
inline void SHouseDetail::_internal_set_meshalias(const std::string& value) {
  
  meshalias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHouseDetail::set_meshalias(std::string&& value) {
  
  meshalias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:house.SHouseDetail.meshAlias)
}
inline void SHouseDetail::set_meshalias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  meshalias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:house.SHouseDetail.meshAlias)
}
inline void SHouseDetail::set_meshalias(const char* value, size_t size) {
  
  meshalias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:house.SHouseDetail.meshAlias)
}
inline std::string* SHouseDetail::_internal_mutable_meshalias() {
  
  return meshalias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHouseDetail::release_meshalias() {
  // @@protoc_insertion_point(field_release:house.SHouseDetail.meshAlias)
  
  return meshalias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHouseDetail::set_allocated_meshalias(std::string* meshalias) {
  if (meshalias != nullptr) {
    
  } else {
    
  }
  meshalias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meshalias);
  // @@protoc_insertion_point(field_set_allocated:house.SHouseDetail.meshAlias)
}

// string title = 3;
inline void SHouseDetail::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHouseDetail::title() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.title)
  return _internal_title();
}
inline void SHouseDetail::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.title)
}
inline std::string* SHouseDetail::mutable_title() {
  // @@protoc_insertion_point(field_mutable:house.SHouseDetail.title)
  return _internal_mutable_title();
}
inline const std::string& SHouseDetail::_internal_title() const {
  return title_.GetNoArena();
}
inline void SHouseDetail::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHouseDetail::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:house.SHouseDetail.title)
}
inline void SHouseDetail::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:house.SHouseDetail.title)
}
inline void SHouseDetail::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:house.SHouseDetail.title)
}
inline std::string* SHouseDetail::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHouseDetail::release_title() {
  // @@protoc_insertion_point(field_release:house.SHouseDetail.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHouseDetail::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:house.SHouseDetail.title)
}

// string image = 4;
inline void SHouseDetail::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHouseDetail::image() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.image)
  return _internal_image();
}
inline void SHouseDetail::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.image)
}
inline std::string* SHouseDetail::mutable_image() {
  // @@protoc_insertion_point(field_mutable:house.SHouseDetail.image)
  return _internal_mutable_image();
}
inline const std::string& SHouseDetail::_internal_image() const {
  return image_.GetNoArena();
}
inline void SHouseDetail::_internal_set_image(const std::string& value) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHouseDetail::set_image(std::string&& value) {
  
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:house.SHouseDetail.image)
}
inline void SHouseDetail::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:house.SHouseDetail.image)
}
inline void SHouseDetail::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:house.SHouseDetail.image)
}
inline std::string* SHouseDetail::_internal_mutable_image() {
  
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHouseDetail::release_image() {
  // @@protoc_insertion_point(field_release:house.SHouseDetail.image)
  
  return image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHouseDetail::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:house.SHouseDetail.image)
}

// int32 hostUid = 5;
inline void SHouseDetail::clear_hostuid() {
  hostuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::_internal_hostuid() const {
  return hostuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::hostuid() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.hostUid)
  return _internal_hostuid();
}
inline void SHouseDetail::_internal_set_hostuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hostuid_ = value;
}
inline void SHouseDetail::set_hostuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hostuid(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.hostUid)
}

// int32 houseId = 6;
inline void SHouseDetail::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::houseid() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.houseId)
  return _internal_houseid();
}
inline void SHouseDetail::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SHouseDetail::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.houseId)
}

// int32 likes = 7;
inline void SHouseDetail::clear_likes() {
  likes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::_internal_likes() const {
  return likes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::likes() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.likes)
  return _internal_likes();
}
inline void SHouseDetail::_internal_set_likes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  likes_ = value;
}
inline void SHouseDetail::set_likes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_likes(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.likes)
}

// int32 pv = 8;
inline void SHouseDetail::clear_pv() {
  pv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::_internal_pv() const {
  return pv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::pv() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.pv)
  return _internal_pv();
}
inline void SHouseDetail::_internal_set_pv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pv_ = value;
}
inline void SHouseDetail::set_pv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pv(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.pv)
}

// bool selfHasHouse = 9;
inline void SHouseDetail::clear_selfhashouse() {
  selfhashouse_ = false;
}
inline bool SHouseDetail::_internal_selfhashouse() const {
  return selfhashouse_;
}
inline bool SHouseDetail::selfhashouse() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.selfHasHouse)
  return _internal_selfhashouse();
}
inline void SHouseDetail::_internal_set_selfhashouse(bool value) {
  
  selfhashouse_ = value;
}
inline void SHouseDetail::set_selfhashouse(bool value) {
  _internal_set_selfhashouse(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.selfHasHouse)
}

// string hostAvatar = 10;
inline void SHouseDetail::clear_hostavatar() {
  hostavatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHouseDetail::hostavatar() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.hostAvatar)
  return _internal_hostavatar();
}
inline void SHouseDetail::set_hostavatar(const std::string& value) {
  _internal_set_hostavatar(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.hostAvatar)
}
inline std::string* SHouseDetail::mutable_hostavatar() {
  // @@protoc_insertion_point(field_mutable:house.SHouseDetail.hostAvatar)
  return _internal_mutable_hostavatar();
}
inline const std::string& SHouseDetail::_internal_hostavatar() const {
  return hostavatar_.GetNoArena();
}
inline void SHouseDetail::_internal_set_hostavatar(const std::string& value) {
  
  hostavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHouseDetail::set_hostavatar(std::string&& value) {
  
  hostavatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:house.SHouseDetail.hostAvatar)
}
inline void SHouseDetail::set_hostavatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:house.SHouseDetail.hostAvatar)
}
inline void SHouseDetail::set_hostavatar(const char* value, size_t size) {
  
  hostavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:house.SHouseDetail.hostAvatar)
}
inline std::string* SHouseDetail::_internal_mutable_hostavatar() {
  
  return hostavatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHouseDetail::release_hostavatar() {
  // @@protoc_insertion_point(field_release:house.SHouseDetail.hostAvatar)
  
  return hostavatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHouseDetail::set_allocated_hostavatar(std::string* hostavatar) {
  if (hostavatar != nullptr) {
    
  } else {
    
  }
  hostavatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostavatar);
  // @@protoc_insertion_point(field_set_allocated:house.SHouseDetail.hostAvatar)
}

// string hostNick = 11;
inline void SHouseDetail::clear_hostnick() {
  hostnick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SHouseDetail::hostnick() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.hostNick)
  return _internal_hostnick();
}
inline void SHouseDetail::set_hostnick(const std::string& value) {
  _internal_set_hostnick(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.hostNick)
}
inline std::string* SHouseDetail::mutable_hostnick() {
  // @@protoc_insertion_point(field_mutable:house.SHouseDetail.hostNick)
  return _internal_mutable_hostnick();
}
inline const std::string& SHouseDetail::_internal_hostnick() const {
  return hostnick_.GetNoArena();
}
inline void SHouseDetail::_internal_set_hostnick(const std::string& value) {
  
  hostnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SHouseDetail::set_hostnick(std::string&& value) {
  
  hostnick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:house.SHouseDetail.hostNick)
}
inline void SHouseDetail::set_hostnick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:house.SHouseDetail.hostNick)
}
inline void SHouseDetail::set_hostnick(const char* value, size_t size) {
  
  hostnick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:house.SHouseDetail.hostNick)
}
inline std::string* SHouseDetail::_internal_mutable_hostnick() {
  
  return hostnick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SHouseDetail::release_hostnick() {
  // @@protoc_insertion_point(field_release:house.SHouseDetail.hostNick)
  
  return hostnick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SHouseDetail::set_allocated_hostnick(std::string* hostnick) {
  if (hostnick != nullptr) {
    
  } else {
    
  }
  hostnick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostnick);
  // @@protoc_insertion_point(field_set_allocated:house.SHouseDetail.hostNick)
}

// int32 scene = 12;
inline void SHouseDetail::clear_scene() {
  scene_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::_internal_scene() const {
  return scene_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHouseDetail::scene() const {
  // @@protoc_insertion_point(field_get:house.SHouseDetail.scene)
  return _internal_scene();
}
inline void SHouseDetail::_internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_ = value;
}
inline void SHouseDetail::set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:house.SHouseDetail.scene)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace house

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_house_2eproto
