// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qianduoduo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_qianduoduo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_qianduoduo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_qianduoduo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_qianduoduo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_qianduoduo_2eproto;
namespace pb {
class BEarthOrderList;
class BEarthOrderListDefaultTypeInternal;
extern BEarthOrderListDefaultTypeInternal _BEarthOrderList_default_instance_;
class BMoneyOrderList;
class BMoneyOrderListDefaultTypeInternal;
extern BMoneyOrderListDefaultTypeInternal _BMoneyOrderList_default_instance_;
class CBuyMoneyOrder;
class CBuyMoneyOrderDefaultTypeInternal;
extern CBuyMoneyOrderDefaultTypeInternal _CBuyMoneyOrder_default_instance_;
class CEarthOrderList;
class CEarthOrderListDefaultTypeInternal;
extern CEarthOrderListDefaultTypeInternal _CEarthOrderList_default_instance_;
class CMoneyOrderList;
class CMoneyOrderListDefaultTypeInternal;
extern CMoneyOrderListDefaultTypeInternal _CMoneyOrderList_default_instance_;
class CThrowOrder;
class CThrowOrderDefaultTypeInternal;
extern CThrowOrderDefaultTypeInternal _CThrowOrder_default_instance_;
class SBuyMoneyOrder;
class SBuyMoneyOrderDefaultTypeInternal;
extern SBuyMoneyOrderDefaultTypeInternal _SBuyMoneyOrder_default_instance_;
class SEarthOrderList;
class SEarthOrderListDefaultTypeInternal;
extern SEarthOrderListDefaultTypeInternal _SEarthOrderList_default_instance_;
class SMoneyOrderList;
class SMoneyOrderListDefaultTypeInternal;
extern SMoneyOrderListDefaultTypeInternal _SMoneyOrderList_default_instance_;
class SThrowOrder;
class SThrowOrderDefaultTypeInternal;
extern SThrowOrderDefaultTypeInternal _SThrowOrder_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::BEarthOrderList* Arena::CreateMaybeMessage<::pb::BEarthOrderList>(Arena*);
template<> ::pb::BMoneyOrderList* Arena::CreateMaybeMessage<::pb::BMoneyOrderList>(Arena*);
template<> ::pb::CBuyMoneyOrder* Arena::CreateMaybeMessage<::pb::CBuyMoneyOrder>(Arena*);
template<> ::pb::CEarthOrderList* Arena::CreateMaybeMessage<::pb::CEarthOrderList>(Arena*);
template<> ::pb::CMoneyOrderList* Arena::CreateMaybeMessage<::pb::CMoneyOrderList>(Arena*);
template<> ::pb::CThrowOrder* Arena::CreateMaybeMessage<::pb::CThrowOrder>(Arena*);
template<> ::pb::SBuyMoneyOrder* Arena::CreateMaybeMessage<::pb::SBuyMoneyOrder>(Arena*);
template<> ::pb::SEarthOrderList* Arena::CreateMaybeMessage<::pb::SEarthOrderList>(Arena*);
template<> ::pb::SMoneyOrderList* Arena::CreateMaybeMessage<::pb::SMoneyOrderList>(Arena*);
template<> ::pb::SThrowOrder* Arena::CreateMaybeMessage<::pb::SThrowOrder>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class BMoneyOrderList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BMoneyOrderList) */ {
 public:
  BMoneyOrderList();
  virtual ~BMoneyOrderList();

  BMoneyOrderList(const BMoneyOrderList& from);
  BMoneyOrderList(BMoneyOrderList&& from) noexcept
    : BMoneyOrderList() {
    *this = ::std::move(from);
  }

  inline BMoneyOrderList& operator=(const BMoneyOrderList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMoneyOrderList& operator=(BMoneyOrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMoneyOrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMoneyOrderList* internal_default_instance() {
    return reinterpret_cast<const BMoneyOrderList*>(
               &_BMoneyOrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BMoneyOrderList& a, BMoneyOrderList& b) {
    a.Swap(&b);
  }
  inline void Swap(BMoneyOrderList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BMoneyOrderList* New() const final {
    return CreateMaybeMessage<BMoneyOrderList>(nullptr);
  }

  BMoneyOrderList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMoneyOrderList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMoneyOrderList& from);
  void MergeFrom(const BMoneyOrderList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMoneyOrderList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BMoneyOrderList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kOrderIdFieldNumber = 1,
    kUidFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 orderId = 1;
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::int32 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BMoneyOrderList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// -------------------------------------------------------------------

class CMoneyOrderList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CMoneyOrderList) */ {
 public:
  CMoneyOrderList();
  virtual ~CMoneyOrderList();

  CMoneyOrderList(const CMoneyOrderList& from);
  CMoneyOrderList(CMoneyOrderList&& from) noexcept
    : CMoneyOrderList() {
    *this = ::std::move(from);
  }

  inline CMoneyOrderList& operator=(const CMoneyOrderList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMoneyOrderList& operator=(CMoneyOrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMoneyOrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMoneyOrderList* internal_default_instance() {
    return reinterpret_cast<const CMoneyOrderList*>(
               &_CMoneyOrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMoneyOrderList& a, CMoneyOrderList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMoneyOrderList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMoneyOrderList* New() const final {
    return CreateMaybeMessage<CMoneyOrderList>(nullptr);
  }

  CMoneyOrderList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMoneyOrderList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMoneyOrderList& from);
  void MergeFrom(const CMoneyOrderList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMoneyOrderList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CMoneyOrderList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.CMoneyOrderList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// -------------------------------------------------------------------

class SMoneyOrderList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SMoneyOrderList) */ {
 public:
  SMoneyOrderList();
  virtual ~SMoneyOrderList();

  SMoneyOrderList(const SMoneyOrderList& from);
  SMoneyOrderList(SMoneyOrderList&& from) noexcept
    : SMoneyOrderList() {
    *this = ::std::move(from);
  }

  inline SMoneyOrderList& operator=(const SMoneyOrderList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoneyOrderList& operator=(SMoneyOrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMoneyOrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMoneyOrderList* internal_default_instance() {
    return reinterpret_cast<const SMoneyOrderList*>(
               &_SMoneyOrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SMoneyOrderList& a, SMoneyOrderList& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoneyOrderList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMoneyOrderList* New() const final {
    return CreateMaybeMessage<SMoneyOrderList>(nullptr);
  }

  SMoneyOrderList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMoneyOrderList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMoneyOrderList& from);
  void MergeFrom(const SMoneyOrderList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoneyOrderList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SMoneyOrderList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // repeated .pb.BMoneyOrderList list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::pb::BMoneyOrderList* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BMoneyOrderList >*
      mutable_list();
  private:
  const ::pb::BMoneyOrderList& _internal_list(int index) const;
  ::pb::BMoneyOrderList* _internal_add_list();
  public:
  const ::pb::BMoneyOrderList& list(int index) const;
  ::pb::BMoneyOrderList* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BMoneyOrderList >&
      list() const;

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SMoneyOrderList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BMoneyOrderList > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// -------------------------------------------------------------------

class CThrowOrder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CThrowOrder) */ {
 public:
  CThrowOrder();
  virtual ~CThrowOrder();

  CThrowOrder(const CThrowOrder& from);
  CThrowOrder(CThrowOrder&& from) noexcept
    : CThrowOrder() {
    *this = ::std::move(from);
  }

  inline CThrowOrder& operator=(const CThrowOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CThrowOrder& operator=(CThrowOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CThrowOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CThrowOrder* internal_default_instance() {
    return reinterpret_cast<const CThrowOrder*>(
               &_CThrowOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CThrowOrder& a, CThrowOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CThrowOrder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CThrowOrder* New() const final {
    return CreateMaybeMessage<CThrowOrder>(nullptr);
  }

  CThrowOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CThrowOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CThrowOrder& from);
  void MergeFrom(const CThrowOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CThrowOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CThrowOrder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kOrderIdFieldNumber = 1,
  };
  // .vector.PVector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // int32 orderId = 1;
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::int32 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CThrowOrder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vector::PVector3* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// -------------------------------------------------------------------

class SThrowOrder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SThrowOrder) */ {
 public:
  SThrowOrder();
  virtual ~SThrowOrder();

  SThrowOrder(const SThrowOrder& from);
  SThrowOrder(SThrowOrder&& from) noexcept
    : SThrowOrder() {
    *this = ::std::move(from);
  }

  inline SThrowOrder& operator=(const SThrowOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline SThrowOrder& operator=(SThrowOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SThrowOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SThrowOrder* internal_default_instance() {
    return reinterpret_cast<const SThrowOrder*>(
               &_SThrowOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SThrowOrder& a, SThrowOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(SThrowOrder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SThrowOrder* New() const final {
    return CreateMaybeMessage<SThrowOrder>(nullptr);
  }

  SThrowOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SThrowOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SThrowOrder& from);
  void MergeFrom(const SThrowOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SThrowOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SThrowOrder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 4,
    kPositionFieldNumber = 5,
    kOrderIdFieldNumber = 1,
    kUidFieldNumber = 2,
    kCodeFieldNumber = 3,
    kExpireTimeFieldNumber = 6,
    kThrowUidFieldNumber = 7,
    kGoodsIdFieldNumber = 8,
    kPriceFieldNumber = 9,
    kCoinTypeFieldNumber = 10,
  };
  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .vector.PVector3 position = 5;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // int32 orderId = 1;
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::int32 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 3;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expireTime = 6;
  void clear_expiretime();
  ::PROTOBUF_NAMESPACE_ID::int32 expiretime() const;
  void set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expiretime() const;
  void _internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 throwUid = 7;
  void clear_throwuid();
  ::PROTOBUF_NAMESPACE_ID::int32 throwuid() const;
  void set_throwuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_throwuid() const;
  void _internal_set_throwuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 8;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 9;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coinType = 10;
  void clear_cointype();
  ::PROTOBUF_NAMESPACE_ID::int32 cointype() const;
  void set_cointype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cointype() const;
  void _internal_set_cointype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SThrowOrder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::vector::PVector3* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 expiretime_;
  ::PROTOBUF_NAMESPACE_ID::int32 throwuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 cointype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// -------------------------------------------------------------------

class BEarthOrderList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BEarthOrderList) */ {
 public:
  BEarthOrderList();
  virtual ~BEarthOrderList();

  BEarthOrderList(const BEarthOrderList& from);
  BEarthOrderList(BEarthOrderList&& from) noexcept
    : BEarthOrderList() {
    *this = ::std::move(from);
  }

  inline BEarthOrderList& operator=(const BEarthOrderList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BEarthOrderList& operator=(BEarthOrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BEarthOrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BEarthOrderList* internal_default_instance() {
    return reinterpret_cast<const BEarthOrderList*>(
               &_BEarthOrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BEarthOrderList& a, BEarthOrderList& b) {
    a.Swap(&b);
  }
  inline void Swap(BEarthOrderList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BEarthOrderList* New() const final {
    return CreateMaybeMessage<BEarthOrderList>(nullptr);
  }

  BEarthOrderList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BEarthOrderList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BEarthOrderList& from);
  void MergeFrom(const BEarthOrderList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BEarthOrderList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BEarthOrderList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPositionFieldNumber = 6,
    kOrderIdFieldNumber = 1,
    kUidFieldNumber = 3,
    kPriceFieldNumber = 4,
    kCoinTypeFieldNumber = 5,
    kGoodsIdFieldNumber = 7,
    kExpireTimeFieldNumber = 8,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .vector.PVector3 position = 6;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::vector::PVector3& position() const;
  ::vector::PVector3* release_position();
  ::vector::PVector3* mutable_position();
  void set_allocated_position(::vector::PVector3* position);
  private:
  const ::vector::PVector3& _internal_position() const;
  ::vector::PVector3* _internal_mutable_position();
  public:

  // int32 orderId = 1;
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::int32 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 4;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coinType = 5;
  void clear_cointype();
  ::PROTOBUF_NAMESPACE_ID::int32 cointype() const;
  void set_cointype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cointype() const;
  void _internal_set_cointype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 7;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expireTime = 8;
  void clear_expiretime();
  ::PROTOBUF_NAMESPACE_ID::int32 expiretime() const;
  void set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expiretime() const;
  void _internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BEarthOrderList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::vector::PVector3* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 cointype_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 expiretime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// -------------------------------------------------------------------

class CEarthOrderList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CEarthOrderList) */ {
 public:
  CEarthOrderList();
  virtual ~CEarthOrderList();

  CEarthOrderList(const CEarthOrderList& from);
  CEarthOrderList(CEarthOrderList&& from) noexcept
    : CEarthOrderList() {
    *this = ::std::move(from);
  }

  inline CEarthOrderList& operator=(const CEarthOrderList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEarthOrderList& operator=(CEarthOrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CEarthOrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEarthOrderList* internal_default_instance() {
    return reinterpret_cast<const CEarthOrderList*>(
               &_CEarthOrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CEarthOrderList& a, CEarthOrderList& b) {
    a.Swap(&b);
  }
  inline void Swap(CEarthOrderList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CEarthOrderList* New() const final {
    return CreateMaybeMessage<CEarthOrderList>(nullptr);
  }

  CEarthOrderList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CEarthOrderList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CEarthOrderList& from);
  void MergeFrom(const CEarthOrderList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEarthOrderList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CEarthOrderList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.CEarthOrderList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// -------------------------------------------------------------------

class SEarthOrderList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SEarthOrderList) */ {
 public:
  SEarthOrderList();
  virtual ~SEarthOrderList();

  SEarthOrderList(const SEarthOrderList& from);
  SEarthOrderList(SEarthOrderList&& from) noexcept
    : SEarthOrderList() {
    *this = ::std::move(from);
  }

  inline SEarthOrderList& operator=(const SEarthOrderList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SEarthOrderList& operator=(SEarthOrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SEarthOrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SEarthOrderList* internal_default_instance() {
    return reinterpret_cast<const SEarthOrderList*>(
               &_SEarthOrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SEarthOrderList& a, SEarthOrderList& b) {
    a.Swap(&b);
  }
  inline void Swap(SEarthOrderList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SEarthOrderList* New() const final {
    return CreateMaybeMessage<SEarthOrderList>(nullptr);
  }

  SEarthOrderList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SEarthOrderList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SEarthOrderList& from);
  void MergeFrom(const SEarthOrderList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SEarthOrderList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SEarthOrderList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .pb.BEarthOrderList list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::pb::BEarthOrderList* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BEarthOrderList >*
      mutable_list();
  private:
  const ::pb::BEarthOrderList& _internal_list(int index) const;
  ::pb::BEarthOrderList* _internal_add_list();
  public:
  const ::pb::BEarthOrderList& list(int index) const;
  ::pb::BEarthOrderList* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BEarthOrderList >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.SEarthOrderList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BEarthOrderList > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// -------------------------------------------------------------------

class CBuyMoneyOrder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CBuyMoneyOrder) */ {
 public:
  CBuyMoneyOrder();
  virtual ~CBuyMoneyOrder();

  CBuyMoneyOrder(const CBuyMoneyOrder& from);
  CBuyMoneyOrder(CBuyMoneyOrder&& from) noexcept
    : CBuyMoneyOrder() {
    *this = ::std::move(from);
  }

  inline CBuyMoneyOrder& operator=(const CBuyMoneyOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBuyMoneyOrder& operator=(CBuyMoneyOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBuyMoneyOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBuyMoneyOrder* internal_default_instance() {
    return reinterpret_cast<const CBuyMoneyOrder*>(
               &_CBuyMoneyOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CBuyMoneyOrder& a, CBuyMoneyOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CBuyMoneyOrder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBuyMoneyOrder* New() const final {
    return CreateMaybeMessage<CBuyMoneyOrder>(nullptr);
  }

  CBuyMoneyOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBuyMoneyOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBuyMoneyOrder& from);
  void MergeFrom(const CBuyMoneyOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBuyMoneyOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CBuyMoneyOrder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // int32 orderId = 1;
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::int32 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CBuyMoneyOrder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// -------------------------------------------------------------------

class SBuyMoneyOrder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SBuyMoneyOrder) */ {
 public:
  SBuyMoneyOrder();
  virtual ~SBuyMoneyOrder();

  SBuyMoneyOrder(const SBuyMoneyOrder& from);
  SBuyMoneyOrder(SBuyMoneyOrder&& from) noexcept
    : SBuyMoneyOrder() {
    *this = ::std::move(from);
  }

  inline SBuyMoneyOrder& operator=(const SBuyMoneyOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBuyMoneyOrder& operator=(SBuyMoneyOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBuyMoneyOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBuyMoneyOrder* internal_default_instance() {
    return reinterpret_cast<const SBuyMoneyOrder*>(
               &_SBuyMoneyOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SBuyMoneyOrder& a, SBuyMoneyOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(SBuyMoneyOrder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBuyMoneyOrder* New() const final {
    return CreateMaybeMessage<SBuyMoneyOrder>(nullptr);
  }

  SBuyMoneyOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBuyMoneyOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBuyMoneyOrder& from);
  void MergeFrom(const SBuyMoneyOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBuyMoneyOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SBuyMoneyOrder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qianduoduo_2eproto);
    return ::descriptor_table_qianduoduo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kOrderIdFieldNumber = 1,
    kCodeFieldNumber = 2,
    kUidFieldNumber = 4,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 orderId = 1;
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::int32 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 4;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SBuyMoneyOrder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qianduoduo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BMoneyOrderList

// int32 orderId = 1;
inline void BMoneyOrderList::clear_orderid() {
  orderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoneyOrderList::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoneyOrderList::orderid() const {
  // @@protoc_insertion_point(field_get:pb.BMoneyOrderList.orderId)
  return _internal_orderid();
}
inline void BMoneyOrderList::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderid_ = value;
}
inline void BMoneyOrderList::set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:pb.BMoneyOrderList.orderId)
}

// string name = 2;
inline void BMoneyOrderList::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BMoneyOrderList::name() const {
  // @@protoc_insertion_point(field_get:pb.BMoneyOrderList.name)
  return _internal_name();
}
inline void BMoneyOrderList::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.BMoneyOrderList.name)
}
inline std::string* BMoneyOrderList::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.BMoneyOrderList.name)
  return _internal_mutable_name();
}
inline const std::string& BMoneyOrderList::_internal_name() const {
  return name_.GetNoArena();
}
inline void BMoneyOrderList::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BMoneyOrderList::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BMoneyOrderList.name)
}
inline void BMoneyOrderList::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BMoneyOrderList.name)
}
inline void BMoneyOrderList::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BMoneyOrderList.name)
}
inline std::string* BMoneyOrderList::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BMoneyOrderList::release_name() {
  // @@protoc_insertion_point(field_release:pb.BMoneyOrderList.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BMoneyOrderList::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.BMoneyOrderList.name)
}

// int32 uid = 3;
inline void BMoneyOrderList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoneyOrderList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMoneyOrderList::uid() const {
  // @@protoc_insertion_point(field_get:pb.BMoneyOrderList.uid)
  return _internal_uid();
}
inline void BMoneyOrderList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BMoneyOrderList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.BMoneyOrderList.uid)
}

// -------------------------------------------------------------------

// CMoneyOrderList

// -------------------------------------------------------------------

// SMoneyOrderList

// repeated .pb.BMoneyOrderList list = 1;
inline int SMoneyOrderList::_internal_list_size() const {
  return list_.size();
}
inline int SMoneyOrderList::list_size() const {
  return _internal_list_size();
}
inline void SMoneyOrderList::clear_list() {
  list_.Clear();
}
inline ::pb::BMoneyOrderList* SMoneyOrderList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SMoneyOrderList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BMoneyOrderList >*
SMoneyOrderList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.SMoneyOrderList.list)
  return &list_;
}
inline const ::pb::BMoneyOrderList& SMoneyOrderList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::pb::BMoneyOrderList& SMoneyOrderList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.SMoneyOrderList.list)
  return _internal_list(index);
}
inline ::pb::BMoneyOrderList* SMoneyOrderList::_internal_add_list() {
  return list_.Add();
}
inline ::pb::BMoneyOrderList* SMoneyOrderList::add_list() {
  // @@protoc_insertion_point(field_add:pb.SMoneyOrderList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BMoneyOrderList >&
SMoneyOrderList::list() const {
  // @@protoc_insertion_point(field_list:pb.SMoneyOrderList.list)
  return list_;
}

// int32 uid = 2;
inline void SMoneyOrderList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoneyOrderList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMoneyOrderList::uid() const {
  // @@protoc_insertion_point(field_get:pb.SMoneyOrderList.uid)
  return _internal_uid();
}
inline void SMoneyOrderList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SMoneyOrderList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.SMoneyOrderList.uid)
}

// -------------------------------------------------------------------

// CThrowOrder

// int32 orderId = 1;
inline void CThrowOrder::clear_orderid() {
  orderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CThrowOrder::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CThrowOrder::orderid() const {
  // @@protoc_insertion_point(field_get:pb.CThrowOrder.orderId)
  return _internal_orderid();
}
inline void CThrowOrder::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderid_ = value;
}
inline void CThrowOrder::set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:pb.CThrowOrder.orderId)
}

// .vector.PVector3 position = 2;
inline bool CThrowOrder::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CThrowOrder::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& CThrowOrder::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& CThrowOrder::position() const {
  // @@protoc_insertion_point(field_get:pb.CThrowOrder.position)
  return _internal_position();
}
inline ::vector::PVector3* CThrowOrder::release_position() {
  // @@protoc_insertion_point(field_release:pb.CThrowOrder.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* CThrowOrder::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* CThrowOrder::mutable_position() {
  // @@protoc_insertion_point(field_mutable:pb.CThrowOrder.position)
  return _internal_mutable_position();
}
inline void CThrowOrder::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:pb.CThrowOrder.position)
}

// -------------------------------------------------------------------

// SThrowOrder

// int32 orderId = 1;
inline void SThrowOrder::clear_orderid() {
  orderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::orderid() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.orderId)
  return _internal_orderid();
}
inline void SThrowOrder::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderid_ = value;
}
inline void SThrowOrder::set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:pb.SThrowOrder.orderId)
}

// int32 uid = 2;
inline void SThrowOrder::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::uid() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.uid)
  return _internal_uid();
}
inline void SThrowOrder::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SThrowOrder::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.SThrowOrder.uid)
}

// int32 code = 3;
inline void SThrowOrder::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::code() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.code)
  return _internal_code();
}
inline void SThrowOrder::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SThrowOrder::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pb.SThrowOrder.code)
}

// string msg = 4;
inline void SThrowOrder::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SThrowOrder::msg() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.msg)
  return _internal_msg();
}
inline void SThrowOrder::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:pb.SThrowOrder.msg)
}
inline std::string* SThrowOrder::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:pb.SThrowOrder.msg)
  return _internal_mutable_msg();
}
inline const std::string& SThrowOrder::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SThrowOrder::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SThrowOrder::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SThrowOrder.msg)
}
inline void SThrowOrder::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SThrowOrder.msg)
}
inline void SThrowOrder::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SThrowOrder.msg)
}
inline std::string* SThrowOrder::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SThrowOrder::release_msg() {
  // @@protoc_insertion_point(field_release:pb.SThrowOrder.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SThrowOrder::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.SThrowOrder.msg)
}

// .vector.PVector3 position = 5;
inline bool SThrowOrder::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SThrowOrder::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& SThrowOrder::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& SThrowOrder::position() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.position)
  return _internal_position();
}
inline ::vector::PVector3* SThrowOrder::release_position() {
  // @@protoc_insertion_point(field_release:pb.SThrowOrder.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* SThrowOrder::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* SThrowOrder::mutable_position() {
  // @@protoc_insertion_point(field_mutable:pb.SThrowOrder.position)
  return _internal_mutable_position();
}
inline void SThrowOrder::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:pb.SThrowOrder.position)
}

// int32 expireTime = 6;
inline void SThrowOrder::clear_expiretime() {
  expiretime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::_internal_expiretime() const {
  return expiretime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::expiretime() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.expireTime)
  return _internal_expiretime();
}
inline void SThrowOrder::_internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expiretime_ = value;
}
inline void SThrowOrder::set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:pb.SThrowOrder.expireTime)
}

// int32 throwUid = 7;
inline void SThrowOrder::clear_throwuid() {
  throwuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::_internal_throwuid() const {
  return throwuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::throwuid() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.throwUid)
  return _internal_throwuid();
}
inline void SThrowOrder::_internal_set_throwuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  throwuid_ = value;
}
inline void SThrowOrder::set_throwuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_throwuid(value);
  // @@protoc_insertion_point(field_set:pb.SThrowOrder.throwUid)
}

// int32 goodsId = 8;
inline void SThrowOrder::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.goodsId)
  return _internal_goodsid();
}
inline void SThrowOrder::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void SThrowOrder::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:pb.SThrowOrder.goodsId)
}

// int32 price = 9;
inline void SThrowOrder::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::price() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.price)
  return _internal_price();
}
inline void SThrowOrder::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void SThrowOrder::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:pb.SThrowOrder.price)
}

// int32 coinType = 10;
inline void SThrowOrder::clear_cointype() {
  cointype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::_internal_cointype() const {
  return cointype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SThrowOrder::cointype() const {
  // @@protoc_insertion_point(field_get:pb.SThrowOrder.coinType)
  return _internal_cointype();
}
inline void SThrowOrder::_internal_set_cointype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cointype_ = value;
}
inline void SThrowOrder::set_cointype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cointype(value);
  // @@protoc_insertion_point(field_set:pb.SThrowOrder.coinType)
}

// -------------------------------------------------------------------

// BEarthOrderList

// int32 orderId = 1;
inline void BEarthOrderList::clear_orderid() {
  orderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::orderid() const {
  // @@protoc_insertion_point(field_get:pb.BEarthOrderList.orderId)
  return _internal_orderid();
}
inline void BEarthOrderList::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderid_ = value;
}
inline void BEarthOrderList::set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:pb.BEarthOrderList.orderId)
}

// string name = 2;
inline void BEarthOrderList::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BEarthOrderList::name() const {
  // @@protoc_insertion_point(field_get:pb.BEarthOrderList.name)
  return _internal_name();
}
inline void BEarthOrderList::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.BEarthOrderList.name)
}
inline std::string* BEarthOrderList::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.BEarthOrderList.name)
  return _internal_mutable_name();
}
inline const std::string& BEarthOrderList::_internal_name() const {
  return name_.GetNoArena();
}
inline void BEarthOrderList::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BEarthOrderList::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BEarthOrderList.name)
}
inline void BEarthOrderList::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BEarthOrderList.name)
}
inline void BEarthOrderList::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BEarthOrderList.name)
}
inline std::string* BEarthOrderList::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BEarthOrderList::release_name() {
  // @@protoc_insertion_point(field_release:pb.BEarthOrderList.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BEarthOrderList::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.BEarthOrderList.name)
}

// int32 uid = 3;
inline void BEarthOrderList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::uid() const {
  // @@protoc_insertion_point(field_get:pb.BEarthOrderList.uid)
  return _internal_uid();
}
inline void BEarthOrderList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BEarthOrderList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.BEarthOrderList.uid)
}

// int32 price = 4;
inline void BEarthOrderList::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::price() const {
  // @@protoc_insertion_point(field_get:pb.BEarthOrderList.price)
  return _internal_price();
}
inline void BEarthOrderList::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void BEarthOrderList::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:pb.BEarthOrderList.price)
}

// int32 coinType = 5;
inline void BEarthOrderList::clear_cointype() {
  cointype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::_internal_cointype() const {
  return cointype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::cointype() const {
  // @@protoc_insertion_point(field_get:pb.BEarthOrderList.coinType)
  return _internal_cointype();
}
inline void BEarthOrderList::_internal_set_cointype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cointype_ = value;
}
inline void BEarthOrderList::set_cointype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cointype(value);
  // @@protoc_insertion_point(field_set:pb.BEarthOrderList.coinType)
}

// .vector.PVector3 position = 6;
inline bool BEarthOrderList::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BEarthOrderList::has_position() const {
  return _internal_has_position();
}
inline const ::vector::PVector3& BEarthOrderList::_internal_position() const {
  const ::vector::PVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vector::PVector3*>(
      &::vector::_PVector3_default_instance_);
}
inline const ::vector::PVector3& BEarthOrderList::position() const {
  // @@protoc_insertion_point(field_get:pb.BEarthOrderList.position)
  return _internal_position();
}
inline ::vector::PVector3* BEarthOrderList::release_position() {
  // @@protoc_insertion_point(field_release:pb.BEarthOrderList.position)
  
  ::vector::PVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::vector::PVector3* BEarthOrderList::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::vector::PVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::vector::PVector3* BEarthOrderList::mutable_position() {
  // @@protoc_insertion_point(field_mutable:pb.BEarthOrderList.position)
  return _internal_mutable_position();
}
inline void BEarthOrderList::set_allocated_position(::vector::PVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:pb.BEarthOrderList.position)
}

// int32 goodsId = 7;
inline void BEarthOrderList::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.BEarthOrderList.goodsId)
  return _internal_goodsid();
}
inline void BEarthOrderList::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void BEarthOrderList::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:pb.BEarthOrderList.goodsId)
}

// int32 expireTime = 8;
inline void BEarthOrderList::clear_expiretime() {
  expiretime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::_internal_expiretime() const {
  return expiretime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEarthOrderList::expiretime() const {
  // @@protoc_insertion_point(field_get:pb.BEarthOrderList.expireTime)
  return _internal_expiretime();
}
inline void BEarthOrderList::_internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expiretime_ = value;
}
inline void BEarthOrderList::set_expiretime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:pb.BEarthOrderList.expireTime)
}

// -------------------------------------------------------------------

// CEarthOrderList

// -------------------------------------------------------------------

// SEarthOrderList

// repeated .pb.BEarthOrderList list = 1;
inline int SEarthOrderList::_internal_list_size() const {
  return list_.size();
}
inline int SEarthOrderList::list_size() const {
  return _internal_list_size();
}
inline void SEarthOrderList::clear_list() {
  list_.Clear();
}
inline ::pb::BEarthOrderList* SEarthOrderList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SEarthOrderList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BEarthOrderList >*
SEarthOrderList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.SEarthOrderList.list)
  return &list_;
}
inline const ::pb::BEarthOrderList& SEarthOrderList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::pb::BEarthOrderList& SEarthOrderList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.SEarthOrderList.list)
  return _internal_list(index);
}
inline ::pb::BEarthOrderList* SEarthOrderList::_internal_add_list() {
  return list_.Add();
}
inline ::pb::BEarthOrderList* SEarthOrderList::add_list() {
  // @@protoc_insertion_point(field_add:pb.SEarthOrderList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BEarthOrderList >&
SEarthOrderList::list() const {
  // @@protoc_insertion_point(field_list:pb.SEarthOrderList.list)
  return list_;
}

// -------------------------------------------------------------------

// CBuyMoneyOrder

// int32 orderId = 1;
inline void CBuyMoneyOrder::clear_orderid() {
  orderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBuyMoneyOrder::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBuyMoneyOrder::orderid() const {
  // @@protoc_insertion_point(field_get:pb.CBuyMoneyOrder.orderId)
  return _internal_orderid();
}
inline void CBuyMoneyOrder::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderid_ = value;
}
inline void CBuyMoneyOrder::set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:pb.CBuyMoneyOrder.orderId)
}

// -------------------------------------------------------------------

// SBuyMoneyOrder

// int32 orderId = 1;
inline void SBuyMoneyOrder::clear_orderid() {
  orderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuyMoneyOrder::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuyMoneyOrder::orderid() const {
  // @@protoc_insertion_point(field_get:pb.SBuyMoneyOrder.orderId)
  return _internal_orderid();
}
inline void SBuyMoneyOrder::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderid_ = value;
}
inline void SBuyMoneyOrder::set_orderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:pb.SBuyMoneyOrder.orderId)
}

// int32 code = 2;
inline void SBuyMoneyOrder::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuyMoneyOrder::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuyMoneyOrder::code() const {
  // @@protoc_insertion_point(field_get:pb.SBuyMoneyOrder.code)
  return _internal_code();
}
inline void SBuyMoneyOrder::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SBuyMoneyOrder::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pb.SBuyMoneyOrder.code)
}

// string msg = 3;
inline void SBuyMoneyOrder::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SBuyMoneyOrder::msg() const {
  // @@protoc_insertion_point(field_get:pb.SBuyMoneyOrder.msg)
  return _internal_msg();
}
inline void SBuyMoneyOrder::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:pb.SBuyMoneyOrder.msg)
}
inline std::string* SBuyMoneyOrder::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:pb.SBuyMoneyOrder.msg)
  return _internal_mutable_msg();
}
inline const std::string& SBuyMoneyOrder::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SBuyMoneyOrder::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SBuyMoneyOrder::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SBuyMoneyOrder.msg)
}
inline void SBuyMoneyOrder::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SBuyMoneyOrder.msg)
}
inline void SBuyMoneyOrder::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SBuyMoneyOrder.msg)
}
inline std::string* SBuyMoneyOrder::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SBuyMoneyOrder::release_msg() {
  // @@protoc_insertion_point(field_release:pb.SBuyMoneyOrder.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SBuyMoneyOrder::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.SBuyMoneyOrder.msg)
}

// int32 uid = 4;
inline void SBuyMoneyOrder::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuyMoneyOrder::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBuyMoneyOrder::uid() const {
  // @@protoc_insertion_point(field_get:pb.SBuyMoneyOrder.uid)
  return _internal_uid();
}
inline void SBuyMoneyOrder::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SBuyMoneyOrder::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.SBuyMoneyOrder.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_qianduoduo_2eproto
