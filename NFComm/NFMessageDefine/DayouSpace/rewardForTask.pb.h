// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rewardForTask.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rewardForTask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rewardForTask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "treasureBox.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rewardForTask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rewardForTask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rewardForTask_2eproto;
namespace rewardForTask {
class CClaimReward;
class CClaimRewardDefaultTypeInternal;
extern CClaimRewardDefaultTypeInternal _CClaimReward_default_instance_;
class CClaimTask;
class CClaimTaskDefaultTypeInternal;
extern CClaimTaskDefaultTypeInternal _CClaimTask_default_instance_;
class CCompleteTaskReporting;
class CCompleteTaskReportingDefaultTypeInternal;
extern CCompleteTaskReportingDefaultTypeInternal _CCompleteTaskReporting_default_instance_;
class CRefreshDailyTasks;
class CRefreshDailyTasksDefaultTypeInternal;
extern CRefreshDailyTasksDefaultTypeInternal _CRefreshDailyTasks_default_instance_;
class CTaskList;
class CTaskListDefaultTypeInternal;
extern CTaskListDefaultTypeInternal _CTaskList_default_instance_;
class SClaimReward;
class SClaimRewardDefaultTypeInternal;
extern SClaimRewardDefaultTypeInternal _SClaimReward_default_instance_;
class SClaimTask;
class SClaimTaskDefaultTypeInternal;
extern SClaimTaskDefaultTypeInternal _SClaimTask_default_instance_;
class SCompleteTaskReporting;
class SCompleteTaskReportingDefaultTypeInternal;
extern SCompleteTaskReportingDefaultTypeInternal _SCompleteTaskReporting_default_instance_;
class SRefreshDailyTasks;
class SRefreshDailyTasksDefaultTypeInternal;
extern SRefreshDailyTasksDefaultTypeInternal _SRefreshDailyTasks_default_instance_;
class STaskList;
class STaskListDefaultTypeInternal;
extern STaskListDefaultTypeInternal _STaskList_default_instance_;
class TaskInfo;
class TaskInfoDefaultTypeInternal;
extern TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
}  // namespace rewardForTask
PROTOBUF_NAMESPACE_OPEN
template<> ::rewardForTask::CClaimReward* Arena::CreateMaybeMessage<::rewardForTask::CClaimReward>(Arena*);
template<> ::rewardForTask::CClaimTask* Arena::CreateMaybeMessage<::rewardForTask::CClaimTask>(Arena*);
template<> ::rewardForTask::CCompleteTaskReporting* Arena::CreateMaybeMessage<::rewardForTask::CCompleteTaskReporting>(Arena*);
template<> ::rewardForTask::CRefreshDailyTasks* Arena::CreateMaybeMessage<::rewardForTask::CRefreshDailyTasks>(Arena*);
template<> ::rewardForTask::CTaskList* Arena::CreateMaybeMessage<::rewardForTask::CTaskList>(Arena*);
template<> ::rewardForTask::SClaimReward* Arena::CreateMaybeMessage<::rewardForTask::SClaimReward>(Arena*);
template<> ::rewardForTask::SClaimTask* Arena::CreateMaybeMessage<::rewardForTask::SClaimTask>(Arena*);
template<> ::rewardForTask::SCompleteTaskReporting* Arena::CreateMaybeMessage<::rewardForTask::SCompleteTaskReporting>(Arena*);
template<> ::rewardForTask::SRefreshDailyTasks* Arena::CreateMaybeMessage<::rewardForTask::SRefreshDailyTasks>(Arena*);
template<> ::rewardForTask::STaskList* Arena::CreateMaybeMessage<::rewardForTask::STaskList>(Arena*);
template<> ::rewardForTask::TaskInfo* Arena::CreateMaybeMessage<::rewardForTask::TaskInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rewardForTask {

// ===================================================================

class CTaskList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.CTaskList) */ {
 public:
  CTaskList();
  virtual ~CTaskList();

  CTaskList(const CTaskList& from);
  CTaskList(CTaskList&& from) noexcept
    : CTaskList() {
    *this = ::std::move(from);
  }

  inline CTaskList& operator=(const CTaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTaskList& operator=(CTaskList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTaskList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTaskList* internal_default_instance() {
    return reinterpret_cast<const CTaskList*>(
               &_CTaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CTaskList& a, CTaskList& b) {
    a.Swap(&b);
  }
  inline void Swap(CTaskList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTaskList* New() const final {
    return CreateMaybeMessage<CTaskList>(nullptr);
  }

  CTaskList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTaskList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTaskList& from);
  void MergeFrom(const CTaskList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTaskList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.CTaskList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.CTaskList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class STaskList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.STaskList) */ {
 public:
  STaskList();
  virtual ~STaskList();

  STaskList(const STaskList& from);
  STaskList(STaskList&& from) noexcept
    : STaskList() {
    *this = ::std::move(from);
  }

  inline STaskList& operator=(const STaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline STaskList& operator=(STaskList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STaskList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STaskList* internal_default_instance() {
    return reinterpret_cast<const STaskList*>(
               &_STaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(STaskList& a, STaskList& b) {
    a.Swap(&b);
  }
  inline void Swap(STaskList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STaskList* New() const final {
    return CreateMaybeMessage<STaskList>(nullptr);
  }

  STaskList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STaskList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STaskList& from);
  void MergeFrom(const STaskList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STaskList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.STaskList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskDeskListFieldNumber = 1,
    kTaskCenterListFieldNumber = 2,
    kMsgFieldNumber = 4,
    kKeyFieldNumber = 6,
    kStateFieldNumber = 3,
    kRefreshPriceFieldNumber = 5,
    kTodayMaxYuanliFieldNumber = 7,
    kTodayYuanliFieldNumber = 8,
  };
  // repeated .rewardForTask.TaskInfo taskDeskList = 1;
  int taskdesklist_size() const;
  private:
  int _internal_taskdesklist_size() const;
  public:
  void clear_taskdesklist();
  ::rewardForTask::TaskInfo* mutable_taskdesklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >*
      mutable_taskdesklist();
  private:
  const ::rewardForTask::TaskInfo& _internal_taskdesklist(int index) const;
  ::rewardForTask::TaskInfo* _internal_add_taskdesklist();
  public:
  const ::rewardForTask::TaskInfo& taskdesklist(int index) const;
  ::rewardForTask::TaskInfo* add_taskdesklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >&
      taskdesklist() const;

  // repeated .rewardForTask.TaskInfo taskCenterList = 2;
  int taskcenterlist_size() const;
  private:
  int _internal_taskcenterlist_size() const;
  public:
  void clear_taskcenterlist();
  ::rewardForTask::TaskInfo* mutable_taskcenterlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >*
      mutable_taskcenterlist();
  private:
  const ::rewardForTask::TaskInfo& _internal_taskcenterlist(int index) const;
  ::rewardForTask::TaskInfo* _internal_add_taskcenterlist();
  public:
  const ::rewardForTask::TaskInfo& taskcenterlist(int index) const;
  ::rewardForTask::TaskInfo* add_taskcenterlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >&
      taskcenterlist() const;

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string key = 6;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 state = 3;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 refreshPrice = 5;
  void clear_refreshprice();
  ::PROTOBUF_NAMESPACE_ID::int32 refreshprice() const;
  void set_refreshprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refreshprice() const;
  void _internal_set_refreshprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 todayMaxYuanli = 7;
  void clear_todaymaxyuanli();
  ::PROTOBUF_NAMESPACE_ID::int32 todaymaxyuanli() const;
  void set_todaymaxyuanli(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_todaymaxyuanli() const;
  void _internal_set_todaymaxyuanli(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 todayYuanli = 8;
  void clear_todayyuanli();
  ::PROTOBUF_NAMESPACE_ID::int32 todayyuanli() const;
  void set_todayyuanli(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_todayyuanli() const;
  void _internal_set_todayyuanli(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.STaskList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo > taskdesklist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo > taskcenterlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 refreshprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 todaymaxyuanli_;
  ::PROTOBUF_NAMESPACE_ID::int32 todayyuanli_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class CClaimTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.CClaimTask) */ {
 public:
  CClaimTask();
  virtual ~CClaimTask();

  CClaimTask(const CClaimTask& from);
  CClaimTask(CClaimTask&& from) noexcept
    : CClaimTask() {
    *this = ::std::move(from);
  }

  inline CClaimTask& operator=(const CClaimTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClaimTask& operator=(CClaimTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClaimTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CClaimTask* internal_default_instance() {
    return reinterpret_cast<const CClaimTask*>(
               &_CClaimTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CClaimTask& a, CClaimTask& b) {
    a.Swap(&b);
  }
  inline void Swap(CClaimTask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClaimTask* New() const final {
    return CreateMaybeMessage<CClaimTask>(nullptr);
  }

  CClaimTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClaimTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClaimTask& from);
  void MergeFrom(const CClaimTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClaimTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.CClaimTask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kTaskIdFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 taskId = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.CClaimTask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class SClaimTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.SClaimTask) */ {
 public:
  SClaimTask();
  virtual ~SClaimTask();

  SClaimTask(const SClaimTask& from);
  SClaimTask(SClaimTask&& from) noexcept
    : SClaimTask() {
    *this = ::std::move(from);
  }

  inline SClaimTask& operator=(const SClaimTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SClaimTask& operator=(SClaimTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SClaimTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SClaimTask* internal_default_instance() {
    return reinterpret_cast<const SClaimTask*>(
               &_SClaimTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SClaimTask& a, SClaimTask& b) {
    a.Swap(&b);
  }
  inline void Swap(SClaimTask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SClaimTask* New() const final {
    return CreateMaybeMessage<SClaimTask>(nullptr);
  }

  SClaimTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SClaimTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SClaimTask& from);
  void MergeFrom(const SClaimTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SClaimTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.SClaimTask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kKeyFieldNumber = 4,
    kStateFieldNumber = 1,
    kTaskIdFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string key = 4;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 taskId = 3;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.SClaimTask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class CCompleteTaskReporting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.CCompleteTaskReporting) */ {
 public:
  CCompleteTaskReporting();
  virtual ~CCompleteTaskReporting();

  CCompleteTaskReporting(const CCompleteTaskReporting& from);
  CCompleteTaskReporting(CCompleteTaskReporting&& from) noexcept
    : CCompleteTaskReporting() {
    *this = ::std::move(from);
  }

  inline CCompleteTaskReporting& operator=(const CCompleteTaskReporting& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCompleteTaskReporting& operator=(CCompleteTaskReporting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCompleteTaskReporting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCompleteTaskReporting* internal_default_instance() {
    return reinterpret_cast<const CCompleteTaskReporting*>(
               &_CCompleteTaskReporting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCompleteTaskReporting& a, CCompleteTaskReporting& b) {
    a.Swap(&b);
  }
  inline void Swap(CCompleteTaskReporting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCompleteTaskReporting* New() const final {
    return CreateMaybeMessage<CCompleteTaskReporting>(nullptr);
  }

  CCompleteTaskReporting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCompleteTaskReporting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCompleteTaskReporting& from);
  void MergeFrom(const CCompleteTaskReporting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCompleteTaskReporting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.CCompleteTaskReporting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kTaskIdFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 taskId = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.CCompleteTaskReporting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class SCompleteTaskReporting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.SCompleteTaskReporting) */ {
 public:
  SCompleteTaskReporting();
  virtual ~SCompleteTaskReporting();

  SCompleteTaskReporting(const SCompleteTaskReporting& from);
  SCompleteTaskReporting(SCompleteTaskReporting&& from) noexcept
    : SCompleteTaskReporting() {
    *this = ::std::move(from);
  }

  inline SCompleteTaskReporting& operator=(const SCompleteTaskReporting& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCompleteTaskReporting& operator=(SCompleteTaskReporting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCompleteTaskReporting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCompleteTaskReporting* internal_default_instance() {
    return reinterpret_cast<const SCompleteTaskReporting*>(
               &_SCompleteTaskReporting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SCompleteTaskReporting& a, SCompleteTaskReporting& b) {
    a.Swap(&b);
  }
  inline void Swap(SCompleteTaskReporting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCompleteTaskReporting* New() const final {
    return CreateMaybeMessage<SCompleteTaskReporting>(nullptr);
  }

  SCompleteTaskReporting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCompleteTaskReporting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCompleteTaskReporting& from);
  void MergeFrom(const SCompleteTaskReporting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCompleteTaskReporting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.SCompleteTaskReporting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kKeyFieldNumber = 4,
    kStateFieldNumber = 1,
    kTaskIdFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string key = 4;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 taskId = 3;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.SCompleteTaskReporting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class CClaimReward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.CClaimReward) */ {
 public:
  CClaimReward();
  virtual ~CClaimReward();

  CClaimReward(const CClaimReward& from);
  CClaimReward(CClaimReward&& from) noexcept
    : CClaimReward() {
    *this = ::std::move(from);
  }

  inline CClaimReward& operator=(const CClaimReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClaimReward& operator=(CClaimReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClaimReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CClaimReward* internal_default_instance() {
    return reinterpret_cast<const CClaimReward*>(
               &_CClaimReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CClaimReward& a, CClaimReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CClaimReward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClaimReward* New() const final {
    return CreateMaybeMessage<CClaimReward>(nullptr);
  }

  CClaimReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClaimReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClaimReward& from);
  void MergeFrom(const CClaimReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClaimReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.CClaimReward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kTaskIdFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 taskId = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.CClaimReward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class SClaimReward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.SClaimReward) */ {
 public:
  SClaimReward();
  virtual ~SClaimReward();

  SClaimReward(const SClaimReward& from);
  SClaimReward(SClaimReward&& from) noexcept
    : SClaimReward() {
    *this = ::std::move(from);
  }

  inline SClaimReward& operator=(const SClaimReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SClaimReward& operator=(SClaimReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SClaimReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SClaimReward* internal_default_instance() {
    return reinterpret_cast<const SClaimReward*>(
               &_SClaimReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SClaimReward& a, SClaimReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SClaimReward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SClaimReward* New() const final {
    return CreateMaybeMessage<SClaimReward>(nullptr);
  }

  SClaimReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SClaimReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SClaimReward& from);
  void MergeFrom(const SClaimReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SClaimReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.SClaimReward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 3,
    kKeyFieldNumber = 5,
    kStateFieldNumber = 2,
    kTaskIdFieldNumber = 4,
  };
  // repeated .treasureBox.TreasureBoxRewardContent list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::treasureBox::TreasureBoxRewardContent* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >*
      mutable_list();
  private:
  const ::treasureBox::TreasureBoxRewardContent& _internal_list(int index) const;
  ::treasureBox::TreasureBoxRewardContent* _internal_add_list();
  public:
  const ::treasureBox::TreasureBoxRewardContent& list(int index) const;
  ::treasureBox::TreasureBoxRewardContent* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >&
      list() const;

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string key = 5;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 taskId = 4;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.SClaimReward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class CRefreshDailyTasks :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.CRefreshDailyTasks) */ {
 public:
  CRefreshDailyTasks();
  virtual ~CRefreshDailyTasks();

  CRefreshDailyTasks(const CRefreshDailyTasks& from);
  CRefreshDailyTasks(CRefreshDailyTasks&& from) noexcept
    : CRefreshDailyTasks() {
    *this = ::std::move(from);
  }

  inline CRefreshDailyTasks& operator=(const CRefreshDailyTasks& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRefreshDailyTasks& operator=(CRefreshDailyTasks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRefreshDailyTasks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CRefreshDailyTasks* internal_default_instance() {
    return reinterpret_cast<const CRefreshDailyTasks*>(
               &_CRefreshDailyTasks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CRefreshDailyTasks& a, CRefreshDailyTasks& b) {
    a.Swap(&b);
  }
  inline void Swap(CRefreshDailyTasks* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRefreshDailyTasks* New() const final {
    return CreateMaybeMessage<CRefreshDailyTasks>(nullptr);
  }

  CRefreshDailyTasks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRefreshDailyTasks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRefreshDailyTasks& from);
  void MergeFrom(const CRefreshDailyTasks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRefreshDailyTasks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.CRefreshDailyTasks";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rewardForTask.CRefreshDailyTasks)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class SRefreshDailyTasks :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.SRefreshDailyTasks) */ {
 public:
  SRefreshDailyTasks();
  virtual ~SRefreshDailyTasks();

  SRefreshDailyTasks(const SRefreshDailyTasks& from);
  SRefreshDailyTasks(SRefreshDailyTasks&& from) noexcept
    : SRefreshDailyTasks() {
    *this = ::std::move(from);
  }

  inline SRefreshDailyTasks& operator=(const SRefreshDailyTasks& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRefreshDailyTasks& operator=(SRefreshDailyTasks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRefreshDailyTasks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRefreshDailyTasks* internal_default_instance() {
    return reinterpret_cast<const SRefreshDailyTasks*>(
               &_SRefreshDailyTasks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SRefreshDailyTasks& a, SRefreshDailyTasks& b) {
    a.Swap(&b);
  }
  inline void Swap(SRefreshDailyTasks* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRefreshDailyTasks* New() const final {
    return CreateMaybeMessage<SRefreshDailyTasks>(nullptr);
  }

  SRefreshDailyTasks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRefreshDailyTasks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRefreshDailyTasks& from);
  void MergeFrom(const SRefreshDailyTasks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRefreshDailyTasks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.SRefreshDailyTasks";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 3,
    kStateFieldNumber = 2,
    kRefreshPriceFieldNumber = 4,
  };
  // repeated .rewardForTask.TaskInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::rewardForTask::TaskInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >*
      mutable_list();
  private:
  const ::rewardForTask::TaskInfo& _internal_list(int index) const;
  ::rewardForTask::TaskInfo* _internal_add_list();
  public:
  const ::rewardForTask::TaskInfo& list(int index) const;
  ::rewardForTask::TaskInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >&
      list() const;

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 refreshPrice = 4;
  void clear_refreshprice();
  ::PROTOBUF_NAMESPACE_ID::int32 refreshprice() const;
  void set_refreshprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refreshprice() const;
  void _internal_set_refreshprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.SRefreshDailyTasks)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 refreshprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// -------------------------------------------------------------------

class TaskInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForTask.TaskInfo) */ {
 public:
  TaskInfo();
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);
  TaskInfo(TaskInfo&& from) noexcept
    : TaskInfo() {
    *this = ::std::move(from);
  }

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInfo& operator=(TaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskInfo* internal_default_instance() {
    return reinterpret_cast<const TaskInfo*>(
               &_TaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TaskInfo& a, TaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskInfo* New() const final {
    return CreateMaybeMessage<TaskInfo>(nullptr);
  }

  TaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForTask.TaskInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForTask_2eproto);
    return ::descriptor_table_rewardForTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 2,
    kTaskNameFieldNumber = 3,
    kTaskKeyFieldNumber = 4,
    kTaskDescFieldNumber = 5,
    kTaskIdFieldNumber = 1,
    kStatusFieldNumber = 6,
  };
  // repeated .treasureBox.TreasureBoxRewardContent list = 2;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::treasureBox::TreasureBoxRewardContent* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >*
      mutable_list();
  private:
  const ::treasureBox::TreasureBoxRewardContent& _internal_list(int index) const;
  ::treasureBox::TreasureBoxRewardContent* _internal_add_list();
  public:
  const ::treasureBox::TreasureBoxRewardContent& list(int index) const;
  ::treasureBox::TreasureBoxRewardContent* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >&
      list() const;

  // string taskName = 3;
  void clear_taskname();
  const std::string& taskname() const;
  void set_taskname(const std::string& value);
  void set_taskname(std::string&& value);
  void set_taskname(const char* value);
  void set_taskname(const char* value, size_t size);
  std::string* mutable_taskname();
  std::string* release_taskname();
  void set_allocated_taskname(std::string* taskname);
  private:
  const std::string& _internal_taskname() const;
  void _internal_set_taskname(const std::string& value);
  std::string* _internal_mutable_taskname();
  public:

  // string taskKey = 4;
  void clear_taskkey();
  const std::string& taskkey() const;
  void set_taskkey(const std::string& value);
  void set_taskkey(std::string&& value);
  void set_taskkey(const char* value);
  void set_taskkey(const char* value, size_t size);
  std::string* mutable_taskkey();
  std::string* release_taskkey();
  void set_allocated_taskkey(std::string* taskkey);
  private:
  const std::string& _internal_taskkey() const;
  void _internal_set_taskkey(const std::string& value);
  std::string* _internal_mutable_taskkey();
  public:

  // string taskDesc = 5;
  void clear_taskdesc();
  const std::string& taskdesc() const;
  void set_taskdesc(const std::string& value);
  void set_taskdesc(std::string&& value);
  void set_taskdesc(const char* value);
  void set_taskdesc(const char* value, size_t size);
  std::string* mutable_taskdesc();
  std::string* release_taskdesc();
  void set_allocated_taskdesc(std::string* taskdesc);
  private:
  const std::string& _internal_taskdesc() const;
  void _internal_set_taskdesc(const std::string& value);
  std::string* _internal_mutable_taskdesc();
  public:

  // int32 taskId = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 6;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForTask.TaskInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskdesc_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForTask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CTaskList

// string key = 1;
inline void CTaskList::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTaskList::key() const {
  // @@protoc_insertion_point(field_get:rewardForTask.CTaskList.key)
  return _internal_key();
}
inline void CTaskList::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rewardForTask.CTaskList.key)
}
inline std::string* CTaskList::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.CTaskList.key)
  return _internal_mutable_key();
}
inline const std::string& CTaskList::_internal_key() const {
  return key_.GetNoArena();
}
inline void CTaskList::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CTaskList::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.CTaskList.key)
}
inline void CTaskList::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.CTaskList.key)
}
inline void CTaskList::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.CTaskList.key)
}
inline std::string* CTaskList::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTaskList::release_key() {
  // @@protoc_insertion_point(field_release:rewardForTask.CTaskList.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTaskList::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.CTaskList.key)
}

// -------------------------------------------------------------------

// STaskList

// repeated .rewardForTask.TaskInfo taskDeskList = 1;
inline int STaskList::_internal_taskdesklist_size() const {
  return taskdesklist_.size();
}
inline int STaskList::taskdesklist_size() const {
  return _internal_taskdesklist_size();
}
inline void STaskList::clear_taskdesklist() {
  taskdesklist_.Clear();
}
inline ::rewardForTask::TaskInfo* STaskList::mutable_taskdesklist(int index) {
  // @@protoc_insertion_point(field_mutable:rewardForTask.STaskList.taskDeskList)
  return taskdesklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >*
STaskList::mutable_taskdesklist() {
  // @@protoc_insertion_point(field_mutable_list:rewardForTask.STaskList.taskDeskList)
  return &taskdesklist_;
}
inline const ::rewardForTask::TaskInfo& STaskList::_internal_taskdesklist(int index) const {
  return taskdesklist_.Get(index);
}
inline const ::rewardForTask::TaskInfo& STaskList::taskdesklist(int index) const {
  // @@protoc_insertion_point(field_get:rewardForTask.STaskList.taskDeskList)
  return _internal_taskdesklist(index);
}
inline ::rewardForTask::TaskInfo* STaskList::_internal_add_taskdesklist() {
  return taskdesklist_.Add();
}
inline ::rewardForTask::TaskInfo* STaskList::add_taskdesklist() {
  // @@protoc_insertion_point(field_add:rewardForTask.STaskList.taskDeskList)
  return _internal_add_taskdesklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >&
STaskList::taskdesklist() const {
  // @@protoc_insertion_point(field_list:rewardForTask.STaskList.taskDeskList)
  return taskdesklist_;
}

// repeated .rewardForTask.TaskInfo taskCenterList = 2;
inline int STaskList::_internal_taskcenterlist_size() const {
  return taskcenterlist_.size();
}
inline int STaskList::taskcenterlist_size() const {
  return _internal_taskcenterlist_size();
}
inline void STaskList::clear_taskcenterlist() {
  taskcenterlist_.Clear();
}
inline ::rewardForTask::TaskInfo* STaskList::mutable_taskcenterlist(int index) {
  // @@protoc_insertion_point(field_mutable:rewardForTask.STaskList.taskCenterList)
  return taskcenterlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >*
STaskList::mutable_taskcenterlist() {
  // @@protoc_insertion_point(field_mutable_list:rewardForTask.STaskList.taskCenterList)
  return &taskcenterlist_;
}
inline const ::rewardForTask::TaskInfo& STaskList::_internal_taskcenterlist(int index) const {
  return taskcenterlist_.Get(index);
}
inline const ::rewardForTask::TaskInfo& STaskList::taskcenterlist(int index) const {
  // @@protoc_insertion_point(field_get:rewardForTask.STaskList.taskCenterList)
  return _internal_taskcenterlist(index);
}
inline ::rewardForTask::TaskInfo* STaskList::_internal_add_taskcenterlist() {
  return taskcenterlist_.Add();
}
inline ::rewardForTask::TaskInfo* STaskList::add_taskcenterlist() {
  // @@protoc_insertion_point(field_add:rewardForTask.STaskList.taskCenterList)
  return _internal_add_taskcenterlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >&
STaskList::taskcenterlist() const {
  // @@protoc_insertion_point(field_list:rewardForTask.STaskList.taskCenterList)
  return taskcenterlist_;
}

// int32 state = 3;
inline void STaskList::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STaskList::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STaskList::state() const {
  // @@protoc_insertion_point(field_get:rewardForTask.STaskList.state)
  return _internal_state();
}
inline void STaskList::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void STaskList::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:rewardForTask.STaskList.state)
}

// string msg = 4;
inline void STaskList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STaskList::msg() const {
  // @@protoc_insertion_point(field_get:rewardForTask.STaskList.msg)
  return _internal_msg();
}
inline void STaskList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rewardForTask.STaskList.msg)
}
inline std::string* STaskList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.STaskList.msg)
  return _internal_mutable_msg();
}
inline const std::string& STaskList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void STaskList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void STaskList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.STaskList.msg)
}
inline void STaskList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.STaskList.msg)
}
inline void STaskList::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.STaskList.msg)
}
inline std::string* STaskList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STaskList::release_msg() {
  // @@protoc_insertion_point(field_release:rewardForTask.STaskList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STaskList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.STaskList.msg)
}

// int32 refreshPrice = 5;
inline void STaskList::clear_refreshprice() {
  refreshprice_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STaskList::_internal_refreshprice() const {
  return refreshprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STaskList::refreshprice() const {
  // @@protoc_insertion_point(field_get:rewardForTask.STaskList.refreshPrice)
  return _internal_refreshprice();
}
inline void STaskList::_internal_set_refreshprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refreshprice_ = value;
}
inline void STaskList::set_refreshprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refreshprice(value);
  // @@protoc_insertion_point(field_set:rewardForTask.STaskList.refreshPrice)
}

// string key = 6;
inline void STaskList::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STaskList::key() const {
  // @@protoc_insertion_point(field_get:rewardForTask.STaskList.key)
  return _internal_key();
}
inline void STaskList::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rewardForTask.STaskList.key)
}
inline std::string* STaskList::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.STaskList.key)
  return _internal_mutable_key();
}
inline const std::string& STaskList::_internal_key() const {
  return key_.GetNoArena();
}
inline void STaskList::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void STaskList::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.STaskList.key)
}
inline void STaskList::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.STaskList.key)
}
inline void STaskList::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.STaskList.key)
}
inline std::string* STaskList::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STaskList::release_key() {
  // @@protoc_insertion_point(field_release:rewardForTask.STaskList.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STaskList::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.STaskList.key)
}

// int32 todayMaxYuanli = 7;
inline void STaskList::clear_todaymaxyuanli() {
  todaymaxyuanli_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STaskList::_internal_todaymaxyuanli() const {
  return todaymaxyuanli_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STaskList::todaymaxyuanli() const {
  // @@protoc_insertion_point(field_get:rewardForTask.STaskList.todayMaxYuanli)
  return _internal_todaymaxyuanli();
}
inline void STaskList::_internal_set_todaymaxyuanli(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  todaymaxyuanli_ = value;
}
inline void STaskList::set_todaymaxyuanli(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_todaymaxyuanli(value);
  // @@protoc_insertion_point(field_set:rewardForTask.STaskList.todayMaxYuanli)
}

// int32 todayYuanli = 8;
inline void STaskList::clear_todayyuanli() {
  todayyuanli_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STaskList::_internal_todayyuanli() const {
  return todayyuanli_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STaskList::todayyuanli() const {
  // @@protoc_insertion_point(field_get:rewardForTask.STaskList.todayYuanli)
  return _internal_todayyuanli();
}
inline void STaskList::_internal_set_todayyuanli(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  todayyuanli_ = value;
}
inline void STaskList::set_todayyuanli(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_todayyuanli(value);
  // @@protoc_insertion_point(field_set:rewardForTask.STaskList.todayYuanli)
}

// -------------------------------------------------------------------

// CClaimTask

// int32 taskId = 1;
inline void CClaimTask::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CClaimTask::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CClaimTask::taskid() const {
  // @@protoc_insertion_point(field_get:rewardForTask.CClaimTask.taskId)
  return _internal_taskid();
}
inline void CClaimTask::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void CClaimTask::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:rewardForTask.CClaimTask.taskId)
}

// string key = 2;
inline void CClaimTask::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CClaimTask::key() const {
  // @@protoc_insertion_point(field_get:rewardForTask.CClaimTask.key)
  return _internal_key();
}
inline void CClaimTask::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rewardForTask.CClaimTask.key)
}
inline std::string* CClaimTask::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.CClaimTask.key)
  return _internal_mutable_key();
}
inline const std::string& CClaimTask::_internal_key() const {
  return key_.GetNoArena();
}
inline void CClaimTask::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CClaimTask::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.CClaimTask.key)
}
inline void CClaimTask::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.CClaimTask.key)
}
inline void CClaimTask::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.CClaimTask.key)
}
inline std::string* CClaimTask::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CClaimTask::release_key() {
  // @@protoc_insertion_point(field_release:rewardForTask.CClaimTask.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CClaimTask::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.CClaimTask.key)
}

// -------------------------------------------------------------------

// SClaimTask

// int32 state = 1;
inline void SClaimTask::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SClaimTask::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SClaimTask::state() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SClaimTask.state)
  return _internal_state();
}
inline void SClaimTask::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SClaimTask::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SClaimTask.state)
}

// string msg = 2;
inline void SClaimTask::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SClaimTask::msg() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SClaimTask.msg)
  return _internal_msg();
}
inline void SClaimTask::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SClaimTask.msg)
}
inline std::string* SClaimTask::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.SClaimTask.msg)
  return _internal_mutable_msg();
}
inline const std::string& SClaimTask::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SClaimTask::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SClaimTask::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.SClaimTask.msg)
}
inline void SClaimTask::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.SClaimTask.msg)
}
inline void SClaimTask::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.SClaimTask.msg)
}
inline std::string* SClaimTask::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SClaimTask::release_msg() {
  // @@protoc_insertion_point(field_release:rewardForTask.SClaimTask.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SClaimTask::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.SClaimTask.msg)
}

// int32 taskId = 3;
inline void SClaimTask::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SClaimTask::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SClaimTask::taskid() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SClaimTask.taskId)
  return _internal_taskid();
}
inline void SClaimTask::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void SClaimTask::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SClaimTask.taskId)
}

// string key = 4;
inline void SClaimTask::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SClaimTask::key() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SClaimTask.key)
  return _internal_key();
}
inline void SClaimTask::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SClaimTask.key)
}
inline std::string* SClaimTask::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.SClaimTask.key)
  return _internal_mutable_key();
}
inline const std::string& SClaimTask::_internal_key() const {
  return key_.GetNoArena();
}
inline void SClaimTask::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SClaimTask::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.SClaimTask.key)
}
inline void SClaimTask::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.SClaimTask.key)
}
inline void SClaimTask::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.SClaimTask.key)
}
inline std::string* SClaimTask::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SClaimTask::release_key() {
  // @@protoc_insertion_point(field_release:rewardForTask.SClaimTask.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SClaimTask::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.SClaimTask.key)
}

// -------------------------------------------------------------------

// CCompleteTaskReporting

// int32 taskId = 1;
inline void CCompleteTaskReporting::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCompleteTaskReporting::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCompleteTaskReporting::taskid() const {
  // @@protoc_insertion_point(field_get:rewardForTask.CCompleteTaskReporting.taskId)
  return _internal_taskid();
}
inline void CCompleteTaskReporting::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void CCompleteTaskReporting::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:rewardForTask.CCompleteTaskReporting.taskId)
}

// string key = 2;
inline void CCompleteTaskReporting::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CCompleteTaskReporting::key() const {
  // @@protoc_insertion_point(field_get:rewardForTask.CCompleteTaskReporting.key)
  return _internal_key();
}
inline void CCompleteTaskReporting::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rewardForTask.CCompleteTaskReporting.key)
}
inline std::string* CCompleteTaskReporting::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.CCompleteTaskReporting.key)
  return _internal_mutable_key();
}
inline const std::string& CCompleteTaskReporting::_internal_key() const {
  return key_.GetNoArena();
}
inline void CCompleteTaskReporting::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CCompleteTaskReporting::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.CCompleteTaskReporting.key)
}
inline void CCompleteTaskReporting::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.CCompleteTaskReporting.key)
}
inline void CCompleteTaskReporting::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.CCompleteTaskReporting.key)
}
inline std::string* CCompleteTaskReporting::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CCompleteTaskReporting::release_key() {
  // @@protoc_insertion_point(field_release:rewardForTask.CCompleteTaskReporting.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CCompleteTaskReporting::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.CCompleteTaskReporting.key)
}

// -------------------------------------------------------------------

// SCompleteTaskReporting

// int32 state = 1;
inline void SCompleteTaskReporting::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCompleteTaskReporting::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCompleteTaskReporting::state() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SCompleteTaskReporting.state)
  return _internal_state();
}
inline void SCompleteTaskReporting::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SCompleteTaskReporting::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SCompleteTaskReporting.state)
}

// string msg = 2;
inline void SCompleteTaskReporting::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCompleteTaskReporting::msg() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SCompleteTaskReporting.msg)
  return _internal_msg();
}
inline void SCompleteTaskReporting::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SCompleteTaskReporting.msg)
}
inline std::string* SCompleteTaskReporting::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.SCompleteTaskReporting.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCompleteTaskReporting::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SCompleteTaskReporting::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCompleteTaskReporting::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.SCompleteTaskReporting.msg)
}
inline void SCompleteTaskReporting::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.SCompleteTaskReporting.msg)
}
inline void SCompleteTaskReporting::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.SCompleteTaskReporting.msg)
}
inline std::string* SCompleteTaskReporting::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCompleteTaskReporting::release_msg() {
  // @@protoc_insertion_point(field_release:rewardForTask.SCompleteTaskReporting.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCompleteTaskReporting::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.SCompleteTaskReporting.msg)
}

// int32 taskId = 3;
inline void SCompleteTaskReporting::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCompleteTaskReporting::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCompleteTaskReporting::taskid() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SCompleteTaskReporting.taskId)
  return _internal_taskid();
}
inline void SCompleteTaskReporting::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void SCompleteTaskReporting::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SCompleteTaskReporting.taskId)
}

// string key = 4;
inline void SCompleteTaskReporting::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCompleteTaskReporting::key() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SCompleteTaskReporting.key)
  return _internal_key();
}
inline void SCompleteTaskReporting::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SCompleteTaskReporting.key)
}
inline std::string* SCompleteTaskReporting::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.SCompleteTaskReporting.key)
  return _internal_mutable_key();
}
inline const std::string& SCompleteTaskReporting::_internal_key() const {
  return key_.GetNoArena();
}
inline void SCompleteTaskReporting::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCompleteTaskReporting::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.SCompleteTaskReporting.key)
}
inline void SCompleteTaskReporting::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.SCompleteTaskReporting.key)
}
inline void SCompleteTaskReporting::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.SCompleteTaskReporting.key)
}
inline std::string* SCompleteTaskReporting::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCompleteTaskReporting::release_key() {
  // @@protoc_insertion_point(field_release:rewardForTask.SCompleteTaskReporting.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCompleteTaskReporting::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.SCompleteTaskReporting.key)
}

// -------------------------------------------------------------------

// CClaimReward

// int32 taskId = 1;
inline void CClaimReward::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CClaimReward::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CClaimReward::taskid() const {
  // @@protoc_insertion_point(field_get:rewardForTask.CClaimReward.taskId)
  return _internal_taskid();
}
inline void CClaimReward::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void CClaimReward::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:rewardForTask.CClaimReward.taskId)
}

// string key = 2;
inline void CClaimReward::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CClaimReward::key() const {
  // @@protoc_insertion_point(field_get:rewardForTask.CClaimReward.key)
  return _internal_key();
}
inline void CClaimReward::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rewardForTask.CClaimReward.key)
}
inline std::string* CClaimReward::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.CClaimReward.key)
  return _internal_mutable_key();
}
inline const std::string& CClaimReward::_internal_key() const {
  return key_.GetNoArena();
}
inline void CClaimReward::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CClaimReward::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.CClaimReward.key)
}
inline void CClaimReward::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.CClaimReward.key)
}
inline void CClaimReward::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.CClaimReward.key)
}
inline std::string* CClaimReward::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CClaimReward::release_key() {
  // @@protoc_insertion_point(field_release:rewardForTask.CClaimReward.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CClaimReward::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.CClaimReward.key)
}

// -------------------------------------------------------------------

// SClaimReward

// repeated .treasureBox.TreasureBoxRewardContent list = 1;
inline int SClaimReward::_internal_list_size() const {
  return list_.size();
}
inline int SClaimReward::list_size() const {
  return _internal_list_size();
}
inline ::treasureBox::TreasureBoxRewardContent* SClaimReward::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:rewardForTask.SClaimReward.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >*
SClaimReward::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:rewardForTask.SClaimReward.list)
  return &list_;
}
inline const ::treasureBox::TreasureBoxRewardContent& SClaimReward::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::treasureBox::TreasureBoxRewardContent& SClaimReward::list(int index) const {
  // @@protoc_insertion_point(field_get:rewardForTask.SClaimReward.list)
  return _internal_list(index);
}
inline ::treasureBox::TreasureBoxRewardContent* SClaimReward::_internal_add_list() {
  return list_.Add();
}
inline ::treasureBox::TreasureBoxRewardContent* SClaimReward::add_list() {
  // @@protoc_insertion_point(field_add:rewardForTask.SClaimReward.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >&
SClaimReward::list() const {
  // @@protoc_insertion_point(field_list:rewardForTask.SClaimReward.list)
  return list_;
}

// int32 state = 2;
inline void SClaimReward::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SClaimReward::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SClaimReward::state() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SClaimReward.state)
  return _internal_state();
}
inline void SClaimReward::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SClaimReward::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SClaimReward.state)
}

// string msg = 3;
inline void SClaimReward::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SClaimReward::msg() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SClaimReward.msg)
  return _internal_msg();
}
inline void SClaimReward::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SClaimReward.msg)
}
inline std::string* SClaimReward::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.SClaimReward.msg)
  return _internal_mutable_msg();
}
inline const std::string& SClaimReward::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SClaimReward::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SClaimReward::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.SClaimReward.msg)
}
inline void SClaimReward::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.SClaimReward.msg)
}
inline void SClaimReward::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.SClaimReward.msg)
}
inline std::string* SClaimReward::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SClaimReward::release_msg() {
  // @@protoc_insertion_point(field_release:rewardForTask.SClaimReward.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SClaimReward::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.SClaimReward.msg)
}

// int32 taskId = 4;
inline void SClaimReward::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SClaimReward::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SClaimReward::taskid() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SClaimReward.taskId)
  return _internal_taskid();
}
inline void SClaimReward::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void SClaimReward::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SClaimReward.taskId)
}

// string key = 5;
inline void SClaimReward::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SClaimReward::key() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SClaimReward.key)
  return _internal_key();
}
inline void SClaimReward::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SClaimReward.key)
}
inline std::string* SClaimReward::mutable_key() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.SClaimReward.key)
  return _internal_mutable_key();
}
inline const std::string& SClaimReward::_internal_key() const {
  return key_.GetNoArena();
}
inline void SClaimReward::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SClaimReward::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.SClaimReward.key)
}
inline void SClaimReward::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.SClaimReward.key)
}
inline void SClaimReward::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.SClaimReward.key)
}
inline std::string* SClaimReward::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SClaimReward::release_key() {
  // @@protoc_insertion_point(field_release:rewardForTask.SClaimReward.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SClaimReward::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.SClaimReward.key)
}

// -------------------------------------------------------------------

// CRefreshDailyTasks

// -------------------------------------------------------------------

// SRefreshDailyTasks

// repeated .rewardForTask.TaskInfo list = 1;
inline int SRefreshDailyTasks::_internal_list_size() const {
  return list_.size();
}
inline int SRefreshDailyTasks::list_size() const {
  return _internal_list_size();
}
inline void SRefreshDailyTasks::clear_list() {
  list_.Clear();
}
inline ::rewardForTask::TaskInfo* SRefreshDailyTasks::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:rewardForTask.SRefreshDailyTasks.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >*
SRefreshDailyTasks::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:rewardForTask.SRefreshDailyTasks.list)
  return &list_;
}
inline const ::rewardForTask::TaskInfo& SRefreshDailyTasks::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::rewardForTask::TaskInfo& SRefreshDailyTasks::list(int index) const {
  // @@protoc_insertion_point(field_get:rewardForTask.SRefreshDailyTasks.list)
  return _internal_list(index);
}
inline ::rewardForTask::TaskInfo* SRefreshDailyTasks::_internal_add_list() {
  return list_.Add();
}
inline ::rewardForTask::TaskInfo* SRefreshDailyTasks::add_list() {
  // @@protoc_insertion_point(field_add:rewardForTask.SRefreshDailyTasks.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForTask::TaskInfo >&
SRefreshDailyTasks::list() const {
  // @@protoc_insertion_point(field_list:rewardForTask.SRefreshDailyTasks.list)
  return list_;
}

// int32 state = 2;
inline void SRefreshDailyTasks::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRefreshDailyTasks::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRefreshDailyTasks::state() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SRefreshDailyTasks.state)
  return _internal_state();
}
inline void SRefreshDailyTasks::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SRefreshDailyTasks::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SRefreshDailyTasks.state)
}

// string msg = 3;
inline void SRefreshDailyTasks::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SRefreshDailyTasks::msg() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SRefreshDailyTasks.msg)
  return _internal_msg();
}
inline void SRefreshDailyTasks::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SRefreshDailyTasks.msg)
}
inline std::string* SRefreshDailyTasks::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.SRefreshDailyTasks.msg)
  return _internal_mutable_msg();
}
inline const std::string& SRefreshDailyTasks::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SRefreshDailyTasks::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SRefreshDailyTasks::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.SRefreshDailyTasks.msg)
}
inline void SRefreshDailyTasks::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.SRefreshDailyTasks.msg)
}
inline void SRefreshDailyTasks::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.SRefreshDailyTasks.msg)
}
inline std::string* SRefreshDailyTasks::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SRefreshDailyTasks::release_msg() {
  // @@protoc_insertion_point(field_release:rewardForTask.SRefreshDailyTasks.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SRefreshDailyTasks::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.SRefreshDailyTasks.msg)
}

// int32 refreshPrice = 4;
inline void SRefreshDailyTasks::clear_refreshprice() {
  refreshprice_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRefreshDailyTasks::_internal_refreshprice() const {
  return refreshprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRefreshDailyTasks::refreshprice() const {
  // @@protoc_insertion_point(field_get:rewardForTask.SRefreshDailyTasks.refreshPrice)
  return _internal_refreshprice();
}
inline void SRefreshDailyTasks::_internal_set_refreshprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refreshprice_ = value;
}
inline void SRefreshDailyTasks::set_refreshprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refreshprice(value);
  // @@protoc_insertion_point(field_set:rewardForTask.SRefreshDailyTasks.refreshPrice)
}

// -------------------------------------------------------------------

// TaskInfo

// int32 taskId = 1;
inline void TaskInfo::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::taskid() const {
  // @@protoc_insertion_point(field_get:rewardForTask.TaskInfo.taskId)
  return _internal_taskid();
}
inline void TaskInfo::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void TaskInfo::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:rewardForTask.TaskInfo.taskId)
}

// repeated .treasureBox.TreasureBoxRewardContent list = 2;
inline int TaskInfo::_internal_list_size() const {
  return list_.size();
}
inline int TaskInfo::list_size() const {
  return _internal_list_size();
}
inline ::treasureBox::TreasureBoxRewardContent* TaskInfo::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:rewardForTask.TaskInfo.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >*
TaskInfo::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:rewardForTask.TaskInfo.list)
  return &list_;
}
inline const ::treasureBox::TreasureBoxRewardContent& TaskInfo::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::treasureBox::TreasureBoxRewardContent& TaskInfo::list(int index) const {
  // @@protoc_insertion_point(field_get:rewardForTask.TaskInfo.list)
  return _internal_list(index);
}
inline ::treasureBox::TreasureBoxRewardContent* TaskInfo::_internal_add_list() {
  return list_.Add();
}
inline ::treasureBox::TreasureBoxRewardContent* TaskInfo::add_list() {
  // @@protoc_insertion_point(field_add:rewardForTask.TaskInfo.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >&
TaskInfo::list() const {
  // @@protoc_insertion_point(field_list:rewardForTask.TaskInfo.list)
  return list_;
}

// string taskName = 3;
inline void TaskInfo::clear_taskname() {
  taskname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskInfo::taskname() const {
  // @@protoc_insertion_point(field_get:rewardForTask.TaskInfo.taskName)
  return _internal_taskname();
}
inline void TaskInfo::set_taskname(const std::string& value) {
  _internal_set_taskname(value);
  // @@protoc_insertion_point(field_set:rewardForTask.TaskInfo.taskName)
}
inline std::string* TaskInfo::mutable_taskname() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.TaskInfo.taskName)
  return _internal_mutable_taskname();
}
inline const std::string& TaskInfo::_internal_taskname() const {
  return taskname_.GetNoArena();
}
inline void TaskInfo::_internal_set_taskname(const std::string& value) {
  
  taskname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskInfo::set_taskname(std::string&& value) {
  
  taskname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.TaskInfo.taskName)
}
inline void TaskInfo::set_taskname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.TaskInfo.taskName)
}
inline void TaskInfo::set_taskname(const char* value, size_t size) {
  
  taskname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.TaskInfo.taskName)
}
inline std::string* TaskInfo::_internal_mutable_taskname() {
  
  return taskname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskInfo::release_taskname() {
  // @@protoc_insertion_point(field_release:rewardForTask.TaskInfo.taskName)
  
  return taskname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInfo::set_allocated_taskname(std::string* taskname) {
  if (taskname != nullptr) {
    
  } else {
    
  }
  taskname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskname);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.TaskInfo.taskName)
}

// string taskKey = 4;
inline void TaskInfo::clear_taskkey() {
  taskkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskInfo::taskkey() const {
  // @@protoc_insertion_point(field_get:rewardForTask.TaskInfo.taskKey)
  return _internal_taskkey();
}
inline void TaskInfo::set_taskkey(const std::string& value) {
  _internal_set_taskkey(value);
  // @@protoc_insertion_point(field_set:rewardForTask.TaskInfo.taskKey)
}
inline std::string* TaskInfo::mutable_taskkey() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.TaskInfo.taskKey)
  return _internal_mutable_taskkey();
}
inline const std::string& TaskInfo::_internal_taskkey() const {
  return taskkey_.GetNoArena();
}
inline void TaskInfo::_internal_set_taskkey(const std::string& value) {
  
  taskkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskInfo::set_taskkey(std::string&& value) {
  
  taskkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.TaskInfo.taskKey)
}
inline void TaskInfo::set_taskkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.TaskInfo.taskKey)
}
inline void TaskInfo::set_taskkey(const char* value, size_t size) {
  
  taskkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.TaskInfo.taskKey)
}
inline std::string* TaskInfo::_internal_mutable_taskkey() {
  
  return taskkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskInfo::release_taskkey() {
  // @@protoc_insertion_point(field_release:rewardForTask.TaskInfo.taskKey)
  
  return taskkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInfo::set_allocated_taskkey(std::string* taskkey) {
  if (taskkey != nullptr) {
    
  } else {
    
  }
  taskkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskkey);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.TaskInfo.taskKey)
}

// string taskDesc = 5;
inline void TaskInfo::clear_taskdesc() {
  taskdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskInfo::taskdesc() const {
  // @@protoc_insertion_point(field_get:rewardForTask.TaskInfo.taskDesc)
  return _internal_taskdesc();
}
inline void TaskInfo::set_taskdesc(const std::string& value) {
  _internal_set_taskdesc(value);
  // @@protoc_insertion_point(field_set:rewardForTask.TaskInfo.taskDesc)
}
inline std::string* TaskInfo::mutable_taskdesc() {
  // @@protoc_insertion_point(field_mutable:rewardForTask.TaskInfo.taskDesc)
  return _internal_mutable_taskdesc();
}
inline const std::string& TaskInfo::_internal_taskdesc() const {
  return taskdesc_.GetNoArena();
}
inline void TaskInfo::_internal_set_taskdesc(const std::string& value) {
  
  taskdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskInfo::set_taskdesc(std::string&& value) {
  
  taskdesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForTask.TaskInfo.taskDesc)
}
inline void TaskInfo::set_taskdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForTask.TaskInfo.taskDesc)
}
inline void TaskInfo::set_taskdesc(const char* value, size_t size) {
  
  taskdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForTask.TaskInfo.taskDesc)
}
inline std::string* TaskInfo::_internal_mutable_taskdesc() {
  
  return taskdesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskInfo::release_taskdesc() {
  // @@protoc_insertion_point(field_release:rewardForTask.TaskInfo.taskDesc)
  
  return taskdesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInfo::set_allocated_taskdesc(std::string* taskdesc) {
  if (taskdesc != nullptr) {
    
  } else {
    
  }
  taskdesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskdesc);
  // @@protoc_insertion_point(field_set_allocated:rewardForTask.TaskInfo.taskDesc)
}

// int32 status = 6;
inline void TaskInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::status() const {
  // @@protoc_insertion_point(field_get:rewardForTask.TaskInfo.status)
  return _internal_status();
}
inline void TaskInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void TaskInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:rewardForTask.TaskInfo.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rewardForTask

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rewardForTask_2eproto
