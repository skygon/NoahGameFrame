// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceBackpack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceBackpack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceBackpack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceBackpack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceBackpack_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceBackpack_2eproto;
namespace spaceBackpack {
class BSpaceBackpack;
class BSpaceBackpackDefaultTypeInternal;
extern BSpaceBackpackDefaultTypeInternal _BSpaceBackpack_default_instance_;
class CMyDefaultSpace;
class CMyDefaultSpaceDefaultTypeInternal;
extern CMyDefaultSpaceDefaultTypeInternal _CMyDefaultSpace_default_instance_;
class CSpaceIntroduce;
class CSpaceIntroduceDefaultTypeInternal;
extern CSpaceIntroduceDefaultTypeInternal _CSpaceIntroduce_default_instance_;
class CspaceBackpackList;
class CspaceBackpackListDefaultTypeInternal;
extern CspaceBackpackListDefaultTypeInternal _CspaceBackpackList_default_instance_;
class SMyDefaultSpace;
class SMyDefaultSpaceDefaultTypeInternal;
extern SMyDefaultSpaceDefaultTypeInternal _SMyDefaultSpace_default_instance_;
class SSpaceIntroduce;
class SSpaceIntroduceDefaultTypeInternal;
extern SSpaceIntroduceDefaultTypeInternal _SSpaceIntroduce_default_instance_;
class Space;
class SpaceDefaultTypeInternal;
extern SpaceDefaultTypeInternal _Space_default_instance_;
class SspaceBackpackList;
class SspaceBackpackListDefaultTypeInternal;
extern SspaceBackpackListDefaultTypeInternal _SspaceBackpackList_default_instance_;
}  // namespace spaceBackpack
PROTOBUF_NAMESPACE_OPEN
template<> ::spaceBackpack::BSpaceBackpack* Arena::CreateMaybeMessage<::spaceBackpack::BSpaceBackpack>(Arena*);
template<> ::spaceBackpack::CMyDefaultSpace* Arena::CreateMaybeMessage<::spaceBackpack::CMyDefaultSpace>(Arena*);
template<> ::spaceBackpack::CSpaceIntroduce* Arena::CreateMaybeMessage<::spaceBackpack::CSpaceIntroduce>(Arena*);
template<> ::spaceBackpack::CspaceBackpackList* Arena::CreateMaybeMessage<::spaceBackpack::CspaceBackpackList>(Arena*);
template<> ::spaceBackpack::SMyDefaultSpace* Arena::CreateMaybeMessage<::spaceBackpack::SMyDefaultSpace>(Arena*);
template<> ::spaceBackpack::SSpaceIntroduce* Arena::CreateMaybeMessage<::spaceBackpack::SSpaceIntroduce>(Arena*);
template<> ::spaceBackpack::Space* Arena::CreateMaybeMessage<::spaceBackpack::Space>(Arena*);
template<> ::spaceBackpack::SspaceBackpackList* Arena::CreateMaybeMessage<::spaceBackpack::SspaceBackpackList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spaceBackpack {

// ===================================================================

class CspaceBackpackList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceBackpack.CspaceBackpackList) */ {
 public:
  CspaceBackpackList();
  virtual ~CspaceBackpackList();

  CspaceBackpackList(const CspaceBackpackList& from);
  CspaceBackpackList(CspaceBackpackList&& from) noexcept
    : CspaceBackpackList() {
    *this = ::std::move(from);
  }

  inline CspaceBackpackList& operator=(const CspaceBackpackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CspaceBackpackList& operator=(CspaceBackpackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CspaceBackpackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CspaceBackpackList* internal_default_instance() {
    return reinterpret_cast<const CspaceBackpackList*>(
               &_CspaceBackpackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CspaceBackpackList& a, CspaceBackpackList& b) {
    a.Swap(&b);
  }
  inline void Swap(CspaceBackpackList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CspaceBackpackList* New() const final {
    return CreateMaybeMessage<CspaceBackpackList>(nullptr);
  }

  CspaceBackpackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CspaceBackpackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CspaceBackpackList& from);
  void MergeFrom(const CspaceBackpackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CspaceBackpackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceBackpack.CspaceBackpackList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceBackpack_2eproto);
    return ::descriptor_table_spaceBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceBackpack.CspaceBackpackList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceBackpack_2eproto;
};
// -------------------------------------------------------------------

class BSpaceBackpack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceBackpack.BSpaceBackpack) */ {
 public:
  BSpaceBackpack();
  virtual ~BSpaceBackpack();

  BSpaceBackpack(const BSpaceBackpack& from);
  BSpaceBackpack(BSpaceBackpack&& from) noexcept
    : BSpaceBackpack() {
    *this = ::std::move(from);
  }

  inline BSpaceBackpack& operator=(const BSpaceBackpack& from) {
    CopyFrom(from);
    return *this;
  }
  inline BSpaceBackpack& operator=(BSpaceBackpack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BSpaceBackpack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BSpaceBackpack* internal_default_instance() {
    return reinterpret_cast<const BSpaceBackpack*>(
               &_BSpaceBackpack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BSpaceBackpack& a, BSpaceBackpack& b) {
    a.Swap(&b);
  }
  inline void Swap(BSpaceBackpack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BSpaceBackpack* New() const final {
    return CreateMaybeMessage<BSpaceBackpack>(nullptr);
  }

  BSpaceBackpack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BSpaceBackpack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BSpaceBackpack& from);
  void MergeFrom(const BSpaceBackpack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BSpaceBackpack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceBackpack.BSpaceBackpack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceBackpack_2eproto);
    return ::descriptor_table_spaceBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceFieldNumber = 3,
    kSpaceBaIdFieldNumber = 1,
    kUidFieldNumber = 2,
    kDefaultFieldNumber = 4,
  };
  // .spaceBackpack.Space space = 3;
  bool has_space() const;
  private:
  bool _internal_has_space() const;
  public:
  void clear_space();
  const ::spaceBackpack::Space& space() const;
  ::spaceBackpack::Space* release_space();
  ::spaceBackpack::Space* mutable_space();
  void set_allocated_space(::spaceBackpack::Space* space);
  private:
  const ::spaceBackpack::Space& _internal_space() const;
  ::spaceBackpack::Space* _internal_mutable_space();
  public:

  // int32 spaceBaId = 1;
  void clear_spacebaid();
  ::PROTOBUF_NAMESPACE_ID::int32 spacebaid() const;
  void set_spacebaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacebaid() const;
  void _internal_set_spacebaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 default = 4;
  void clear_default_();
  ::PROTOBUF_NAMESPACE_ID::int32 default_() const;
  void set_default_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_default_() const;
  void _internal_set_default_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceBackpack.BSpaceBackpack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::spaceBackpack::Space* space_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacebaid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 default__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceBackpack_2eproto;
};
// -------------------------------------------------------------------

class Space :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceBackpack.Space) */ {
 public:
  Space();
  virtual ~Space();

  Space(const Space& from);
  Space(Space&& from) noexcept
    : Space() {
    *this = ::std::move(from);
  }

  inline Space& operator=(const Space& from) {
    CopyFrom(from);
    return *this;
  }
  inline Space& operator=(Space&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Space& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Space* internal_default_instance() {
    return reinterpret_cast<const Space*>(
               &_Space_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Space& a, Space& b) {
    a.Swap(&b);
  }
  inline void Swap(Space* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Space* New() const final {
    return CreateMaybeMessage<Space>(nullptr);
  }

  Space* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Space>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Space& from);
  void MergeFrom(const Space& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Space* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceBackpack.Space";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceBackpack_2eproto);
    return ::descriptor_table_spaceBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCoverFieldNumber = 3,
    kResourceFieldNumber = 7,
    kSpaceCoverFieldNumber = 8,
    kAndroidUrlFieldNumber = 9,
    kIosUrlFieldNumber = 10,
    kWindowsUrlFieldNumber = 11,
    kRemarkFieldNumber = 14,
    kConfigUrlFieldNumber = 19,
    kServerLuaUrlFieldNumber = 20,
    kClientLuaUrlFieldNumber = 21,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 4,
    kCreateUidFieldNumber = 5,
    kCheckStatusFieldNumber = 6,
    kOnlineTimeFieldNumber = 12,
    kDelStatusFieldNumber = 13,
    kHouseTypeFieldNumber = 15,
    kSerialNumberFieldNumber = 16,
    kSpaceVisitCountFieldNumber = 17,
    kSpaceTodayVisitCountFieldNumber = 18,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cover = 3;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string resource = 7;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string spaceCover = 8;
  void clear_spacecover();
  const std::string& spacecover() const;
  void set_spacecover(const std::string& value);
  void set_spacecover(std::string&& value);
  void set_spacecover(const char* value);
  void set_spacecover(const char* value, size_t size);
  std::string* mutable_spacecover();
  std::string* release_spacecover();
  void set_allocated_spacecover(std::string* spacecover);
  private:
  const std::string& _internal_spacecover() const;
  void _internal_set_spacecover(const std::string& value);
  std::string* _internal_mutable_spacecover();
  public:

  // string androidUrl = 9;
  void clear_androidurl();
  const std::string& androidurl() const;
  void set_androidurl(const std::string& value);
  void set_androidurl(std::string&& value);
  void set_androidurl(const char* value);
  void set_androidurl(const char* value, size_t size);
  std::string* mutable_androidurl();
  std::string* release_androidurl();
  void set_allocated_androidurl(std::string* androidurl);
  private:
  const std::string& _internal_androidurl() const;
  void _internal_set_androidurl(const std::string& value);
  std::string* _internal_mutable_androidurl();
  public:

  // string iosUrl = 10;
  void clear_iosurl();
  const std::string& iosurl() const;
  void set_iosurl(const std::string& value);
  void set_iosurl(std::string&& value);
  void set_iosurl(const char* value);
  void set_iosurl(const char* value, size_t size);
  std::string* mutable_iosurl();
  std::string* release_iosurl();
  void set_allocated_iosurl(std::string* iosurl);
  private:
  const std::string& _internal_iosurl() const;
  void _internal_set_iosurl(const std::string& value);
  std::string* _internal_mutable_iosurl();
  public:

  // string windowsUrl = 11;
  void clear_windowsurl();
  const std::string& windowsurl() const;
  void set_windowsurl(const std::string& value);
  void set_windowsurl(std::string&& value);
  void set_windowsurl(const char* value);
  void set_windowsurl(const char* value, size_t size);
  std::string* mutable_windowsurl();
  std::string* release_windowsurl();
  void set_allocated_windowsurl(std::string* windowsurl);
  private:
  const std::string& _internal_windowsurl() const;
  void _internal_set_windowsurl(const std::string& value);
  std::string* _internal_mutable_windowsurl();
  public:

  // string remark = 14;
  void clear_remark();
  const std::string& remark() const;
  void set_remark(const std::string& value);
  void set_remark(std::string&& value);
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  std::string* mutable_remark();
  std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // string configUrl = 19;
  void clear_configurl();
  const std::string& configurl() const;
  void set_configurl(const std::string& value);
  void set_configurl(std::string&& value);
  void set_configurl(const char* value);
  void set_configurl(const char* value, size_t size);
  std::string* mutable_configurl();
  std::string* release_configurl();
  void set_allocated_configurl(std::string* configurl);
  private:
  const std::string& _internal_configurl() const;
  void _internal_set_configurl(const std::string& value);
  std::string* _internal_mutable_configurl();
  public:

  // string ServerLuaUrl = 20;
  void clear_serverluaurl();
  const std::string& serverluaurl() const;
  void set_serverluaurl(const std::string& value);
  void set_serverluaurl(std::string&& value);
  void set_serverluaurl(const char* value);
  void set_serverluaurl(const char* value, size_t size);
  std::string* mutable_serverluaurl();
  std::string* release_serverluaurl();
  void set_allocated_serverluaurl(std::string* serverluaurl);
  private:
  const std::string& _internal_serverluaurl() const;
  void _internal_set_serverluaurl(const std::string& value);
  std::string* _internal_mutable_serverluaurl();
  public:

  // string ClientLuaUrl = 21;
  void clear_clientluaurl();
  const std::string& clientluaurl() const;
  void set_clientluaurl(const std::string& value);
  void set_clientluaurl(std::string&& value);
  void set_clientluaurl(const char* value);
  void set_clientluaurl(const char* value, size_t size);
  std::string* mutable_clientluaurl();
  std::string* release_clientluaurl();
  void set_allocated_clientluaurl(std::string* clientluaurl);
  private:
  const std::string& _internal_clientluaurl() const;
  void _internal_set_clientluaurl(const std::string& value);
  std::string* _internal_mutable_clientluaurl();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 createUid = 5;
  void clear_createuid();
  ::PROTOBUF_NAMESPACE_ID::int32 createuid() const;
  void set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_createuid() const;
  void _internal_set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 checkStatus = 6;
  void clear_checkstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 checkstatus() const;
  void set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checkstatus() const;
  void _internal_set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 onlineTime = 12;
  void clear_onlinetime();
  ::PROTOBUF_NAMESPACE_ID::int32 onlinetime() const;
  void set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onlinetime() const;
  void _internal_set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 delStatus = 13;
  void clear_delstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 delstatus() const;
  void set_delstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delstatus() const;
  void _internal_set_delstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 15;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SerialNumber = 16;
  void clear_serialnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 serialnumber() const;
  void set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serialnumber() const;
  void _internal_set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceVisitCount = 17;
  void clear_spacevisitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 spacevisitcount() const;
  void set_spacevisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacevisitcount() const;
  void _internal_set_spacevisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceTodayVisitCount = 18;
  void clear_spacetodayvisitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 spacetodayvisitcount() const;
  void set_spacetodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacetodayvisitcount() const;
  void _internal_set_spacetodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceBackpack.Space)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr androidurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iosurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr windowsurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverluaurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientluaurl_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 createuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 onlinetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 delstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 serialnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacevisitcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacetodayvisitcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceBackpack_2eproto;
};
// -------------------------------------------------------------------

class SspaceBackpackList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceBackpack.SspaceBackpackList) */ {
 public:
  SspaceBackpackList();
  virtual ~SspaceBackpackList();

  SspaceBackpackList(const SspaceBackpackList& from);
  SspaceBackpackList(SspaceBackpackList&& from) noexcept
    : SspaceBackpackList() {
    *this = ::std::move(from);
  }

  inline SspaceBackpackList& operator=(const SspaceBackpackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SspaceBackpackList& operator=(SspaceBackpackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SspaceBackpackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SspaceBackpackList* internal_default_instance() {
    return reinterpret_cast<const SspaceBackpackList*>(
               &_SspaceBackpackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SspaceBackpackList& a, SspaceBackpackList& b) {
    a.Swap(&b);
  }
  inline void Swap(SspaceBackpackList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SspaceBackpackList* New() const final {
    return CreateMaybeMessage<SspaceBackpackList>(nullptr);
  }

  SspaceBackpackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SspaceBackpackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SspaceBackpackList& from);
  void MergeFrom(const SspaceBackpackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SspaceBackpackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceBackpack.SspaceBackpackList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceBackpack_2eproto);
    return ::descriptor_table_spaceBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceBackpackListFieldNumber = 1,
  };
  // repeated .spaceBackpack.BSpaceBackpack spaceBackpackList = 1;
  int spacebackpacklist_size() const;
  private:
  int _internal_spacebackpacklist_size() const;
  public:
  void clear_spacebackpacklist();
  ::spaceBackpack::BSpaceBackpack* mutable_spacebackpacklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceBackpack::BSpaceBackpack >*
      mutable_spacebackpacklist();
  private:
  const ::spaceBackpack::BSpaceBackpack& _internal_spacebackpacklist(int index) const;
  ::spaceBackpack::BSpaceBackpack* _internal_add_spacebackpacklist();
  public:
  const ::spaceBackpack::BSpaceBackpack& spacebackpacklist(int index) const;
  ::spaceBackpack::BSpaceBackpack* add_spacebackpacklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceBackpack::BSpaceBackpack >&
      spacebackpacklist() const;

  // @@protoc_insertion_point(class_scope:spaceBackpack.SspaceBackpackList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceBackpack::BSpaceBackpack > spacebackpacklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceBackpack_2eproto;
};
// -------------------------------------------------------------------

class CMyDefaultSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceBackpack.CMyDefaultSpace) */ {
 public:
  CMyDefaultSpace();
  virtual ~CMyDefaultSpace();

  CMyDefaultSpace(const CMyDefaultSpace& from);
  CMyDefaultSpace(CMyDefaultSpace&& from) noexcept
    : CMyDefaultSpace() {
    *this = ::std::move(from);
  }

  inline CMyDefaultSpace& operator=(const CMyDefaultSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMyDefaultSpace& operator=(CMyDefaultSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMyDefaultSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMyDefaultSpace* internal_default_instance() {
    return reinterpret_cast<const CMyDefaultSpace*>(
               &_CMyDefaultSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMyDefaultSpace& a, CMyDefaultSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(CMyDefaultSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMyDefaultSpace* New() const final {
    return CreateMaybeMessage<CMyDefaultSpace>(nullptr);
  }

  CMyDefaultSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMyDefaultSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMyDefaultSpace& from);
  void MergeFrom(const CMyDefaultSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMyDefaultSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceBackpack.CMyDefaultSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceBackpack_2eproto);
    return ::descriptor_table_spaceBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceBackpack.CMyDefaultSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceBackpack_2eproto;
};
// -------------------------------------------------------------------

class SMyDefaultSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceBackpack.SMyDefaultSpace) */ {
 public:
  SMyDefaultSpace();
  virtual ~SMyDefaultSpace();

  SMyDefaultSpace(const SMyDefaultSpace& from);
  SMyDefaultSpace(SMyDefaultSpace&& from) noexcept
    : SMyDefaultSpace() {
    *this = ::std::move(from);
  }

  inline SMyDefaultSpace& operator=(const SMyDefaultSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMyDefaultSpace& operator=(SMyDefaultSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMyDefaultSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMyDefaultSpace* internal_default_instance() {
    return reinterpret_cast<const SMyDefaultSpace*>(
               &_SMyDefaultSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SMyDefaultSpace& a, SMyDefaultSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(SMyDefaultSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMyDefaultSpace* New() const final {
    return CreateMaybeMessage<SMyDefaultSpace>(nullptr);
  }

  SMyDefaultSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMyDefaultSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMyDefaultSpace& from);
  void MergeFrom(const SMyDefaultSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMyDefaultSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceBackpack.SMyDefaultSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceBackpack_2eproto);
    return ::descriptor_table_spaceBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceNameFieldNumber = 2,
    kSpaceCoverFieldNumber = 3,
    kSpaceCopyNameFieldNumber = 8,
    kSpaceCopyCoverFieldNumber = 9,
    kSpaceBackpackIdFieldNumber = 1,
    kSpaceHouseTypeFieldNumber = 4,
    kSpaceVisitCountFieldNumber = 5,
    kSpaceTodayVisitCountFieldNumber = 6,
    kSpaceCopyBackpackIdFieldNumber = 7,
    kSpaceCopyHouseTypeFieldNumber = 10,
    kSpaceCopyVisitCountFieldNumber = 11,
    kSpaceCopyTodayVisitCountFieldNumber = 12,
  };
  // string spaceName = 2;
  void clear_spacename();
  const std::string& spacename() const;
  void set_spacename(const std::string& value);
  void set_spacename(std::string&& value);
  void set_spacename(const char* value);
  void set_spacename(const char* value, size_t size);
  std::string* mutable_spacename();
  std::string* release_spacename();
  void set_allocated_spacename(std::string* spacename);
  private:
  const std::string& _internal_spacename() const;
  void _internal_set_spacename(const std::string& value);
  std::string* _internal_mutable_spacename();
  public:

  // string spaceCover = 3;
  void clear_spacecover();
  const std::string& spacecover() const;
  void set_spacecover(const std::string& value);
  void set_spacecover(std::string&& value);
  void set_spacecover(const char* value);
  void set_spacecover(const char* value, size_t size);
  std::string* mutable_spacecover();
  std::string* release_spacecover();
  void set_allocated_spacecover(std::string* spacecover);
  private:
  const std::string& _internal_spacecover() const;
  void _internal_set_spacecover(const std::string& value);
  std::string* _internal_mutable_spacecover();
  public:

  // string spaceCopyName = 8;
  void clear_spacecopyname();
  const std::string& spacecopyname() const;
  void set_spacecopyname(const std::string& value);
  void set_spacecopyname(std::string&& value);
  void set_spacecopyname(const char* value);
  void set_spacecopyname(const char* value, size_t size);
  std::string* mutable_spacecopyname();
  std::string* release_spacecopyname();
  void set_allocated_spacecopyname(std::string* spacecopyname);
  private:
  const std::string& _internal_spacecopyname() const;
  void _internal_set_spacecopyname(const std::string& value);
  std::string* _internal_mutable_spacecopyname();
  public:

  // string spaceCopyCover = 9;
  void clear_spacecopycover();
  const std::string& spacecopycover() const;
  void set_spacecopycover(const std::string& value);
  void set_spacecopycover(std::string&& value);
  void set_spacecopycover(const char* value);
  void set_spacecopycover(const char* value, size_t size);
  std::string* mutable_spacecopycover();
  std::string* release_spacecopycover();
  void set_allocated_spacecopycover(std::string* spacecopycover);
  private:
  const std::string& _internal_spacecopycover() const;
  void _internal_set_spacecopycover(const std::string& value);
  std::string* _internal_mutable_spacecopycover();
  public:

  // int32 spaceBackpackId = 1;
  void clear_spacebackpackid();
  ::PROTOBUF_NAMESPACE_ID::int32 spacebackpackid() const;
  void set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacebackpackid() const;
  void _internal_set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceHouseType = 4;
  void clear_spacehousetype();
  ::PROTOBUF_NAMESPACE_ID::int32 spacehousetype() const;
  void set_spacehousetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacehousetype() const;
  void _internal_set_spacehousetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceVisitCount = 5;
  void clear_spacevisitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 spacevisitcount() const;
  void set_spacevisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacevisitcount() const;
  void _internal_set_spacevisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceTodayVisitCount = 6;
  void clear_spacetodayvisitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 spacetodayvisitcount() const;
  void set_spacetodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacetodayvisitcount() const;
  void _internal_set_spacetodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceCopyBackpackId = 7;
  void clear_spacecopybackpackid();
  ::PROTOBUF_NAMESPACE_ID::int32 spacecopybackpackid() const;
  void set_spacecopybackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacecopybackpackid() const;
  void _internal_set_spacecopybackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceCopyHouseType = 10;
  void clear_spacecopyhousetype();
  ::PROTOBUF_NAMESPACE_ID::int32 spacecopyhousetype() const;
  void set_spacecopyhousetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacecopyhousetype() const;
  void _internal_set_spacecopyhousetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceCopyVisitCount = 11;
  void clear_spacecopyvisitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 spacecopyvisitcount() const;
  void set_spacecopyvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacecopyvisitcount() const;
  void _internal_set_spacecopyvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceCopyTodayVisitCount = 12;
  void clear_spacecopytodayvisitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 spacecopytodayvisitcount() const;
  void set_spacecopytodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacecopytodayvisitcount() const;
  void _internal_set_spacecopytodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceBackpack.SMyDefaultSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecopyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecopycover_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacebackpackid_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacehousetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacevisitcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacetodayvisitcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacecopybackpackid_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacecopyhousetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacecopyvisitcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacecopytodayvisitcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceBackpack_2eproto;
};
// -------------------------------------------------------------------

class CSpaceIntroduce :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceBackpack.CSpaceIntroduce) */ {
 public:
  CSpaceIntroduce();
  virtual ~CSpaceIntroduce();

  CSpaceIntroduce(const CSpaceIntroduce& from);
  CSpaceIntroduce(CSpaceIntroduce&& from) noexcept
    : CSpaceIntroduce() {
    *this = ::std::move(from);
  }

  inline CSpaceIntroduce& operator=(const CSpaceIntroduce& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceIntroduce& operator=(CSpaceIntroduce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceIntroduce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceIntroduce* internal_default_instance() {
    return reinterpret_cast<const CSpaceIntroduce*>(
               &_CSpaceIntroduce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CSpaceIntroduce& a, CSpaceIntroduce& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceIntroduce* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceIntroduce* New() const final {
    return CreateMaybeMessage<CSpaceIntroduce>(nullptr);
  }

  CSpaceIntroduce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceIntroduce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceIntroduce& from);
  void MergeFrom(const CSpaceIntroduce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceIntroduce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceBackpack.CSpaceIntroduce";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceBackpack_2eproto);
    return ::descriptor_table_spaceBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kHouseTypeFieldNumber = 2,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 2;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceBackpack.CSpaceIntroduce)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceBackpack_2eproto;
};
// -------------------------------------------------------------------

class SSpaceIntroduce :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceBackpack.SSpaceIntroduce) */ {
 public:
  SSpaceIntroduce();
  virtual ~SSpaceIntroduce();

  SSpaceIntroduce(const SSpaceIntroduce& from);
  SSpaceIntroduce(SSpaceIntroduce&& from) noexcept
    : SSpaceIntroduce() {
    *this = ::std::move(from);
  }

  inline SSpaceIntroduce& operator=(const SSpaceIntroduce& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceIntroduce& operator=(SSpaceIntroduce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceIntroduce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceIntroduce* internal_default_instance() {
    return reinterpret_cast<const SSpaceIntroduce*>(
               &_SSpaceIntroduce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SSpaceIntroduce& a, SSpaceIntroduce& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceIntroduce* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceIntroduce* New() const final {
    return CreateMaybeMessage<SSpaceIntroduce>(nullptr);
  }

  SSpaceIntroduce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceIntroduce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceIntroduce& from);
  void MergeFrom(const SSpaceIntroduce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceIntroduce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceBackpack.SSpaceIntroduce";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceBackpack_2eproto);
    return ::descriptor_table_spaceBackpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserPicFieldNumber = 1,
    kUserNickFieldNumber = 2,
    kSpaceNameFieldNumber = 3,
    kSpaceDescFieldNumber = 4,
    kSpaceRuleFieldNumber = 5,
    kCreateUserNickFieldNumber = 6,
    kCreatedAtFieldNumber = 11,
    kUpdateAtFieldNumber = 12,
    kIsCollectFieldNumber = 7,
    kIsRecreationFieldNumber = 8,
    kIsCopyFieldNumber = 9,
    kIsOpenFieldNumber = 10,
    kHouseIdFieldNumber = 13,
    kHouseTypeFieldNumber = 14,
  };
  // string userPic = 1;
  void clear_userpic();
  const std::string& userpic() const;
  void set_userpic(const std::string& value);
  void set_userpic(std::string&& value);
  void set_userpic(const char* value);
  void set_userpic(const char* value, size_t size);
  std::string* mutable_userpic();
  std::string* release_userpic();
  void set_allocated_userpic(std::string* userpic);
  private:
  const std::string& _internal_userpic() const;
  void _internal_set_userpic(const std::string& value);
  std::string* _internal_mutable_userpic();
  public:

  // string userNick = 2;
  void clear_usernick();
  const std::string& usernick() const;
  void set_usernick(const std::string& value);
  void set_usernick(std::string&& value);
  void set_usernick(const char* value);
  void set_usernick(const char* value, size_t size);
  std::string* mutable_usernick();
  std::string* release_usernick();
  void set_allocated_usernick(std::string* usernick);
  private:
  const std::string& _internal_usernick() const;
  void _internal_set_usernick(const std::string& value);
  std::string* _internal_mutable_usernick();
  public:

  // string spaceName = 3;
  void clear_spacename();
  const std::string& spacename() const;
  void set_spacename(const std::string& value);
  void set_spacename(std::string&& value);
  void set_spacename(const char* value);
  void set_spacename(const char* value, size_t size);
  std::string* mutable_spacename();
  std::string* release_spacename();
  void set_allocated_spacename(std::string* spacename);
  private:
  const std::string& _internal_spacename() const;
  void _internal_set_spacename(const std::string& value);
  std::string* _internal_mutable_spacename();
  public:

  // string spaceDesc = 4;
  void clear_spacedesc();
  const std::string& spacedesc() const;
  void set_spacedesc(const std::string& value);
  void set_spacedesc(std::string&& value);
  void set_spacedesc(const char* value);
  void set_spacedesc(const char* value, size_t size);
  std::string* mutable_spacedesc();
  std::string* release_spacedesc();
  void set_allocated_spacedesc(std::string* spacedesc);
  private:
  const std::string& _internal_spacedesc() const;
  void _internal_set_spacedesc(const std::string& value);
  std::string* _internal_mutable_spacedesc();
  public:

  // string spaceRule = 5;
  void clear_spacerule();
  const std::string& spacerule() const;
  void set_spacerule(const std::string& value);
  void set_spacerule(std::string&& value);
  void set_spacerule(const char* value);
  void set_spacerule(const char* value, size_t size);
  std::string* mutable_spacerule();
  std::string* release_spacerule();
  void set_allocated_spacerule(std::string* spacerule);
  private:
  const std::string& _internal_spacerule() const;
  void _internal_set_spacerule(const std::string& value);
  std::string* _internal_mutable_spacerule();
  public:

  // string createUserNick = 6;
  void clear_createusernick();
  const std::string& createusernick() const;
  void set_createusernick(const std::string& value);
  void set_createusernick(std::string&& value);
  void set_createusernick(const char* value);
  void set_createusernick(const char* value, size_t size);
  std::string* mutable_createusernick();
  std::string* release_createusernick();
  void set_allocated_createusernick(std::string* createusernick);
  private:
  const std::string& _internal_createusernick() const;
  void _internal_set_createusernick(const std::string& value);
  std::string* _internal_mutable_createusernick();
  public:

  // string createdAt = 11;
  void clear_createdat();
  const std::string& createdat() const;
  void set_createdat(const std::string& value);
  void set_createdat(std::string&& value);
  void set_createdat(const char* value);
  void set_createdat(const char* value, size_t size);
  std::string* mutable_createdat();
  std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // string updateAt = 12;
  void clear_updateat();
  const std::string& updateat() const;
  void set_updateat(const std::string& value);
  void set_updateat(std::string&& value);
  void set_updateat(const char* value);
  void set_updateat(const char* value, size_t size);
  std::string* mutable_updateat();
  std::string* release_updateat();
  void set_allocated_updateat(std::string* updateat);
  private:
  const std::string& _internal_updateat() const;
  void _internal_set_updateat(const std::string& value);
  std::string* _internal_mutable_updateat();
  public:

  // int32 isCollect = 7;
  void clear_iscollect();
  ::PROTOBUF_NAMESPACE_ID::int32 iscollect() const;
  void set_iscollect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iscollect() const;
  void _internal_set_iscollect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isRecreation = 8;
  void clear_isrecreation();
  ::PROTOBUF_NAMESPACE_ID::int32 isrecreation() const;
  void set_isrecreation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isrecreation() const;
  void _internal_set_isrecreation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isCopy = 9;
  void clear_iscopy();
  ::PROTOBUF_NAMESPACE_ID::int32 iscopy() const;
  void set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iscopy() const;
  void _internal_set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isOpen = 10;
  void clear_isopen();
  ::PROTOBUF_NAMESPACE_ID::int32 isopen() const;
  void set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isopen() const;
  void _internal_set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseId = 13;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 14;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceBackpack.SSpaceIntroduce)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usernick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacedesc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacerule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createusernick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updateat_;
  ::PROTOBUF_NAMESPACE_ID::int32 iscollect_;
  ::PROTOBUF_NAMESPACE_ID::int32 isrecreation_;
  ::PROTOBUF_NAMESPACE_ID::int32 iscopy_;
  ::PROTOBUF_NAMESPACE_ID::int32 isopen_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceBackpack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CspaceBackpackList

// int32 uid = 1;
inline void CspaceBackpackList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CspaceBackpackList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CspaceBackpackList::uid() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.CspaceBackpackList.uid)
  return _internal_uid();
}
inline void CspaceBackpackList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CspaceBackpackList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.CspaceBackpackList.uid)
}

// -------------------------------------------------------------------

// BSpaceBackpack

// int32 spaceBaId = 1;
inline void BSpaceBackpack::clear_spacebaid() {
  spacebaid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceBackpack::_internal_spacebaid() const {
  return spacebaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceBackpack::spacebaid() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.BSpaceBackpack.spaceBaId)
  return _internal_spacebaid();
}
inline void BSpaceBackpack::_internal_set_spacebaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacebaid_ = value;
}
inline void BSpaceBackpack::set_spacebaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacebaid(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.BSpaceBackpack.spaceBaId)
}

// int32 uid = 2;
inline void BSpaceBackpack::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceBackpack::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceBackpack::uid() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.BSpaceBackpack.uid)
  return _internal_uid();
}
inline void BSpaceBackpack::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BSpaceBackpack::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.BSpaceBackpack.uid)
}

// .spaceBackpack.Space space = 3;
inline bool BSpaceBackpack::_internal_has_space() const {
  return this != internal_default_instance() && space_ != nullptr;
}
inline bool BSpaceBackpack::has_space() const {
  return _internal_has_space();
}
inline void BSpaceBackpack::clear_space() {
  if (GetArenaNoVirtual() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
}
inline const ::spaceBackpack::Space& BSpaceBackpack::_internal_space() const {
  const ::spaceBackpack::Space* p = space_;
  return p != nullptr ? *p : *reinterpret_cast<const ::spaceBackpack::Space*>(
      &::spaceBackpack::_Space_default_instance_);
}
inline const ::spaceBackpack::Space& BSpaceBackpack::space() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.BSpaceBackpack.space)
  return _internal_space();
}
inline ::spaceBackpack::Space* BSpaceBackpack::release_space() {
  // @@protoc_insertion_point(field_release:spaceBackpack.BSpaceBackpack.space)
  
  ::spaceBackpack::Space* temp = space_;
  space_ = nullptr;
  return temp;
}
inline ::spaceBackpack::Space* BSpaceBackpack::_internal_mutable_space() {
  
  if (space_ == nullptr) {
    auto* p = CreateMaybeMessage<::spaceBackpack::Space>(GetArenaNoVirtual());
    space_ = p;
  }
  return space_;
}
inline ::spaceBackpack::Space* BSpaceBackpack::mutable_space() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.BSpaceBackpack.space)
  return _internal_mutable_space();
}
inline void BSpaceBackpack::set_allocated_space(::spaceBackpack::Space* space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete space_;
  }
  if (space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, space, submessage_arena);
    }
    
  } else {
    
  }
  space_ = space;
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.BSpaceBackpack.space)
}

// int32 default = 4;
inline void BSpaceBackpack::clear_default_() {
  default__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceBackpack::_internal_default_() const {
  return default__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSpaceBackpack::default_() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.BSpaceBackpack.default)
  return _internal_default_();
}
inline void BSpaceBackpack::_internal_set_default_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  default__ = value;
}
inline void BSpaceBackpack::set_default_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.BSpaceBackpack.default)
}

// -------------------------------------------------------------------

// Space

// int32 id = 1;
inline void Space::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::id() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.id)
  return _internal_id();
}
inline void Space::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Space::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.id)
}

// string name = 2;
inline void Space::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::name() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.name)
  return _internal_name();
}
inline void Space::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.name)
}
inline std::string* Space::mutable_name() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.name)
  return _internal_mutable_name();
}
inline const std::string& Space::_internal_name() const {
  return name_.GetNoArena();
}
inline void Space::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.name)
}
inline void Space::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.name)
}
inline void Space::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.name)
}
inline std::string* Space::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_name() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.name)
}

// string cover = 3;
inline void Space::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::cover() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.cover)
  return _internal_cover();
}
inline void Space::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.cover)
}
inline std::string* Space::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.cover)
  return _internal_mutable_cover();
}
inline const std::string& Space::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void Space::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.cover)
}
inline void Space::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.cover)
}
inline void Space::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.cover)
}
inline std::string* Space::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_cover() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.cover)
}

// int32 type = 4;
inline void Space::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::type() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.type)
  return _internal_type();
}
inline void Space::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Space::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.type)
}

// int32 createUid = 5;
inline void Space::clear_createuid() {
  createuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_createuid() const {
  return createuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::createuid() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.createUid)
  return _internal_createuid();
}
inline void Space::_internal_set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  createuid_ = value;
}
inline void Space::set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_createuid(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.createUid)
}

// int32 checkStatus = 6;
inline void Space::clear_checkstatus() {
  checkstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_checkstatus() const {
  return checkstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::checkstatus() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.checkStatus)
  return _internal_checkstatus();
}
inline void Space::_internal_set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  checkstatus_ = value;
}
inline void Space::set_checkstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checkstatus(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.checkStatus)
}

// string resource = 7;
inline void Space::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::resource() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.resource)
  return _internal_resource();
}
inline void Space::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.resource)
}
inline std::string* Space::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.resource)
  return _internal_mutable_resource();
}
inline const std::string& Space::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void Space::_internal_set_resource(const std::string& value) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_resource(std::string&& value) {
  
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.resource)
}
inline void Space::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.resource)
}
inline void Space::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.resource)
}
inline std::string* Space::_internal_mutable_resource() {
  
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_resource() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.resource)
  
  return resource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.resource)
}

// string spaceCover = 8;
inline void Space::clear_spacecover() {
  spacecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::spacecover() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.spaceCover)
  return _internal_spacecover();
}
inline void Space::set_spacecover(const std::string& value) {
  _internal_set_spacecover(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.spaceCover)
}
inline std::string* Space::mutable_spacecover() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.spaceCover)
  return _internal_mutable_spacecover();
}
inline const std::string& Space::_internal_spacecover() const {
  return spacecover_.GetNoArena();
}
inline void Space::_internal_set_spacecover(const std::string& value) {
  
  spacecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_spacecover(std::string&& value) {
  
  spacecover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.spaceCover)
}
inline void Space::set_spacecover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.spaceCover)
}
inline void Space::set_spacecover(const char* value, size_t size) {
  
  spacecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.spaceCover)
}
inline std::string* Space::_internal_mutable_spacecover() {
  
  return spacecover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_spacecover() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.spaceCover)
  
  return spacecover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_spacecover(std::string* spacecover) {
  if (spacecover != nullptr) {
    
  } else {
    
  }
  spacecover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecover);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.spaceCover)
}

// string androidUrl = 9;
inline void Space::clear_androidurl() {
  androidurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::androidurl() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.androidUrl)
  return _internal_androidurl();
}
inline void Space::set_androidurl(const std::string& value) {
  _internal_set_androidurl(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.androidUrl)
}
inline std::string* Space::mutable_androidurl() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.androidUrl)
  return _internal_mutable_androidurl();
}
inline const std::string& Space::_internal_androidurl() const {
  return androidurl_.GetNoArena();
}
inline void Space::_internal_set_androidurl(const std::string& value) {
  
  androidurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_androidurl(std::string&& value) {
  
  androidurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.androidUrl)
}
inline void Space::set_androidurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  androidurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.androidUrl)
}
inline void Space::set_androidurl(const char* value, size_t size) {
  
  androidurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.androidUrl)
}
inline std::string* Space::_internal_mutable_androidurl() {
  
  return androidurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_androidurl() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.androidUrl)
  
  return androidurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_androidurl(std::string* androidurl) {
  if (androidurl != nullptr) {
    
  } else {
    
  }
  androidurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), androidurl);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.androidUrl)
}

// string iosUrl = 10;
inline void Space::clear_iosurl() {
  iosurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::iosurl() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.iosUrl)
  return _internal_iosurl();
}
inline void Space::set_iosurl(const std::string& value) {
  _internal_set_iosurl(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.iosUrl)
}
inline std::string* Space::mutable_iosurl() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.iosUrl)
  return _internal_mutable_iosurl();
}
inline const std::string& Space::_internal_iosurl() const {
  return iosurl_.GetNoArena();
}
inline void Space::_internal_set_iosurl(const std::string& value) {
  
  iosurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_iosurl(std::string&& value) {
  
  iosurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.iosUrl)
}
inline void Space::set_iosurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iosurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.iosUrl)
}
inline void Space::set_iosurl(const char* value, size_t size) {
  
  iosurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.iosUrl)
}
inline std::string* Space::_internal_mutable_iosurl() {
  
  return iosurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_iosurl() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.iosUrl)
  
  return iosurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_iosurl(std::string* iosurl) {
  if (iosurl != nullptr) {
    
  } else {
    
  }
  iosurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iosurl);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.iosUrl)
}

// string windowsUrl = 11;
inline void Space::clear_windowsurl() {
  windowsurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::windowsurl() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.windowsUrl)
  return _internal_windowsurl();
}
inline void Space::set_windowsurl(const std::string& value) {
  _internal_set_windowsurl(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.windowsUrl)
}
inline std::string* Space::mutable_windowsurl() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.windowsUrl)
  return _internal_mutable_windowsurl();
}
inline const std::string& Space::_internal_windowsurl() const {
  return windowsurl_.GetNoArena();
}
inline void Space::_internal_set_windowsurl(const std::string& value) {
  
  windowsurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_windowsurl(std::string&& value) {
  
  windowsurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.windowsUrl)
}
inline void Space::set_windowsurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  windowsurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.windowsUrl)
}
inline void Space::set_windowsurl(const char* value, size_t size) {
  
  windowsurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.windowsUrl)
}
inline std::string* Space::_internal_mutable_windowsurl() {
  
  return windowsurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_windowsurl() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.windowsUrl)
  
  return windowsurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_windowsurl(std::string* windowsurl) {
  if (windowsurl != nullptr) {
    
  } else {
    
  }
  windowsurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), windowsurl);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.windowsUrl)
}

// int32 onlineTime = 12;
inline void Space::clear_onlinetime() {
  onlinetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_onlinetime() const {
  return onlinetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::onlinetime() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.onlineTime)
  return _internal_onlinetime();
}
inline void Space::_internal_set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onlinetime_ = value;
}
inline void Space::set_onlinetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onlinetime(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.onlineTime)
}

// int32 delStatus = 13;
inline void Space::clear_delstatus() {
  delstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_delstatus() const {
  return delstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::delstatus() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.delStatus)
  return _internal_delstatus();
}
inline void Space::_internal_set_delstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delstatus_ = value;
}
inline void Space::set_delstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delstatus(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.delStatus)
}

// string remark = 14;
inline void Space::clear_remark() {
  remark_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::remark() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.remark)
  return _internal_remark();
}
inline void Space::set_remark(const std::string& value) {
  _internal_set_remark(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.remark)
}
inline std::string* Space::mutable_remark() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.remark)
  return _internal_mutable_remark();
}
inline const std::string& Space::_internal_remark() const {
  return remark_.GetNoArena();
}
inline void Space::_internal_set_remark(const std::string& value) {
  
  remark_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_remark(std::string&& value) {
  
  remark_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.remark)
}
inline void Space::set_remark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remark_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.remark)
}
inline void Space::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.remark)
}
inline std::string* Space::_internal_mutable_remark() {
  
  return remark_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_remark() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.remark)
  
  return remark_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.remark)
}

// int32 houseType = 15;
inline void Space::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::housetype() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.houseType)
  return _internal_housetype();
}
inline void Space::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void Space::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.houseType)
}

// int32 SerialNumber = 16;
inline void Space::clear_serialnumber() {
  serialnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_serialnumber() const {
  return serialnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::serialnumber() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.SerialNumber)
  return _internal_serialnumber();
}
inline void Space::_internal_set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serialnumber_ = value;
}
inline void Space::set_serialnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serialnumber(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.SerialNumber)
}

// int32 spaceVisitCount = 17;
inline void Space::clear_spacevisitcount() {
  spacevisitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_spacevisitcount() const {
  return spacevisitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::spacevisitcount() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.spaceVisitCount)
  return _internal_spacevisitcount();
}
inline void Space::_internal_set_spacevisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacevisitcount_ = value;
}
inline void Space::set_spacevisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacevisitcount(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.spaceVisitCount)
}

// int32 spaceTodayVisitCount = 18;
inline void Space::clear_spacetodayvisitcount() {
  spacetodayvisitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::_internal_spacetodayvisitcount() const {
  return spacetodayvisitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Space::spacetodayvisitcount() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.spaceTodayVisitCount)
  return _internal_spacetodayvisitcount();
}
inline void Space::_internal_set_spacetodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacetodayvisitcount_ = value;
}
inline void Space::set_spacetodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacetodayvisitcount(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.spaceTodayVisitCount)
}

// string configUrl = 19;
inline void Space::clear_configurl() {
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::configurl() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.configUrl)
  return _internal_configurl();
}
inline void Space::set_configurl(const std::string& value) {
  _internal_set_configurl(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.configUrl)
}
inline std::string* Space::mutable_configurl() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.configUrl)
  return _internal_mutable_configurl();
}
inline const std::string& Space::_internal_configurl() const {
  return configurl_.GetNoArena();
}
inline void Space::_internal_set_configurl(const std::string& value) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_configurl(std::string&& value) {
  
  configurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.configUrl)
}
inline void Space::set_configurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.configUrl)
}
inline void Space::set_configurl(const char* value, size_t size) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.configUrl)
}
inline std::string* Space::_internal_mutable_configurl() {
  
  return configurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_configurl() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.configUrl)
  
  return configurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_configurl(std::string* configurl) {
  if (configurl != nullptr) {
    
  } else {
    
  }
  configurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configurl);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.configUrl)
}

// string ServerLuaUrl = 20;
inline void Space::clear_serverluaurl() {
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::serverluaurl() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.ServerLuaUrl)
  return _internal_serverluaurl();
}
inline void Space::set_serverluaurl(const std::string& value) {
  _internal_set_serverluaurl(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.ServerLuaUrl)
}
inline std::string* Space::mutable_serverluaurl() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.ServerLuaUrl)
  return _internal_mutable_serverluaurl();
}
inline const std::string& Space::_internal_serverluaurl() const {
  return serverluaurl_.GetNoArena();
}
inline void Space::_internal_set_serverluaurl(const std::string& value) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_serverluaurl(std::string&& value) {
  
  serverluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.ServerLuaUrl)
}
inline void Space::set_serverluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.ServerLuaUrl)
}
inline void Space::set_serverluaurl(const char* value, size_t size) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.ServerLuaUrl)
}
inline std::string* Space::_internal_mutable_serverluaurl() {
  
  return serverluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_serverluaurl() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.ServerLuaUrl)
  
  return serverluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_serverluaurl(std::string* serverluaurl) {
  if (serverluaurl != nullptr) {
    
  } else {
    
  }
  serverluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverluaurl);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.ServerLuaUrl)
}

// string ClientLuaUrl = 21;
inline void Space::clear_clientluaurl() {
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Space::clientluaurl() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.Space.ClientLuaUrl)
  return _internal_clientluaurl();
}
inline void Space::set_clientluaurl(const std::string& value) {
  _internal_set_clientluaurl(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.Space.ClientLuaUrl)
}
inline std::string* Space::mutable_clientluaurl() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.Space.ClientLuaUrl)
  return _internal_mutable_clientluaurl();
}
inline const std::string& Space::_internal_clientluaurl() const {
  return clientluaurl_.GetNoArena();
}
inline void Space::_internal_set_clientluaurl(const std::string& value) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Space::set_clientluaurl(std::string&& value) {
  
  clientluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.Space.ClientLuaUrl)
}
inline void Space::set_clientluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.Space.ClientLuaUrl)
}
inline void Space::set_clientluaurl(const char* value, size_t size) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.Space.ClientLuaUrl)
}
inline std::string* Space::_internal_mutable_clientluaurl() {
  
  return clientluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Space::release_clientluaurl() {
  // @@protoc_insertion_point(field_release:spaceBackpack.Space.ClientLuaUrl)
  
  return clientluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Space::set_allocated_clientluaurl(std::string* clientluaurl) {
  if (clientluaurl != nullptr) {
    
  } else {
    
  }
  clientluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientluaurl);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.Space.ClientLuaUrl)
}

// -------------------------------------------------------------------

// SspaceBackpackList

// repeated .spaceBackpack.BSpaceBackpack spaceBackpackList = 1;
inline int SspaceBackpackList::_internal_spacebackpacklist_size() const {
  return spacebackpacklist_.size();
}
inline int SspaceBackpackList::spacebackpacklist_size() const {
  return _internal_spacebackpacklist_size();
}
inline void SspaceBackpackList::clear_spacebackpacklist() {
  spacebackpacklist_.Clear();
}
inline ::spaceBackpack::BSpaceBackpack* SspaceBackpackList::mutable_spacebackpacklist(int index) {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SspaceBackpackList.spaceBackpackList)
  return spacebackpacklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceBackpack::BSpaceBackpack >*
SspaceBackpackList::mutable_spacebackpacklist() {
  // @@protoc_insertion_point(field_mutable_list:spaceBackpack.SspaceBackpackList.spaceBackpackList)
  return &spacebackpacklist_;
}
inline const ::spaceBackpack::BSpaceBackpack& SspaceBackpackList::_internal_spacebackpacklist(int index) const {
  return spacebackpacklist_.Get(index);
}
inline const ::spaceBackpack::BSpaceBackpack& SspaceBackpackList::spacebackpacklist(int index) const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SspaceBackpackList.spaceBackpackList)
  return _internal_spacebackpacklist(index);
}
inline ::spaceBackpack::BSpaceBackpack* SspaceBackpackList::_internal_add_spacebackpacklist() {
  return spacebackpacklist_.Add();
}
inline ::spaceBackpack::BSpaceBackpack* SspaceBackpackList::add_spacebackpacklist() {
  // @@protoc_insertion_point(field_add:spaceBackpack.SspaceBackpackList.spaceBackpackList)
  return _internal_add_spacebackpacklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceBackpack::BSpaceBackpack >&
SspaceBackpackList::spacebackpacklist() const {
  // @@protoc_insertion_point(field_list:spaceBackpack.SspaceBackpackList.spaceBackpackList)
  return spacebackpacklist_;
}

// -------------------------------------------------------------------

// CMyDefaultSpace

// int32 uid = 1;
inline void CMyDefaultSpace::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMyDefaultSpace::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMyDefaultSpace::uid() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.CMyDefaultSpace.uid)
  return _internal_uid();
}
inline void CMyDefaultSpace::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void CMyDefaultSpace::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.CMyDefaultSpace.uid)
}

// -------------------------------------------------------------------

// SMyDefaultSpace

// int32 spaceBackpackId = 1;
inline void SMyDefaultSpace::clear_spacebackpackid() {
  spacebackpackid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::_internal_spacebackpackid() const {
  return spacebackpackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::spacebackpackid() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceBackpackId)
  return _internal_spacebackpackid();
}
inline void SMyDefaultSpace::_internal_set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacebackpackid_ = value;
}
inline void SMyDefaultSpace::set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacebackpackid(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceBackpackId)
}

// string spaceName = 2;
inline void SMyDefaultSpace::clear_spacename() {
  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMyDefaultSpace::spacename() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceName)
  return _internal_spacename();
}
inline void SMyDefaultSpace::set_spacename(const std::string& value) {
  _internal_set_spacename(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceName)
}
inline std::string* SMyDefaultSpace::mutable_spacename() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SMyDefaultSpace.spaceName)
  return _internal_mutable_spacename();
}
inline const std::string& SMyDefaultSpace::_internal_spacename() const {
  return spacename_.GetNoArena();
}
inline void SMyDefaultSpace::_internal_set_spacename(const std::string& value) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMyDefaultSpace::set_spacename(std::string&& value) {
  
  spacename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SMyDefaultSpace.spaceName)
}
inline void SMyDefaultSpace::set_spacename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SMyDefaultSpace.spaceName)
}
inline void SMyDefaultSpace::set_spacename(const char* value, size_t size) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SMyDefaultSpace.spaceName)
}
inline std::string* SMyDefaultSpace::_internal_mutable_spacename() {
  
  return spacename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMyDefaultSpace::release_spacename() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SMyDefaultSpace.spaceName)
  
  return spacename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMyDefaultSpace::set_allocated_spacename(std::string* spacename) {
  if (spacename != nullptr) {
    
  } else {
    
  }
  spacename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacename);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SMyDefaultSpace.spaceName)
}

// string spaceCover = 3;
inline void SMyDefaultSpace::clear_spacecover() {
  spacecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMyDefaultSpace::spacecover() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceCover)
  return _internal_spacecover();
}
inline void SMyDefaultSpace::set_spacecover(const std::string& value) {
  _internal_set_spacecover(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceCover)
}
inline std::string* SMyDefaultSpace::mutable_spacecover() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SMyDefaultSpace.spaceCover)
  return _internal_mutable_spacecover();
}
inline const std::string& SMyDefaultSpace::_internal_spacecover() const {
  return spacecover_.GetNoArena();
}
inline void SMyDefaultSpace::_internal_set_spacecover(const std::string& value) {
  
  spacecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMyDefaultSpace::set_spacecover(std::string&& value) {
  
  spacecover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SMyDefaultSpace.spaceCover)
}
inline void SMyDefaultSpace::set_spacecover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SMyDefaultSpace.spaceCover)
}
inline void SMyDefaultSpace::set_spacecover(const char* value, size_t size) {
  
  spacecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SMyDefaultSpace.spaceCover)
}
inline std::string* SMyDefaultSpace::_internal_mutable_spacecover() {
  
  return spacecover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMyDefaultSpace::release_spacecover() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SMyDefaultSpace.spaceCover)
  
  return spacecover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMyDefaultSpace::set_allocated_spacecover(std::string* spacecover) {
  if (spacecover != nullptr) {
    
  } else {
    
  }
  spacecover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecover);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SMyDefaultSpace.spaceCover)
}

// int32 spaceHouseType = 4;
inline void SMyDefaultSpace::clear_spacehousetype() {
  spacehousetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::_internal_spacehousetype() const {
  return spacehousetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::spacehousetype() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceHouseType)
  return _internal_spacehousetype();
}
inline void SMyDefaultSpace::_internal_set_spacehousetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacehousetype_ = value;
}
inline void SMyDefaultSpace::set_spacehousetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacehousetype(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceHouseType)
}

// int32 spaceVisitCount = 5;
inline void SMyDefaultSpace::clear_spacevisitcount() {
  spacevisitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::_internal_spacevisitcount() const {
  return spacevisitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::spacevisitcount() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceVisitCount)
  return _internal_spacevisitcount();
}
inline void SMyDefaultSpace::_internal_set_spacevisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacevisitcount_ = value;
}
inline void SMyDefaultSpace::set_spacevisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacevisitcount(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceVisitCount)
}

// int32 spaceTodayVisitCount = 6;
inline void SMyDefaultSpace::clear_spacetodayvisitcount() {
  spacetodayvisitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::_internal_spacetodayvisitcount() const {
  return spacetodayvisitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::spacetodayvisitcount() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceTodayVisitCount)
  return _internal_spacetodayvisitcount();
}
inline void SMyDefaultSpace::_internal_set_spacetodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacetodayvisitcount_ = value;
}
inline void SMyDefaultSpace::set_spacetodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacetodayvisitcount(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceTodayVisitCount)
}

// int32 spaceCopyBackpackId = 7;
inline void SMyDefaultSpace::clear_spacecopybackpackid() {
  spacecopybackpackid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::_internal_spacecopybackpackid() const {
  return spacecopybackpackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::spacecopybackpackid() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceCopyBackpackId)
  return _internal_spacecopybackpackid();
}
inline void SMyDefaultSpace::_internal_set_spacecopybackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacecopybackpackid_ = value;
}
inline void SMyDefaultSpace::set_spacecopybackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacecopybackpackid(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceCopyBackpackId)
}

// string spaceCopyName = 8;
inline void SMyDefaultSpace::clear_spacecopyname() {
  spacecopyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMyDefaultSpace::spacecopyname() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceCopyName)
  return _internal_spacecopyname();
}
inline void SMyDefaultSpace::set_spacecopyname(const std::string& value) {
  _internal_set_spacecopyname(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceCopyName)
}
inline std::string* SMyDefaultSpace::mutable_spacecopyname() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SMyDefaultSpace.spaceCopyName)
  return _internal_mutable_spacecopyname();
}
inline const std::string& SMyDefaultSpace::_internal_spacecopyname() const {
  return spacecopyname_.GetNoArena();
}
inline void SMyDefaultSpace::_internal_set_spacecopyname(const std::string& value) {
  
  spacecopyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMyDefaultSpace::set_spacecopyname(std::string&& value) {
  
  spacecopyname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SMyDefaultSpace.spaceCopyName)
}
inline void SMyDefaultSpace::set_spacecopyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacecopyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SMyDefaultSpace.spaceCopyName)
}
inline void SMyDefaultSpace::set_spacecopyname(const char* value, size_t size) {
  
  spacecopyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SMyDefaultSpace.spaceCopyName)
}
inline std::string* SMyDefaultSpace::_internal_mutable_spacecopyname() {
  
  return spacecopyname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMyDefaultSpace::release_spacecopyname() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SMyDefaultSpace.spaceCopyName)
  
  return spacecopyname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMyDefaultSpace::set_allocated_spacecopyname(std::string* spacecopyname) {
  if (spacecopyname != nullptr) {
    
  } else {
    
  }
  spacecopyname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecopyname);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SMyDefaultSpace.spaceCopyName)
}

// string spaceCopyCover = 9;
inline void SMyDefaultSpace::clear_spacecopycover() {
  spacecopycover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMyDefaultSpace::spacecopycover() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceCopyCover)
  return _internal_spacecopycover();
}
inline void SMyDefaultSpace::set_spacecopycover(const std::string& value) {
  _internal_set_spacecopycover(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceCopyCover)
}
inline std::string* SMyDefaultSpace::mutable_spacecopycover() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SMyDefaultSpace.spaceCopyCover)
  return _internal_mutable_spacecopycover();
}
inline const std::string& SMyDefaultSpace::_internal_spacecopycover() const {
  return spacecopycover_.GetNoArena();
}
inline void SMyDefaultSpace::_internal_set_spacecopycover(const std::string& value) {
  
  spacecopycover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SMyDefaultSpace::set_spacecopycover(std::string&& value) {
  
  spacecopycover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SMyDefaultSpace.spaceCopyCover)
}
inline void SMyDefaultSpace::set_spacecopycover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacecopycover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SMyDefaultSpace.spaceCopyCover)
}
inline void SMyDefaultSpace::set_spacecopycover(const char* value, size_t size) {
  
  spacecopycover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SMyDefaultSpace.spaceCopyCover)
}
inline std::string* SMyDefaultSpace::_internal_mutable_spacecopycover() {
  
  return spacecopycover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMyDefaultSpace::release_spacecopycover() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SMyDefaultSpace.spaceCopyCover)
  
  return spacecopycover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMyDefaultSpace::set_allocated_spacecopycover(std::string* spacecopycover) {
  if (spacecopycover != nullptr) {
    
  } else {
    
  }
  spacecopycover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecopycover);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SMyDefaultSpace.spaceCopyCover)
}

// int32 spaceCopyHouseType = 10;
inline void SMyDefaultSpace::clear_spacecopyhousetype() {
  spacecopyhousetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::_internal_spacecopyhousetype() const {
  return spacecopyhousetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::spacecopyhousetype() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceCopyHouseType)
  return _internal_spacecopyhousetype();
}
inline void SMyDefaultSpace::_internal_set_spacecopyhousetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacecopyhousetype_ = value;
}
inline void SMyDefaultSpace::set_spacecopyhousetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacecopyhousetype(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceCopyHouseType)
}

// int32 spaceCopyVisitCount = 11;
inline void SMyDefaultSpace::clear_spacecopyvisitcount() {
  spacecopyvisitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::_internal_spacecopyvisitcount() const {
  return spacecopyvisitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::spacecopyvisitcount() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceCopyVisitCount)
  return _internal_spacecopyvisitcount();
}
inline void SMyDefaultSpace::_internal_set_spacecopyvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacecopyvisitcount_ = value;
}
inline void SMyDefaultSpace::set_spacecopyvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacecopyvisitcount(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceCopyVisitCount)
}

// int32 spaceCopyTodayVisitCount = 12;
inline void SMyDefaultSpace::clear_spacecopytodayvisitcount() {
  spacecopytodayvisitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::_internal_spacecopytodayvisitcount() const {
  return spacecopytodayvisitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SMyDefaultSpace::spacecopytodayvisitcount() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SMyDefaultSpace.spaceCopyTodayVisitCount)
  return _internal_spacecopytodayvisitcount();
}
inline void SMyDefaultSpace::_internal_set_spacecopytodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacecopytodayvisitcount_ = value;
}
inline void SMyDefaultSpace::set_spacecopytodayvisitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacecopytodayvisitcount(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SMyDefaultSpace.spaceCopyTodayVisitCount)
}

// -------------------------------------------------------------------

// CSpaceIntroduce

// int32 houseId = 1;
inline void CSpaceIntroduce::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceIntroduce::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceIntroduce::houseid() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.CSpaceIntroduce.houseId)
  return _internal_houseid();
}
inline void CSpaceIntroduce::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CSpaceIntroduce::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.CSpaceIntroduce.houseId)
}

// int32 houseType = 2;
inline void CSpaceIntroduce::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceIntroduce::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceIntroduce::housetype() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.CSpaceIntroduce.houseType)
  return _internal_housetype();
}
inline void CSpaceIntroduce::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void CSpaceIntroduce::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.CSpaceIntroduce.houseType)
}

// -------------------------------------------------------------------

// SSpaceIntroduce

// string userPic = 1;
inline void SSpaceIntroduce::clear_userpic() {
  userpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceIntroduce::userpic() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.userPic)
  return _internal_userpic();
}
inline void SSpaceIntroduce::set_userpic(const std::string& value) {
  _internal_set_userpic(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.userPic)
}
inline std::string* SSpaceIntroduce::mutable_userpic() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SSpaceIntroduce.userPic)
  return _internal_mutable_userpic();
}
inline const std::string& SSpaceIntroduce::_internal_userpic() const {
  return userpic_.GetNoArena();
}
inline void SSpaceIntroduce::_internal_set_userpic(const std::string& value) {
  
  userpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceIntroduce::set_userpic(std::string&& value) {
  
  userpic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SSpaceIntroduce.userPic)
}
inline void SSpaceIntroduce::set_userpic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SSpaceIntroduce.userPic)
}
inline void SSpaceIntroduce::set_userpic(const char* value, size_t size) {
  
  userpic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SSpaceIntroduce.userPic)
}
inline std::string* SSpaceIntroduce::_internal_mutable_userpic() {
  
  return userpic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceIntroduce::release_userpic() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SSpaceIntroduce.userPic)
  
  return userpic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceIntroduce::set_allocated_userpic(std::string* userpic) {
  if (userpic != nullptr) {
    
  } else {
    
  }
  userpic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userpic);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SSpaceIntroduce.userPic)
}

// string userNick = 2;
inline void SSpaceIntroduce::clear_usernick() {
  usernick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceIntroduce::usernick() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.userNick)
  return _internal_usernick();
}
inline void SSpaceIntroduce::set_usernick(const std::string& value) {
  _internal_set_usernick(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.userNick)
}
inline std::string* SSpaceIntroduce::mutable_usernick() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SSpaceIntroduce.userNick)
  return _internal_mutable_usernick();
}
inline const std::string& SSpaceIntroduce::_internal_usernick() const {
  return usernick_.GetNoArena();
}
inline void SSpaceIntroduce::_internal_set_usernick(const std::string& value) {
  
  usernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceIntroduce::set_usernick(std::string&& value) {
  
  usernick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SSpaceIntroduce.userNick)
}
inline void SSpaceIntroduce::set_usernick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SSpaceIntroduce.userNick)
}
inline void SSpaceIntroduce::set_usernick(const char* value, size_t size) {
  
  usernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SSpaceIntroduce.userNick)
}
inline std::string* SSpaceIntroduce::_internal_mutable_usernick() {
  
  return usernick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceIntroduce::release_usernick() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SSpaceIntroduce.userNick)
  
  return usernick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceIntroduce::set_allocated_usernick(std::string* usernick) {
  if (usernick != nullptr) {
    
  } else {
    
  }
  usernick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usernick);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SSpaceIntroduce.userNick)
}

// string spaceName = 3;
inline void SSpaceIntroduce::clear_spacename() {
  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceIntroduce::spacename() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.spaceName)
  return _internal_spacename();
}
inline void SSpaceIntroduce::set_spacename(const std::string& value) {
  _internal_set_spacename(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.spaceName)
}
inline std::string* SSpaceIntroduce::mutable_spacename() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SSpaceIntroduce.spaceName)
  return _internal_mutable_spacename();
}
inline const std::string& SSpaceIntroduce::_internal_spacename() const {
  return spacename_.GetNoArena();
}
inline void SSpaceIntroduce::_internal_set_spacename(const std::string& value) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceIntroduce::set_spacename(std::string&& value) {
  
  spacename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SSpaceIntroduce.spaceName)
}
inline void SSpaceIntroduce::set_spacename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SSpaceIntroduce.spaceName)
}
inline void SSpaceIntroduce::set_spacename(const char* value, size_t size) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SSpaceIntroduce.spaceName)
}
inline std::string* SSpaceIntroduce::_internal_mutable_spacename() {
  
  return spacename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceIntroduce::release_spacename() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SSpaceIntroduce.spaceName)
  
  return spacename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceIntroduce::set_allocated_spacename(std::string* spacename) {
  if (spacename != nullptr) {
    
  } else {
    
  }
  spacename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacename);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SSpaceIntroduce.spaceName)
}

// string spaceDesc = 4;
inline void SSpaceIntroduce::clear_spacedesc() {
  spacedesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceIntroduce::spacedesc() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.spaceDesc)
  return _internal_spacedesc();
}
inline void SSpaceIntroduce::set_spacedesc(const std::string& value) {
  _internal_set_spacedesc(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.spaceDesc)
}
inline std::string* SSpaceIntroduce::mutable_spacedesc() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SSpaceIntroduce.spaceDesc)
  return _internal_mutable_spacedesc();
}
inline const std::string& SSpaceIntroduce::_internal_spacedesc() const {
  return spacedesc_.GetNoArena();
}
inline void SSpaceIntroduce::_internal_set_spacedesc(const std::string& value) {
  
  spacedesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceIntroduce::set_spacedesc(std::string&& value) {
  
  spacedesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SSpaceIntroduce.spaceDesc)
}
inline void SSpaceIntroduce::set_spacedesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacedesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SSpaceIntroduce.spaceDesc)
}
inline void SSpaceIntroduce::set_spacedesc(const char* value, size_t size) {
  
  spacedesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SSpaceIntroduce.spaceDesc)
}
inline std::string* SSpaceIntroduce::_internal_mutable_spacedesc() {
  
  return spacedesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceIntroduce::release_spacedesc() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SSpaceIntroduce.spaceDesc)
  
  return spacedesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceIntroduce::set_allocated_spacedesc(std::string* spacedesc) {
  if (spacedesc != nullptr) {
    
  } else {
    
  }
  spacedesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacedesc);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SSpaceIntroduce.spaceDesc)
}

// string spaceRule = 5;
inline void SSpaceIntroduce::clear_spacerule() {
  spacerule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceIntroduce::spacerule() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.spaceRule)
  return _internal_spacerule();
}
inline void SSpaceIntroduce::set_spacerule(const std::string& value) {
  _internal_set_spacerule(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.spaceRule)
}
inline std::string* SSpaceIntroduce::mutable_spacerule() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SSpaceIntroduce.spaceRule)
  return _internal_mutable_spacerule();
}
inline const std::string& SSpaceIntroduce::_internal_spacerule() const {
  return spacerule_.GetNoArena();
}
inline void SSpaceIntroduce::_internal_set_spacerule(const std::string& value) {
  
  spacerule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceIntroduce::set_spacerule(std::string&& value) {
  
  spacerule_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SSpaceIntroduce.spaceRule)
}
inline void SSpaceIntroduce::set_spacerule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacerule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SSpaceIntroduce.spaceRule)
}
inline void SSpaceIntroduce::set_spacerule(const char* value, size_t size) {
  
  spacerule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SSpaceIntroduce.spaceRule)
}
inline std::string* SSpaceIntroduce::_internal_mutable_spacerule() {
  
  return spacerule_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceIntroduce::release_spacerule() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SSpaceIntroduce.spaceRule)
  
  return spacerule_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceIntroduce::set_allocated_spacerule(std::string* spacerule) {
  if (spacerule != nullptr) {
    
  } else {
    
  }
  spacerule_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacerule);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SSpaceIntroduce.spaceRule)
}

// string createUserNick = 6;
inline void SSpaceIntroduce::clear_createusernick() {
  createusernick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceIntroduce::createusernick() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.createUserNick)
  return _internal_createusernick();
}
inline void SSpaceIntroduce::set_createusernick(const std::string& value) {
  _internal_set_createusernick(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.createUserNick)
}
inline std::string* SSpaceIntroduce::mutable_createusernick() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SSpaceIntroduce.createUserNick)
  return _internal_mutable_createusernick();
}
inline const std::string& SSpaceIntroduce::_internal_createusernick() const {
  return createusernick_.GetNoArena();
}
inline void SSpaceIntroduce::_internal_set_createusernick(const std::string& value) {
  
  createusernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceIntroduce::set_createusernick(std::string&& value) {
  
  createusernick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SSpaceIntroduce.createUserNick)
}
inline void SSpaceIntroduce::set_createusernick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createusernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SSpaceIntroduce.createUserNick)
}
inline void SSpaceIntroduce::set_createusernick(const char* value, size_t size) {
  
  createusernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SSpaceIntroduce.createUserNick)
}
inline std::string* SSpaceIntroduce::_internal_mutable_createusernick() {
  
  return createusernick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceIntroduce::release_createusernick() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SSpaceIntroduce.createUserNick)
  
  return createusernick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceIntroduce::set_allocated_createusernick(std::string* createusernick) {
  if (createusernick != nullptr) {
    
  } else {
    
  }
  createusernick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createusernick);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SSpaceIntroduce.createUserNick)
}

// int32 isCollect = 7;
inline void SSpaceIntroduce::clear_iscollect() {
  iscollect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::_internal_iscollect() const {
  return iscollect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::iscollect() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.isCollect)
  return _internal_iscollect();
}
inline void SSpaceIntroduce::_internal_set_iscollect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iscollect_ = value;
}
inline void SSpaceIntroduce::set_iscollect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iscollect(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.isCollect)
}

// int32 isRecreation = 8;
inline void SSpaceIntroduce::clear_isrecreation() {
  isrecreation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::_internal_isrecreation() const {
  return isrecreation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::isrecreation() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.isRecreation)
  return _internal_isrecreation();
}
inline void SSpaceIntroduce::_internal_set_isrecreation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isrecreation_ = value;
}
inline void SSpaceIntroduce::set_isrecreation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isrecreation(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.isRecreation)
}

// int32 isCopy = 9;
inline void SSpaceIntroduce::clear_iscopy() {
  iscopy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::_internal_iscopy() const {
  return iscopy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::iscopy() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.isCopy)
  return _internal_iscopy();
}
inline void SSpaceIntroduce::_internal_set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iscopy_ = value;
}
inline void SSpaceIntroduce::set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iscopy(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.isCopy)
}

// int32 isOpen = 10;
inline void SSpaceIntroduce::clear_isopen() {
  isopen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::_internal_isopen() const {
  return isopen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::isopen() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.isOpen)
  return _internal_isopen();
}
inline void SSpaceIntroduce::_internal_set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isopen_ = value;
}
inline void SSpaceIntroduce::set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.isOpen)
}

// string createdAt = 11;
inline void SSpaceIntroduce::clear_createdat() {
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceIntroduce::createdat() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.createdAt)
  return _internal_createdat();
}
inline void SSpaceIntroduce::set_createdat(const std::string& value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.createdAt)
}
inline std::string* SSpaceIntroduce::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SSpaceIntroduce.createdAt)
  return _internal_mutable_createdat();
}
inline const std::string& SSpaceIntroduce::_internal_createdat() const {
  return createdat_.GetNoArena();
}
inline void SSpaceIntroduce::_internal_set_createdat(const std::string& value) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceIntroduce::set_createdat(std::string&& value) {
  
  createdat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SSpaceIntroduce.createdAt)
}
inline void SSpaceIntroduce::set_createdat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SSpaceIntroduce.createdAt)
}
inline void SSpaceIntroduce::set_createdat(const char* value, size_t size) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SSpaceIntroduce.createdAt)
}
inline std::string* SSpaceIntroduce::_internal_mutable_createdat() {
  
  return createdat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceIntroduce::release_createdat() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SSpaceIntroduce.createdAt)
  
  return createdat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceIntroduce::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SSpaceIntroduce.createdAt)
}

// string updateAt = 12;
inline void SSpaceIntroduce::clear_updateat() {
  updateat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceIntroduce::updateat() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.updateAt)
  return _internal_updateat();
}
inline void SSpaceIntroduce::set_updateat(const std::string& value) {
  _internal_set_updateat(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.updateAt)
}
inline std::string* SSpaceIntroduce::mutable_updateat() {
  // @@protoc_insertion_point(field_mutable:spaceBackpack.SSpaceIntroduce.updateAt)
  return _internal_mutable_updateat();
}
inline const std::string& SSpaceIntroduce::_internal_updateat() const {
  return updateat_.GetNoArena();
}
inline void SSpaceIntroduce::_internal_set_updateat(const std::string& value) {
  
  updateat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceIntroduce::set_updateat(std::string&& value) {
  
  updateat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceBackpack.SSpaceIntroduce.updateAt)
}
inline void SSpaceIntroduce::set_updateat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updateat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceBackpack.SSpaceIntroduce.updateAt)
}
inline void SSpaceIntroduce::set_updateat(const char* value, size_t size) {
  
  updateat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceBackpack.SSpaceIntroduce.updateAt)
}
inline std::string* SSpaceIntroduce::_internal_mutable_updateat() {
  
  return updateat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceIntroduce::release_updateat() {
  // @@protoc_insertion_point(field_release:spaceBackpack.SSpaceIntroduce.updateAt)
  
  return updateat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceIntroduce::set_allocated_updateat(std::string* updateat) {
  if (updateat != nullptr) {
    
  } else {
    
  }
  updateat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updateat);
  // @@protoc_insertion_point(field_set_allocated:spaceBackpack.SSpaceIntroduce.updateAt)
}

// int32 houseId = 13;
inline void SSpaceIntroduce::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::houseid() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.houseId)
  return _internal_houseid();
}
inline void SSpaceIntroduce::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SSpaceIntroduce::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.houseId)
}

// int32 houseType = 14;
inline void SSpaceIntroduce::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceIntroduce::housetype() const {
  // @@protoc_insertion_point(field_get:spaceBackpack.SSpaceIntroduce.houseType)
  return _internal_housetype();
}
inline void SSpaceIntroduce::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void SSpaceIntroduce::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:spaceBackpack.SSpaceIntroduce.houseType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spaceBackpack

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceBackpack_2eproto
