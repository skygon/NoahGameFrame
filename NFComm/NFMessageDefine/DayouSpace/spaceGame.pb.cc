// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceGame.proto

#include "spaceGame.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_spaceGame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameRank_spaceGame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spaceGame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JumpGameWaitLint_spaceGame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spaceGame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShipGameWaitLint_spaceGame_2eproto;
namespace gameTick {
class CJumpGameWaitLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CJumpGameWaitLine> _instance;
} _CJumpGameWaitLine_default_instance_;
class SJumpGameWaitLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SJumpGameWaitLine> _instance;
} _SJumpGameWaitLine_default_instance_;
class CJumpGameOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CJumpGameOut> _instance;
} _CJumpGameOut_default_instance_;
class SJumpGameOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SJumpGameOut> _instance;
} _SJumpGameOut_default_instance_;
class CGameStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGameStatus> _instance;
} _CGameStatus_default_instance_;
class SGameStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameStatus> _instance;
} _SGameStatus_default_instance_;
class ShipGameWaitLintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShipGameWaitLint> _instance;
} _ShipGameWaitLint_default_instance_;
class JumpGameWaitLintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JumpGameWaitLint> _instance;
} _JumpGameWaitLint_default_instance_;
class CGameRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGameRank> _instance;
} _CGameRank_default_instance_;
class SGameRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameRank> _instance;
} _SGameRank_default_instance_;
class GameRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameRank> _instance;
} _GameRank_default_instance_;
class SJumpGameShootBulletsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SJumpGameShootBullets> _instance;
} _SJumpGameShootBullets_default_instance_;
class SGameAbnormalStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGameAbnormalStop> _instance;
} _SGameAbnormalStop_default_instance_;
}  // namespace gameTick
static void InitDefaultsscc_info_CGameRank_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_CGameRank_default_instance_;
    new (ptr) ::gameTick::CGameRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::CGameRank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGameRank_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGameRank_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_CGameStatus_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_CGameStatus_default_instance_;
    new (ptr) ::gameTick::CGameStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::CGameStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGameStatus_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGameStatus_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_CJumpGameOut_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_CJumpGameOut_default_instance_;
    new (ptr) ::gameTick::CJumpGameOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::CJumpGameOut::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CJumpGameOut_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CJumpGameOut_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_CJumpGameWaitLine_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_CJumpGameWaitLine_default_instance_;
    new (ptr) ::gameTick::CJumpGameWaitLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::CJumpGameWaitLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CJumpGameWaitLine_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CJumpGameWaitLine_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_GameRank_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_GameRank_default_instance_;
    new (ptr) ::gameTick::GameRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::GameRank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameRank_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameRank_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_JumpGameWaitLint_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_JumpGameWaitLint_default_instance_;
    new (ptr) ::gameTick::JumpGameWaitLint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::JumpGameWaitLint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JumpGameWaitLint_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JumpGameWaitLint_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_SGameAbnormalStop_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_SGameAbnormalStop_default_instance_;
    new (ptr) ::gameTick::SGameAbnormalStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::SGameAbnormalStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGameAbnormalStop_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGameAbnormalStop_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_SGameRank_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_SGameRank_default_instance_;
    new (ptr) ::gameTick::SGameRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::SGameRank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SGameRank_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SGameRank_spaceGame_2eproto}, {
      &scc_info_GameRank_spaceGame_2eproto.base,}};

static void InitDefaultsscc_info_SGameStatus_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_SGameStatus_default_instance_;
    new (ptr) ::gameTick::SGameStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::SGameStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SGameStatus_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SGameStatus_spaceGame_2eproto}, {
      &scc_info_ShipGameWaitLint_spaceGame_2eproto.base,
      &scc_info_JumpGameWaitLint_spaceGame_2eproto.base,}};

static void InitDefaultsscc_info_SJumpGameOut_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_SJumpGameOut_default_instance_;
    new (ptr) ::gameTick::SJumpGameOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::SJumpGameOut::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SJumpGameOut_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SJumpGameOut_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_SJumpGameShootBullets_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_SJumpGameShootBullets_default_instance_;
    new (ptr) ::gameTick::SJumpGameShootBullets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::SJumpGameShootBullets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SJumpGameShootBullets_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SJumpGameShootBullets_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_SJumpGameWaitLine_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_SJumpGameWaitLine_default_instance_;
    new (ptr) ::gameTick::SJumpGameWaitLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::SJumpGameWaitLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SJumpGameWaitLine_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SJumpGameWaitLine_spaceGame_2eproto}, {}};

static void InitDefaultsscc_info_ShipGameWaitLint_spaceGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameTick::_ShipGameWaitLint_default_instance_;
    new (ptr) ::gameTick::ShipGameWaitLint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameTick::ShipGameWaitLint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShipGameWaitLint_spaceGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShipGameWaitLint_spaceGame_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spaceGame_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_spaceGame_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spaceGame_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spaceGame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::CJumpGameWaitLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameWaitLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameWaitLine, status_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameWaitLine, msg_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameWaitLine, teamnumber_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameWaitLine, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::CJumpGameOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::CJumpGameOut, teamnumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameOut, score_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameOut, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::CGameStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::CGameStatus, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameStatus, gamestatus_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameStatus, gamestarttimestamp_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameStatus, servertimestamp_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameStatus, shipgamewaitlint_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameStatus, jumpgamewaitlint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::ShipGameWaitLint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::ShipGameWaitLint, teamnumber_),
  PROTOBUF_FIELD_OFFSET(::gameTick::ShipGameWaitLint, left_),
  PROTOBUF_FIELD_OFFSET(::gameTick::ShipGameWaitLint, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::JumpGameWaitLint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::JumpGameWaitLint, teamnumber_),
  PROTOBUF_FIELD_OFFSET(::gameTick::JumpGameWaitLint, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::CGameRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::CGameRank, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameRank, gamerank_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameRank, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::GameRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::GameRank, rank_),
  PROTOBUF_FIELD_OFFSET(::gameTick::GameRank, teamname_),
  PROTOBUF_FIELD_OFFSET(::gameTick::GameRank, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameShootBullets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameShootBullets, direction_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameShootBullets, height_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameShootBullets, num_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameShootBullets, speed_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SJumpGameShootBullets, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameAbnormalStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameAbnormalStop, gameid_),
  PROTOBUF_FIELD_OFFSET(::gameTick::SGameAbnormalStop, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gameTick::CJumpGameWaitLine)},
  { 5, -1, sizeof(::gameTick::SJumpGameWaitLine)},
  { 14, -1, sizeof(::gameTick::CJumpGameOut)},
  { 20, -1, sizeof(::gameTick::SJumpGameOut)},
  { 27, -1, sizeof(::gameTick::CGameStatus)},
  { 33, -1, sizeof(::gameTick::SGameStatus)},
  { 43, -1, sizeof(::gameTick::ShipGameWaitLint)},
  { 51, -1, sizeof(::gameTick::JumpGameWaitLint)},
  { 58, -1, sizeof(::gameTick::CGameRank)},
  { 64, -1, sizeof(::gameTick::SGameRank)},
  { 71, -1, sizeof(::gameTick::GameRank)},
  { 79, -1, sizeof(::gameTick::SJumpGameShootBullets)},
  { 89, -1, sizeof(::gameTick::SGameAbnormalStop)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_CJumpGameWaitLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_SJumpGameWaitLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_CJumpGameOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_SJumpGameOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_CGameStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_SGameStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_ShipGameWaitLint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_JumpGameWaitLint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_CGameRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_SGameRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_GameRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_SJumpGameShootBullets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameTick::_SGameAbnormalStop_default_instance_),
};

const char descriptor_table_protodef_spaceGame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017spaceGame.proto\022\010gameTick\"\023\n\021CJumpGame"
  "WaitLine\"Q\n\021SJumpGameWaitLine\022\016\n\006status\030"
  "\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\022\n\nteamNumber\030\003 \001(\005\022\013"
  "\n\003uid\030\004 \001(\005\"\"\n\014CJumpGameOut\022\022\n\nteamNumbe"
  "r\030\001 \001(\005\"*\n\014SJumpGameOut\022\r\n\005score\030\001 \001(\005\022\013"
  "\n\003uid\030\002 \001(\005\"\035\n\013CGameStatus\022\016\n\006gameId\030\001 \001"
  "(\005\"\302\001\n\013SGameStatus\022\022\n\ngameStatus\030\001 \001(\005\022\032"
  "\n\022gameStartTimestamp\030\002 \001(\005\022\027\n\017serverTime"
  "stamp\030\003 \001(\005\0224\n\020shipGameWaitLint\030\004 \003(\0132\032."
  "gameTick.ShipGameWaitLint\0224\n\020jumpGameWai"
  "tLint\030\005 \003(\0132\032.gameTick.JumpGameWaitLint\""
  "C\n\020ShipGameWaitLint\022\022\n\nteamNumber\030\001 \001(\005\022"
  "\014\n\004left\030\002 \001(\005\022\r\n\005right\030\003 \001(\005\"3\n\020JumpGame"
  "WaitLint\022\022\n\nteamNumber\030\001 \001(\005\022\013\n\003uid\030\002 \001("
  "\005\"\033\n\tCGameRank\022\016\n\006gameId\030\001 \001(\005\"A\n\tSGameR"
  "ank\022$\n\010gameRank\030\001 \003(\0132\022.gameTick.GameRan"
  "k\022\016\n\006gameId\030\002 \001(\005\"9\n\010GameRank\022\014\n\004rank\030\001 "
  "\001(\005\022\020\n\010teamName\030\002 \001(\t\022\r\n\005score\030\003 \001(\005\"h\n\025"
  "SJumpGameShootBullets\022\021\n\tdirection\030\001 \001(\005"
  "\022\016\n\006height\030\002 \001(\002\022\013\n\003num\030\003 \001(\005\022\r\n\005speed\030\004"
  " \001(\002\022\020\n\010interval\030\005 \001(\002\"0\n\021SGameAbnormalS"
  "top\022\016\n\006gameId\030\001 \001(\005\022\013\n\003msg\030\002 \001(\tB)\n\030com."
  "dayou.space.protobufB\tSpaceGameZ\002./b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_spaceGame_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_spaceGame_2eproto_sccs[13] = {
  &scc_info_CGameRank_spaceGame_2eproto.base,
  &scc_info_CGameStatus_spaceGame_2eproto.base,
  &scc_info_CJumpGameOut_spaceGame_2eproto.base,
  &scc_info_CJumpGameWaitLine_spaceGame_2eproto.base,
  &scc_info_GameRank_spaceGame_2eproto.base,
  &scc_info_JumpGameWaitLint_spaceGame_2eproto.base,
  &scc_info_SGameAbnormalStop_spaceGame_2eproto.base,
  &scc_info_SGameRank_spaceGame_2eproto.base,
  &scc_info_SGameStatus_spaceGame_2eproto.base,
  &scc_info_SJumpGameOut_spaceGame_2eproto.base,
  &scc_info_SJumpGameShootBullets_spaceGame_2eproto.base,
  &scc_info_SJumpGameWaitLine_spaceGame_2eproto.base,
  &scc_info_ShipGameWaitLint_spaceGame_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spaceGame_2eproto_once;
static bool descriptor_table_spaceGame_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceGame_2eproto = {
  &descriptor_table_spaceGame_2eproto_initialized, descriptor_table_protodef_spaceGame_2eproto, "spaceGame.proto", 923,
  &descriptor_table_spaceGame_2eproto_once, descriptor_table_spaceGame_2eproto_sccs, descriptor_table_spaceGame_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_spaceGame_2eproto::offsets,
  file_level_metadata_spaceGame_2eproto, 13, file_level_enum_descriptors_spaceGame_2eproto, file_level_service_descriptors_spaceGame_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spaceGame_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_spaceGame_2eproto), true);
namespace gameTick {

// ===================================================================

void CJumpGameWaitLine::InitAsDefaultInstance() {
}
class CJumpGameWaitLine::_Internal {
 public:
};

CJumpGameWaitLine::CJumpGameWaitLine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.CJumpGameWaitLine)
}
CJumpGameWaitLine::CJumpGameWaitLine(const CJumpGameWaitLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gameTick.CJumpGameWaitLine)
}

void CJumpGameWaitLine::SharedCtor() {
}

CJumpGameWaitLine::~CJumpGameWaitLine() {
  // @@protoc_insertion_point(destructor:gameTick.CJumpGameWaitLine)
  SharedDtor();
}

void CJumpGameWaitLine::SharedDtor() {
}

void CJumpGameWaitLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CJumpGameWaitLine& CJumpGameWaitLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CJumpGameWaitLine_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void CJumpGameWaitLine::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.CJumpGameWaitLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CJumpGameWaitLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CJumpGameWaitLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.CJumpGameWaitLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.CJumpGameWaitLine)
  return target;
}

size_t CJumpGameWaitLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.CJumpGameWaitLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CJumpGameWaitLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.CJumpGameWaitLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CJumpGameWaitLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CJumpGameWaitLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.CJumpGameWaitLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.CJumpGameWaitLine)
    MergeFrom(*source);
  }
}

void CJumpGameWaitLine::MergeFrom(const CJumpGameWaitLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.CJumpGameWaitLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CJumpGameWaitLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.CJumpGameWaitLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJumpGameWaitLine::CopyFrom(const CJumpGameWaitLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.CJumpGameWaitLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJumpGameWaitLine::IsInitialized() const {
  return true;
}

void CJumpGameWaitLine::InternalSwap(CJumpGameWaitLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CJumpGameWaitLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SJumpGameWaitLine::InitAsDefaultInstance() {
}
class SJumpGameWaitLine::_Internal {
 public:
};

SJumpGameWaitLine::SJumpGameWaitLine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.SJumpGameWaitLine)
}
SJumpGameWaitLine::SJumpGameWaitLine(const SJumpGameWaitLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:gameTick.SJumpGameWaitLine)
}

void SJumpGameWaitLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SJumpGameWaitLine_spaceGame_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(uid_));
}

SJumpGameWaitLine::~SJumpGameWaitLine() {
  // @@protoc_insertion_point(destructor:gameTick.SJumpGameWaitLine)
  SharedDtor();
}

void SJumpGameWaitLine::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SJumpGameWaitLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SJumpGameWaitLine& SJumpGameWaitLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SJumpGameWaitLine_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void SJumpGameWaitLine::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.SJumpGameWaitLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SJumpGameWaitLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameTick.SJumpGameWaitLine.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 teamNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          teamnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SJumpGameWaitLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.SJumpGameWaitLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameTick.SJumpGameWaitLine.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 teamNumber = 3;
  if (this->teamnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_teamnumber(), target);
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.SJumpGameWaitLine)
  return target;
}

size_t SJumpGameWaitLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.SJumpGameWaitLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 teamNumber = 3;
  if (this->teamnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_teamnumber());
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SJumpGameWaitLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.SJumpGameWaitLine)
  GOOGLE_DCHECK_NE(&from, this);
  const SJumpGameWaitLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SJumpGameWaitLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.SJumpGameWaitLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.SJumpGameWaitLine)
    MergeFrom(*source);
  }
}

void SJumpGameWaitLine::MergeFrom(const SJumpGameWaitLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.SJumpGameWaitLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.teamnumber() != 0) {
    _internal_set_teamnumber(from._internal_teamnumber());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SJumpGameWaitLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.SJumpGameWaitLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SJumpGameWaitLine::CopyFrom(const SJumpGameWaitLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.SJumpGameWaitLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SJumpGameWaitLine::IsInitialized() const {
  return true;
}

void SJumpGameWaitLine::InternalSwap(SJumpGameWaitLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(teamnumber_, other->teamnumber_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SJumpGameWaitLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CJumpGameOut::InitAsDefaultInstance() {
}
class CJumpGameOut::_Internal {
 public:
};

CJumpGameOut::CJumpGameOut()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.CJumpGameOut)
}
CJumpGameOut::CJumpGameOut(const CJumpGameOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teamnumber_ = from.teamnumber_;
  // @@protoc_insertion_point(copy_constructor:gameTick.CJumpGameOut)
}

void CJumpGameOut::SharedCtor() {
  teamnumber_ = 0;
}

CJumpGameOut::~CJumpGameOut() {
  // @@protoc_insertion_point(destructor:gameTick.CJumpGameOut)
  SharedDtor();
}

void CJumpGameOut::SharedDtor() {
}

void CJumpGameOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CJumpGameOut& CJumpGameOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CJumpGameOut_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void CJumpGameOut::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.CJumpGameOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teamnumber_ = 0;
  _internal_metadata_.Clear();
}

const char* CJumpGameOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 teamNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          teamnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CJumpGameOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.CJumpGameOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 teamNumber = 1;
  if (this->teamnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_teamnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.CJumpGameOut)
  return target;
}

size_t CJumpGameOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.CJumpGameOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 teamNumber = 1;
  if (this->teamnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_teamnumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CJumpGameOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.CJumpGameOut)
  GOOGLE_DCHECK_NE(&from, this);
  const CJumpGameOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CJumpGameOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.CJumpGameOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.CJumpGameOut)
    MergeFrom(*source);
  }
}

void CJumpGameOut::MergeFrom(const CJumpGameOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.CJumpGameOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.teamnumber() != 0) {
    _internal_set_teamnumber(from._internal_teamnumber());
  }
}

void CJumpGameOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.CJumpGameOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJumpGameOut::CopyFrom(const CJumpGameOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.CJumpGameOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJumpGameOut::IsInitialized() const {
  return true;
}

void CJumpGameOut::InternalSwap(CJumpGameOut* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(teamnumber_, other->teamnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CJumpGameOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SJumpGameOut::InitAsDefaultInstance() {
}
class SJumpGameOut::_Internal {
 public:
};

SJumpGameOut::SJumpGameOut()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.SJumpGameOut)
}
SJumpGameOut::SJumpGameOut(const SJumpGameOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&score_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:gameTick.SJumpGameOut)
}

void SJumpGameOut::SharedCtor() {
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&score_)) + sizeof(uid_));
}

SJumpGameOut::~SJumpGameOut() {
  // @@protoc_insertion_point(destructor:gameTick.SJumpGameOut)
  SharedDtor();
}

void SJumpGameOut::SharedDtor() {
}

void SJumpGameOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SJumpGameOut& SJumpGameOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SJumpGameOut_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void SJumpGameOut::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.SJumpGameOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&score_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SJumpGameOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SJumpGameOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.SJumpGameOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_score(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.SJumpGameOut)
  return target;
}

size_t SJumpGameOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.SJumpGameOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SJumpGameOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.SJumpGameOut)
  GOOGLE_DCHECK_NE(&from, this);
  const SJumpGameOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SJumpGameOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.SJumpGameOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.SJumpGameOut)
    MergeFrom(*source);
  }
}

void SJumpGameOut::MergeFrom(const SJumpGameOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.SJumpGameOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SJumpGameOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.SJumpGameOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SJumpGameOut::CopyFrom(const SJumpGameOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.SJumpGameOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SJumpGameOut::IsInitialized() const {
  return true;
}

void SJumpGameOut::InternalSwap(SJumpGameOut* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(score_, other->score_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SJumpGameOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGameStatus::InitAsDefaultInstance() {
}
class CGameStatus::_Internal {
 public:
};

CGameStatus::CGameStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.CGameStatus)
}
CGameStatus::CGameStatus(const CGameStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:gameTick.CGameStatus)
}

void CGameStatus::SharedCtor() {
  gameid_ = 0;
}

CGameStatus::~CGameStatus() {
  // @@protoc_insertion_point(destructor:gameTick.CGameStatus)
  SharedDtor();
}

void CGameStatus::SharedDtor() {
}

void CGameStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameStatus& CGameStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGameStatus_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void CGameStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.CGameStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = 0;
  _internal_metadata_.Clear();
}

const char* CGameStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.CGameStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.CGameStatus)
  return target;
}

size_t CGameStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.CGameStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.CGameStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.CGameStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.CGameStatus)
    MergeFrom(*source);
  }
}

void CGameStatus::MergeFrom(const CGameStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.CGameStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void CGameStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.CGameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameStatus::CopyFrom(const CGameStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.CGameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameStatus::IsInitialized() const {
  return true;
}

void CGameStatus::InternalSwap(CGameStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameStatus::InitAsDefaultInstance() {
}
class SGameStatus::_Internal {
 public:
};

SGameStatus::SGameStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.SGameStatus)
}
SGameStatus::SGameStatus(const SGameStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shipgamewaitlint_(from.shipgamewaitlint_),
      jumpgamewaitlint_(from.jumpgamewaitlint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gamestatus_, &from.gamestatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&servertimestamp_) -
    reinterpret_cast<char*>(&gamestatus_)) + sizeof(servertimestamp_));
  // @@protoc_insertion_point(copy_constructor:gameTick.SGameStatus)
}

void SGameStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGameStatus_spaceGame_2eproto.base);
  ::memset(&gamestatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servertimestamp_) -
      reinterpret_cast<char*>(&gamestatus_)) + sizeof(servertimestamp_));
}

SGameStatus::~SGameStatus() {
  // @@protoc_insertion_point(destructor:gameTick.SGameStatus)
  SharedDtor();
}

void SGameStatus::SharedDtor() {
}

void SGameStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameStatus& SGameStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameStatus_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void SGameStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.SGameStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipgamewaitlint_.Clear();
  jumpgamewaitlint_.Clear();
  ::memset(&gamestatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servertimestamp_) -
      reinterpret_cast<char*>(&gamestatus_)) + sizeof(servertimestamp_));
  _internal_metadata_.Clear();
}

const char* SGameStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gamestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gameStartTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gamestarttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 serverTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          servertimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gameTick.ShipGameWaitLint shipGameWaitLint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shipgamewaitlint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gameTick.JumpGameWaitLint jumpGameWaitLint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jumpgamewaitlint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.SGameStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameStatus = 1;
  if (this->gamestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gamestatus(), target);
  }

  // int32 gameStartTimestamp = 2;
  if (this->gamestarttimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gamestarttimestamp(), target);
  }

  // int32 serverTimestamp = 3;
  if (this->servertimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_servertimestamp(), target);
  }

  // repeated .gameTick.ShipGameWaitLint shipGameWaitLint = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shipgamewaitlint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_shipgamewaitlint(i), target, stream);
  }

  // repeated .gameTick.JumpGameWaitLint jumpGameWaitLint = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jumpgamewaitlint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_jumpgamewaitlint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.SGameStatus)
  return target;
}

size_t SGameStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.SGameStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gameTick.ShipGameWaitLint shipGameWaitLint = 4;
  total_size += 1UL * this->_internal_shipgamewaitlint_size();
  for (const auto& msg : this->shipgamewaitlint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gameTick.JumpGameWaitLint jumpGameWaitLint = 5;
  total_size += 1UL * this->_internal_jumpgamewaitlint_size();
  for (const auto& msg : this->jumpgamewaitlint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 gameStatus = 1;
  if (this->gamestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamestatus());
  }

  // int32 gameStartTimestamp = 2;
  if (this->gamestarttimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamestarttimestamp());
  }

  // int32 serverTimestamp = 3;
  if (this->servertimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_servertimestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.SGameStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.SGameStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.SGameStatus)
    MergeFrom(*source);
  }
}

void SGameStatus::MergeFrom(const SGameStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.SGameStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shipgamewaitlint_.MergeFrom(from.shipgamewaitlint_);
  jumpgamewaitlint_.MergeFrom(from.jumpgamewaitlint_);
  if (from.gamestatus() != 0) {
    _internal_set_gamestatus(from._internal_gamestatus());
  }
  if (from.gamestarttimestamp() != 0) {
    _internal_set_gamestarttimestamp(from._internal_gamestarttimestamp());
  }
  if (from.servertimestamp() != 0) {
    _internal_set_servertimestamp(from._internal_servertimestamp());
  }
}

void SGameStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.SGameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameStatus::CopyFrom(const SGameStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.SGameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameStatus::IsInitialized() const {
  return true;
}

void SGameStatus::InternalSwap(SGameStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shipgamewaitlint_.InternalSwap(&other->shipgamewaitlint_);
  jumpgamewaitlint_.InternalSwap(&other->jumpgamewaitlint_);
  swap(gamestatus_, other->gamestatus_);
  swap(gamestarttimestamp_, other->gamestarttimestamp_);
  swap(servertimestamp_, other->servertimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShipGameWaitLint::InitAsDefaultInstance() {
}
class ShipGameWaitLint::_Internal {
 public:
};

ShipGameWaitLint::ShipGameWaitLint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.ShipGameWaitLint)
}
ShipGameWaitLint::ShipGameWaitLint(const ShipGameWaitLint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&teamnumber_, &from.teamnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&teamnumber_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:gameTick.ShipGameWaitLint)
}

void ShipGameWaitLint::SharedCtor() {
  ::memset(&teamnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&teamnumber_)) + sizeof(right_));
}

ShipGameWaitLint::~ShipGameWaitLint() {
  // @@protoc_insertion_point(destructor:gameTick.ShipGameWaitLint)
  SharedDtor();
}

void ShipGameWaitLint::SharedDtor() {
}

void ShipGameWaitLint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShipGameWaitLint& ShipGameWaitLint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShipGameWaitLint_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void ShipGameWaitLint::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.ShipGameWaitLint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&teamnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&teamnumber_)) + sizeof(right_));
  _internal_metadata_.Clear();
}

const char* ShipGameWaitLint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 teamNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          teamnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShipGameWaitLint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.ShipGameWaitLint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 teamNumber = 1;
  if (this->teamnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_teamnumber(), target);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_left(), target);
  }

  // int32 right = 3;
  if (this->right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.ShipGameWaitLint)
  return target;
}

size_t ShipGameWaitLint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.ShipGameWaitLint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 teamNumber = 1;
  if (this->teamnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_teamnumber());
  }

  // int32 left = 2;
  if (this->left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left());
  }

  // int32 right = 3;
  if (this->right() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShipGameWaitLint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.ShipGameWaitLint)
  GOOGLE_DCHECK_NE(&from, this);
  const ShipGameWaitLint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShipGameWaitLint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.ShipGameWaitLint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.ShipGameWaitLint)
    MergeFrom(*source);
  }
}

void ShipGameWaitLint::MergeFrom(const ShipGameWaitLint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.ShipGameWaitLint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.teamnumber() != 0) {
    _internal_set_teamnumber(from._internal_teamnumber());
  }
  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.right() != 0) {
    _internal_set_right(from._internal_right());
  }
}

void ShipGameWaitLint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.ShipGameWaitLint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipGameWaitLint::CopyFrom(const ShipGameWaitLint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.ShipGameWaitLint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipGameWaitLint::IsInitialized() const {
  return true;
}

void ShipGameWaitLint::InternalSwap(ShipGameWaitLint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(teamnumber_, other->teamnumber_);
  swap(left_, other->left_);
  swap(right_, other->right_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShipGameWaitLint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JumpGameWaitLint::InitAsDefaultInstance() {
}
class JumpGameWaitLint::_Internal {
 public:
};

JumpGameWaitLint::JumpGameWaitLint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.JumpGameWaitLint)
}
JumpGameWaitLint::JumpGameWaitLint(const JumpGameWaitLint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&teamnumber_, &from.teamnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&teamnumber_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:gameTick.JumpGameWaitLint)
}

void JumpGameWaitLint::SharedCtor() {
  ::memset(&teamnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&teamnumber_)) + sizeof(uid_));
}

JumpGameWaitLint::~JumpGameWaitLint() {
  // @@protoc_insertion_point(destructor:gameTick.JumpGameWaitLint)
  SharedDtor();
}

void JumpGameWaitLint::SharedDtor() {
}

void JumpGameWaitLint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JumpGameWaitLint& JumpGameWaitLint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JumpGameWaitLint_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void JumpGameWaitLint::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.JumpGameWaitLint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&teamnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&teamnumber_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* JumpGameWaitLint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 teamNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          teamnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JumpGameWaitLint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.JumpGameWaitLint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 teamNumber = 1;
  if (this->teamnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_teamnumber(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.JumpGameWaitLint)
  return target;
}

size_t JumpGameWaitLint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.JumpGameWaitLint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 teamNumber = 1;
  if (this->teamnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_teamnumber());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JumpGameWaitLint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.JumpGameWaitLint)
  GOOGLE_DCHECK_NE(&from, this);
  const JumpGameWaitLint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JumpGameWaitLint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.JumpGameWaitLint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.JumpGameWaitLint)
    MergeFrom(*source);
  }
}

void JumpGameWaitLint::MergeFrom(const JumpGameWaitLint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.JumpGameWaitLint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.teamnumber() != 0) {
    _internal_set_teamnumber(from._internal_teamnumber());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void JumpGameWaitLint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.JumpGameWaitLint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpGameWaitLint::CopyFrom(const JumpGameWaitLint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.JumpGameWaitLint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpGameWaitLint::IsInitialized() const {
  return true;
}

void JumpGameWaitLint::InternalSwap(JumpGameWaitLint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(teamnumber_, other->teamnumber_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JumpGameWaitLint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGameRank::InitAsDefaultInstance() {
}
class CGameRank::_Internal {
 public:
};

CGameRank::CGameRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.CGameRank)
}
CGameRank::CGameRank(const CGameRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:gameTick.CGameRank)
}

void CGameRank::SharedCtor() {
  gameid_ = 0;
}

CGameRank::~CGameRank() {
  // @@protoc_insertion_point(destructor:gameTick.CGameRank)
  SharedDtor();
}

void CGameRank::SharedDtor() {
}

void CGameRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameRank& CGameRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGameRank_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void CGameRank::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.CGameRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = 0;
  _internal_metadata_.Clear();
}

const char* CGameRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.CGameRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.CGameRank)
  return target;
}

size_t CGameRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.CGameRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.CGameRank)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.CGameRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.CGameRank)
    MergeFrom(*source);
  }
}

void CGameRank::MergeFrom(const CGameRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.CGameRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void CGameRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.CGameRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRank::CopyFrom(const CGameRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.CGameRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRank::IsInitialized() const {
  return true;
}

void CGameRank::InternalSwap(CGameRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameRank::InitAsDefaultInstance() {
}
class SGameRank::_Internal {
 public:
};

SGameRank::SGameRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.SGameRank)
}
SGameRank::SGameRank(const SGameRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      gamerank_(from.gamerank_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:gameTick.SGameRank)
}

void SGameRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGameRank_spaceGame_2eproto.base);
  gameid_ = 0;
}

SGameRank::~SGameRank() {
  // @@protoc_insertion_point(destructor:gameTick.SGameRank)
  SharedDtor();
}

void SGameRank::SharedDtor() {
}

void SGameRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameRank& SGameRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameRank_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void SGameRank::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.SGameRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamerank_.Clear();
  gameid_ = 0;
  _internal_metadata_.Clear();
}

const char* SGameRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gameTick.GameRank gameRank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gamerank(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 gameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.SGameRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gameTick.GameRank gameRank = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gamerank_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gamerank(i), target, stream);
  }

  // int32 gameId = 2;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.SGameRank)
  return target;
}

size_t SGameRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.SGameRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gameTick.GameRank gameRank = 1;
  total_size += 1UL * this->_internal_gamerank_size();
  for (const auto& msg : this->gamerank_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 gameId = 2;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.SGameRank)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.SGameRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.SGameRank)
    MergeFrom(*source);
  }
}

void SGameRank::MergeFrom(const SGameRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.SGameRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamerank_.MergeFrom(from.gamerank_);
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void SGameRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.SGameRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameRank::CopyFrom(const SGameRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.SGameRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameRank::IsInitialized() const {
  return true;
}

void SGameRank::InternalSwap(SGameRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gamerank_.InternalSwap(&other->gamerank_);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameRank::InitAsDefaultInstance() {
}
class GameRank::_Internal {
 public:
};

GameRank::GameRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.GameRank)
}
GameRank::GameRank(const GameRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_teamname().empty()) {
    teamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teamname_);
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:gameTick.GameRank)
}

void GameRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameRank_spaceGame_2eproto.base);
  teamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(score_));
}

GameRank::~GameRank() {
  // @@protoc_insertion_point(destructor:gameTick.GameRank)
  SharedDtor();
}

void GameRank::SharedDtor() {
  teamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameRank& GameRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameRank_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void GameRank::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.GameRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

const char* GameRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string teamName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_teamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameTick.GameRank.teamName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.GameRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // string teamName = 2;
  if (this->teamname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teamname().data(), static_cast<int>(this->_internal_teamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameTick.GameRank.teamName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_teamname(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.GameRank)
  return target;
}

size_t GameRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.GameRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string teamName = 2;
  if (this->teamname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teamname());
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.GameRank)
  GOOGLE_DCHECK_NE(&from, this);
  const GameRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.GameRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.GameRank)
    MergeFrom(*source);
  }
}

void GameRank::MergeFrom(const GameRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.GameRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.teamname().size() > 0) {

    teamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teamname_);
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void GameRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.GameRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRank::CopyFrom(const GameRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.GameRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRank::IsInitialized() const {
  return true;
}

void GameRank::InternalSwap(GameRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  teamname_.Swap(&other->teamname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rank_, other->rank_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SJumpGameShootBullets::InitAsDefaultInstance() {
}
class SJumpGameShootBullets::_Internal {
 public:
};

SJumpGameShootBullets::SJumpGameShootBullets()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.SJumpGameShootBullets)
}
SJumpGameShootBullets::SJumpGameShootBullets(const SJumpGameShootBullets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:gameTick.SJumpGameShootBullets)
}

void SJumpGameShootBullets::SharedCtor() {
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(interval_));
}

SJumpGameShootBullets::~SJumpGameShootBullets() {
  // @@protoc_insertion_point(destructor:gameTick.SJumpGameShootBullets)
  SharedDtor();
}

void SJumpGameShootBullets::SharedDtor() {
}

void SJumpGameShootBullets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SJumpGameShootBullets& SJumpGameShootBullets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SJumpGameShootBullets_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void SJumpGameShootBullets::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.SJumpGameShootBullets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(interval_));
  _internal_metadata_.Clear();
}

const char* SJumpGameShootBullets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SJumpGameShootBullets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.SJumpGameShootBullets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 direction = 1;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_direction(), target);
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // float speed = 4;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  // float interval = 5;
  if (!(this->interval() <= 0 && this->interval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.SJumpGameShootBullets)
  return target;
}

size_t SJumpGameShootBullets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.SJumpGameShootBullets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // float speed = 4;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float interval = 5;
  if (!(this->interval() <= 0 && this->interval() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SJumpGameShootBullets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.SJumpGameShootBullets)
  GOOGLE_DCHECK_NE(&from, this);
  const SJumpGameShootBullets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SJumpGameShootBullets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.SJumpGameShootBullets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.SJumpGameShootBullets)
    MergeFrom(*source);
  }
}

void SJumpGameShootBullets::MergeFrom(const SJumpGameShootBullets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.SJumpGameShootBullets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from.interval() <= 0 && from.interval() >= 0)) {
    _internal_set_interval(from._internal_interval());
  }
}

void SJumpGameShootBullets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.SJumpGameShootBullets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SJumpGameShootBullets::CopyFrom(const SJumpGameShootBullets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.SJumpGameShootBullets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SJumpGameShootBullets::IsInitialized() const {
  return true;
}

void SJumpGameShootBullets::InternalSwap(SJumpGameShootBullets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(direction_, other->direction_);
  swap(height_, other->height_);
  swap(num_, other->num_);
  swap(speed_, other->speed_);
  swap(interval_, other->interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SJumpGameShootBullets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGameAbnormalStop::InitAsDefaultInstance() {
}
class SGameAbnormalStop::_Internal {
 public:
};

SGameAbnormalStop::SGameAbnormalStop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameTick.SGameAbnormalStop)
}
SGameAbnormalStop::SGameAbnormalStop(const SGameAbnormalStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:gameTick.SGameAbnormalStop)
}

void SGameAbnormalStop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGameAbnormalStop_spaceGame_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
}

SGameAbnormalStop::~SGameAbnormalStop() {
  // @@protoc_insertion_point(destructor:gameTick.SGameAbnormalStop)
  SharedDtor();
}

void SGameAbnormalStop::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGameAbnormalStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGameAbnormalStop& SGameAbnormalStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGameAbnormalStop_spaceGame_2eproto.base);
  return *internal_default_instance();
}


void SGameAbnormalStop::Clear() {
// @@protoc_insertion_point(message_clear_start:gameTick.SGameAbnormalStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
  _internal_metadata_.Clear();
}

const char* SGameAbnormalStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameTick.SGameAbnormalStop.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGameAbnormalStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameTick.SGameAbnormalStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gameTick.SGameAbnormalStop.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameTick.SGameAbnormalStop)
  return target;
}

size_t SGameAbnormalStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameTick.SGameAbnormalStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGameAbnormalStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameTick.SGameAbnormalStop)
  GOOGLE_DCHECK_NE(&from, this);
  const SGameAbnormalStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGameAbnormalStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameTick.SGameAbnormalStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameTick.SGameAbnormalStop)
    MergeFrom(*source);
  }
}

void SGameAbnormalStop::MergeFrom(const SGameAbnormalStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameTick.SGameAbnormalStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void SGameAbnormalStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameTick.SGameAbnormalStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGameAbnormalStop::CopyFrom(const SGameAbnormalStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameTick.SGameAbnormalStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGameAbnormalStop::IsInitialized() const {
  return true;
}

void SGameAbnormalStop::InternalSwap(SGameAbnormalStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGameAbnormalStop::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gameTick
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gameTick::CJumpGameWaitLine* Arena::CreateMaybeMessage< ::gameTick::CJumpGameWaitLine >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::CJumpGameWaitLine >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::SJumpGameWaitLine* Arena::CreateMaybeMessage< ::gameTick::SJumpGameWaitLine >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::SJumpGameWaitLine >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::CJumpGameOut* Arena::CreateMaybeMessage< ::gameTick::CJumpGameOut >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::CJumpGameOut >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::SJumpGameOut* Arena::CreateMaybeMessage< ::gameTick::SJumpGameOut >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::SJumpGameOut >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::CGameStatus* Arena::CreateMaybeMessage< ::gameTick::CGameStatus >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::CGameStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::SGameStatus* Arena::CreateMaybeMessage< ::gameTick::SGameStatus >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::SGameStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::ShipGameWaitLint* Arena::CreateMaybeMessage< ::gameTick::ShipGameWaitLint >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::ShipGameWaitLint >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::JumpGameWaitLint* Arena::CreateMaybeMessage< ::gameTick::JumpGameWaitLint >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::JumpGameWaitLint >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::CGameRank* Arena::CreateMaybeMessage< ::gameTick::CGameRank >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::CGameRank >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::SGameRank* Arena::CreateMaybeMessage< ::gameTick::SGameRank >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::SGameRank >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::GameRank* Arena::CreateMaybeMessage< ::gameTick::GameRank >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::GameRank >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::SJumpGameShootBullets* Arena::CreateMaybeMessage< ::gameTick::SJumpGameShootBullets >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::SJumpGameShootBullets >(arena);
}
template<> PROTOBUF_NOINLINE ::gameTick::SGameAbnormalStop* Arena::CreateMaybeMessage< ::gameTick::SGameAbnormalStop >(Arena* arena) {
  return Arena::CreateInternal< ::gameTick::SGameAbnormalStop >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
