// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prepaidEnum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prepaidEnum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prepaidEnum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prepaidEnum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prepaidEnum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prepaidEnum_2eproto;
namespace PrepaidEnum {
class CPrepaidEnum;
class CPrepaidEnumDefaultTypeInternal;
extern CPrepaidEnumDefaultTypeInternal _CPrepaidEnum_default_instance_;
class PrepaidItem;
class PrepaidItemDefaultTypeInternal;
extern PrepaidItemDefaultTypeInternal _PrepaidItem_default_instance_;
class SPrepaidEnum;
class SPrepaidEnumDefaultTypeInternal;
extern SPrepaidEnumDefaultTypeInternal _SPrepaidEnum_default_instance_;
}  // namespace PrepaidEnum
PROTOBUF_NAMESPACE_OPEN
template<> ::PrepaidEnum::CPrepaidEnum* Arena::CreateMaybeMessage<::PrepaidEnum::CPrepaidEnum>(Arena*);
template<> ::PrepaidEnum::PrepaidItem* Arena::CreateMaybeMessage<::PrepaidEnum::PrepaidItem>(Arena*);
template<> ::PrepaidEnum::SPrepaidEnum* Arena::CreateMaybeMessage<::PrepaidEnum::SPrepaidEnum>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PrepaidEnum {

// ===================================================================

class PrepaidItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrepaidEnum.PrepaidItem) */ {
 public:
  PrepaidItem();
  virtual ~PrepaidItem();

  PrepaidItem(const PrepaidItem& from);
  PrepaidItem(PrepaidItem&& from) noexcept
    : PrepaidItem() {
    *this = ::std::move(from);
  }

  inline PrepaidItem& operator=(const PrepaidItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepaidItem& operator=(PrepaidItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepaidItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepaidItem* internal_default_instance() {
    return reinterpret_cast<const PrepaidItem*>(
               &_PrepaidItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrepaidItem& a, PrepaidItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepaidItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepaidItem* New() const final {
    return CreateMaybeMessage<PrepaidItem>(nullptr);
  }

  PrepaidItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepaidItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepaidItem& from);
  void MergeFrom(const PrepaidItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepaidItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrepaidEnum.PrepaidItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prepaidEnum_2eproto);
    return ::descriptor_table_prepaidEnum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductKeyFieldNumber = 3,
    kNumFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // string productKey = 3;
  void clear_productkey();
  const std::string& productkey() const;
  void set_productkey(const std::string& value);
  void set_productkey(std::string&& value);
  void set_productkey(const char* value);
  void set_productkey(const char* value, size_t size);
  std::string* mutable_productkey();
  std::string* release_productkey();
  void set_allocated_productkey(std::string* productkey);
  private:
  const std::string& _internal_productkey() const;
  void _internal_set_productkey(const std::string& value);
  std::string* _internal_mutable_productkey();
  public:

  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 2;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PrepaidEnum.PrepaidItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prepaidEnum_2eproto;
};
// -------------------------------------------------------------------

class SPrepaidEnum :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrepaidEnum.SPrepaidEnum) */ {
 public:
  SPrepaidEnum();
  virtual ~SPrepaidEnum();

  SPrepaidEnum(const SPrepaidEnum& from);
  SPrepaidEnum(SPrepaidEnum&& from) noexcept
    : SPrepaidEnum() {
    *this = ::std::move(from);
  }

  inline SPrepaidEnum& operator=(const SPrepaidEnum& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPrepaidEnum& operator=(SPrepaidEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPrepaidEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPrepaidEnum* internal_default_instance() {
    return reinterpret_cast<const SPrepaidEnum*>(
               &_SPrepaidEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SPrepaidEnum& a, SPrepaidEnum& b) {
    a.Swap(&b);
  }
  inline void Swap(SPrepaidEnum* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPrepaidEnum* New() const final {
    return CreateMaybeMessage<SPrepaidEnum>(nullptr);
  }

  SPrepaidEnum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPrepaidEnum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPrepaidEnum& from);
  void MergeFrom(const SPrepaidEnum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPrepaidEnum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrepaidEnum.SPrepaidEnum";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prepaidEnum_2eproto);
    return ::descriptor_table_prepaidEnum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .PrepaidEnum.PrepaidItem list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::PrepaidEnum::PrepaidItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrepaidEnum::PrepaidItem >*
      mutable_list();
  private:
  const ::PrepaidEnum::PrepaidItem& _internal_list(int index) const;
  ::PrepaidEnum::PrepaidItem* _internal_add_list();
  public:
  const ::PrepaidEnum::PrepaidItem& list(int index) const;
  ::PrepaidEnum::PrepaidItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrepaidEnum::PrepaidItem >&
      list() const;

  // @@protoc_insertion_point(class_scope:PrepaidEnum.SPrepaidEnum)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrepaidEnum::PrepaidItem > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prepaidEnum_2eproto;
};
// -------------------------------------------------------------------

class CPrepaidEnum :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrepaidEnum.CPrepaidEnum) */ {
 public:
  CPrepaidEnum();
  virtual ~CPrepaidEnum();

  CPrepaidEnum(const CPrepaidEnum& from);
  CPrepaidEnum(CPrepaidEnum&& from) noexcept
    : CPrepaidEnum() {
    *this = ::std::move(from);
  }

  inline CPrepaidEnum& operator=(const CPrepaidEnum& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPrepaidEnum& operator=(CPrepaidEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPrepaidEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPrepaidEnum* internal_default_instance() {
    return reinterpret_cast<const CPrepaidEnum*>(
               &_CPrepaidEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CPrepaidEnum& a, CPrepaidEnum& b) {
    a.Swap(&b);
  }
  inline void Swap(CPrepaidEnum* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPrepaidEnum* New() const final {
    return CreateMaybeMessage<CPrepaidEnum>(nullptr);
  }

  CPrepaidEnum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPrepaidEnum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPrepaidEnum& from);
  void MergeFrom(const CPrepaidEnum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPrepaidEnum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrepaidEnum.CPrepaidEnum";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prepaidEnum_2eproto);
    return ::descriptor_table_prepaidEnum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCateFieldNumber = 1,
  };
  // int32 cate = 1;
  void clear_cate();
  ::PROTOBUF_NAMESPACE_ID::int32 cate() const;
  void set_cate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cate() const;
  void _internal_set_cate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PrepaidEnum.CPrepaidEnum)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 cate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prepaidEnum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrepaidItem

// int32 num = 1;
inline void PrepaidItem::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepaidItem::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepaidItem::num() const {
  // @@protoc_insertion_point(field_get:PrepaidEnum.PrepaidItem.num)
  return _internal_num();
}
inline void PrepaidItem::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void PrepaidItem::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PrepaidEnum.PrepaidItem.num)
}

// int32 price = 2;
inline void PrepaidItem::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepaidItem::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepaidItem::price() const {
  // @@protoc_insertion_point(field_get:PrepaidEnum.PrepaidItem.price)
  return _internal_price();
}
inline void PrepaidItem::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void PrepaidItem::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:PrepaidEnum.PrepaidItem.price)
}

// string productKey = 3;
inline void PrepaidItem::clear_productkey() {
  productkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PrepaidItem::productkey() const {
  // @@protoc_insertion_point(field_get:PrepaidEnum.PrepaidItem.productKey)
  return _internal_productkey();
}
inline void PrepaidItem::set_productkey(const std::string& value) {
  _internal_set_productkey(value);
  // @@protoc_insertion_point(field_set:PrepaidEnum.PrepaidItem.productKey)
}
inline std::string* PrepaidItem::mutable_productkey() {
  // @@protoc_insertion_point(field_mutable:PrepaidEnum.PrepaidItem.productKey)
  return _internal_mutable_productkey();
}
inline const std::string& PrepaidItem::_internal_productkey() const {
  return productkey_.GetNoArena();
}
inline void PrepaidItem::_internal_set_productkey(const std::string& value) {
  
  productkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PrepaidItem::set_productkey(std::string&& value) {
  
  productkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PrepaidEnum.PrepaidItem.productKey)
}
inline void PrepaidItem::set_productkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PrepaidEnum.PrepaidItem.productKey)
}
inline void PrepaidItem::set_productkey(const char* value, size_t size) {
  
  productkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PrepaidEnum.PrepaidItem.productKey)
}
inline std::string* PrepaidItem::_internal_mutable_productkey() {
  
  return productkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrepaidItem::release_productkey() {
  // @@protoc_insertion_point(field_release:PrepaidEnum.PrepaidItem.productKey)
  
  return productkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrepaidItem::set_allocated_productkey(std::string* productkey) {
  if (productkey != nullptr) {
    
  } else {
    
  }
  productkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productkey);
  // @@protoc_insertion_point(field_set_allocated:PrepaidEnum.PrepaidItem.productKey)
}

// -------------------------------------------------------------------

// SPrepaidEnum

// repeated .PrepaidEnum.PrepaidItem list = 1;
inline int SPrepaidEnum::_internal_list_size() const {
  return list_.size();
}
inline int SPrepaidEnum::list_size() const {
  return _internal_list_size();
}
inline void SPrepaidEnum::clear_list() {
  list_.Clear();
}
inline ::PrepaidEnum::PrepaidItem* SPrepaidEnum::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:PrepaidEnum.SPrepaidEnum.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrepaidEnum::PrepaidItem >*
SPrepaidEnum::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:PrepaidEnum.SPrepaidEnum.list)
  return &list_;
}
inline const ::PrepaidEnum::PrepaidItem& SPrepaidEnum::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::PrepaidEnum::PrepaidItem& SPrepaidEnum::list(int index) const {
  // @@protoc_insertion_point(field_get:PrepaidEnum.SPrepaidEnum.list)
  return _internal_list(index);
}
inline ::PrepaidEnum::PrepaidItem* SPrepaidEnum::_internal_add_list() {
  return list_.Add();
}
inline ::PrepaidEnum::PrepaidItem* SPrepaidEnum::add_list() {
  // @@protoc_insertion_point(field_add:PrepaidEnum.SPrepaidEnum.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrepaidEnum::PrepaidItem >&
SPrepaidEnum::list() const {
  // @@protoc_insertion_point(field_list:PrepaidEnum.SPrepaidEnum.list)
  return list_;
}

// -------------------------------------------------------------------

// CPrepaidEnum

// int32 cate = 1;
inline void CPrepaidEnum::clear_cate() {
  cate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPrepaidEnum::_internal_cate() const {
  return cate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPrepaidEnum::cate() const {
  // @@protoc_insertion_point(field_get:PrepaidEnum.CPrepaidEnum.cate)
  return _internal_cate();
}
inline void CPrepaidEnum::_internal_set_cate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cate_ = value;
}
inline void CPrepaidEnum::set_cate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cate(value);
  // @@protoc_insertion_point(field_set:PrepaidEnum.CPrepaidEnum.cate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PrepaidEnum

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prepaidEnum_2eproto
