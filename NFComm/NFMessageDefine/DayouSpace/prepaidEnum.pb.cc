// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prepaidEnum.proto

#include "prepaidEnum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_prepaidEnum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepaidItem_prepaidEnum_2eproto;
namespace PrepaidEnum {
class PrepaidItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepaidItem> _instance;
} _PrepaidItem_default_instance_;
class SPrepaidEnumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPrepaidEnum> _instance;
} _SPrepaidEnum_default_instance_;
class CPrepaidEnumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPrepaidEnum> _instance;
} _CPrepaidEnum_default_instance_;
}  // namespace PrepaidEnum
static void InitDefaultsscc_info_CPrepaidEnum_prepaidEnum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PrepaidEnum::_CPrepaidEnum_default_instance_;
    new (ptr) ::PrepaidEnum::CPrepaidEnum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PrepaidEnum::CPrepaidEnum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPrepaidEnum_prepaidEnum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPrepaidEnum_prepaidEnum_2eproto}, {}};

static void InitDefaultsscc_info_PrepaidItem_prepaidEnum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PrepaidEnum::_PrepaidItem_default_instance_;
    new (ptr) ::PrepaidEnum::PrepaidItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PrepaidEnum::PrepaidItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepaidItem_prepaidEnum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepaidItem_prepaidEnum_2eproto}, {}};

static void InitDefaultsscc_info_SPrepaidEnum_prepaidEnum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PrepaidEnum::_SPrepaidEnum_default_instance_;
    new (ptr) ::PrepaidEnum::SPrepaidEnum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PrepaidEnum::SPrepaidEnum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SPrepaidEnum_prepaidEnum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SPrepaidEnum_prepaidEnum_2eproto}, {
      &scc_info_PrepaidItem_prepaidEnum_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prepaidEnum_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_prepaidEnum_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prepaidEnum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_prepaidEnum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PrepaidEnum::PrepaidItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PrepaidEnum::PrepaidItem, num_),
  PROTOBUF_FIELD_OFFSET(::PrepaidEnum::PrepaidItem, price_),
  PROTOBUF_FIELD_OFFSET(::PrepaidEnum::PrepaidItem, productkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PrepaidEnum::SPrepaidEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PrepaidEnum::SPrepaidEnum, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PrepaidEnum::CPrepaidEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PrepaidEnum::CPrepaidEnum, cate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PrepaidEnum::PrepaidItem)},
  { 8, -1, sizeof(::PrepaidEnum::SPrepaidEnum)},
  { 14, -1, sizeof(::PrepaidEnum::CPrepaidEnum)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PrepaidEnum::_PrepaidItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PrepaidEnum::_SPrepaidEnum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PrepaidEnum::_CPrepaidEnum_default_instance_),
};

const char descriptor_table_protodef_prepaidEnum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021prepaidEnum.proto\022\013PrepaidEnum\"=\n\013Prep"
  "aidItem\022\013\n\003num\030\001 \001(\005\022\r\n\005price\030\002 \001(\005\022\022\n\np"
  "roductKey\030\003 \001(\t\"6\n\014SPrepaidEnum\022&\n\004list\030"
  "\001 \003(\0132\030.PrepaidEnum.PrepaidItem\"\034\n\014CPrep"
  "aidEnum\022\014\n\004cate\030\001 \001(\005B\'\n\030com.dayou.space"
  ".protobufB\013PrepaidEnumb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_prepaidEnum_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_prepaidEnum_2eproto_sccs[3] = {
  &scc_info_CPrepaidEnum_prepaidEnum_2eproto.base,
  &scc_info_PrepaidItem_prepaidEnum_2eproto.base,
  &scc_info_SPrepaidEnum_prepaidEnum_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prepaidEnum_2eproto_once;
static bool descriptor_table_prepaidEnum_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prepaidEnum_2eproto = {
  &descriptor_table_prepaidEnum_2eproto_initialized, descriptor_table_protodef_prepaidEnum_2eproto, "prepaidEnum.proto", 230,
  &descriptor_table_prepaidEnum_2eproto_once, descriptor_table_prepaidEnum_2eproto_sccs, descriptor_table_prepaidEnum_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_prepaidEnum_2eproto::offsets,
  file_level_metadata_prepaidEnum_2eproto, 3, file_level_enum_descriptors_prepaidEnum_2eproto, file_level_service_descriptors_prepaidEnum_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_prepaidEnum_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_prepaidEnum_2eproto), true);
namespace PrepaidEnum {

// ===================================================================

void PrepaidItem::InitAsDefaultInstance() {
}
class PrepaidItem::_Internal {
 public:
};

PrepaidItem::PrepaidItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrepaidEnum.PrepaidItem)
}
PrepaidItem::PrepaidItem(const PrepaidItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_productkey().empty()) {
    productkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productkey_);
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&num_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:PrepaidEnum.PrepaidItem)
}

void PrepaidItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepaidItem_prepaidEnum_2eproto.base);
  productkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&num_)) + sizeof(price_));
}

PrepaidItem::~PrepaidItem() {
  // @@protoc_insertion_point(destructor:PrepaidEnum.PrepaidItem)
  SharedDtor();
}

void PrepaidItem::SharedDtor() {
  productkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepaidItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepaidItem& PrepaidItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepaidItem_prepaidEnum_2eproto.base);
  return *internal_default_instance();
}


void PrepaidItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PrepaidEnum.PrepaidItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  productkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&num_)) + sizeof(price_));
  _internal_metadata_.Clear();
}

const char* PrepaidItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string productKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_productkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PrepaidEnum.PrepaidItem.productKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepaidItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrepaidEnum.PrepaidItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // int32 price = 2;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_price(), target);
  }

  // string productKey = 3;
  if (this->productkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productkey().data(), static_cast<int>(this->_internal_productkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PrepaidEnum.PrepaidItem.productKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_productkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrepaidEnum.PrepaidItem)
  return target;
}

size_t PrepaidItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrepaidEnum.PrepaidItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string productKey = 3;
  if (this->productkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productkey());
  }

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepaidItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrepaidEnum.PrepaidItem)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepaidItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepaidItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrepaidEnum.PrepaidItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrepaidEnum.PrepaidItem)
    MergeFrom(*source);
  }
}

void PrepaidItem::MergeFrom(const PrepaidItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrepaidEnum.PrepaidItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.productkey().size() > 0) {

    productkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productkey_);
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void PrepaidItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrepaidEnum.PrepaidItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepaidItem::CopyFrom(const PrepaidItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrepaidEnum.PrepaidItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepaidItem::IsInitialized() const {
  return true;
}

void PrepaidItem::InternalSwap(PrepaidItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  productkey_.Swap(&other->productkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_, other->num_);
  swap(price_, other->price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepaidItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPrepaidEnum::InitAsDefaultInstance() {
}
class SPrepaidEnum::_Internal {
 public:
};

SPrepaidEnum::SPrepaidEnum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrepaidEnum.SPrepaidEnum)
}
SPrepaidEnum::SPrepaidEnum(const SPrepaidEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PrepaidEnum.SPrepaidEnum)
}

void SPrepaidEnum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SPrepaidEnum_prepaidEnum_2eproto.base);
}

SPrepaidEnum::~SPrepaidEnum() {
  // @@protoc_insertion_point(destructor:PrepaidEnum.SPrepaidEnum)
  SharedDtor();
}

void SPrepaidEnum::SharedDtor() {
}

void SPrepaidEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPrepaidEnum& SPrepaidEnum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPrepaidEnum_prepaidEnum_2eproto.base);
  return *internal_default_instance();
}


void SPrepaidEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:PrepaidEnum.SPrepaidEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SPrepaidEnum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PrepaidEnum.PrepaidItem list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPrepaidEnum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrepaidEnum.SPrepaidEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PrepaidEnum.PrepaidItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrepaidEnum.SPrepaidEnum)
  return target;
}

size_t SPrepaidEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrepaidEnum.SPrepaidEnum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PrepaidEnum.PrepaidItem list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPrepaidEnum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrepaidEnum.SPrepaidEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const SPrepaidEnum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPrepaidEnum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrepaidEnum.SPrepaidEnum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrepaidEnum.SPrepaidEnum)
    MergeFrom(*source);
  }
}

void SPrepaidEnum::MergeFrom(const SPrepaidEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrepaidEnum.SPrepaidEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SPrepaidEnum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrepaidEnum.SPrepaidEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPrepaidEnum::CopyFrom(const SPrepaidEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrepaidEnum.SPrepaidEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPrepaidEnum::IsInitialized() const {
  return true;
}

void SPrepaidEnum::InternalSwap(SPrepaidEnum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPrepaidEnum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPrepaidEnum::InitAsDefaultInstance() {
}
class CPrepaidEnum::_Internal {
 public:
};

CPrepaidEnum::CPrepaidEnum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrepaidEnum.CPrepaidEnum)
}
CPrepaidEnum::CPrepaidEnum(const CPrepaidEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cate_ = from.cate_;
  // @@protoc_insertion_point(copy_constructor:PrepaidEnum.CPrepaidEnum)
}

void CPrepaidEnum::SharedCtor() {
  cate_ = 0;
}

CPrepaidEnum::~CPrepaidEnum() {
  // @@protoc_insertion_point(destructor:PrepaidEnum.CPrepaidEnum)
  SharedDtor();
}

void CPrepaidEnum::SharedDtor() {
}

void CPrepaidEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPrepaidEnum& CPrepaidEnum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPrepaidEnum_prepaidEnum_2eproto.base);
  return *internal_default_instance();
}


void CPrepaidEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:PrepaidEnum.CPrepaidEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cate_ = 0;
  _internal_metadata_.Clear();
}

const char* CPrepaidEnum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPrepaidEnum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrepaidEnum.CPrepaidEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cate = 1;
  if (this->cate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrepaidEnum.CPrepaidEnum)
  return target;
}

size_t CPrepaidEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrepaidEnum.CPrepaidEnum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cate = 1;
  if (this->cate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPrepaidEnum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrepaidEnum.CPrepaidEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const CPrepaidEnum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPrepaidEnum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrepaidEnum.CPrepaidEnum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrepaidEnum.CPrepaidEnum)
    MergeFrom(*source);
  }
}

void CPrepaidEnum::MergeFrom(const CPrepaidEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrepaidEnum.CPrepaidEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cate() != 0) {
    _internal_set_cate(from._internal_cate());
  }
}

void CPrepaidEnum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrepaidEnum.CPrepaidEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPrepaidEnum::CopyFrom(const CPrepaidEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrepaidEnum.CPrepaidEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPrepaidEnum::IsInitialized() const {
  return true;
}

void CPrepaidEnum::InternalSwap(CPrepaidEnum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cate_, other->cate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPrepaidEnum::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PrepaidEnum
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PrepaidEnum::PrepaidItem* Arena::CreateMaybeMessage< ::PrepaidEnum::PrepaidItem >(Arena* arena) {
  return Arena::CreateInternal< ::PrepaidEnum::PrepaidItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PrepaidEnum::SPrepaidEnum* Arena::CreateMaybeMessage< ::PrepaidEnum::SPrepaidEnum >(Arena* arena) {
  return Arena::CreateInternal< ::PrepaidEnum::SPrepaidEnum >(arena);
}
template<> PROTOBUF_NOINLINE ::PrepaidEnum::CPrepaidEnum* Arena::CreateMaybeMessage< ::PrepaidEnum::CPrepaidEnum >(Arena* arena) {
  return Arena::CreateInternal< ::PrepaidEnum::CPrepaidEnum >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
