// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: changeAvatarColor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_changeAvatarColor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_changeAvatarColor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "avatar.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_changeAvatarColor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_changeAvatarColor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_changeAvatarColor_2eproto;
namespace changeAvatarColor {
class CAvatarList;
class CAvatarListDefaultTypeInternal;
extern CAvatarListDefaultTypeInternal _CAvatarList_default_instance_;
class CNewUserSelectAvatar;
class CNewUserSelectAvatarDefaultTypeInternal;
extern CNewUserSelectAvatarDefaultTypeInternal _CNewUserSelectAvatar_default_instance_;
class CUpdateAvatar;
class CUpdateAvatarDefaultTypeInternal;
extern CUpdateAvatarDefaultTypeInternal _CUpdateAvatar_default_instance_;
class CUpdateYuanshenAvatar;
class CUpdateYuanshenAvatarDefaultTypeInternal;
extern CUpdateYuanshenAvatarDefaultTypeInternal _CUpdateYuanshenAvatar_default_instance_;
class SAvatarList;
class SAvatarListDefaultTypeInternal;
extern SAvatarListDefaultTypeInternal _SAvatarList_default_instance_;
class SChangeAvatarColor;
class SChangeAvatarColorDefaultTypeInternal;
extern SChangeAvatarColorDefaultTypeInternal _SChangeAvatarColor_default_instance_;
class SNewUserSelectAvatar;
class SNewUserSelectAvatarDefaultTypeInternal;
extern SNewUserSelectAvatarDefaultTypeInternal _SNewUserSelectAvatar_default_instance_;
class SUpdateAvatar;
class SUpdateAvatarDefaultTypeInternal;
extern SUpdateAvatarDefaultTypeInternal _SUpdateAvatar_default_instance_;
class SUpdateYuanshenAvatar;
class SUpdateYuanshenAvatarDefaultTypeInternal;
extern SUpdateYuanshenAvatarDefaultTypeInternal _SUpdateYuanshenAvatar_default_instance_;
}  // namespace changeAvatarColor
PROTOBUF_NAMESPACE_OPEN
template<> ::changeAvatarColor::CAvatarList* Arena::CreateMaybeMessage<::changeAvatarColor::CAvatarList>(Arena*);
template<> ::changeAvatarColor::CNewUserSelectAvatar* Arena::CreateMaybeMessage<::changeAvatarColor::CNewUserSelectAvatar>(Arena*);
template<> ::changeAvatarColor::CUpdateAvatar* Arena::CreateMaybeMessage<::changeAvatarColor::CUpdateAvatar>(Arena*);
template<> ::changeAvatarColor::CUpdateYuanshenAvatar* Arena::CreateMaybeMessage<::changeAvatarColor::CUpdateYuanshenAvatar>(Arena*);
template<> ::changeAvatarColor::SAvatarList* Arena::CreateMaybeMessage<::changeAvatarColor::SAvatarList>(Arena*);
template<> ::changeAvatarColor::SChangeAvatarColor* Arena::CreateMaybeMessage<::changeAvatarColor::SChangeAvatarColor>(Arena*);
template<> ::changeAvatarColor::SNewUserSelectAvatar* Arena::CreateMaybeMessage<::changeAvatarColor::SNewUserSelectAvatar>(Arena*);
template<> ::changeAvatarColor::SUpdateAvatar* Arena::CreateMaybeMessage<::changeAvatarColor::SUpdateAvatar>(Arena*);
template<> ::changeAvatarColor::SUpdateYuanshenAvatar* Arena::CreateMaybeMessage<::changeAvatarColor::SUpdateYuanshenAvatar>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace changeAvatarColor {

// ===================================================================

class SChangeAvatarColor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:changeAvatarColor.SChangeAvatarColor) */ {
 public:
  SChangeAvatarColor();
  virtual ~SChangeAvatarColor();

  SChangeAvatarColor(const SChangeAvatarColor& from);
  SChangeAvatarColor(SChangeAvatarColor&& from) noexcept
    : SChangeAvatarColor() {
    *this = ::std::move(from);
  }

  inline SChangeAvatarColor& operator=(const SChangeAvatarColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChangeAvatarColor& operator=(SChangeAvatarColor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChangeAvatarColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChangeAvatarColor* internal_default_instance() {
    return reinterpret_cast<const SChangeAvatarColor*>(
               &_SChangeAvatarColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SChangeAvatarColor& a, SChangeAvatarColor& b) {
    a.Swap(&b);
  }
  inline void Swap(SChangeAvatarColor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChangeAvatarColor* New() const final {
    return CreateMaybeMessage<SChangeAvatarColor>(nullptr);
  }

  SChangeAvatarColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChangeAvatarColor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChangeAvatarColor& from);
  void MergeFrom(const SChangeAvatarColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChangeAvatarColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "changeAvatarColor.SChangeAvatarColor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_changeAvatarColor_2eproto);
    return ::descriptor_table_changeAvatarColor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // .avatarPackage.BAvatar avatar = 1;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const ::avatarPackage::BAvatar& avatar() const;
  ::avatarPackage::BAvatar* release_avatar();
  ::avatarPackage::BAvatar* mutable_avatar();
  void set_allocated_avatar(::avatarPackage::BAvatar* avatar);
  private:
  const ::avatarPackage::BAvatar& _internal_avatar() const;
  ::avatarPackage::BAvatar* _internal_mutable_avatar();
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:changeAvatarColor.SChangeAvatarColor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::avatarPackage::BAvatar* avatar_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_changeAvatarColor_2eproto;
};
// -------------------------------------------------------------------

class CUpdateAvatar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:changeAvatarColor.CUpdateAvatar) */ {
 public:
  CUpdateAvatar();
  virtual ~CUpdateAvatar();

  CUpdateAvatar(const CUpdateAvatar& from);
  CUpdateAvatar(CUpdateAvatar&& from) noexcept
    : CUpdateAvatar() {
    *this = ::std::move(from);
  }

  inline CUpdateAvatar& operator=(const CUpdateAvatar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUpdateAvatar& operator=(CUpdateAvatar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUpdateAvatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUpdateAvatar* internal_default_instance() {
    return reinterpret_cast<const CUpdateAvatar*>(
               &_CUpdateAvatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CUpdateAvatar& a, CUpdateAvatar& b) {
    a.Swap(&b);
  }
  inline void Swap(CUpdateAvatar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUpdateAvatar* New() const final {
    return CreateMaybeMessage<CUpdateAvatar>(nullptr);
  }

  CUpdateAvatar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUpdateAvatar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUpdateAvatar& from);
  void MergeFrom(const CUpdateAvatar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUpdateAvatar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "changeAvatarColor.CUpdateAvatar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_changeAvatarColor_2eproto);
    return ::descriptor_table_changeAvatarColor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarColorFieldNumber = 2,
    kAvatarIdFieldNumber = 1,
    kAvatarKeyFieldNumber = 3,
  };
  // string avatarColor = 2;
  void clear_avatarcolor();
  const std::string& avatarcolor() const;
  void set_avatarcolor(const std::string& value);
  void set_avatarcolor(std::string&& value);
  void set_avatarcolor(const char* value);
  void set_avatarcolor(const char* value, size_t size);
  std::string* mutable_avatarcolor();
  std::string* release_avatarcolor();
  void set_allocated_avatarcolor(std::string* avatarcolor);
  private:
  const std::string& _internal_avatarcolor() const;
  void _internal_set_avatarcolor(const std::string& value);
  std::string* _internal_mutable_avatarcolor();
  public:

  // int32 avatarId = 1;
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarKey = 3;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:changeAvatarColor.CUpdateAvatar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarcolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_changeAvatarColor_2eproto;
};
// -------------------------------------------------------------------

class SUpdateAvatar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:changeAvatarColor.SUpdateAvatar) */ {
 public:
  SUpdateAvatar();
  virtual ~SUpdateAvatar();

  SUpdateAvatar(const SUpdateAvatar& from);
  SUpdateAvatar(SUpdateAvatar&& from) noexcept
    : SUpdateAvatar() {
    *this = ::std::move(from);
  }

  inline SUpdateAvatar& operator=(const SUpdateAvatar& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUpdateAvatar& operator=(SUpdateAvatar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUpdateAvatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUpdateAvatar* internal_default_instance() {
    return reinterpret_cast<const SUpdateAvatar*>(
               &_SUpdateAvatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SUpdateAvatar& a, SUpdateAvatar& b) {
    a.Swap(&b);
  }
  inline void Swap(SUpdateAvatar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUpdateAvatar* New() const final {
    return CreateMaybeMessage<SUpdateAvatar>(nullptr);
  }

  SUpdateAvatar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUpdateAvatar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUpdateAvatar& from);
  void MergeFrom(const SUpdateAvatar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUpdateAvatar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "changeAvatarColor.SUpdateAvatar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_changeAvatarColor_2eproto);
    return ::descriptor_table_changeAvatarColor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarColorFieldNumber = 2,
    kAvatarIdFieldNumber = 1,
    kAvatarKeyFieldNumber = 3,
    kUidFieldNumber = 4,
  };
  // string avatarColor = 2;
  void clear_avatarcolor();
  const std::string& avatarcolor() const;
  void set_avatarcolor(const std::string& value);
  void set_avatarcolor(std::string&& value);
  void set_avatarcolor(const char* value);
  void set_avatarcolor(const char* value, size_t size);
  std::string* mutable_avatarcolor();
  std::string* release_avatarcolor();
  void set_allocated_avatarcolor(std::string* avatarcolor);
  private:
  const std::string& _internal_avatarcolor() const;
  void _internal_set_avatarcolor(const std::string& value);
  std::string* _internal_mutable_avatarcolor();
  public:

  // int32 avatarId = 1;
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarKey = 3;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 4;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:changeAvatarColor.SUpdateAvatar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarcolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_changeAvatarColor_2eproto;
};
// -------------------------------------------------------------------

class CAvatarList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:changeAvatarColor.CAvatarList) */ {
 public:
  CAvatarList();
  virtual ~CAvatarList();

  CAvatarList(const CAvatarList& from);
  CAvatarList(CAvatarList&& from) noexcept
    : CAvatarList() {
    *this = ::std::move(from);
  }

  inline CAvatarList& operator=(const CAvatarList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAvatarList& operator=(CAvatarList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAvatarList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAvatarList* internal_default_instance() {
    return reinterpret_cast<const CAvatarList*>(
               &_CAvatarList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CAvatarList& a, CAvatarList& b) {
    a.Swap(&b);
  }
  inline void Swap(CAvatarList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAvatarList* New() const final {
    return CreateMaybeMessage<CAvatarList>(nullptr);
  }

  CAvatarList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAvatarList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAvatarList& from);
  void MergeFrom(const CAvatarList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAvatarList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "changeAvatarColor.CAvatarList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_changeAvatarColor_2eproto);
    return ::descriptor_table_changeAvatarColor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // int32 resource = 1;
  void clear_resource();
  ::PROTOBUF_NAMESPACE_ID::int32 resource() const;
  void set_resource(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resource() const;
  void _internal_set_resource(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:changeAvatarColor.CAvatarList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_changeAvatarColor_2eproto;
};
// -------------------------------------------------------------------

class SAvatarList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:changeAvatarColor.SAvatarList) */ {
 public:
  SAvatarList();
  virtual ~SAvatarList();

  SAvatarList(const SAvatarList& from);
  SAvatarList(SAvatarList&& from) noexcept
    : SAvatarList() {
    *this = ::std::move(from);
  }

  inline SAvatarList& operator=(const SAvatarList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAvatarList& operator=(SAvatarList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAvatarList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAvatarList* internal_default_instance() {
    return reinterpret_cast<const SAvatarList*>(
               &_SAvatarList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SAvatarList& a, SAvatarList& b) {
    a.Swap(&b);
  }
  inline void Swap(SAvatarList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAvatarList* New() const final {
    return CreateMaybeMessage<SAvatarList>(nullptr);
  }

  SAvatarList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAvatarList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAvatarList& from);
  void MergeFrom(const SAvatarList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAvatarList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "changeAvatarColor.SAvatarList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_changeAvatarColor_2eproto);
    return ::descriptor_table_changeAvatarColor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarListFieldNumber = 1,
  };
  // repeated .avatarPackage.BAvatar avatarList = 1;
  int avatarlist_size() const;
  private:
  int _internal_avatarlist_size() const;
  public:
  void clear_avatarlist();
  ::avatarPackage::BAvatar* mutable_avatarlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::BAvatar >*
      mutable_avatarlist();
  private:
  const ::avatarPackage::BAvatar& _internal_avatarlist(int index) const;
  ::avatarPackage::BAvatar* _internal_add_avatarlist();
  public:
  const ::avatarPackage::BAvatar& avatarlist(int index) const;
  ::avatarPackage::BAvatar* add_avatarlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::BAvatar >&
      avatarlist() const;

  // @@protoc_insertion_point(class_scope:changeAvatarColor.SAvatarList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::BAvatar > avatarlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_changeAvatarColor_2eproto;
};
// -------------------------------------------------------------------

class CUpdateYuanshenAvatar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:changeAvatarColor.CUpdateYuanshenAvatar) */ {
 public:
  CUpdateYuanshenAvatar();
  virtual ~CUpdateYuanshenAvatar();

  CUpdateYuanshenAvatar(const CUpdateYuanshenAvatar& from);
  CUpdateYuanshenAvatar(CUpdateYuanshenAvatar&& from) noexcept
    : CUpdateYuanshenAvatar() {
    *this = ::std::move(from);
  }

  inline CUpdateYuanshenAvatar& operator=(const CUpdateYuanshenAvatar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUpdateYuanshenAvatar& operator=(CUpdateYuanshenAvatar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUpdateYuanshenAvatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUpdateYuanshenAvatar* internal_default_instance() {
    return reinterpret_cast<const CUpdateYuanshenAvatar*>(
               &_CUpdateYuanshenAvatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CUpdateYuanshenAvatar& a, CUpdateYuanshenAvatar& b) {
    a.Swap(&b);
  }
  inline void Swap(CUpdateYuanshenAvatar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUpdateYuanshenAvatar* New() const final {
    return CreateMaybeMessage<CUpdateYuanshenAvatar>(nullptr);
  }

  CUpdateYuanshenAvatar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUpdateYuanshenAvatar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUpdateYuanshenAvatar& from);
  void MergeFrom(const CUpdateYuanshenAvatar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUpdateYuanshenAvatar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "changeAvatarColor.CUpdateYuanshenAvatar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_changeAvatarColor_2eproto);
    return ::descriptor_table_changeAvatarColor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarKeyFieldNumber = 1,
  };
  // int32 avatarKey = 1;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:changeAvatarColor.CUpdateYuanshenAvatar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_changeAvatarColor_2eproto;
};
// -------------------------------------------------------------------

class SUpdateYuanshenAvatar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:changeAvatarColor.SUpdateYuanshenAvatar) */ {
 public:
  SUpdateYuanshenAvatar();
  virtual ~SUpdateYuanshenAvatar();

  SUpdateYuanshenAvatar(const SUpdateYuanshenAvatar& from);
  SUpdateYuanshenAvatar(SUpdateYuanshenAvatar&& from) noexcept
    : SUpdateYuanshenAvatar() {
    *this = ::std::move(from);
  }

  inline SUpdateYuanshenAvatar& operator=(const SUpdateYuanshenAvatar& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUpdateYuanshenAvatar& operator=(SUpdateYuanshenAvatar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUpdateYuanshenAvatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUpdateYuanshenAvatar* internal_default_instance() {
    return reinterpret_cast<const SUpdateYuanshenAvatar*>(
               &_SUpdateYuanshenAvatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SUpdateYuanshenAvatar& a, SUpdateYuanshenAvatar& b) {
    a.Swap(&b);
  }
  inline void Swap(SUpdateYuanshenAvatar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUpdateYuanshenAvatar* New() const final {
    return CreateMaybeMessage<SUpdateYuanshenAvatar>(nullptr);
  }

  SUpdateYuanshenAvatar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUpdateYuanshenAvatar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUpdateYuanshenAvatar& from);
  void MergeFrom(const SUpdateYuanshenAvatar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUpdateYuanshenAvatar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "changeAvatarColor.SUpdateYuanshenAvatar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_changeAvatarColor_2eproto);
    return ::descriptor_table_changeAvatarColor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarKeyFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // int32 avatarKey = 1;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:changeAvatarColor.SUpdateYuanshenAvatar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_changeAvatarColor_2eproto;
};
// -------------------------------------------------------------------

class CNewUserSelectAvatar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:changeAvatarColor.CNewUserSelectAvatar) */ {
 public:
  CNewUserSelectAvatar();
  virtual ~CNewUserSelectAvatar();

  CNewUserSelectAvatar(const CNewUserSelectAvatar& from);
  CNewUserSelectAvatar(CNewUserSelectAvatar&& from) noexcept
    : CNewUserSelectAvatar() {
    *this = ::std::move(from);
  }

  inline CNewUserSelectAvatar& operator=(const CNewUserSelectAvatar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNewUserSelectAvatar& operator=(CNewUserSelectAvatar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNewUserSelectAvatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CNewUserSelectAvatar* internal_default_instance() {
    return reinterpret_cast<const CNewUserSelectAvatar*>(
               &_CNewUserSelectAvatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CNewUserSelectAvatar& a, CNewUserSelectAvatar& b) {
    a.Swap(&b);
  }
  inline void Swap(CNewUserSelectAvatar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNewUserSelectAvatar* New() const final {
    return CreateMaybeMessage<CNewUserSelectAvatar>(nullptr);
  }

  CNewUserSelectAvatar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNewUserSelectAvatar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNewUserSelectAvatar& from);
  void MergeFrom(const CNewUserSelectAvatar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNewUserSelectAvatar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "changeAvatarColor.CNewUserSelectAvatar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_changeAvatarColor_2eproto);
    return ::descriptor_table_changeAvatarColor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarIdFieldNumber = 1,
    kAvatarKeyFieldNumber = 2,
    kGoodIdFieldNumber = 3,
  };
  // int32 avatarId = 1;
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatarKey = 2;
  void clear_avatarkey();
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey() const;
  void set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatarkey() const;
  void _internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodId = 3;
  void clear_goodid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodid() const;
  void set_goodid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodid() const;
  void _internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:changeAvatarColor.CNewUserSelectAvatar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarid_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatarkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_changeAvatarColor_2eproto;
};
// -------------------------------------------------------------------

class SNewUserSelectAvatar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:changeAvatarColor.SNewUserSelectAvatar) */ {
 public:
  SNewUserSelectAvatar();
  virtual ~SNewUserSelectAvatar();

  SNewUserSelectAvatar(const SNewUserSelectAvatar& from);
  SNewUserSelectAvatar(SNewUserSelectAvatar&& from) noexcept
    : SNewUserSelectAvatar() {
    *this = ::std::move(from);
  }

  inline SNewUserSelectAvatar& operator=(const SNewUserSelectAvatar& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNewUserSelectAvatar& operator=(SNewUserSelectAvatar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNewUserSelectAvatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNewUserSelectAvatar* internal_default_instance() {
    return reinterpret_cast<const SNewUserSelectAvatar*>(
               &_SNewUserSelectAvatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SNewUserSelectAvatar& a, SNewUserSelectAvatar& b) {
    a.Swap(&b);
  }
  inline void Swap(SNewUserSelectAvatar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNewUserSelectAvatar* New() const final {
    return CreateMaybeMessage<SNewUserSelectAvatar>(nullptr);
  }

  SNewUserSelectAvatar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNewUserSelectAvatar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNewUserSelectAvatar& from);
  void MergeFrom(const SNewUserSelectAvatar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNewUserSelectAvatar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "changeAvatarColor.SNewUserSelectAvatar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_changeAvatarColor_2eproto);
    return ::descriptor_table_changeAvatarColor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:changeAvatarColor.SNewUserSelectAvatar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_changeAvatarColor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SChangeAvatarColor

// .avatarPackage.BAvatar avatar = 1;
inline bool SChangeAvatarColor::_internal_has_avatar() const {
  return this != internal_default_instance() && avatar_ != nullptr;
}
inline bool SChangeAvatarColor::has_avatar() const {
  return _internal_has_avatar();
}
inline const ::avatarPackage::BAvatar& SChangeAvatarColor::_internal_avatar() const {
  const ::avatarPackage::BAvatar* p = avatar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::avatarPackage::BAvatar*>(
      &::avatarPackage::_BAvatar_default_instance_);
}
inline const ::avatarPackage::BAvatar& SChangeAvatarColor::avatar() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SChangeAvatarColor.avatar)
  return _internal_avatar();
}
inline ::avatarPackage::BAvatar* SChangeAvatarColor::release_avatar() {
  // @@protoc_insertion_point(field_release:changeAvatarColor.SChangeAvatarColor.avatar)
  
  ::avatarPackage::BAvatar* temp = avatar_;
  avatar_ = nullptr;
  return temp;
}
inline ::avatarPackage::BAvatar* SChangeAvatarColor::_internal_mutable_avatar() {
  
  if (avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::avatarPackage::BAvatar>(GetArenaNoVirtual());
    avatar_ = p;
  }
  return avatar_;
}
inline ::avatarPackage::BAvatar* SChangeAvatarColor::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:changeAvatarColor.SChangeAvatarColor.avatar)
  return _internal_mutable_avatar();
}
inline void SChangeAvatarColor::set_allocated_avatar(::avatarPackage::BAvatar* avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_);
  }
  if (avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    
  } else {
    
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:changeAvatarColor.SChangeAvatarColor.avatar)
}

// int32 uid = 2;
inline void SChangeAvatarColor::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangeAvatarColor::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangeAvatarColor::uid() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SChangeAvatarColor.uid)
  return _internal_uid();
}
inline void SChangeAvatarColor::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SChangeAvatarColor::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.SChangeAvatarColor.uid)
}

// -------------------------------------------------------------------

// CUpdateAvatar

// int32 avatarId = 1;
inline void CUpdateAvatar::clear_avatarid() {
  avatarid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUpdateAvatar::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUpdateAvatar::avatarid() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.CUpdateAvatar.avatarId)
  return _internal_avatarid();
}
inline void CUpdateAvatar::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarid_ = value;
}
inline void CUpdateAvatar::set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.CUpdateAvatar.avatarId)
}

// string avatarColor = 2;
inline void CUpdateAvatar::clear_avatarcolor() {
  avatarcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CUpdateAvatar::avatarcolor() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.CUpdateAvatar.avatarColor)
  return _internal_avatarcolor();
}
inline void CUpdateAvatar::set_avatarcolor(const std::string& value) {
  _internal_set_avatarcolor(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.CUpdateAvatar.avatarColor)
}
inline std::string* CUpdateAvatar::mutable_avatarcolor() {
  // @@protoc_insertion_point(field_mutable:changeAvatarColor.CUpdateAvatar.avatarColor)
  return _internal_mutable_avatarcolor();
}
inline const std::string& CUpdateAvatar::_internal_avatarcolor() const {
  return avatarcolor_.GetNoArena();
}
inline void CUpdateAvatar::_internal_set_avatarcolor(const std::string& value) {
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CUpdateAvatar::set_avatarcolor(std::string&& value) {
  
  avatarcolor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:changeAvatarColor.CUpdateAvatar.avatarColor)
}
inline void CUpdateAvatar::set_avatarcolor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:changeAvatarColor.CUpdateAvatar.avatarColor)
}
inline void CUpdateAvatar::set_avatarcolor(const char* value, size_t size) {
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:changeAvatarColor.CUpdateAvatar.avatarColor)
}
inline std::string* CUpdateAvatar::_internal_mutable_avatarcolor() {
  
  return avatarcolor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CUpdateAvatar::release_avatarcolor() {
  // @@protoc_insertion_point(field_release:changeAvatarColor.CUpdateAvatar.avatarColor)
  
  return avatarcolor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CUpdateAvatar::set_allocated_avatarcolor(std::string* avatarcolor) {
  if (avatarcolor != nullptr) {
    
  } else {
    
  }
  avatarcolor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatarcolor);
  // @@protoc_insertion_point(field_set_allocated:changeAvatarColor.CUpdateAvatar.avatarColor)
}

// int32 avatarKey = 3;
inline void CUpdateAvatar::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUpdateAvatar::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUpdateAvatar::avatarkey() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.CUpdateAvatar.avatarKey)
  return _internal_avatarkey();
}
inline void CUpdateAvatar::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void CUpdateAvatar::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.CUpdateAvatar.avatarKey)
}

// -------------------------------------------------------------------

// SUpdateAvatar

// int32 avatarId = 1;
inline void SUpdateAvatar::clear_avatarid() {
  avatarid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateAvatar::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateAvatar::avatarid() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SUpdateAvatar.avatarId)
  return _internal_avatarid();
}
inline void SUpdateAvatar::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarid_ = value;
}
inline void SUpdateAvatar::set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.SUpdateAvatar.avatarId)
}

// string avatarColor = 2;
inline void SUpdateAvatar::clear_avatarcolor() {
  avatarcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SUpdateAvatar::avatarcolor() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SUpdateAvatar.avatarColor)
  return _internal_avatarcolor();
}
inline void SUpdateAvatar::set_avatarcolor(const std::string& value) {
  _internal_set_avatarcolor(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.SUpdateAvatar.avatarColor)
}
inline std::string* SUpdateAvatar::mutable_avatarcolor() {
  // @@protoc_insertion_point(field_mutable:changeAvatarColor.SUpdateAvatar.avatarColor)
  return _internal_mutable_avatarcolor();
}
inline const std::string& SUpdateAvatar::_internal_avatarcolor() const {
  return avatarcolor_.GetNoArena();
}
inline void SUpdateAvatar::_internal_set_avatarcolor(const std::string& value) {
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SUpdateAvatar::set_avatarcolor(std::string&& value) {
  
  avatarcolor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:changeAvatarColor.SUpdateAvatar.avatarColor)
}
inline void SUpdateAvatar::set_avatarcolor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:changeAvatarColor.SUpdateAvatar.avatarColor)
}
inline void SUpdateAvatar::set_avatarcolor(const char* value, size_t size) {
  
  avatarcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:changeAvatarColor.SUpdateAvatar.avatarColor)
}
inline std::string* SUpdateAvatar::_internal_mutable_avatarcolor() {
  
  return avatarcolor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SUpdateAvatar::release_avatarcolor() {
  // @@protoc_insertion_point(field_release:changeAvatarColor.SUpdateAvatar.avatarColor)
  
  return avatarcolor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SUpdateAvatar::set_allocated_avatarcolor(std::string* avatarcolor) {
  if (avatarcolor != nullptr) {
    
  } else {
    
  }
  avatarcolor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatarcolor);
  // @@protoc_insertion_point(field_set_allocated:changeAvatarColor.SUpdateAvatar.avatarColor)
}

// int32 avatarKey = 3;
inline void SUpdateAvatar::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateAvatar::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateAvatar::avatarkey() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SUpdateAvatar.avatarKey)
  return _internal_avatarkey();
}
inline void SUpdateAvatar::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void SUpdateAvatar::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.SUpdateAvatar.avatarKey)
}

// int32 uid = 4;
inline void SUpdateAvatar::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateAvatar::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateAvatar::uid() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SUpdateAvatar.uid)
  return _internal_uid();
}
inline void SUpdateAvatar::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SUpdateAvatar::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.SUpdateAvatar.uid)
}

// -------------------------------------------------------------------

// CAvatarList

// int32 resource = 1;
inline void CAvatarList::clear_resource() {
  resource_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAvatarList::_internal_resource() const {
  return resource_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAvatarList::resource() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.CAvatarList.resource)
  return _internal_resource();
}
inline void CAvatarList::_internal_set_resource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resource_ = value;
}
inline void CAvatarList::set_resource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.CAvatarList.resource)
}

// -------------------------------------------------------------------

// SAvatarList

// repeated .avatarPackage.BAvatar avatarList = 1;
inline int SAvatarList::_internal_avatarlist_size() const {
  return avatarlist_.size();
}
inline int SAvatarList::avatarlist_size() const {
  return _internal_avatarlist_size();
}
inline ::avatarPackage::BAvatar* SAvatarList::mutable_avatarlist(int index) {
  // @@protoc_insertion_point(field_mutable:changeAvatarColor.SAvatarList.avatarList)
  return avatarlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::BAvatar >*
SAvatarList::mutable_avatarlist() {
  // @@protoc_insertion_point(field_mutable_list:changeAvatarColor.SAvatarList.avatarList)
  return &avatarlist_;
}
inline const ::avatarPackage::BAvatar& SAvatarList::_internal_avatarlist(int index) const {
  return avatarlist_.Get(index);
}
inline const ::avatarPackage::BAvatar& SAvatarList::avatarlist(int index) const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SAvatarList.avatarList)
  return _internal_avatarlist(index);
}
inline ::avatarPackage::BAvatar* SAvatarList::_internal_add_avatarlist() {
  return avatarlist_.Add();
}
inline ::avatarPackage::BAvatar* SAvatarList::add_avatarlist() {
  // @@protoc_insertion_point(field_add:changeAvatarColor.SAvatarList.avatarList)
  return _internal_add_avatarlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::avatarPackage::BAvatar >&
SAvatarList::avatarlist() const {
  // @@protoc_insertion_point(field_list:changeAvatarColor.SAvatarList.avatarList)
  return avatarlist_;
}

// -------------------------------------------------------------------

// CUpdateYuanshenAvatar

// int32 avatarKey = 1;
inline void CUpdateYuanshenAvatar::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUpdateYuanshenAvatar::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUpdateYuanshenAvatar::avatarkey() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.CUpdateYuanshenAvatar.avatarKey)
  return _internal_avatarkey();
}
inline void CUpdateYuanshenAvatar::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void CUpdateYuanshenAvatar::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.CUpdateYuanshenAvatar.avatarKey)
}

// -------------------------------------------------------------------

// SUpdateYuanshenAvatar

// int32 avatarKey = 1;
inline void SUpdateYuanshenAvatar::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateYuanshenAvatar::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateYuanshenAvatar::avatarkey() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SUpdateYuanshenAvatar.avatarKey)
  return _internal_avatarkey();
}
inline void SUpdateYuanshenAvatar::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void SUpdateYuanshenAvatar::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.SUpdateYuanshenAvatar.avatarKey)
}

// int32 uid = 2;
inline void SUpdateYuanshenAvatar::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateYuanshenAvatar::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUpdateYuanshenAvatar::uid() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SUpdateYuanshenAvatar.uid)
  return _internal_uid();
}
inline void SUpdateYuanshenAvatar::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SUpdateYuanshenAvatar::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.SUpdateYuanshenAvatar.uid)
}

// -------------------------------------------------------------------

// CNewUserSelectAvatar

// int32 avatarId = 1;
inline void CNewUserSelectAvatar::clear_avatarid() {
  avatarid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserSelectAvatar::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserSelectAvatar::avatarid() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.CNewUserSelectAvatar.avatarId)
  return _internal_avatarid();
}
inline void CNewUserSelectAvatar::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarid_ = value;
}
inline void CNewUserSelectAvatar::set_avatarid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.CNewUserSelectAvatar.avatarId)
}

// int32 avatarKey = 2;
inline void CNewUserSelectAvatar::clear_avatarkey() {
  avatarkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserSelectAvatar::_internal_avatarkey() const {
  return avatarkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserSelectAvatar::avatarkey() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.CNewUserSelectAvatar.avatarKey)
  return _internal_avatarkey();
}
inline void CNewUserSelectAvatar::_internal_set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatarkey_ = value;
}
inline void CNewUserSelectAvatar::set_avatarkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatarkey(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.CNewUserSelectAvatar.avatarKey)
}

// int32 goodId = 3;
inline void CNewUserSelectAvatar::clear_goodid() {
  goodid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserSelectAvatar::_internal_goodid() const {
  return goodid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNewUserSelectAvatar::goodid() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.CNewUserSelectAvatar.goodId)
  return _internal_goodid();
}
inline void CNewUserSelectAvatar::_internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodid_ = value;
}
inline void CNewUserSelectAvatar::set_goodid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodid(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.CNewUserSelectAvatar.goodId)
}

// -------------------------------------------------------------------

// SNewUserSelectAvatar

// int32 state = 1;
inline void SNewUserSelectAvatar::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserSelectAvatar::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNewUserSelectAvatar::state() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SNewUserSelectAvatar.state)
  return _internal_state();
}
inline void SNewUserSelectAvatar::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SNewUserSelectAvatar::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.SNewUserSelectAvatar.state)
}

// string msg = 2;
inline void SNewUserSelectAvatar::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNewUserSelectAvatar::msg() const {
  // @@protoc_insertion_point(field_get:changeAvatarColor.SNewUserSelectAvatar.msg)
  return _internal_msg();
}
inline void SNewUserSelectAvatar::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:changeAvatarColor.SNewUserSelectAvatar.msg)
}
inline std::string* SNewUserSelectAvatar::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:changeAvatarColor.SNewUserSelectAvatar.msg)
  return _internal_mutable_msg();
}
inline const std::string& SNewUserSelectAvatar::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SNewUserSelectAvatar::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNewUserSelectAvatar::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:changeAvatarColor.SNewUserSelectAvatar.msg)
}
inline void SNewUserSelectAvatar::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:changeAvatarColor.SNewUserSelectAvatar.msg)
}
inline void SNewUserSelectAvatar::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:changeAvatarColor.SNewUserSelectAvatar.msg)
}
inline std::string* SNewUserSelectAvatar::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNewUserSelectAvatar::release_msg() {
  // @@protoc_insertion_point(field_release:changeAvatarColor.SNewUserSelectAvatar.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNewUserSelectAvatar::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:changeAvatarColor.SNewUserSelectAvatar.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace changeAvatarColor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_changeAvatarColor_2eproto
