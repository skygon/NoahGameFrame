// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userTitle.proto

#include "userTitle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_userTitle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserTitle_userTitle_2eproto;
namespace userTitle {
class CUserTitleListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CUserTitleList> _instance;
} _CUserTitleList_default_instance_;
class SUserTitleListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SUserTitleList> _instance;
} _SUserTitleList_default_instance_;
class UserTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserTitle> _instance;
} _UserTitle_default_instance_;
class CEquipUserTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CEquipUserTitle> _instance;
} _CEquipUserTitle_default_instance_;
class SEquipUserTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SEquipUserTitle> _instance;
} _SEquipUserTitle_default_instance_;
}  // namespace userTitle
static void InitDefaultsscc_info_CEquipUserTitle_userTitle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userTitle::_CEquipUserTitle_default_instance_;
    new (ptr) ::userTitle::CEquipUserTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userTitle::CEquipUserTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CEquipUserTitle_userTitle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CEquipUserTitle_userTitle_2eproto}, {}};

static void InitDefaultsscc_info_CUserTitleList_userTitle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userTitle::_CUserTitleList_default_instance_;
    new (ptr) ::userTitle::CUserTitleList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userTitle::CUserTitleList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CUserTitleList_userTitle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CUserTitleList_userTitle_2eproto}, {}};

static void InitDefaultsscc_info_SEquipUserTitle_userTitle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userTitle::_SEquipUserTitle_default_instance_;
    new (ptr) ::userTitle::SEquipUserTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userTitle::SEquipUserTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SEquipUserTitle_userTitle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SEquipUserTitle_userTitle_2eproto}, {}};

static void InitDefaultsscc_info_SUserTitleList_userTitle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userTitle::_SUserTitleList_default_instance_;
    new (ptr) ::userTitle::SUserTitleList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userTitle::SUserTitleList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SUserTitleList_userTitle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SUserTitleList_userTitle_2eproto}, {
      &scc_info_UserTitle_userTitle_2eproto.base,}};

static void InitDefaultsscc_info_UserTitle_userTitle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userTitle::_UserTitle_default_instance_;
    new (ptr) ::userTitle::UserTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userTitle::UserTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserTitle_userTitle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserTitle_userTitle_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userTitle_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_userTitle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_userTitle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userTitle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userTitle::CUserTitleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userTitle::CUserTitleList, userid_),
  PROTOBUF_FIELD_OFFSET(::userTitle::CUserTitleList, page_),
  PROTOBUF_FIELD_OFFSET(::userTitle::CUserTitleList, pagesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userTitle::SUserTitleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userTitle::SUserTitleList, usertitlelist_),
  PROTOBUF_FIELD_OFFSET(::userTitle::SUserTitleList, total_),
  PROTOBUF_FIELD_OFFSET(::userTitle::SUserTitleList, currenttitle_),
  PROTOBUF_FIELD_OFFSET(::userTitle::SUserTitleList, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userTitle::UserTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userTitle::UserTitle, id_),
  PROTOBUF_FIELD_OFFSET(::userTitle::UserTitle, title_),
  PROTOBUF_FIELD_OFFSET(::userTitle::UserTitle, desc_),
  PROTOBUF_FIELD_OFFSET(::userTitle::UserTitle, titlepic_),
  PROTOBUF_FIELD_OFFSET(::userTitle::UserTitle, title_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userTitle::CEquipUserTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userTitle::CEquipUserTitle, titleid_),
  PROTOBUF_FIELD_OFFSET(::userTitle::CEquipUserTitle, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::userTitle::SEquipUserTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userTitle::SEquipUserTitle, code_),
  PROTOBUF_FIELD_OFFSET(::userTitle::SEquipUserTitle, title_),
  PROTOBUF_FIELD_OFFSET(::userTitle::SEquipUserTitle, uid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::userTitle::CUserTitleList)},
  { 8, -1, sizeof(::userTitle::SUserTitleList)},
  { 17, -1, sizeof(::userTitle::UserTitle)},
  { 27, -1, sizeof(::userTitle::CEquipUserTitle)},
  { 34, -1, sizeof(::userTitle::SEquipUserTitle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userTitle::_CUserTitleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userTitle::_SUserTitleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userTitle::_UserTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userTitle::_CEquipUserTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userTitle::_SEquipUserTitle_default_instance_),
};

const char descriptor_table_protodef_userTitle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017userTitle.proto\022\tuserTitle\"@\n\016CUserTit"
  "leList\022\016\n\006userId\030\001 \001(\005\022\014\n\004page\030\002 \001(\005\022\020\n\010"
  "pageSize\030\003 \001(\005\"r\n\016SUserTitleList\022+\n\ruser"
  "TitleList\030\001 \003(\0132\024.userTitle.UserTitle\022\r\n"
  "\005total\030\002 \001(\005\022\024\n\014currentTitle\030\003 \001(\t\022\016\n\006us"
  "erId\030\004 \001(\005\"\\\n\tUserTitle\022\n\n\002id\030\001 \001(\005\022\r\n\005t"
  "itle\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\020\n\010titlePic\030\004 \001"
  "(\t\022\024\n\014title_status\030\005 \001(\005\"2\n\017CEquipUserTi"
  "tle\022\017\n\007titleId\030\001 \001(\005\022\016\n\006action\030\002 \001(\005\";\n\017"
  "SEquipUserTitle\022\014\n\004code\030\001 \001(\005\022\r\n\005title\030\002"
  " \001(\t\022\013\n\003uid\030\003 \001(\005B.\n\030com.dayou.space.pro"
  "tobufB\tUserTitleZ\007./pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userTitle_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userTitle_2eproto_sccs[5] = {
  &scc_info_CEquipUserTitle_userTitle_2eproto.base,
  &scc_info_CUserTitleList_userTitle_2eproto.base,
  &scc_info_SEquipUserTitle_userTitle_2eproto.base,
  &scc_info_SUserTitleList_userTitle_2eproto.base,
  &scc_info_UserTitle_userTitle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userTitle_2eproto_once;
static bool descriptor_table_userTitle_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userTitle_2eproto = {
  &descriptor_table_userTitle_2eproto_initialized, descriptor_table_protodef_userTitle_2eproto, "userTitle.proto", 473,
  &descriptor_table_userTitle_2eproto_once, descriptor_table_userTitle_2eproto_sccs, descriptor_table_userTitle_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_userTitle_2eproto::offsets,
  file_level_metadata_userTitle_2eproto, 5, file_level_enum_descriptors_userTitle_2eproto, file_level_service_descriptors_userTitle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userTitle_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userTitle_2eproto), true);
namespace userTitle {

// ===================================================================

void CUserTitleList::InitAsDefaultInstance() {
}
class CUserTitleList::_Internal {
 public:
};

CUserTitleList::CUserTitleList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userTitle.CUserTitleList)
}
CUserTitleList::CUserTitleList(const CUserTitleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagesize_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(pagesize_));
  // @@protoc_insertion_point(copy_constructor:userTitle.CUserTitleList)
}

void CUserTitleList::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagesize_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(pagesize_));
}

CUserTitleList::~CUserTitleList() {
  // @@protoc_insertion_point(destructor:userTitle.CUserTitleList)
  SharedDtor();
}

void CUserTitleList::SharedDtor() {
}

void CUserTitleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserTitleList& CUserTitleList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CUserTitleList_userTitle_2eproto.base);
  return *internal_default_instance();
}


void CUserTitleList::Clear() {
// @@protoc_insertion_point(message_clear_start:userTitle.CUserTitleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagesize_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(pagesize_));
  _internal_metadata_.Clear();
}

const char* CUserTitleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pagesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserTitleList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userTitle.CUserTitleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // int32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page(), target);
  }

  // int32 pageSize = 3;
  if (this->pagesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pagesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userTitle.CUserTitleList)
  return target;
}

size_t CUserTitleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userTitle.CUserTitleList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  // int32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  // int32 pageSize = 3;
  if (this->pagesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagesize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserTitleList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userTitle.CUserTitleList)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserTitleList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserTitleList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userTitle.CUserTitleList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userTitle.CUserTitleList)
    MergeFrom(*source);
  }
}

void CUserTitleList::MergeFrom(const CUserTitleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userTitle.CUserTitleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.pagesize() != 0) {
    _internal_set_pagesize(from._internal_pagesize());
  }
}

void CUserTitleList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userTitle.CUserTitleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserTitleList::CopyFrom(const CUserTitleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userTitle.CUserTitleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserTitleList::IsInitialized() const {
  return true;
}

void CUserTitleList::InternalSwap(CUserTitleList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(page_, other->page_);
  swap(pagesize_, other->pagesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserTitleList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SUserTitleList::InitAsDefaultInstance() {
}
class SUserTitleList::_Internal {
 public:
};

SUserTitleList::SUserTitleList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userTitle.SUserTitleList)
}
SUserTitleList::SUserTitleList(const SUserTitleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      usertitlelist_(from.usertitlelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currenttitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currenttitle().empty()) {
    currenttitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currenttitle_);
  }
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&total_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:userTitle.SUserTitleList)
}

void SUserTitleList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SUserTitleList_userTitle_2eproto.base);
  currenttitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&total_)) + sizeof(userid_));
}

SUserTitleList::~SUserTitleList() {
  // @@protoc_insertion_point(destructor:userTitle.SUserTitleList)
  SharedDtor();
}

void SUserTitleList::SharedDtor() {
  currenttitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SUserTitleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SUserTitleList& SUserTitleList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SUserTitleList_userTitle_2eproto.base);
  return *internal_default_instance();
}


void SUserTitleList::Clear() {
// @@protoc_insertion_point(message_clear_start:userTitle.SUserTitleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usertitlelist_.Clear();
  currenttitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&total_)) + sizeof(userid_));
  _internal_metadata_.Clear();
}

const char* SUserTitleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .userTitle.UserTitle userTitleList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usertitlelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currentTitle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_currenttitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userTitle.SUserTitleList.currentTitle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 userId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUserTitleList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userTitle.SUserTitleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .userTitle.UserTitle userTitleList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usertitlelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_usertitlelist(i), target, stream);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  // string currentTitle = 3;
  if (this->currenttitle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currenttitle().data(), static_cast<int>(this->_internal_currenttitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userTitle.SUserTitleList.currentTitle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currenttitle(), target);
  }

  // int32 userId = 4;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userTitle.SUserTitleList)
  return target;
}

size_t SUserTitleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userTitle.SUserTitleList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userTitle.UserTitle userTitleList = 1;
  total_size += 1UL * this->_internal_usertitlelist_size();
  for (const auto& msg : this->usertitlelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string currentTitle = 3;
  if (this->currenttitle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currenttitle());
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 userId = 4;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUserTitleList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userTitle.SUserTitleList)
  GOOGLE_DCHECK_NE(&from, this);
  const SUserTitleList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SUserTitleList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userTitle.SUserTitleList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userTitle.SUserTitleList)
    MergeFrom(*source);
  }
}

void SUserTitleList::MergeFrom(const SUserTitleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userTitle.SUserTitleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usertitlelist_.MergeFrom(from.usertitlelist_);
  if (from.currenttitle().size() > 0) {

    currenttitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currenttitle_);
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void SUserTitleList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userTitle.SUserTitleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUserTitleList::CopyFrom(const SUserTitleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userTitle.SUserTitleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUserTitleList::IsInitialized() const {
  return true;
}

void SUserTitleList::InternalSwap(SUserTitleList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usertitlelist_.InternalSwap(&other->usertitlelist_);
  currenttitle_.Swap(&other->currenttitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SUserTitleList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserTitle::InitAsDefaultInstance() {
}
class UserTitle::_Internal {
 public:
};

UserTitle::UserTitle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userTitle.UserTitle)
}
UserTitle::UserTitle(const UserTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  titlepic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_titlepic().empty()) {
    titlepic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.titlepic_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&title_status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(title_status_));
  // @@protoc_insertion_point(copy_constructor:userTitle.UserTitle)
}

void UserTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserTitle_userTitle_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  titlepic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&title_status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(title_status_));
}

UserTitle::~UserTitle() {
  // @@protoc_insertion_point(destructor:userTitle.UserTitle)
  SharedDtor();
}

void UserTitle::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  titlepic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserTitle& UserTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserTitle_userTitle_2eproto.base);
  return *internal_default_instance();
}


void UserTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:userTitle.UserTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  titlepic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&title_status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(title_status_));
  _internal_metadata_.Clear();
}

const char* UserTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userTitle.UserTitle.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userTitle.UserTitle.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string titlePic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_titlepic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userTitle.UserTitle.titlePic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 title_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          title_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userTitle.UserTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userTitle.UserTitle.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userTitle.UserTitle.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // string titlePic = 4;
  if (this->titlepic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_titlepic().data(), static_cast<int>(this->_internal_titlepic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userTitle.UserTitle.titlePic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_titlepic(), target);
  }

  // int32 title_status = 5;
  if (this->title_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_title_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userTitle.UserTitle)
  return target;
}

size_t UserTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userTitle.UserTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string titlePic = 4;
  if (this->titlepic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_titlepic());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 title_status = 5;
  if (this->title_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_title_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userTitle.UserTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userTitle.UserTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userTitle.UserTitle)
    MergeFrom(*source);
  }
}

void UserTitle::MergeFrom(const UserTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userTitle.UserTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.titlepic().size() > 0) {

    titlepic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.titlepic_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.title_status() != 0) {
    _internal_set_title_status(from._internal_title_status());
  }
}

void UserTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userTitle.UserTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTitle::CopyFrom(const UserTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userTitle.UserTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTitle::IsInitialized() const {
  return true;
}

void UserTitle::InternalSwap(UserTitle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  titlepic_.Swap(&other->titlepic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(title_status_, other->title_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CEquipUserTitle::InitAsDefaultInstance() {
}
class CEquipUserTitle::_Internal {
 public:
};

CEquipUserTitle::CEquipUserTitle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userTitle.CEquipUserTitle)
}
CEquipUserTitle::CEquipUserTitle(const CEquipUserTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&titleid_, &from.titleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&titleid_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:userTitle.CEquipUserTitle)
}

void CEquipUserTitle::SharedCtor() {
  ::memset(&titleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&titleid_)) + sizeof(action_));
}

CEquipUserTitle::~CEquipUserTitle() {
  // @@protoc_insertion_point(destructor:userTitle.CEquipUserTitle)
  SharedDtor();
}

void CEquipUserTitle::SharedDtor() {
}

void CEquipUserTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEquipUserTitle& CEquipUserTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CEquipUserTitle_userTitle_2eproto.base);
  return *internal_default_instance();
}


void CEquipUserTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:userTitle.CEquipUserTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&titleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&titleid_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

const char* CEquipUserTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 titleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          titleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEquipUserTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userTitle.CEquipUserTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 titleId = 1;
  if (this->titleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_titleid(), target);
  }

  // int32 action = 2;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userTitle.CEquipUserTitle)
  return target;
}

size_t CEquipUserTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userTitle.CEquipUserTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 titleId = 1;
  if (this->titleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_titleid());
  }

  // int32 action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEquipUserTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userTitle.CEquipUserTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CEquipUserTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEquipUserTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userTitle.CEquipUserTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userTitle.CEquipUserTitle)
    MergeFrom(*source);
  }
}

void CEquipUserTitle::MergeFrom(const CEquipUserTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userTitle.CEquipUserTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.titleid() != 0) {
    _internal_set_titleid(from._internal_titleid());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void CEquipUserTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userTitle.CEquipUserTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEquipUserTitle::CopyFrom(const CEquipUserTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userTitle.CEquipUserTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEquipUserTitle::IsInitialized() const {
  return true;
}

void CEquipUserTitle::InternalSwap(CEquipUserTitle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(titleid_, other->titleid_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEquipUserTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SEquipUserTitle::InitAsDefaultInstance() {
}
class SEquipUserTitle::_Internal {
 public:
};

SEquipUserTitle::SEquipUserTitle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userTitle.SEquipUserTitle)
}
SEquipUserTitle::SEquipUserTitle(const SEquipUserTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&code_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:userTitle.SEquipUserTitle)
}

void SEquipUserTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SEquipUserTitle_userTitle_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(uid_));
}

SEquipUserTitle::~SEquipUserTitle() {
  // @@protoc_insertion_point(destructor:userTitle.SEquipUserTitle)
  SharedDtor();
}

void SEquipUserTitle::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SEquipUserTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SEquipUserTitle& SEquipUserTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SEquipUserTitle_userTitle_2eproto.base);
  return *internal_default_instance();
}


void SEquipUserTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:userTitle.SEquipUserTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SEquipUserTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userTitle.SEquipUserTitle.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SEquipUserTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userTitle.SEquipUserTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "userTitle.SEquipUserTitle.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userTitle.SEquipUserTitle)
  return target;
}

size_t SEquipUserTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userTitle.SEquipUserTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SEquipUserTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userTitle.SEquipUserTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const SEquipUserTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SEquipUserTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userTitle.SEquipUserTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userTitle.SEquipUserTitle)
    MergeFrom(*source);
  }
}

void SEquipUserTitle::MergeFrom(const SEquipUserTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userTitle.SEquipUserTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SEquipUserTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userTitle.SEquipUserTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SEquipUserTitle::CopyFrom(const SEquipUserTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userTitle.SEquipUserTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEquipUserTitle::IsInitialized() const {
  return true;
}

void SEquipUserTitle::InternalSwap(SEquipUserTitle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SEquipUserTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userTitle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userTitle::CUserTitleList* Arena::CreateMaybeMessage< ::userTitle::CUserTitleList >(Arena* arena) {
  return Arena::CreateInternal< ::userTitle::CUserTitleList >(arena);
}
template<> PROTOBUF_NOINLINE ::userTitle::SUserTitleList* Arena::CreateMaybeMessage< ::userTitle::SUserTitleList >(Arena* arena) {
  return Arena::CreateInternal< ::userTitle::SUserTitleList >(arena);
}
template<> PROTOBUF_NOINLINE ::userTitle::UserTitle* Arena::CreateMaybeMessage< ::userTitle::UserTitle >(Arena* arena) {
  return Arena::CreateInternal< ::userTitle::UserTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::userTitle::CEquipUserTitle* Arena::CreateMaybeMessage< ::userTitle::CEquipUserTitle >(Arena* arena) {
  return Arena::CreateInternal< ::userTitle::CEquipUserTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::userTitle::SEquipUserTitle* Arena::CreateMaybeMessage< ::userTitle::SEquipUserTitle >(Arena* arena) {
  return Arena::CreateInternal< ::userTitle::SEquipUserTitle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
