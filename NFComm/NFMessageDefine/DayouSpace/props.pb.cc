// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: props.proto

#include "props.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace props {
class CGetPropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetProps> _instance;
} _CGetProps_default_instance_;
class SGetPropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetProps> _instance;
} _SGetProps_default_instance_;
class CConsumePropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CConsumeProps> _instance;
} _CConsumeProps_default_instance_;
class SConsumePropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SConsumeProps> _instance;
} _SConsumeProps_default_instance_;
}  // namespace props
static void InitDefaultsscc_info_CConsumeProps_props_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::props::_CConsumeProps_default_instance_;
    new (ptr) ::props::CConsumeProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::props::CConsumeProps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CConsumeProps_props_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CConsumeProps_props_2eproto}, {}};

static void InitDefaultsscc_info_CGetProps_props_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::props::_CGetProps_default_instance_;
    new (ptr) ::props::CGetProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::props::CGetProps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetProps_props_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetProps_props_2eproto}, {}};

static void InitDefaultsscc_info_SConsumeProps_props_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::props::_SConsumeProps_default_instance_;
    new (ptr) ::props::SConsumeProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::props::SConsumeProps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SConsumeProps_props_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SConsumeProps_props_2eproto}, {}};

static void InitDefaultsscc_info_SGetProps_props_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::props::_SGetProps_default_instance_;
    new (ptr) ::props::SGetProps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::props::SGetProps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGetProps_props_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGetProps_props_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_props_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_props_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_props_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_props_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::props::CGetProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::props::CGetProps, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::props::SGetProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::props::SGetProps, propsid_),
  PROTOBUF_FIELD_OFFSET(::props::SGetProps, propsname_),
  PROTOBUF_FIELD_OFFSET(::props::SGetProps, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::props::CConsumeProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::props::CConsumeProps, propsid_),
  PROTOBUF_FIELD_OFFSET(::props::CConsumeProps, propsname_),
  PROTOBUF_FIELD_OFFSET(::props::CConsumeProps, uidlist_),
  PROTOBUF_FIELD_OFFSET(::props::CConsumeProps, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::props::SConsumeProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::props::SConsumeProps, propsid_),
  PROTOBUF_FIELD_OFFSET(::props::SConsumeProps, uidlist_),
  PROTOBUF_FIELD_OFFSET(::props::SConsumeProps, duration_),
  PROTOBUF_FIELD_OFFSET(::props::SConsumeProps, propsname_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::props::CGetProps)},
  { 6, -1, sizeof(::props::SGetProps)},
  { 14, -1, sizeof(::props::CConsumeProps)},
  { 23, -1, sizeof(::props::SConsumeProps)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::props::_CGetProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::props::_SGetProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::props::_CConsumeProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::props::_SConsumeProps_default_instance_),
};

const char descriptor_table_protodef_props_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013props.proto\022\005props\"\030\n\tCGetProps\022\013\n\003uid"
  "\030\001 \001(\005\"@\n\tSGetProps\022\017\n\007propsID\030\001 \001(\005\022\021\n\t"
  "propsName\030\002 \001(\t\022\017\n\007goodsId\030\003 \001(\005\"U\n\rCCon"
  "sumeProps\022\017\n\007propsID\030\001 \001(\005\022\021\n\tpropsName\030"
  "\002 \001(\t\022\017\n\007uidList\030\003 \003(\005\022\017\n\007goodsID\030\004 \001(\005\""
  "V\n\rSConsumeProps\022\017\n\007propsID\030\001 \001(\005\022\017\n\007uid"
  "List\030\002 \003(\005\022\020\n\010duration\030\003 \001(\005\022\021\n\tpropsNam"
  "e\030\004 \001(\tB!\n\030com.dayou.space.protobufB\005Pro"
  "psb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_props_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_props_2eproto_sccs[4] = {
  &scc_info_CConsumeProps_props_2eproto.base,
  &scc_info_CGetProps_props_2eproto.base,
  &scc_info_SConsumeProps_props_2eproto.base,
  &scc_info_SGetProps_props_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_props_2eproto_once;
static bool descriptor_table_props_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_props_2eproto = {
  &descriptor_table_props_2eproto_initialized, descriptor_table_protodef_props_2eproto, "props.proto", 330,
  &descriptor_table_props_2eproto_once, descriptor_table_props_2eproto_sccs, descriptor_table_props_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_props_2eproto::offsets,
  file_level_metadata_props_2eproto, 4, file_level_enum_descriptors_props_2eproto, file_level_service_descriptors_props_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_props_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_props_2eproto), true);
namespace props {

// ===================================================================

void CGetProps::InitAsDefaultInstance() {
}
class CGetProps::_Internal {
 public:
};

CGetProps::CGetProps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:props.CGetProps)
}
CGetProps::CGetProps(const CGetProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:props.CGetProps)
}

void CGetProps::SharedCtor() {
  uid_ = 0;
}

CGetProps::~CGetProps() {
  // @@protoc_insertion_point(destructor:props.CGetProps)
  SharedDtor();
}

void CGetProps::SharedDtor() {
}

void CGetProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetProps& CGetProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetProps_props_2eproto.base);
  return *internal_default_instance();
}


void CGetProps::Clear() {
// @@protoc_insertion_point(message_clear_start:props.CGetProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CGetProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:props.CGetProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:props.CGetProps)
  return target;
}

size_t CGetProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:props.CGetProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:props.CGetProps)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:props.CGetProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:props.CGetProps)
    MergeFrom(*source);
  }
}

void CGetProps::MergeFrom(const CGetProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:props.CGetProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CGetProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:props.CGetProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetProps::CopyFrom(const CGetProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:props.CGetProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetProps::IsInitialized() const {
  return true;
}

void CGetProps::InternalSwap(CGetProps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetProps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetProps::InitAsDefaultInstance() {
}
class SGetProps::_Internal {
 public:
};

SGetProps::SGetProps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:props.SGetProps)
}
SGetProps::SGetProps(const SGetProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  propsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_propsname().empty()) {
    propsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.propsname_);
  }
  ::memcpy(&propsid_, &from.propsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&propsid_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:props.SGetProps)
}

void SGetProps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SGetProps_props_2eproto.base);
  propsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&propsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(goodsid_));
}

SGetProps::~SGetProps() {
  // @@protoc_insertion_point(destructor:props.SGetProps)
  SharedDtor();
}

void SGetProps::SharedDtor() {
  propsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SGetProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetProps& SGetProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetProps_props_2eproto.base);
  return *internal_default_instance();
}


void SGetProps::Clear() {
// @@protoc_insertion_point(message_clear_start:props.SGetProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  propsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&propsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* SGetProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 propsID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string propsName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_propsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "props.SGetProps.propsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:props.SGetProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 propsID = 1;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propsid(), target);
  }

  // string propsName = 2;
  if (this->propsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_propsname().data(), static_cast<int>(this->_internal_propsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "props.SGetProps.propsName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_propsname(), target);
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:props.SGetProps)
  return target;
}

size_t SGetProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:props.SGetProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string propsName = 2;
  if (this->propsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propsname());
  }

  // int32 propsID = 1;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  // int32 goodsId = 3;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:props.SGetProps)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:props.SGetProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:props.SGetProps)
    MergeFrom(*source);
  }
}

void SGetProps::MergeFrom(const SGetProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:props.SGetProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propsname().size() > 0) {

    propsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.propsname_);
  }
  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void SGetProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:props.SGetProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetProps::CopyFrom(const SGetProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:props.SGetProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetProps::IsInitialized() const {
  return true;
}

void SGetProps::InternalSwap(SGetProps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  propsname_.Swap(&other->propsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(propsid_, other->propsid_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetProps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CConsumeProps::InitAsDefaultInstance() {
}
class CConsumeProps::_Internal {
 public:
};

CConsumeProps::CConsumeProps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:props.CConsumeProps)
}
CConsumeProps::CConsumeProps(const CConsumeProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  propsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_propsname().empty()) {
    propsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.propsname_);
  }
  ::memcpy(&propsid_, &from.propsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&propsid_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:props.CConsumeProps)
}

void CConsumeProps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CConsumeProps_props_2eproto.base);
  propsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&propsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(goodsid_));
}

CConsumeProps::~CConsumeProps() {
  // @@protoc_insertion_point(destructor:props.CConsumeProps)
  SharedDtor();
}

void CConsumeProps::SharedDtor() {
  propsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CConsumeProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CConsumeProps& CConsumeProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CConsumeProps_props_2eproto.base);
  return *internal_default_instance();
}


void CConsumeProps::Clear() {
// @@protoc_insertion_point(message_clear_start:props.CConsumeProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  propsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&propsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* CConsumeProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 propsID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string propsName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_propsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "props.CConsumeProps.propsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 uidList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CConsumeProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:props.CConsumeProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 propsID = 1;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propsid(), target);
  }

  // string propsName = 2;
  if (this->propsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_propsname().data(), static_cast<int>(this->_internal_propsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "props.CConsumeProps.propsName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_propsname(), target);
  }

  // repeated int32 uidList = 3;
  {
    int byte_size = _uidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_uidlist(), byte_size, target);
    }
  }

  // int32 goodsID = 4;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:props.CConsumeProps)
  return target;
}

size_t CConsumeProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:props.CConsumeProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uidList = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string propsName = 2;
  if (this->propsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propsname());
  }

  // int32 propsID = 1;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  // int32 goodsID = 4;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CConsumeProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:props.CConsumeProps)
  GOOGLE_DCHECK_NE(&from, this);
  const CConsumeProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CConsumeProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:props.CConsumeProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:props.CConsumeProps)
    MergeFrom(*source);
  }
}

void CConsumeProps::MergeFrom(const CConsumeProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:props.CConsumeProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
  if (from.propsname().size() > 0) {

    propsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.propsname_);
  }
  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void CConsumeProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:props.CConsumeProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CConsumeProps::CopyFrom(const CConsumeProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:props.CConsumeProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CConsumeProps::IsInitialized() const {
  return true;
}

void CConsumeProps::InternalSwap(CConsumeProps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uidlist_.InternalSwap(&other->uidlist_);
  propsname_.Swap(&other->propsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(propsid_, other->propsid_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CConsumeProps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SConsumeProps::InitAsDefaultInstance() {
}
class SConsumeProps::_Internal {
 public:
};

SConsumeProps::SConsumeProps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:props.SConsumeProps)
}
SConsumeProps::SConsumeProps(const SConsumeProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  propsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_propsname().empty()) {
    propsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.propsname_);
  }
  ::memcpy(&propsid_, &from.propsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&propsid_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:props.SConsumeProps)
}

void SConsumeProps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SConsumeProps_props_2eproto.base);
  propsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&propsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(duration_));
}

SConsumeProps::~SConsumeProps() {
  // @@protoc_insertion_point(destructor:props.SConsumeProps)
  SharedDtor();
}

void SConsumeProps::SharedDtor() {
  propsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SConsumeProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SConsumeProps& SConsumeProps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SConsumeProps_props_2eproto.base);
  return *internal_default_instance();
}


void SConsumeProps::Clear() {
// @@protoc_insertion_point(message_clear_start:props.SConsumeProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  propsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&propsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&propsid_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

const char* SConsumeProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 propsID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 uidList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string propsName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_propsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "props.SConsumeProps.propsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SConsumeProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:props.SConsumeProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 propsID = 1;
  if (this->propsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propsid(), target);
  }

  // repeated int32 uidList = 2;
  {
    int byte_size = _uidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_uidlist(), byte_size, target);
    }
  }

  // int32 duration = 3;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_duration(), target);
  }

  // string propsName = 4;
  if (this->propsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_propsname().data(), static_cast<int>(this->_internal_propsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "props.SConsumeProps.propsName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_propsname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:props.SConsumeProps)
  return target;
}

size_t SConsumeProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:props.SConsumeProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uidList = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string propsName = 4;
  if (this->propsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propsname());
  }

  // int32 propsID = 1;
  if (this->propsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propsid());
  }

  // int32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SConsumeProps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:props.SConsumeProps)
  GOOGLE_DCHECK_NE(&from, this);
  const SConsumeProps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SConsumeProps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:props.SConsumeProps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:props.SConsumeProps)
    MergeFrom(*source);
  }
}

void SConsumeProps::MergeFrom(const SConsumeProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:props.SConsumeProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
  if (from.propsname().size() > 0) {

    propsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.propsname_);
  }
  if (from.propsid() != 0) {
    _internal_set_propsid(from._internal_propsid());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
}

void SConsumeProps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:props.SConsumeProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SConsumeProps::CopyFrom(const SConsumeProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:props.SConsumeProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SConsumeProps::IsInitialized() const {
  return true;
}

void SConsumeProps::InternalSwap(SConsumeProps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uidlist_.InternalSwap(&other->uidlist_);
  propsname_.Swap(&other->propsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(propsid_, other->propsid_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SConsumeProps::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace props
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::props::CGetProps* Arena::CreateMaybeMessage< ::props::CGetProps >(Arena* arena) {
  return Arena::CreateInternal< ::props::CGetProps >(arena);
}
template<> PROTOBUF_NOINLINE ::props::SGetProps* Arena::CreateMaybeMessage< ::props::SGetProps >(Arena* arena) {
  return Arena::CreateInternal< ::props::SGetProps >(arena);
}
template<> PROTOBUF_NOINLINE ::props::CConsumeProps* Arena::CreateMaybeMessage< ::props::CConsumeProps >(Arena* arena) {
  return Arena::CreateInternal< ::props::CConsumeProps >(arena);
}
template<> PROTOBUF_NOINLINE ::props::SConsumeProps* Arena::CreateMaybeMessage< ::props::SConsumeProps >(Arena* arena) {
  return Arena::CreateInternal< ::props::SConsumeProps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
