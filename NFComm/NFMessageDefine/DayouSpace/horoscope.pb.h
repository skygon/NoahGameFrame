// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: horoscope.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_horoscope_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_horoscope_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_horoscope_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_horoscope_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_horoscope_2eproto;
namespace horoscope {
class CHoroscope;
class CHoroscopeDefaultTypeInternal;
extern CHoroscopeDefaultTypeInternal _CHoroscope_default_instance_;
class SHoroscope;
class SHoroscopeDefaultTypeInternal;
extern SHoroscopeDefaultTypeInternal _SHoroscope_default_instance_;
}  // namespace horoscope
PROTOBUF_NAMESPACE_OPEN
template<> ::horoscope::CHoroscope* Arena::CreateMaybeMessage<::horoscope::CHoroscope>(Arena*);
template<> ::horoscope::SHoroscope* Arena::CreateMaybeMessage<::horoscope::SHoroscope>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace horoscope {

// ===================================================================

class CHoroscope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:horoscope.CHoroscope) */ {
 public:
  CHoroscope();
  virtual ~CHoroscope();

  CHoroscope(const CHoroscope& from);
  CHoroscope(CHoroscope&& from) noexcept
    : CHoroscope() {
    *this = ::std::move(from);
  }

  inline CHoroscope& operator=(const CHoroscope& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHoroscope& operator=(CHoroscope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHoroscope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHoroscope* internal_default_instance() {
    return reinterpret_cast<const CHoroscope*>(
               &_CHoroscope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CHoroscope& a, CHoroscope& b) {
    a.Swap(&b);
  }
  inline void Swap(CHoroscope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHoroscope* New() const final {
    return CreateMaybeMessage<CHoroscope>(nullptr);
  }

  CHoroscope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHoroscope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHoroscope& from);
  void MergeFrom(const CHoroscope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHoroscope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "horoscope.CHoroscope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horoscope_2eproto);
    return ::descriptor_table_horoscope_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoroscopeIDFieldNumber = 1,
  };
  // int32 horoscopeID = 1;
  void clear_horoscopeid();
  ::PROTOBUF_NAMESPACE_ID::int32 horoscopeid() const;
  void set_horoscopeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_horoscopeid() const;
  void _internal_set_horoscopeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:horoscope.CHoroscope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 horoscopeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horoscope_2eproto;
};
// -------------------------------------------------------------------

class SHoroscope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:horoscope.SHoroscope) */ {
 public:
  SHoroscope();
  virtual ~SHoroscope();

  SHoroscope(const SHoroscope& from);
  SHoroscope(SHoroscope&& from) noexcept
    : SHoroscope() {
    *this = ::std::move(from);
  }

  inline SHoroscope& operator=(const SHoroscope& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHoroscope& operator=(SHoroscope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHoroscope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHoroscope* internal_default_instance() {
    return reinterpret_cast<const SHoroscope*>(
               &_SHoroscope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SHoroscope& a, SHoroscope& b) {
    a.Swap(&b);
  }
  inline void Swap(SHoroscope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHoroscope* New() const final {
    return CreateMaybeMessage<SHoroscope>(nullptr);
  }

  SHoroscope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHoroscope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHoroscope& from);
  void MergeFrom(const SHoroscope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHoroscope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "horoscope.SHoroscope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horoscope_2eproto);
    return ::descriptor_table_horoscope_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // repeated int32 uid = 1;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uid() const;
  void _internal_add_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uid(int index) const;
  void set_uid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uid();

  // @@protoc_insertion_point(class_scope:horoscope.SHoroscope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uid_;
  mutable std::atomic<int> _uid_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horoscope_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CHoroscope

// int32 horoscopeID = 1;
inline void CHoroscope::clear_horoscopeid() {
  horoscopeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHoroscope::_internal_horoscopeid() const {
  return horoscopeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHoroscope::horoscopeid() const {
  // @@protoc_insertion_point(field_get:horoscope.CHoroscope.horoscopeID)
  return _internal_horoscopeid();
}
inline void CHoroscope::_internal_set_horoscopeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  horoscopeid_ = value;
}
inline void CHoroscope::set_horoscopeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_horoscopeid(value);
  // @@protoc_insertion_point(field_set:horoscope.CHoroscope.horoscopeID)
}

// -------------------------------------------------------------------

// SHoroscope

// repeated int32 uid = 1;
inline int SHoroscope::_internal_uid_size() const {
  return uid_.size();
}
inline int SHoroscope::uid_size() const {
  return _internal_uid_size();
}
inline void SHoroscope::clear_uid() {
  uid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHoroscope::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SHoroscope::uid(int index) const {
  // @@protoc_insertion_point(field_get:horoscope.SHoroscope.uid)
  return _internal_uid(index);
}
inline void SHoroscope::set_uid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:horoscope.SHoroscope.uid)
}
inline void SHoroscope::_internal_add_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uid_.Add(value);
}
inline void SHoroscope::add_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uid(value);
  // @@protoc_insertion_point(field_add:horoscope.SHoroscope.uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SHoroscope::_internal_uid() const {
  return uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SHoroscope::uid() const {
  // @@protoc_insertion_point(field_list:horoscope.SHoroscope.uid)
  return _internal_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SHoroscope::_internal_mutable_uid() {
  return &uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SHoroscope::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:horoscope.SHoroscope.uid)
  return _internal_mutable_uid();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace horoscope

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_horoscope_2eproto
