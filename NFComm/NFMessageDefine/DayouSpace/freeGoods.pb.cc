// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freeGoods.proto

#include "freeGoods.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_freeGoods_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreeGoods_freeGoods_2eproto;
namespace freeGoods {
class FreeGoodsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreeGoods> _instance;
} _FreeGoods_default_instance_;
class CFreeGoodsListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CFreeGoodsList> _instance;
} _CFreeGoodsList_default_instance_;
class SFreeGoodsListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFreeGoodsList> _instance;
} _SFreeGoodsList_default_instance_;
}  // namespace freeGoods
static void InitDefaultsscc_info_CFreeGoodsList_freeGoods_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::freeGoods::_CFreeGoodsList_default_instance_;
    new (ptr) ::freeGoods::CFreeGoodsList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::freeGoods::CFreeGoodsList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CFreeGoodsList_freeGoods_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CFreeGoodsList_freeGoods_2eproto}, {
      &scc_info_FreeGoods_freeGoods_2eproto.base,}};

static void InitDefaultsscc_info_FreeGoods_freeGoods_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::freeGoods::_FreeGoods_default_instance_;
    new (ptr) ::freeGoods::FreeGoods();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::freeGoods::FreeGoods::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreeGoods_freeGoods_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FreeGoods_freeGoods_2eproto}, {}};

static void InitDefaultsscc_info_SFreeGoodsList_freeGoods_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::freeGoods::_SFreeGoodsList_default_instance_;
    new (ptr) ::freeGoods::SFreeGoodsList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::freeGoods::SFreeGoodsList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SFreeGoodsList_freeGoods_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SFreeGoodsList_freeGoods_2eproto}, {
      &scc_info_FreeGoods_freeGoods_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_freeGoods_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_freeGoods_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_freeGoods_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_freeGoods_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::freeGoods::FreeGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::freeGoods::FreeGoods, goodsid_),
  PROTOBUF_FIELD_OFFSET(::freeGoods::FreeGoods, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::freeGoods::CFreeGoodsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::freeGoods::CFreeGoodsList, freegoodslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::freeGoods::SFreeGoodsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::freeGoods::SFreeGoodsList, freegoodslist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::freeGoods::FreeGoods)},
  { 7, -1, sizeof(::freeGoods::CFreeGoodsList)},
  { 13, -1, sizeof(::freeGoods::SFreeGoodsList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::freeGoods::_FreeGoods_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::freeGoods::_CFreeGoodsList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::freeGoods::_SFreeGoodsList_default_instance_),
};

const char descriptor_table_protodef_freeGoods_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017freeGoods.proto\022\tfreeGoods\032\014vector.pro"
  "to\")\n\tFreeGoods\022\017\n\007GoodsID\030\001 \001(\005\022\013\n\003Num\030"
  "\002 \001(\005\"=\n\016CFreeGoodsList\022+\n\rFreeGoodsList"
  "\030\001 \003(\0132\024.freeGoods.FreeGoods\"=\n\016SFreeGoo"
  "dsList\022+\n\rFreeGoodsList\030\001 \003(\0132\024.freeGood"
  "s.FreeGoodsB.\n\030com.dayou.space.protobufB"
  "\016FreeGoodsClassZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_freeGoods_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_freeGoods_2eproto_sccs[3] = {
  &scc_info_CFreeGoodsList_freeGoods_2eproto.base,
  &scc_info_FreeGoods_freeGoods_2eproto.base,
  &scc_info_SFreeGoodsList_freeGoods_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_freeGoods_2eproto_once;
static bool descriptor_table_freeGoods_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_freeGoods_2eproto = {
  &descriptor_table_freeGoods_2eproto_initialized, descriptor_table_protodef_freeGoods_2eproto, "freeGoods.proto", 267,
  &descriptor_table_freeGoods_2eproto_once, descriptor_table_freeGoods_2eproto_sccs, descriptor_table_freeGoods_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_freeGoods_2eproto::offsets,
  file_level_metadata_freeGoods_2eproto, 3, file_level_enum_descriptors_freeGoods_2eproto, file_level_service_descriptors_freeGoods_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_freeGoods_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_freeGoods_2eproto), true);
namespace freeGoods {

// ===================================================================

void FreeGoods::InitAsDefaultInstance() {
}
class FreeGoods::_Internal {
 public:
};

FreeGoods::FreeGoods()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freeGoods.FreeGoods)
}
FreeGoods::FreeGoods(const FreeGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&goodsid_, &from.goodsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&goodsid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:freeGoods.FreeGoods)
}

void FreeGoods::SharedCtor() {
  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(num_));
}

FreeGoods::~FreeGoods() {
  // @@protoc_insertion_point(destructor:freeGoods.FreeGoods)
  SharedDtor();
}

void FreeGoods::SharedDtor() {
}

void FreeGoods::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreeGoods& FreeGoods::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreeGoods_freeGoods_2eproto.base);
  return *internal_default_instance();
}


void FreeGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:freeGoods.FreeGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&goodsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&goodsid_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

const char* FreeGoods::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 GoodsID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreeGoods::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:freeGoods.FreeGoods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 GoodsID = 1;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_goodsid(), target);
  }

  // int32 Num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freeGoods.FreeGoods)
  return target;
}

size_t FreeGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:freeGoods.FreeGoods)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 GoodsID = 1;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 Num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreeGoods::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:freeGoods.FreeGoods)
  GOOGLE_DCHECK_NE(&from, this);
  const FreeGoods* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreeGoods>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:freeGoods.FreeGoods)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:freeGoods.FreeGoods)
    MergeFrom(*source);
  }
}

void FreeGoods::MergeFrom(const FreeGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:freeGoods.FreeGoods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void FreeGoods::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:freeGoods.FreeGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeGoods::CopyFrom(const FreeGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:freeGoods.FreeGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeGoods::IsInitialized() const {
  return true;
}

void FreeGoods::InternalSwap(FreeGoods* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(goodsid_, other->goodsid_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FreeGoods::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CFreeGoodsList::InitAsDefaultInstance() {
}
class CFreeGoodsList::_Internal {
 public:
};

CFreeGoodsList::CFreeGoodsList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freeGoods.CFreeGoodsList)
}
CFreeGoodsList::CFreeGoodsList(const CFreeGoodsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      freegoodslist_(from.freegoodslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:freeGoods.CFreeGoodsList)
}

void CFreeGoodsList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CFreeGoodsList_freeGoods_2eproto.base);
}

CFreeGoodsList::~CFreeGoodsList() {
  // @@protoc_insertion_point(destructor:freeGoods.CFreeGoodsList)
  SharedDtor();
}

void CFreeGoodsList::SharedDtor() {
}

void CFreeGoodsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CFreeGoodsList& CFreeGoodsList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CFreeGoodsList_freeGoods_2eproto.base);
  return *internal_default_instance();
}


void CFreeGoodsList::Clear() {
// @@protoc_insertion_point(message_clear_start:freeGoods.CFreeGoodsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freegoodslist_.Clear();
  _internal_metadata_.Clear();
}

const char* CFreeGoodsList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .freeGoods.FreeGoods FreeGoodsList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_freegoodslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFreeGoodsList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:freeGoods.CFreeGoodsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .freeGoods.FreeGoods FreeGoodsList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_freegoodslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_freegoodslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freeGoods.CFreeGoodsList)
  return target;
}

size_t CFreeGoodsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:freeGoods.CFreeGoodsList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .freeGoods.FreeGoods FreeGoodsList = 1;
  total_size += 1UL * this->_internal_freegoodslist_size();
  for (const auto& msg : this->freegoodslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFreeGoodsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:freeGoods.CFreeGoodsList)
  GOOGLE_DCHECK_NE(&from, this);
  const CFreeGoodsList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFreeGoodsList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:freeGoods.CFreeGoodsList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:freeGoods.CFreeGoodsList)
    MergeFrom(*source);
  }
}

void CFreeGoodsList::MergeFrom(const CFreeGoodsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:freeGoods.CFreeGoodsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freegoodslist_.MergeFrom(from.freegoodslist_);
}

void CFreeGoodsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:freeGoods.CFreeGoodsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFreeGoodsList::CopyFrom(const CFreeGoodsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:freeGoods.CFreeGoodsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFreeGoodsList::IsInitialized() const {
  return true;
}

void CFreeGoodsList::InternalSwap(CFreeGoodsList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  freegoodslist_.InternalSwap(&other->freegoodslist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFreeGoodsList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SFreeGoodsList::InitAsDefaultInstance() {
}
class SFreeGoodsList::_Internal {
 public:
};

SFreeGoodsList::SFreeGoodsList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freeGoods.SFreeGoodsList)
}
SFreeGoodsList::SFreeGoodsList(const SFreeGoodsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      freegoodslist_(from.freegoodslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:freeGoods.SFreeGoodsList)
}

void SFreeGoodsList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SFreeGoodsList_freeGoods_2eproto.base);
}

SFreeGoodsList::~SFreeGoodsList() {
  // @@protoc_insertion_point(destructor:freeGoods.SFreeGoodsList)
  SharedDtor();
}

void SFreeGoodsList::SharedDtor() {
}

void SFreeGoodsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFreeGoodsList& SFreeGoodsList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFreeGoodsList_freeGoods_2eproto.base);
  return *internal_default_instance();
}


void SFreeGoodsList::Clear() {
// @@protoc_insertion_point(message_clear_start:freeGoods.SFreeGoodsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freegoodslist_.Clear();
  _internal_metadata_.Clear();
}

const char* SFreeGoodsList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .freeGoods.FreeGoods FreeGoodsList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_freegoodslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SFreeGoodsList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:freeGoods.SFreeGoodsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .freeGoods.FreeGoods FreeGoodsList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_freegoodslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_freegoodslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freeGoods.SFreeGoodsList)
  return target;
}

size_t SFreeGoodsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:freeGoods.SFreeGoodsList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .freeGoods.FreeGoods FreeGoodsList = 1;
  total_size += 1UL * this->_internal_freegoodslist_size();
  for (const auto& msg : this->freegoodslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFreeGoodsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:freeGoods.SFreeGoodsList)
  GOOGLE_DCHECK_NE(&from, this);
  const SFreeGoodsList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SFreeGoodsList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:freeGoods.SFreeGoodsList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:freeGoods.SFreeGoodsList)
    MergeFrom(*source);
  }
}

void SFreeGoodsList::MergeFrom(const SFreeGoodsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:freeGoods.SFreeGoodsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freegoodslist_.MergeFrom(from.freegoodslist_);
}

void SFreeGoodsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:freeGoods.SFreeGoodsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFreeGoodsList::CopyFrom(const SFreeGoodsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:freeGoods.SFreeGoodsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFreeGoodsList::IsInitialized() const {
  return true;
}

void SFreeGoodsList::InternalSwap(SFreeGoodsList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  freegoodslist_.InternalSwap(&other->freegoodslist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SFreeGoodsList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace freeGoods
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::freeGoods::FreeGoods* Arena::CreateMaybeMessage< ::freeGoods::FreeGoods >(Arena* arena) {
  return Arena::CreateInternal< ::freeGoods::FreeGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::freeGoods::CFreeGoodsList* Arena::CreateMaybeMessage< ::freeGoods::CFreeGoodsList >(Arena* arena) {
  return Arena::CreateInternal< ::freeGoods::CFreeGoodsList >(arena);
}
template<> PROTOBUF_NOINLINE ::freeGoods::SFreeGoodsList* Arena::CreateMaybeMessage< ::freeGoods::SFreeGoodsList >(Arena* arena) {
  return Arena::CreateInternal< ::freeGoods::SFreeGoodsList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
