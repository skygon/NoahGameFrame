// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fansNew.proto

#include "fansNew.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace fansNew {
class CNewFansReadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNewFansRead> _instance;
} _CNewFansRead_default_instance_;
class SNewFansReadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNewFansRead> _instance;
} _SNewFansRead_default_instance_;
class CNewFansNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNewFansNum> _instance;
} _CNewFansNum_default_instance_;
class SNewFansNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNewFansNum> _instance;
} _SNewFansNum_default_instance_;
}  // namespace fansNew
static void InitDefaultsscc_info_CNewFansNum_fansNew_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fansNew::_CNewFansNum_default_instance_;
    new (ptr) ::fansNew::CNewFansNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fansNew::CNewFansNum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNewFansNum_fansNew_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNewFansNum_fansNew_2eproto}, {}};

static void InitDefaultsscc_info_CNewFansRead_fansNew_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fansNew::_CNewFansRead_default_instance_;
    new (ptr) ::fansNew::CNewFansRead();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fansNew::CNewFansRead::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNewFansRead_fansNew_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNewFansRead_fansNew_2eproto}, {}};

static void InitDefaultsscc_info_SNewFansNum_fansNew_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fansNew::_SNewFansNum_default_instance_;
    new (ptr) ::fansNew::SNewFansNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fansNew::SNewFansNum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNewFansNum_fansNew_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNewFansNum_fansNew_2eproto}, {}};

static void InitDefaultsscc_info_SNewFansRead_fansNew_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fansNew::_SNewFansRead_default_instance_;
    new (ptr) ::fansNew::SNewFansRead();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fansNew::SNewFansRead::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNewFansRead_fansNew_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNewFansRead_fansNew_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fansNew_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fansNew_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fansNew_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fansNew_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fansNew::CNewFansRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fansNew::SNewFansRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fansNew::CNewFansNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fansNew::CNewFansNum, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fansNew::SNewFansNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fansNew::SNewFansNum, num_),
  PROTOBUF_FIELD_OFFSET(::fansNew::SNewFansNum, uid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fansNew::CNewFansRead)},
  { 5, -1, sizeof(::fansNew::SNewFansRead)},
  { 10, -1, sizeof(::fansNew::CNewFansNum)},
  { 16, -1, sizeof(::fansNew::SNewFansNum)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fansNew::_CNewFansRead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fansNew::_SNewFansRead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fansNew::_CNewFansNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fansNew::_SNewFansNum_default_instance_),
};

const char descriptor_table_protodef_fansNew_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rfansNew.proto\022\007fansNew\"\016\n\014CNewFansRead"
  "\"\016\n\014SNewFansRead\"\032\n\013CNewFansNum\022\013\n\003uid\030\001"
  " \001(\005\"\'\n\013SNewFansNum\022\013\n\003num\030\001 \001(\005\022\013\n\003uid\030"
  "\002 \001(\005B*\n\030com.dayou.space.protobufB\007FansN"
  "ewZ\005./;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fansNew_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fansNew_2eproto_sccs[4] = {
  &scc_info_CNewFansNum_fansNew_2eproto.base,
  &scc_info_CNewFansRead_fansNew_2eproto.base,
  &scc_info_SNewFansNum_fansNew_2eproto.base,
  &scc_info_SNewFansRead_fansNew_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fansNew_2eproto_once;
static bool descriptor_table_fansNew_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fansNew_2eproto = {
  &descriptor_table_fansNew_2eproto_initialized, descriptor_table_protodef_fansNew_2eproto, "fansNew.proto", 177,
  &descriptor_table_fansNew_2eproto_once, descriptor_table_fansNew_2eproto_sccs, descriptor_table_fansNew_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_fansNew_2eproto::offsets,
  file_level_metadata_fansNew_2eproto, 4, file_level_enum_descriptors_fansNew_2eproto, file_level_service_descriptors_fansNew_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fansNew_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fansNew_2eproto), true);
namespace fansNew {

// ===================================================================

void CNewFansRead::InitAsDefaultInstance() {
}
class CNewFansRead::_Internal {
 public:
};

CNewFansRead::CNewFansRead()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fansNew.CNewFansRead)
}
CNewFansRead::CNewFansRead(const CNewFansRead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fansNew.CNewFansRead)
}

void CNewFansRead::SharedCtor() {
}

CNewFansRead::~CNewFansRead() {
  // @@protoc_insertion_point(destructor:fansNew.CNewFansRead)
  SharedDtor();
}

void CNewFansRead::SharedDtor() {
}

void CNewFansRead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNewFansRead& CNewFansRead::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNewFansRead_fansNew_2eproto.base);
  return *internal_default_instance();
}


void CNewFansRead::Clear() {
// @@protoc_insertion_point(message_clear_start:fansNew.CNewFansRead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CNewFansRead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNewFansRead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fansNew.CNewFansRead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fansNew.CNewFansRead)
  return target;
}

size_t CNewFansRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fansNew.CNewFansRead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNewFansRead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fansNew.CNewFansRead)
  GOOGLE_DCHECK_NE(&from, this);
  const CNewFansRead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNewFansRead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fansNew.CNewFansRead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fansNew.CNewFansRead)
    MergeFrom(*source);
  }
}

void CNewFansRead::MergeFrom(const CNewFansRead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fansNew.CNewFansRead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CNewFansRead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fansNew.CNewFansRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNewFansRead::CopyFrom(const CNewFansRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fansNew.CNewFansRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNewFansRead::IsInitialized() const {
  return true;
}

void CNewFansRead::InternalSwap(CNewFansRead* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNewFansRead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNewFansRead::InitAsDefaultInstance() {
}
class SNewFansRead::_Internal {
 public:
};

SNewFansRead::SNewFansRead()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fansNew.SNewFansRead)
}
SNewFansRead::SNewFansRead(const SNewFansRead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fansNew.SNewFansRead)
}

void SNewFansRead::SharedCtor() {
}

SNewFansRead::~SNewFansRead() {
  // @@protoc_insertion_point(destructor:fansNew.SNewFansRead)
  SharedDtor();
}

void SNewFansRead::SharedDtor() {
}

void SNewFansRead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNewFansRead& SNewFansRead::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNewFansRead_fansNew_2eproto.base);
  return *internal_default_instance();
}


void SNewFansRead::Clear() {
// @@protoc_insertion_point(message_clear_start:fansNew.SNewFansRead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SNewFansRead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNewFansRead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fansNew.SNewFansRead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fansNew.SNewFansRead)
  return target;
}

size_t SNewFansRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fansNew.SNewFansRead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNewFansRead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fansNew.SNewFansRead)
  GOOGLE_DCHECK_NE(&from, this);
  const SNewFansRead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNewFansRead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fansNew.SNewFansRead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fansNew.SNewFansRead)
    MergeFrom(*source);
  }
}

void SNewFansRead::MergeFrom(const SNewFansRead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fansNew.SNewFansRead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SNewFansRead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fansNew.SNewFansRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNewFansRead::CopyFrom(const SNewFansRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fansNew.SNewFansRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNewFansRead::IsInitialized() const {
  return true;
}

void SNewFansRead::InternalSwap(SNewFansRead* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNewFansRead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CNewFansNum::InitAsDefaultInstance() {
}
class CNewFansNum::_Internal {
 public:
};

CNewFansNum::CNewFansNum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fansNew.CNewFansNum)
}
CNewFansNum::CNewFansNum(const CNewFansNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:fansNew.CNewFansNum)
}

void CNewFansNum::SharedCtor() {
  uid_ = 0;
}

CNewFansNum::~CNewFansNum() {
  // @@protoc_insertion_point(destructor:fansNew.CNewFansNum)
  SharedDtor();
}

void CNewFansNum::SharedDtor() {
}

void CNewFansNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNewFansNum& CNewFansNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNewFansNum_fansNew_2eproto.base);
  return *internal_default_instance();
}


void CNewFansNum::Clear() {
// @@protoc_insertion_point(message_clear_start:fansNew.CNewFansNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CNewFansNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNewFansNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fansNew.CNewFansNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fansNew.CNewFansNum)
  return target;
}

size_t CNewFansNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fansNew.CNewFansNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNewFansNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fansNew.CNewFansNum)
  GOOGLE_DCHECK_NE(&from, this);
  const CNewFansNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNewFansNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fansNew.CNewFansNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fansNew.CNewFansNum)
    MergeFrom(*source);
  }
}

void CNewFansNum::MergeFrom(const CNewFansNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fansNew.CNewFansNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CNewFansNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fansNew.CNewFansNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNewFansNum::CopyFrom(const CNewFansNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fansNew.CNewFansNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNewFansNum::IsInitialized() const {
  return true;
}

void CNewFansNum::InternalSwap(CNewFansNum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNewFansNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNewFansNum::InitAsDefaultInstance() {
}
class SNewFansNum::_Internal {
 public:
};

SNewFansNum::SNewFansNum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fansNew.SNewFansNum)
}
SNewFansNum::SNewFansNum(const SNewFansNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&num_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:fansNew.SNewFansNum)
}

void SNewFansNum::SharedCtor() {
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&num_)) + sizeof(uid_));
}

SNewFansNum::~SNewFansNum() {
  // @@protoc_insertion_point(destructor:fansNew.SNewFansNum)
  SharedDtor();
}

void SNewFansNum::SharedDtor() {
}

void SNewFansNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNewFansNum& SNewFansNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNewFansNum_fansNew_2eproto.base);
  return *internal_default_instance();
}


void SNewFansNum::Clear() {
// @@protoc_insertion_point(message_clear_start:fansNew.SNewFansNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&num_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SNewFansNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNewFansNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fansNew.SNewFansNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fansNew.SNewFansNum)
  return target;
}

size_t SNewFansNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fansNew.SNewFansNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNewFansNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fansNew.SNewFansNum)
  GOOGLE_DCHECK_NE(&from, this);
  const SNewFansNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNewFansNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fansNew.SNewFansNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fansNew.SNewFansNum)
    MergeFrom(*source);
  }
}

void SNewFansNum::MergeFrom(const SNewFansNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fansNew.SNewFansNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SNewFansNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fansNew.SNewFansNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNewFansNum::CopyFrom(const SNewFansNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fansNew.SNewFansNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNewFansNum::IsInitialized() const {
  return true;
}

void SNewFansNum::InternalSwap(SNewFansNum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_, other->num_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNewFansNum::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fansNew
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fansNew::CNewFansRead* Arena::CreateMaybeMessage< ::fansNew::CNewFansRead >(Arena* arena) {
  return Arena::CreateInternal< ::fansNew::CNewFansRead >(arena);
}
template<> PROTOBUF_NOINLINE ::fansNew::SNewFansRead* Arena::CreateMaybeMessage< ::fansNew::SNewFansRead >(Arena* arena) {
  return Arena::CreateInternal< ::fansNew::SNewFansRead >(arena);
}
template<> PROTOBUF_NOINLINE ::fansNew::CNewFansNum* Arena::CreateMaybeMessage< ::fansNew::CNewFansNum >(Arena* arena) {
  return Arena::CreateInternal< ::fansNew::CNewFansNum >(arena);
}
template<> PROTOBUF_NOINLINE ::fansNew::SNewFansNum* Arena::CreateMaybeMessage< ::fansNew::SNewFansNum >(Arena* arena) {
  return Arena::CreateInternal< ::fansNew::SNewFansNum >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
