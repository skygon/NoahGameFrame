// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceWorks.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceWorks_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceWorks_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceWorks_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceWorks_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceWorks_2eproto;
namespace pb {
class CSpaceWorksGet;
class CSpaceWorksGetDefaultTypeInternal;
extern CSpaceWorksGetDefaultTypeInternal _CSpaceWorksGet_default_instance_;
class CSpaceWorksUpload;
class CSpaceWorksUploadDefaultTypeInternal;
extern CSpaceWorksUploadDefaultTypeInternal _CSpaceWorksUpload_default_instance_;
class SSpaceWorksGet;
class SSpaceWorksGetDefaultTypeInternal;
extern SSpaceWorksGetDefaultTypeInternal _SSpaceWorksGet_default_instance_;
class SSpaceWorksUpload;
class SSpaceWorksUploadDefaultTypeInternal;
extern SSpaceWorksUploadDefaultTypeInternal _SSpaceWorksUpload_default_instance_;
class WorksInfo;
class WorksInfoDefaultTypeInternal;
extern WorksInfoDefaultTypeInternal _WorksInfo_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::CSpaceWorksGet* Arena::CreateMaybeMessage<::pb::CSpaceWorksGet>(Arena*);
template<> ::pb::CSpaceWorksUpload* Arena::CreateMaybeMessage<::pb::CSpaceWorksUpload>(Arena*);
template<> ::pb::SSpaceWorksGet* Arena::CreateMaybeMessage<::pb::SSpaceWorksGet>(Arena*);
template<> ::pb::SSpaceWorksUpload* Arena::CreateMaybeMessage<::pb::SSpaceWorksUpload>(Arena*);
template<> ::pb::WorksInfo* Arena::CreateMaybeMessage<::pb::WorksInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class WorksInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.WorksInfo) */ {
 public:
  WorksInfo();
  virtual ~WorksInfo();

  WorksInfo(const WorksInfo& from);
  WorksInfo(WorksInfo&& from) noexcept
    : WorksInfo() {
    *this = ::std::move(from);
  }

  inline WorksInfo& operator=(const WorksInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorksInfo& operator=(WorksInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorksInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorksInfo* internal_default_instance() {
    return reinterpret_cast<const WorksInfo*>(
               &_WorksInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorksInfo& a, WorksInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WorksInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorksInfo* New() const final {
    return CreateMaybeMessage<WorksInfo>(nullptr);
  }

  WorksInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorksInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorksInfo& from);
  void MergeFrom(const WorksInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorksInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.WorksInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceWorks_2eproto);
    return ::descriptor_table_spaceWorks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 4,
    kNickFieldNumber = 1,
    kWechatIdFieldNumber = 2,
    kPhoneFieldNumber = 3,
  };
  // repeated string Page = 4;
  int page_size() const;
  private:
  int _internal_page_size() const;
  public:
  void clear_page();
  const std::string& page(int index) const;
  std::string* mutable_page(int index);
  void set_page(int index, const std::string& value);
  void set_page(int index, std::string&& value);
  void set_page(int index, const char* value);
  void set_page(int index, const char* value, size_t size);
  std::string* add_page();
  void add_page(const std::string& value);
  void add_page(std::string&& value);
  void add_page(const char* value);
  void add_page(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& page() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_page();
  private:
  const std::string& _internal_page(int index) const;
  std::string* _internal_add_page();
  public:

  // string Nick = 1;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string WechatId = 2;
  void clear_wechatid();
  const std::string& wechatid() const;
  void set_wechatid(const std::string& value);
  void set_wechatid(std::string&& value);
  void set_wechatid(const char* value);
  void set_wechatid(const char* value, size_t size);
  std::string* mutable_wechatid();
  std::string* release_wechatid();
  void set_allocated_wechatid(std::string* wechatid);
  private:
  const std::string& _internal_wechatid() const;
  void _internal_set_wechatid(const std::string& value);
  std::string* _internal_mutable_wechatid();
  public:

  // int64 Phone = 3;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.WorksInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wechatid_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceWorks_2eproto;
};
// -------------------------------------------------------------------

class CSpaceWorksUpload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CSpaceWorksUpload) */ {
 public:
  CSpaceWorksUpload();
  virtual ~CSpaceWorksUpload();

  CSpaceWorksUpload(const CSpaceWorksUpload& from);
  CSpaceWorksUpload(CSpaceWorksUpload&& from) noexcept
    : CSpaceWorksUpload() {
    *this = ::std::move(from);
  }

  inline CSpaceWorksUpload& operator=(const CSpaceWorksUpload& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceWorksUpload& operator=(CSpaceWorksUpload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceWorksUpload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceWorksUpload* internal_default_instance() {
    return reinterpret_cast<const CSpaceWorksUpload*>(
               &_CSpaceWorksUpload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSpaceWorksUpload& a, CSpaceWorksUpload& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceWorksUpload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceWorksUpload* New() const final {
    return CreateMaybeMessage<CSpaceWorksUpload>(nullptr);
  }

  CSpaceWorksUpload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceWorksUpload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceWorksUpload& from);
  void MergeFrom(const CSpaceWorksUpload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceWorksUpload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CSpaceWorksUpload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceWorks_2eproto);
    return ::descriptor_table_spaceWorks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorksInfoFieldNumber = 1,
  };
  // .pb.WorksInfo worksInfo = 1;
  bool has_worksinfo() const;
  private:
  bool _internal_has_worksinfo() const;
  public:
  void clear_worksinfo();
  const ::pb::WorksInfo& worksinfo() const;
  ::pb::WorksInfo* release_worksinfo();
  ::pb::WorksInfo* mutable_worksinfo();
  void set_allocated_worksinfo(::pb::WorksInfo* worksinfo);
  private:
  const ::pb::WorksInfo& _internal_worksinfo() const;
  ::pb::WorksInfo* _internal_mutable_worksinfo();
  public:

  // @@protoc_insertion_point(class_scope:pb.CSpaceWorksUpload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::WorksInfo* worksinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceWorks_2eproto;
};
// -------------------------------------------------------------------

class SSpaceWorksUpload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SSpaceWorksUpload) */ {
 public:
  SSpaceWorksUpload();
  virtual ~SSpaceWorksUpload();

  SSpaceWorksUpload(const SSpaceWorksUpload& from);
  SSpaceWorksUpload(SSpaceWorksUpload&& from) noexcept
    : SSpaceWorksUpload() {
    *this = ::std::move(from);
  }

  inline SSpaceWorksUpload& operator=(const SSpaceWorksUpload& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceWorksUpload& operator=(SSpaceWorksUpload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceWorksUpload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceWorksUpload* internal_default_instance() {
    return reinterpret_cast<const SSpaceWorksUpload*>(
               &_SSpaceWorksUpload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSpaceWorksUpload& a, SSpaceWorksUpload& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceWorksUpload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceWorksUpload* New() const final {
    return CreateMaybeMessage<SSpaceWorksUpload>(nullptr);
  }

  SSpaceWorksUpload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceWorksUpload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceWorksUpload& from);
  void MergeFrom(const SSpaceWorksUpload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceWorksUpload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SSpaceWorksUpload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceWorks_2eproto);
    return ::descriptor_table_spaceWorks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.SSpaceWorksUpload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceWorks_2eproto;
};
// -------------------------------------------------------------------

class CSpaceWorksGet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CSpaceWorksGet) */ {
 public:
  CSpaceWorksGet();
  virtual ~CSpaceWorksGet();

  CSpaceWorksGet(const CSpaceWorksGet& from);
  CSpaceWorksGet(CSpaceWorksGet&& from) noexcept
    : CSpaceWorksGet() {
    *this = ::std::move(from);
  }

  inline CSpaceWorksGet& operator=(const CSpaceWorksGet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceWorksGet& operator=(CSpaceWorksGet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceWorksGet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceWorksGet* internal_default_instance() {
    return reinterpret_cast<const CSpaceWorksGet*>(
               &_CSpaceWorksGet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSpaceWorksGet& a, CSpaceWorksGet& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceWorksGet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceWorksGet* New() const final {
    return CreateMaybeMessage<CSpaceWorksGet>(nullptr);
  }

  CSpaceWorksGet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceWorksGet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceWorksGet& from);
  void MergeFrom(const CSpaceWorksGet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceWorksGet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CSpaceWorksGet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceWorks_2eproto);
    return ::descriptor_table_spaceWorks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.CSpaceWorksGet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceWorks_2eproto;
};
// -------------------------------------------------------------------

class SSpaceWorksGet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SSpaceWorksGet) */ {
 public:
  SSpaceWorksGet();
  virtual ~SSpaceWorksGet();

  SSpaceWorksGet(const SSpaceWorksGet& from);
  SSpaceWorksGet(SSpaceWorksGet&& from) noexcept
    : SSpaceWorksGet() {
    *this = ::std::move(from);
  }

  inline SSpaceWorksGet& operator=(const SSpaceWorksGet& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceWorksGet& operator=(SSpaceWorksGet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceWorksGet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceWorksGet* internal_default_instance() {
    return reinterpret_cast<const SSpaceWorksGet*>(
               &_SSpaceWorksGet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSpaceWorksGet& a, SSpaceWorksGet& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceWorksGet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceWorksGet* New() const final {
    return CreateMaybeMessage<SSpaceWorksGet>(nullptr);
  }

  SSpaceWorksGet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceWorksGet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceWorksGet& from);
  void MergeFrom(const SSpaceWorksGet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceWorksGet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SSpaceWorksGet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceWorks_2eproto);
    return ::descriptor_table_spaceWorks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContactDescFieldNumber = 2,
    kContactWechatIdFieldNumber = 3,
    kWorksInfoFieldNumber = 1,
  };
  // string ContactDesc = 2;
  void clear_contactdesc();
  const std::string& contactdesc() const;
  void set_contactdesc(const std::string& value);
  void set_contactdesc(std::string&& value);
  void set_contactdesc(const char* value);
  void set_contactdesc(const char* value, size_t size);
  std::string* mutable_contactdesc();
  std::string* release_contactdesc();
  void set_allocated_contactdesc(std::string* contactdesc);
  private:
  const std::string& _internal_contactdesc() const;
  void _internal_set_contactdesc(const std::string& value);
  std::string* _internal_mutable_contactdesc();
  public:

  // string ContactWechatId = 3;
  void clear_contactwechatid();
  const std::string& contactwechatid() const;
  void set_contactwechatid(const std::string& value);
  void set_contactwechatid(std::string&& value);
  void set_contactwechatid(const char* value);
  void set_contactwechatid(const char* value, size_t size);
  std::string* mutable_contactwechatid();
  std::string* release_contactwechatid();
  void set_allocated_contactwechatid(std::string* contactwechatid);
  private:
  const std::string& _internal_contactwechatid() const;
  void _internal_set_contactwechatid(const std::string& value);
  std::string* _internal_mutable_contactwechatid();
  public:

  // .pb.WorksInfo worksInfo = 1;
  bool has_worksinfo() const;
  private:
  bool _internal_has_worksinfo() const;
  public:
  void clear_worksinfo();
  const ::pb::WorksInfo& worksinfo() const;
  ::pb::WorksInfo* release_worksinfo();
  ::pb::WorksInfo* mutable_worksinfo();
  void set_allocated_worksinfo(::pb::WorksInfo* worksinfo);
  private:
  const ::pb::WorksInfo& _internal_worksinfo() const;
  ::pb::WorksInfo* _internal_mutable_worksinfo();
  public:

  // @@protoc_insertion_point(class_scope:pb.SSpaceWorksGet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contactdesc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contactwechatid_;
  ::pb::WorksInfo* worksinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceWorks_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorksInfo

// string Nick = 1;
inline void WorksInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorksInfo::nick() const {
  // @@protoc_insertion_point(field_get:pb.WorksInfo.Nick)
  return _internal_nick();
}
inline void WorksInfo::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:pb.WorksInfo.Nick)
}
inline std::string* WorksInfo::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:pb.WorksInfo.Nick)
  return _internal_mutable_nick();
}
inline const std::string& WorksInfo::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void WorksInfo::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorksInfo::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.WorksInfo.Nick)
}
inline void WorksInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.WorksInfo.Nick)
}
inline void WorksInfo::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.WorksInfo.Nick)
}
inline std::string* WorksInfo::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorksInfo::release_nick() {
  // @@protoc_insertion_point(field_release:pb.WorksInfo.Nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorksInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:pb.WorksInfo.Nick)
}

// string WechatId = 2;
inline void WorksInfo::clear_wechatid() {
  wechatid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorksInfo::wechatid() const {
  // @@protoc_insertion_point(field_get:pb.WorksInfo.WechatId)
  return _internal_wechatid();
}
inline void WorksInfo::set_wechatid(const std::string& value) {
  _internal_set_wechatid(value);
  // @@protoc_insertion_point(field_set:pb.WorksInfo.WechatId)
}
inline std::string* WorksInfo::mutable_wechatid() {
  // @@protoc_insertion_point(field_mutable:pb.WorksInfo.WechatId)
  return _internal_mutable_wechatid();
}
inline const std::string& WorksInfo::_internal_wechatid() const {
  return wechatid_.GetNoArena();
}
inline void WorksInfo::_internal_set_wechatid(const std::string& value) {
  
  wechatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorksInfo::set_wechatid(std::string&& value) {
  
  wechatid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.WorksInfo.WechatId)
}
inline void WorksInfo::set_wechatid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wechatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.WorksInfo.WechatId)
}
inline void WorksInfo::set_wechatid(const char* value, size_t size) {
  
  wechatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.WorksInfo.WechatId)
}
inline std::string* WorksInfo::_internal_mutable_wechatid() {
  
  return wechatid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorksInfo::release_wechatid() {
  // @@protoc_insertion_point(field_release:pb.WorksInfo.WechatId)
  
  return wechatid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorksInfo::set_allocated_wechatid(std::string* wechatid) {
  if (wechatid != nullptr) {
    
  } else {
    
  }
  wechatid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wechatid);
  // @@protoc_insertion_point(field_set_allocated:pb.WorksInfo.WechatId)
}

// int64 Phone = 3;
inline void WorksInfo::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WorksInfo::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WorksInfo::phone() const {
  // @@protoc_insertion_point(field_get:pb.WorksInfo.Phone)
  return _internal_phone();
}
inline void WorksInfo::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void WorksInfo::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:pb.WorksInfo.Phone)
}

// repeated string Page = 4;
inline int WorksInfo::_internal_page_size() const {
  return page_.size();
}
inline int WorksInfo::page_size() const {
  return _internal_page_size();
}
inline void WorksInfo::clear_page() {
  page_.Clear();
}
inline std::string* WorksInfo::add_page() {
  // @@protoc_insertion_point(field_add_mutable:pb.WorksInfo.Page)
  return _internal_add_page();
}
inline const std::string& WorksInfo::_internal_page(int index) const {
  return page_.Get(index);
}
inline const std::string& WorksInfo::page(int index) const {
  // @@protoc_insertion_point(field_get:pb.WorksInfo.Page)
  return _internal_page(index);
}
inline std::string* WorksInfo::mutable_page(int index) {
  // @@protoc_insertion_point(field_mutable:pb.WorksInfo.Page)
  return page_.Mutable(index);
}
inline void WorksInfo::set_page(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.WorksInfo.Page)
  page_.Mutable(index)->assign(value);
}
inline void WorksInfo::set_page(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.WorksInfo.Page)
  page_.Mutable(index)->assign(std::move(value));
}
inline void WorksInfo::set_page(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  page_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.WorksInfo.Page)
}
inline void WorksInfo::set_page(int index, const char* value, size_t size) {
  page_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.WorksInfo.Page)
}
inline std::string* WorksInfo::_internal_add_page() {
  return page_.Add();
}
inline void WorksInfo::add_page(const std::string& value) {
  page_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.WorksInfo.Page)
}
inline void WorksInfo::add_page(std::string&& value) {
  page_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.WorksInfo.Page)
}
inline void WorksInfo::add_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  page_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.WorksInfo.Page)
}
inline void WorksInfo::add_page(const char* value, size_t size) {
  page_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.WorksInfo.Page)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WorksInfo::page() const {
  // @@protoc_insertion_point(field_list:pb.WorksInfo.Page)
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WorksInfo::mutable_page() {
  // @@protoc_insertion_point(field_mutable_list:pb.WorksInfo.Page)
  return &page_;
}

// -------------------------------------------------------------------

// CSpaceWorksUpload

// .pb.WorksInfo worksInfo = 1;
inline bool CSpaceWorksUpload::_internal_has_worksinfo() const {
  return this != internal_default_instance() && worksinfo_ != nullptr;
}
inline bool CSpaceWorksUpload::has_worksinfo() const {
  return _internal_has_worksinfo();
}
inline void CSpaceWorksUpload::clear_worksinfo() {
  if (GetArenaNoVirtual() == nullptr && worksinfo_ != nullptr) {
    delete worksinfo_;
  }
  worksinfo_ = nullptr;
}
inline const ::pb::WorksInfo& CSpaceWorksUpload::_internal_worksinfo() const {
  const ::pb::WorksInfo* p = worksinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::WorksInfo*>(
      &::pb::_WorksInfo_default_instance_);
}
inline const ::pb::WorksInfo& CSpaceWorksUpload::worksinfo() const {
  // @@protoc_insertion_point(field_get:pb.CSpaceWorksUpload.worksInfo)
  return _internal_worksinfo();
}
inline ::pb::WorksInfo* CSpaceWorksUpload::release_worksinfo() {
  // @@protoc_insertion_point(field_release:pb.CSpaceWorksUpload.worksInfo)
  
  ::pb::WorksInfo* temp = worksinfo_;
  worksinfo_ = nullptr;
  return temp;
}
inline ::pb::WorksInfo* CSpaceWorksUpload::_internal_mutable_worksinfo() {
  
  if (worksinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::WorksInfo>(GetArenaNoVirtual());
    worksinfo_ = p;
  }
  return worksinfo_;
}
inline ::pb::WorksInfo* CSpaceWorksUpload::mutable_worksinfo() {
  // @@protoc_insertion_point(field_mutable:pb.CSpaceWorksUpload.worksInfo)
  return _internal_mutable_worksinfo();
}
inline void CSpaceWorksUpload::set_allocated_worksinfo(::pb::WorksInfo* worksinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete worksinfo_;
  }
  if (worksinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      worksinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worksinfo, submessage_arena);
    }
    
  } else {
    
  }
  worksinfo_ = worksinfo;
  // @@protoc_insertion_point(field_set_allocated:pb.CSpaceWorksUpload.worksInfo)
}

// -------------------------------------------------------------------

// SSpaceWorksUpload

// -------------------------------------------------------------------

// CSpaceWorksGet

// -------------------------------------------------------------------

// SSpaceWorksGet

// .pb.WorksInfo worksInfo = 1;
inline bool SSpaceWorksGet::_internal_has_worksinfo() const {
  return this != internal_default_instance() && worksinfo_ != nullptr;
}
inline bool SSpaceWorksGet::has_worksinfo() const {
  return _internal_has_worksinfo();
}
inline void SSpaceWorksGet::clear_worksinfo() {
  if (GetArenaNoVirtual() == nullptr && worksinfo_ != nullptr) {
    delete worksinfo_;
  }
  worksinfo_ = nullptr;
}
inline const ::pb::WorksInfo& SSpaceWorksGet::_internal_worksinfo() const {
  const ::pb::WorksInfo* p = worksinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::WorksInfo*>(
      &::pb::_WorksInfo_default_instance_);
}
inline const ::pb::WorksInfo& SSpaceWorksGet::worksinfo() const {
  // @@protoc_insertion_point(field_get:pb.SSpaceWorksGet.worksInfo)
  return _internal_worksinfo();
}
inline ::pb::WorksInfo* SSpaceWorksGet::release_worksinfo() {
  // @@protoc_insertion_point(field_release:pb.SSpaceWorksGet.worksInfo)
  
  ::pb::WorksInfo* temp = worksinfo_;
  worksinfo_ = nullptr;
  return temp;
}
inline ::pb::WorksInfo* SSpaceWorksGet::_internal_mutable_worksinfo() {
  
  if (worksinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::WorksInfo>(GetArenaNoVirtual());
    worksinfo_ = p;
  }
  return worksinfo_;
}
inline ::pb::WorksInfo* SSpaceWorksGet::mutable_worksinfo() {
  // @@protoc_insertion_point(field_mutable:pb.SSpaceWorksGet.worksInfo)
  return _internal_mutable_worksinfo();
}
inline void SSpaceWorksGet::set_allocated_worksinfo(::pb::WorksInfo* worksinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete worksinfo_;
  }
  if (worksinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      worksinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worksinfo, submessage_arena);
    }
    
  } else {
    
  }
  worksinfo_ = worksinfo;
  // @@protoc_insertion_point(field_set_allocated:pb.SSpaceWorksGet.worksInfo)
}

// string ContactDesc = 2;
inline void SSpaceWorksGet::clear_contactdesc() {
  contactdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceWorksGet::contactdesc() const {
  // @@protoc_insertion_point(field_get:pb.SSpaceWorksGet.ContactDesc)
  return _internal_contactdesc();
}
inline void SSpaceWorksGet::set_contactdesc(const std::string& value) {
  _internal_set_contactdesc(value);
  // @@protoc_insertion_point(field_set:pb.SSpaceWorksGet.ContactDesc)
}
inline std::string* SSpaceWorksGet::mutable_contactdesc() {
  // @@protoc_insertion_point(field_mutable:pb.SSpaceWorksGet.ContactDesc)
  return _internal_mutable_contactdesc();
}
inline const std::string& SSpaceWorksGet::_internal_contactdesc() const {
  return contactdesc_.GetNoArena();
}
inline void SSpaceWorksGet::_internal_set_contactdesc(const std::string& value) {
  
  contactdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceWorksGet::set_contactdesc(std::string&& value) {
  
  contactdesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSpaceWorksGet.ContactDesc)
}
inline void SSpaceWorksGet::set_contactdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contactdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSpaceWorksGet.ContactDesc)
}
inline void SSpaceWorksGet::set_contactdesc(const char* value, size_t size) {
  
  contactdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSpaceWorksGet.ContactDesc)
}
inline std::string* SSpaceWorksGet::_internal_mutable_contactdesc() {
  
  return contactdesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceWorksGet::release_contactdesc() {
  // @@protoc_insertion_point(field_release:pb.SSpaceWorksGet.ContactDesc)
  
  return contactdesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceWorksGet::set_allocated_contactdesc(std::string* contactdesc) {
  if (contactdesc != nullptr) {
    
  } else {
    
  }
  contactdesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contactdesc);
  // @@protoc_insertion_point(field_set_allocated:pb.SSpaceWorksGet.ContactDesc)
}

// string ContactWechatId = 3;
inline void SSpaceWorksGet::clear_contactwechatid() {
  contactwechatid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceWorksGet::contactwechatid() const {
  // @@protoc_insertion_point(field_get:pb.SSpaceWorksGet.ContactWechatId)
  return _internal_contactwechatid();
}
inline void SSpaceWorksGet::set_contactwechatid(const std::string& value) {
  _internal_set_contactwechatid(value);
  // @@protoc_insertion_point(field_set:pb.SSpaceWorksGet.ContactWechatId)
}
inline std::string* SSpaceWorksGet::mutable_contactwechatid() {
  // @@protoc_insertion_point(field_mutable:pb.SSpaceWorksGet.ContactWechatId)
  return _internal_mutable_contactwechatid();
}
inline const std::string& SSpaceWorksGet::_internal_contactwechatid() const {
  return contactwechatid_.GetNoArena();
}
inline void SSpaceWorksGet::_internal_set_contactwechatid(const std::string& value) {
  
  contactwechatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceWorksGet::set_contactwechatid(std::string&& value) {
  
  contactwechatid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSpaceWorksGet.ContactWechatId)
}
inline void SSpaceWorksGet::set_contactwechatid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contactwechatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSpaceWorksGet.ContactWechatId)
}
inline void SSpaceWorksGet::set_contactwechatid(const char* value, size_t size) {
  
  contactwechatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSpaceWorksGet.ContactWechatId)
}
inline std::string* SSpaceWorksGet::_internal_mutable_contactwechatid() {
  
  return contactwechatid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceWorksGet::release_contactwechatid() {
  // @@protoc_insertion_point(field_release:pb.SSpaceWorksGet.ContactWechatId)
  
  return contactwechatid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceWorksGet::set_allocated_contactwechatid(std::string* contactwechatid) {
  if (contactwechatid != nullptr) {
    
  } else {
    
  }
  contactwechatid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contactwechatid);
  // @@protoc_insertion_point(field_set_allocated:pb.SSpaceWorksGet.ContactWechatId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceWorks_2eproto
