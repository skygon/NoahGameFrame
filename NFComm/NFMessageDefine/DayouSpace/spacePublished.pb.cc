// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spacePublished.proto

#include "spacePublished.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_spacePublished_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpacePublished_spacePublished_2eproto;
namespace spacePublished {
class CSpacePublishedListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSpacePublishedList> _instance;
} _CSpacePublishedList_default_instance_;
class SSpacePublishedListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSpacePublishedList> _instance;
} _SSpacePublishedList_default_instance_;
class SpacePublishedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpacePublished> _instance;
} _SpacePublished_default_instance_;
}  // namespace spacePublished
static void InitDefaultsscc_info_CSpacePublishedList_spacePublished_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spacePublished::_CSpacePublishedList_default_instance_;
    new (ptr) ::spacePublished::CSpacePublishedList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spacePublished::CSpacePublishedList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSpacePublishedList_spacePublished_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSpacePublishedList_spacePublished_2eproto}, {}};

static void InitDefaultsscc_info_SSpacePublishedList_spacePublished_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spacePublished::_SSpacePublishedList_default_instance_;
    new (ptr) ::spacePublished::SSpacePublishedList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spacePublished::SSpacePublishedList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSpacePublishedList_spacePublished_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSpacePublishedList_spacePublished_2eproto}, {
      &scc_info_SpacePublished_spacePublished_2eproto.base,}};

static void InitDefaultsscc_info_SpacePublished_spacePublished_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spacePublished::_SpacePublished_default_instance_;
    new (ptr) ::spacePublished::SpacePublished();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spacePublished::SpacePublished::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpacePublished_spacePublished_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpacePublished_spacePublished_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spacePublished_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_spacePublished_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spacePublished_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spacePublished_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spacePublished::CSpacePublishedList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spacePublished::CSpacePublishedList, curpage_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::CSpacePublishedList, pagelimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spacePublished::SSpacePublishedList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spacePublished::SSpacePublishedList, list_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SSpacePublishedList, msg_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SSpacePublishedList, curpage_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SSpacePublishedList, spacenum_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SSpacePublishedList, publishedspacenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, houseid_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, housetype_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, name_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, cover_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, desc_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, spacetype_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, currentonline_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, createdat_),
  PROTOBUF_FIELD_OFFSET(::spacePublished::SpacePublished, updateat_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::spacePublished::CSpacePublishedList)},
  { 7, -1, sizeof(::spacePublished::SSpacePublishedList)},
  { 17, -1, sizeof(::spacePublished::SpacePublished)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spacePublished::_CSpacePublishedList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spacePublished::_SSpacePublishedList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::spacePublished::_SpacePublished_default_instance_),
};

const char descriptor_table_protodef_spacePublished_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024spacePublished.proto\022\016spacePublished\"9"
  "\n\023CSpacePublishedList\022\017\n\007curPage\030\001 \001(\005\022\021"
  "\n\tpageLimit\030\002 \001(\005\"\216\001\n\023SSpacePublishedLis"
  "t\022,\n\004list\030\001 \003(\0132\036.spacePublished.SpacePu"
  "blished\022\013\n\003msg\030\002 \001(\t\022\017\n\007curPage\030\003 \001(\005\022\020\n"
  "\010spaceNum\030\004 \001(\005\022\031\n\021publishedSpaceNum\030\005 \001"
  "(\005\"\256\001\n\016SpacePublished\022\017\n\007houseId\030\001 \001(\005\022\021"
  "\n\thouseType\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\r\n\005cover"
  "\030\004 \001(\t\022\014\n\004desc\030\005 \001(\t\022\021\n\tspaceType\030\006 \001(\005\022"
  "\025\n\rcurrentOnline\030\007 \001(\005\022\021\n\tcreatedAt\030\010 \001("
  "\t\022\020\n\010updateAt\030\t \001(\tB3\n\030com.dayou.space.p"
  "rotobufB\023SpacePublishedClassZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_spacePublished_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_spacePublished_2eproto_sccs[3] = {
  &scc_info_CSpacePublishedList_spacePublished_2eproto.base,
  &scc_info_SSpacePublishedList_spacePublished_2eproto.base,
  &scc_info_SpacePublished_spacePublished_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spacePublished_2eproto_once;
static bool descriptor_table_spacePublished_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spacePublished_2eproto = {
  &descriptor_table_spacePublished_2eproto_initialized, descriptor_table_protodef_spacePublished_2eproto, "spacePublished.proto", 480,
  &descriptor_table_spacePublished_2eproto_once, descriptor_table_spacePublished_2eproto_sccs, descriptor_table_spacePublished_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_spacePublished_2eproto::offsets,
  file_level_metadata_spacePublished_2eproto, 3, file_level_enum_descriptors_spacePublished_2eproto, file_level_service_descriptors_spacePublished_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spacePublished_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_spacePublished_2eproto), true);
namespace spacePublished {

// ===================================================================

void CSpacePublishedList::InitAsDefaultInstance() {
}
class CSpacePublishedList::_Internal {
 public:
};

CSpacePublishedList::CSpacePublishedList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spacePublished.CSpacePublishedList)
}
CSpacePublishedList::CSpacePublishedList(const CSpacePublishedList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curpage_, &from.curpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagelimit_) -
    reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
  // @@protoc_insertion_point(copy_constructor:spacePublished.CSpacePublishedList)
}

void CSpacePublishedList::SharedCtor() {
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
}

CSpacePublishedList::~CSpacePublishedList() {
  // @@protoc_insertion_point(destructor:spacePublished.CSpacePublishedList)
  SharedDtor();
}

void CSpacePublishedList::SharedDtor() {
}

void CSpacePublishedList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSpacePublishedList& CSpacePublishedList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSpacePublishedList_spacePublished_2eproto.base);
  return *internal_default_instance();
}


void CSpacePublishedList::Clear() {
// @@protoc_insertion_point(message_clear_start:spacePublished.CSpacePublishedList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagelimit_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(pagelimit_));
  _internal_metadata_.Clear();
}

const char* CSpacePublishedList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 curPage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pageLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSpacePublishedList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spacePublished.CSpacePublishedList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_curpage(), target);
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pagelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spacePublished.CSpacePublishedList)
  return target;
}

size_t CSpacePublishedList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spacePublished.CSpacePublishedList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 curPage = 1;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 pageLimit = 2;
  if (this->pagelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pagelimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSpacePublishedList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spacePublished.CSpacePublishedList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSpacePublishedList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSpacePublishedList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spacePublished.CSpacePublishedList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spacePublished.CSpacePublishedList)
    MergeFrom(*source);
  }
}

void CSpacePublishedList::MergeFrom(const CSpacePublishedList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spacePublished.CSpacePublishedList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.pagelimit() != 0) {
    _internal_set_pagelimit(from._internal_pagelimit());
  }
}

void CSpacePublishedList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spacePublished.CSpacePublishedList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSpacePublishedList::CopyFrom(const CSpacePublishedList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spacePublished.CSpacePublishedList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSpacePublishedList::IsInitialized() const {
  return true;
}

void CSpacePublishedList::InternalSwap(CSpacePublishedList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(curpage_, other->curpage_);
  swap(pagelimit_, other->pagelimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSpacePublishedList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSpacePublishedList::InitAsDefaultInstance() {
}
class SSpacePublishedList::_Internal {
 public:
};

SSpacePublishedList::SSpacePublishedList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spacePublished.SSpacePublishedList)
}
SSpacePublishedList::SSpacePublishedList(const SSpacePublishedList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&curpage_, &from.curpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&publishedspacenum_) -
    reinterpret_cast<char*>(&curpage_)) + sizeof(publishedspacenum_));
  // @@protoc_insertion_point(copy_constructor:spacePublished.SSpacePublishedList)
}

void SSpacePublishedList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSpacePublishedList_spacePublished_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publishedspacenum_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(publishedspacenum_));
}

SSpacePublishedList::~SSpacePublishedList() {
  // @@protoc_insertion_point(destructor:spacePublished.SSpacePublishedList)
  SharedDtor();
}

void SSpacePublishedList::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSpacePublishedList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSpacePublishedList& SSpacePublishedList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSpacePublishedList_spacePublished_2eproto.base);
  return *internal_default_instance();
}


void SSpacePublishedList::Clear() {
// @@protoc_insertion_point(message_clear_start:spacePublished.SSpacePublishedList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&curpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publishedspacenum_) -
      reinterpret_cast<char*>(&curpage_)) + sizeof(publishedspacenum_));
  _internal_metadata_.Clear();
}

const char* SSpacePublishedList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .spacePublished.SpacePublished list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spacePublished.SSpacePublishedList.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curPage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          spacenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 publishedSpaceNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          publishedspacenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSpacePublishedList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spacePublished.SSpacePublishedList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spacePublished.SpacePublished list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spacePublished.SSpacePublishedList.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curpage(), target);
  }

  // int32 spaceNum = 4;
  if (this->spacenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_spacenum(), target);
  }

  // int32 publishedSpaceNum = 5;
  if (this->publishedspacenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_publishedspacenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spacePublished.SSpacePublishedList)
  return target;
}

size_t SSpacePublishedList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spacePublished.SSpacePublishedList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spacePublished.SpacePublished list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 curPage = 3;
  if (this->curpage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpage());
  }

  // int32 spaceNum = 4;
  if (this->spacenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacenum());
  }

  // int32 publishedSpaceNum = 5;
  if (this->publishedspacenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_publishedspacenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSpacePublishedList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spacePublished.SSpacePublishedList)
  GOOGLE_DCHECK_NE(&from, this);
  const SSpacePublishedList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSpacePublishedList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spacePublished.SSpacePublishedList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spacePublished.SSpacePublishedList)
    MergeFrom(*source);
  }
}

void SSpacePublishedList::MergeFrom(const SSpacePublishedList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spacePublished.SSpacePublishedList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.curpage() != 0) {
    _internal_set_curpage(from._internal_curpage());
  }
  if (from.spacenum() != 0) {
    _internal_set_spacenum(from._internal_spacenum());
  }
  if (from.publishedspacenum() != 0) {
    _internal_set_publishedspacenum(from._internal_publishedspacenum());
  }
}

void SSpacePublishedList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spacePublished.SSpacePublishedList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSpacePublishedList::CopyFrom(const SSpacePublishedList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spacePublished.SSpacePublishedList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSpacePublishedList::IsInitialized() const {
  return true;
}

void SSpacePublishedList::InternalSwap(SSpacePublishedList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(curpage_, other->curpage_);
  swap(spacenum_, other->spacenum_);
  swap(publishedspacenum_, other->publishedspacenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSpacePublishedList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpacePublished::InitAsDefaultInstance() {
}
class SpacePublished::_Internal {
 public:
};

SpacePublished::SpacePublished()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spacePublished.SpacePublished)
}
SpacePublished::SpacePublished(const SpacePublished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdat().empty()) {
    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  updateat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updateat().empty()) {
    updateat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.updateat_);
  }
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentonline_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(currentonline_));
  // @@protoc_insertion_point(copy_constructor:spacePublished.SpacePublished)
}

void SpacePublished::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpacePublished_spacePublished_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentonline_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(currentonline_));
}

SpacePublished::~SpacePublished() {
  // @@protoc_insertion_point(destructor:spacePublished.SpacePublished)
  SharedDtor();
}

void SpacePublished::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpacePublished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpacePublished& SpacePublished::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpacePublished_spacePublished_2eproto.base);
  return *internal_default_instance();
}


void SpacePublished::Clear() {
// @@protoc_insertion_point(message_clear_start:spacePublished.SpacePublished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentonline_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(currentonline_));
  _internal_metadata_.Clear();
}

const char* SpacePublished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          housetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spacePublished.SpacePublished.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spacePublished.SpacePublished.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spacePublished.SpacePublished.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spaceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          spacetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currentOnline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          currentonline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdAt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_createdat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spacePublished.SpacePublished.createdAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updateAt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_updateat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "spacePublished.SpacePublished.updateAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpacePublished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:spacePublished.SpacePublished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 houseType = 2;
  if (this->housetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_housetype(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spacePublished.SpacePublished.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string cover = 4;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spacePublished.SpacePublished.cover");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cover(), target);
  }

  // string desc = 5;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spacePublished.SpacePublished.desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desc(), target);
  }

  // int32 spaceType = 6;
  if (this->spacetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_spacetype(), target);
  }

  // int32 currentOnline = 7;
  if (this->currentonline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_currentonline(), target);
  }

  // string createdAt = 8;
  if (this->createdat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdat().data(), static_cast<int>(this->_internal_createdat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spacePublished.SpacePublished.createdAt");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_createdat(), target);
  }

  // string updateAt = 9;
  if (this->updateat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updateat().data(), static_cast<int>(this->_internal_updateat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "spacePublished.SpacePublished.updateAt");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_updateat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spacePublished.SpacePublished)
  return target;
}

size_t SpacePublished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spacePublished.SpacePublished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cover = 4;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // string desc = 5;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string createdAt = 8;
  if (this->createdat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdat());
  }

  // string updateAt = 9;
  if (this->updateat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updateat());
  }

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 houseType = 2;
  if (this->housetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_housetype());
  }

  // int32 spaceType = 6;
  if (this->spacetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacetype());
  }

  // int32 currentOnline = 7;
  if (this->currentonline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currentonline());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpacePublished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spacePublished.SpacePublished)
  GOOGLE_DCHECK_NE(&from, this);
  const SpacePublished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpacePublished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spacePublished.SpacePublished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spacePublished.SpacePublished)
    MergeFrom(*source);
  }
}

void SpacePublished::MergeFrom(const SpacePublished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spacePublished.SpacePublished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.createdat().size() > 0) {

    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  if (from.updateat().size() > 0) {

    updateat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.updateat_);
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.housetype() != 0) {
    _internal_set_housetype(from._internal_housetype());
  }
  if (from.spacetype() != 0) {
    _internal_set_spacetype(from._internal_spacetype());
  }
  if (from.currentonline() != 0) {
    _internal_set_currentonline(from._internal_currentonline());
  }
}

void SpacePublished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spacePublished.SpacePublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpacePublished::CopyFrom(const SpacePublished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spacePublished.SpacePublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpacePublished::IsInitialized() const {
  return true;
}

void SpacePublished::InternalSwap(SpacePublished* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdat_.Swap(&other->createdat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  updateat_.Swap(&other->updateat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(houseid_, other->houseid_);
  swap(housetype_, other->housetype_);
  swap(spacetype_, other->spacetype_);
  swap(currentonline_, other->currentonline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpacePublished::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spacePublished
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::spacePublished::CSpacePublishedList* Arena::CreateMaybeMessage< ::spacePublished::CSpacePublishedList >(Arena* arena) {
  return Arena::CreateInternal< ::spacePublished::CSpacePublishedList >(arena);
}
template<> PROTOBUF_NOINLINE ::spacePublished::SSpacePublishedList* Arena::CreateMaybeMessage< ::spacePublished::SSpacePublishedList >(Arena* arena) {
  return Arena::CreateInternal< ::spacePublished::SSpacePublishedList >(arena);
}
template<> PROTOBUF_NOINLINE ::spacePublished::SpacePublished* Arena::CreateMaybeMessage< ::spacePublished::SpacePublished >(Arena* arena) {
  return Arena::CreateInternal< ::spacePublished::SpacePublished >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
