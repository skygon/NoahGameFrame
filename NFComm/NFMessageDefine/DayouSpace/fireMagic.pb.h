// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fireMagic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fireMagic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fireMagic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "head.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fireMagic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fireMagic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fireMagic_2eproto;
namespace fireMagic {
class CFireMagic;
class CFireMagicDefaultTypeInternal;
extern CFireMagicDefaultTypeInternal _CFireMagic_default_instance_;
class SBroadFireMagic;
class SBroadFireMagicDefaultTypeInternal;
extern SBroadFireMagicDefaultTypeInternal _SBroadFireMagic_default_instance_;
class SFireMagic;
class SFireMagicDefaultTypeInternal;
extern SFireMagicDefaultTypeInternal _SFireMagic_default_instance_;
}  // namespace fireMagic
PROTOBUF_NAMESPACE_OPEN
template<> ::fireMagic::CFireMagic* Arena::CreateMaybeMessage<::fireMagic::CFireMagic>(Arena*);
template<> ::fireMagic::SBroadFireMagic* Arena::CreateMaybeMessage<::fireMagic::SBroadFireMagic>(Arena*);
template<> ::fireMagic::SFireMagic* Arena::CreateMaybeMessage<::fireMagic::SFireMagic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fireMagic {

// ===================================================================

class CFireMagic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fireMagic.CFireMagic) */ {
 public:
  CFireMagic();
  virtual ~CFireMagic();

  CFireMagic(const CFireMagic& from);
  CFireMagic(CFireMagic&& from) noexcept
    : CFireMagic() {
    *this = ::std::move(from);
  }

  inline CFireMagic& operator=(const CFireMagic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFireMagic& operator=(CFireMagic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CFireMagic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFireMagic* internal_default_instance() {
    return reinterpret_cast<const CFireMagic*>(
               &_CFireMagic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CFireMagic& a, CFireMagic& b) {
    a.Swap(&b);
  }
  inline void Swap(CFireMagic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CFireMagic* New() const final {
    return CreateMaybeMessage<CFireMagic>(nullptr);
  }

  CFireMagic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CFireMagic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CFireMagic& from);
  void MergeFrom(const CFireMagic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFireMagic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fireMagic.CFireMagic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fireMagic_2eproto);
    return ::descriptor_table_fireMagic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToUidFieldNumber = 1,
    kToolIDFieldNumber = 2,
    kActionIDFieldNumber = 3,
  };
  // int32 toUid = 1;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toolID = 2;
  void clear_toolid();
  ::PROTOBUF_NAMESPACE_ID::int32 toolid() const;
  void set_toolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toolid() const;
  void _internal_set_toolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 actionID = 3;
  void clear_actionid();
  ::PROTOBUF_NAMESPACE_ID::int32 actionid() const;
  void set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionid() const;
  void _internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fireMagic.CFireMagic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  ::PROTOBUF_NAMESPACE_ID::int32 toolid_;
  ::PROTOBUF_NAMESPACE_ID::int32 actionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fireMagic_2eproto;
};
// -------------------------------------------------------------------

class SFireMagic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fireMagic.SFireMagic) */ {
 public:
  SFireMagic();
  virtual ~SFireMagic();

  SFireMagic(const SFireMagic& from);
  SFireMagic(SFireMagic&& from) noexcept
    : SFireMagic() {
    *this = ::std::move(from);
  }

  inline SFireMagic& operator=(const SFireMagic& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFireMagic& operator=(SFireMagic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SFireMagic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFireMagic* internal_default_instance() {
    return reinterpret_cast<const SFireMagic*>(
               &_SFireMagic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SFireMagic& a, SFireMagic& b) {
    a.Swap(&b);
  }
  inline void Swap(SFireMagic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFireMagic* New() const final {
    return CreateMaybeMessage<SFireMagic>(nullptr);
  }

  SFireMagic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFireMagic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SFireMagic& from);
  void MergeFrom(const SFireMagic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFireMagic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fireMagic.SFireMagic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fireMagic_2eproto);
    return ::descriptor_table_fireMagic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
  };
  // .head.BHead head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::head::BHead& head() const;
  ::head::BHead* release_head();
  ::head::BHead* mutable_head();
  void set_allocated_head(::head::BHead* head);
  private:
  const ::head::BHead& _internal_head() const;
  ::head::BHead* _internal_mutable_head();
  public:

  // @@protoc_insertion_point(class_scope:fireMagic.SFireMagic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::head::BHead* head_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fireMagic_2eproto;
};
// -------------------------------------------------------------------

class SBroadFireMagic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fireMagic.SBroadFireMagic) */ {
 public:
  SBroadFireMagic();
  virtual ~SBroadFireMagic();

  SBroadFireMagic(const SBroadFireMagic& from);
  SBroadFireMagic(SBroadFireMagic&& from) noexcept
    : SBroadFireMagic() {
    *this = ::std::move(from);
  }

  inline SBroadFireMagic& operator=(const SBroadFireMagic& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBroadFireMagic& operator=(SBroadFireMagic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBroadFireMagic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBroadFireMagic* internal_default_instance() {
    return reinterpret_cast<const SBroadFireMagic*>(
               &_SBroadFireMagic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SBroadFireMagic& a, SBroadFireMagic& b) {
    a.Swap(&b);
  }
  inline void Swap(SBroadFireMagic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBroadFireMagic* New() const final {
    return CreateMaybeMessage<SBroadFireMagic>(nullptr);
  }

  SBroadFireMagic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBroadFireMagic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBroadFireMagic& from);
  void MergeFrom(const SBroadFireMagic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBroadFireMagic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fireMagic.SBroadFireMagic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fireMagic_2eproto);
    return ::descriptor_table_fireMagic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUidFieldNumber = 1,
    kToUidFieldNumber = 2,
    kToolIDFieldNumber = 3,
    kActionIDFieldNumber = 4,
  };
  // int32 fromUid = 1;
  void clear_fromuid();
  ::PROTOBUF_NAMESPACE_ID::int32 fromuid() const;
  void set_fromuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fromuid() const;
  void _internal_set_fromuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toUid = 2;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toolID = 3;
  void clear_toolid();
  ::PROTOBUF_NAMESPACE_ID::int32 toolid() const;
  void set_toolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toolid() const;
  void _internal_set_toolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 actionID = 4;
  void clear_actionid();
  ::PROTOBUF_NAMESPACE_ID::int32 actionid() const;
  void set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionid() const;
  void _internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fireMagic.SBroadFireMagic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 fromuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  ::PROTOBUF_NAMESPACE_ID::int32 toolid_;
  ::PROTOBUF_NAMESPACE_ID::int32 actionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fireMagic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CFireMagic

// int32 toUid = 1;
inline void CFireMagic::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFireMagic::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFireMagic::touid() const {
  // @@protoc_insertion_point(field_get:fireMagic.CFireMagic.toUid)
  return _internal_touid();
}
inline void CFireMagic::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void CFireMagic::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:fireMagic.CFireMagic.toUid)
}

// int32 toolID = 2;
inline void CFireMagic::clear_toolid() {
  toolid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFireMagic::_internal_toolid() const {
  return toolid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFireMagic::toolid() const {
  // @@protoc_insertion_point(field_get:fireMagic.CFireMagic.toolID)
  return _internal_toolid();
}
inline void CFireMagic::_internal_set_toolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toolid_ = value;
}
inline void CFireMagic::set_toolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toolid(value);
  // @@protoc_insertion_point(field_set:fireMagic.CFireMagic.toolID)
}

// int32 actionID = 3;
inline void CFireMagic::clear_actionid() {
  actionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFireMagic::_internal_actionid() const {
  return actionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CFireMagic::actionid() const {
  // @@protoc_insertion_point(field_get:fireMagic.CFireMagic.actionID)
  return _internal_actionid();
}
inline void CFireMagic::_internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actionid_ = value;
}
inline void CFireMagic::set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_actionid(value);
  // @@protoc_insertion_point(field_set:fireMagic.CFireMagic.actionID)
}

// -------------------------------------------------------------------

// SFireMagic

// .head.BHead head = 1;
inline bool SFireMagic::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool SFireMagic::has_head() const {
  return _internal_has_head();
}
inline const ::head::BHead& SFireMagic::_internal_head() const {
  const ::head::BHead* p = head_;
  return p != nullptr ? *p : *reinterpret_cast<const ::head::BHead*>(
      &::head::_BHead_default_instance_);
}
inline const ::head::BHead& SFireMagic::head() const {
  // @@protoc_insertion_point(field_get:fireMagic.SFireMagic.head)
  return _internal_head();
}
inline ::head::BHead* SFireMagic::release_head() {
  // @@protoc_insertion_point(field_release:fireMagic.SFireMagic.head)
  
  ::head::BHead* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::head::BHead* SFireMagic::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::head::BHead>(GetArenaNoVirtual());
    head_ = p;
  }
  return head_;
}
inline ::head::BHead* SFireMagic::mutable_head() {
  // @@protoc_insertion_point(field_mutable:fireMagic.SFireMagic.head)
  return _internal_mutable_head();
}
inline void SFireMagic::set_allocated_head(::head::BHead* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:fireMagic.SFireMagic.head)
}

// -------------------------------------------------------------------

// SBroadFireMagic

// int32 fromUid = 1;
inline void SBroadFireMagic::clear_fromuid() {
  fromuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadFireMagic::_internal_fromuid() const {
  return fromuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadFireMagic::fromuid() const {
  // @@protoc_insertion_point(field_get:fireMagic.SBroadFireMagic.fromUid)
  return _internal_fromuid();
}
inline void SBroadFireMagic::_internal_set_fromuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fromuid_ = value;
}
inline void SBroadFireMagic::set_fromuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fromuid(value);
  // @@protoc_insertion_point(field_set:fireMagic.SBroadFireMagic.fromUid)
}

// int32 toUid = 2;
inline void SBroadFireMagic::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadFireMagic::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadFireMagic::touid() const {
  // @@protoc_insertion_point(field_get:fireMagic.SBroadFireMagic.toUid)
  return _internal_touid();
}
inline void SBroadFireMagic::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void SBroadFireMagic::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:fireMagic.SBroadFireMagic.toUid)
}

// int32 toolID = 3;
inline void SBroadFireMagic::clear_toolid() {
  toolid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadFireMagic::_internal_toolid() const {
  return toolid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadFireMagic::toolid() const {
  // @@protoc_insertion_point(field_get:fireMagic.SBroadFireMagic.toolID)
  return _internal_toolid();
}
inline void SBroadFireMagic::_internal_set_toolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toolid_ = value;
}
inline void SBroadFireMagic::set_toolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toolid(value);
  // @@protoc_insertion_point(field_set:fireMagic.SBroadFireMagic.toolID)
}

// int32 actionID = 4;
inline void SBroadFireMagic::clear_actionid() {
  actionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadFireMagic::_internal_actionid() const {
  return actionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBroadFireMagic::actionid() const {
  // @@protoc_insertion_point(field_get:fireMagic.SBroadFireMagic.actionID)
  return _internal_actionid();
}
inline void SBroadFireMagic::_internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actionid_ = value;
}
inline void SBroadFireMagic::set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_actionid(value);
  // @@protoc_insertion_point(field_set:fireMagic.SBroadFireMagic.actionID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fireMagic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fireMagic_2eproto
