// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: active.proto

#include "active.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_active_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_activeMsg_active_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_countdown_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCountdown_countdown_2eproto;
namespace active {
class activeMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<activeMsg> _instance;
} _activeMsg_default_instance_;
class CActiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CActive> _instance;
} _CActive_default_instance_;
class SActiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SActive> _instance;
} _SActive_default_instance_;
}  // namespace active
static void InitDefaultsscc_info_CActive_active_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::active::_CActive_default_instance_;
    new (ptr) ::active::CActive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::active::CActive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CActive_active_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CActive_active_2eproto}, {}};

static void InitDefaultsscc_info_SActive_active_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::active::_SActive_default_instance_;
    new (ptr) ::active::SActive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::active::SActive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SActive_active_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SActive_active_2eproto}, {
      &scc_info_activeMsg_active_2eproto.base,}};

static void InitDefaultsscc_info_activeMsg_active_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::active::_activeMsg_default_instance_;
    new (ptr) ::active::activeMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::active::activeMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_activeMsg_active_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_activeMsg_active_2eproto}, {
      &scc_info_SCountdown_countdown_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_active_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_active_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_active_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_active_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::active::activeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::active::activeMsg, activeid_),
  PROTOBUF_FIELD_OFFSET(::active::activeMsg, countdown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::active::CActive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::active::CActive, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::active::SActive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::active::SActive, activemsglist_),
  PROTOBUF_FIELD_OFFSET(::active::SActive, servertime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::active::activeMsg)},
  { 7, -1, sizeof(::active::CActive)},
  { 13, -1, sizeof(::active::SActive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::active::_activeMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::active::_CActive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::active::_SActive_default_instance_),
};

const char descriptor_table_protodef_active_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014active.proto\022\006active\032\017countdown.proto\""
  "G\n\tactiveMsg\022\020\n\010activeID\030\001 \001(\005\022(\n\tcountd"
  "own\030\002 \001(\0132\025.countdown.SCountdown\"\026\n\007CAct"
  "ive\022\013\n\003uid\030\001 \001(\005\"G\n\007SActive\022(\n\ractiveMsg"
  "List\030\001 \003(\0132\021.active.activeMsg\022\022\n\nserverT"
  "ime\030\002 \001(\003B\"\n\030com.dayou.space.protobufB\006A"
  "ctiveb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_active_2eproto_deps[1] = {
  &::descriptor_table_countdown_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_active_2eproto_sccs[3] = {
  &scc_info_CActive_active_2eproto.base,
  &scc_info_SActive_active_2eproto.base,
  &scc_info_activeMsg_active_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_active_2eproto_once;
static bool descriptor_table_active_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_active_2eproto = {
  &descriptor_table_active_2eproto_initialized, descriptor_table_protodef_active_2eproto, "active.proto", 253,
  &descriptor_table_active_2eproto_once, descriptor_table_active_2eproto_sccs, descriptor_table_active_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_active_2eproto::offsets,
  file_level_metadata_active_2eproto, 3, file_level_enum_descriptors_active_2eproto, file_level_service_descriptors_active_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_active_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_active_2eproto), true);
namespace active {

// ===================================================================

void activeMsg::InitAsDefaultInstance() {
  ::active::_activeMsg_default_instance_._instance.get_mutable()->countdown_ = const_cast< ::countdown::SCountdown*>(
      ::countdown::SCountdown::internal_default_instance());
}
class activeMsg::_Internal {
 public:
  static const ::countdown::SCountdown& countdown(const activeMsg* msg);
};

const ::countdown::SCountdown&
activeMsg::_Internal::countdown(const activeMsg* msg) {
  return *msg->countdown_;
}
void activeMsg::clear_countdown() {
  if (GetArenaNoVirtual() == nullptr && countdown_ != nullptr) {
    delete countdown_;
  }
  countdown_ = nullptr;
}
activeMsg::activeMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:active.activeMsg)
}
activeMsg::activeMsg(const activeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_countdown()) {
    countdown_ = new ::countdown::SCountdown(*from.countdown_);
  } else {
    countdown_ = nullptr;
  }
  activeid_ = from.activeid_;
  // @@protoc_insertion_point(copy_constructor:active.activeMsg)
}

void activeMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_activeMsg_active_2eproto.base);
  ::memset(&countdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activeid_) -
      reinterpret_cast<char*>(&countdown_)) + sizeof(activeid_));
}

activeMsg::~activeMsg() {
  // @@protoc_insertion_point(destructor:active.activeMsg)
  SharedDtor();
}

void activeMsg::SharedDtor() {
  if (this != internal_default_instance()) delete countdown_;
}

void activeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const activeMsg& activeMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_activeMsg_active_2eproto.base);
  return *internal_default_instance();
}


void activeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:active.activeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && countdown_ != nullptr) {
    delete countdown_;
  }
  countdown_ = nullptr;
  activeid_ = 0;
  _internal_metadata_.Clear();
}

const char* activeMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 activeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          activeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .countdown.SCountdown countdown = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_countdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* activeMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:active.activeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 activeID = 1;
  if (this->activeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_activeid(), target);
  }

  // .countdown.SCountdown countdown = 2;
  if (this->has_countdown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::countdown(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:active.activeMsg)
  return target;
}

size_t activeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:active.activeMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .countdown.SCountdown countdown = 2;
  if (this->has_countdown()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *countdown_);
  }

  // int32 activeID = 1;
  if (this->activeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void activeMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:active.activeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const activeMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<activeMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:active.activeMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:active.activeMsg)
    MergeFrom(*source);
  }
}

void activeMsg::MergeFrom(const activeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:active.activeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_countdown()) {
    _internal_mutable_countdown()->::countdown::SCountdown::MergeFrom(from._internal_countdown());
  }
  if (from.activeid() != 0) {
    _internal_set_activeid(from._internal_activeid());
  }
}

void activeMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:active.activeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activeMsg::CopyFrom(const activeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:active.activeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activeMsg::IsInitialized() const {
  return true;
}

void activeMsg::InternalSwap(activeMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(countdown_, other->countdown_);
  swap(activeid_, other->activeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata activeMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CActive::InitAsDefaultInstance() {
}
class CActive::_Internal {
 public:
};

CActive::CActive()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:active.CActive)
}
CActive::CActive(const CActive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:active.CActive)
}

void CActive::SharedCtor() {
  uid_ = 0;
}

CActive::~CActive() {
  // @@protoc_insertion_point(destructor:active.CActive)
  SharedDtor();
}

void CActive::SharedDtor() {
}

void CActive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CActive& CActive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CActive_active_2eproto.base);
  return *internal_default_instance();
}


void CActive::Clear() {
// @@protoc_insertion_point(message_clear_start:active.CActive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CActive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CActive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:active.CActive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:active.CActive)
  return target;
}

size_t CActive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:active.CActive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CActive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:active.CActive)
  GOOGLE_DCHECK_NE(&from, this);
  const CActive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CActive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:active.CActive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:active.CActive)
    MergeFrom(*source);
  }
}

void CActive::MergeFrom(const CActive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:active.CActive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CActive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:active.CActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CActive::CopyFrom(const CActive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:active.CActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CActive::IsInitialized() const {
  return true;
}

void CActive::InternalSwap(CActive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CActive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SActive::InitAsDefaultInstance() {
}
class SActive::_Internal {
 public:
};

SActive::SActive()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:active.SActive)
}
SActive::SActive(const SActive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activemsglist_(from.activemsglist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servertime_ = from.servertime_;
  // @@protoc_insertion_point(copy_constructor:active.SActive)
}

void SActive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SActive_active_2eproto.base);
  servertime_ = PROTOBUF_LONGLONG(0);
}

SActive::~SActive() {
  // @@protoc_insertion_point(destructor:active.SActive)
  SharedDtor();
}

void SActive::SharedDtor() {
}

void SActive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SActive& SActive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SActive_active_2eproto.base);
  return *internal_default_instance();
}


void SActive::Clear() {
// @@protoc_insertion_point(message_clear_start:active.SActive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activemsglist_.Clear();
  servertime_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SActive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .active.activeMsg activeMsgList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activemsglist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 serverTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SActive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:active.SActive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .active.activeMsg activeMsgList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activemsglist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_activemsglist(i), target, stream);
  }

  // int64 serverTime = 2;
  if (this->servertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_servertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:active.SActive)
  return target;
}

size_t SActive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:active.SActive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .active.activeMsg activeMsgList = 1;
  total_size += 1UL * this->_internal_activemsglist_size();
  for (const auto& msg : this->activemsglist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 serverTime = 2;
  if (this->servertime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_servertime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SActive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:active.SActive)
  GOOGLE_DCHECK_NE(&from, this);
  const SActive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SActive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:active.SActive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:active.SActive)
    MergeFrom(*source);
  }
}

void SActive::MergeFrom(const SActive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:active.SActive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activemsglist_.MergeFrom(from.activemsglist_);
  if (from.servertime() != 0) {
    _internal_set_servertime(from._internal_servertime());
  }
}

void SActive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:active.SActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SActive::CopyFrom(const SActive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:active.SActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SActive::IsInitialized() const {
  return true;
}

void SActive::InternalSwap(SActive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activemsglist_.InternalSwap(&other->activemsglist_);
  swap(servertime_, other->servertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SActive::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace active
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::active::activeMsg* Arena::CreateMaybeMessage< ::active::activeMsg >(Arena* arena) {
  return Arena::CreateInternal< ::active::activeMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::active::CActive* Arena::CreateMaybeMessage< ::active::CActive >(Arena* arena) {
  return Arena::CreateInternal< ::active::CActive >(arena);
}
template<> PROTOBUF_NOINLINE ::active::SActive* Arena::CreateMaybeMessage< ::active::SActive >(Arena* arena) {
  return Arena::CreateInternal< ::active::SActive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
