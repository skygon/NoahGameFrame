// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rewardForLottery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rewardForLottery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rewardForLottery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "treasureBox.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rewardForLottery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rewardForLottery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rewardForLottery_2eproto;
namespace rewardForLottery {
class AwardRecordInfo;
class AwardRecordInfoDefaultTypeInternal;
extern AwardRecordInfoDefaultTypeInternal _AwardRecordInfo_default_instance_;
class CBlindBoxLottery;
class CBlindBoxLotteryDefaultTypeInternal;
extern CBlindBoxLotteryDefaultTypeInternal _CBlindBoxLottery_default_instance_;
class CLotteryBestProgress;
class CLotteryBestProgressDefaultTypeInternal;
extern CLotteryBestProgressDefaultTypeInternal _CLotteryBestProgress_default_instance_;
class CObtainAwardRecords;
class CObtainAwardRecordsDefaultTypeInternal;
extern CObtainAwardRecordsDefaultTypeInternal _CObtainAwardRecords_default_instance_;
class CObtainRewardList;
class CObtainRewardListDefaultTypeInternal;
extern CObtainRewardListDefaultTypeInternal _CObtainRewardList_default_instance_;
class CPhysicalRewardExchange;
class CPhysicalRewardExchangeDefaultTypeInternal;
extern CPhysicalRewardExchangeDefaultTypeInternal _CPhysicalRewardExchange_default_instance_;
class SBlindBoxLottery;
class SBlindBoxLotteryDefaultTypeInternal;
extern SBlindBoxLotteryDefaultTypeInternal _SBlindBoxLottery_default_instance_;
class SLotteryBestProgress;
class SLotteryBestProgressDefaultTypeInternal;
extern SLotteryBestProgressDefaultTypeInternal _SLotteryBestProgress_default_instance_;
class SObtainAwardRecords;
class SObtainAwardRecordsDefaultTypeInternal;
extern SObtainAwardRecordsDefaultTypeInternal _SObtainAwardRecords_default_instance_;
class SObtainRewardList;
class SObtainRewardListDefaultTypeInternal;
extern SObtainRewardListDefaultTypeInternal _SObtainRewardList_default_instance_;
class SPhysicalRewardExchange;
class SPhysicalRewardExchangeDefaultTypeInternal;
extern SPhysicalRewardExchangeDefaultTypeInternal _SPhysicalRewardExchange_default_instance_;
}  // namespace rewardForLottery
PROTOBUF_NAMESPACE_OPEN
template<> ::rewardForLottery::AwardRecordInfo* Arena::CreateMaybeMessage<::rewardForLottery::AwardRecordInfo>(Arena*);
template<> ::rewardForLottery::CBlindBoxLottery* Arena::CreateMaybeMessage<::rewardForLottery::CBlindBoxLottery>(Arena*);
template<> ::rewardForLottery::CLotteryBestProgress* Arena::CreateMaybeMessage<::rewardForLottery::CLotteryBestProgress>(Arena*);
template<> ::rewardForLottery::CObtainAwardRecords* Arena::CreateMaybeMessage<::rewardForLottery::CObtainAwardRecords>(Arena*);
template<> ::rewardForLottery::CObtainRewardList* Arena::CreateMaybeMessage<::rewardForLottery::CObtainRewardList>(Arena*);
template<> ::rewardForLottery::CPhysicalRewardExchange* Arena::CreateMaybeMessage<::rewardForLottery::CPhysicalRewardExchange>(Arena*);
template<> ::rewardForLottery::SBlindBoxLottery* Arena::CreateMaybeMessage<::rewardForLottery::SBlindBoxLottery>(Arena*);
template<> ::rewardForLottery::SLotteryBestProgress* Arena::CreateMaybeMessage<::rewardForLottery::SLotteryBestProgress>(Arena*);
template<> ::rewardForLottery::SObtainAwardRecords* Arena::CreateMaybeMessage<::rewardForLottery::SObtainAwardRecords>(Arena*);
template<> ::rewardForLottery::SObtainRewardList* Arena::CreateMaybeMessage<::rewardForLottery::SObtainRewardList>(Arena*);
template<> ::rewardForLottery::SPhysicalRewardExchange* Arena::CreateMaybeMessage<::rewardForLottery::SPhysicalRewardExchange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rewardForLottery {

// ===================================================================

class CObtainRewardList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.CObtainRewardList) */ {
 public:
  CObtainRewardList();
  virtual ~CObtainRewardList();

  CObtainRewardList(const CObtainRewardList& from);
  CObtainRewardList(CObtainRewardList&& from) noexcept
    : CObtainRewardList() {
    *this = ::std::move(from);
  }

  inline CObtainRewardList& operator=(const CObtainRewardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CObtainRewardList& operator=(CObtainRewardList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CObtainRewardList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CObtainRewardList* internal_default_instance() {
    return reinterpret_cast<const CObtainRewardList*>(
               &_CObtainRewardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CObtainRewardList& a, CObtainRewardList& b) {
    a.Swap(&b);
  }
  inline void Swap(CObtainRewardList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CObtainRewardList* New() const final {
    return CreateMaybeMessage<CObtainRewardList>(nullptr);
  }

  CObtainRewardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CObtainRewardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CObtainRewardList& from);
  void MergeFrom(const CObtainRewardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CObtainRewardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.CObtainRewardList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rewardForLottery.CObtainRewardList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class SObtainRewardList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.SObtainRewardList) */ {
 public:
  SObtainRewardList();
  virtual ~SObtainRewardList();

  SObtainRewardList(const SObtainRewardList& from);
  SObtainRewardList(SObtainRewardList&& from) noexcept
    : SObtainRewardList() {
    *this = ::std::move(from);
  }

  inline SObtainRewardList& operator=(const SObtainRewardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SObtainRewardList& operator=(SObtainRewardList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SObtainRewardList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SObtainRewardList* internal_default_instance() {
    return reinterpret_cast<const SObtainRewardList*>(
               &_SObtainRewardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SObtainRewardList& a, SObtainRewardList& b) {
    a.Swap(&b);
  }
  inline void Swap(SObtainRewardList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SObtainRewardList* New() const final {
    return CreateMaybeMessage<SObtainRewardList>(nullptr);
  }

  SObtainRewardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SObtainRewardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SObtainRewardList& from);
  void MergeFrom(const SObtainRewardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SObtainRewardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.SObtainRewardList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // repeated .treasureBox.TreasureBoxRewardContent list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::treasureBox::TreasureBoxRewardContent* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >*
      mutable_list();
  private:
  const ::treasureBox::TreasureBoxRewardContent& _internal_list(int index) const;
  ::treasureBox::TreasureBoxRewardContent* _internal_add_list();
  public:
  const ::treasureBox::TreasureBoxRewardContent& list(int index) const;
  ::treasureBox::TreasureBoxRewardContent* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >&
      list() const;

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForLottery.SObtainRewardList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class CBlindBoxLottery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.CBlindBoxLottery) */ {
 public:
  CBlindBoxLottery();
  virtual ~CBlindBoxLottery();

  CBlindBoxLottery(const CBlindBoxLottery& from);
  CBlindBoxLottery(CBlindBoxLottery&& from) noexcept
    : CBlindBoxLottery() {
    *this = ::std::move(from);
  }

  inline CBlindBoxLottery& operator=(const CBlindBoxLottery& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBlindBoxLottery& operator=(CBlindBoxLottery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBlindBoxLottery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBlindBoxLottery* internal_default_instance() {
    return reinterpret_cast<const CBlindBoxLottery*>(
               &_CBlindBoxLottery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CBlindBoxLottery& a, CBlindBoxLottery& b) {
    a.Swap(&b);
  }
  inline void Swap(CBlindBoxLottery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBlindBoxLottery* New() const final {
    return CreateMaybeMessage<CBlindBoxLottery>(nullptr);
  }

  CBlindBoxLottery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBlindBoxLottery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBlindBoxLottery& from);
  void MergeFrom(const CBlindBoxLottery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBlindBoxLottery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.CBlindBoxLottery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rewardForLottery.CBlindBoxLottery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class SBlindBoxLottery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.SBlindBoxLottery) */ {
 public:
  SBlindBoxLottery();
  virtual ~SBlindBoxLottery();

  SBlindBoxLottery(const SBlindBoxLottery& from);
  SBlindBoxLottery(SBlindBoxLottery&& from) noexcept
    : SBlindBoxLottery() {
    *this = ::std::move(from);
  }

  inline SBlindBoxLottery& operator=(const SBlindBoxLottery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SBlindBoxLottery& operator=(SBlindBoxLottery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SBlindBoxLottery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBlindBoxLottery* internal_default_instance() {
    return reinterpret_cast<const SBlindBoxLottery*>(
               &_SBlindBoxLottery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SBlindBoxLottery& a, SBlindBoxLottery& b) {
    a.Swap(&b);
  }
  inline void Swap(SBlindBoxLottery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SBlindBoxLottery* New() const final {
    return CreateMaybeMessage<SBlindBoxLottery>(nullptr);
  }

  SBlindBoxLottery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SBlindBoxLottery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SBlindBoxLottery& from);
  void MergeFrom(const SBlindBoxLottery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBlindBoxLottery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.SBlindBoxLottery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 3,
    kStateFieldNumber = 2,
    kLotteryUidFieldNumber = 4,
  };
  // repeated .treasureBox.TreasureBoxRewardContent list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::treasureBox::TreasureBoxRewardContent* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >*
      mutable_list();
  private:
  const ::treasureBox::TreasureBoxRewardContent& _internal_list(int index) const;
  ::treasureBox::TreasureBoxRewardContent* _internal_add_list();
  public:
  const ::treasureBox::TreasureBoxRewardContent& list(int index) const;
  ::treasureBox::TreasureBoxRewardContent* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >&
      list() const;

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lotteryUid = 4;
  void clear_lotteryuid();
  ::PROTOBUF_NAMESPACE_ID::int32 lotteryuid() const;
  void set_lotteryuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lotteryuid() const;
  void _internal_set_lotteryuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForLottery.SBlindBoxLottery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 lotteryuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class CObtainAwardRecords :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.CObtainAwardRecords) */ {
 public:
  CObtainAwardRecords();
  virtual ~CObtainAwardRecords();

  CObtainAwardRecords(const CObtainAwardRecords& from);
  CObtainAwardRecords(CObtainAwardRecords&& from) noexcept
    : CObtainAwardRecords() {
    *this = ::std::move(from);
  }

  inline CObtainAwardRecords& operator=(const CObtainAwardRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline CObtainAwardRecords& operator=(CObtainAwardRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CObtainAwardRecords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CObtainAwardRecords* internal_default_instance() {
    return reinterpret_cast<const CObtainAwardRecords*>(
               &_CObtainAwardRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CObtainAwardRecords& a, CObtainAwardRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(CObtainAwardRecords* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CObtainAwardRecords* New() const final {
    return CreateMaybeMessage<CObtainAwardRecords>(nullptr);
  }

  CObtainAwardRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CObtainAwardRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CObtainAwardRecords& from);
  void MergeFrom(const CObtainAwardRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CObtainAwardRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.CObtainAwardRecords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurPageFieldNumber = 1,
    kPageLimitFieldNumber = 2,
  };
  // int32 curPage = 1;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 2;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForLottery.CObtainAwardRecords)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class SObtainAwardRecords :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.SObtainAwardRecords) */ {
 public:
  SObtainAwardRecords();
  virtual ~SObtainAwardRecords();

  SObtainAwardRecords(const SObtainAwardRecords& from);
  SObtainAwardRecords(SObtainAwardRecords&& from) noexcept
    : SObtainAwardRecords() {
    *this = ::std::move(from);
  }

  inline SObtainAwardRecords& operator=(const SObtainAwardRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline SObtainAwardRecords& operator=(SObtainAwardRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SObtainAwardRecords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SObtainAwardRecords* internal_default_instance() {
    return reinterpret_cast<const SObtainAwardRecords*>(
               &_SObtainAwardRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SObtainAwardRecords& a, SObtainAwardRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(SObtainAwardRecords* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SObtainAwardRecords* New() const final {
    return CreateMaybeMessage<SObtainAwardRecords>(nullptr);
  }

  SObtainAwardRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SObtainAwardRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SObtainAwardRecords& from);
  void MergeFrom(const SObtainAwardRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SObtainAwardRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.SObtainAwardRecords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kTotalNumFieldNumber = 4,
  };
  // repeated .rewardForLottery.AwardRecordInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::rewardForLottery::AwardRecordInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForLottery::AwardRecordInfo >*
      mutable_list();
  private:
  const ::rewardForLottery::AwardRecordInfo& _internal_list(int index) const;
  ::rewardForLottery::AwardRecordInfo* _internal_add_list();
  public:
  const ::rewardForLottery::AwardRecordInfo& list(int index) const;
  ::rewardForLottery::AwardRecordInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForLottery::AwardRecordInfo >&
      list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TotalNum = 4;
  void clear_totalnum();
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum() const;
  void set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalnum() const;
  void _internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForLottery.SObtainAwardRecords)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForLottery::AwardRecordInfo > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class CPhysicalRewardExchange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.CPhysicalRewardExchange) */ {
 public:
  CPhysicalRewardExchange();
  virtual ~CPhysicalRewardExchange();

  CPhysicalRewardExchange(const CPhysicalRewardExchange& from);
  CPhysicalRewardExchange(CPhysicalRewardExchange&& from) noexcept
    : CPhysicalRewardExchange() {
    *this = ::std::move(from);
  }

  inline CPhysicalRewardExchange& operator=(const CPhysicalRewardExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPhysicalRewardExchange& operator=(CPhysicalRewardExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPhysicalRewardExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPhysicalRewardExchange* internal_default_instance() {
    return reinterpret_cast<const CPhysicalRewardExchange*>(
               &_CPhysicalRewardExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CPhysicalRewardExchange& a, CPhysicalRewardExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(CPhysicalRewardExchange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPhysicalRewardExchange* New() const final {
    return CreateMaybeMessage<CPhysicalRewardExchange>(nullptr);
  }

  CPhysicalRewardExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPhysicalRewardExchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPhysicalRewardExchange& from);
  void MergeFrom(const CPhysicalRewardExchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPhysicalRewardExchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.CPhysicalRewardExchange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kIdCardFieldNumber = 4,
    kPhoneFieldNumber = 5,
    kGoodsIdFieldNumber = 1,
    kBackpackIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string idCard = 4;
  void clear_idcard();
  const std::string& idcard() const;
  void set_idcard(const std::string& value);
  void set_idcard(std::string&& value);
  void set_idcard(const char* value);
  void set_idcard(const char* value, size_t size);
  std::string* mutable_idcard();
  std::string* release_idcard();
  void set_allocated_idcard(std::string* idcard);
  private:
  const std::string& _internal_idcard() const;
  void _internal_set_idcard(const std::string& value);
  std::string* _internal_mutable_idcard();
  public:

  // string phone = 5;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 backpackId = 2;
  void clear_backpackid();
  ::PROTOBUF_NAMESPACE_ID::int32 backpackid() const;
  void set_backpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_backpackid() const;
  void _internal_set_backpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForLottery.CPhysicalRewardExchange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idcard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 backpackid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class SPhysicalRewardExchange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.SPhysicalRewardExchange) */ {
 public:
  SPhysicalRewardExchange();
  virtual ~SPhysicalRewardExchange();

  SPhysicalRewardExchange(const SPhysicalRewardExchange& from);
  SPhysicalRewardExchange(SPhysicalRewardExchange&& from) noexcept
    : SPhysicalRewardExchange() {
    *this = ::std::move(from);
  }

  inline SPhysicalRewardExchange& operator=(const SPhysicalRewardExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPhysicalRewardExchange& operator=(SPhysicalRewardExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPhysicalRewardExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPhysicalRewardExchange* internal_default_instance() {
    return reinterpret_cast<const SPhysicalRewardExchange*>(
               &_SPhysicalRewardExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SPhysicalRewardExchange& a, SPhysicalRewardExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(SPhysicalRewardExchange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPhysicalRewardExchange* New() const final {
    return CreateMaybeMessage<SPhysicalRewardExchange>(nullptr);
  }

  SPhysicalRewardExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPhysicalRewardExchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPhysicalRewardExchange& from);
  void MergeFrom(const SPhysicalRewardExchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPhysicalRewardExchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.SPhysicalRewardExchange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForLottery.SPhysicalRewardExchange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class AwardRecordInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.AwardRecordInfo) */ {
 public:
  AwardRecordInfo();
  virtual ~AwardRecordInfo();

  AwardRecordInfo(const AwardRecordInfo& from);
  AwardRecordInfo(AwardRecordInfo&& from) noexcept
    : AwardRecordInfo() {
    *this = ::std::move(from);
  }

  inline AwardRecordInfo& operator=(const AwardRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardRecordInfo& operator=(AwardRecordInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardRecordInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AwardRecordInfo* internal_default_instance() {
    return reinterpret_cast<const AwardRecordInfo*>(
               &_AwardRecordInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AwardRecordInfo& a, AwardRecordInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardRecordInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardRecordInfo* New() const final {
    return CreateMaybeMessage<AwardRecordInfo>(nullptr);
  }

  AwardRecordInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardRecordInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardRecordInfo& from);
  void MergeFrom(const AwardRecordInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardRecordInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.AwardRecordInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIconFieldNumber = 2,
    kUserNameFieldNumber = 3,
    kRecordInfoFieldNumber = 1,
    kUserIdFieldNumber = 4,
  };
  // string userIcon = 2;
  void clear_usericon();
  const std::string& usericon() const;
  void set_usericon(const std::string& value);
  void set_usericon(std::string&& value);
  void set_usericon(const char* value);
  void set_usericon(const char* value, size_t size);
  std::string* mutable_usericon();
  std::string* release_usericon();
  void set_allocated_usericon(std::string* usericon);
  private:
  const std::string& _internal_usericon() const;
  void _internal_set_usericon(const std::string& value);
  std::string* _internal_mutable_usericon();
  public:

  // string userName = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .treasureBox.TreasureBoxRewardContent recordInfo = 1;
  bool has_recordinfo() const;
  private:
  bool _internal_has_recordinfo() const;
  public:
  void clear_recordinfo();
  const ::treasureBox::TreasureBoxRewardContent& recordinfo() const;
  ::treasureBox::TreasureBoxRewardContent* release_recordinfo();
  ::treasureBox::TreasureBoxRewardContent* mutable_recordinfo();
  void set_allocated_recordinfo(::treasureBox::TreasureBoxRewardContent* recordinfo);
  private:
  const ::treasureBox::TreasureBoxRewardContent& _internal_recordinfo() const;
  ::treasureBox::TreasureBoxRewardContent* _internal_mutable_recordinfo();
  public:

  // int32 userId = 4;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForLottery.AwardRecordInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usericon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::treasureBox::TreasureBoxRewardContent* recordinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class CLotteryBestProgress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.CLotteryBestProgress) */ {
 public:
  CLotteryBestProgress();
  virtual ~CLotteryBestProgress();

  CLotteryBestProgress(const CLotteryBestProgress& from);
  CLotteryBestProgress(CLotteryBestProgress&& from) noexcept
    : CLotteryBestProgress() {
    *this = ::std::move(from);
  }

  inline CLotteryBestProgress& operator=(const CLotteryBestProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLotteryBestProgress& operator=(CLotteryBestProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLotteryBestProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLotteryBestProgress* internal_default_instance() {
    return reinterpret_cast<const CLotteryBestProgress*>(
               &_CLotteryBestProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CLotteryBestProgress& a, CLotteryBestProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CLotteryBestProgress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLotteryBestProgress* New() const final {
    return CreateMaybeMessage<CLotteryBestProgress>(nullptr);
  }

  CLotteryBestProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLotteryBestProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLotteryBestProgress& from);
  void MergeFrom(const CLotteryBestProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLotteryBestProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.CLotteryBestProgress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rewardForLottery.CLotteryBestProgress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// -------------------------------------------------------------------

class SLotteryBestProgress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rewardForLottery.SLotteryBestProgress) */ {
 public:
  SLotteryBestProgress();
  virtual ~SLotteryBestProgress();

  SLotteryBestProgress(const SLotteryBestProgress& from);
  SLotteryBestProgress(SLotteryBestProgress&& from) noexcept
    : SLotteryBestProgress() {
    *this = ::std::move(from);
  }

  inline SLotteryBestProgress& operator=(const SLotteryBestProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLotteryBestProgress& operator=(SLotteryBestProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLotteryBestProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLotteryBestProgress* internal_default_instance() {
    return reinterpret_cast<const SLotteryBestProgress*>(
               &_SLotteryBestProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SLotteryBestProgress& a, SLotteryBestProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(SLotteryBestProgress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLotteryBestProgress* New() const final {
    return CreateMaybeMessage<SLotteryBestProgress>(nullptr);
  }

  SLotteryBestProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLotteryBestProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLotteryBestProgress& from);
  void MergeFrom(const SLotteryBestProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLotteryBestProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rewardForLottery.SLotteryBestProgress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rewardForLottery_2eproto);
    return ::descriptor_table_rewardForLottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
  };
  // int32 progress = 1;
  void clear_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress() const;
  void _internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rewardForLottery.SLotteryBestProgress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rewardForLottery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CObtainRewardList

// -------------------------------------------------------------------

// SObtainRewardList

// repeated .treasureBox.TreasureBoxRewardContent list = 1;
inline int SObtainRewardList::_internal_list_size() const {
  return list_.size();
}
inline int SObtainRewardList::list_size() const {
  return _internal_list_size();
}
inline ::treasureBox::TreasureBoxRewardContent* SObtainRewardList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.SObtainRewardList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >*
SObtainRewardList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:rewardForLottery.SObtainRewardList.list)
  return &list_;
}
inline const ::treasureBox::TreasureBoxRewardContent& SObtainRewardList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::treasureBox::TreasureBoxRewardContent& SObtainRewardList::list(int index) const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SObtainRewardList.list)
  return _internal_list(index);
}
inline ::treasureBox::TreasureBoxRewardContent* SObtainRewardList::_internal_add_list() {
  return list_.Add();
}
inline ::treasureBox::TreasureBoxRewardContent* SObtainRewardList::add_list() {
  // @@protoc_insertion_point(field_add:rewardForLottery.SObtainRewardList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >&
SObtainRewardList::list() const {
  // @@protoc_insertion_point(field_list:rewardForLottery.SObtainRewardList.list)
  return list_;
}

// int32 state = 2;
inline void SObtainRewardList::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SObtainRewardList::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SObtainRewardList::state() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SObtainRewardList.state)
  return _internal_state();
}
inline void SObtainRewardList::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SObtainRewardList::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SObtainRewardList.state)
}

// string msg = 3;
inline void SObtainRewardList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SObtainRewardList::msg() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SObtainRewardList.msg)
  return _internal_msg();
}
inline void SObtainRewardList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SObtainRewardList.msg)
}
inline std::string* SObtainRewardList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.SObtainRewardList.msg)
  return _internal_mutable_msg();
}
inline const std::string& SObtainRewardList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SObtainRewardList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SObtainRewardList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForLottery.SObtainRewardList.msg)
}
inline void SObtainRewardList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForLottery.SObtainRewardList.msg)
}
inline void SObtainRewardList::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForLottery.SObtainRewardList.msg)
}
inline std::string* SObtainRewardList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SObtainRewardList::release_msg() {
  // @@protoc_insertion_point(field_release:rewardForLottery.SObtainRewardList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SObtainRewardList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.SObtainRewardList.msg)
}

// -------------------------------------------------------------------

// CBlindBoxLottery

// -------------------------------------------------------------------

// SBlindBoxLottery

// repeated .treasureBox.TreasureBoxRewardContent list = 1;
inline int SBlindBoxLottery::_internal_list_size() const {
  return list_.size();
}
inline int SBlindBoxLottery::list_size() const {
  return _internal_list_size();
}
inline ::treasureBox::TreasureBoxRewardContent* SBlindBoxLottery::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.SBlindBoxLottery.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >*
SBlindBoxLottery::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:rewardForLottery.SBlindBoxLottery.list)
  return &list_;
}
inline const ::treasureBox::TreasureBoxRewardContent& SBlindBoxLottery::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::treasureBox::TreasureBoxRewardContent& SBlindBoxLottery::list(int index) const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SBlindBoxLottery.list)
  return _internal_list(index);
}
inline ::treasureBox::TreasureBoxRewardContent* SBlindBoxLottery::_internal_add_list() {
  return list_.Add();
}
inline ::treasureBox::TreasureBoxRewardContent* SBlindBoxLottery::add_list() {
  // @@protoc_insertion_point(field_add:rewardForLottery.SBlindBoxLottery.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::treasureBox::TreasureBoxRewardContent >&
SBlindBoxLottery::list() const {
  // @@protoc_insertion_point(field_list:rewardForLottery.SBlindBoxLottery.list)
  return list_;
}

// int32 state = 2;
inline void SBlindBoxLottery::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBlindBoxLottery::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBlindBoxLottery::state() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SBlindBoxLottery.state)
  return _internal_state();
}
inline void SBlindBoxLottery::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SBlindBoxLottery::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SBlindBoxLottery.state)
}

// string msg = 3;
inline void SBlindBoxLottery::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SBlindBoxLottery::msg() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SBlindBoxLottery.msg)
  return _internal_msg();
}
inline void SBlindBoxLottery::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SBlindBoxLottery.msg)
}
inline std::string* SBlindBoxLottery::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.SBlindBoxLottery.msg)
  return _internal_mutable_msg();
}
inline const std::string& SBlindBoxLottery::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SBlindBoxLottery::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SBlindBoxLottery::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForLottery.SBlindBoxLottery.msg)
}
inline void SBlindBoxLottery::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForLottery.SBlindBoxLottery.msg)
}
inline void SBlindBoxLottery::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForLottery.SBlindBoxLottery.msg)
}
inline std::string* SBlindBoxLottery::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SBlindBoxLottery::release_msg() {
  // @@protoc_insertion_point(field_release:rewardForLottery.SBlindBoxLottery.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SBlindBoxLottery::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.SBlindBoxLottery.msg)
}

// int32 lotteryUid = 4;
inline void SBlindBoxLottery::clear_lotteryuid() {
  lotteryuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBlindBoxLottery::_internal_lotteryuid() const {
  return lotteryuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SBlindBoxLottery::lotteryuid() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SBlindBoxLottery.lotteryUid)
  return _internal_lotteryuid();
}
inline void SBlindBoxLottery::_internal_set_lotteryuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lotteryuid_ = value;
}
inline void SBlindBoxLottery::set_lotteryuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lotteryuid(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SBlindBoxLottery.lotteryUid)
}

// -------------------------------------------------------------------

// CObtainAwardRecords

// int32 curPage = 1;
inline void CObtainAwardRecords::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CObtainAwardRecords::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CObtainAwardRecords::curpage() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.CObtainAwardRecords.curPage)
  return _internal_curpage();
}
inline void CObtainAwardRecords::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CObtainAwardRecords::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.CObtainAwardRecords.curPage)
}

// int32 pageLimit = 2;
inline void CObtainAwardRecords::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CObtainAwardRecords::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CObtainAwardRecords::pagelimit() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.CObtainAwardRecords.pageLimit)
  return _internal_pagelimit();
}
inline void CObtainAwardRecords::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CObtainAwardRecords::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.CObtainAwardRecords.pageLimit)
}

// -------------------------------------------------------------------

// SObtainAwardRecords

// repeated .rewardForLottery.AwardRecordInfo list = 1;
inline int SObtainAwardRecords::_internal_list_size() const {
  return list_.size();
}
inline int SObtainAwardRecords::list_size() const {
  return _internal_list_size();
}
inline void SObtainAwardRecords::clear_list() {
  list_.Clear();
}
inline ::rewardForLottery::AwardRecordInfo* SObtainAwardRecords::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.SObtainAwardRecords.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForLottery::AwardRecordInfo >*
SObtainAwardRecords::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:rewardForLottery.SObtainAwardRecords.list)
  return &list_;
}
inline const ::rewardForLottery::AwardRecordInfo& SObtainAwardRecords::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::rewardForLottery::AwardRecordInfo& SObtainAwardRecords::list(int index) const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SObtainAwardRecords.list)
  return _internal_list(index);
}
inline ::rewardForLottery::AwardRecordInfo* SObtainAwardRecords::_internal_add_list() {
  return list_.Add();
}
inline ::rewardForLottery::AwardRecordInfo* SObtainAwardRecords::add_list() {
  // @@protoc_insertion_point(field_add:rewardForLottery.SObtainAwardRecords.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rewardForLottery::AwardRecordInfo >&
SObtainAwardRecords::list() const {
  // @@protoc_insertion_point(field_list:rewardForLottery.SObtainAwardRecords.list)
  return list_;
}

// string msg = 2;
inline void SObtainAwardRecords::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SObtainAwardRecords::msg() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SObtainAwardRecords.msg)
  return _internal_msg();
}
inline void SObtainAwardRecords::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SObtainAwardRecords.msg)
}
inline std::string* SObtainAwardRecords::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.SObtainAwardRecords.msg)
  return _internal_mutable_msg();
}
inline const std::string& SObtainAwardRecords::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SObtainAwardRecords::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SObtainAwardRecords::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForLottery.SObtainAwardRecords.msg)
}
inline void SObtainAwardRecords::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForLottery.SObtainAwardRecords.msg)
}
inline void SObtainAwardRecords::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForLottery.SObtainAwardRecords.msg)
}
inline std::string* SObtainAwardRecords::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SObtainAwardRecords::release_msg() {
  // @@protoc_insertion_point(field_release:rewardForLottery.SObtainAwardRecords.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SObtainAwardRecords::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.SObtainAwardRecords.msg)
}

// int32 curPage = 3;
inline void SObtainAwardRecords::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SObtainAwardRecords::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SObtainAwardRecords::curpage() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SObtainAwardRecords.curPage)
  return _internal_curpage();
}
inline void SObtainAwardRecords::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SObtainAwardRecords::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SObtainAwardRecords.curPage)
}

// int32 TotalNum = 4;
inline void SObtainAwardRecords::clear_totalnum() {
  totalnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SObtainAwardRecords::_internal_totalnum() const {
  return totalnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SObtainAwardRecords::totalnum() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SObtainAwardRecords.TotalNum)
  return _internal_totalnum();
}
inline void SObtainAwardRecords::_internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalnum_ = value;
}
inline void SObtainAwardRecords::set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalnum(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SObtainAwardRecords.TotalNum)
}

// -------------------------------------------------------------------

// CPhysicalRewardExchange

// int32 goodsId = 1;
inline void CPhysicalRewardExchange::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPhysicalRewardExchange::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPhysicalRewardExchange::goodsid() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.CPhysicalRewardExchange.goodsId)
  return _internal_goodsid();
}
inline void CPhysicalRewardExchange::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CPhysicalRewardExchange::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.CPhysicalRewardExchange.goodsId)
}

// int32 backpackId = 2;
inline void CPhysicalRewardExchange::clear_backpackid() {
  backpackid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPhysicalRewardExchange::_internal_backpackid() const {
  return backpackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPhysicalRewardExchange::backpackid() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.CPhysicalRewardExchange.backpackId)
  return _internal_backpackid();
}
inline void CPhysicalRewardExchange::_internal_set_backpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  backpackid_ = value;
}
inline void CPhysicalRewardExchange::set_backpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_backpackid(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.CPhysicalRewardExchange.backpackId)
}

// string name = 3;
inline void CPhysicalRewardExchange::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CPhysicalRewardExchange::name() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.CPhysicalRewardExchange.name)
  return _internal_name();
}
inline void CPhysicalRewardExchange::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.CPhysicalRewardExchange.name)
}
inline std::string* CPhysicalRewardExchange::mutable_name() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.CPhysicalRewardExchange.name)
  return _internal_mutable_name();
}
inline const std::string& CPhysicalRewardExchange::_internal_name() const {
  return name_.GetNoArena();
}
inline void CPhysicalRewardExchange::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CPhysicalRewardExchange::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForLottery.CPhysicalRewardExchange.name)
}
inline void CPhysicalRewardExchange::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForLottery.CPhysicalRewardExchange.name)
}
inline void CPhysicalRewardExchange::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForLottery.CPhysicalRewardExchange.name)
}
inline std::string* CPhysicalRewardExchange::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CPhysicalRewardExchange::release_name() {
  // @@protoc_insertion_point(field_release:rewardForLottery.CPhysicalRewardExchange.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalRewardExchange::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.CPhysicalRewardExchange.name)
}

// string idCard = 4;
inline void CPhysicalRewardExchange::clear_idcard() {
  idcard_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CPhysicalRewardExchange::idcard() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.CPhysicalRewardExchange.idCard)
  return _internal_idcard();
}
inline void CPhysicalRewardExchange::set_idcard(const std::string& value) {
  _internal_set_idcard(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.CPhysicalRewardExchange.idCard)
}
inline std::string* CPhysicalRewardExchange::mutable_idcard() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.CPhysicalRewardExchange.idCard)
  return _internal_mutable_idcard();
}
inline const std::string& CPhysicalRewardExchange::_internal_idcard() const {
  return idcard_.GetNoArena();
}
inline void CPhysicalRewardExchange::_internal_set_idcard(const std::string& value) {
  
  idcard_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CPhysicalRewardExchange::set_idcard(std::string&& value) {
  
  idcard_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForLottery.CPhysicalRewardExchange.idCard)
}
inline void CPhysicalRewardExchange::set_idcard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idcard_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForLottery.CPhysicalRewardExchange.idCard)
}
inline void CPhysicalRewardExchange::set_idcard(const char* value, size_t size) {
  
  idcard_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForLottery.CPhysicalRewardExchange.idCard)
}
inline std::string* CPhysicalRewardExchange::_internal_mutable_idcard() {
  
  return idcard_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CPhysicalRewardExchange::release_idcard() {
  // @@protoc_insertion_point(field_release:rewardForLottery.CPhysicalRewardExchange.idCard)
  
  return idcard_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalRewardExchange::set_allocated_idcard(std::string* idcard) {
  if (idcard != nullptr) {
    
  } else {
    
  }
  idcard_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idcard);
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.CPhysicalRewardExchange.idCard)
}

// string phone = 5;
inline void CPhysicalRewardExchange::clear_phone() {
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CPhysicalRewardExchange::phone() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.CPhysicalRewardExchange.phone)
  return _internal_phone();
}
inline void CPhysicalRewardExchange::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.CPhysicalRewardExchange.phone)
}
inline std::string* CPhysicalRewardExchange::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.CPhysicalRewardExchange.phone)
  return _internal_mutable_phone();
}
inline const std::string& CPhysicalRewardExchange::_internal_phone() const {
  return phone_.GetNoArena();
}
inline void CPhysicalRewardExchange::_internal_set_phone(const std::string& value) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CPhysicalRewardExchange::set_phone(std::string&& value) {
  
  phone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForLottery.CPhysicalRewardExchange.phone)
}
inline void CPhysicalRewardExchange::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForLottery.CPhysicalRewardExchange.phone)
}
inline void CPhysicalRewardExchange::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForLottery.CPhysicalRewardExchange.phone)
}
inline std::string* CPhysicalRewardExchange::_internal_mutable_phone() {
  
  return phone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CPhysicalRewardExchange::release_phone() {
  // @@protoc_insertion_point(field_release:rewardForLottery.CPhysicalRewardExchange.phone)
  
  return phone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalRewardExchange::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.CPhysicalRewardExchange.phone)
}

// -------------------------------------------------------------------

// SPhysicalRewardExchange

// int32 state = 1;
inline void SPhysicalRewardExchange::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPhysicalRewardExchange::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPhysicalRewardExchange::state() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SPhysicalRewardExchange.state)
  return _internal_state();
}
inline void SPhysicalRewardExchange::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SPhysicalRewardExchange::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SPhysicalRewardExchange.state)
}

// string msg = 2;
inline void SPhysicalRewardExchange::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SPhysicalRewardExchange::msg() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SPhysicalRewardExchange.msg)
  return _internal_msg();
}
inline void SPhysicalRewardExchange::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SPhysicalRewardExchange.msg)
}
inline std::string* SPhysicalRewardExchange::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.SPhysicalRewardExchange.msg)
  return _internal_mutable_msg();
}
inline const std::string& SPhysicalRewardExchange::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SPhysicalRewardExchange::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SPhysicalRewardExchange::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForLottery.SPhysicalRewardExchange.msg)
}
inline void SPhysicalRewardExchange::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForLottery.SPhysicalRewardExchange.msg)
}
inline void SPhysicalRewardExchange::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForLottery.SPhysicalRewardExchange.msg)
}
inline std::string* SPhysicalRewardExchange::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SPhysicalRewardExchange::release_msg() {
  // @@protoc_insertion_point(field_release:rewardForLottery.SPhysicalRewardExchange.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SPhysicalRewardExchange::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.SPhysicalRewardExchange.msg)
}

// -------------------------------------------------------------------

// AwardRecordInfo

// .treasureBox.TreasureBoxRewardContent recordInfo = 1;
inline bool AwardRecordInfo::_internal_has_recordinfo() const {
  return this != internal_default_instance() && recordinfo_ != nullptr;
}
inline bool AwardRecordInfo::has_recordinfo() const {
  return _internal_has_recordinfo();
}
inline const ::treasureBox::TreasureBoxRewardContent& AwardRecordInfo::_internal_recordinfo() const {
  const ::treasureBox::TreasureBoxRewardContent* p = recordinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::treasureBox::TreasureBoxRewardContent*>(
      &::treasureBox::_TreasureBoxRewardContent_default_instance_);
}
inline const ::treasureBox::TreasureBoxRewardContent& AwardRecordInfo::recordinfo() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.AwardRecordInfo.recordInfo)
  return _internal_recordinfo();
}
inline ::treasureBox::TreasureBoxRewardContent* AwardRecordInfo::release_recordinfo() {
  // @@protoc_insertion_point(field_release:rewardForLottery.AwardRecordInfo.recordInfo)
  
  ::treasureBox::TreasureBoxRewardContent* temp = recordinfo_;
  recordinfo_ = nullptr;
  return temp;
}
inline ::treasureBox::TreasureBoxRewardContent* AwardRecordInfo::_internal_mutable_recordinfo() {
  
  if (recordinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::treasureBox::TreasureBoxRewardContent>(GetArenaNoVirtual());
    recordinfo_ = p;
  }
  return recordinfo_;
}
inline ::treasureBox::TreasureBoxRewardContent* AwardRecordInfo::mutable_recordinfo() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.AwardRecordInfo.recordInfo)
  return _internal_mutable_recordinfo();
}
inline void AwardRecordInfo::set_allocated_recordinfo(::treasureBox::TreasureBoxRewardContent* recordinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recordinfo_);
  }
  if (recordinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recordinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recordinfo, submessage_arena);
    }
    
  } else {
    
  }
  recordinfo_ = recordinfo;
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.AwardRecordInfo.recordInfo)
}

// string userIcon = 2;
inline void AwardRecordInfo::clear_usericon() {
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AwardRecordInfo::usericon() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.AwardRecordInfo.userIcon)
  return _internal_usericon();
}
inline void AwardRecordInfo::set_usericon(const std::string& value) {
  _internal_set_usericon(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.AwardRecordInfo.userIcon)
}
inline std::string* AwardRecordInfo::mutable_usericon() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.AwardRecordInfo.userIcon)
  return _internal_mutable_usericon();
}
inline const std::string& AwardRecordInfo::_internal_usericon() const {
  return usericon_.GetNoArena();
}
inline void AwardRecordInfo::_internal_set_usericon(const std::string& value) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AwardRecordInfo::set_usericon(std::string&& value) {
  
  usericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForLottery.AwardRecordInfo.userIcon)
}
inline void AwardRecordInfo::set_usericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForLottery.AwardRecordInfo.userIcon)
}
inline void AwardRecordInfo::set_usericon(const char* value, size_t size) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForLottery.AwardRecordInfo.userIcon)
}
inline std::string* AwardRecordInfo::_internal_mutable_usericon() {
  
  return usericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AwardRecordInfo::release_usericon() {
  // @@protoc_insertion_point(field_release:rewardForLottery.AwardRecordInfo.userIcon)
  
  return usericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AwardRecordInfo::set_allocated_usericon(std::string* usericon) {
  if (usericon != nullptr) {
    
  } else {
    
  }
  usericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usericon);
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.AwardRecordInfo.userIcon)
}

// string userName = 3;
inline void AwardRecordInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AwardRecordInfo::username() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.AwardRecordInfo.userName)
  return _internal_username();
}
inline void AwardRecordInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.AwardRecordInfo.userName)
}
inline std::string* AwardRecordInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:rewardForLottery.AwardRecordInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& AwardRecordInfo::_internal_username() const {
  return username_.GetNoArena();
}
inline void AwardRecordInfo::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AwardRecordInfo::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rewardForLottery.AwardRecordInfo.userName)
}
inline void AwardRecordInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rewardForLottery.AwardRecordInfo.userName)
}
inline void AwardRecordInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rewardForLottery.AwardRecordInfo.userName)
}
inline std::string* AwardRecordInfo::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AwardRecordInfo::release_username() {
  // @@protoc_insertion_point(field_release:rewardForLottery.AwardRecordInfo.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AwardRecordInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:rewardForLottery.AwardRecordInfo.userName)
}

// int32 userId = 4;
inline void AwardRecordInfo::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardRecordInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardRecordInfo::userid() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.AwardRecordInfo.userId)
  return _internal_userid();
}
inline void AwardRecordInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void AwardRecordInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.AwardRecordInfo.userId)
}

// -------------------------------------------------------------------

// CLotteryBestProgress

// -------------------------------------------------------------------

// SLotteryBestProgress

// int32 progress = 1;
inline void SLotteryBestProgress::clear_progress() {
  progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLotteryBestProgress::_internal_progress() const {
  return progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLotteryBestProgress::progress() const {
  // @@protoc_insertion_point(field_get:rewardForLottery.SLotteryBestProgress.progress)
  return _internal_progress();
}
inline void SLotteryBestProgress::_internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_ = value;
}
inline void SLotteryBestProgress::set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:rewardForLottery.SLotteryBestProgress.progress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rewardForLottery

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rewardForLottery_2eproto
