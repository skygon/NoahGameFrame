// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: violationFeedback.proto

#include "violationFeedback.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace violationFeedback {
class CViolationFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CViolationFeedback> _instance;
} _CViolationFeedback_default_instance_;
class SViolationFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SViolationFeedback> _instance;
} _SViolationFeedback_default_instance_;
}  // namespace violationFeedback
static void InitDefaultsscc_info_CViolationFeedback_violationFeedback_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::violationFeedback::_CViolationFeedback_default_instance_;
    new (ptr) ::violationFeedback::CViolationFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::violationFeedback::CViolationFeedback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CViolationFeedback_violationFeedback_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CViolationFeedback_violationFeedback_2eproto}, {}};

static void InitDefaultsscc_info_SViolationFeedback_violationFeedback_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::violationFeedback::_SViolationFeedback_default_instance_;
    new (ptr) ::violationFeedback::SViolationFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::violationFeedback::SViolationFeedback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SViolationFeedback_violationFeedback_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SViolationFeedback_violationFeedback_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_violationFeedback_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_violationFeedback_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_violationFeedback_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_violationFeedback_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::violationFeedback::CViolationFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::violationFeedback::CViolationFeedback, type_),
  PROTOBUF_FIELD_OFFSET(::violationFeedback::CViolationFeedback, sourceid_),
  PROTOBUF_FIELD_OFFSET(::violationFeedback::CViolationFeedback, tag_),
  PROTOBUF_FIELD_OFFSET(::violationFeedback::CViolationFeedback, desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::violationFeedback::SViolationFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::violationFeedback::SViolationFeedback, code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::violationFeedback::CViolationFeedback)},
  { 9, -1, sizeof(::violationFeedback::SViolationFeedback)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::violationFeedback::_CViolationFeedback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::violationFeedback::_SViolationFeedback_default_instance_),
};

const char descriptor_table_protodef_violationFeedback_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027violationFeedback.proto\022\021violationFeed"
  "back\"y\n\022CViolationFeedback\0226\n\004Type\030\001 \001(\016"
  "2(.violationFeedback.ViolationFeedbackTy"
  "pe\022\020\n\010SourceId\030\002 \001(\005\022\013\n\003Tag\030\003 \001(\t\022\014\n\004Des"
  "c\030\004 \001(\t\"\"\n\022SViolationFeedback\022\014\n\004code\030\001 "
  "\001(\005*\177\n\025ViolationFeedbackType\022\023\n\017Feedback"
  "Default\020\000\022\022\n\016FeedbackPlayer\020\001\022\021\n\rFeedbac"
  "kScene\020\002\022\022\n\016FeedbackAvatar\020\003\022\026\n\022Feedback"
  "MjLeaveMsg\020\004B-\n\030com.dayou.space.protobuf"
  "B\021ViolationFeedbackb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_violationFeedback_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_violationFeedback_2eproto_sccs[2] = {
  &scc_info_CViolationFeedback_violationFeedback_2eproto.base,
  &scc_info_SViolationFeedback_violationFeedback_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_violationFeedback_2eproto_once;
static bool descriptor_table_violationFeedback_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_violationFeedback_2eproto = {
  &descriptor_table_violationFeedback_2eproto_initialized, descriptor_table_protodef_violationFeedback_2eproto, "violationFeedback.proto", 387,
  &descriptor_table_violationFeedback_2eproto_once, descriptor_table_violationFeedback_2eproto_sccs, descriptor_table_violationFeedback_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_violationFeedback_2eproto::offsets,
  file_level_metadata_violationFeedback_2eproto, 2, file_level_enum_descriptors_violationFeedback_2eproto, file_level_service_descriptors_violationFeedback_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_violationFeedback_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_violationFeedback_2eproto), true);
namespace violationFeedback {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViolationFeedbackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_violationFeedback_2eproto);
  return file_level_enum_descriptors_violationFeedback_2eproto[0];
}
bool ViolationFeedbackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CViolationFeedback::InitAsDefaultInstance() {
}
class CViolationFeedback::_Internal {
 public:
};

CViolationFeedback::CViolationFeedback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:violationFeedback.CViolationFeedback)
}
CViolationFeedback::CViolationFeedback(const CViolationFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sourceid_));
  // @@protoc_insertion_point(copy_constructor:violationFeedback.CViolationFeedback)
}

void CViolationFeedback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CViolationFeedback_violationFeedback_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sourceid_));
}

CViolationFeedback::~CViolationFeedback() {
  // @@protoc_insertion_point(destructor:violationFeedback.CViolationFeedback)
  SharedDtor();
}

void CViolationFeedback::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CViolationFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CViolationFeedback& CViolationFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CViolationFeedback_violationFeedback_2eproto.base);
  return *internal_default_instance();
}


void CViolationFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:violationFeedback.CViolationFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sourceid_));
  _internal_metadata_.Clear();
}

const char* CViolationFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .violationFeedback.ViolationFeedbackType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::violationFeedback::ViolationFeedbackType>(val));
        } else goto handle_unusual;
        continue;
      // int32 SourceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "violationFeedback.CViolationFeedback.Tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "violationFeedback.CViolationFeedback.Desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CViolationFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:violationFeedback.CViolationFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .violationFeedback.ViolationFeedbackType Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 SourceId = 2;
  if (this->sourceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sourceid(), target);
  }

  // string Tag = 3;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "violationFeedback.CViolationFeedback.Tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // string Desc = 4;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "violationFeedback.CViolationFeedback.Desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:violationFeedback.CViolationFeedback)
  return target;
}

size_t CViolationFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:violationFeedback.CViolationFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Tag = 3;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string Desc = 4;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // .violationFeedback.ViolationFeedbackType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 SourceId = 2;
  if (this->sourceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CViolationFeedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:violationFeedback.CViolationFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const CViolationFeedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CViolationFeedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:violationFeedback.CViolationFeedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:violationFeedback.CViolationFeedback)
    MergeFrom(*source);
  }
}

void CViolationFeedback::MergeFrom(const CViolationFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:violationFeedback.CViolationFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.sourceid() != 0) {
    _internal_set_sourceid(from._internal_sourceid());
  }
}

void CViolationFeedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:violationFeedback.CViolationFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CViolationFeedback::CopyFrom(const CViolationFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:violationFeedback.CViolationFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CViolationFeedback::IsInitialized() const {
  return true;
}

void CViolationFeedback::InternalSwap(CViolationFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(sourceid_, other->sourceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CViolationFeedback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SViolationFeedback::InitAsDefaultInstance() {
}
class SViolationFeedback::_Internal {
 public:
};

SViolationFeedback::SViolationFeedback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:violationFeedback.SViolationFeedback)
}
SViolationFeedback::SViolationFeedback(const SViolationFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:violationFeedback.SViolationFeedback)
}

void SViolationFeedback::SharedCtor() {
  code_ = 0;
}

SViolationFeedback::~SViolationFeedback() {
  // @@protoc_insertion_point(destructor:violationFeedback.SViolationFeedback)
  SharedDtor();
}

void SViolationFeedback::SharedDtor() {
}

void SViolationFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SViolationFeedback& SViolationFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SViolationFeedback_violationFeedback_2eproto.base);
  return *internal_default_instance();
}


void SViolationFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:violationFeedback.SViolationFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* SViolationFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SViolationFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:violationFeedback.SViolationFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:violationFeedback.SViolationFeedback)
  return target;
}

size_t SViolationFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:violationFeedback.SViolationFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SViolationFeedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:violationFeedback.SViolationFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const SViolationFeedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SViolationFeedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:violationFeedback.SViolationFeedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:violationFeedback.SViolationFeedback)
    MergeFrom(*source);
  }
}

void SViolationFeedback::MergeFrom(const SViolationFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:violationFeedback.SViolationFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SViolationFeedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:violationFeedback.SViolationFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SViolationFeedback::CopyFrom(const SViolationFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:violationFeedback.SViolationFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SViolationFeedback::IsInitialized() const {
  return true;
}

void SViolationFeedback::InternalSwap(SViolationFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SViolationFeedback::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace violationFeedback
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::violationFeedback::CViolationFeedback* Arena::CreateMaybeMessage< ::violationFeedback::CViolationFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::violationFeedback::CViolationFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::violationFeedback::SViolationFeedback* Arena::CreateMaybeMessage< ::violationFeedback::SViolationFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::violationFeedback::SViolationFeedback >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
