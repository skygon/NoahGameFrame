// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mjDance.proto

#include "mjDance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mjDance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjDancePosition_mjDance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mjDance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjDanceRank_mjDance_2eproto;
namespace mj {
class CMjDancePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjDancePosition> _instance;
} _CMjDancePosition_default_instance_;
class SMjDancePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjDancePosition> _instance;
} _SMjDancePosition_default_instance_;
class BMjDancePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMjDancePosition> _instance;
} _BMjDancePosition_default_instance_;
class CMjUserDanceActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjUserDanceAction> _instance;
} _CMjUserDanceAction_default_instance_;
class SMjUserDanceActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjUserDanceAction> _instance;
} _SMjUserDanceAction_default_instance_;
class CMjDanceStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjDanceStatus> _instance;
} _CMjDanceStatus_default_instance_;
class SMjDanceStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjDanceStatus> _instance;
} _SMjDanceStatus_default_instance_;
class CMjDanceScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjDanceScore> _instance;
} _CMjDanceScore_default_instance_;
class SMjDanceScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjDanceScore> _instance;
} _SMjDanceScore_default_instance_;
class CMjDanceRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMjDanceRank> _instance;
} _CMjDanceRank_default_instance_;
class SMjDanceRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMjDanceRank> _instance;
} _SMjDanceRank_default_instance_;
class BMjDanceRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMjDanceRank> _instance;
} _BMjDanceRank_default_instance_;
}  // namespace mj
static void InitDefaultsscc_info_BMjDancePosition_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_BMjDancePosition_default_instance_;
    new (ptr) ::mj::BMjDancePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::BMjDancePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjDancePosition_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMjDancePosition_mjDance_2eproto}, {}};

static void InitDefaultsscc_info_BMjDanceRank_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_BMjDanceRank_default_instance_;
    new (ptr) ::mj::BMjDanceRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::BMjDanceRank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMjDanceRank_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMjDanceRank_mjDance_2eproto}, {}};

static void InitDefaultsscc_info_CMjDancePosition_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjDancePosition_default_instance_;
    new (ptr) ::mj::CMjDancePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjDancePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjDancePosition_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjDancePosition_mjDance_2eproto}, {}};

static void InitDefaultsscc_info_CMjDanceRank_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjDanceRank_default_instance_;
    new (ptr) ::mj::CMjDanceRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjDanceRank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjDanceRank_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjDanceRank_mjDance_2eproto}, {}};

static void InitDefaultsscc_info_CMjDanceScore_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjDanceScore_default_instance_;
    new (ptr) ::mj::CMjDanceScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjDanceScore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjDanceScore_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjDanceScore_mjDance_2eproto}, {}};

static void InitDefaultsscc_info_CMjDanceStatus_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjDanceStatus_default_instance_;
    new (ptr) ::mj::CMjDanceStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjDanceStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjDanceStatus_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjDanceStatus_mjDance_2eproto}, {}};

static void InitDefaultsscc_info_CMjUserDanceAction_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_CMjUserDanceAction_default_instance_;
    new (ptr) ::mj::CMjUserDanceAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::CMjUserDanceAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMjUserDanceAction_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMjUserDanceAction_mjDance_2eproto}, {}};

static void InitDefaultsscc_info_SMjDancePosition_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjDancePosition_default_instance_;
    new (ptr) ::mj::SMjDancePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjDancePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMjDancePosition_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMjDancePosition_mjDance_2eproto}, {
      &scc_info_BMjDancePosition_mjDance_2eproto.base,}};

static void InitDefaultsscc_info_SMjDanceRank_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjDanceRank_default_instance_;
    new (ptr) ::mj::SMjDanceRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjDanceRank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMjDanceRank_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMjDanceRank_mjDance_2eproto}, {
      &scc_info_BMjDanceRank_mjDance_2eproto.base,}};

static void InitDefaultsscc_info_SMjDanceScore_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjDanceScore_default_instance_;
    new (ptr) ::mj::SMjDanceScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjDanceScore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMjDanceScore_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMjDanceScore_mjDance_2eproto}, {}};

static void InitDefaultsscc_info_SMjDanceStatus_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjDanceStatus_default_instance_;
    new (ptr) ::mj::SMjDanceStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjDanceStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMjDanceStatus_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMjDanceStatus_mjDance_2eproto}, {}};

static void InitDefaultsscc_info_SMjUserDanceAction_mjDance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mj::_SMjUserDanceAction_default_instance_;
    new (ptr) ::mj::SMjUserDanceAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mj::SMjUserDanceAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SMjUserDanceAction_mjDance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SMjUserDanceAction_mjDance_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mjDance_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mjDance_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mjDance_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mjDance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjDancePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDancePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDancePosition, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::BMjDancePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::BMjDancePosition, number_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjDancePosition, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjUserDanceAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::CMjUserDanceAction, number_),
  PROTOBUF_FIELD_OFFSET(::mj::CMjUserDanceAction, action_),
  PROTOBUF_FIELD_OFFSET(::mj::CMjUserDanceAction, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserDanceAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserDanceAction, uid_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserDanceAction, state_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserDanceAction, msg_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserDanceAction, action_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjUserDanceAction, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjDanceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, danceid_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, title_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, music_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, duration_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, current_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, countdown_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, starttime_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, endtime_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceStatus, songstarttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjDanceScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::CMjDanceScore, danceid_),
  PROTOBUF_FIELD_OFFSET(::mj::CMjDanceScore, score_),
  PROTOBUF_FIELD_OFFSET(::mj::CMjDanceScore, uid_),
  PROTOBUF_FIELD_OFFSET(::mj::CMjDanceScore, number_),
  PROTOBUF_FIELD_OFFSET(::mj::CMjDanceScore, ipcity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceScore, msg_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceScore, state_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceScore, defeatpercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::CMjDanceRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceRank, title_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceRank, starttime_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceRank, endtime_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceRank, myrank_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceRank, defeatpercent_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceRank, myscore_),
  PROTOBUF_FIELD_OFFSET(::mj::SMjDanceRank, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, uid_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, nick_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, score_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, rank_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, avatarid_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, avatarkey_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, usericon_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, ipcity_),
  PROTOBUF_FIELD_OFFSET(::mj::BMjDanceRank, usertitle_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mj::CMjDancePosition)},
  { 5, -1, sizeof(::mj::SMjDancePosition)},
  { 11, -1, sizeof(::mj::BMjDancePosition)},
  { 18, -1, sizeof(::mj::CMjUserDanceAction)},
  { 26, -1, sizeof(::mj::SMjUserDanceAction)},
  { 36, -1, sizeof(::mj::CMjDanceStatus)},
  { 41, -1, sizeof(::mj::SMjDanceStatus)},
  { 55, -1, sizeof(::mj::CMjDanceScore)},
  { 65, -1, sizeof(::mj::SMjDanceScore)},
  { 73, -1, sizeof(::mj::CMjDanceRank)},
  { 78, -1, sizeof(::mj::SMjDanceRank)},
  { 90, -1, sizeof(::mj::BMjDanceRank)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjDancePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjDancePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_BMjDancePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjUserDanceAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjUserDanceAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjDanceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjDanceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjDanceScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjDanceScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_CMjDanceRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_SMjDanceRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mj::_BMjDanceRank_default_instance_),
};

const char descriptor_table_protodef_mjDance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmjDance.proto\022\002mj\"\022\n\020CMjDancePosition\""
  "6\n\020SMjDancePosition\022\"\n\004list\030\001 \003(\0132\024.mj.B"
  "MjDancePosition\"/\n\020BMjDancePosition\022\016\n\006n"
  "umber\030\001 \001(\005\022\013\n\003uid\030\002 \001(\005\"A\n\022CMjUserDance"
  "Action\022\016\n\006number\030\001 \001(\005\022\016\n\006action\030\002 \001(\005\022\013"
  "\n\003uid\030\003 \001(\005\"]\n\022SMjUserDanceAction\022\013\n\003uid"
  "\030\001 \001(\005\022\r\n\005state\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\022\016\n\006ac"
  "tion\030\004 \001(\005\022\016\n\006number\030\005 \001(\005\"\020\n\016CMjDanceSt"
  "atus\"\260\001\n\016SMjDanceStatus\022\017\n\007danceId\030\001 \001(\005"
  "\022\r\n\005title\030\002 \001(\t\022\r\n\005music\030\003 \001(\t\022\020\n\010durati"
  "on\030\004 \001(\005\022\017\n\007current\030\005 \001(\005\022\021\n\tcountdown\030\006"
  " \001(\005\022\021\n\tstartTime\030\007 \001(\003\022\017\n\007endTime\030\010 \001(\003"
  "\022\025\n\rsongStartTime\030\t \001(\003\"\\\n\rCMjDanceScore"
  "\022\017\n\007danceId\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\022\013\n\003uid\030"
  "\003 \001(\005\022\016\n\006number\030\004 \001(\005\022\016\n\006ipCity\030\005 \001(\t\"B\n"
  "\rSMjDanceScore\022\013\n\003msg\030\001 \001(\t\022\r\n\005state\030\002 \001"
  "(\005\022\025\n\rdefeatPercent\030\003 \001(\005\"\016\n\014CMjDanceRan"
  "k\"\231\001\n\014SMjDanceRank\022\r\n\005title\030\001 \001(\t\022\021\n\tsta"
  "rtTime\030\002 \001(\003\022\017\n\007endTime\030\003 \001(\003\022\016\n\006myRank\030"
  "\004 \001(\005\022\025\n\rdefeatPercent\030\005 \001(\005\022\017\n\007myScore\030"
  "\006 \001(\005\022\036\n\004list\030\007 \003(\0132\020.mj.BMjDanceRank\"\240\001"
  "\n\014BMjDanceRank\022\013\n\003uid\030\001 \001(\005\022\014\n\004nick\030\002 \001("
  "\t\022\r\n\005score\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005\022\020\n\010avatar"
  "Id\030\005 \001(\005\022\021\n\tavatarKey\030\006 \001(\005\022\020\n\010userIcon\030"
  "\007 \001(\t\022\016\n\006ipCity\030\010 \001(\t\022\021\n\tuserTitle\030\t \001(\t"
  "B-\n\030com.dayou.space.protobufB\010MJWarmupZ\007"
  "./pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mjDance_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mjDance_2eproto_sccs[12] = {
  &scc_info_BMjDancePosition_mjDance_2eproto.base,
  &scc_info_BMjDanceRank_mjDance_2eproto.base,
  &scc_info_CMjDancePosition_mjDance_2eproto.base,
  &scc_info_CMjDanceRank_mjDance_2eproto.base,
  &scc_info_CMjDanceScore_mjDance_2eproto.base,
  &scc_info_CMjDanceStatus_mjDance_2eproto.base,
  &scc_info_CMjUserDanceAction_mjDance_2eproto.base,
  &scc_info_SMjDancePosition_mjDance_2eproto.base,
  &scc_info_SMjDanceRank_mjDance_2eproto.base,
  &scc_info_SMjDanceScore_mjDance_2eproto.base,
  &scc_info_SMjDanceStatus_mjDance_2eproto.base,
  &scc_info_SMjUserDanceAction_mjDance_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mjDance_2eproto_once;
static bool descriptor_table_mjDance_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mjDance_2eproto = {
  &descriptor_table_mjDance_2eproto_initialized, descriptor_table_protodef_mjDance_2eproto, "mjDance.proto", 1055,
  &descriptor_table_mjDance_2eproto_once, descriptor_table_mjDance_2eproto_sccs, descriptor_table_mjDance_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_mjDance_2eproto::offsets,
  file_level_metadata_mjDance_2eproto, 12, file_level_enum_descriptors_mjDance_2eproto, file_level_service_descriptors_mjDance_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mjDance_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mjDance_2eproto), true);
namespace mj {

// ===================================================================

void CMjDancePosition::InitAsDefaultInstance() {
}
class CMjDancePosition::_Internal {
 public:
};

CMjDancePosition::CMjDancePosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjDancePosition)
}
CMjDancePosition::CMjDancePosition(const CMjDancePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mj.CMjDancePosition)
}

void CMjDancePosition::SharedCtor() {
}

CMjDancePosition::~CMjDancePosition() {
  // @@protoc_insertion_point(destructor:mj.CMjDancePosition)
  SharedDtor();
}

void CMjDancePosition::SharedDtor() {
}

void CMjDancePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjDancePosition& CMjDancePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjDancePosition_mjDance_2eproto.base);
  return *internal_default_instance();
}


void CMjDancePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjDancePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMjDancePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjDancePosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjDancePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjDancePosition)
  return target;
}

size_t CMjDancePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjDancePosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjDancePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjDancePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjDancePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjDancePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjDancePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjDancePosition)
    MergeFrom(*source);
  }
}

void CMjDancePosition::MergeFrom(const CMjDancePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjDancePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMjDancePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjDancePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjDancePosition::CopyFrom(const CMjDancePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjDancePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjDancePosition::IsInitialized() const {
  return true;
}

void CMjDancePosition::InternalSwap(CMjDancePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjDancePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjDancePosition::InitAsDefaultInstance() {
}
class SMjDancePosition::_Internal {
 public:
};

SMjDancePosition::SMjDancePosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjDancePosition)
}
SMjDancePosition::SMjDancePosition(const SMjDancePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mj.SMjDancePosition)
}

void SMjDancePosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjDancePosition_mjDance_2eproto.base);
}

SMjDancePosition::~SMjDancePosition() {
  // @@protoc_insertion_point(destructor:mj.SMjDancePosition)
  SharedDtor();
}

void SMjDancePosition::SharedDtor() {
}

void SMjDancePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjDancePosition& SMjDancePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjDancePosition_mjDance_2eproto.base);
  return *internal_default_instance();
}


void SMjDancePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjDancePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SMjDancePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mj.BMjDancePosition list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjDancePosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjDancePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mj.BMjDancePosition list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjDancePosition)
  return target;
}

size_t SMjDancePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjDancePosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mj.BMjDancePosition list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjDancePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjDancePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjDancePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjDancePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjDancePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjDancePosition)
    MergeFrom(*source);
  }
}

void SMjDancePosition::MergeFrom(const SMjDancePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjDancePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SMjDancePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjDancePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjDancePosition::CopyFrom(const SMjDancePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjDancePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjDancePosition::IsInitialized() const {
  return true;
}

void SMjDancePosition::InternalSwap(SMjDancePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjDancePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMjDancePosition::InitAsDefaultInstance() {
}
class BMjDancePosition::_Internal {
 public:
};

BMjDancePosition::BMjDancePosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.BMjDancePosition)
}
BMjDancePosition::BMjDancePosition(const BMjDancePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&number_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:mj.BMjDancePosition)
}

void BMjDancePosition::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&number_)) + sizeof(uid_));
}

BMjDancePosition::~BMjDancePosition() {
  // @@protoc_insertion_point(destructor:mj.BMjDancePosition)
  SharedDtor();
}

void BMjDancePosition::SharedDtor() {
}

void BMjDancePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMjDancePosition& BMjDancePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMjDancePosition_mjDance_2eproto.base);
  return *internal_default_instance();
}


void BMjDancePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.BMjDancePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&number_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* BMjDancePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMjDancePosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.BMjDancePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.BMjDancePosition)
  return target;
}

size_t BMjDancePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.BMjDancePosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMjDancePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.BMjDancePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const BMjDancePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMjDancePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.BMjDancePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.BMjDancePosition)
    MergeFrom(*source);
  }
}

void BMjDancePosition::MergeFrom(const BMjDancePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.BMjDancePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void BMjDancePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.BMjDancePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMjDancePosition::CopyFrom(const BMjDancePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.BMjDancePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMjDancePosition::IsInitialized() const {
  return true;
}

void BMjDancePosition::InternalSwap(BMjDancePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_, other->number_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMjDancePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjUserDanceAction::InitAsDefaultInstance() {
}
class CMjUserDanceAction::_Internal {
 public:
};

CMjUserDanceAction::CMjUserDanceAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjUserDanceAction)
}
CMjUserDanceAction::CMjUserDanceAction(const CMjUserDanceAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&number_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:mj.CMjUserDanceAction)
}

void CMjUserDanceAction::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&number_)) + sizeof(uid_));
}

CMjUserDanceAction::~CMjUserDanceAction() {
  // @@protoc_insertion_point(destructor:mj.CMjUserDanceAction)
  SharedDtor();
}

void CMjUserDanceAction::SharedDtor() {
}

void CMjUserDanceAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjUserDanceAction& CMjUserDanceAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjUserDanceAction_mjDance_2eproto.base);
  return *internal_default_instance();
}


void CMjUserDanceAction::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjUserDanceAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&number_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* CMjUserDanceAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjUserDanceAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjUserDanceAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  // int32 action = 2;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_action(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjUserDanceAction)
  return target;
}

size_t CMjUserDanceAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjUserDanceAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  // int32 action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjUserDanceAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjUserDanceAction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjUserDanceAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjUserDanceAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjUserDanceAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjUserDanceAction)
    MergeFrom(*source);
  }
}

void CMjUserDanceAction::MergeFrom(const CMjUserDanceAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjUserDanceAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CMjUserDanceAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjUserDanceAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjUserDanceAction::CopyFrom(const CMjUserDanceAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjUserDanceAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjUserDanceAction::IsInitialized() const {
  return true;
}

void CMjUserDanceAction::InternalSwap(CMjUserDanceAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_, other->number_);
  swap(action_, other->action_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjUserDanceAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjUserDanceAction::InitAsDefaultInstance() {
}
class SMjUserDanceAction::_Internal {
 public:
};

SMjUserDanceAction::SMjUserDanceAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjUserDanceAction)
}
SMjUserDanceAction::SMjUserDanceAction(const SMjUserDanceAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:mj.SMjUserDanceAction)
}

void SMjUserDanceAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjUserDanceAction_mjDance_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(number_));
}

SMjUserDanceAction::~SMjUserDanceAction() {
  // @@protoc_insertion_point(destructor:mj.SMjUserDanceAction)
  SharedDtor();
}

void SMjUserDanceAction::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjUserDanceAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjUserDanceAction& SMjUserDanceAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjUserDanceAction_mjDance_2eproto.base);
  return *internal_default_instance();
}


void SMjUserDanceAction::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjUserDanceAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(number_));
  _internal_metadata_.Clear();
}

const char* SMjUserDanceAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjUserDanceAction.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjUserDanceAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjUserDanceAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjUserDanceAction.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // int32 action = 4;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_action(), target);
  }

  // int32 number = 5;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjUserDanceAction)
  return target;
}

size_t SMjUserDanceAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjUserDanceAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  // int32 number = 5;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjUserDanceAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjUserDanceAction)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjUserDanceAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjUserDanceAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjUserDanceAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjUserDanceAction)
    MergeFrom(*source);
  }
}

void SMjUserDanceAction::MergeFrom(const SMjUserDanceAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjUserDanceAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void SMjUserDanceAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjUserDanceAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjUserDanceAction::CopyFrom(const SMjUserDanceAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjUserDanceAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjUserDanceAction::IsInitialized() const {
  return true;
}

void SMjUserDanceAction::InternalSwap(SMjUserDanceAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(state_, other->state_);
  swap(action_, other->action_);
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjUserDanceAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjDanceStatus::InitAsDefaultInstance() {
}
class CMjDanceStatus::_Internal {
 public:
};

CMjDanceStatus::CMjDanceStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjDanceStatus)
}
CMjDanceStatus::CMjDanceStatus(const CMjDanceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mj.CMjDanceStatus)
}

void CMjDanceStatus::SharedCtor() {
}

CMjDanceStatus::~CMjDanceStatus() {
  // @@protoc_insertion_point(destructor:mj.CMjDanceStatus)
  SharedDtor();
}

void CMjDanceStatus::SharedDtor() {
}

void CMjDanceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjDanceStatus& CMjDanceStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjDanceStatus_mjDance_2eproto.base);
  return *internal_default_instance();
}


void CMjDanceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjDanceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMjDanceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjDanceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjDanceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjDanceStatus)
  return target;
}

size_t CMjDanceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjDanceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjDanceStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjDanceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjDanceStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjDanceStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjDanceStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjDanceStatus)
    MergeFrom(*source);
  }
}

void CMjDanceStatus::MergeFrom(const CMjDanceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjDanceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMjDanceStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjDanceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjDanceStatus::CopyFrom(const CMjDanceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjDanceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjDanceStatus::IsInitialized() const {
  return true;
}

void CMjDanceStatus::InternalSwap(CMjDanceStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjDanceStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjDanceStatus::InitAsDefaultInstance() {
}
class SMjDanceStatus::_Internal {
 public:
};

SMjDanceStatus::SMjDanceStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjDanceStatus)
}
SMjDanceStatus::SMjDanceStatus(const SMjDanceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  music_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_music().empty()) {
    music_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.music_);
  }
  ::memcpy(&danceid_, &from.danceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&songstarttime_) -
    reinterpret_cast<char*>(&danceid_)) + sizeof(songstarttime_));
  // @@protoc_insertion_point(copy_constructor:mj.SMjDanceStatus)
}

void SMjDanceStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjDanceStatus_mjDance_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  music_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&danceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&songstarttime_) -
      reinterpret_cast<char*>(&danceid_)) + sizeof(songstarttime_));
}

SMjDanceStatus::~SMjDanceStatus() {
  // @@protoc_insertion_point(destructor:mj.SMjDanceStatus)
  SharedDtor();
}

void SMjDanceStatus::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  music_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjDanceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjDanceStatus& SMjDanceStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjDanceStatus_mjDance_2eproto.base);
  return *internal_default_instance();
}


void SMjDanceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjDanceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  music_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&danceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&songstarttime_) -
      reinterpret_cast<char*>(&danceid_)) + sizeof(songstarttime_));
  _internal_metadata_.Clear();
}

const char* SMjDanceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 danceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          danceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjDanceStatus.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string music = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_music();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjDanceStatus.music"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countdown = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          countdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 startTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 songStartTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          songstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjDanceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjDanceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 danceId = 1;
  if (this->danceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_danceid(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjDanceStatus.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string music = 3;
  if (this->music().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_music().data(), static_cast<int>(this->_internal_music().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjDanceStatus.music");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_music(), target);
  }

  // int32 duration = 4;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_duration(), target);
  }

  // int32 current = 5;
  if (this->current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_current(), target);
  }

  // int32 countdown = 6;
  if (this->countdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_countdown(), target);
  }

  // int64 startTime = 7;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_starttime(), target);
  }

  // int64 endTime = 8;
  if (this->endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_endtime(), target);
  }

  // int64 songStartTime = 9;
  if (this->songstarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_songstarttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjDanceStatus)
  return target;
}

size_t SMjDanceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjDanceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string music = 3;
  if (this->music().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_music());
  }

  // int32 danceId = 1;
  if (this->danceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_danceid());
  }

  // int32 duration = 4;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  // int32 current = 5;
  if (this->current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current());
  }

  // int32 countdown = 6;
  if (this->countdown() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countdown());
  }

  // int64 startTime = 7;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_starttime());
  }

  // int64 endTime = 8;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endtime());
  }

  // int64 songStartTime = 9;
  if (this->songstarttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_songstarttime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjDanceStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjDanceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjDanceStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjDanceStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjDanceStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjDanceStatus)
    MergeFrom(*source);
  }
}

void SMjDanceStatus::MergeFrom(const SMjDanceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjDanceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.music().size() > 0) {

    music_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.music_);
  }
  if (from.danceid() != 0) {
    _internal_set_danceid(from._internal_danceid());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from.countdown() != 0) {
    _internal_set_countdown(from._internal_countdown());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.songstarttime() != 0) {
    _internal_set_songstarttime(from._internal_songstarttime());
  }
}

void SMjDanceStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjDanceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjDanceStatus::CopyFrom(const SMjDanceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjDanceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjDanceStatus::IsInitialized() const {
  return true;
}

void SMjDanceStatus::InternalSwap(SMjDanceStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  music_.Swap(&other->music_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(danceid_, other->danceid_);
  swap(duration_, other->duration_);
  swap(current_, other->current_);
  swap(countdown_, other->countdown_);
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(songstarttime_, other->songstarttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjDanceStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjDanceScore::InitAsDefaultInstance() {
}
class CMjDanceScore::_Internal {
 public:
};

CMjDanceScore::CMjDanceScore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjDanceScore)
}
CMjDanceScore::CMjDanceScore(const CMjDanceScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipcity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipcity().empty()) {
    ipcity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipcity_);
  }
  ::memcpy(&danceid_, &from.danceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&danceid_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:mj.CMjDanceScore)
}

void CMjDanceScore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMjDanceScore_mjDance_2eproto.base);
  ipcity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&danceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&danceid_)) + sizeof(number_));
}

CMjDanceScore::~CMjDanceScore() {
  // @@protoc_insertion_point(destructor:mj.CMjDanceScore)
  SharedDtor();
}

void CMjDanceScore::SharedDtor() {
  ipcity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMjDanceScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjDanceScore& CMjDanceScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjDanceScore_mjDance_2eproto.base);
  return *internal_default_instance();
}


void CMjDanceScore::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjDanceScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipcity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&danceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&danceid_)) + sizeof(number_));
  _internal_metadata_.Clear();
}

const char* CMjDanceScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 danceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          danceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipCity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ipcity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.CMjDanceScore.ipCity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjDanceScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjDanceScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 danceId = 1;
  if (this->danceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_danceid(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  // int32 number = 4;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_number(), target);
  }

  // string ipCity = 5;
  if (this->ipcity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipcity().data(), static_cast<int>(this->_internal_ipcity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.CMjDanceScore.ipCity");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipcity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjDanceScore)
  return target;
}

size_t CMjDanceScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjDanceScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ipCity = 5;
  if (this->ipcity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipcity());
  }

  // int32 danceId = 1;
  if (this->danceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_danceid());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 number = 4;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjDanceScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjDanceScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjDanceScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjDanceScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjDanceScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjDanceScore)
    MergeFrom(*source);
  }
}

void CMjDanceScore::MergeFrom(const CMjDanceScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjDanceScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipcity().size() > 0) {

    ipcity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipcity_);
  }
  if (from.danceid() != 0) {
    _internal_set_danceid(from._internal_danceid());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void CMjDanceScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjDanceScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjDanceScore::CopyFrom(const CMjDanceScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjDanceScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjDanceScore::IsInitialized() const {
  return true;
}

void CMjDanceScore::InternalSwap(CMjDanceScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ipcity_.Swap(&other->ipcity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(danceid_, other->danceid_);
  swap(score_, other->score_);
  swap(uid_, other->uid_);
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjDanceScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjDanceScore::InitAsDefaultInstance() {
}
class SMjDanceScore::_Internal {
 public:
};

SMjDanceScore::SMjDanceScore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjDanceScore)
}
SMjDanceScore::SMjDanceScore(const SMjDanceScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&defeatpercent_) -
    reinterpret_cast<char*>(&state_)) + sizeof(defeatpercent_));
  // @@protoc_insertion_point(copy_constructor:mj.SMjDanceScore)
}

void SMjDanceScore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjDanceScore_mjDance_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defeatpercent_) -
      reinterpret_cast<char*>(&state_)) + sizeof(defeatpercent_));
}

SMjDanceScore::~SMjDanceScore() {
  // @@protoc_insertion_point(destructor:mj.SMjDanceScore)
  SharedDtor();
}

void SMjDanceScore::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjDanceScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjDanceScore& SMjDanceScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjDanceScore_mjDance_2eproto.base);
  return *internal_default_instance();
}


void SMjDanceScore::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjDanceScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defeatpercent_) -
      reinterpret_cast<char*>(&state_)) + sizeof(defeatpercent_));
  _internal_metadata_.Clear();
}

const char* SMjDanceScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjDanceScore.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 defeatPercent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          defeatpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjDanceScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjDanceScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjDanceScore.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // int32 defeatPercent = 3;
  if (this->defeatpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_defeatpercent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjDanceScore)
  return target;
}

size_t SMjDanceScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjDanceScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 defeatPercent = 3;
  if (this->defeatpercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_defeatpercent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjDanceScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjDanceScore)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjDanceScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjDanceScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjDanceScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjDanceScore)
    MergeFrom(*source);
  }
}

void SMjDanceScore::MergeFrom(const SMjDanceScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjDanceScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.defeatpercent() != 0) {
    _internal_set_defeatpercent(from._internal_defeatpercent());
  }
}

void SMjDanceScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjDanceScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjDanceScore::CopyFrom(const SMjDanceScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjDanceScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjDanceScore::IsInitialized() const {
  return true;
}

void SMjDanceScore::InternalSwap(SMjDanceScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(defeatpercent_, other->defeatpercent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjDanceScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMjDanceRank::InitAsDefaultInstance() {
}
class CMjDanceRank::_Internal {
 public:
};

CMjDanceRank::CMjDanceRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.CMjDanceRank)
}
CMjDanceRank::CMjDanceRank(const CMjDanceRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mj.CMjDanceRank)
}

void CMjDanceRank::SharedCtor() {
}

CMjDanceRank::~CMjDanceRank() {
  // @@protoc_insertion_point(destructor:mj.CMjDanceRank)
  SharedDtor();
}

void CMjDanceRank::SharedDtor() {
}

void CMjDanceRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMjDanceRank& CMjDanceRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMjDanceRank_mjDance_2eproto.base);
  return *internal_default_instance();
}


void CMjDanceRank::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.CMjDanceRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMjDanceRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMjDanceRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.CMjDanceRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.CMjDanceRank)
  return target;
}

size_t CMjDanceRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.CMjDanceRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMjDanceRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.CMjDanceRank)
  GOOGLE_DCHECK_NE(&from, this);
  const CMjDanceRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMjDanceRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.CMjDanceRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.CMjDanceRank)
    MergeFrom(*source);
  }
}

void CMjDanceRank::MergeFrom(const CMjDanceRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.CMjDanceRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMjDanceRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.CMjDanceRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMjDanceRank::CopyFrom(const CMjDanceRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.CMjDanceRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMjDanceRank::IsInitialized() const {
  return true;
}

void CMjDanceRank::InternalSwap(CMjDanceRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMjDanceRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMjDanceRank::InitAsDefaultInstance() {
}
class SMjDanceRank::_Internal {
 public:
};

SMjDanceRank::SMjDanceRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.SMjDanceRank)
}
SMjDanceRank::SMjDanceRank(const SMjDanceRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&myscore_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(myscore_));
  // @@protoc_insertion_point(copy_constructor:mj.SMjDanceRank)
}

void SMjDanceRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMjDanceRank_mjDance_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&myscore_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(myscore_));
}

SMjDanceRank::~SMjDanceRank() {
  // @@protoc_insertion_point(destructor:mj.SMjDanceRank)
  SharedDtor();
}

void SMjDanceRank::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SMjDanceRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMjDanceRank& SMjDanceRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMjDanceRank_mjDance_2eproto.base);
  return *internal_default_instance();
}


void SMjDanceRank::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.SMjDanceRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&myscore_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(myscore_));
  _internal_metadata_.Clear();
}

const char* SMjDanceRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.SMjDanceRank.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 startTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 myRank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          myrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 defeatPercent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          defeatpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 myScore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          myscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mj.BMjDanceRank list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMjDanceRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.SMjDanceRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.SMjDanceRank.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // int64 startTime = 2;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_starttime(), target);
  }

  // int64 endTime = 3;
  if (this->endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_endtime(), target);
  }

  // int32 myRank = 4;
  if (this->myrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_myrank(), target);
  }

  // int32 defeatPercent = 5;
  if (this->defeatpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_defeatpercent(), target);
  }

  // int32 myScore = 6;
  if (this->myscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_myscore(), target);
  }

  // repeated .mj.BMjDanceRank list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.SMjDanceRank)
  return target;
}

size_t SMjDanceRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.SMjDanceRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mj.BMjDanceRank list = 7;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int64 startTime = 2;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_starttime());
  }

  // int64 endTime = 3;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endtime());
  }

  // int32 myRank = 4;
  if (this->myrank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_myrank());
  }

  // int32 defeatPercent = 5;
  if (this->defeatpercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_defeatpercent());
  }

  // int32 myScore = 6;
  if (this->myscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_myscore());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMjDanceRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.SMjDanceRank)
  GOOGLE_DCHECK_NE(&from, this);
  const SMjDanceRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMjDanceRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.SMjDanceRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.SMjDanceRank)
    MergeFrom(*source);
  }
}

void SMjDanceRank::MergeFrom(const SMjDanceRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.SMjDanceRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.myrank() != 0) {
    _internal_set_myrank(from._internal_myrank());
  }
  if (from.defeatpercent() != 0) {
    _internal_set_defeatpercent(from._internal_defeatpercent());
  }
  if (from.myscore() != 0) {
    _internal_set_myscore(from._internal_myscore());
  }
}

void SMjDanceRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.SMjDanceRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMjDanceRank::CopyFrom(const SMjDanceRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.SMjDanceRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMjDanceRank::IsInitialized() const {
  return true;
}

void SMjDanceRank::InternalSwap(SMjDanceRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(myrank_, other->myrank_);
  swap(defeatpercent_, other->defeatpercent_);
  swap(myscore_, other->myscore_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMjDanceRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMjDanceRank::InitAsDefaultInstance() {
}
class BMjDanceRank::_Internal {
 public:
};

BMjDanceRank::BMjDanceRank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mj.BMjDanceRank)
}
BMjDanceRank::BMjDanceRank(const BMjDanceRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usericon().empty()) {
    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  ipcity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipcity().empty()) {
    ipcity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipcity_);
  }
  usertitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usertitle().empty()) {
    usertitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usertitle_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatarkey_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(avatarkey_));
  // @@protoc_insertion_point(copy_constructor:mj.BMjDanceRank)
}

void BMjDanceRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BMjDanceRank_mjDance_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usericon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipcity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usertitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarkey_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(avatarkey_));
}

BMjDanceRank::~BMjDanceRank() {
  // @@protoc_insertion_point(destructor:mj.BMjDanceRank)
  SharedDtor();
}

void BMjDanceRank::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usericon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipcity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usertitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BMjDanceRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMjDanceRank& BMjDanceRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMjDanceRank_mjDance_2eproto.base);
  return *internal_default_instance();
}


void BMjDanceRank::Clear() {
// @@protoc_insertion_point(message_clear_start:mj.BMjDanceRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipcity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usertitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarkey_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(avatarkey_));
  _internal_metadata_.Clear();
}

const char* BMjDanceRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.BMjDanceRank.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userIcon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_usericon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.BMjDanceRank.userIcon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipCity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ipcity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.BMjDanceRank.ipCity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userTitle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_usertitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mj.BMjDanceRank.userTitle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMjDanceRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mj.BMjDanceRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.BMjDanceRank.nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 rank = 4;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rank(), target);
  }

  // int32 avatarId = 5;
  if (this->avatarid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_avatarid(), target);
  }

  // int32 avatarKey = 6;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_avatarkey(), target);
  }

  // string userIcon = 7;
  if (this->usericon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usericon().data(), static_cast<int>(this->_internal_usericon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.BMjDanceRank.userIcon");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_usericon(), target);
  }

  // string ipCity = 8;
  if (this->ipcity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipcity().data(), static_cast<int>(this->_internal_ipcity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.BMjDanceRank.ipCity");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ipcity(), target);
  }

  // string userTitle = 9;
  if (this->usertitle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usertitle().data(), static_cast<int>(this->_internal_usertitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mj.BMjDanceRank.userTitle");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_usertitle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mj.BMjDanceRank)
  return target;
}

size_t BMjDanceRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mj.BMjDanceRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string userIcon = 7;
  if (this->usericon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usericon());
  }

  // string ipCity = 8;
  if (this->ipcity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipcity());
  }

  // string userTitle = 9;
  if (this->usertitle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usertitle());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 rank = 4;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // int32 avatarId = 5;
  if (this->avatarid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarid());
  }

  // int32 avatarKey = 6;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMjDanceRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mj.BMjDanceRank)
  GOOGLE_DCHECK_NE(&from, this);
  const BMjDanceRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMjDanceRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mj.BMjDanceRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mj.BMjDanceRank)
    MergeFrom(*source);
  }
}

void BMjDanceRank::MergeFrom(const BMjDanceRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mj.BMjDanceRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.usericon().size() > 0) {

    usericon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usericon_);
  }
  if (from.ipcity().size() > 0) {

    ipcity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipcity_);
  }
  if (from.usertitle().size() > 0) {

    usertitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usertitle_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.avatarid() != 0) {
    _internal_set_avatarid(from._internal_avatarid());
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
}

void BMjDanceRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mj.BMjDanceRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMjDanceRank::CopyFrom(const BMjDanceRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mj.BMjDanceRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMjDanceRank::IsInitialized() const {
  return true;
}

void BMjDanceRank::InternalSwap(BMjDanceRank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usericon_.Swap(&other->usericon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipcity_.Swap(&other->ipcity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usertitle_.Swap(&other->usertitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(score_, other->score_);
  swap(rank_, other->rank_);
  swap(avatarid_, other->avatarid_);
  swap(avatarkey_, other->avatarkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMjDanceRank::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mj
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mj::CMjDancePosition* Arena::CreateMaybeMessage< ::mj::CMjDancePosition >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjDancePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjDancePosition* Arena::CreateMaybeMessage< ::mj::SMjDancePosition >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjDancePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::BMjDancePosition* Arena::CreateMaybeMessage< ::mj::BMjDancePosition >(Arena* arena) {
  return Arena::CreateInternal< ::mj::BMjDancePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjUserDanceAction* Arena::CreateMaybeMessage< ::mj::CMjUserDanceAction >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjUserDanceAction >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjUserDanceAction* Arena::CreateMaybeMessage< ::mj::SMjUserDanceAction >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjUserDanceAction >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjDanceStatus* Arena::CreateMaybeMessage< ::mj::CMjDanceStatus >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjDanceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjDanceStatus* Arena::CreateMaybeMessage< ::mj::SMjDanceStatus >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjDanceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjDanceScore* Arena::CreateMaybeMessage< ::mj::CMjDanceScore >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjDanceScore >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjDanceScore* Arena::CreateMaybeMessage< ::mj::SMjDanceScore >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjDanceScore >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::CMjDanceRank* Arena::CreateMaybeMessage< ::mj::CMjDanceRank >(Arena* arena) {
  return Arena::CreateInternal< ::mj::CMjDanceRank >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::SMjDanceRank* Arena::CreateMaybeMessage< ::mj::SMjDanceRank >(Arena* arena) {
  return Arena::CreateInternal< ::mj::SMjDanceRank >(arena);
}
template<> PROTOBUF_NOINLINE ::mj::BMjDanceRank* Arena::CreateMaybeMessage< ::mj::BMjDanceRank >(Arena* arena) {
  return Arena::CreateInternal< ::mj::BMjDanceRank >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
